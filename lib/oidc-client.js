(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Log = __webpack_require__(1);
	
	Object.defineProperty(exports, 'Log', {
	  enumerable: true,
	  get: function get() {
	    return _Log.Log;
	  }
	});
	
	var _OidcClient = __webpack_require__(2);
	
	Object.defineProperty(exports, 'OidcClient', {
	  enumerable: true,
	  get: function get() {
	    return _OidcClient.OidcClient;
	  }
	});
	
	var _OidcClientSettings = __webpack_require__(3);
	
	Object.defineProperty(exports, 'OidcClientSettings', {
	  enumerable: true,
	  get: function get() {
	    return _OidcClientSettings.OidcClientSettings;
	  }
	});
	
	var _WebStorageStateStore = __webpack_require__(4);
	
	Object.defineProperty(exports, 'WebStorageStateStore', {
	  enumerable: true,
	  get: function get() {
	    return _WebStorageStateStore.WebStorageStateStore;
	  }
	});
	
	var _InMemoryWebStorage = __webpack_require__(22);
	
	Object.defineProperty(exports, 'InMemoryWebStorage', {
	  enumerable: true,
	  get: function get() {
	    return _InMemoryWebStorage.InMemoryWebStorage;
	  }
	});
	
	var _UserManager = __webpack_require__(23);
	
	Object.defineProperty(exports, 'UserManager', {
	  enumerable: true,
	  get: function get() {
	    return _UserManager.UserManager;
	  }
	});
	
	var _AccessTokenEvents = __webpack_require__(32);
	
	Object.defineProperty(exports, 'AccessTokenEvents', {
	  enumerable: true,
	  get: function get() {
	    return _AccessTokenEvents.AccessTokenEvents;
	  }
	});
	
	var _MetadataService = __webpack_require__(7);
	
	Object.defineProperty(exports, 'MetadataService', {
	  enumerable: true,
	  get: function get() {
	    return _MetadataService.MetadataService;
	  }
	});
	
	var _CordovaPopupNavigator = __webpack_require__(39);
	
	Object.defineProperty(exports, 'CordovaPopupNavigator', {
	  enumerable: true,
	  get: function get() {
	    return _CordovaPopupNavigator.CordovaPopupNavigator;
	  }
	});
	
	var _CordovaIFrameNavigator = __webpack_require__(41);
	
	Object.defineProperty(exports, 'CordovaIFrameNavigator', {
	  enumerable: true,
	  get: function get() {
	    return _CordovaIFrameNavigator.CordovaIFrameNavigator;
	  }
	});
	
	var _CheckSessionIFrame = __webpack_require__(37);
	
	Object.defineProperty(exports, 'CheckSessionIFrame', {
	  enumerable: true,
	  get: function get() {
	    return _CheckSessionIFrame.CheckSessionIFrame;
	  }
	});
	
	var _TokenRevocationClient = __webpack_require__(38);
	
	Object.defineProperty(exports, 'TokenRevocationClient', {
	  enumerable: true,
	  get: function get() {
	    return _TokenRevocationClient.TokenRevocationClient;
	  }
	});
	
	var _SessionMonitor = __webpack_require__(36);
	
	Object.defineProperty(exports, 'SessionMonitor', {
	  enumerable: true,
	  get: function get() {
	    return _SessionMonitor.SessionMonitor;
	  }
	});
	
	var _Global = __webpack_require__(5);
	
	Object.defineProperty(exports, 'Global', {
	  enumerable: true,
	  get: function get() {
	    return _Global.Global;
	  }
	});
	
	var _User = __webpack_require__(30);
	
	Object.defineProperty(exports, 'User', {
	  enumerable: true,
	  get: function get() {
	    return _User.User;
	  }
	});

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var nopLogger = {
	    debug: function debug() {},
	    info: function info() {},
	    warn: function warn() {},
	    error: function error() {}
	};
	
	var NONE = 0;
	var ERROR = 1;
	var WARN = 2;
	var INFO = 3;
	var DEBUG = 4;
	
	var logger = void 0;
	var level = void 0;
	
	var Log = exports.Log = function () {
	    function Log() {
	        _classCallCheck(this, Log);
	    }
	
	    Log.reset = function reset() {
	        level = INFO;
	        logger = nopLogger;
	    };
	
	    Log.debug = function debug() {
	        if (level >= DEBUG) {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	            }
	
	            logger.debug.apply(logger, Array.from(args));
	        }
	    };
	
	    Log.info = function info() {
	        if (level >= INFO) {
	            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                args[_key2] = arguments[_key2];
	            }
	
	            logger.info.apply(logger, Array.from(args));
	        }
	    };
	
	    Log.warn = function warn() {
	        if (level >= WARN) {
	            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	                args[_key3] = arguments[_key3];
	            }
	
	            logger.warn.apply(logger, Array.from(args));
	        }
	    };
	
	    Log.error = function error() {
	        if (level >= ERROR) {
	            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	                args[_key4] = arguments[_key4];
	            }
	
	            logger.error.apply(logger, Array.from(args));
	        }
	    };
	
	    _createClass(Log, null, [{
	        key: "NONE",
	        get: function get() {
	            return NONE;
	        }
	    }, {
	        key: "ERROR",
	        get: function get() {
	            return ERROR;
	        }
	    }, {
	        key: "WARN",
	        get: function get() {
	            return WARN;
	        }
	    }, {
	        key: "INFO",
	        get: function get() {
	            return INFO;
	        }
	    }, {
	        key: "DEBUG",
	        get: function get() {
	            return DEBUG;
	        }
	    }, {
	        key: "level",
	        get: function get() {
	            return level;
	        },
	        set: function set(value) {
	            if (NONE <= value && value <= DEBUG) {
	                level = value;
	            } else {
	                throw new Error("Invalid log level");
	            }
	        }
	    }, {
	        key: "logger",
	        get: function get() {
	            return logger;
	        },
	        set: function set(value) {
	            if (!value.debug && value.info) {
	                // just to stay backwards compat. can remove in 2.0
	                value.debug = value.info;
	            }
	
	            if (value.debug && value.info && value.warn && value.error) {
	                logger = value;
	            } else {
	                throw new Error("Invalid logger");
	            }
	        }
	    }]);
	
	    return Log;
	}();
	
	Log.reset();

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.OidcClient = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _OidcClientSettings = __webpack_require__(3);
	
	var _ErrorResponse = __webpack_require__(10);
	
	var _SigninRequest = __webpack_require__(14);
	
	var _SigninResponse = __webpack_require__(19);
	
	var _SignoutRequest = __webpack_require__(20);
	
	var _SignoutResponse = __webpack_require__(21);
	
	var _SigninState = __webpack_require__(16);
	
	var _State = __webpack_require__(17);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var OidcClient = exports.OidcClient = function () {
	    function OidcClient() {
	        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        _classCallCheck(this, OidcClient);
	
	        if (settings instanceof _OidcClientSettings.OidcClientSettings) {
	            this._settings = settings;
	        } else {
	            this._settings = new _OidcClientSettings.OidcClientSettings(settings);
	        }
	    }
	
	    OidcClient.prototype.createSigninRequest = function createSigninRequest() {
	        var _this = this;
	
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            response_type = _ref.response_type,
	            scope = _ref.scope,
	            redirect_uri = _ref.redirect_uri,
	            data = _ref.data,
	            state = _ref.state,
	            prompt = _ref.prompt,
	            display = _ref.display,
	            max_age = _ref.max_age,
	            ui_locales = _ref.ui_locales,
	            id_token_hint = _ref.id_token_hint,
	            login_hint = _ref.login_hint,
	            acr_values = _ref.acr_values,
	            resource = _ref.resource,
	            request = _ref.request,
	            request_uri = _ref.request_uri,
	            extraQueryParams = _ref.extraQueryParams;
	
	        var stateStore = arguments[1];
	
	        _Log.Log.debug("OidcClient.createSigninRequest");
	
	        var client_id = this._settings.client_id;
	        response_type = response_type || this._settings.response_type;
	        scope = scope || this._settings.scope;
	        redirect_uri = redirect_uri || this._settings.redirect_uri;
	
	        // id_token_hint, login_hint aren't allowed on _settings
	        prompt = prompt || this._settings.prompt;
	        display = display || this._settings.display;
	        max_age = max_age || this._settings.max_age;
	        ui_locales = ui_locales || this._settings.ui_locales;
	        acr_values = acr_values || this._settings.acr_values;
	        resource = resource || this._settings.resource;
	        extraQueryParams = extraQueryParams || this._settings.extraQueryParams;
	
	        var authority = this._settings.authority;
	
	        return this._metadataService.getAuthorizationEndpoint().then(function (url) {
	            _Log.Log.debug("OidcClient.createSigninRequest: Received authorization endpoint", url);
	
	            var signinRequest = new _SigninRequest.SigninRequest({
	                url: url,
	                client_id: client_id,
	                redirect_uri: redirect_uri,
	                response_type: response_type,
	                scope: scope,
	                data: data || state,
	                authority: authority,
	                prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values,
	                resource: resource, request: request, request_uri: request_uri, extraQueryParams: extraQueryParams
	            });
	
	            var signinState = signinRequest.state;
	            stateStore = stateStore || _this._stateStore;
	
	            return stateStore.set(signinState.id, signinState.toStorageString()).then(function () {
	                return signinRequest;
	            });
	        });
	    };
	
	    OidcClient.prototype.processSigninResponse = function processSigninResponse(url, stateStore) {
	        var _this2 = this;
	
	        _Log.Log.debug("OidcClient.processSigninResponse");
	
	        var response = new _SigninResponse.SigninResponse(url);
	
	        if (!response.state) {
	            _Log.Log.error("OidcClient.processSigninResponse: No state in response");
	            return Promise.reject(new Error("No state in response"));
	        }
	
	        stateStore = stateStore || this._stateStore;
	
	        return stateStore.remove(response.state).then(function (storedStateString) {
	            if (!storedStateString) {
	                _Log.Log.error("OidcClient.processSigninResponse: No matching state found in storage");
	                throw new Error("No matching state found in storage");
	            }
	
	            var state = _SigninState.SigninState.fromStorageString(storedStateString);
	
	            _Log.Log.debug("OidcClient.processSigninResponse: Received state from storage; validating response");
	            return _this2._validator.validateSigninResponse(state, response);
	        });
	    };
	
	    OidcClient.prototype.createSignoutRequest = function createSignoutRequest() {
	        var _this3 = this;
	
	        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            id_token_hint = _ref2.id_token_hint,
	            data = _ref2.data,
	            state = _ref2.state,
	            post_logout_redirect_uri = _ref2.post_logout_redirect_uri;
	
	        var stateStore = arguments[1];
	
	        _Log.Log.debug("OidcClient.createSignoutRequest");
	
	        post_logout_redirect_uri = post_logout_redirect_uri || this._settings.post_logout_redirect_uri;
	
	        return this._metadataService.getEndSessionEndpoint().then(function (url) {
	            if (!url) {
	                _Log.Log.error("OidcClient.createSignoutRequest: No end session endpoint url returned");
	                throw new Error("no end session endpoint");
	            }
	
	            _Log.Log.debug("OidcClient.createSignoutRequest: Received end session endpoint", url);
	
	            var request = new _SignoutRequest.SignoutRequest({
	                url: url,
	                id_token_hint: id_token_hint,
	                post_logout_redirect_uri: post_logout_redirect_uri,
	                data: data || state
	            });
	
	            var signoutState = request.state;
	            if (signoutState) {
	                _Log.Log.debug("OidcClient.createSignoutRequest: Signout request has state to persist");
	
	                stateStore = stateStore || _this3._stateStore;
	                stateStore.set(signoutState.id, signoutState.toStorageString());
	            }
	
	            return request;
	        });
	    };
	
	    OidcClient.prototype.processSignoutResponse = function processSignoutResponse(url, stateStore) {
	        var _this4 = this;
	
	        _Log.Log.debug("OidcClient.processSignoutResponse");
	
	        var response = new _SignoutResponse.SignoutResponse(url);
	        if (!response.state) {
	            _Log.Log.debug("OidcClient.processSignoutResponse: No state in response");
	
	            if (response.error) {
	                _Log.Log.warn("OidcClient.processSignoutResponse: Response was error: ", response.error);
	                return Promise.reject(new _ErrorResponse.ErrorResponse(response));
	            }
	
	            return Promise.resolve(response);
	        }
	
	        var stateKey = response.state;
	
	        stateStore = stateStore || this._stateStore;
	
	        return stateStore.remove(stateKey).then(function (storedStateString) {
	            if (!storedStateString) {
	                _Log.Log.error("OidcClient.processSignoutResponse: No matching state found in storage");
	                throw new Error("No matching state found in storage");
	            }
	
	            var state = _State.State.fromStorageString(storedStateString);
	
	            _Log.Log.debug("OidcClient.processSignoutResponse: Received state from storage; validating response");
	            return _this4._validator.validateSignoutResponse(state, response);
	        });
	    };
	
	    OidcClient.prototype.clearStaleState = function clearStaleState(stateStore) {
	        _Log.Log.debug("OidcClient.clearStaleState");
	
	        stateStore = stateStore || this._stateStore;
	
	        return _State.State.clearStaleState(stateStore, this.settings.staleStateAge);
	    };
	
	    _createClass(OidcClient, [{
	        key: '_stateStore',
	        get: function get() {
	            return this.settings.stateStore;
	        }
	    }, {
	        key: '_validator',
	        get: function get() {
	            return this.settings.validator;
	        }
	    }, {
	        key: '_metadataService',
	        get: function get() {
	            return this.settings.metadataService;
	        }
	    }, {
	        key: 'settings',
	        get: function get() {
	            return this._settings;
	        }
	    }, {
	        key: 'metadataService',
	        get: function get() {
	            return this._metadataService;
	        }
	    }]);

	    return OidcClient;
	}();

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.OidcClientSettings = undefined;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _WebStorageStateStore = __webpack_require__(4);
	
	var _ResponseValidator = __webpack_require__(6);
	
	var _MetadataService = __webpack_require__(7);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var OidcMetadataUrlPath = '.well-known/openid-configuration';
	
	var DefaultResponseType = "id_token";
	var DefaultScope = "openid";
	var DefaultStaleStateAge = 60 * 15; // seconds
	var DefaultClockSkewInSeconds = 60 * 5;
	
	var OidcClientSettings = exports.OidcClientSettings = function () {
	    function OidcClientSettings() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            authority = _ref.authority,
	            metadataUrl = _ref.metadataUrl,
	            metadata = _ref.metadata,
	            signingKeys = _ref.signingKeys,
	            client_id = _ref.client_id,
	            client_secret = _ref.client_secret,
	            _ref$response_type = _ref.response_type,
	            response_type = _ref$response_type === undefined ? DefaultResponseType : _ref$response_type,
	            _ref$scope = _ref.scope,
	            scope = _ref$scope === undefined ? DefaultScope : _ref$scope,
	            redirect_uri = _ref.redirect_uri,
	            post_logout_redirect_uri = _ref.post_logout_redirect_uri,
	            prompt = _ref.prompt,
	            display = _ref.display,
	            max_age = _ref.max_age,
	            ui_locales = _ref.ui_locales,
	            acr_values = _ref.acr_values,
	            resource = _ref.resource,
	            _ref$filterProtocolCl = _ref.filterProtocolClaims,
	            filterProtocolClaims = _ref$filterProtocolCl === undefined ? true : _ref$filterProtocolCl,
	            _ref$loadUserInfo = _ref.loadUserInfo,
	            loadUserInfo = _ref$loadUserInfo === undefined ? true : _ref$loadUserInfo,
	            _ref$staleStateAge = _ref.staleStateAge,
	            staleStateAge = _ref$staleStateAge === undefined ? DefaultStaleStateAge : _ref$staleStateAge,
	            _ref$clockSkew = _ref.clockSkew,
	            clockSkew = _ref$clockSkew === undefined ? DefaultClockSkewInSeconds : _ref$clockSkew,
	            _ref$stateStore = _ref.stateStore,
	            stateStore = _ref$stateStore === undefined ? new _WebStorageStateStore.WebStorageStateStore() : _ref$stateStore,
	            _ref$ResponseValidato = _ref.ResponseValidatorCtor,
	            ResponseValidatorCtor = _ref$ResponseValidato === undefined ? _ResponseValidator.ResponseValidator : _ref$ResponseValidato,
	            _ref$MetadataServiceC = _ref.MetadataServiceCtor,
	            MetadataServiceCtor = _ref$MetadataServiceC === undefined ? _MetadataService.MetadataService : _ref$MetadataServiceC,
	            _ref$extraQueryParams = _ref.extraQueryParams,
	            extraQueryParams = _ref$extraQueryParams === undefined ? {} : _ref$extraQueryParams;
	
	        _classCallCheck(this, OidcClientSettings);
	
	        this._authority = authority;
	        this._metadataUrl = metadataUrl;
	        this._metadata = metadata;
	        this._signingKeys = signingKeys;
	
	        this._client_id = client_id;
	        this._client_secret = client_secret;
	        this._response_type = response_type;
	        this._scope = scope;
	        this._redirect_uri = redirect_uri;
	        this._post_logout_redirect_uri = post_logout_redirect_uri;
	
	        this._prompt = prompt;
	        this._display = display;
	        this._max_age = max_age;
	        this._ui_locales = ui_locales;
	        this._acr_values = acr_values;
	        this._resource = resource;
	
	        this._filterProtocolClaims = !!filterProtocolClaims;
	        this._loadUserInfo = !!loadUserInfo;
	        this._staleStateAge = staleStateAge;
	        this._clockSkew = clockSkew;
	
	        this._stateStore = stateStore;
	        this._validator = new ResponseValidatorCtor(this);
	        this._metadataService = new MetadataServiceCtor(this);
	
	        this._extraQueryParams = (typeof extraQueryParams === 'undefined' ? 'undefined' : _typeof(extraQueryParams)) === 'object' ? extraQueryParams : {};
	    }
	
	    // client config
	
	
	    _createClass(OidcClientSettings, [{
	        key: 'client_id',
	        get: function get() {
	            return this._client_id;
	        },
	        set: function set(value) {
	            if (!this._client_id) {
	                // one-time set only
	                this._client_id = value;
	            } else {
	                _Log.Log.error("OidcClientSettings.set_client_id: client_id has already been assigned.");
	                throw new Error("client_id has already been assigned.");
	            }
	        }
	    }, {
	        key: 'client_secret',
	        get: function get() {
	            return this._client_secret;
	        }
	    }, {
	        key: 'response_type',
	        get: function get() {
	            return this._response_type;
	        }
	    }, {
	        key: 'scope',
	        get: function get() {
	            return this._scope;
	        }
	    }, {
	        key: 'redirect_uri',
	        get: function get() {
	            return this._redirect_uri;
	        }
	    }, {
	        key: 'post_logout_redirect_uri',
	        get: function get() {
	            return this._post_logout_redirect_uri;
	        }
	
	        // optional protocol params
	
	    }, {
	        key: 'prompt',
	        get: function get() {
	            return this._prompt;
	        }
	    }, {
	        key: 'display',
	        get: function get() {
	            return this._display;
	        }
	    }, {
	        key: 'max_age',
	        get: function get() {
	            return this._max_age;
	        }
	    }, {
	        key: 'ui_locales',
	        get: function get() {
	            return this._ui_locales;
	        }
	    }, {
	        key: 'acr_values',
	        get: function get() {
	            return this._acr_values;
	        }
	    }, {
	        key: 'resource',
	        get: function get() {
	            return this._resource;
	        }
	
	        // metadata
	
	    }, {
	        key: 'authority',
	        get: function get() {
	            return this._authority;
	        },
	        set: function set(value) {
	            if (!this._authority) {
	                // one-time set only
	                this._authority = value;
	            } else {
	                _Log.Log.error("OidcClientSettings.set_authority: authority has already been assigned.");
	                throw new Error("authority has already been assigned.");
	            }
	        }
	    }, {
	        key: 'metadataUrl',
	        get: function get() {
	            if (!this._metadataUrl) {
	                this._metadataUrl = this.authority;
	
	                if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {
	                    if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {
	                        this._metadataUrl += '/';
	                    }
	                    this._metadataUrl += OidcMetadataUrlPath;
	                }
	            }
	
	            return this._metadataUrl;
	        }
	
	        // settable/cachable metadata values
	
	    }, {
	        key: 'metadata',
	        get: function get() {
	            return this._metadata;
	        },
	        set: function set(value) {
	            this._metadata = value;
	        }
	    }, {
	        key: 'signingKeys',
	        get: function get() {
	            return this._signingKeys;
	        },
	        set: function set(value) {
	            this._signingKeys = value;
	        }
	
	        // behavior flags
	
	    }, {
	        key: 'filterProtocolClaims',
	        get: function get() {
	            return this._filterProtocolClaims;
	        }
	    }, {
	        key: 'loadUserInfo',
	        get: function get() {
	            return this._loadUserInfo;
	        }
	    }, {
	        key: 'staleStateAge',
	        get: function get() {
	            return this._staleStateAge;
	        }
	    }, {
	        key: 'clockSkew',
	        get: function get() {
	            return this._clockSkew;
	        }
	    }, {
	        key: 'stateStore',
	        get: function get() {
	            return this._stateStore;
	        }
	    }, {
	        key: 'validator',
	        get: function get() {
	            return this._validator;
	        }
	    }, {
	        key: 'metadataService',
	        get: function get() {
	            return this._metadataService;
	        }
	
	        // extra query params
	
	    }, {
	        key: 'extraQueryParams',
	        get: function get() {
	            return this._extraQueryParams;
	        },
	        set: function set(value) {
	            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	                this._extraQueryParams = value;
	            } else {
	                this._extraQueryParams = {};
	            }
	        }
	    }]);

	    return OidcClientSettings;
	}();

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.WebStorageStateStore = undefined;
	
	var _Log = __webpack_require__(1);
	
	var _Global = __webpack_require__(5);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var WebStorageStateStore = exports.WebStorageStateStore = function () {
	    function WebStorageStateStore() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            _ref$prefix = _ref.prefix,
	            prefix = _ref$prefix === undefined ? "oidc." : _ref$prefix,
	            _ref$store = _ref.store,
	            store = _ref$store === undefined ? _Global.Global.localStorage : _ref$store;
	
	        _classCallCheck(this, WebStorageStateStore);
	
	        this._store = store;
	        this._prefix = prefix;
	    }
	
	    WebStorageStateStore.prototype.set = function set(key, value) {
	        _Log.Log.debug("WebStorageStateStore.set", key);
	
	        key = this._prefix + key;
	
	        this._store.setItem(key, value);
	
	        return Promise.resolve();
	    };
	
	    WebStorageStateStore.prototype.get = function get(key) {
	        _Log.Log.debug("WebStorageStateStore.get", key);
	
	        key = this._prefix + key;
	
	        var item = this._store.getItem(key);
	
	        return Promise.resolve(item);
	    };
	
	    WebStorageStateStore.prototype.remove = function remove(key) {
	        _Log.Log.debug("WebStorageStateStore.remove", key);
	
	        key = this._prefix + key;
	
	        var item = this._store.getItem(key);
	        this._store.removeItem(key);
	
	        return Promise.resolve(item);
	    };
	
	    WebStorageStateStore.prototype.getAllKeys = function getAllKeys() {
	        _Log.Log.debug("WebStorageStateStore.getAllKeys");
	
	        var keys = [];
	
	        for (var index = 0; index < this._store.length; index++) {
	            var key = this._store.key(index);
	
	            if (key.indexOf(this._prefix) === 0) {
	                keys.push(key.substr(this._prefix.length));
	            }
	        }
	
	        return Promise.resolve(keys);
	    };
	
	    return WebStorageStateStore;
	}();

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var timer = {
	    setInterval: function (_setInterval) {
	        function setInterval(_x, _x2) {
	            return _setInterval.apply(this, arguments);
	        }
	
	        setInterval.toString = function () {
	            return _setInterval.toString();
	        };
	
	        return setInterval;
	    }(function (cb, duration) {
	        return setInterval(cb, duration);
	    }),
	    clearInterval: function (_clearInterval) {
	        function clearInterval(_x3) {
	            return _clearInterval.apply(this, arguments);
	        }
	
	        clearInterval.toString = function () {
	            return _clearInterval.toString();
	        };
	
	        return clearInterval;
	    }(function (handle) {
	        return clearInterval(handle);
	    })
	};
	
	var testing = false;
	var request = null;
	
	var Global = exports.Global = function () {
	    function Global() {
	        _classCallCheck(this, Global);
	    }
	
	    Global._testing = function _testing() {
	        testing = true;
	    };
	
	    Global.setXMLHttpRequest = function setXMLHttpRequest(newRequest) {
	        request = newRequest;
	    };
	
	    _createClass(Global, null, [{
	        key: 'location',
	        get: function get() {
	            if (!testing) {
	                return location;
	            }
	        }
	    }, {
	        key: 'localStorage',
	        get: function get() {
	            if (!testing && typeof window !== 'undefined') {
	                return localStorage;
	            }
	        }
	    }, {
	        key: 'sessionStorage',
	        get: function get() {
	            if (!testing && typeof window !== 'undefined') {
	                return sessionStorage;
	            }
	        }
	    }, {
	        key: 'XMLHttpRequest',
	        get: function get() {
	            if (!testing && typeof window !== 'undefined') {
	                return request || XMLHttpRequest;
	            }
	        }
	    }, {
	        key: 'timer',
	        get: function get() {
	            if (!testing) {
	                return timer;
	            }
	        }
	    }]);

	    return Global;
	}();

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.ResponseValidator = undefined;
	
	var _Log = __webpack_require__(1);
	
	var _MetadataService = __webpack_require__(7);
	
	var _UserInfoService = __webpack_require__(9);
	
	var _ErrorResponse = __webpack_require__(10);
	
	var _JoseUtil = __webpack_require__(11);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var ProtocolClaims = ["nonce", "at_hash", "iat", "nbf", "exp", "aud", "iss", "c_hash"];
	
	var ResponseValidator = exports.ResponseValidator = function () {
	    function ResponseValidator(settings) {
	        var MetadataServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _MetadataService.MetadataService;
	        var UserInfoServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _UserInfoService.UserInfoService;
	        var joseUtil = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _JoseUtil.JoseUtil;
	
	        _classCallCheck(this, ResponseValidator);
	
	        if (!settings) {
	            _Log.Log.error("ResponseValidator.ctor: No settings passed to ResponseValidator");
	            throw new Error("settings");
	        }
	
	        this._settings = settings;
	        this._metadataService = new MetadataServiceCtor(this._settings);
	        this._userInfoService = new UserInfoServiceCtor(this._settings);
	        this._joseUtil = joseUtil;
	    }
	
	    ResponseValidator.prototype.validateSigninResponse = function validateSigninResponse(state, response) {
	        var _this = this;
	
	        _Log.Log.debug("ResponseValidator.validateSigninResponse");
	
	        return this._processSigninParams(state, response).then(function (response) {
	            _Log.Log.debug("ResponseValidator.validateSigninResponse: state processed");
	            return _this._validateTokens(state, response).then(function (response) {
	                _Log.Log.debug("ResponseValidator.validateSigninResponse: tokens validated");
	                return _this._processClaims(response).then(function (response) {
	                    _Log.Log.debug("ResponseValidator.validateSigninResponse: claims processed");
	                    return response;
	                });
	            });
	        });
	    };
	
	    ResponseValidator.prototype.validateSignoutResponse = function validateSignoutResponse(state, response) {
	        if (state.id !== response.state) {
	            _Log.Log.error("ResponseValidator.validateSignoutResponse: State does not match");
	            return Promise.reject(new Error("State does not match"));
	        }
	
	        // now that we know the state matches, take the stored data
	        // and set it into the response so callers can get their state
	        // this is important for both success & error outcomes
	        _Log.Log.debug("ResponseValidator.validateSignoutResponse: state validated");
	        response.state = state.data;
	
	        if (response.error) {
	            _Log.Log.warn("ResponseValidator.validateSignoutResponse: Response was error", response.error);
	            return Promise.reject(new _ErrorResponse.ErrorResponse(response));
	        }
	
	        return Promise.resolve(response);
	    };
	
	    ResponseValidator.prototype._processSigninParams = function _processSigninParams(state, response) {
	        if (state.id !== response.state) {
	            _Log.Log.error("ResponseValidator._processSigninParams: State does not match");
	            return Promise.reject(new Error("State does not match"));
	        }
	
	        if (!state.client_id) {
	            _Log.Log.error("ResponseValidator._processSigninParams: No client_id on state");
	            return Promise.reject(new Error("No client_id on state"));
	        }
	
	        if (!state.authority) {
	            _Log.Log.error("ResponseValidator._processSigninParams: No authority on state");
	            return Promise.reject(new Error("No authority on state"));
	        }
	
	        // this allows the authority to be loaded from the signin state
	        if (!this._settings.authority) {
	            this._settings.authority = state.authority;
	        }
	        // ensure we're using the correct authority if the authority is not loaded from signin state
	        else if (this._settings.authority && this._settings.authority !== state.authority) {
	                _Log.Log.error("ResponseValidator._processSigninParams: authority mismatch on settings vs. signin state");
	                return Promise.reject(new Error("authority mismatch on settings vs. signin state"));
	            }
	        // this allows the client_id to be loaded from the signin state
	        if (!this._settings.client_id) {
	            this._settings.client_id = state.client_id;
	        }
	        // ensure we're using the correct client_id if the client_id is not loaded from signin state
	        else if (this._settings.client_id && this._settings.client_id !== state.client_id) {
	                _Log.Log.error("ResponseValidator._processSigninParams: client_id mismatch on settings vs. signin state");
	                return Promise.reject(new Error("client_id mismatch on settings vs. signin state"));
	            }
	
	        // now that we know the state matches, take the stored data
	        // and set it into the response so callers can get their state
	        // this is important for both success & error outcomes
	        _Log.Log.debug("ResponseValidator._processSigninParams: state validated");
	        response.state = state.data;
	
	        if (response.error) {
	            _Log.Log.warn("ResponseValidator._processSigninParams: Response was error", response.error);
	            return Promise.reject(new _ErrorResponse.ErrorResponse(response));
	        }
	
	        if (state.nonce && !response.id_token) {
	            _Log.Log.error("ResponseValidator._processSigninParams: Expecting id_token in response");
	            return Promise.reject(new Error("No id_token in response"));
	        }
	
	        if (!state.nonce && response.id_token) {
	            _Log.Log.error("ResponseValidator._processSigninParams: Not expecting id_token in response");
	            return Promise.reject(new Error("Unexpected id_token in response"));
	        }
	
	        return Promise.resolve(response);
	    };
	
	    ResponseValidator.prototype._processClaims = function _processClaims(response) {
	        var _this2 = this;
	
	        if (response.isOpenIdConnect) {
	            _Log.Log.debug("ResponseValidator._processClaims: response is OIDC, processing claims");
	
	            response.profile = this._filterProtocolClaims(response.profile);
	
	            if (this._settings.loadUserInfo && response.access_token) {
	                _Log.Log.debug("ResponseValidator._processClaims: loading user info");
	
	                return this._userInfoService.getClaims(response.access_token).then(function (claims) {
	                    _Log.Log.debug("ResponseValidator._processClaims: user info claims received from user info endpoint");
	
	                    if (claims.sub !== response.profile.sub) {
	                        _Log.Log.error("ResponseValidator._processClaims: sub from user info endpoint does not match sub in access_token");
	                        return Promise.reject(new Error("sub from user info endpoint does not match sub in access_token"));
	                    }
	
	                    response.profile = _this2._mergeClaims(response.profile, claims);
	                    _Log.Log.debug("ResponseValidator._processClaims: user info claims received, updated profile:", response.profile);
	
	                    return response;
	                });
	            } else {
	                _Log.Log.debug("ResponseValidator._processClaims: not loading user info");
	            }
	        } else {
	            _Log.Log.debug("ResponseValidator._processClaims: response is not OIDC, not processing claims");
	        }
	
	        return Promise.resolve(response);
	    };
	
	    ResponseValidator.prototype._mergeClaims = function _mergeClaims(claims1, claims2) {
	        var result = Object.assign({}, claims1);
	
	        for (var name in claims2) {
	            var values = claims2[name];
	            if (!Array.isArray(values)) {
	                values = [values];
	            }
	
	            for (var i = 0; i < values.length; i++) {
	                var value = values[i];
	                if (!result[name]) {
	                    result[name] = value;
	                } else if (Array.isArray(result[name])) {
	                    if (result[name].indexOf(value) < 0) {
	                        result[name].push(value);
	                    }
	                } else if (result[name] !== value) {
	                    result[name] = [result[name], value];
	                }
	            }
	        }
	
	        return result;
	    };
	
	    ResponseValidator.prototype._filterProtocolClaims = function _filterProtocolClaims(claims) {
	        _Log.Log.debug("ResponseValidator._filterProtocolClaims, incoming claims:", claims);
	
	        var result = Object.assign({}, claims);
	
	        if (this._settings._filterProtocolClaims) {
	            ProtocolClaims.forEach(function (type) {
	                delete result[type];
	            });
	
	            _Log.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims filtered", result);
	        } else {
	            _Log.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims not filtered");
	        }
	
	        return result;
	    };
	
	    ResponseValidator.prototype._validateTokens = function _validateTokens(state, response) {
	        if (response.id_token) {
	            if (response.access_token) {
	                _Log.Log.debug("ResponseValidator._validateTokens: Validating id_token and access_token");
	                return this._validateIdTokenAndAccessToken(state, response);
	            }
	
	            _Log.Log.debug("ResponseValidator._validateTokens: Validating id_token");
	            return this._validateIdToken(state, response);
	        }
	
	        _Log.Log.debug("ResponseValidator._validateTokens: No id_token to validate");
	        return Promise.resolve(response);
	    };
	
	    ResponseValidator.prototype._validateIdTokenAndAccessToken = function _validateIdTokenAndAccessToken(state, response) {
	        var _this3 = this;
	
	        return this._validateIdToken(state, response).then(function (response) {
	            return _this3._validateAccessToken(response);
	        });
	    };
	
	    ResponseValidator.prototype._validateIdToken = function _validateIdToken(state, response) {
	        var _this4 = this;
	
	        if (!state.nonce) {
	            _Log.Log.error("ResponseValidator._validateIdToken: No nonce on state");
	            return Promise.reject(new Error("No nonce on state"));
	        }
	
	        var jwt = this._joseUtil.parseJwt(response.id_token);
	        if (!jwt || !jwt.header || !jwt.payload) {
	            _Log.Log.error("ResponseValidator._validateIdToken: Failed to parse id_token", jwt);
	            return Promise.reject(new Error("Failed to parse id_token"));
	        }
	
	        if (state.nonce !== jwt.payload.nonce) {
	            _Log.Log.error("ResponseValidator._validateIdToken: Invalid nonce in id_token");
	            return Promise.reject(new Error("Invalid nonce in id_token"));
	        }
	
	        var kid = jwt.header.kid;
	
	        return this._metadataService.getIssuer().then(function (issuer) {
	            _Log.Log.debug("ResponseValidator._validateIdToken: Received issuer");
	
	            return _this4._metadataService.getSigningKeys().then(function (keys) {
	                if (!keys) {
	                    _Log.Log.error("ResponseValidator._validateIdToken: No signing keys from metadata");
	                    return Promise.reject(new Error("No signing keys from metadata"));
	                }
	
	                _Log.Log.debug("ResponseValidator._validateIdToken: Received signing keys");
	                var key = void 0;
	                if (!kid) {
	                    keys = _this4._filterByAlg(keys, jwt.header.alg);
	
	                    if (keys.length > 1) {
	                        _Log.Log.error("ResponseValidator._validateIdToken: No kid found in id_token and more than one key found in metadata");
	                        return Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));
	                    } else {
	                        // kid is mandatory only when there are multiple keys in the referenced JWK Set document
	                        // see http://openid.net/specs/openid-connect-core-1_0.html#Signing
	                        key = keys[0];
	                    }
	                } else {
	                    key = keys.filter(function (key) {
	                        return key.kid === kid;
	                    })[0];
	                }
	
	                if (!key) {
	                    _Log.Log.error("ResponseValidator._validateIdToken: No key matching kid or alg found in signing keys");
	                    return Promise.reject(new Error("No key matching kid or alg found in signing keys"));
	                }
	
	                var audience = state.client_id;
	
	                var clockSkewInSeconds = _this4._settings.clockSkew;
	                _Log.Log.debug("ResponseValidator._validateIdToken: Validaing JWT; using clock skew (in seconds) of: ", clockSkewInSeconds);
	
	                return _this4._joseUtil.validateJwt(response.id_token, key, issuer, audience, clockSkewInSeconds).then(function () {
	                    _Log.Log.debug("ResponseValidator._validateIdToken: JWT validation successful");
	
	                    if (!jwt.payload.sub) {
	                        _Log.Log.error("ResponseValidator._validateIdToken: No sub present in id_token");
	                        return Promise.reject(new Error("No sub present in id_token"));
	                    }
	
	                    response.profile = jwt.payload;
	
	                    return response;
	                });
	            });
	        });
	    };
	
	    ResponseValidator.prototype._filterByAlg = function _filterByAlg(keys, alg) {
	        var kty = null;
	        if (alg.startsWith("RS")) {
	            kty = "RSA";
	        } else if (alg.startsWith("PS")) {
	            kty = "PS";
	        } else if (alg.startsWith("ES")) {
	            kty = "EC";
	        } else {
	            _Log.Log.debug("ResponseValidator._filterByAlg: alg not supported: ", alg);
	            return [];
	        }
	
	        _Log.Log.debug("ResponseValidator._filterByAlg: Looking for keys that match kty: ", kty);
	
	        keys = keys.filter(function (key) {
	            return key.kty === kty;
	        });
	
	        _Log.Log.debug("ResponseValidator._filterByAlg: Number of keys that match kty: ", kty, keys.length);
	
	        return keys;
	    };
	
	    ResponseValidator.prototype._validateAccessToken = function _validateAccessToken(response) {
	        if (!response.profile) {
	            _Log.Log.error("ResponseValidator._validateAccessToken: No profile loaded from id_token");
	            return Promise.reject(new Error("No profile loaded from id_token"));
	        }
	
	        if (!response.profile.at_hash) {
	            _Log.Log.error("ResponseValidator._validateAccessToken: No at_hash in id_token");
	            return Promise.reject(new Error("No at_hash in id_token"));
	        }
	
	        if (!response.id_token) {
	            _Log.Log.error("ResponseValidator._validateAccessToken: No id_token");
	            return Promise.reject(new Error("No id_token"));
	        }
	
	        var jwt = this._joseUtil.parseJwt(response.id_token);
	        if (!jwt || !jwt.header) {
	            _Log.Log.error("ResponseValidator._validateAccessToken: Failed to parse id_token", jwt);
	            return Promise.reject(new Error("Failed to parse id_token"));
	        }
	
	        var hashAlg = jwt.header.alg;
	        if (!hashAlg || hashAlg.length !== 5) {
	            _Log.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg);
	            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
	        }
	
	        var hashBits = hashAlg.substr(2, 3);
	        if (!hashBits) {
	            _Log.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg, hashBits);
	            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
	        }
	
	        hashBits = parseInt(hashBits);
	        if (hashBits !== 256 && hashBits !== 384 && hashBits !== 512) {
	            _Log.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg, hashBits);
	            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
	        }
	
	        var sha = "sha" + hashBits;
	        var hash = this._joseUtil.hashString(response.access_token, sha);
	        if (!hash) {
	            _Log.Log.error("ResponseValidator._validateAccessToken: access_token hash failed:", sha);
	            return Promise.reject(new Error("Failed to validate at_hash"));
	        }
	
	        var left = hash.substr(0, hash.length / 2);
	        var left_b64u = this._joseUtil.hexToBase64Url(left);
	        if (left_b64u !== response.profile.at_hash) {
	            _Log.Log.error("ResponseValidator._validateAccessToken: Failed to validate at_hash", left_b64u, response.profile.at_hash);
	            return Promise.reject(new Error("Failed to validate at_hash"));
	        }
	
	        _Log.Log.debug("ResponseValidator._validateAccessToken: success");
	
	        return Promise.resolve(response);
	    };
	
	    return ResponseValidator;
	}();

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.MetadataService = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _JsonService = __webpack_require__(8);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var OidcMetadataUrlPath = '.well-known/openid-configuration';
	
	var MetadataService = exports.MetadataService = function () {
	    function MetadataService(settings) {
	        var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService.JsonService;
	
	        _classCallCheck(this, MetadataService);
	
	        if (!settings) {
	            _Log.Log.error("MetadataService: No settings passed to MetadataService");
	            throw new Error("settings");
	        }
	
	        this._settings = settings;
	        this._jsonService = new JsonServiceCtor();
	    }
	
	    MetadataService.prototype.getMetadata = function getMetadata() {
	        var _this = this;
	
	        if (this._settings.metadata) {
	            _Log.Log.debug("MetadataService.getMetadata: Returning metadata from settings");
	            return Promise.resolve(this._settings.metadata);
	        }
	
	        if (!this.metadataUrl) {
	            _Log.Log.error("MetadataService.getMetadata: No authority or metadataUrl configured on settings");
	            return Promise.reject(new Error("No authority or metadataUrl configured on settings"));
	        }
	
	        _Log.Log.debug("MetadataService.getMetadata: getting metadata from", this.metadataUrl);
	
	        return this._jsonService.getJson(this.metadataUrl).then(function (metadata) {
	            _Log.Log.debug("MetadataService.getMetadata: json received");
	            _this._settings.metadata = metadata;
	            return metadata;
	        });
	    };
	
	    MetadataService.prototype.getIssuer = function getIssuer() {
	        return this._getMetadataProperty("issuer");
	    };
	
	    MetadataService.prototype.getAuthorizationEndpoint = function getAuthorizationEndpoint() {
	        return this._getMetadataProperty("authorization_endpoint");
	    };
	
	    MetadataService.prototype.getUserInfoEndpoint = function getUserInfoEndpoint() {
	        return this._getMetadataProperty("userinfo_endpoint");
	    };
	
	    MetadataService.prototype.getTokenEndpoint = function getTokenEndpoint() {
	        return this._getMetadataProperty("token_endpoint", true);
	    };
	
	    MetadataService.prototype.getCheckSessionIframe = function getCheckSessionIframe() {
	        return this._getMetadataProperty("check_session_iframe", true);
	    };
	
	    MetadataService.prototype.getEndSessionEndpoint = function getEndSessionEndpoint() {
	        return this._getMetadataProperty("end_session_endpoint", true);
	    };
	
	    MetadataService.prototype.getRevocationEndpoint = function getRevocationEndpoint() {
	        return this._getMetadataProperty("revocation_endpoint", true);
	    };
	
	    MetadataService.prototype._getMetadataProperty = function _getMetadataProperty(name) {
	        var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	        _Log.Log.debug("MetadataService.getMetadataProperty for: " + name);
	
	        return this.getMetadata().then(function (metadata) {
	            _Log.Log.debug("MetadataService.getMetadataProperty: metadata recieved");
	
	            if (metadata[name] === undefined) {
	
	                if (optional === true) {
	                    _Log.Log.warn("MetadataService.getMetadataProperty: Metadata does not contain optional property " + name);
	                    return undefined;
	                } else {
	                    _Log.Log.error("MetadataService.getMetadataProperty: Metadata does not contain property " + name);
	                    throw new Error("Metadata does not contain property " + name);
	                }
	            }
	
	            return metadata[name];
	        });
	    };
	
	    MetadataService.prototype.getSigningKeys = function getSigningKeys() {
	        var _this2 = this;
	
	        if (this._settings.signingKeys) {
	            _Log.Log.debug("MetadataService.getSigningKeys: Returning signingKeys from settings");
	            return Promise.resolve(this._settings.signingKeys);
	        }
	
	        return this._getMetadataProperty("jwks_uri").then(function (jwks_uri) {
	            _Log.Log.debug("MetadataService.getSigningKeys: jwks_uri received", jwks_uri);
	
	            return _this2._jsonService.getJson(jwks_uri).then(function (keySet) {
	                _Log.Log.debug("MetadataService.getSigningKeys: key set received", keySet);
	
	                if (!keySet.keys) {
	                    _Log.Log.error("MetadataService.getSigningKeys: Missing keys on keyset");
	                    throw new Error("Missing keys on keyset");
	                }
	
	                _this2._settings.signingKeys = keySet.keys;
	                return _this2._settings.signingKeys;
	            });
	        });
	    };
	
	    _createClass(MetadataService, [{
	        key: 'metadataUrl',
	        get: function get() {
	            if (!this._metadataUrl) {
	                if (this._settings.metadataUrl) {
	                    this._metadataUrl = this._settings.metadataUrl;
	                } else {
	                    this._metadataUrl = this._settings.authority;
	
	                    if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {
	                        if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {
	                            this._metadataUrl += '/';
	                        }
	                        this._metadataUrl += OidcMetadataUrlPath;
	                    }
	                }
	            }
	
	            return this._metadataUrl;
	        }
	    }]);

	    return MetadataService;
	}();

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.JsonService = undefined;
	
	var _Log = __webpack_require__(1);
	
	var _Global = __webpack_require__(5);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var JsonService = exports.JsonService = function () {
	    function JsonService() {
	        var XMLHttpRequestCtor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _Global.Global.XMLHttpRequest;
	
	        _classCallCheck(this, JsonService);
	
	        this._XMLHttpRequest = XMLHttpRequestCtor;
	    }
	
	    JsonService.prototype.getJson = function getJson(url, token) {
	        var _this = this;
	
	        if (!url) {
	            _Log.Log.error("JsonService.getJson: No url passed");
	            throw new Error("url");
	        }
	
	        _Log.Log.debug("JsonService.getJson, url: ", url);
	
	        return new Promise(function (resolve, reject) {
	
	            var req = new _this._XMLHttpRequest();
	            req.open('GET', url);
	
	            req.onload = function () {
	                _Log.Log.debug("JsonService.getJson: HTTP response received, status", req.status);
	
	                if (req.status === 200) {
	                    var contentType = req.getResponseHeader("Content-Type");
	                    if (contentType && contentType.startsWith("application/json")) {
	                        try {
	                            resolve(JSON.parse(req.responseText));
	                        } catch (e) {
	                            _Log.Log.error("JsonService.getJson: Error parsing JSON response", e.message);
	                            reject(e);
	                        }
	                    } else {
	                        reject(Error("Invalid response Content-Type: " + contentType + ", from URL: " + url));
	                    }
	                } else {
	                    reject(Error(req.statusText + " (" + req.status + ")"));
	                }
	            };
	
	            req.onerror = function () {
	                _Log.Log.error("JsonService.getJson: network error");
	                reject(Error("Network Error"));
	            };
	
	            if (token) {
	                _Log.Log.debug("JsonService.getJson: token passed, setting Authorization header");
	                req.setRequestHeader("Authorization", "Bearer " + token);
	            }
	
	            req.send();
	        });
	    };
	
	    return JsonService;
	}();

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.UserInfoService = undefined;
	
	var _JsonService = __webpack_require__(8);
	
	var _MetadataService = __webpack_require__(7);
	
	var _Log = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var UserInfoService = exports.UserInfoService = function () {
	    function UserInfoService(settings) {
	        var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService.JsonService;
	        var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService.MetadataService;
	
	        _classCallCheck(this, UserInfoService);
	
	        if (!settings) {
	            _Log.Log.error("UserInfoService.ctor: No settings passed");
	            throw new Error("settings");
	        }
	
	        this._settings = settings;
	        this._jsonService = new JsonServiceCtor();
	        this._metadataService = new MetadataServiceCtor(this._settings);
	    }
	
	    UserInfoService.prototype.getClaims = function getClaims(token) {
	        var _this = this;
	
	        if (!token) {
	            _Log.Log.error("UserInfoService.getClaims: No token passed");
	            return Promise.reject(new Error("A token is required"));
	        }
	
	        return this._metadataService.getUserInfoEndpoint().then(function (url) {
	            _Log.Log.debug("UserInfoService.getClaims: received userinfo url", url);
	
	            return _this._jsonService.getJson(url, token).then(function (claims) {
	                _Log.Log.debug("UserInfoService.getClaims: claims received", claims);
	                return claims;
	            });
	        });
	    };
	
	    return UserInfoService;
	}();

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	        value: true
	});
	exports.ErrorResponse = undefined;
	
	var _Log = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var ErrorResponse = exports.ErrorResponse = function (_Error) {
	        _inherits(ErrorResponse, _Error);
	
	        function ErrorResponse() {
	                var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	                    error = _ref.error,
	                    error_description = _ref.error_description,
	                    error_uri = _ref.error_uri,
	                    state = _ref.state;
	
	                _classCallCheck(this, ErrorResponse);
	
	                if (!error) {
	                        _Log.Log.error("No error passed to ErrorResponse");
	                        throw new Error("error");
	                }
	
	                var _this = _possibleConstructorReturn(this, _Error.call(this, error_description || error));
	
	                _this.name = "ErrorResponse";
	
	                _this.error = error;
	                _this.error_description = error_description;
	                _this.error_uri = error_uri;
	
	                _this.state = state;
	                return _this;
	        }
	
	        return ErrorResponse;
	}(Error);

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.JoseUtil = undefined;
	
	var _jsrsasign = __webpack_require__(12);
	
	var _Log = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	//import { jws, KEYUTIL as KeyUtil, X509, crypto, hextob64u, b64tohex } from 'jsrsasign';
	
	
	var AllowedSigningAlgs = ['RS256', 'RS384', 'RS512', 'PS256', 'PS384', 'PS512', 'ES256', 'ES384', 'ES512'];
	
	var JoseUtil = exports.JoseUtil = function () {
	    function JoseUtil() {
	        _classCallCheck(this, JoseUtil);
	    }
	
	    JoseUtil.parseJwt = function parseJwt(jwt) {
	        _Log.Log.debug("JoseUtil.parseJwt");
	        try {
	            var token = _jsrsasign.jws.JWS.parse(jwt);
	            return {
	                header: token.headerObj,
	                payload: token.payloadObj
	            };
	        } catch (e) {
	            _Log.Log.error(e);
	        }
	    };
	
	    JoseUtil.validateJwt = function validateJwt(jwt, key, issuer, audience, clockSkew, now) {
	        _Log.Log.debug("JoseUtil.validateJwt");
	
	        try {
	            if (key.kty === "RSA") {
	                if (key.e && key.n) {
	                    key = _jsrsasign.KEYUTIL.getKey(key);
	                } else if (key.x5c && key.x5c.length) {
	                    var hex = (0, _jsrsasign.b64tohex)(key.x5c[0]);
	                    key = _jsrsasign.X509.getPublicKeyFromCertHex(hex);
	                } else {
	                    _Log.Log.error("JoseUtil.validateJwt: RSA key missing key material", key);
	                    return Promise.reject(new Error("RSA key missing key material"));
	                }
	            } else if (key.kty === "EC") {
	                if (key.crv && key.x && key.y) {
	                    key = _jsrsasign.KEYUTIL.getKey(key);
	                } else {
	                    _Log.Log.error("JoseUtil.validateJwt: EC key missing key material", key);
	                    return Promise.reject(new Error("EC key missing key material"));
	                }
	            } else {
	                _Log.Log.error("JoseUtil.validateJwt: Unsupported key type", key && key.kty);
	                return Promise.reject(new Error("Unsupported key type: " + key && key.kty));
	            }
	
	            return JoseUtil._validateJwt(jwt, key, issuer, audience, clockSkew, now);
	        } catch (e) {
	            _Log.Log.error(e && e.message || e);
	            return Promise.reject("JWT validation failed");
	        }
	    };
	
	    JoseUtil._validateJwt = function _validateJwt(jwt, key, issuer, audience, clockSkew, now) {
	        if (!clockSkew) {
	            clockSkew = 0;
	        }
	
	        if (!now) {
	            now = parseInt(Date.now() / 1000);
	        }
	
	        var payload = JoseUtil.parseJwt(jwt).payload;
	
	        if (!payload.iss) {
	            _Log.Log.error("JoseUtil._validateJwt: issuer was not provided");
	            return Promise.reject(new Error("issuer was not provided"));
	        }
	        if (payload.iss !== issuer) {
	            _Log.Log.error("JoseUtil._validateJwt: Invalid issuer in token", payload.iss);
	            return Promise.reject(new Error("Invalid issuer in token: " + payload.iss));
	        }
	
	        if (!payload.aud) {
	            _Log.Log.error("JoseUtil._validateJwt: aud was not provided");
	            return Promise.reject(new Error("aud was not provided"));
	        }
	        var validAudience = payload.aud === audience || Array.isArray(payload.aud) && payload.aud.indexOf(audience) >= 0;
	        if (!validAudience) {
	            _Log.Log.error("JoseUtil._validateJwt: Invalid audience in token", payload.aud);
	            return Promise.reject(new Error("Invalid audience in token: " + payload.aud));
	        }
	
	        var lowerNow = now + clockSkew;
	        var upperNow = now - clockSkew;
	
	        if (!payload.iat) {
	            _Log.Log.error("JoseUtil._validateJwt: iat was not provided");
	            return Promise.reject(new Error("iat was not provided"));
	        }
	        if (lowerNow < payload.iat) {
	            _Log.Log.error("JoseUtil._validateJwt: iat is in the future", payload.iat);
	            return Promise.reject(new Error("iat is in the future: " + payload.iat));
	        }
	
	        if (payload.nbf && lowerNow < payload.nbf) {
	            _Log.Log.error("JoseUtil._validateJwt: nbf is in the future", payload.nbf);
	            return Promise.reject(new Error("nbf is in the future: " + payload.nbf));
	        }
	
	        if (!payload.exp) {
	            _Log.Log.error("JoseUtil._validateJwt: exp was not provided");
	            return Promise.reject(new Error("exp was not provided"));
	        }
	        if (payload.exp < upperNow) {
	            _Log.Log.error("JoseUtil._validateJwt: exp is in the past", payload.exp);
	            return Promise.reject(new Error("exp is in the past:" + payload.exp));
	        }
	
	        try {
	            if (!_jsrsasign.jws.JWS.verify(jwt, key, AllowedSigningAlgs)) {
	                _Log.Log.error("JoseUtil._validateJwt: signature validation failed");
	                return Promise.reject(new Error("signature validation failed"));
	            }
	        } catch (e) {
	            _Log.Log.error(e && e.message || e);
	            return Promise.reject(new Error("signature validation failed"));
	        }
	
	        return Promise.resolve();
	    };
	
	    JoseUtil.hashString = function hashString(value, alg) {
	        try {
	            return _jsrsasign.crypto.Util.hashString(value, alg);
	        } catch (e) {
	            _Log.Log.error(e);
	        }
	    };
	
	    JoseUtil.hexToBase64Url = function hexToBase64Url(value) {
	        try {
	            return (0, _jsrsasign.hextob64u)(value);
	        } catch (e) {
	            _Log.Log.error(e);
	        }
	    };
	
	    return JoseUtil;
	}();

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*
	 * jsrsasign(all) 8.0.12 (2018-04-22) (c) 2010-2018 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	
	var navigator = {};
	navigator.userAgent = false;
	
	var window = {};
	
	/*!
	Copyright (c) 2011, Yahoo! Inc. All rights reserved.
	Code licensed under the BSD License:
	http://developer.yahoo.com/yui/license.html
	version: 2.9.0
	*/
	if (YAHOO === undefined) {
	  var YAHOO = {};
	}YAHOO.lang = { extend: function extend(g, h, f) {
	    if (!h || !g) {
	      throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");
	    }var d = function d() {};d.prototype = h.prototype;g.prototype = new d();g.prototype.constructor = g;g.superclass = h.prototype;if (h.prototype.constructor == Object.prototype.constructor) {
	      h.prototype.constructor = h;
	    }if (f) {
	      var b;for (b in f) {
	        g.prototype[b] = f[b];
	      }var e = function e() {},
	          c = ["toString", "valueOf"];try {
	        if (/MSIE/.test(navigator.userAgent)) {
	          e = function e(j, i) {
	            for (b = 0; b < c.length; b = b + 1) {
	              var l = c[b],
	                  k = i[l];if (typeof k === "function" && k != Object.prototype[l]) {
	                j[l] = k;
	              }
	            }
	          };
	        }
	      } catch (a) {}e(g.prototype, f);
	    }
	  } };
	/*! CryptoJS v3.1.2 core-fix.js
	 * code.google.com/p/crypto-js
	 * (c) 2009-2013 by Jeff Mott. All rights reserved.
	 * code.google.com/p/crypto-js/wiki/License
	 * THIS IS FIX of 'core.js' to fix Hmac issue.
	 * https://code.google.com/p/crypto-js/issues/detail?id=84
	 * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js
	 */
	var CryptoJS = CryptoJS || function (e, g) {
	  var a = {};var b = a.lib = {};var j = b.Base = function () {
	    function n() {}return { extend: function extend(p) {
	        n.prototype = this;var o = new n();if (p) {
	          o.mixIn(p);
	        }if (!o.hasOwnProperty("init")) {
	          o.init = function () {
	            o.$super.init.apply(this, arguments);
	          };
	        }o.init.prototype = o;o.$super = this;return o;
	      }, create: function create() {
	        var o = this.extend();o.init.apply(o, arguments);return o;
	      }, init: function init() {}, mixIn: function mixIn(p) {
	        for (var o in p) {
	          if (p.hasOwnProperty(o)) {
	            this[o] = p[o];
	          }
	        }if (p.hasOwnProperty("toString")) {
	          this.toString = p.toString;
	        }
	      }, clone: function clone() {
	        return this.init.prototype.extend(this);
	      } };
	  }();var l = b.WordArray = j.extend({ init: function init(o, n) {
	      o = this.words = o || [];if (n != g) {
	        this.sigBytes = n;
	      } else {
	        this.sigBytes = o.length * 4;
	      }
	    }, toString: function toString(n) {
	      return (n || h).stringify(this);
	    }, concat: function concat(t) {
	      var q = this.words;var p = t.words;var n = this.sigBytes;var s = t.sigBytes;this.clamp();if (n % 4) {
	        for (var r = 0; r < s; r++) {
	          var o = p[r >>> 2] >>> 24 - r % 4 * 8 & 255;q[n + r >>> 2] |= o << 24 - (n + r) % 4 * 8;
	        }
	      } else {
	        for (var r = 0; r < s; r += 4) {
	          q[n + r >>> 2] = p[r >>> 2];
	        }
	      }this.sigBytes += s;return this;
	    }, clamp: function clamp() {
	      var o = this.words;var n = this.sigBytes;o[n >>> 2] &= 4294967295 << 32 - n % 4 * 8;o.length = e.ceil(n / 4);
	    }, clone: function clone() {
	      var n = j.clone.call(this);n.words = this.words.slice(0);return n;
	    }, random: function random(p) {
	      var o = [];for (var n = 0; n < p; n += 4) {
	        o.push(e.random() * 4294967296 | 0);
	      }return new l.init(o, p);
	    } });var m = a.enc = {};var h = m.Hex = { stringify: function stringify(p) {
	      var r = p.words;var o = p.sigBytes;var q = [];for (var n = 0; n < o; n++) {
	        var s = r[n >>> 2] >>> 24 - n % 4 * 8 & 255;q.push((s >>> 4).toString(16));q.push((s & 15).toString(16));
	      }return q.join("");
	    }, parse: function parse(p) {
	      var n = p.length;var q = [];for (var o = 0; o < n; o += 2) {
	        q[o >>> 3] |= parseInt(p.substr(o, 2), 16) << 24 - o % 8 * 4;
	      }return new l.init(q, n / 2);
	    } };var d = m.Latin1 = { stringify: function stringify(q) {
	      var r = q.words;var p = q.sigBytes;var n = [];for (var o = 0; o < p; o++) {
	        var s = r[o >>> 2] >>> 24 - o % 4 * 8 & 255;n.push(String.fromCharCode(s));
	      }return n.join("");
	    }, parse: function parse(p) {
	      var n = p.length;var q = [];for (var o = 0; o < n; o++) {
	        q[o >>> 2] |= (p.charCodeAt(o) & 255) << 24 - o % 4 * 8;
	      }return new l.init(q, n);
	    } };var c = m.Utf8 = { stringify: function stringify(n) {
	      try {
	        return decodeURIComponent(escape(d.stringify(n)));
	      } catch (o) {
	        throw new Error("Malformed UTF-8 data");
	      }
	    }, parse: function parse(n) {
	      return d.parse(unescape(encodeURIComponent(n)));
	    } };var i = b.BufferedBlockAlgorithm = j.extend({ reset: function reset() {
	      this._data = new l.init();this._nDataBytes = 0;
	    }, _append: function _append(n) {
	      if (typeof n == "string") {
	        n = c.parse(n);
	      }this._data.concat(n);this._nDataBytes += n.sigBytes;
	    }, _process: function _process(w) {
	      var q = this._data;var x = q.words;var n = q.sigBytes;var t = this.blockSize;var v = t * 4;var u = n / v;if (w) {
	        u = e.ceil(u);
	      } else {
	        u = e.max((u | 0) - this._minBufferSize, 0);
	      }var s = u * t;var r = e.min(s * 4, n);if (s) {
	        for (var p = 0; p < s; p += t) {
	          this._doProcessBlock(x, p);
	        }var o = x.splice(0, s);q.sigBytes -= r;
	      }return new l.init(o, r);
	    }, clone: function clone() {
	      var n = j.clone.call(this);n._data = this._data.clone();return n;
	    }, _minBufferSize: 0 });var f = b.Hasher = i.extend({ cfg: j.extend(), init: function init(n) {
	      this.cfg = this.cfg.extend(n);this.reset();
	    }, reset: function reset() {
	      i.reset.call(this);this._doReset();
	    }, update: function update(n) {
	      this._append(n);this._process();return this;
	    }, finalize: function finalize(n) {
	      if (n) {
	        this._append(n);
	      }var o = this._doFinalize();return o;
	    }, blockSize: 512 / 32, _createHelper: function _createHelper(n) {
	      return function (p, o) {
	        return new n.init(o).finalize(p);
	      };
	    }, _createHmacHelper: function _createHmacHelper(n) {
	      return function (p, o) {
	        return new k.HMAC.init(n, o).finalize(p);
	      };
	    } });var k = a.algo = {};return a;
	}(Math);
	/*
	CryptoJS v3.1.2 x64-core-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function (g) {
	  var a = CryptoJS,
	      f = a.lib,
	      e = f.Base,
	      h = f.WordArray,
	      a = a.x64 = {};a.Word = e.extend({ init: function init(b, c) {
	      this.high = b;this.low = c;
	    } });a.WordArray = e.extend({ init: function init(b, c) {
	      b = this.words = b || [];this.sigBytes = c != g ? c : 8 * b.length;
	    }, toX32: function toX32() {
	      for (var b = this.words, c = b.length, a = [], d = 0; d < c; d++) {
	        var e = b[d];a.push(e.high);a.push(e.low);
	      }return h.create(a, this.sigBytes);
	    }, clone: function clone() {
	      for (var b = e.clone.call(this), c = b.words = this.words.slice(0), a = c.length, d = 0; d < a; d++) {
	        c[d] = c[d].clone();
	      }return b;
	    } });
	})();
	
	/*
	CryptoJS v3.1.2 enc-base64.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function () {
	  var h = CryptoJS,
	      j = h.lib.WordArray;h.enc.Base64 = { stringify: function stringify(b) {
	      var e = b.words,
	          f = b.sigBytes,
	          c = this._map;b.clamp();b = [];for (var a = 0; a < f; a += 3) {
	        for (var d = (e[a >>> 2] >>> 24 - 8 * (a % 4) & 255) << 16 | (e[a + 1 >>> 2] >>> 24 - 8 * ((a + 1) % 4) & 255) << 8 | e[a + 2 >>> 2] >>> 24 - 8 * ((a + 2) % 4) & 255, g = 0; 4 > g && a + 0.75 * g < f; g++) {
	          b.push(c.charAt(d >>> 6 * (3 - g) & 63));
	        }
	      }if (e = c.charAt(64)) for (; b.length % 4;) {
	        b.push(e);
	      }return b.join("");
	    }, parse: function parse(b) {
	      var e = b.length,
	          f = this._map,
	          c = f.charAt(64);c && (c = b.indexOf(c), -1 != c && (e = c));for (var c = [], a = 0, d = 0; d < e; d++) {
	        if (d % 4) {
	          var g = f.indexOf(b.charAt(d - 1)) << 2 * (d % 4),
	              h = f.indexOf(b.charAt(d)) >>> 6 - 2 * (d % 4);c[a >>> 2] |= (g | h) << 24 - 8 * (a % 4);a++;
	        }
	      }return j.create(c, a);
	    }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" };
	})();
	
	/*
	CryptoJS v3.1.2 sha256-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function (k) {
	  for (var g = CryptoJS, h = g.lib, v = h.WordArray, j = h.Hasher, h = g.algo, s = [], t = [], u = function u(q) {
	    return 4294967296 * (q - (q | 0)) | 0;
	  }, l = 2, b = 0; 64 > b;) {
	    var d;a: {
	      d = l;for (var w = k.sqrt(d), r = 2; r <= w; r++) {
	        if (!(d % r)) {
	          d = !1;break a;
	        }
	      }d = !0;
	    }d && (8 > b && (s[b] = u(k.pow(l, 0.5))), t[b] = u(k.pow(l, 1 / 3)), b++);l++;
	  }var n = [],
	      h = h.SHA256 = j.extend({ _doReset: function _doReset() {
	      this._hash = new v.init(s.slice(0));
	    }, _doProcessBlock: function _doProcessBlock(q, h) {
	      for (var a = this._hash.words, c = a[0], d = a[1], b = a[2], k = a[3], f = a[4], g = a[5], j = a[6], l = a[7], e = 0; 64 > e; e++) {
	        if (16 > e) n[e] = q[h + e] | 0;else {
	          var m = n[e - 15],
	              p = n[e - 2];n[e] = ((m << 25 | m >>> 7) ^ (m << 14 | m >>> 18) ^ m >>> 3) + n[e - 7] + ((p << 15 | p >>> 17) ^ (p << 13 | p >>> 19) ^ p >>> 10) + n[e - 16];
	        }m = l + ((f << 26 | f >>> 6) ^ (f << 21 | f >>> 11) ^ (f << 7 | f >>> 25)) + (f & g ^ ~f & j) + t[e] + n[e];p = ((c << 30 | c >>> 2) ^ (c << 19 | c >>> 13) ^ (c << 10 | c >>> 22)) + (c & d ^ c & b ^ d & b);l = j;j = g;g = f;f = k + m | 0;k = b;b = d;d = c;c = m + p | 0;
	      }a[0] = a[0] + c | 0;a[1] = a[1] + d | 0;a[2] = a[2] + b | 0;a[3] = a[3] + k | 0;a[4] = a[4] + f | 0;a[5] = a[5] + g | 0;a[6] = a[6] + j | 0;a[7] = a[7] + l | 0;
	    }, _doFinalize: function _doFinalize() {
	      var d = this._data,
	          b = d.words,
	          a = 8 * this._nDataBytes,
	          c = 8 * d.sigBytes;
	      b[c >>> 5] |= 128 << 24 - c % 32;b[(c + 64 >>> 9 << 4) + 14] = k.floor(a / 4294967296);b[(c + 64 >>> 9 << 4) + 15] = a;d.sigBytes = 4 * b.length;this._process();return this._hash;
	    }, clone: function clone() {
	      var b = j.clone.call(this);b._hash = this._hash.clone();return b;
	    } });g.SHA256 = j._createHelper(h);g.HmacSHA256 = j._createHmacHelper(h);
	})(Math);
	
	/*
	CryptoJS v3.1.2 sha512-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function () {
	  function a() {
	    return d.create.apply(d, arguments);
	  }for (var n = CryptoJS, r = n.lib.Hasher, e = n.x64, d = e.Word, T = e.WordArray, e = n.algo, ea = [a(1116352408, 3609767458), a(1899447441, 602891725), a(3049323471, 3964484399), a(3921009573, 2173295548), a(961987163, 4081628472), a(1508970993, 3053834265), a(2453635748, 2937671579), a(2870763221, 3664609560), a(3624381080, 2734883394), a(310598401, 1164996542), a(607225278, 1323610764), a(1426881987, 3590304994), a(1925078388, 4068182383), a(2162078206, 991336113), a(2614888103, 633803317), a(3248222580, 3479774868), a(3835390401, 2666613458), a(4022224774, 944711139), a(264347078, 2341262773), a(604807628, 2007800933), a(770255983, 1495990901), a(1249150122, 1856431235), a(1555081692, 3175218132), a(1996064986, 2198950837), a(2554220882, 3999719339), a(2821834349, 766784016), a(2952996808, 2566594879), a(3210313671, 3203337956), a(3336571891, 1034457026), a(3584528711, 2466948901), a(113926993, 3758326383), a(338241895, 168717936), a(666307205, 1188179964), a(773529912, 1546045734), a(1294757372, 1522805485), a(1396182291, 2643833823), a(1695183700, 2343527390), a(1986661051, 1014477480), a(2177026350, 1206759142), a(2456956037, 344077627), a(2730485921, 1290863460), a(2820302411, 3158454273), a(3259730800, 3505952657), a(3345764771, 106217008), a(3516065817, 3606008344), a(3600352804, 1432725776), a(4094571909, 1467031594), a(275423344, 851169720), a(430227734, 3100823752), a(506948616, 1363258195), a(659060556, 3750685593), a(883997877, 3785050280), a(958139571, 3318307427), a(1322822218, 3812723403), a(1537002063, 2003034995), a(1747873779, 3602036899), a(1955562222, 1575990012), a(2024104815, 1125592928), a(2227730452, 2716904306), a(2361852424, 442776044), a(2428436474, 593698344), a(2756734187, 3733110249), a(3204031479, 2999351573), a(3329325298, 3815920427), a(3391569614, 3928383900), a(3515267271, 566280711), a(3940187606, 3454069534), a(4118630271, 4000239992), a(116418474, 1914138554), a(174292421, 2731055270), a(289380356, 3203993006), a(460393269, 320620315), a(685471733, 587496836), a(852142971, 1086792851), a(1017036298, 365543100), a(1126000580, 2618297676), a(1288033470, 3409855158), a(1501505948, 4234509866), a(1607167915, 987167468), a(1816402316, 1246189591)], v = [], w = 0; 80 > w; w++) {
	    v[w] = a();
	  }e = e.SHA512 = r.extend({ _doReset: function _doReset() {
	      this._hash = new T.init([new d.init(1779033703, 4089235720), new d.init(3144134277, 2227873595), new d.init(1013904242, 4271175723), new d.init(2773480762, 1595750129), new d.init(1359893119, 2917565137), new d.init(2600822924, 725511199), new d.init(528734635, 4215389547), new d.init(1541459225, 327033209)]);
	    }, _doProcessBlock: function _doProcessBlock(a, d) {
	      for (var f = this._hash.words, F = f[0], e = f[1], n = f[2], r = f[3], G = f[4], H = f[5], I = f[6], f = f[7], w = F.high, J = F.low, X = e.high, K = e.low, Y = n.high, L = n.low, Z = r.high, M = r.low, $ = G.high, N = G.low, aa = H.high, O = H.low, ba = I.high, P = I.low, ca = f.high, Q = f.low, k = w, g = J, z = X, x = K, A = Y, y = L, U = Z, B = M, l = $, h = N, R = aa, C = O, S = ba, D = P, V = ca, E = Q, m = 0; 80 > m; m++) {
	        var s = v[m];if (16 > m) var j = s.high = a[d + 2 * m] | 0,
	            b = s.low = a[d + 2 * m + 1] | 0;else {
	          var j = v[m - 15],
	              b = j.high,
	              p = j.low,
	              j = (b >>> 1 | p << 31) ^ (b >>> 8 | p << 24) ^ b >>> 7,
	              p = (p >>> 1 | b << 31) ^ (p >>> 8 | b << 24) ^ (p >>> 7 | b << 25),
	              u = v[m - 2],
	              b = u.high,
	              c = u.low,
	              u = (b >>> 19 | c << 13) ^ (b << 3 | c >>> 29) ^ b >>> 6,
	              c = (c >>> 19 | b << 13) ^ (c << 3 | b >>> 29) ^ (c >>> 6 | b << 26),
	              b = v[m - 7],
	              W = b.high,
	              t = v[m - 16],
	              q = t.high,
	              t = t.low,
	              b = p + b.low,
	              j = j + W + (b >>> 0 < p >>> 0 ? 1 : 0),
	              b = b + c,
	              j = j + u + (b >>> 0 < c >>> 0 ? 1 : 0),
	              b = b + t,
	              j = j + q + (b >>> 0 < t >>> 0 ? 1 : 0);s.high = j;s.low = b;
	        }var W = l & R ^ ~l & S,
	            t = h & C ^ ~h & D,
	            s = k & z ^ k & A ^ z & A,
	            T = g & x ^ g & y ^ x & y,
	            p = (k >>> 28 | g << 4) ^ (k << 30 | g >>> 2) ^ (k << 25 | g >>> 7),
	            u = (g >>> 28 | k << 4) ^ (g << 30 | k >>> 2) ^ (g << 25 | k >>> 7),
	            c = ea[m],
	            fa = c.high,
	            da = c.low,
	            c = E + ((h >>> 14 | l << 18) ^ (h >>> 18 | l << 14) ^ (h << 23 | l >>> 9)),
	            q = V + ((l >>> 14 | h << 18) ^ (l >>> 18 | h << 14) ^ (l << 23 | h >>> 9)) + (c >>> 0 < E >>> 0 ? 1 : 0),
	            c = c + t,
	            q = q + W + (c >>> 0 < t >>> 0 ? 1 : 0),
	            c = c + da,
	            q = q + fa + (c >>> 0 < da >>> 0 ? 1 : 0),
	            c = c + b,
	            q = q + j + (c >>> 0 < b >>> 0 ? 1 : 0),
	            b = u + T,
	            s = p + s + (b >>> 0 < u >>> 0 ? 1 : 0),
	            V = S,
	            E = D,
	            S = R,
	            D = C,
	            R = l,
	            C = h,
	            h = B + c | 0,
	            l = U + q + (h >>> 0 < B >>> 0 ? 1 : 0) | 0,
	            U = A,
	            B = y,
	            A = z,
	            y = x,
	            z = k,
	            x = g,
	            g = c + b | 0,
	            k = q + s + (g >>> 0 < c >>> 0 ? 1 : 0) | 0;
	      }J = F.low = J + g;F.high = w + k + (J >>> 0 < g >>> 0 ? 1 : 0);K = e.low = K + x;e.high = X + z + (K >>> 0 < x >>> 0 ? 1 : 0);L = n.low = L + y;n.high = Y + A + (L >>> 0 < y >>> 0 ? 1 : 0);M = r.low = M + B;r.high = Z + U + (M >>> 0 < B >>> 0 ? 1 : 0);N = G.low = N + h;G.high = $ + l + (N >>> 0 < h >>> 0 ? 1 : 0);O = H.low = O + C;H.high = aa + R + (O >>> 0 < C >>> 0 ? 1 : 0);P = I.low = P + D;
	      I.high = ba + S + (P >>> 0 < D >>> 0 ? 1 : 0);Q = f.low = Q + E;f.high = ca + V + (Q >>> 0 < E >>> 0 ? 1 : 0);
	    }, _doFinalize: function _doFinalize() {
	      var a = this._data,
	          d = a.words,
	          f = 8 * this._nDataBytes,
	          e = 8 * a.sigBytes;d[e >>> 5] |= 128 << 24 - e % 32;d[(e + 128 >>> 10 << 5) + 30] = Math.floor(f / 4294967296);d[(e + 128 >>> 10 << 5) + 31] = f;a.sigBytes = 4 * d.length;this._process();return this._hash.toX32();
	    }, clone: function clone() {
	      var a = r.clone.call(this);a._hash = this._hash.clone();return a;
	    }, blockSize: 32 });n.SHA512 = r._createHelper(e);n.HmacSHA512 = r._createHmacHelper(e);
	})();
	
	/*
	CryptoJS v3.1.2 sha384-min.js
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function () {
	  var c = CryptoJS,
	      a = c.x64,
	      b = a.Word,
	      e = a.WordArray,
	      a = c.algo,
	      d = a.SHA512,
	      a = a.SHA384 = d.extend({ _doReset: function _doReset() {
	      this._hash = new e.init([new b.init(3418070365, 3238371032), new b.init(1654270250, 914150663), new b.init(2438529370, 812702999), new b.init(355462360, 4144912697), new b.init(1731405415, 4290775857), new b.init(2394180231, 1750603025), new b.init(3675008525, 1694076839), new b.init(1203062813, 3204075428)]);
	    }, _doFinalize: function _doFinalize() {
	      var a = d._doFinalize.call(this);a.sigBytes -= 16;return a;
	    } });c.SHA384 = d._createHelper(a);c.HmacSHA384 = d._createHmacHelper(a);
	})();
	
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	var b64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var b64pad = "=";function hex2b64(d) {
	  var b;var e;var a = "";for (b = 0; b + 3 <= d.length; b += 3) {
	    e = parseInt(d.substring(b, b + 3), 16);a += b64map.charAt(e >> 6) + b64map.charAt(e & 63);
	  }if (b + 1 == d.length) {
	    e = parseInt(d.substring(b, b + 1), 16);a += b64map.charAt(e << 2);
	  } else {
	    if (b + 2 == d.length) {
	      e = parseInt(d.substring(b, b + 2), 16);a += b64map.charAt(e >> 2) + b64map.charAt((e & 3) << 4);
	    }
	  }if (b64pad) {
	    while ((a.length & 3) > 0) {
	      a += b64pad;
	    }
	  }return a;
	}function b64tohex(f) {
	  var d = "";var e;var b = 0;var c;var a;for (e = 0; e < f.length; ++e) {
	    if (f.charAt(e) == b64pad) {
	      break;
	    }a = b64map.indexOf(f.charAt(e));if (a < 0) {
	      continue;
	    }if (b == 0) {
	      d += int2char(a >> 2);c = a & 3;b = 1;
	    } else {
	      if (b == 1) {
	        d += int2char(c << 2 | a >> 4);c = a & 15;b = 2;
	      } else {
	        if (b == 2) {
	          d += int2char(c);d += int2char(a >> 2);c = a & 3;b = 3;
	        } else {
	          d += int2char(c << 2 | a >> 4);d += int2char(a & 15);b = 0;
	        }
	      }
	    }
	  }if (b == 1) {
	    d += int2char(c << 2);
	  }return d;
	}function b64toBA(e) {
	  var d = b64tohex(e);var c;var b = new Array();for (c = 0; 2 * c < d.length; ++c) {
	    b[c] = parseInt(d.substring(2 * c, 2 * c + 2), 16);
	  }return b;
	};
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	var dbits;var canary = 244837814094590;var j_lm = (canary & 16777215) == 15715070;function BigInteger(e, d, f) {
	  if (e != null) {
	    if ("number" == typeof e) {
	      this.fromNumber(e, d, f);
	    } else {
	      if (d == null && "string" != typeof e) {
	        this.fromString(e, 256);
	      } else {
	        this.fromString(e, d);
	      }
	    }
	  }
	}function nbi() {
	  return new BigInteger(null);
	}function am1(f, a, b, e, h, g) {
	  while (--g >= 0) {
	    var d = a * this[f++] + b[e] + h;h = Math.floor(d / 67108864);b[e++] = d & 67108863;
	  }return h;
	}function am2(f, q, r, e, o, a) {
	  var k = q & 32767,
	      p = q >> 15;while (--a >= 0) {
	    var d = this[f] & 32767;var g = this[f++] >> 15;var b = p * d + g * k;d = k * d + ((b & 32767) << 15) + r[e] + (o & 1073741823);o = (d >>> 30) + (b >>> 15) + p * g + (o >>> 30);r[e++] = d & 1073741823;
	  }return o;
	}function am3(f, q, r, e, o, a) {
	  var k = q & 16383,
	      p = q >> 14;while (--a >= 0) {
	    var d = this[f] & 16383;var g = this[f++] >> 14;var b = p * d + g * k;d = k * d + ((b & 16383) << 14) + r[e] + o;o = (d >> 28) + (b >> 14) + p * g;r[e++] = d & 268435455;
	  }return o;
	}if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
	  BigInteger.prototype.am = am2;dbits = 30;
	} else {
	  if (j_lm && navigator.appName != "Netscape") {
	    BigInteger.prototype.am = am1;dbits = 26;
	  } else {
	    BigInteger.prototype.am = am3;dbits = 28;
	  }
	}BigInteger.prototype.DB = dbits;BigInteger.prototype.DM = (1 << dbits) - 1;BigInteger.prototype.DV = 1 << dbits;var BI_FP = 52;BigInteger.prototype.FV = Math.pow(2, BI_FP);BigInteger.prototype.F1 = BI_FP - dbits;BigInteger.prototype.F2 = 2 * dbits - BI_FP;var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";var BI_RC = new Array();var rr, vv;rr = "0".charCodeAt(0);for (vv = 0; vv <= 9; ++vv) {
	  BI_RC[rr++] = vv;
	}rr = "a".charCodeAt(0);for (vv = 10; vv < 36; ++vv) {
	  BI_RC[rr++] = vv;
	}rr = "A".charCodeAt(0);for (vv = 10; vv < 36; ++vv) {
	  BI_RC[rr++] = vv;
	}function int2char(a) {
	  return BI_RM.charAt(a);
	}function intAt(b, a) {
	  var d = BI_RC[b.charCodeAt(a)];return d == null ? -1 : d;
	}function bnpCopyTo(b) {
	  for (var a = this.t - 1; a >= 0; --a) {
	    b[a] = this[a];
	  }b.t = this.t;b.s = this.s;
	}function bnpFromInt(a) {
	  this.t = 1;this.s = a < 0 ? -1 : 0;if (a > 0) {
	    this[0] = a;
	  } else {
	    if (a < -1) {
	      this[0] = a + this.DV;
	    } else {
	      this.t = 0;
	    }
	  }
	}function nbv(a) {
	  var b = nbi();b.fromInt(a);return b;
	}function bnpFromString(h, c) {
	  var e;if (c == 16) {
	    e = 4;
	  } else {
	    if (c == 8) {
	      e = 3;
	    } else {
	      if (c == 256) {
	        e = 8;
	      } else {
	        if (c == 2) {
	          e = 1;
	        } else {
	          if (c == 32) {
	            e = 5;
	          } else {
	            if (c == 4) {
	              e = 2;
	            } else {
	              this.fromRadix(h, c);return;
	            }
	          }
	        }
	      }
	    }
	  }this.t = 0;this.s = 0;var g = h.length,
	      d = false,
	      f = 0;while (--g >= 0) {
	    var a = e == 8 ? h[g] & 255 : intAt(h, g);if (a < 0) {
	      if (h.charAt(g) == "-") {
	        d = true;
	      }continue;
	    }d = false;if (f == 0) {
	      this[this.t++] = a;
	    } else {
	      if (f + e > this.DB) {
	        this[this.t - 1] |= (a & (1 << this.DB - f) - 1) << f;this[this.t++] = a >> this.DB - f;
	      } else {
	        this[this.t - 1] |= a << f;
	      }
	    }f += e;if (f >= this.DB) {
	      f -= this.DB;
	    }
	  }if (e == 8 && (h[0] & 128) != 0) {
	    this.s = -1;if (f > 0) {
	      this[this.t - 1] |= (1 << this.DB - f) - 1 << f;
	    }
	  }this.clamp();if (d) {
	    BigInteger.ZERO.subTo(this, this);
	  }
	}function bnpClamp() {
	  var a = this.s & this.DM;while (this.t > 0 && this[this.t - 1] == a) {
	    --this.t;
	  }
	}function bnToString(c) {
	  if (this.s < 0) {
	    return "-" + this.negate().toString(c);
	  }var e;if (c == 16) {
	    e = 4;
	  } else {
	    if (c == 8) {
	      e = 3;
	    } else {
	      if (c == 2) {
	        e = 1;
	      } else {
	        if (c == 32) {
	          e = 5;
	        } else {
	          if (c == 4) {
	            e = 2;
	          } else {
	            return this.toRadix(c);
	          }
	        }
	      }
	    }
	  }var g = (1 << e) - 1,
	      l,
	      a = false,
	      h = "",
	      f = this.t;var j = this.DB - f * this.DB % e;if (f-- > 0) {
	    if (j < this.DB && (l = this[f] >> j) > 0) {
	      a = true;h = int2char(l);
	    }while (f >= 0) {
	      if (j < e) {
	        l = (this[f] & (1 << j) - 1) << e - j;l |= this[--f] >> (j += this.DB - e);
	      } else {
	        l = this[f] >> (j -= e) & g;if (j <= 0) {
	          j += this.DB;--f;
	        }
	      }if (l > 0) {
	        a = true;
	      }if (a) {
	        h += int2char(l);
	      }
	    }
	  }return a ? h : "0";
	}function bnNegate() {
	  var a = nbi();BigInteger.ZERO.subTo(this, a);return a;
	}function bnAbs() {
	  return this.s < 0 ? this.negate() : this;
	}function bnCompareTo(b) {
	  var d = this.s - b.s;if (d != 0) {
	    return d;
	  }var c = this.t;d = c - b.t;if (d != 0) {
	    return this.s < 0 ? -d : d;
	  }while (--c >= 0) {
	    if ((d = this[c] - b[c]) != 0) {
	      return d;
	    }
	  }return 0;
	}function nbits(a) {
	  var c = 1,
	      b;if ((b = a >>> 16) != 0) {
	    a = b;c += 16;
	  }if ((b = a >> 8) != 0) {
	    a = b;c += 8;
	  }if ((b = a >> 4) != 0) {
	    a = b;c += 4;
	  }if ((b = a >> 2) != 0) {
	    a = b;c += 2;
	  }if ((b = a >> 1) != 0) {
	    a = b;c += 1;
	  }return c;
	}function bnBitLength() {
	  if (this.t <= 0) {
	    return 0;
	  }return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
	}function bnpDLShiftTo(c, b) {
	  var a;for (a = this.t - 1; a >= 0; --a) {
	    b[a + c] = this[a];
	  }for (a = c - 1; a >= 0; --a) {
	    b[a] = 0;
	  }b.t = this.t + c;b.s = this.s;
	}function bnpDRShiftTo(c, b) {
	  for (var a = c; a < this.t; ++a) {
	    b[a - c] = this[a];
	  }b.t = Math.max(this.t - c, 0);b.s = this.s;
	}function bnpLShiftTo(j, e) {
	  var b = j % this.DB;var a = this.DB - b;var g = (1 << a) - 1;var f = Math.floor(j / this.DB),
	      h = this.s << b & this.DM,
	      d;for (d = this.t - 1; d >= 0; --d) {
	    e[d + f + 1] = this[d] >> a | h;h = (this[d] & g) << b;
	  }for (d = f - 1; d >= 0; --d) {
	    e[d] = 0;
	  }e[f] = h;e.t = this.t + f + 1;e.s = this.s;e.clamp();
	}function bnpRShiftTo(g, d) {
	  d.s = this.s;var e = Math.floor(g / this.DB);if (e >= this.t) {
	    d.t = 0;return;
	  }var b = g % this.DB;var a = this.DB - b;var f = (1 << b) - 1;d[0] = this[e] >> b;for (var c = e + 1; c < this.t; ++c) {
	    d[c - e - 1] |= (this[c] & f) << a;d[c - e] = this[c] >> b;
	  }if (b > 0) {
	    d[this.t - e - 1] |= (this.s & f) << a;
	  }d.t = this.t - e;d.clamp();
	}function bnpSubTo(d, f) {
	  var e = 0,
	      g = 0,
	      b = Math.min(d.t, this.t);while (e < b) {
	    g += this[e] - d[e];f[e++] = g & this.DM;g >>= this.DB;
	  }if (d.t < this.t) {
	    g -= d.s;while (e < this.t) {
	      g += this[e];f[e++] = g & this.DM;g >>= this.DB;
	    }g += this.s;
	  } else {
	    g += this.s;while (e < d.t) {
	      g -= d[e];f[e++] = g & this.DM;g >>= this.DB;
	    }g -= d.s;
	  }f.s = g < 0 ? -1 : 0;if (g < -1) {
	    f[e++] = this.DV + g;
	  } else {
	    if (g > 0) {
	      f[e++] = g;
	    }
	  }f.t = e;f.clamp();
	}function bnpMultiplyTo(c, e) {
	  var b = this.abs(),
	      f = c.abs();var d = b.t;e.t = d + f.t;while (--d >= 0) {
	    e[d] = 0;
	  }for (d = 0; d < f.t; ++d) {
	    e[d + b.t] = b.am(0, f[d], e, d, 0, b.t);
	  }e.s = 0;e.clamp();if (this.s != c.s) {
	    BigInteger.ZERO.subTo(e, e);
	  }
	}function bnpSquareTo(d) {
	  var a = this.abs();var b = d.t = 2 * a.t;while (--b >= 0) {
	    d[b] = 0;
	  }for (b = 0; b < a.t - 1; ++b) {
	    var e = a.am(b, a[b], d, 2 * b, 0, 1);if ((d[b + a.t] += a.am(b + 1, 2 * a[b], d, 2 * b + 1, e, a.t - b - 1)) >= a.DV) {
	      d[b + a.t] -= a.DV;d[b + a.t + 1] = 1;
	    }
	  }if (d.t > 0) {
	    d[d.t - 1] += a.am(b, a[b], d, 2 * b, 0, 1);
	  }d.s = 0;d.clamp();
	}function bnpDivRemTo(n, h, g) {
	  var w = n.abs();if (w.t <= 0) {
	    return;
	  }var k = this.abs();if (k.t < w.t) {
	    if (h != null) {
	      h.fromInt(0);
	    }if (g != null) {
	      this.copyTo(g);
	    }return;
	  }if (g == null) {
	    g = nbi();
	  }var d = nbi(),
	      a = this.s,
	      l = n.s;var v = this.DB - nbits(w[w.t - 1]);if (v > 0) {
	    w.lShiftTo(v, d);k.lShiftTo(v, g);
	  } else {
	    w.copyTo(d);k.copyTo(g);
	  }var p = d.t;var b = d[p - 1];if (b == 0) {
	    return;
	  }var o = b * (1 << this.F1) + (p > 1 ? d[p - 2] >> this.F2 : 0);var A = this.FV / o,
	      z = (1 << this.F1) / o,
	      x = 1 << this.F2;var u = g.t,
	      s = u - p,
	      f = h == null ? nbi() : h;d.dlShiftTo(s, f);if (g.compareTo(f) >= 0) {
	    g[g.t++] = 1;g.subTo(f, g);
	  }BigInteger.ONE.dlShiftTo(p, f);f.subTo(d, d);while (d.t < p) {
	    d[d.t++] = 0;
	  }while (--s >= 0) {
	    var c = g[--u] == b ? this.DM : Math.floor(g[u] * A + (g[u - 1] + x) * z);if ((g[u] += d.am(0, c, g, s, 0, p)) < c) {
	      d.dlShiftTo(s, f);g.subTo(f, g);while (g[u] < --c) {
	        g.subTo(f, g);
	      }
	    }
	  }if (h != null) {
	    g.drShiftTo(p, h);if (a != l) {
	      BigInteger.ZERO.subTo(h, h);
	    }
	  }g.t = p;g.clamp();if (v > 0) {
	    g.rShiftTo(v, g);
	  }if (a < 0) {
	    BigInteger.ZERO.subTo(g, g);
	  }
	}function bnMod(b) {
	  var c = nbi();this.abs().divRemTo(b, null, c);if (this.s < 0 && c.compareTo(BigInteger.ZERO) > 0) {
	    b.subTo(c, c);
	  }return c;
	}function Classic(a) {
	  this.m = a;
	}function cConvert(a) {
	  if (a.s < 0 || a.compareTo(this.m) >= 0) {
	    return a.mod(this.m);
	  } else {
	    return a;
	  }
	}function cRevert(a) {
	  return a;
	}function cReduce(a) {
	  a.divRemTo(this.m, null, a);
	}function cMulTo(a, c, b) {
	  a.multiplyTo(c, b);this.reduce(b);
	}function cSqrTo(a, b) {
	  a.squareTo(b);this.reduce(b);
	}Classic.prototype.convert = cConvert;Classic.prototype.revert = cRevert;Classic.prototype.reduce = cReduce;Classic.prototype.mulTo = cMulTo;Classic.prototype.sqrTo = cSqrTo;function bnpInvDigit() {
	  if (this.t < 1) {
	    return 0;
	  }var a = this[0];if ((a & 1) == 0) {
	    return 0;
	  }var b = a & 3;b = b * (2 - (a & 15) * b) & 15;b = b * (2 - (a & 255) * b) & 255;b = b * (2 - ((a & 65535) * b & 65535)) & 65535;b = b * (2 - a * b % this.DV) % this.DV;return b > 0 ? this.DV - b : -b;
	}function Montgomery(a) {
	  this.m = a;this.mp = a.invDigit();this.mpl = this.mp & 32767;this.mph = this.mp >> 15;this.um = (1 << a.DB - 15) - 1;this.mt2 = 2 * a.t;
	}function montConvert(a) {
	  var b = nbi();a.abs().dlShiftTo(this.m.t, b);b.divRemTo(this.m, null, b);if (a.s < 0 && b.compareTo(BigInteger.ZERO) > 0) {
	    this.m.subTo(b, b);
	  }return b;
	}function montRevert(a) {
	  var b = nbi();a.copyTo(b);this.reduce(b);return b;
	}function montReduce(a) {
	  while (a.t <= this.mt2) {
	    a[a.t++] = 0;
	  }for (var c = 0; c < this.m.t; ++c) {
	    var b = a[c] & 32767;var d = b * this.mpl + ((b * this.mph + (a[c] >> 15) * this.mpl & this.um) << 15) & a.DM;b = c + this.m.t;a[b] += this.m.am(0, d, a, c, 0, this.m.t);while (a[b] >= a.DV) {
	      a[b] -= a.DV;a[++b]++;
	    }
	  }a.clamp();a.drShiftTo(this.m.t, a);if (a.compareTo(this.m) >= 0) {
	    a.subTo(this.m, a);
	  }
	}function montSqrTo(a, b) {
	  a.squareTo(b);this.reduce(b);
	}function montMulTo(a, c, b) {
	  a.multiplyTo(c, b);this.reduce(b);
	}Montgomery.prototype.convert = montConvert;Montgomery.prototype.revert = montRevert;Montgomery.prototype.reduce = montReduce;Montgomery.prototype.mulTo = montMulTo;Montgomery.prototype.sqrTo = montSqrTo;function bnpIsEven() {
	  return (this.t > 0 ? this[0] & 1 : this.s) == 0;
	}function bnpExp(h, j) {
	  if (h > 4294967295 || h < 1) {
	    return BigInteger.ONE;
	  }var f = nbi(),
	      a = nbi(),
	      d = j.convert(this),
	      c = nbits(h) - 1;d.copyTo(f);while (--c >= 0) {
	    j.sqrTo(f, a);if ((h & 1 << c) > 0) {
	      j.mulTo(a, d, f);
	    } else {
	      var b = f;f = a;a = b;
	    }
	  }return j.revert(f);
	}function bnModPowInt(b, a) {
	  var c;if (b < 256 || a.isEven()) {
	    c = new Classic(a);
	  } else {
	    c = new Montgomery(a);
	  }return this.exp(b, c);
	}BigInteger.prototype.copyTo = bnpCopyTo;BigInteger.prototype.fromInt = bnpFromInt;BigInteger.prototype.fromString = bnpFromString;BigInteger.prototype.clamp = bnpClamp;BigInteger.prototype.dlShiftTo = bnpDLShiftTo;BigInteger.prototype.drShiftTo = bnpDRShiftTo;BigInteger.prototype.lShiftTo = bnpLShiftTo;BigInteger.prototype.rShiftTo = bnpRShiftTo;BigInteger.prototype.subTo = bnpSubTo;BigInteger.prototype.multiplyTo = bnpMultiplyTo;BigInteger.prototype.squareTo = bnpSquareTo;BigInteger.prototype.divRemTo = bnpDivRemTo;BigInteger.prototype.invDigit = bnpInvDigit;BigInteger.prototype.isEven = bnpIsEven;BigInteger.prototype.exp = bnpExp;BigInteger.prototype.toString = bnToString;BigInteger.prototype.negate = bnNegate;BigInteger.prototype.abs = bnAbs;BigInteger.prototype.compareTo = bnCompareTo;BigInteger.prototype.bitLength = bnBitLength;BigInteger.prototype.mod = bnMod;BigInteger.prototype.modPowInt = bnModPowInt;BigInteger.ZERO = nbv(0);BigInteger.ONE = nbv(1);
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	function bnClone() {
	  var a = nbi();this.copyTo(a);return a;
	}function bnIntValue() {
	  if (this.s < 0) {
	    if (this.t == 1) {
	      return this[0] - this.DV;
	    } else {
	      if (this.t == 0) {
	        return -1;
	      }
	    }
	  } else {
	    if (this.t == 1) {
	      return this[0];
	    } else {
	      if (this.t == 0) {
	        return 0;
	      }
	    }
	  }return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
	}function bnByteValue() {
	  return this.t == 0 ? this.s : this[0] << 24 >> 24;
	}function bnShortValue() {
	  return this.t == 0 ? this.s : this[0] << 16 >> 16;
	}function bnpChunkSize(a) {
	  return Math.floor(Math.LN2 * this.DB / Math.log(a));
	}function bnSigNum() {
	  if (this.s < 0) {
	    return -1;
	  } else {
	    if (this.t <= 0 || this.t == 1 && this[0] <= 0) {
	      return 0;
	    } else {
	      return 1;
	    }
	  }
	}function bnpToRadix(c) {
	  if (c == null) {
	    c = 10;
	  }if (this.signum() == 0 || c < 2 || c > 36) {
	    return "0";
	  }var f = this.chunkSize(c);var e = Math.pow(c, f);var i = nbv(e),
	      j = nbi(),
	      h = nbi(),
	      g = "";this.divRemTo(i, j, h);while (j.signum() > 0) {
	    g = (e + h.intValue()).toString(c).substr(1) + g;j.divRemTo(i, j, h);
	  }return h.intValue().toString(c) + g;
	}function bnpFromRadix(m, h) {
	  this.fromInt(0);if (h == null) {
	    h = 10;
	  }var f = this.chunkSize(h);var g = Math.pow(h, f),
	      e = false,
	      a = 0,
	      l = 0;for (var c = 0; c < m.length; ++c) {
	    var k = intAt(m, c);if (k < 0) {
	      if (m.charAt(c) == "-" && this.signum() == 0) {
	        e = true;
	      }continue;
	    }l = h * l + k;if (++a >= f) {
	      this.dMultiply(g);this.dAddOffset(l, 0);a = 0;l = 0;
	    }
	  }if (a > 0) {
	    this.dMultiply(Math.pow(h, a));this.dAddOffset(l, 0);
	  }if (e) {
	    BigInteger.ZERO.subTo(this, this);
	  }
	}function bnpFromNumber(f, e, h) {
	  if ("number" == typeof e) {
	    if (f < 2) {
	      this.fromInt(1);
	    } else {
	      this.fromNumber(f, h);if (!this.testBit(f - 1)) {
	        this.bitwiseTo(BigInteger.ONE.shiftLeft(f - 1), op_or, this);
	      }if (this.isEven()) {
	        this.dAddOffset(1, 0);
	      }while (!this.isProbablePrime(e)) {
	        this.dAddOffset(2, 0);if (this.bitLength() > f) {
	          this.subTo(BigInteger.ONE.shiftLeft(f - 1), this);
	        }
	      }
	    }
	  } else {
	    var d = new Array(),
	        g = f & 7;d.length = (f >> 3) + 1;e.nextBytes(d);if (g > 0) {
	      d[0] &= (1 << g) - 1;
	    } else {
	      d[0] = 0;
	    }this.fromString(d, 256);
	  }
	}function bnToByteArray() {
	  var b = this.t,
	      c = new Array();c[0] = this.s;var e = this.DB - b * this.DB % 8,
	      f,
	      a = 0;if (b-- > 0) {
	    if (e < this.DB && (f = this[b] >> e) != (this.s & this.DM) >> e) {
	      c[a++] = f | this.s << this.DB - e;
	    }while (b >= 0) {
	      if (e < 8) {
	        f = (this[b] & (1 << e) - 1) << 8 - e;f |= this[--b] >> (e += this.DB - 8);
	      } else {
	        f = this[b] >> (e -= 8) & 255;if (e <= 0) {
	          e += this.DB;--b;
	        }
	      }if ((f & 128) != 0) {
	        f |= -256;
	      }if (a == 0 && (this.s & 128) != (f & 128)) {
	        ++a;
	      }if (a > 0 || f != this.s) {
	        c[a++] = f;
	      }
	    }
	  }return c;
	}function bnEquals(b) {
	  return this.compareTo(b) == 0;
	}function bnMin(b) {
	  return this.compareTo(b) < 0 ? this : b;
	}function bnMax(b) {
	  return this.compareTo(b) > 0 ? this : b;
	}function bnpBitwiseTo(c, h, e) {
	  var d,
	      g,
	      b = Math.min(c.t, this.t);for (d = 0; d < b; ++d) {
	    e[d] = h(this[d], c[d]);
	  }if (c.t < this.t) {
	    g = c.s & this.DM;for (d = b; d < this.t; ++d) {
	      e[d] = h(this[d], g);
	    }e.t = this.t;
	  } else {
	    g = this.s & this.DM;for (d = b; d < c.t; ++d) {
	      e[d] = h(g, c[d]);
	    }e.t = c.t;
	  }e.s = h(this.s, c.s);e.clamp();
	}function op_and(a, b) {
	  return a & b;
	}function bnAnd(b) {
	  var c = nbi();this.bitwiseTo(b, op_and, c);return c;
	}function op_or(a, b) {
	  return a | b;
	}function bnOr(b) {
	  var c = nbi();this.bitwiseTo(b, op_or, c);return c;
	}function op_xor(a, b) {
	  return a ^ b;
	}function bnXor(b) {
	  var c = nbi();this.bitwiseTo(b, op_xor, c);return c;
	}function op_andnot(a, b) {
	  return a & ~b;
	}function bnAndNot(b) {
	  var c = nbi();this.bitwiseTo(b, op_andnot, c);return c;
	}function bnNot() {
	  var b = nbi();for (var a = 0; a < this.t; ++a) {
	    b[a] = this.DM & ~this[a];
	  }b.t = this.t;b.s = ~this.s;return b;
	}function bnShiftLeft(b) {
	  var a = nbi();if (b < 0) {
	    this.rShiftTo(-b, a);
	  } else {
	    this.lShiftTo(b, a);
	  }return a;
	}function bnShiftRight(b) {
	  var a = nbi();if (b < 0) {
	    this.lShiftTo(-b, a);
	  } else {
	    this.rShiftTo(b, a);
	  }return a;
	}function lbit(a) {
	  if (a == 0) {
	    return -1;
	  }var b = 0;if ((a & 65535) == 0) {
	    a >>= 16;b += 16;
	  }if ((a & 255) == 0) {
	    a >>= 8;b += 8;
	  }if ((a & 15) == 0) {
	    a >>= 4;b += 4;
	  }if ((a & 3) == 0) {
	    a >>= 2;b += 2;
	  }if ((a & 1) == 0) {
	    ++b;
	  }return b;
	}function bnGetLowestSetBit() {
	  for (var a = 0; a < this.t; ++a) {
	    if (this[a] != 0) {
	      return a * this.DB + lbit(this[a]);
	    }
	  }if (this.s < 0) {
	    return this.t * this.DB;
	  }return -1;
	}function cbit(a) {
	  var b = 0;while (a != 0) {
	    a &= a - 1;++b;
	  }return b;
	}function bnBitCount() {
	  var c = 0,
	      a = this.s & this.DM;for (var b = 0; b < this.t; ++b) {
	    c += cbit(this[b] ^ a);
	  }return c;
	}function bnTestBit(b) {
	  var a = Math.floor(b / this.DB);if (a >= this.t) {
	    return this.s != 0;
	  }return (this[a] & 1 << b % this.DB) != 0;
	}function bnpChangeBit(c, b) {
	  var a = BigInteger.ONE.shiftLeft(c);this.bitwiseTo(a, b, a);return a;
	}function bnSetBit(a) {
	  return this.changeBit(a, op_or);
	}function bnClearBit(a) {
	  return this.changeBit(a, op_andnot);
	}function bnFlipBit(a) {
	  return this.changeBit(a, op_xor);
	}function bnpAddTo(d, f) {
	  var e = 0,
	      g = 0,
	      b = Math.min(d.t, this.t);while (e < b) {
	    g += this[e] + d[e];f[e++] = g & this.DM;g >>= this.DB;
	  }if (d.t < this.t) {
	    g += d.s;while (e < this.t) {
	      g += this[e];f[e++] = g & this.DM;g >>= this.DB;
	    }g += this.s;
	  } else {
	    g += this.s;while (e < d.t) {
	      g += d[e];f[e++] = g & this.DM;g >>= this.DB;
	    }g += d.s;
	  }f.s = g < 0 ? -1 : 0;if (g > 0) {
	    f[e++] = g;
	  } else {
	    if (g < -1) {
	      f[e++] = this.DV + g;
	    }
	  }f.t = e;f.clamp();
	}function bnAdd(b) {
	  var c = nbi();this.addTo(b, c);return c;
	}function bnSubtract(b) {
	  var c = nbi();this.subTo(b, c);return c;
	}function bnMultiply(b) {
	  var c = nbi();this.multiplyTo(b, c);return c;
	}function bnSquare() {
	  var a = nbi();this.squareTo(a);return a;
	}function bnDivide(b) {
	  var c = nbi();this.divRemTo(b, c, null);return c;
	}function bnRemainder(b) {
	  var c = nbi();this.divRemTo(b, null, c);return c;
	}function bnDivideAndRemainder(b) {
	  var d = nbi(),
	      c = nbi();this.divRemTo(b, d, c);return new Array(d, c);
	}function bnpDMultiply(a) {
	  this[this.t] = this.am(0, a - 1, this, 0, 0, this.t);++this.t;this.clamp();
	}function bnpDAddOffset(b, a) {
	  if (b == 0) {
	    return;
	  }while (this.t <= a) {
	    this[this.t++] = 0;
	  }this[a] += b;while (this[a] >= this.DV) {
	    this[a] -= this.DV;if (++a >= this.t) {
	      this[this.t++] = 0;
	    }++this[a];
	  }
	}function NullExp() {}function nNop(a) {
	  return a;
	}function nMulTo(a, c, b) {
	  a.multiplyTo(c, b);
	}function nSqrTo(a, b) {
	  a.squareTo(b);
	}NullExp.prototype.convert = nNop;NullExp.prototype.revert = nNop;NullExp.prototype.mulTo = nMulTo;NullExp.prototype.sqrTo = nSqrTo;function bnPow(a) {
	  return this.exp(a, new NullExp());
	}function bnpMultiplyLowerTo(b, f, e) {
	  var d = Math.min(this.t + b.t, f);e.s = 0;e.t = d;while (d > 0) {
	    e[--d] = 0;
	  }var c;for (c = e.t - this.t; d < c; ++d) {
	    e[d + this.t] = this.am(0, b[d], e, d, 0, this.t);
	  }for (c = Math.min(b.t, f); d < c; ++d) {
	    this.am(0, b[d], e, d, 0, f - d);
	  }e.clamp();
	}function bnpMultiplyUpperTo(b, e, d) {
	  --e;var c = d.t = this.t + b.t - e;d.s = 0;while (--c >= 0) {
	    d[c] = 0;
	  }for (c = Math.max(e - this.t, 0); c < b.t; ++c) {
	    d[this.t + c - e] = this.am(e - c, b[c], d, 0, 0, this.t + c - e);
	  }d.clamp();d.drShiftTo(1, d);
	}function Barrett(a) {
	  this.r2 = nbi();this.q3 = nbi();BigInteger.ONE.dlShiftTo(2 * a.t, this.r2);this.mu = this.r2.divide(a);this.m = a;
	}function barrettConvert(a) {
	  if (a.s < 0 || a.t > 2 * this.m.t) {
	    return a.mod(this.m);
	  } else {
	    if (a.compareTo(this.m) < 0) {
	      return a;
	    } else {
	      var b = nbi();a.copyTo(b);this.reduce(b);return b;
	    }
	  }
	}function barrettRevert(a) {
	  return a;
	}function barrettReduce(a) {
	  a.drShiftTo(this.m.t - 1, this.r2);if (a.t > this.m.t + 1) {
	    a.t = this.m.t + 1;a.clamp();
	  }this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);while (a.compareTo(this.r2) < 0) {
	    a.dAddOffset(1, this.m.t + 1);
	  }a.subTo(this.r2, a);while (a.compareTo(this.m) >= 0) {
	    a.subTo(this.m, a);
	  }
	}function barrettSqrTo(a, b) {
	  a.squareTo(b);this.reduce(b);
	}function barrettMulTo(a, c, b) {
	  a.multiplyTo(c, b);this.reduce(b);
	}Barrett.prototype.convert = barrettConvert;Barrett.prototype.revert = barrettRevert;Barrett.prototype.reduce = barrettReduce;Barrett.prototype.mulTo = barrettMulTo;Barrett.prototype.sqrTo = barrettSqrTo;function bnModPow(q, f) {
	  var o = q.bitLength(),
	      h,
	      b = nbv(1),
	      v;if (o <= 0) {
	    return b;
	  } else {
	    if (o < 18) {
	      h = 1;
	    } else {
	      if (o < 48) {
	        h = 3;
	      } else {
	        if (o < 144) {
	          h = 4;
	        } else {
	          if (o < 768) {
	            h = 5;
	          } else {
	            h = 6;
	          }
	        }
	      }
	    }
	  }if (o < 8) {
	    v = new Classic(f);
	  } else {
	    if (f.isEven()) {
	      v = new Barrett(f);
	    } else {
	      v = new Montgomery(f);
	    }
	  }var p = new Array(),
	      d = 3,
	      s = h - 1,
	      a = (1 << h) - 1;p[1] = v.convert(this);if (h > 1) {
	    var A = nbi();v.sqrTo(p[1], A);while (d <= a) {
	      p[d] = nbi();v.mulTo(A, p[d - 2], p[d]);d += 2;
	    }
	  }var l = q.t - 1,
	      x,
	      u = true,
	      c = nbi(),
	      y;o = nbits(q[l]) - 1;while (l >= 0) {
	    if (o >= s) {
	      x = q[l] >> o - s & a;
	    } else {
	      x = (q[l] & (1 << o + 1) - 1) << s - o;if (l > 0) {
	        x |= q[l - 1] >> this.DB + o - s;
	      }
	    }d = h;while ((x & 1) == 0) {
	      x >>= 1;--d;
	    }if ((o -= d) < 0) {
	      o += this.DB;--l;
	    }if (u) {
	      p[x].copyTo(b);u = false;
	    } else {
	      while (d > 1) {
	        v.sqrTo(b, c);v.sqrTo(c, b);d -= 2;
	      }if (d > 0) {
	        v.sqrTo(b, c);
	      } else {
	        y = b;b = c;c = y;
	      }v.mulTo(c, p[x], b);
	    }while (l >= 0 && (q[l] & 1 << o) == 0) {
	      v.sqrTo(b, c);y = b;b = c;c = y;if (--o < 0) {
	        o = this.DB - 1;--l;
	      }
	    }
	  }return v.revert(b);
	}function bnGCD(c) {
	  var b = this.s < 0 ? this.negate() : this.clone();var h = c.s < 0 ? c.negate() : c.clone();if (b.compareTo(h) < 0) {
	    var e = b;b = h;h = e;
	  }var d = b.getLowestSetBit(),
	      f = h.getLowestSetBit();if (f < 0) {
	    return b;
	  }if (d < f) {
	    f = d;
	  }if (f > 0) {
	    b.rShiftTo(f, b);h.rShiftTo(f, h);
	  }while (b.signum() > 0) {
	    if ((d = b.getLowestSetBit()) > 0) {
	      b.rShiftTo(d, b);
	    }if ((d = h.getLowestSetBit()) > 0) {
	      h.rShiftTo(d, h);
	    }if (b.compareTo(h) >= 0) {
	      b.subTo(h, b);b.rShiftTo(1, b);
	    } else {
	      h.subTo(b, h);h.rShiftTo(1, h);
	    }
	  }if (f > 0) {
	    h.lShiftTo(f, h);
	  }return h;
	}function bnpModInt(e) {
	  if (e <= 0) {
	    return 0;
	  }var c = this.DV % e,
	      b = this.s < 0 ? e - 1 : 0;if (this.t > 0) {
	    if (c == 0) {
	      b = this[0] % e;
	    } else {
	      for (var a = this.t - 1; a >= 0; --a) {
	        b = (c * b + this[a]) % e;
	      }
	    }
	  }return b;
	}function bnModInverse(f) {
	  var j = f.isEven();if (this.isEven() && j || f.signum() == 0) {
	    return BigInteger.ZERO;
	  }var i = f.clone(),
	      h = this.clone();var g = nbv(1),
	      e = nbv(0),
	      l = nbv(0),
	      k = nbv(1);while (i.signum() != 0) {
	    while (i.isEven()) {
	      i.rShiftTo(1, i);if (j) {
	        if (!g.isEven() || !e.isEven()) {
	          g.addTo(this, g);e.subTo(f, e);
	        }g.rShiftTo(1, g);
	      } else {
	        if (!e.isEven()) {
	          e.subTo(f, e);
	        }
	      }e.rShiftTo(1, e);
	    }while (h.isEven()) {
	      h.rShiftTo(1, h);if (j) {
	        if (!l.isEven() || !k.isEven()) {
	          l.addTo(this, l);k.subTo(f, k);
	        }l.rShiftTo(1, l);
	      } else {
	        if (!k.isEven()) {
	          k.subTo(f, k);
	        }
	      }k.rShiftTo(1, k);
	    }if (i.compareTo(h) >= 0) {
	      i.subTo(h, i);if (j) {
	        g.subTo(l, g);
	      }e.subTo(k, e);
	    } else {
	      h.subTo(i, h);if (j) {
	        l.subTo(g, l);
	      }k.subTo(e, k);
	    }
	  }if (h.compareTo(BigInteger.ONE) != 0) {
	    return BigInteger.ZERO;
	  }if (k.compareTo(f) >= 0) {
	    return k.subtract(f);
	  }if (k.signum() < 0) {
	    k.addTo(f, k);
	  } else {
	    return k;
	  }if (k.signum() < 0) {
	    return k.add(f);
	  } else {
	    return k;
	  }
	}var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];function bnIsProbablePrime(e) {
	  var d,
	      b = this.abs();if (b.t == 1 && b[0] <= lowprimes[lowprimes.length - 1]) {
	    for (d = 0; d < lowprimes.length; ++d) {
	      if (b[0] == lowprimes[d]) {
	        return true;
	      }
	    }return false;
	  }if (b.isEven()) {
	    return false;
	  }d = 1;while (d < lowprimes.length) {
	    var a = lowprimes[d],
	        c = d + 1;while (c < lowprimes.length && a < lplim) {
	      a *= lowprimes[c++];
	    }a = b.modInt(a);while (d < c) {
	      if (a % lowprimes[d++] == 0) {
	        return false;
	      }
	    }
	  }return b.millerRabin(e);
	}function bnpMillerRabin(f) {
	  var g = this.subtract(BigInteger.ONE);var c = g.getLowestSetBit();if (c <= 0) {
	    return false;
	  }var h = g.shiftRight(c);f = f + 1 >> 1;if (f > lowprimes.length) {
	    f = lowprimes.length;
	  }var b = nbi();for (var e = 0; e < f; ++e) {
	    b.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);var l = b.modPow(h, this);if (l.compareTo(BigInteger.ONE) != 0 && l.compareTo(g) != 0) {
	      var d = 1;while (d++ < c && l.compareTo(g) != 0) {
	        l = l.modPowInt(2, this);if (l.compareTo(BigInteger.ONE) == 0) {
	          return false;
	        }
	      }if (l.compareTo(g) != 0) {
	        return false;
	      }
	    }
	  }return true;
	}BigInteger.prototype.chunkSize = bnpChunkSize;BigInteger.prototype.toRadix = bnpToRadix;BigInteger.prototype.fromRadix = bnpFromRadix;BigInteger.prototype.fromNumber = bnpFromNumber;BigInteger.prototype.bitwiseTo = bnpBitwiseTo;BigInteger.prototype.changeBit = bnpChangeBit;BigInteger.prototype.addTo = bnpAddTo;BigInteger.prototype.dMultiply = bnpDMultiply;BigInteger.prototype.dAddOffset = bnpDAddOffset;BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;BigInteger.prototype.modInt = bnpModInt;BigInteger.prototype.millerRabin = bnpMillerRabin;BigInteger.prototype.clone = bnClone;BigInteger.prototype.intValue = bnIntValue;BigInteger.prototype.byteValue = bnByteValue;BigInteger.prototype.shortValue = bnShortValue;BigInteger.prototype.signum = bnSigNum;BigInteger.prototype.toByteArray = bnToByteArray;BigInteger.prototype.equals = bnEquals;BigInteger.prototype.min = bnMin;BigInteger.prototype.max = bnMax;BigInteger.prototype.and = bnAnd;BigInteger.prototype.or = bnOr;BigInteger.prototype.xor = bnXor;BigInteger.prototype.andNot = bnAndNot;BigInteger.prototype.not = bnNot;BigInteger.prototype.shiftLeft = bnShiftLeft;BigInteger.prototype.shiftRight = bnShiftRight;BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;BigInteger.prototype.bitCount = bnBitCount;BigInteger.prototype.testBit = bnTestBit;BigInteger.prototype.setBit = bnSetBit;BigInteger.prototype.clearBit = bnClearBit;BigInteger.prototype.flipBit = bnFlipBit;BigInteger.prototype.add = bnAdd;BigInteger.prototype.subtract = bnSubtract;BigInteger.prototype.multiply = bnMultiply;BigInteger.prototype.divide = bnDivide;BigInteger.prototype.remainder = bnRemainder;BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;BigInteger.prototype.modPow = bnModPow;BigInteger.prototype.modInverse = bnModInverse;BigInteger.prototype.pow = bnPow;BigInteger.prototype.gcd = bnGCD;BigInteger.prototype.isProbablePrime = bnIsProbablePrime;BigInteger.prototype.square = bnSquare;
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	function Arcfour() {
	  this.i = 0;this.j = 0;this.S = new Array();
	}function ARC4init(d) {
	  var c, a, b;for (c = 0; c < 256; ++c) {
	    this.S[c] = c;
	  }a = 0;for (c = 0; c < 256; ++c) {
	    a = a + this.S[c] + d[c % d.length] & 255;b = this.S[c];this.S[c] = this.S[a];this.S[a] = b;
	  }this.i = 0;this.j = 0;
	}function ARC4next() {
	  var a;this.i = this.i + 1 & 255;this.j = this.j + this.S[this.i] & 255;a = this.S[this.i];this.S[this.i] = this.S[this.j];this.S[this.j] = a;return this.S[a + this.S[this.i] & 255];
	}Arcfour.prototype.init = ARC4init;Arcfour.prototype.next = ARC4next;function prng_newstate() {
	  return new Arcfour();
	}var rng_psize = 256;
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	var rng_state;var rng_pool;var rng_pptr;function rng_seed_int(a) {
	  rng_pool[rng_pptr++] ^= a & 255;rng_pool[rng_pptr++] ^= a >> 8 & 255;rng_pool[rng_pptr++] ^= a >> 16 & 255;rng_pool[rng_pptr++] ^= a >> 24 & 255;if (rng_pptr >= rng_psize) {
	    rng_pptr -= rng_psize;
	  }
	}function rng_seed_time() {
	  rng_seed_int(new Date().getTime());
	}if (rng_pool == null) {
	  rng_pool = new Array();rng_pptr = 0;var t;if (window !== undefined && (window.crypto !== undefined || window.msCrypto !== undefined)) {
	    var crypto = window.crypto || window.msCrypto;if (crypto.getRandomValues) {
	      var ua = new Uint8Array(32);crypto.getRandomValues(ua);for (t = 0; t < 32; ++t) {
	        rng_pool[rng_pptr++] = ua[t];
	      }
	    } else {
	      if (navigator.appName == "Netscape" && navigator.appVersion < "5") {
	        var z = window.crypto.random(32);for (t = 0; t < z.length; ++t) {
	          rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
	        }
	      }
	    }
	  }while (rng_pptr < rng_psize) {
	    t = Math.floor(65536 * Math.random());rng_pool[rng_pptr++] = t >>> 8;rng_pool[rng_pptr++] = t & 255;
	  }rng_pptr = 0;rng_seed_time();
	}function rng_get_byte() {
	  if (rng_state == null) {
	    rng_seed_time();rng_state = prng_newstate();rng_state.init(rng_pool);for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {
	      rng_pool[rng_pptr] = 0;
	    }rng_pptr = 0;
	  }return rng_state.next();
	}function rng_get_bytes(b) {
	  var a;for (a = 0; a < b.length; ++a) {
	    b[a] = rng_get_byte();
	  }
	}function SecureRandom() {}SecureRandom.prototype.nextBytes = rng_get_bytes;
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	function parseBigInt(b, a) {
	  return new BigInteger(b, a);
	}function linebrk(c, d) {
	  var a = "";var b = 0;while (b + d < c.length) {
	    a += c.substring(b, b + d) + "\n";b += d;
	  }return a + c.substring(b, c.length);
	}function byte2Hex(a) {
	  if (a < 16) {
	    return "0" + a.toString(16);
	  } else {
	    return a.toString(16);
	  }
	}function pkcs1pad2(e, h) {
	  if (h < e.length + 11) {
	    throw "Message too long for RSA";return null;
	  }var g = new Array();var d = e.length - 1;while (d >= 0 && h > 0) {
	    var f = e.charCodeAt(d--);if (f < 128) {
	      g[--h] = f;
	    } else {
	      if (f > 127 && f < 2048) {
	        g[--h] = f & 63 | 128;g[--h] = f >> 6 | 192;
	      } else {
	        g[--h] = f & 63 | 128;g[--h] = f >> 6 & 63 | 128;g[--h] = f >> 12 | 224;
	      }
	    }
	  }g[--h] = 0;var b = new SecureRandom();var a = new Array();while (h > 2) {
	    a[0] = 0;while (a[0] == 0) {
	      b.nextBytes(a);
	    }g[--h] = a[0];
	  }g[--h] = 2;g[--h] = 0;return new BigInteger(g);
	}function oaep_mgf1_arr(c, a, e) {
	  var b = "",
	      d = 0;while (b.length < a) {
	    b += e(String.fromCharCode.apply(String, c.concat([(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255])));d += 1;
	  }return b;
	}function oaep_pad(q, a, f, l) {
	  var c = KJUR.crypto.MessageDigest;var o = KJUR.crypto.Util;var b = null;if (!f) {
	    f = "sha1";
	  }if (typeof f === "string") {
	    b = c.getCanonicalAlgName(f);l = c.getHashLength(b);f = function f(i) {
	      return hextorstr(o.hashHex(rstrtohex(i), b));
	    };
	  }if (q.length + 2 * l + 2 > a) {
	    throw "Message too long for RSA";
	  }var k = "",
	      e;for (e = 0; e < a - q.length - 2 * l - 2; e += 1) {
	    k += "\x00";
	  }var h = f("") + k + "\x01" + q;var g = new Array(l);new SecureRandom().nextBytes(g);var j = oaep_mgf1_arr(g, h.length, f);var p = [];for (e = 0; e < h.length; e += 1) {
	    p[e] = h.charCodeAt(e) ^ j.charCodeAt(e);
	  }var m = oaep_mgf1_arr(p, g.length, f);var d = [0];for (e = 0; e < g.length; e += 1) {
	    d[e + 1] = g[e] ^ m.charCodeAt(e);
	  }return new BigInteger(d.concat(p));
	}function RSAKey() {
	  this.n = null;this.e = 0;this.d = null;this.p = null;this.q = null;this.dmp1 = null;this.dmq1 = null;this.coeff = null;
	}function RSASetPublic(b, a) {
	  this.isPublic = true;this.isPrivate = false;if (typeof b !== "string") {
	    this.n = b;this.e = a;
	  } else {
	    if (b != null && a != null && b.length > 0 && a.length > 0) {
	      this.n = parseBigInt(b, 16);this.e = parseInt(a, 16);
	    } else {
	      throw "Invalid RSA public key";
	    }
	  }
	}function RSADoPublic(a) {
	  return a.modPowInt(this.e, this.n);
	}function RSAEncrypt(d) {
	  var a = pkcs1pad2(d, this.n.bitLength() + 7 >> 3);if (a == null) {
	    return null;
	  }var e = this.doPublic(a);if (e == null) {
	    return null;
	  }var b = e.toString(16);if ((b.length & 1) == 0) {
	    return b;
	  } else {
	    return "0" + b;
	  }
	}function RSAEncryptOAEP(f, e, b) {
	  var a = oaep_pad(f, this.n.bitLength() + 7 >> 3, e, b);if (a == null) {
	    return null;
	  }var g = this.doPublic(a);if (g == null) {
	    return null;
	  }var d = g.toString(16);if ((d.length & 1) == 0) {
	    return d;
	  } else {
	    return "0" + d;
	  }
	}RSAKey.prototype.doPublic = RSADoPublic;RSAKey.prototype.setPublic = RSASetPublic;RSAKey.prototype.encrypt = RSAEncrypt;RSAKey.prototype.encryptOAEP = RSAEncryptOAEP;RSAKey.prototype.type = "RSA";
	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	function ECFieldElementFp(b, a) {
	  this.x = a;this.q = b;
	}function feFpEquals(a) {
	  if (a == this) {
	    return true;
	  }return this.q.equals(a.q) && this.x.equals(a.x);
	}function feFpToBigInteger() {
	  return this.x;
	}function feFpNegate() {
	  return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));
	}function feFpAdd(a) {
	  return new ECFieldElementFp(this.q, this.x.add(a.toBigInteger()).mod(this.q));
	}function feFpSubtract(a) {
	  return new ECFieldElementFp(this.q, this.x.subtract(a.toBigInteger()).mod(this.q));
	}function feFpMultiply(a) {
	  return new ECFieldElementFp(this.q, this.x.multiply(a.toBigInteger()).mod(this.q));
	}function feFpSquare() {
	  return new ECFieldElementFp(this.q, this.x.square().mod(this.q));
	}function feFpDivide(a) {
	  return new ECFieldElementFp(this.q, this.x.multiply(a.toBigInteger().modInverse(this.q)).mod(this.q));
	}ECFieldElementFp.prototype.equals = feFpEquals;ECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;ECFieldElementFp.prototype.negate = feFpNegate;ECFieldElementFp.prototype.add = feFpAdd;ECFieldElementFp.prototype.subtract = feFpSubtract;ECFieldElementFp.prototype.multiply = feFpMultiply;ECFieldElementFp.prototype.square = feFpSquare;ECFieldElementFp.prototype.divide = feFpDivide;function ECPointFp(c, a, d, b) {
	  this.curve = c;this.x = a;this.y = d;if (b == null) {
	    this.z = BigInteger.ONE;
	  } else {
	    this.z = b;
	  }this.zinv = null;
	}function pointFpGetX() {
	  if (this.zinv == null) {
	    this.zinv = this.z.modInverse(this.curve.q);
	  }return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));
	}function pointFpGetY() {
	  if (this.zinv == null) {
	    this.zinv = this.z.modInverse(this.curve.q);
	  }return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));
	}function pointFpEquals(a) {
	  if (a == this) {
	    return true;
	  }if (this.isInfinity()) {
	    return a.isInfinity();
	  }if (a.isInfinity()) {
	    return this.isInfinity();
	  }var c, b;c = a.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(a.z)).mod(this.curve.q);if (!c.equals(BigInteger.ZERO)) {
	    return false;
	  }b = a.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(a.z)).mod(this.curve.q);return b.equals(BigInteger.ZERO);
	}function pointFpIsInfinity() {
	  if (this.x == null && this.y == null) {
	    return true;
	  }return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);
	}function pointFpNegate() {
	  return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);
	}function pointFpAdd(l) {
	  if (this.isInfinity()) {
	    return l;
	  }if (l.isInfinity()) {
	    return this;
	  }var p = l.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(l.z)).mod(this.curve.q);var o = l.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(l.z)).mod(this.curve.q);if (BigInteger.ZERO.equals(o)) {
	    if (BigInteger.ZERO.equals(p)) {
	      return this.twice();
	    }return this.curve.getInfinity();
	  }var j = new BigInteger("3");var e = this.x.toBigInteger();var n = this.y.toBigInteger();var c = l.x.toBigInteger();var k = l.y.toBigInteger();var m = o.square();var i = m.multiply(o);var d = e.multiply(m);var g = p.square().multiply(this.z);var a = g.subtract(d.shiftLeft(1)).multiply(l.z).subtract(i).multiply(o).mod(this.curve.q);var h = d.multiply(j).multiply(p).subtract(n.multiply(i)).subtract(g.multiply(p)).multiply(l.z).add(p.multiply(i)).mod(this.curve.q);var f = i.multiply(this.z).multiply(l.z).mod(this.curve.q);return new ECPointFp(this.curve, this.curve.fromBigInteger(a), this.curve.fromBigInteger(h), f);
	}function pointFpTwice() {
	  if (this.isInfinity()) {
	    return this;
	  }if (this.y.toBigInteger().signum() == 0) {
	    return this.curve.getInfinity();
	  }var g = new BigInteger("3");var c = this.x.toBigInteger();var h = this.y.toBigInteger();var e = h.multiply(this.z);var j = e.multiply(h).mod(this.curve.q);var i = this.curve.a.toBigInteger();var k = c.square().multiply(g);if (!BigInteger.ZERO.equals(i)) {
	    k = k.add(this.z.square().multiply(i));
	  }k = k.mod(this.curve.q);var b = k.square().subtract(c.shiftLeft(3).multiply(j)).shiftLeft(1).multiply(e).mod(this.curve.q);var f = k.multiply(g).multiply(c).subtract(j.shiftLeft(1)).shiftLeft(2).multiply(j).subtract(k.square().multiply(k)).mod(this.curve.q);var d = e.square().multiply(e).shiftLeft(3).mod(this.curve.q);return new ECPointFp(this.curve, this.curve.fromBigInteger(b), this.curve.fromBigInteger(f), d);
	}function pointFpMultiply(b) {
	  if (this.isInfinity()) {
	    return this;
	  }if (b.signum() == 0) {
	    return this.curve.getInfinity();
	  }var g = b;var f = g.multiply(new BigInteger("3"));var l = this.negate();var d = this;var c;for (c = f.bitLength() - 2; c > 0; --c) {
	    d = d.twice();var a = f.testBit(c);var j = g.testBit(c);if (a != j) {
	      d = d.add(a ? this : l);
	    }
	  }return d;
	}function pointFpMultiplyTwo(c, a, b) {
	  var d;if (c.bitLength() > b.bitLength()) {
	    d = c.bitLength() - 1;
	  } else {
	    d = b.bitLength() - 1;
	  }var f = this.curve.getInfinity();var e = this.add(a);while (d >= 0) {
	    f = f.twice();if (c.testBit(d)) {
	      if (b.testBit(d)) {
	        f = f.add(e);
	      } else {
	        f = f.add(this);
	      }
	    } else {
	      if (b.testBit(d)) {
	        f = f.add(a);
	      }
	    }--d;
	  }return f;
	}ECPointFp.prototype.getX = pointFpGetX;ECPointFp.prototype.getY = pointFpGetY;ECPointFp.prototype.equals = pointFpEquals;ECPointFp.prototype.isInfinity = pointFpIsInfinity;ECPointFp.prototype.negate = pointFpNegate;ECPointFp.prototype.add = pointFpAdd;ECPointFp.prototype.twice = pointFpTwice;ECPointFp.prototype.multiply = pointFpMultiply;ECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;function ECCurveFp(e, d, c) {
	  this.q = e;this.a = this.fromBigInteger(d);this.b = this.fromBigInteger(c);this.infinity = new ECPointFp(this, null, null);
	}function curveFpGetQ() {
	  return this.q;
	}function curveFpGetA() {
	  return this.a;
	}function curveFpGetB() {
	  return this.b;
	}function curveFpEquals(a) {
	  if (a == this) {
	    return true;
	  }return this.q.equals(a.q) && this.a.equals(a.a) && this.b.equals(a.b);
	}function curveFpGetInfinity() {
	  return this.infinity;
	}function curveFpFromBigInteger(a) {
	  return new ECFieldElementFp(this.q, a);
	}function curveFpDecodePointHex(d) {
	  switch (parseInt(d.substr(0, 2), 16)) {case 0:
	      return this.infinity;case 2:case 3:
	      return null;case 4:case 6:case 7:
	      var a = (d.length - 2) / 2;var c = d.substr(2, a);var b = d.substr(a + 2, a);return new ECPointFp(this, this.fromBigInteger(new BigInteger(c, 16)), this.fromBigInteger(new BigInteger(b, 16)));default:
	      return null;}
	}ECCurveFp.prototype.getQ = curveFpGetQ;ECCurveFp.prototype.getA = curveFpGetA;ECCurveFp.prototype.getB = curveFpGetB;ECCurveFp.prototype.equals = curveFpEquals;ECCurveFp.prototype.getInfinity = curveFpGetInfinity;ECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;
	/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
	 */
	var jsonParse = function () {
	  var e = "(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)";var j = '(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))';var i = '(?:"' + j + '*")';var d = new RegExp("(?:false|true|null|[\\{\\}\\[\\]]|" + e + "|" + i + ")", "g");var k = new RegExp("\\\\(?:([^u])|u(.{4}))", "g");var g = { '"': '"', "/": "/", "\\": "\\", b: "\b", f: "\f", n: "\n", r: "\r", t: "\t" };function h(l, m, n) {
	    return m ? g[m] : String.fromCharCode(parseInt(n, 16));
	  }var c = new String("");var a = "\\";var f = { "{": Object, "[": Array };var b = Object.hasOwnProperty;return function (u, q) {
	    var p = u.match(d);var x;var v = p[0];var l = false;if ("{" === v) {
	      x = {};
	    } else {
	      if ("[" === v) {
	        x = [];
	      } else {
	        x = [];l = true;
	      }
	    }var t;var r = [x];for (var o = 1 - l, m = p.length; o < m; ++o) {
	      v = p[o];var w;switch (v.charCodeAt(0)) {default:
	          w = r[0];w[t || w.length] = +v;t = void 0;break;case 34:
	          v = v.substring(1, v.length - 1);if (v.indexOf(a) !== -1) {
	            v = v.replace(k, h);
	          }w = r[0];if (!t) {
	            if (w instanceof Array) {
	              t = w.length;
	            } else {
	              t = v || c;break;
	            }
	          }w[t] = v;t = void 0;break;case 91:
	          w = r[0];r.unshift(w[t || w.length] = []);t = void 0;break;case 93:
	          r.shift();break;case 102:
	          w = r[0];w[t || w.length] = false;t = void 0;break;case 110:
	          w = r[0];w[t || w.length] = null;t = void 0;break;case 116:
	          w = r[0];w[t || w.length] = true;t = void 0;break;case 123:
	          w = r[0];r.unshift(w[t || w.length] = {});t = void 0;break;case 125:
	          r.shift();break;}
	    }if (l) {
	      if (r.length !== 1) {
	        throw new Error();
	      }x = x[0];
	    } else {
	      if (r.length) {
	        throw new Error();
	      }
	    }if (q) {
	      var s = function s(C, B) {
	        var D = C[B];if (D && (typeof D === "undefined" ? "undefined" : _typeof(D)) === "object") {
	          var n = null;for (var z in D) {
	            if (b.call(D, z) && D !== C) {
	              var y = s(D, z);if (y !== void 0) {
	                D[z] = y;
	              } else {
	                if (!n) {
	                  n = [];
	                }n.push(z);
	              }
	            }
	          }if (n) {
	            for (var A = n.length; --A >= 0;) {
	              delete D[n[A]];
	            }
	          }
	        }return q.call(C, B, D);
	      };x = s({ "": x }, "");
	    }return x;
	  };
	}();
	var ASN1HEX = new function () {}();ASN1HEX.getLblen = function (c, a) {
	  if (c.substr(a + 2, 1) != "8") {
	    return 1;
	  }var b = parseInt(c.substr(a + 3, 1));if (b == 0) {
	    return -1;
	  }if (0 < b && b < 10) {
	    return b + 1;
	  }return -2;
	};ASN1HEX.getL = function (c, b) {
	  var a = ASN1HEX.getLblen(c, b);if (a < 1) {
	    return "";
	  }return c.substr(b + 2, a * 2);
	};ASN1HEX.getVblen = function (d, a) {
	  var c, b;c = ASN1HEX.getL(d, a);if (c == "") {
	    return -1;
	  }if (c.substr(0, 1) === "8") {
	    b = new BigInteger(c.substr(2), 16);
	  } else {
	    b = new BigInteger(c, 16);
	  }return b.intValue();
	};ASN1HEX.getVidx = function (c, b) {
	  var a = ASN1HEX.getLblen(c, b);if (a < 0) {
	    return a;
	  }return b + (a + 1) * 2;
	};ASN1HEX.getV = function (d, a) {
	  var c = ASN1HEX.getVidx(d, a);var b = ASN1HEX.getVblen(d, a);return d.substr(c, b * 2);
	};ASN1HEX.getTLV = function (b, a) {
	  return b.substr(a, 2) + ASN1HEX.getL(b, a) + ASN1HEX.getV(b, a);
	};ASN1HEX.getNextSiblingIdx = function (d, a) {
	  var c = ASN1HEX.getVidx(d, a);var b = ASN1HEX.getVblen(d, a);return c + b * 2;
	};ASN1HEX.getChildIdx = function (e, f) {
	  var j = ASN1HEX;var g = new Array();var i = j.getVidx(e, f);if (e.substr(f, 2) == "03") {
	    g.push(i + 2);
	  } else {
	    g.push(i);
	  }var l = j.getVblen(e, f);var c = i;var d = 0;while (1) {
	    var b = j.getNextSiblingIdx(e, c);if (b == null || b - i >= l * 2) {
	      break;
	    }if (d >= 200) {
	      break;
	    }g.push(b);c = b;d++;
	  }return g;
	};ASN1HEX.getNthChildIdx = function (d, b, e) {
	  var c = ASN1HEX.getChildIdx(d, b);return c[e];
	};ASN1HEX.getIdxbyList = function (e, d, c, i) {
	  var g = ASN1HEX;var f, b;if (c.length == 0) {
	    if (i !== undefined) {
	      if (e.substr(d, 2) !== i) {
	        throw "checking tag doesn't match: " + e.substr(d, 2) + "!=" + i;
	      }
	    }return d;
	  }f = c.shift();b = g.getChildIdx(e, d);return g.getIdxbyList(e, b[f], c, i);
	};ASN1HEX.getTLVbyList = function (d, c, b, f) {
	  var e = ASN1HEX;var a = e.getIdxbyList(d, c, b);if (a === undefined) {
	    throw "can't find nthList object";
	  }if (f !== undefined) {
	    if (d.substr(a, 2) != f) {
	      throw "checking tag doesn't match: " + d.substr(a, 2) + "!=" + f;
	    }
	  }return e.getTLV(d, a);
	};ASN1HEX.getVbyList = function (e, c, b, g, i) {
	  var f = ASN1HEX;var a, d;a = f.getIdxbyList(e, c, b, g);if (a === undefined) {
	    throw "can't find nthList object";
	  }d = f.getV(e, a);if (i === true) {
	    d = d.substr(2);
	  }return d;
	};ASN1HEX.hextooidstr = function (e) {
	  var h = function h(b, a) {
	    if (b.length >= a) {
	      return b;
	    }return new Array(a - b.length + 1).join("0") + b;
	  };var l = [];var o = e.substr(0, 2);var f = parseInt(o, 16);l[0] = new String(Math.floor(f / 40));l[1] = new String(f % 40);var m = e.substr(2);var k = [];for (var g = 0; g < m.length / 2; g++) {
	    k.push(parseInt(m.substr(g * 2, 2), 16));
	  }var j = [];var d = "";for (var g = 0; g < k.length; g++) {
	    if (k[g] & 128) {
	      d = d + h((k[g] & 127).toString(2), 7);
	    } else {
	      d = d + h((k[g] & 127).toString(2), 7);j.push(new String(parseInt(d, 2)));d = "";
	    }
	  }var n = l.join(".");if (j.length > 0) {
	    n = n + "." + j.join(".");
	  }return n;
	};ASN1HEX.dump = function (t, c, l, g) {
	  var p = ASN1HEX;var j = p.getV;var y = p.dump;var w = p.getChildIdx;var e = t;if (t instanceof KJUR.asn1.ASN1Object) {
	    e = t.getEncodedHex();
	  }var q = function q(A, i) {
	    if (A.length <= i * 2) {
	      return A;
	    } else {
	      var v = A.substr(0, i) + "..(total " + A.length / 2 + "bytes).." + A.substr(A.length - i, i);return v;
	    }
	  };if (c === undefined) {
	    c = { ommit_long_octet: 32 };
	  }if (l === undefined) {
	    l = 0;
	  }if (g === undefined) {
	    g = "";
	  }var x = c.ommit_long_octet;if (e.substr(l, 2) == "01") {
	    var h = j(e, l);if (h == "00") {
	      return g + "BOOLEAN FALSE\n";
	    } else {
	      return g + "BOOLEAN TRUE\n";
	    }
	  }if (e.substr(l, 2) == "02") {
	    var h = j(e, l);return g + "INTEGER " + q(h, x) + "\n";
	  }if (e.substr(l, 2) == "03") {
	    var h = j(e, l);return g + "BITSTRING " + q(h, x) + "\n";
	  }if (e.substr(l, 2) == "04") {
	    var h = j(e, l);if (p.isASN1HEX(h)) {
	      var k = g + "OCTETSTRING, encapsulates\n";k = k + y(h, c, 0, g + "  ");return k;
	    } else {
	      return g + "OCTETSTRING " + q(h, x) + "\n";
	    }
	  }if (e.substr(l, 2) == "05") {
	    return g + "NULL\n";
	  }if (e.substr(l, 2) == "06") {
	    var m = j(e, l);var a = KJUR.asn1.ASN1Util.oidHexToInt(m);var o = KJUR.asn1.x509.OID.oid2name(a);var b = a.replace(/\./g, " ");if (o != "") {
	      return g + "ObjectIdentifier " + o + " (" + b + ")\n";
	    } else {
	      return g + "ObjectIdentifier (" + b + ")\n";
	    }
	  }if (e.substr(l, 2) == "0c") {
	    return g + "UTF8String '" + hextoutf8(j(e, l)) + "'\n";
	  }if (e.substr(l, 2) == "13") {
	    return g + "PrintableString '" + hextoutf8(j(e, l)) + "'\n";
	  }if (e.substr(l, 2) == "14") {
	    return g + "TeletexString '" + hextoutf8(j(e, l)) + "'\n";
	  }if (e.substr(l, 2) == "16") {
	    return g + "IA5String '" + hextoutf8(j(e, l)) + "'\n";
	  }if (e.substr(l, 2) == "17") {
	    return g + "UTCTime " + hextoutf8(j(e, l)) + "\n";
	  }if (e.substr(l, 2) == "18") {
	    return g + "GeneralizedTime " + hextoutf8(j(e, l)) + "\n";
	  }if (e.substr(l, 2) == "30") {
	    if (e.substr(l, 4) == "3000") {
	      return g + "SEQUENCE {}\n";
	    }var k = g + "SEQUENCE\n";var d = w(e, l);var f = c;if ((d.length == 2 || d.length == 3) && e.substr(d[0], 2) == "06" && e.substr(d[d.length - 1], 2) == "04") {
	      var o = p.oidname(j(e, d[0]));var r = JSON.parse(JSON.stringify(c));r.x509ExtName = o;f = r;
	    }for (var u = 0; u < d.length; u++) {
	      k = k + y(e, f, d[u], g + "  ");
	    }return k;
	  }if (e.substr(l, 2) == "31") {
	    var k = g + "SET\n";var d = w(e, l);for (var u = 0; u < d.length; u++) {
	      k = k + y(e, c, d[u], g + "  ");
	    }return k;
	  }var z = parseInt(e.substr(l, 2), 16);if ((z & 128) != 0) {
	    var n = z & 31;if ((z & 32) != 0) {
	      var k = g + "[" + n + "]\n";var d = w(e, l);for (var u = 0; u < d.length; u++) {
	        k = k + y(e, c, d[u], g + "  ");
	      }return k;
	    } else {
	      var h = j(e, l);if (h.substr(0, 8) == "68747470") {
	        h = hextoutf8(h);
	      }if (c.x509ExtName === "subjectAltName" && n == 2) {
	        h = hextoutf8(h);
	      }var k = g + "[" + n + "] " + h + "\n";return k;
	    }
	  }return g + "UNKNOWN(" + e.substr(l, 2) + ") " + j(e, l) + "\n";
	};ASN1HEX.isASN1HEX = function (e) {
	  var d = ASN1HEX;if (e.length % 2 == 1) {
	    return false;
	  }var c = d.getVblen(e, 0);var b = e.substr(0, 2);var f = d.getL(e, 0);var a = e.length - b.length - f.length;if (a == c * 2) {
	    return true;
	  }return false;
	};ASN1HEX.oidname = function (a) {
	  var c = KJUR.asn1;if (KJUR.lang.String.isHex(a)) {
	    a = c.ASN1Util.oidHexToInt(a);
	  }var b = c.x509.OID.oid2name(a);if (b === "") {
	    b = a;
	  }return b;
	};
	var KJUR;if (typeof KJUR == "undefined" || !KJUR) {
	  KJUR = {};
	}if (typeof KJUR.lang == "undefined" || !KJUR.lang) {
	  KJUR.lang = {};
	}KJUR.lang.String = function () {};function Base64x() {}function stoBA(d) {
	  var b = new Array();for (var c = 0; c < d.length; c++) {
	    b[c] = d.charCodeAt(c);
	  }return b;
	}function BAtos(b) {
	  var d = "";for (var c = 0; c < b.length; c++) {
	    d = d + String.fromCharCode(b[c]);
	  }return d;
	}function BAtohex(b) {
	  var e = "";for (var d = 0; d < b.length; d++) {
	    var c = b[d].toString(16);if (c.length == 1) {
	      c = "0" + c;
	    }e = e + c;
	  }return e;
	}function stohex(a) {
	  return BAtohex(stoBA(a));
	}function stob64(a) {
	  return hex2b64(stohex(a));
	}function stob64u(a) {
	  return b64tob64u(hex2b64(stohex(a)));
	}function b64utos(a) {
	  return BAtos(b64toBA(b64utob64(a)));
	}function b64tob64u(a) {
	  a = a.replace(/\=/g, "");a = a.replace(/\+/g, "-");a = a.replace(/\//g, "_");return a;
	}function b64utob64(a) {
	  if (a.length % 4 == 2) {
	    a = a + "==";
	  } else {
	    if (a.length % 4 == 3) {
	      a = a + "=";
	    }
	  }a = a.replace(/-/g, "+");a = a.replace(/_/g, "/");return a;
	}function hextob64u(a) {
	  if (a.length % 2 == 1) {
	    a = "0" + a;
	  }return b64tob64u(hex2b64(a));
	}function b64utohex(a) {
	  return b64tohex(b64utob64(a));
	}var utf8tob64u, b64utoutf8;if (typeof Buffer === "function") {
	  utf8tob64u = function utf8tob64u(a) {
	    return b64tob64u(new Buffer(a, "utf8").toString("base64"));
	  };b64utoutf8 = function b64utoutf8(a) {
	    return new Buffer(b64utob64(a), "base64").toString("utf8");
	  };
	} else {
	  utf8tob64u = function utf8tob64u(a) {
	    return hextob64u(uricmptohex(encodeURIComponentAll(a)));
	  };b64utoutf8 = function b64utoutf8(a) {
	    return decodeURIComponent(hextouricmp(b64utohex(a)));
	  };
	}function utf8tob64(a) {
	  return hex2b64(uricmptohex(encodeURIComponentAll(a)));
	}function b64toutf8(a) {
	  return decodeURIComponent(hextouricmp(b64tohex(a)));
	}function utf8tohex(a) {
	  return uricmptohex(encodeURIComponentAll(a));
	}function hextoutf8(a) {
	  return decodeURIComponent(hextouricmp(a));
	}function hextorstr(c) {
	  var b = "";for (var a = 0; a < c.length - 1; a += 2) {
	    b += String.fromCharCode(parseInt(c.substr(a, 2), 16));
	  }return b;
	}function rstrtohex(c) {
	  var a = "";for (var b = 0; b < c.length; b++) {
	    a += ("0" + c.charCodeAt(b).toString(16)).slice(-2);
	  }return a;
	}function hextob64(a) {
	  return hex2b64(a);
	}function hextob64nl(b) {
	  var a = hextob64(b);var c = a.replace(/(.{64})/g, "$1\r\n");c = c.replace(/\r\n$/, "");return c;
	}function b64nltohex(b) {
	  var a = b.replace(/[^0-9A-Za-z\/+=]*/g, "");var c = b64tohex(a);return c;
	}function hextopem(a, b) {
	  var c = hextob64nl(a);return "-----BEGIN " + b + "-----\r\n" + c + "\r\n-----END " + b + "-----\r\n";
	}function pemtohex(a, b) {
	  if (a.indexOf("-----BEGIN ") == -1) {
	    throw "can't find PEM header: " + b;
	  }if (b !== undefined) {
	    a = a.replace("-----BEGIN " + b + "-----", "");a = a.replace("-----END " + b + "-----", "");
	  } else {
	    a = a.replace(/-----BEGIN [^-]+-----/, "");a = a.replace(/-----END [^-]+-----/, "");
	  }return b64nltohex(a);
	}function hextoArrayBuffer(d) {
	  if (d.length % 2 != 0) {
	    throw "input is not even length";
	  }if (d.match(/^[0-9A-Fa-f]+$/) == null) {
	    throw "input is not hexadecimal";
	  }var b = new ArrayBuffer(d.length / 2);var a = new DataView(b);for (var c = 0; c < d.length / 2; c++) {
	    a.setUint8(c, parseInt(d.substr(c * 2, 2), 16));
	  }return b;
	}function ArrayBuffertohex(b) {
	  var d = "";var a = new DataView(b);for (var c = 0; c < b.byteLength; c++) {
	    d += ("00" + a.getUint8(c).toString(16)).slice(-2);
	  }return d;
	}function zulutomsec(n) {
	  var l, j, m, e, f, i, b, k;var a, h, g, c;c = n.match(/^(\d{2}|\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(|\.\d+)Z$/);if (c) {
	    a = c[1];l = parseInt(a);if (a.length === 2) {
	      if (50 <= l && l < 100) {
	        l = 1900 + l;
	      } else {
	        if (0 <= l && l < 50) {
	          l = 2000 + l;
	        }
	      }
	    }j = parseInt(c[2]) - 1;m = parseInt(c[3]);e = parseInt(c[4]);f = parseInt(c[5]);i = parseInt(c[6]);b = 0;h = c[7];if (h !== "") {
	      g = (h.substr(1) + "00").substr(0, 3);b = parseInt(g);
	    }return Date.UTC(l, j, m, e, f, i, b);
	  }throw "unsupported zulu format: " + n;
	}function zulutosec(a) {
	  var b = zulutomsec(a);return ~~(b / 1000);
	}function zulutodate(a) {
	  return new Date(zulutomsec(a));
	}function datetozulu(g, e, f) {
	  var b;var a = g.getUTCFullYear();if (e) {
	    if (a < 1950 || 2049 < a) {
	      throw "not proper year for UTCTime: " + a;
	    }b = ("" + a).slice(-2);
	  } else {
	    b = ("000" + a).slice(-4);
	  }b += ("0" + (g.getUTCMonth() + 1)).slice(-2);b += ("0" + g.getUTCDate()).slice(-2);b += ("0" + g.getUTCHours()).slice(-2);b += ("0" + g.getUTCMinutes()).slice(-2);b += ("0" + g.getUTCSeconds()).slice(-2);if (f) {
	    var c = g.getUTCMilliseconds();if (c !== 0) {
	      c = ("00" + c).slice(-3);c = c.replace(/0+$/g, "");b += "." + c;
	    }
	  }b += "Z";return b;
	}function uricmptohex(a) {
	  return a.replace(/%/g, "");
	}function hextouricmp(a) {
	  return a.replace(/(..)/g, "%$1");
	}function ipv6tohex(g) {
	  var b = "malformed IPv6 address";if (!g.match(/^[0-9A-Fa-f:]+$/)) {
	    throw b;
	  }g = g.toLowerCase();var d = g.split(":").length - 1;if (d < 2) {
	    throw b;
	  }var e = ":".repeat(7 - d + 2);g = g.replace("::", e);var c = g.split(":");if (c.length != 8) {
	    throw b;
	  }for (var f = 0; f < 8; f++) {
	    c[f] = ("0000" + c[f]).slice(-4);
	  }return c.join("");
	}function hextoipv6(e) {
	  if (!e.match(/^[0-9A-Fa-f]{32}$/)) {
	    throw "malformed IPv6 address octet";
	  }e = e.toLowerCase();var b = e.match(/.{1,4}/g);for (var d = 0; d < 8; d++) {
	    b[d] = b[d].replace(/^0+/, "");if (b[d] == "") {
	      b[d] = "0";
	    }
	  }e = ":" + b.join(":") + ":";var c = e.match(/:(0:){2,}/g);if (c === null) {
	    return e.slice(1, -1);
	  }var f = "";for (var d = 0; d < c.length; d++) {
	    if (c[d].length > f.length) {
	      f = c[d];
	    }
	  }e = e.replace(f, "::");return e.slice(1, -1);
	}function hextoip(b) {
	  var d = "malformed hex value";if (!b.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)) {
	    throw d;
	  }if (b.length == 8) {
	    var c;try {
	      c = parseInt(b.substr(0, 2), 16) + "." + parseInt(b.substr(2, 2), 16) + "." + parseInt(b.substr(4, 2), 16) + "." + parseInt(b.substr(6, 2), 16);return c;
	    } catch (a) {
	      throw d;
	    }
	  } else {
	    if (b.length == 32) {
	      return hextoipv6(b);
	    } else {
	      return b;
	    }
	  }
	}function iptohex(f) {
	  var j = "malformed IP address";f = f.toLowerCase(f);if (f.match(/^[0-9.]+$/)) {
	    var b = f.split(".");if (b.length !== 4) {
	      throw j;
	    }var g = "";try {
	      for (var e = 0; e < 4; e++) {
	        var h = parseInt(b[e]);g += ("0" + h.toString(16)).slice(-2);
	      }return g;
	    } catch (c) {
	      throw j;
	    }
	  } else {
	    if (f.match(/^[0-9a-f:]+$/) && f.indexOf(":") !== -1) {
	      return ipv6tohex(f);
	    } else {
	      throw j;
	    }
	  }
	}function encodeURIComponentAll(a) {
	  var d = encodeURIComponent(a);var b = "";for (var c = 0; c < d.length; c++) {
	    if (d[c] == "%") {
	      b = b + d.substr(c, 3);c = c + 2;
	    } else {
	      b = b + "%" + stohex(d[c]);
	    }
	  }return b;
	}function newline_toUnix(a) {
	  a = a.replace(/\r\n/mg, "\n");return a;
	}function newline_toDos(a) {
	  a = a.replace(/\r\n/mg, "\n");a = a.replace(/\n/mg, "\r\n");return a;
	}KJUR.lang.String.isInteger = function (a) {
	  if (a.match(/^[0-9]+$/)) {
	    return true;
	  } else {
	    if (a.match(/^-[0-9]+$/)) {
	      return true;
	    } else {
	      return false;
	    }
	  }
	};KJUR.lang.String.isHex = function (a) {
	  if (a.length % 2 == 0 && (a.match(/^[0-9a-f]+$/) || a.match(/^[0-9A-F]+$/))) {
	    return true;
	  } else {
	    return false;
	  }
	};KJUR.lang.String.isBase64 = function (a) {
	  a = a.replace(/\s+/g, "");if (a.match(/^[0-9A-Za-z+\/]+={0,3}$/) && a.length % 4 == 0) {
	    return true;
	  } else {
	    return false;
	  }
	};KJUR.lang.String.isBase64URL = function (a) {
	  if (a.match(/[+/=]/)) {
	    return false;
	  }a = b64utob64(a);return KJUR.lang.String.isBase64(a);
	};KJUR.lang.String.isIntegerArray = function (a) {
	  a = a.replace(/\s+/g, "");if (a.match(/^\[[0-9,]+\]$/)) {
	    return true;
	  } else {
	    return false;
	  }
	};function hextoposhex(a) {
	  if (a.length % 2 == 1) {
	    return "0" + a;
	  }if (a.substr(0, 1) > "7") {
	    return "00" + a;
	  }return a;
	}function intarystrtohex(b) {
	  b = b.replace(/^\s*\[\s*/, "");b = b.replace(/\s*\]\s*$/, "");b = b.replace(/\s*/g, "");try {
	    var c = b.split(/,/).map(function (g, e, h) {
	      var f = parseInt(g);if (f < 0 || 255 < f) {
	        throw "integer not in range 0-255";
	      }var d = ("00" + f.toString(16)).slice(-2);return d;
	    }).join("");return c;
	  } catch (a) {
	    throw "malformed integer array string: " + a;
	  }
	}var strdiffidx = function strdiffidx(c, a) {
	  var d = c.length;if (c.length > a.length) {
	    d = a.length;
	  }for (var b = 0; b < d; b++) {
	    if (c.charCodeAt(b) != a.charCodeAt(b)) {
	      return b;
	    }
	  }if (c.length != a.length) {
	    return d;
	  }return -1;
	};
	if (typeof KJUR == "undefined" || !KJUR) {
	  KJUR = {};
	}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
	  KJUR.crypto = {};
	}KJUR.crypto.Util = new function () {
	  this.DIGESTINFOHEAD = { sha1: "3021300906052b0e03021a05000414", sha224: "302d300d06096086480165030402040500041c", sha256: "3031300d060960864801650304020105000420", sha384: "3041300d060960864801650304020205000430", sha512: "3051300d060960864801650304020305000440", md2: "3020300c06082a864886f70d020205000410", md5: "3020300c06082a864886f70d020505000410", ripemd160: "3021300906052b2403020105000414" };this.DEFAULTPROVIDER = { md5: "cryptojs", sha1: "cryptojs", sha224: "cryptojs", sha256: "cryptojs", sha384: "cryptojs", sha512: "cryptojs", ripemd160: "cryptojs", hmacmd5: "cryptojs", hmacsha1: "cryptojs", hmacsha224: "cryptojs", hmacsha256: "cryptojs", hmacsha384: "cryptojs", hmacsha512: "cryptojs", hmacripemd160: "cryptojs", MD5withRSA: "cryptojs/jsrsa", SHA1withRSA: "cryptojs/jsrsa", SHA224withRSA: "cryptojs/jsrsa", SHA256withRSA: "cryptojs/jsrsa", SHA384withRSA: "cryptojs/jsrsa", SHA512withRSA: "cryptojs/jsrsa", RIPEMD160withRSA: "cryptojs/jsrsa", MD5withECDSA: "cryptojs/jsrsa", SHA1withECDSA: "cryptojs/jsrsa", SHA224withECDSA: "cryptojs/jsrsa", SHA256withECDSA: "cryptojs/jsrsa", SHA384withECDSA: "cryptojs/jsrsa", SHA512withECDSA: "cryptojs/jsrsa", RIPEMD160withECDSA: "cryptojs/jsrsa", SHA1withDSA: "cryptojs/jsrsa", SHA224withDSA: "cryptojs/jsrsa", SHA256withDSA: "cryptojs/jsrsa", MD5withRSAandMGF1: "cryptojs/jsrsa", SHA1withRSAandMGF1: "cryptojs/jsrsa", SHA224withRSAandMGF1: "cryptojs/jsrsa", SHA256withRSAandMGF1: "cryptojs/jsrsa", SHA384withRSAandMGF1: "cryptojs/jsrsa", SHA512withRSAandMGF1: "cryptojs/jsrsa", RIPEMD160withRSAandMGF1: "cryptojs/jsrsa" };this.CRYPTOJSMESSAGEDIGESTNAME = { md5: CryptoJS.algo.MD5, sha1: CryptoJS.algo.SHA1, sha224: CryptoJS.algo.SHA224, sha256: CryptoJS.algo.SHA256, sha384: CryptoJS.algo.SHA384, sha512: CryptoJS.algo.SHA512, ripemd160: CryptoJS.algo.RIPEMD160 };this.getDigestInfoHex = function (a, b) {
	    if (typeof this.DIGESTINFOHEAD[b] == "undefined") {
	      throw "alg not supported in Util.DIGESTINFOHEAD: " + b;
	    }return this.DIGESTINFOHEAD[b] + a;
	  };this.getPaddedDigestInfoHex = function (h, a, j) {
	    var c = this.getDigestInfoHex(h, a);var d = j / 4;if (c.length + 22 > d) {
	      throw "key is too short for SigAlg: keylen=" + j + "," + a;
	    }var b = "0001";var k = "00" + c;var g = "";var l = d - b.length - k.length;for (var f = 0; f < l; f += 2) {
	      g += "ff";
	    }var e = b + g + k;return e;
	  };this.hashString = function (a, c) {
	    var b = new KJUR.crypto.MessageDigest({ alg: c });return b.digestString(a);
	  };this.hashHex = function (b, c) {
	    var a = new KJUR.crypto.MessageDigest({ alg: c });return a.digestHex(b);
	  };this.sha1 = function (a) {
	    var b = new KJUR.crypto.MessageDigest({ alg: "sha1", prov: "cryptojs" });return b.digestString(a);
	  };this.sha256 = function (a) {
	    var b = new KJUR.crypto.MessageDigest({ alg: "sha256", prov: "cryptojs" });return b.digestString(a);
	  };this.sha256Hex = function (a) {
	    var b = new KJUR.crypto.MessageDigest({ alg: "sha256", prov: "cryptojs" });return b.digestHex(a);
	  };this.sha512 = function (a) {
	    var b = new KJUR.crypto.MessageDigest({ alg: "sha512", prov: "cryptojs" });return b.digestString(a);
	  };this.sha512Hex = function (a) {
	    var b = new KJUR.crypto.MessageDigest({ alg: "sha512", prov: "cryptojs" });return b.digestHex(a);
	  };
	}();KJUR.crypto.Util.md5 = function (a) {
	  var b = new KJUR.crypto.MessageDigest({ alg: "md5", prov: "cryptojs" });return b.digestString(a);
	};KJUR.crypto.Util.ripemd160 = function (a) {
	  var b = new KJUR.crypto.MessageDigest({ alg: "ripemd160", prov: "cryptojs" });return b.digestString(a);
	};KJUR.crypto.Util.SECURERANDOMGEN = new SecureRandom();KJUR.crypto.Util.getRandomHexOfNbytes = function (b) {
	  var a = new Array(b);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(a);return BAtohex(a);
	};KJUR.crypto.Util.getRandomBigIntegerOfNbytes = function (a) {
	  return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbytes(a), 16);
	};KJUR.crypto.Util.getRandomHexOfNbits = function (d) {
	  var c = d % 8;var a = (d - c) / 8;var b = new Array(a + 1);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(b);b[0] = (255 << c & 255 ^ 255) & b[0];return BAtohex(b);
	};KJUR.crypto.Util.getRandomBigIntegerOfNbits = function (a) {
	  return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbits(a), 16);
	};KJUR.crypto.Util.getRandomBigIntegerZeroToMax = function (b) {
	  var a = b.bitLength();while (1) {
	    var c = KJUR.crypto.Util.getRandomBigIntegerOfNbits(a);if (b.compareTo(c) != -1) {
	      return c;
	    }
	  }
	};KJUR.crypto.Util.getRandomBigIntegerMinToMax = function (e, b) {
	  var c = e.compareTo(b);if (c == 1) {
	    throw "biMin is greater than biMax";
	  }if (c == 0) {
	    return e;
	  }var a = b.subtract(e);var d = KJUR.crypto.Util.getRandomBigIntegerZeroToMax(a);return d.add(e);
	};KJUR.crypto.MessageDigest = function (c) {
	  var b = null;var a = null;var d = null;this.setAlgAndProvider = function (g, f) {
	    g = KJUR.crypto.MessageDigest.getCanonicalAlgName(g);if (g !== null && f === undefined) {
	      f = KJUR.crypto.Util.DEFAULTPROVIDER[g];
	    }if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g) != -1 && f == "cryptojs") {
	      try {
	        this.md = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g].create();
	      } catch (e) {
	        throw "setAlgAndProvider hash alg set fail alg=" + g + "/" + e;
	      }this.updateString = function (h) {
	        this.md.update(h);
	      };this.updateHex = function (h) {
	        var i = CryptoJS.enc.Hex.parse(h);this.md.update(i);
	      };this.digest = function () {
	        var h = this.md.finalize();return h.toString(CryptoJS.enc.Hex);
	      };this.digestString = function (h) {
	        this.updateString(h);return this.digest();
	      };this.digestHex = function (h) {
	        this.updateHex(h);return this.digest();
	      };
	    }if (":sha256:".indexOf(g) != -1 && f == "sjcl") {
	      try {
	        this.md = new sjcl.hash.sha256();
	      } catch (e) {
	        throw "setAlgAndProvider hash alg set fail alg=" + g + "/" + e;
	      }this.updateString = function (h) {
	        this.md.update(h);
	      };this.updateHex = function (i) {
	        var h = sjcl.codec.hex.toBits(i);this.md.update(h);
	      };this.digest = function () {
	        var h = this.md.finalize();return sjcl.codec.hex.fromBits(h);
	      };this.digestString = function (h) {
	        this.updateString(h);return this.digest();
	      };this.digestHex = function (h) {
	        this.updateHex(h);return this.digest();
	      };
	    }
	  };this.updateString = function (e) {
	    throw "updateString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
	  };this.updateHex = function (e) {
	    throw "updateHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
	  };this.digest = function () {
	    throw "digest() not supported for this alg/prov: " + this.algName + "/" + this.provName;
	  };this.digestString = function (e) {
	    throw "digestString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
	  };this.digestHex = function (e) {
	    throw "digestHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
	  };if (c !== undefined) {
	    if (c.alg !== undefined) {
	      this.algName = c.alg;if (c.prov === undefined) {
	        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
	      }this.setAlgAndProvider(this.algName, this.provName);
	    }
	  }
	};KJUR.crypto.MessageDigest.getCanonicalAlgName = function (a) {
	  if (typeof a === "string") {
	    a = a.toLowerCase();a = a.replace(/-/, "");
	  }return a;
	};KJUR.crypto.MessageDigest.getHashLength = function (c) {
	  var b = KJUR.crypto.MessageDigest;var a = b.getCanonicalAlgName(c);if (b.HASHLENGTH[a] === undefined) {
	    throw "not supported algorithm: " + c;
	  }return b.HASHLENGTH[a];
	};KJUR.crypto.MessageDigest.HASHLENGTH = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, ripemd160: 20 };KJUR.crypto.Mac = function (d) {
	  var f = null;var c = null;var a = null;var e = null;var b = null;this.setAlgAndProvider = function (k, i) {
	    k = k.toLowerCase();if (k == null) {
	      k = "hmacsha1";
	    }k = k.toLowerCase();if (k.substr(0, 4) != "hmac") {
	      throw "setAlgAndProvider unsupported HMAC alg: " + k;
	    }if (i === undefined) {
	      i = KJUR.crypto.Util.DEFAULTPROVIDER[k];
	    }this.algProv = k + "/" + i;var g = k.substr(4);if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g) != -1 && i == "cryptojs") {
	      try {
	        var j = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g];this.mac = CryptoJS.algo.HMAC.create(j, this.pass);
	      } catch (h) {
	        throw "setAlgAndProvider hash alg set fail hashAlg=" + g + "/" + h;
	      }this.updateString = function (l) {
	        this.mac.update(l);
	      };this.updateHex = function (l) {
	        var m = CryptoJS.enc.Hex.parse(l);this.mac.update(m);
	      };this.doFinal = function () {
	        var l = this.mac.finalize();return l.toString(CryptoJS.enc.Hex);
	      };this.doFinalString = function (l) {
	        this.updateString(l);return this.doFinal();
	      };this.doFinalHex = function (l) {
	        this.updateHex(l);return this.doFinal();
	      };
	    }
	  };this.updateString = function (g) {
	    throw "updateString(str) not supported for this alg/prov: " + this.algProv;
	  };this.updateHex = function (g) {
	    throw "updateHex(hex) not supported for this alg/prov: " + this.algProv;
	  };this.doFinal = function () {
	    throw "digest() not supported for this alg/prov: " + this.algProv;
	  };this.doFinalString = function (g) {
	    throw "digestString(str) not supported for this alg/prov: " + this.algProv;
	  };this.doFinalHex = function (g) {
	    throw "digestHex(hex) not supported for this alg/prov: " + this.algProv;
	  };this.setPassword = function (h) {
	    if (typeof h == "string") {
	      var g = h;if (h.length % 2 == 1 || !h.match(/^[0-9A-Fa-f]+$/)) {
	        g = rstrtohex(h);
	      }this.pass = CryptoJS.enc.Hex.parse(g);return;
	    }if ((typeof h === "undefined" ? "undefined" : _typeof(h)) != "object") {
	      throw "KJUR.crypto.Mac unsupported password type: " + h;
	    }var g = null;if (h.hex !== undefined) {
	      if (h.hex.length % 2 != 0 || !h.hex.match(/^[0-9A-Fa-f]+$/)) {
	        throw "Mac: wrong hex password: " + h.hex;
	      }g = h.hex;
	    }if (h.utf8 !== undefined) {
	      g = utf8tohex(h.utf8);
	    }if (h.rstr !== undefined) {
	      g = rstrtohex(h.rstr);
	    }if (h.b64 !== undefined) {
	      g = b64tohex(h.b64);
	    }if (h.b64u !== undefined) {
	      g = b64utohex(h.b64u);
	    }if (g == null) {
	      throw "KJUR.crypto.Mac unsupported password type: " + h;
	    }this.pass = CryptoJS.enc.Hex.parse(g);
	  };if (d !== undefined) {
	    if (d.pass !== undefined) {
	      this.setPassword(d.pass);
	    }if (d.alg !== undefined) {
	      this.algName = d.alg;if (d.prov === undefined) {
	        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
	      }this.setAlgAndProvider(this.algName, this.provName);
	    }
	  }
	};KJUR.crypto.Signature = function (o) {
	  var q = null;var n = null;var r = null;var c = null;var l = null;var d = null;var k = null;var h = null;var p = null;var e = null;var b = -1;var g = null;var j = null;var a = null;var i = null;var f = null;this._setAlgNames = function () {
	    var s = this.algName.match(/^(.+)with(.+)$/);if (s) {
	      this.mdAlgName = s[1].toLowerCase();this.pubkeyAlgName = s[2].toLowerCase();
	    }
	  };this._zeroPaddingOfSignature = function (x, w) {
	    var v = "";var t = w / 4 - x.length;for (var u = 0; u < t; u++) {
	      v = v + "0";
	    }return v + x;
	  };this.setAlgAndProvider = function (u, t) {
	    this._setAlgNames();if (t != "cryptojs/jsrsa") {
	      throw "provider not supported: " + t;
	    }if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName) != -1) {
	      try {
	        this.md = new KJUR.crypto.MessageDigest({ alg: this.mdAlgName });
	      } catch (s) {
	        throw "setAlgAndProvider hash alg set fail alg=" + this.mdAlgName + "/" + s;
	      }this.init = function (w, x) {
	        var y = null;try {
	          if (x === undefined) {
	            y = KEYUTIL.getKey(w);
	          } else {
	            y = KEYUTIL.getKey(w, x);
	          }
	        } catch (v) {
	          throw "init failed:" + v;
	        }if (y.isPrivate === true) {
	          this.prvKey = y;this.state = "SIGN";
	        } else {
	          if (y.isPublic === true) {
	            this.pubKey = y;this.state = "VERIFY";
	          } else {
	            throw "init failed.:" + y;
	          }
	        }
	      };this.updateString = function (v) {
	        this.md.updateString(v);
	      };this.updateHex = function (v) {
	        this.md.updateHex(v);
	      };this.sign = function () {
	        this.sHashHex = this.md.digest();if (typeof this.ecprvhex != "undefined" && typeof this.eccurvename != "undefined") {
	          var v = new KJUR.crypto.ECDSA({ curve: this.eccurvename });this.hSign = v.signHex(this.sHashHex, this.ecprvhex);
	        } else {
	          if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === "rsaandmgf1") {
	            this.hSign = this.prvKey.signWithMessageHashPSS(this.sHashHex, this.mdAlgName, this.pssSaltLen);
	          } else {
	            if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === "rsa") {
	              this.hSign = this.prvKey.signWithMessageHash(this.sHashHex, this.mdAlgName);
	            } else {
	              if (this.prvKey instanceof KJUR.crypto.ECDSA) {
	                this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
	              } else {
	                if (this.prvKey instanceof KJUR.crypto.DSA) {
	                  this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
	                } else {
	                  throw "Signature: unsupported private key alg: " + this.pubkeyAlgName;
	                }
	              }
	            }
	          }
	        }return this.hSign;
	      };this.signString = function (v) {
	        this.updateString(v);return this.sign();
	      };this.signHex = function (v) {
	        this.updateHex(v);return this.sign();
	      };this.verify = function (v) {
	        this.sHashHex = this.md.digest();if (typeof this.ecpubhex != "undefined" && typeof this.eccurvename != "undefined") {
	          var w = new KJUR.crypto.ECDSA({ curve: this.eccurvename });return w.verifyHex(this.sHashHex, v, this.ecpubhex);
	        } else {
	          if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === "rsaandmgf1") {
	            return this.pubKey.verifyWithMessageHashPSS(this.sHashHex, v, this.mdAlgName, this.pssSaltLen);
	          } else {
	            if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === "rsa") {
	              return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
	            } else {
	              if (KJUR.crypto.ECDSA !== undefined && this.pubKey instanceof KJUR.crypto.ECDSA) {
	                return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
	              } else {
	                if (KJUR.crypto.DSA !== undefined && this.pubKey instanceof KJUR.crypto.DSA) {
	                  return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
	                } else {
	                  throw "Signature: unsupported public key alg: " + this.pubkeyAlgName;
	                }
	              }
	            }
	          }
	        }
	      };
	    }
	  };this.init = function (s, t) {
	    throw "init(key, pass) not supported for this alg:prov=" + this.algProvName;
	  };this.updateString = function (s) {
	    throw "updateString(str) not supported for this alg:prov=" + this.algProvName;
	  };this.updateHex = function (s) {
	    throw "updateHex(hex) not supported for this alg:prov=" + this.algProvName;
	  };this.sign = function () {
	    throw "sign() not supported for this alg:prov=" + this.algProvName;
	  };this.signString = function (s) {
	    throw "digestString(str) not supported for this alg:prov=" + this.algProvName;
	  };this.signHex = function (s) {
	    throw "digestHex(hex) not supported for this alg:prov=" + this.algProvName;
	  };this.verify = function (s) {
	    throw "verify(hSigVal) not supported for this alg:prov=" + this.algProvName;
	  };this.initParams = o;if (o !== undefined) {
	    if (o.alg !== undefined) {
	      this.algName = o.alg;if (o.prov === undefined) {
	        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
	      } else {
	        this.provName = o.prov;
	      }this.algProvName = this.algName + ":" + this.provName;this.setAlgAndProvider(this.algName, this.provName);this._setAlgNames();
	    }if (o.psssaltlen !== undefined) {
	      this.pssSaltLen = o.psssaltlen;
	    }if (o.prvkeypem !== undefined) {
	      if (o.prvkeypas !== undefined) {
	        throw "both prvkeypem and prvkeypas parameters not supported";
	      } else {
	        try {
	          var q = KEYUTIL.getKey(o.prvkeypem);this.init(q);
	        } catch (m) {
	          throw "fatal error to load pem private key: " + m;
	        }
	      }
	    }
	  }
	};KJUR.crypto.Cipher = function (a) {};KJUR.crypto.Cipher.encrypt = function (e, f, d) {
	  if (f instanceof RSAKey && f.isPublic) {
	    var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d);if (c === "RSA") {
	      return f.encrypt(e);
	    }if (c === "RSAOAEP") {
	      return f.encryptOAEP(e, "sha1");
	    }var b = c.match(/^RSAOAEP(\d+)$/);if (b !== null) {
	      return f.encryptOAEP(e, "sha" + b[1]);
	    }throw "Cipher.encrypt: unsupported algorithm for RSAKey: " + d;
	  } else {
	    throw "Cipher.encrypt: unsupported key or algorithm";
	  }
	};KJUR.crypto.Cipher.decrypt = function (e, f, d) {
	  if (f instanceof RSAKey && f.isPrivate) {
	    var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d);if (c === "RSA") {
	      return f.decrypt(e);
	    }if (c === "RSAOAEP") {
	      return f.decryptOAEP(e, "sha1");
	    }var b = c.match(/^RSAOAEP(\d+)$/);if (b !== null) {
	      return f.decryptOAEP(e, "sha" + b[1]);
	    }throw "Cipher.decrypt: unsupported algorithm for RSAKey: " + d;
	  } else {
	    throw "Cipher.decrypt: unsupported key or algorithm";
	  }
	};KJUR.crypto.Cipher.getAlgByKeyAndName = function (b, a) {
	  if (b instanceof RSAKey) {
	    if (":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(a) != -1) {
	      return a;
	    }if (a === null || a === undefined) {
	      return "RSA";
	    }throw "getAlgByKeyAndName: not supported algorithm name for RSAKey: " + a;
	  }throw "getAlgByKeyAndName: not supported algorithm name: " + a;
	};KJUR.crypto.OID = new function () {
	  this.oidhex2name = { "2a864886f70d010101": "rsaEncryption", "2a8648ce3d0201": "ecPublicKey", "2a8648ce380401": "dsa", "2a8648ce3d030107": "secp256r1", "2b8104001f": "secp192k1", "2b81040021": "secp224r1", "2b8104000a": "secp256k1", "2b81040023": "secp521r1", "2b81040022": "secp384r1", "2a8648ce380403": "SHA1withDSA", "608648016503040301": "SHA224withDSA", "608648016503040302": "SHA256withDSA" };
	}();
	if (typeof KJUR == "undefined" || !KJUR) {
	  KJUR = {};
	}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
	  KJUR.crypto = {};
	}KJUR.crypto.ECDSA = function (h) {
	  var e = "secp256r1";var g = null;var b = null;var f = null;var a = new SecureRandom();var d = null;this.type = "EC";this.isPrivate = false;this.isPublic = false;function c(s, o, r, n) {
	    var j = Math.max(o.bitLength(), n.bitLength());var t = s.add2D(r);var q = s.curve.getInfinity();for (var p = j - 1; p >= 0; --p) {
	      q = q.twice2D();q.z = BigInteger.ONE;if (o.testBit(p)) {
	        if (n.testBit(p)) {
	          q = q.add2D(t);
	        } else {
	          q = q.add2D(s);
	        }
	      } else {
	        if (n.testBit(p)) {
	          q = q.add2D(r);
	        }
	      }
	    }return q;
	  }this.getBigRandom = function (i) {
	    return new BigInteger(i.bitLength(), a).mod(i.subtract(BigInteger.ONE)).add(BigInteger.ONE);
	  };this.setNamedCurve = function (i) {
	    this.ecparams = KJUR.crypto.ECParameterDB.getByName(i);this.prvKeyHex = null;this.pubKeyHex = null;this.curveName = i;
	  };this.setPrivateKeyHex = function (i) {
	    this.isPrivate = true;this.prvKeyHex = i;
	  };this.setPublicKeyHex = function (i) {
	    this.isPublic = true;this.pubKeyHex = i;
	  };this.getPublicKeyXYHex = function () {
	    var k = this.pubKeyHex;if (k.substr(0, 2) !== "04") {
	      throw "this method supports uncompressed format(04) only";
	    }var j = this.ecparams.keylen / 4;if (k.length !== 2 + j * 2) {
	      throw "malformed public key hex length";
	    }var i = {};i.x = k.substr(2, j);i.y = k.substr(2 + j);return i;
	  };this.getShortNISTPCurveName = function () {
	    var i = this.curveName;if (i === "secp256r1" || i === "NIST P-256" || i === "P-256" || i === "prime256v1") {
	      return "P-256";
	    }if (i === "secp384r1" || i === "NIST P-384" || i === "P-384") {
	      return "P-384";
	    }return null;
	  };this.generateKeyPairHex = function () {
	    var k = this.ecparams.n;var n = this.getBigRandom(k);var l = this.ecparams.G.multiply(n);var q = l.getX().toBigInteger();var o = l.getY().toBigInteger();var i = this.ecparams.keylen / 4;var m = ("0000000000" + n.toString(16)).slice(-i);var r = ("0000000000" + q.toString(16)).slice(-i);var p = ("0000000000" + o.toString(16)).slice(-i);var j = "04" + r + p;this.setPrivateKeyHex(m);this.setPublicKeyHex(j);return { ecprvhex: m, ecpubhex: j };
	  };this.signWithMessageHash = function (i) {
	    return this.signHex(i, this.prvKeyHex);
	  };this.signHex = function (o, j) {
	    var t = new BigInteger(j, 16);var l = this.ecparams.n;var q = new BigInteger(o, 16);do {
	      var m = this.getBigRandom(l);var u = this.ecparams.G;var p = u.multiply(m);var i = p.getX().toBigInteger().mod(l);
	    } while (i.compareTo(BigInteger.ZERO) <= 0);var v = m.modInverse(l).multiply(q.add(t.multiply(i))).mod(l);return KJUR.crypto.ECDSA.biRSSigToASN1Sig(i, v);
	  };this.sign = function (m, u) {
	    var q = u;var j = this.ecparams.n;var p = BigInteger.fromByteArrayUnsigned(m);do {
	      var l = this.getBigRandom(j);var t = this.ecparams.G;var o = t.multiply(l);var i = o.getX().toBigInteger().mod(j);
	    } while (i.compareTo(BigInteger.ZERO) <= 0);var v = l.modInverse(j).multiply(p.add(q.multiply(i))).mod(j);return this.serializeSig(i, v);
	  };this.verifyWithMessageHash = function (j, i) {
	    return this.verifyHex(j, i, this.pubKeyHex);
	  };this.verifyHex = function (m, i, p) {
	    var l, j;var o = KJUR.crypto.ECDSA.parseSigHex(i);l = o.r;j = o.s;var k;k = ECPointFp.decodeFromHex(this.ecparams.curve, p);var n = new BigInteger(m, 16);return this.verifyRaw(n, l, j, k);
	  };this.verify = function (o, p, j) {
	    var l, i;if (Bitcoin.Util.isArray(p)) {
	      var n = this.parseSig(p);l = n.r;i = n.s;
	    } else {
	      if ("object" === (typeof p === "undefined" ? "undefined" : _typeof(p)) && p.r && p.s) {
	        l = p.r;i = p.s;
	      } else {
	        throw "Invalid value for signature";
	      }
	    }var k;if (j instanceof ECPointFp) {
	      k = j;
	    } else {
	      if (Bitcoin.Util.isArray(j)) {
	        k = ECPointFp.decodeFrom(this.ecparams.curve, j);
	      } else {
	        throw "Invalid format for pubkey value, must be byte array or ECPointFp";
	      }
	    }var m = BigInteger.fromByteArrayUnsigned(o);return this.verifyRaw(m, l, i, k);
	  };this.verifyRaw = function (o, i, w, m) {
	    var l = this.ecparams.n;var u = this.ecparams.G;if (i.compareTo(BigInteger.ONE) < 0 || i.compareTo(l) >= 0) {
	      return false;
	    }if (w.compareTo(BigInteger.ONE) < 0 || w.compareTo(l) >= 0) {
	      return false;
	    }var p = w.modInverse(l);var k = o.multiply(p).mod(l);var j = i.multiply(p).mod(l);var q = u.multiply(k).add(m.multiply(j));var t = q.getX().toBigInteger().mod(l);return t.equals(i);
	  };this.serializeSig = function (k, j) {
	    var l = k.toByteArraySigned();var i = j.toByteArraySigned();var m = [];m.push(2);m.push(l.length);m = m.concat(l);m.push(2);m.push(i.length);m = m.concat(i);m.unshift(m.length);m.unshift(48);return m;
	  };this.parseSig = function (n) {
	    var m;if (n[0] != 48) {
	      throw new Error("Signature not a valid DERSequence");
	    }m = 2;if (n[m] != 2) {
	      throw new Error("First element in signature must be a DERInteger");
	    }var l = n.slice(m + 2, m + 2 + n[m + 1]);m += 2 + n[m + 1];if (n[m] != 2) {
	      throw new Error("Second element in signature must be a DERInteger");
	    }var i = n.slice(m + 2, m + 2 + n[m + 1]);m += 2 + n[m + 1];var k = BigInteger.fromByteArrayUnsigned(l);var j = BigInteger.fromByteArrayUnsigned(i);return { r: k, s: j };
	  };this.parseSigCompact = function (m) {
	    if (m.length !== 65) {
	      throw "Signature has the wrong length";
	    }var j = m[0] - 27;if (j < 0 || j > 7) {
	      throw "Invalid signature type";
	    }var o = this.ecparams.n;var l = BigInteger.fromByteArrayUnsigned(m.slice(1, 33)).mod(o);var k = BigInteger.fromByteArrayUnsigned(m.slice(33, 65)).mod(o);return { r: l, s: k, i: j };
	  };this.readPKCS5PrvKeyHex = function (l) {
	    var n = ASN1HEX;var m = KJUR.crypto.ECDSA.getName;var p = n.getVbyList;if (n.isASN1HEX(l) === false) {
	      throw "not ASN.1 hex string";
	    }var i, k, o;try {
	      i = p(l, 0, [2, 0], "06");k = p(l, 0, [1], "04");try {
	        o = p(l, 0, [3, 0], "03").substr(2);
	      } catch (j) {}
	    } catch (j) {
	      throw "malformed PKCS#1/5 plain ECC private key";
	    }this.curveName = m(i);if (this.curveName === undefined) {
	      throw "unsupported curve name";
	    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(o);this.setPrivateKeyHex(k);this.isPublic = false;
	  };this.readPKCS8PrvKeyHex = function (l) {
	    var q = ASN1HEX;var i = KJUR.crypto.ECDSA.getName;var n = q.getVbyList;if (q.isASN1HEX(l) === false) {
	      throw "not ASN.1 hex string";
	    }var j, p, m, k;try {
	      j = n(l, 0, [1, 0], "06");p = n(l, 0, [1, 1], "06");m = n(l, 0, [2, 0, 1], "04");try {
	        k = n(l, 0, [2, 0, 2, 0], "03").substr(2);
	      } catch (o) {}
	    } catch (o) {
	      throw "malformed PKCS#8 plain ECC private key";
	    }this.curveName = i(p);if (this.curveName === undefined) {
	      throw "unsupported curve name";
	    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(k);this.setPrivateKeyHex(m);this.isPublic = false;
	  };this.readPKCS8PubKeyHex = function (l) {
	    var n = ASN1HEX;var m = KJUR.crypto.ECDSA.getName;var p = n.getVbyList;if (n.isASN1HEX(l) === false) {
	      throw "not ASN.1 hex string";
	    }var k, i, o;try {
	      k = p(l, 0, [0, 0], "06");i = p(l, 0, [0, 1], "06");o = p(l, 0, [1], "03").substr(2);
	    } catch (j) {
	      throw "malformed PKCS#8 ECC public key";
	    }this.curveName = m(i);if (this.curveName === null) {
	      throw "unsupported curve name";
	    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(o);
	  };this.readCertPubKeyHex = function (k, p) {
	    if (p !== 5) {
	      p = 6;
	    }var m = ASN1HEX;var l = KJUR.crypto.ECDSA.getName;var o = m.getVbyList;if (m.isASN1HEX(k) === false) {
	      throw "not ASN.1 hex string";
	    }var i, n;try {
	      i = o(k, 0, [0, p, 0, 1], "06");n = o(k, 0, [0, p, 1], "03").substr(2);
	    } catch (j) {
	      throw "malformed X.509 certificate ECC public key";
	    }this.curveName = l(i);if (this.curveName === null) {
	      throw "unsupported curve name";
	    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(n);
	  };if (h !== undefined) {
	    if (h.curve !== undefined) {
	      this.curveName = h.curve;
	    }
	  }if (this.curveName === undefined) {
	    this.curveName = e;
	  }this.setNamedCurve(this.curveName);if (h !== undefined) {
	    if (h.prv !== undefined) {
	      this.setPrivateKeyHex(h.prv);
	    }if (h.pub !== undefined) {
	      this.setPublicKeyHex(h.pub);
	    }
	  }
	};KJUR.crypto.ECDSA.parseSigHex = function (a) {
	  var b = KJUR.crypto.ECDSA.parseSigHexInHexRS(a);var d = new BigInteger(b.r, 16);var c = new BigInteger(b.s, 16);return { r: d, s: c };
	};KJUR.crypto.ECDSA.parseSigHexInHexRS = function (f) {
	  var j = ASN1HEX;var i = j.getChildIdx;var g = j.getV;if (f.substr(0, 2) != "30") {
	    throw "signature is not a ASN.1 sequence";
	  }var h = i(f, 0);if (h.length != 2) {
	    throw "number of signature ASN.1 sequence elements seem wrong";
	  }var e = h[0];var d = h[1];if (f.substr(e, 2) != "02") {
	    throw "1st item of sequene of signature is not ASN.1 integer";
	  }if (f.substr(d, 2) != "02") {
	    throw "2nd item of sequene of signature is not ASN.1 integer";
	  }var c = g(f, e);var b = g(f, d);return { r: c, s: b };
	};KJUR.crypto.ECDSA.asn1SigToConcatSig = function (c) {
	  var d = KJUR.crypto.ECDSA.parseSigHexInHexRS(c);var b = d.r;var a = d.s;if (b.substr(0, 2) == "00" && b.length % 32 == 2) {
	    b = b.substr(2);
	  }if (a.substr(0, 2) == "00" && a.length % 32 == 2) {
	    a = a.substr(2);
	  }if (b.length % 32 == 30) {
	    b = "00" + b;
	  }if (a.length % 32 == 30) {
	    a = "00" + a;
	  }if (b.length % 32 != 0) {
	    throw "unknown ECDSA sig r length error";
	  }if (a.length % 32 != 0) {
	    throw "unknown ECDSA sig s length error";
	  }return b + a;
	};KJUR.crypto.ECDSA.concatSigToASN1Sig = function (a) {
	  if (a.length / 2 * 8 % (16 * 8) != 0) {
	    throw "unknown ECDSA concatinated r-s sig  length error";
	  }var c = a.substr(0, a.length / 2);var b = a.substr(a.length / 2);return KJUR.crypto.ECDSA.hexRSSigToASN1Sig(c, b);
	};KJUR.crypto.ECDSA.hexRSSigToASN1Sig = function (b, a) {
	  var d = new BigInteger(b, 16);var c = new BigInteger(a, 16);return KJUR.crypto.ECDSA.biRSSigToASN1Sig(d, c);
	};KJUR.crypto.ECDSA.biRSSigToASN1Sig = function (f, d) {
	  var c = KJUR.asn1;var b = new c.DERInteger({ bigint: f });var a = new c.DERInteger({ bigint: d });var e = new c.DERSequence({ array: [b, a] });return e.getEncodedHex();
	};KJUR.crypto.ECDSA.getName = function (a) {
	  if (a === "2a8648ce3d030107") {
	    return "secp256r1";
	  }if (a === "2b8104000a") {
	    return "secp256k1";
	  }if (a === "2b81040022") {
	    return "secp384r1";
	  }if ("|secp256r1|NIST P-256|P-256|prime256v1|".indexOf(a) !== -1) {
	    return "secp256r1";
	  }if ("|secp256k1|".indexOf(a) !== -1) {
	    return "secp256k1";
	  }if ("|secp384r1|NIST P-384|P-384|".indexOf(a) !== -1) {
	    return "secp384r1";
	  }return null;
	};
	if (typeof KJUR == "undefined" || !KJUR) {
	  KJUR = {};
	}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
	  KJUR.crypto = {};
	}KJUR.crypto.ECParameterDB = new function () {
	  var b = {};var c = {};function a(d) {
	    return new BigInteger(d, 16);
	  }this.getByName = function (e) {
	    var d = e;if (typeof c[d] != "undefined") {
	      d = c[e];
	    }if (typeof b[d] != "undefined") {
	      return b[d];
	    }throw "unregistered EC curve name: " + d;
	  };this.regist = function (A, l, o, g, m, e, j, f, k, u, d, x) {
	    b[A] = {};var s = a(o);var z = a(g);var y = a(m);var t = a(e);var w = a(j);var r = new ECCurveFp(s, z, y);var q = r.decodePointHex("04" + f + k);b[A]["name"] = A;b[A]["keylen"] = l;b[A]["curve"] = r;b[A]["G"] = q;b[A]["n"] = t;b[A]["h"] = w;b[A]["oid"] = d;b[A]["info"] = x;for (var v = 0; v < u.length; v++) {
	      c[u[v]] = A;
	    }
	  };
	}();KJUR.crypto.ECParameterDB.regist("secp128r1", 128, "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC", "E87579C11079F43DD824993C2CEE5ED3", "FFFFFFFE0000000075A30D1B9038A115", "1", "161FF7528B899B2D0C28607CA52C5B86", "CF5AC8395BAFEB13C02DA292DDED7A83", [], "", "secp128r1 : SECG curve over a 128 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160k1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73", "0", "7", "0100000000000000000001B8FA16DFAB9ACA16B6B3", "1", "3B4C382CE37AA192A4019E763036F4F5DD4D7EBB", "938CF935318FDCED6BC28286531733C3F03C4FEE", [], "", "secp160k1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160r1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC", "1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45", "0100000000000000000001F4C8F927AED3CA752257", "1", "4A96B5688EF573284664698968C38BB913CBFC82", "23A628553168947D59DCC912042351377AC5FB32", [], "", "secp160r1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp192k1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37", "0", "3", "FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D", "1", "DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D", "9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D", []);KJUR.crypto.ECParameterDB.regist("secp192r1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC", "64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1", "FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831", "1", "188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012", "07192B95FFC8DA78631011ED6B24CDD573F977A11E794811", []);KJUR.crypto.ECParameterDB.regist("secp224r1", 224, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE", "B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4", "FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D", "1", "B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21", "BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34", []);KJUR.crypto.ECParameterDB.regist("secp256k1", 256, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F", "0", "7", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141", "1", "79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798", "483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8", []);KJUR.crypto.ECParameterDB.regist("secp256r1", 256, "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC", "5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B", "FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551", "1", "6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296", "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5", ["NIST P-256", "P-256", "prime256v1"]);KJUR.crypto.ECParameterDB.regist("secp384r1", 384, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC", "B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973", "1", "AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7", "3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f", ["NIST P-384", "P-384"]);KJUR.crypto.ECParameterDB.regist("secp521r1", 521, "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC", "051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409", "1", "C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66", "011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650", ["NIST P-521", "P-521"]);
	var KEYUTIL = function () {
	  var d = function d(p, r, q) {
	    return k(CryptoJS.AES, p, r, q);
	  };var e = function e(p, r, q) {
	    return k(CryptoJS.TripleDES, p, r, q);
	  };var a = function a(p, r, q) {
	    return k(CryptoJS.DES, p, r, q);
	  };var k = function k(s, x, u, q) {
	    var r = CryptoJS.enc.Hex.parse(x);var w = CryptoJS.enc.Hex.parse(u);var p = CryptoJS.enc.Hex.parse(q);var t = {};t.key = w;t.iv = p;t.ciphertext = r;var v = s.decrypt(t, w, { iv: p });return CryptoJS.enc.Hex.stringify(v);
	  };var l = function l(p, r, q) {
	    return g(CryptoJS.AES, p, r, q);
	  };var o = function o(p, r, q) {
	    return g(CryptoJS.TripleDES, p, r, q);
	  };var f = function f(p, r, q) {
	    return g(CryptoJS.DES, p, r, q);
	  };var g = function g(t, y, v, q) {
	    var s = CryptoJS.enc.Hex.parse(y);var x = CryptoJS.enc.Hex.parse(v);var p = CryptoJS.enc.Hex.parse(q);var w = t.encrypt(s, x, { iv: p });var r = CryptoJS.enc.Hex.parse(w.toString());var u = CryptoJS.enc.Base64.stringify(r);return u;
	  };var i = { "AES-256-CBC": { proc: d, eproc: l, keylen: 32, ivlen: 16 }, "AES-192-CBC": { proc: d, eproc: l, keylen: 24, ivlen: 16 }, "AES-128-CBC": { proc: d, eproc: l, keylen: 16, ivlen: 16 }, "DES-EDE3-CBC": { proc: e, eproc: o, keylen: 24, ivlen: 8 }, "DES-CBC": { proc: a, eproc: f, keylen: 8, ivlen: 8 } };var c = function c(p) {
	    return i[p]["proc"];
	  };var m = function m(p) {
	    var r = CryptoJS.lib.WordArray.random(p);var q = CryptoJS.enc.Hex.stringify(r);return q;
	  };var n = function n(v) {
	    var w = {};var q = v.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)", "m"));if (q) {
	      w.cipher = q[1];w.ivsalt = q[2];
	    }var p = v.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));if (p) {
	      w.type = p[1];
	    }var u = -1;var x = 0;if (v.indexOf("\r\n\r\n") != -1) {
	      u = v.indexOf("\r\n\r\n");x = 2;
	    }if (v.indexOf("\n\n") != -1) {
	      u = v.indexOf("\n\n");x = 1;
	    }var t = v.indexOf("-----END");if (u != -1 && t != -1) {
	      var r = v.substring(u + x * 2, t - x);r = r.replace(/\s+/g, "");w.data = r;
	    }return w;
	  };var j = function j(q, y, p) {
	    var v = p.substring(0, 16);var t = CryptoJS.enc.Hex.parse(v);var r = CryptoJS.enc.Utf8.parse(y);var u = i[q]["keylen"] + i[q]["ivlen"];var x = "";var w = null;for (;;) {
	      var s = CryptoJS.algo.MD5.create();if (w != null) {
	        s.update(w);
	      }s.update(r);s.update(t);w = s.finalize();x = x + CryptoJS.enc.Hex.stringify(w);if (x.length >= u * 2) {
	        break;
	      }
	    }var z = {};z.keyhex = x.substr(0, i[q]["keylen"] * 2);z.ivhex = x.substr(i[q]["keylen"] * 2, i[q]["ivlen"] * 2);return z;
	  };var b = function b(p, v, r, w) {
	    var s = CryptoJS.enc.Base64.parse(p);var q = CryptoJS.enc.Hex.stringify(s);var u = i[v]["proc"];var t = u(q, r, w);return t;
	  };var h = function h(p, s, q, u) {
	    var r = i[s]["eproc"];var t = r(p, q, u);return t;
	  };return { version: "1.0.0", parsePKCS5PEM: function parsePKCS5PEM(p) {
	      return n(p);
	    }, getKeyAndUnusedIvByPasscodeAndIvsalt: function getKeyAndUnusedIvByPasscodeAndIvsalt(q, p, r) {
	      return j(q, p, r);
	    }, decryptKeyB64: function decryptKeyB64(p, r, q, s) {
	      return b(p, r, q, s);
	    }, getDecryptedKeyHex: function getDecryptedKeyHex(y, x) {
	      var q = n(y);var t = q.type;var r = q.cipher;var p = q.ivsalt;var s = q.data;var w = j(r, x, p);var v = w.keyhex;var u = b(s, r, v, p);return u;
	    }, getEncryptedPKCS5PEMFromPrvKeyHex: function getEncryptedPKCS5PEMFromPrvKeyHex(x, s, A, t, r) {
	      var p = "";if (typeof t == "undefined" || t == null) {
	        t = "AES-256-CBC";
	      }if (typeof i[t] == "undefined") {
	        throw "KEYUTIL unsupported algorithm: " + t;
	      }if (typeof r == "undefined" || r == null) {
	        var v = i[t]["ivlen"];var u = m(v);r = u.toUpperCase();
	      }var z = j(t, A, r);var y = z.keyhex;var w = h(s, t, y, r);var q = w.replace(/(.{64})/g, "$1\r\n");var p = "-----BEGIN " + x + " PRIVATE KEY-----\r\n";p += "Proc-Type: 4,ENCRYPTED\r\n";p += "DEK-Info: " + t + "," + r + "\r\n";p += "\r\n";p += q;p += "\r\n-----END " + x + " PRIVATE KEY-----\r\n";return p;
	    }, parseHexOfEncryptedPKCS8: function parseHexOfEncryptedPKCS8(y) {
	      var B = ASN1HEX;var z = B.getChildIdx;var w = B.getV;var t = {};var r = z(y, 0);if (r.length != 2) {
	        throw "malformed format: SEQUENCE(0).items != 2: " + r.length;
	      }t.ciphertext = w(y, r[1]);var A = z(y, r[0]);if (A.length != 2) {
	        throw "malformed format: SEQUENCE(0.0).items != 2: " + A.length;
	      }if (w(y, A[0]) != "2a864886f70d01050d") {
	        throw "this only supports pkcs5PBES2";
	      }var p = z(y, A[1]);if (A.length != 2) {
	        throw "malformed format: SEQUENCE(0.0.1).items != 2: " + p.length;
	      }var q = z(y, p[1]);if (q.length != 2) {
	        throw "malformed format: SEQUENCE(0.0.1.1).items != 2: " + q.length;
	      }if (w(y, q[0]) != "2a864886f70d0307") {
	        throw "this only supports TripleDES";
	      }t.encryptionSchemeAlg = "TripleDES";t.encryptionSchemeIV = w(y, q[1]);var s = z(y, p[0]);if (s.length != 2) {
	        throw "malformed format: SEQUENCE(0.0.1.0).items != 2: " + s.length;
	      }if (w(y, s[0]) != "2a864886f70d01050c") {
	        throw "this only supports pkcs5PBKDF2";
	      }var x = z(y, s[1]);if (x.length < 2) {
	        throw "malformed format: SEQUENCE(0.0.1.0.1).items < 2: " + x.length;
	      }t.pbkdf2Salt = w(y, x[0]);var u = w(y, x[1]);try {
	        t.pbkdf2Iter = parseInt(u, 16);
	      } catch (v) {
	        throw "malformed format pbkdf2Iter: " + u;
	      }return t;
	    }, getPBKDF2KeyHexFromParam: function getPBKDF2KeyHexFromParam(u, p) {
	      var t = CryptoJS.enc.Hex.parse(u.pbkdf2Salt);var q = u.pbkdf2Iter;var s = CryptoJS.PBKDF2(p, t, { keySize: 192 / 32, iterations: q });var r = CryptoJS.enc.Hex.stringify(s);return r;
	    }, _getPlainPKCS8HexFromEncryptedPKCS8PEM: function _getPlainPKCS8HexFromEncryptedPKCS8PEM(x, y) {
	      var r = pemtohex(x, "ENCRYPTED PRIVATE KEY");var p = this.parseHexOfEncryptedPKCS8(r);var u = KEYUTIL.getPBKDF2KeyHexFromParam(p, y);var v = {};v.ciphertext = CryptoJS.enc.Hex.parse(p.ciphertext);var t = CryptoJS.enc.Hex.parse(u);var s = CryptoJS.enc.Hex.parse(p.encryptionSchemeIV);var w = CryptoJS.TripleDES.decrypt(v, t, { iv: s });var q = CryptoJS.enc.Hex.stringify(w);return q;
	    }, getKeyFromEncryptedPKCS8PEM: function getKeyFromEncryptedPKCS8PEM(s, q) {
	      var p = this._getPlainPKCS8HexFromEncryptedPKCS8PEM(s, q);var r = this.getKeyFromPlainPrivatePKCS8Hex(p);return r;
	    }, parsePlainPrivatePKCS8Hex: function parsePlainPrivatePKCS8Hex(s) {
	      var v = ASN1HEX;var u = v.getChildIdx;var t = v.getV;var q = {};q.algparam = null;if (s.substr(0, 2) != "30") {
	        throw "malformed plain PKCS8 private key(code:001)";
	      }var r = u(s, 0);if (r.length != 3) {
	        throw "malformed plain PKCS8 private key(code:002)";
	      }if (s.substr(r[1], 2) != "30") {
	        throw "malformed PKCS8 private key(code:003)";
	      }var p = u(s, r[1]);if (p.length != 2) {
	        throw "malformed PKCS8 private key(code:004)";
	      }if (s.substr(p[0], 2) != "06") {
	        throw "malformed PKCS8 private key(code:005)";
	      }q.algoid = t(s, p[0]);if (s.substr(p[1], 2) == "06") {
	        q.algparam = t(s, p[1]);
	      }if (s.substr(r[2], 2) != "04") {
	        throw "malformed PKCS8 private key(code:006)";
	      }q.keyidx = v.getVidx(s, r[2]);return q;
	    }, getKeyFromPlainPrivatePKCS8PEM: function getKeyFromPlainPrivatePKCS8PEM(q) {
	      var p = pemtohex(q, "PRIVATE KEY");var r = this.getKeyFromPlainPrivatePKCS8Hex(p);return r;
	    }, getKeyFromPlainPrivatePKCS8Hex: function getKeyFromPlainPrivatePKCS8Hex(p) {
	      var q = this.parsePlainPrivatePKCS8Hex(p);var r;if (q.algoid == "2a864886f70d010101") {
	        r = new RSAKey();
	      } else {
	        if (q.algoid == "2a8648ce380401") {
	          r = new KJUR.crypto.DSA();
	        } else {
	          if (q.algoid == "2a8648ce3d0201") {
	            r = new KJUR.crypto.ECDSA();
	          } else {
	            throw "unsupported private key algorithm";
	          }
	        }
	      }r.readPKCS8PrvKeyHex(p);return r;
	    }, _getKeyFromPublicPKCS8Hex: function _getKeyFromPublicPKCS8Hex(q) {
	      var p;var r = ASN1HEX.getVbyList(q, 0, [0, 0], "06");if (r === "2a864886f70d010101") {
	        p = new RSAKey();
	      } else {
	        if (r === "2a8648ce380401") {
	          p = new KJUR.crypto.DSA();
	        } else {
	          if (r === "2a8648ce3d0201") {
	            p = new KJUR.crypto.ECDSA();
	          } else {
	            throw "unsupported PKCS#8 public key hex";
	          }
	        }
	      }p.readPKCS8PubKeyHex(q);return p;
	    }, parsePublicRawRSAKeyHex: function parsePublicRawRSAKeyHex(r) {
	      var u = ASN1HEX;var t = u.getChildIdx;var s = u.getV;var p = {};if (r.substr(0, 2) != "30") {
	        throw "malformed RSA key(code:001)";
	      }var q = t(r, 0);if (q.length != 2) {
	        throw "malformed RSA key(code:002)";
	      }if (r.substr(q[0], 2) != "02") {
	        throw "malformed RSA key(code:003)";
	      }p.n = s(r, q[0]);if (r.substr(q[1], 2) != "02") {
	        throw "malformed RSA key(code:004)";
	      }p.e = s(r, q[1]);return p;
	    }, parsePublicPKCS8Hex: function parsePublicPKCS8Hex(t) {
	      var v = ASN1HEX;var u = v.getChildIdx;var s = v.getV;var q = {};q.algparam = null;var r = u(t, 0);if (r.length != 2) {
	        throw "outer DERSequence shall have 2 elements: " + r.length;
	      }var w = r[0];if (t.substr(w, 2) != "30") {
	        throw "malformed PKCS8 public key(code:001)";
	      }var p = u(t, w);if (p.length != 2) {
	        throw "malformed PKCS8 public key(code:002)";
	      }if (t.substr(p[0], 2) != "06") {
	        throw "malformed PKCS8 public key(code:003)";
	      }q.algoid = s(t, p[0]);if (t.substr(p[1], 2) == "06") {
	        q.algparam = s(t, p[1]);
	      } else {
	        if (t.substr(p[1], 2) == "30") {
	          q.algparam = {};q.algparam.p = v.getVbyList(t, p[1], [0], "02");q.algparam.q = v.getVbyList(t, p[1], [1], "02");q.algparam.g = v.getVbyList(t, p[1], [2], "02");
	        }
	      }if (t.substr(r[1], 2) != "03") {
	        throw "malformed PKCS8 public key(code:004)";
	      }q.key = s(t, r[1]).substr(2);return q;
	    } };
	}();KEYUTIL.getKey = function (l, k, n) {
	  var G = ASN1HEX,
	      L = G.getChildIdx,
	      v = G.getV,
	      d = G.getVbyList,
	      c = KJUR.crypto,
	      i = c.ECDSA,
	      C = c.DSA,
	      w = RSAKey,
	      M = pemtohex,
	      F = KEYUTIL;if (typeof w != "undefined" && l instanceof w) {
	    return l;
	  }if (typeof i != "undefined" && l instanceof i) {
	    return l;
	  }if (typeof C != "undefined" && l instanceof C) {
	    return l;
	  }if (l.curve !== undefined && l.xy !== undefined && l.d === undefined) {
	    return new i({ pub: l.xy, curve: l.curve });
	  }if (l.curve !== undefined && l.d !== undefined) {
	    return new i({ prv: l.d, curve: l.curve });
	  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d === undefined) {
	    var P = new w();P.setPublic(l.n, l.e);return P;
	  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p !== undefined && l.q !== undefined && l.dp !== undefined && l.dq !== undefined && l.co !== undefined && l.qi === undefined) {
	    var P = new w();P.setPrivateEx(l.n, l.e, l.d, l.p, l.q, l.dp, l.dq, l.co);return P;
	  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p === undefined) {
	    var P = new w();P.setPrivate(l.n, l.e, l.d);return P;
	  }if (l.p !== undefined && l.q !== undefined && l.g !== undefined && l.y !== undefined && l.x === undefined) {
	    var P = new C();P.setPublic(l.p, l.q, l.g, l.y);return P;
	  }if (l.p !== undefined && l.q !== undefined && l.g !== undefined && l.y !== undefined && l.x !== undefined) {
	    var P = new C();P.setPrivate(l.p, l.q, l.g, l.y, l.x);return P;
	  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d === undefined) {
	    var P = new w();P.setPublic(b64utohex(l.n), b64utohex(l.e));return P;
	  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p !== undefined && l.q !== undefined && l.dp !== undefined && l.dq !== undefined && l.qi !== undefined) {
	    var P = new w();P.setPrivateEx(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d), b64utohex(l.p), b64utohex(l.q), b64utohex(l.dp), b64utohex(l.dq), b64utohex(l.qi));return P;
	  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d !== undefined) {
	    var P = new w();P.setPrivate(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d));return P;
	  }if (l.kty === "EC" && l.crv !== undefined && l.x !== undefined && l.y !== undefined && l.d === undefined) {
	    var j = new i({ curve: l.crv });var t = j.ecparams.keylen / 4;var B = ("0000000000" + b64utohex(l.x)).slice(-t);var z = ("0000000000" + b64utohex(l.y)).slice(-t);var u = "04" + B + z;j.setPublicKeyHex(u);return j;
	  }if (l.kty === "EC" && l.crv !== undefined && l.x !== undefined && l.y !== undefined && l.d !== undefined) {
	    var j = new i({ curve: l.crv });var t = j.ecparams.keylen / 4;var B = ("0000000000" + b64utohex(l.x)).slice(-t);var z = ("0000000000" + b64utohex(l.y)).slice(-t);var u = "04" + B + z;var b = ("0000000000" + b64utohex(l.d)).slice(-t);j.setPublicKeyHex(u);j.setPrivateKeyHex(b);return j;
	  }if (n === "pkcs5prv") {
	    var J = l,
	        G = ASN1HEX,
	        N,
	        P;N = L(J, 0);if (N.length === 9) {
	      P = new w();P.readPKCS5PrvKeyHex(J);
	    } else {
	      if (N.length === 6) {
	        P = new C();P.readPKCS5PrvKeyHex(J);
	      } else {
	        if (N.length > 2 && J.substr(N[1], 2) === "04") {
	          P = new i();P.readPKCS5PrvKeyHex(J);
	        } else {
	          throw "unsupported PKCS#1/5 hexadecimal key";
	        }
	      }
	    }return P;
	  }if (n === "pkcs8prv") {
	    var P = F.getKeyFromPlainPrivatePKCS8Hex(l);return P;
	  }if (n === "pkcs8pub") {
	    return F._getKeyFromPublicPKCS8Hex(l);
	  }if (n === "x509pub") {
	    return X509.getPublicKeyFromCertHex(l);
	  }if (l.indexOf("-END CERTIFICATE-", 0) != -1 || l.indexOf("-END X509 CERTIFICATE-", 0) != -1 || l.indexOf("-END TRUSTED CERTIFICATE-", 0) != -1) {
	    return X509.getPublicKeyFromCertPEM(l);
	  }if (l.indexOf("-END PUBLIC KEY-") != -1) {
	    var O = pemtohex(l, "PUBLIC KEY");return F._getKeyFromPublicPKCS8Hex(O);
	  }if (l.indexOf("-END RSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
	    var m = M(l, "RSA PRIVATE KEY");return F.getKey(m, null, "pkcs5prv");
	  }if (l.indexOf("-END DSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
	    var I = M(l, "DSA PRIVATE KEY");var E = d(I, 0, [1], "02");var D = d(I, 0, [2], "02");var K = d(I, 0, [3], "02");var r = d(I, 0, [4], "02");var s = d(I, 0, [5], "02");var P = new C();P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r, 16), new BigInteger(s, 16));return P;
	  }if (l.indexOf("-END PRIVATE KEY-") != -1) {
	    return F.getKeyFromPlainPrivatePKCS8PEM(l);
	  }if (l.indexOf("-END RSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
	    var o = F.getDecryptedKeyHex(l, k);var H = new RSAKey();H.readPKCS5PrvKeyHex(o);return H;
	  }if (l.indexOf("-END EC PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
	    var I = F.getDecryptedKeyHex(l, k);var P = d(I, 0, [1], "04");var f = d(I, 0, [2, 0], "06");var A = d(I, 0, [3, 0], "03").substr(2);var e = "";if (KJUR.crypto.OID.oidhex2name[f] !== undefined) {
	      e = KJUR.crypto.OID.oidhex2name[f];
	    } else {
	      throw "undefined OID(hex) in KJUR.crypto.OID: " + f;
	    }var j = new i({ curve: e });j.setPublicKeyHex(A);j.setPrivateKeyHex(P);j.isPublic = false;return j;
	  }if (l.indexOf("-END DSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
	    var I = F.getDecryptedKeyHex(l, k);var E = d(I, 0, [1], "02");var D = d(I, 0, [2], "02");var K = d(I, 0, [3], "02");var r = d(I, 0, [4], "02");var s = d(I, 0, [5], "02");var P = new C();P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r, 16), new BigInteger(s, 16));return P;
	  }if (l.indexOf("-END ENCRYPTED PRIVATE KEY-") != -1) {
	    return F.getKeyFromEncryptedPKCS8PEM(l, k);
	  }throw "not supported argument";
	};KEYUTIL.generateKeypair = function (a, c) {
	  if (a == "RSA") {
	    var b = c;var h = new RSAKey();h.generate(b, "10001");h.isPrivate = true;h.isPublic = true;var f = new RSAKey();var e = h.n.toString(16);var i = h.e.toString(16);f.setPublic(e, i);f.isPrivate = false;f.isPublic = true;var k = {};k.prvKeyObj = h;k.pubKeyObj = f;return k;
	  } else {
	    if (a == "EC") {
	      var d = c;var g = new KJUR.crypto.ECDSA({ curve: d });var j = g.generateKeyPairHex();var h = new KJUR.crypto.ECDSA({ curve: d });h.setPublicKeyHex(j.ecpubhex);h.setPrivateKeyHex(j.ecprvhex);h.isPrivate = true;h.isPublic = false;var f = new KJUR.crypto.ECDSA({ curve: d });f.setPublicKeyHex(j.ecpubhex);f.isPrivate = false;f.isPublic = true;var k = {};k.prvKeyObj = h;k.pubKeyObj = f;return k;
	    } else {
	      throw "unknown algorithm: " + a;
	    }
	  }
	};KEYUTIL.getPEM = function (b, D, y, m, q, j) {
	  var F = KJUR,
	      k = F.asn1,
	      z = k.DERObjectIdentifier,
	      f = k.DERInteger,
	      l = k.ASN1Util.newObject,
	      a = k.x509,
	      C = a.SubjectPublicKeyInfo,
	      e = F.crypto,
	      u = e.DSA,
	      r = e.ECDSA,
	      n = RSAKey;function A(s) {
	    var G = l({ seq: [{ "int": 0 }, { "int": { bigint: s.n } }, { "int": s.e }, { "int": { bigint: s.d } }, { "int": { bigint: s.p } }, { "int": { bigint: s.q } }, { "int": { bigint: s.dmp1 } }, { "int": { bigint: s.dmq1 } }, { "int": { bigint: s.coeff } }] });return G;
	  }function B(G) {
	    var s = l({ seq: [{ "int": 1 }, { octstr: { hex: G.prvKeyHex } }, { tag: ["a0", true, { oid: { name: G.curveName } }] }, { tag: ["a1", true, { bitstr: { hex: "00" + G.pubKeyHex } }] }] });return s;
	  }function x(s) {
	    var G = l({ seq: [{ "int": 0 }, { "int": { bigint: s.p } }, { "int": { bigint: s.q } }, { "int": { bigint: s.g } }, { "int": { bigint: s.y } }, { "int": { bigint: s.x } }] });return G;
	  }if ((n !== undefined && b instanceof n || u !== undefined && b instanceof u || r !== undefined && b instanceof r) && b.isPublic == true && (D === undefined || D == "PKCS8PUB")) {
	    var E = new C(b);var w = E.getEncodedHex();return hextopem(w, "PUBLIC KEY");
	  }if (D == "PKCS1PRV" && n !== undefined && b instanceof n && (y === undefined || y == null) && b.isPrivate == true) {
	    var E = A(b);var w = E.getEncodedHex();return hextopem(w, "RSA PRIVATE KEY");
	  }if (D == "PKCS1PRV" && r !== undefined && b instanceof r && (y === undefined || y == null) && b.isPrivate == true) {
	    var i = new z({ name: b.curveName });var v = i.getEncodedHex();var h = B(b);var t = h.getEncodedHex();var p = "";p += hextopem(v, "EC PARAMETERS");p += hextopem(t, "EC PRIVATE KEY");return p;
	  }if (D == "PKCS1PRV" && u !== undefined && b instanceof u && (y === undefined || y == null) && b.isPrivate == true) {
	    var E = x(b);var w = E.getEncodedHex();return hextopem(w, "DSA PRIVATE KEY");
	  }if (D == "PKCS5PRV" && n !== undefined && b instanceof n && y !== undefined && y != null && b.isPrivate == true) {
	    var E = A(b);var w = E.getEncodedHex();if (m === undefined) {
	      m = "DES-EDE3-CBC";
	    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA", w, y, m, j);
	  }if (D == "PKCS5PRV" && r !== undefined && b instanceof r && y !== undefined && y != null && b.isPrivate == true) {
	    var E = B(b);var w = E.getEncodedHex();if (m === undefined) {
	      m = "DES-EDE3-CBC";
	    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("EC", w, y, m, j);
	  }if (D == "PKCS5PRV" && u !== undefined && b instanceof u && y !== undefined && y != null && b.isPrivate == true) {
	    var E = x(b);var w = E.getEncodedHex();if (m === undefined) {
	      m = "DES-EDE3-CBC";
	    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA", w, y, m, j);
	  }var o = function o(G, s) {
	    var I = c(G, s);var H = new l({ seq: [{ seq: [{ oid: { name: "pkcs5PBES2" } }, { seq: [{ seq: [{ oid: { name: "pkcs5PBKDF2" } }, { seq: [{ octstr: { hex: I.pbkdf2Salt } }, { "int": I.pbkdf2Iter }] }] }, { seq: [{ oid: { name: "des-EDE3-CBC" } }, { octstr: { hex: I.encryptionSchemeIV } }] }] }] }, { octstr: { hex: I.ciphertext } }] });return H.getEncodedHex();
	  };var c = function c(N, O) {
	    var H = 100;var M = CryptoJS.lib.WordArray.random(8);var L = "DES-EDE3-CBC";var s = CryptoJS.lib.WordArray.random(8);var I = CryptoJS.PBKDF2(O, M, { keySize: 192 / 32, iterations: H });var J = CryptoJS.enc.Hex.parse(N);var K = CryptoJS.TripleDES.encrypt(J, I, { iv: s }) + "";var G = {};G.ciphertext = K;G.pbkdf2Salt = CryptoJS.enc.Hex.stringify(M);G.pbkdf2Iter = H;G.encryptionSchemeAlg = L;G.encryptionSchemeIV = CryptoJS.enc.Hex.stringify(s);return G;
	  };if (D == "PKCS8PRV" && n != undefined && b instanceof n && b.isPrivate == true) {
	    var g = A(b);var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "rsaEncryption" } }, { "null": true }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
	      return hextopem(w, "PRIVATE KEY");
	    } else {
	      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
	    }
	  }if (D == "PKCS8PRV" && r !== undefined && b instanceof r && b.isPrivate == true) {
	    var g = new l({ seq: [{ "int": 1 }, { octstr: { hex: b.prvKeyHex } }, { tag: ["a1", true, { bitstr: { hex: "00" + b.pubKeyHex } }] }] });var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "ecPublicKey" } }, { oid: { name: b.curveName } }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
	      return hextopem(w, "PRIVATE KEY");
	    } else {
	      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
	    }
	  }if (D == "PKCS8PRV" && u !== undefined && b instanceof u && b.isPrivate == true) {
	    var g = new f({ bigint: b.x });var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "dsa" } }, { seq: [{ "int": { bigint: b.p } }, { "int": { bigint: b.q } }, { "int": { bigint: b.g } }] }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
	      return hextopem(w, "PRIVATE KEY");
	    } else {
	      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
	    }
	  }throw "unsupported object nor format";
	};KEYUTIL.getKeyFromCSRPEM = function (b) {
	  var a = pemtohex(b, "CERTIFICATE REQUEST");var c = KEYUTIL.getKeyFromCSRHex(a);return c;
	};KEYUTIL.getKeyFromCSRHex = function (a) {
	  var c = KEYUTIL.parseCSRHex(a);var b = KEYUTIL.getKey(c.p8pubkeyhex, null, "pkcs8pub");return b;
	};KEYUTIL.parseCSRHex = function (d) {
	  var i = ASN1HEX;var f = i.getChildIdx;var c = i.getTLV;var b = {};var g = d;if (g.substr(0, 2) != "30") {
	    throw "malformed CSR(code:001)";
	  }var e = f(g, 0);if (e.length < 1) {
	    throw "malformed CSR(code:002)";
	  }if (g.substr(e[0], 2) != "30") {
	    throw "malformed CSR(code:003)";
	  }var a = f(g, e[0]);if (a.length < 3) {
	    throw "malformed CSR(code:004)";
	  }b.p8pubkeyhex = c(g, a[2]);return b;
	};KEYUTIL.getJWKFromKey = function (d) {
	  var b = {};if (d instanceof RSAKey && d.isPrivate) {
	    b.kty = "RSA";b.n = hextob64u(d.n.toString(16));b.e = hextob64u(d.e.toString(16));b.d = hextob64u(d.d.toString(16));b.p = hextob64u(d.p.toString(16));b.q = hextob64u(d.q.toString(16));b.dp = hextob64u(d.dmp1.toString(16));b.dq = hextob64u(d.dmq1.toString(16));b.qi = hextob64u(d.coeff.toString(16));return b;
	  } else {
	    if (d instanceof RSAKey && d.isPublic) {
	      b.kty = "RSA";b.n = hextob64u(d.n.toString(16));b.e = hextob64u(d.e.toString(16));return b;
	    } else {
	      if (d instanceof KJUR.crypto.ECDSA && d.isPrivate) {
	        var a = d.getShortNISTPCurveName();if (a !== "P-256" && a !== "P-384") {
	          throw "unsupported curve name for JWT: " + a;
	        }var c = d.getPublicKeyXYHex();b.kty = "EC";b.crv = a;b.x = hextob64u(c.x);b.y = hextob64u(c.y);b.d = hextob64u(d.prvKeyHex);return b;
	      } else {
	        if (d instanceof KJUR.crypto.ECDSA && d.isPublic) {
	          var a = d.getShortNISTPCurveName();if (a !== "P-256" && a !== "P-384") {
	            throw "unsupported curve name for JWT: " + a;
	          }var c = d.getPublicKeyXYHex();b.kty = "EC";b.crv = a;b.x = hextob64u(c.x);b.y = hextob64u(c.y);return b;
	        }
	      }
	    }
	  }throw "not supported key object";
	};
	RSAKey.getPosArrayOfChildrenFromHex = function (a) {
	  return ASN1HEX.getChildIdx(a, 0);
	};RSAKey.getHexValueArrayOfChildrenFromHex = function (f) {
	  var n = ASN1HEX;var i = n.getV;var k = RSAKey.getPosArrayOfChildrenFromHex(f);var e = i(f, k[0]);var j = i(f, k[1]);var b = i(f, k[2]);var c = i(f, k[3]);var h = i(f, k[4]);var g = i(f, k[5]);var m = i(f, k[6]);var l = i(f, k[7]);var d = i(f, k[8]);var k = new Array();k.push(e, j, b, c, h, g, m, l, d);return k;
	};RSAKey.prototype.readPrivateKeyFromPEMString = function (d) {
	  var c = pemtohex(d);var b = RSAKey.getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]);
	};RSAKey.prototype.readPKCS5PrvKeyHex = function (c) {
	  var b = RSAKey.getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]);
	};RSAKey.prototype.readPKCS8PrvKeyHex = function (e) {
	  var c, j, l, b, a, f, d, k;var m = ASN1HEX;var g = m.getVbyList;if (m.isASN1HEX(e) === false) {
	    throw "not ASN.1 hex string";
	  }try {
	    c = g(e, 0, [2, 0, 1], "02");j = g(e, 0, [2, 0, 2], "02");l = g(e, 0, [2, 0, 3], "02");b = g(e, 0, [2, 0, 4], "02");a = g(e, 0, [2, 0, 5], "02");f = g(e, 0, [2, 0, 6], "02");d = g(e, 0, [2, 0, 7], "02");k = g(e, 0, [2, 0, 8], "02");
	  } catch (i) {
	    throw "malformed PKCS#8 plain RSA private key";
	  }this.setPrivateEx(c, j, l, b, a, f, d, k);
	};RSAKey.prototype.readPKCS5PubKeyHex = function (c) {
	  var e = ASN1HEX;var b = e.getV;if (e.isASN1HEX(c) === false) {
	    throw "keyHex is not ASN.1 hex string";
	  }var a = e.getChildIdx(c, 0);if (a.length !== 2 || c.substr(a[0], 2) !== "02" || c.substr(a[1], 2) !== "02") {
	    throw "wrong hex for PKCS#5 public key";
	  }var f = b(c, a[0]);var d = b(c, a[1]);this.setPublic(f, d);
	};RSAKey.prototype.readPKCS8PubKeyHex = function (b) {
	  var c = ASN1HEX;if (c.isASN1HEX(b) === false) {
	    throw "not ASN.1 hex string";
	  }if (c.getTLVbyList(b, 0, [0, 0]) !== "06092a864886f70d010101") {
	    throw "not PKCS8 RSA public key";
	  }var a = c.getTLVbyList(b, 0, [1, 0]);this.readPKCS5PubKeyHex(a);
	};RSAKey.prototype.readCertPubKeyHex = function (b, d) {
	  var a, c;a = new X509();a.readCertHex(b);c = a.getPublicKeyHex();this.readPKCS8PubKeyHex(c);
	};
	var _RE_HEXDECONLY = new RegExp("");_RE_HEXDECONLY.compile("[^0-9a-f]", "gi");function _rsasign_getHexPaddedDigestInfoForString(d, e, a) {
	  var b = function b(f) {
	    return KJUR.crypto.Util.hashString(f, a);
	  };var c = b(d);return KJUR.crypto.Util.getPaddedDigestInfoHex(c, a, e);
	}function _zeroPaddingOfSignature(e, d) {
	  var c = "";var a = d / 4 - e.length;for (var b = 0; b < a; b++) {
	    c = c + "0";
	  }return c + e;
	}RSAKey.prototype.sign = function (d, a) {
	  var b = function b(e) {
	    return KJUR.crypto.Util.hashString(e, a);
	  };var c = b(d);return this.signWithMessageHash(c, a);
	};RSAKey.prototype.signWithMessageHash = function (e, c) {
	  var f = KJUR.crypto.Util.getPaddedDigestInfoHex(e, c, this.n.bitLength());var b = parseBigInt(f, 16);var d = this.doPrivate(b);var a = d.toString(16);return _zeroPaddingOfSignature(a, this.n.bitLength());
	};function pss_mgf1_str(c, a, e) {
	  var b = "",
	      d = 0;while (b.length < a) {
	    b += hextorstr(e(rstrtohex(c + String.fromCharCode.apply(String, [(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255]))));d += 1;
	  }return b;
	}RSAKey.prototype.signPSS = function (e, a, d) {
	  var c = function c(f) {
	    return KJUR.crypto.Util.hashHex(f, a);
	  };var b = c(rstrtohex(e));if (d === undefined) {
	    d = -1;
	  }return this.signWithMessageHashPSS(b, a, d);
	};RSAKey.prototype.signWithMessageHashPSS = function (l, a, k) {
	  var b = hextorstr(l);var g = b.length;var m = this.n.bitLength() - 1;var c = Math.ceil(m / 8);var d;var o = function o(i) {
	    return KJUR.crypto.Util.hashHex(i, a);
	  };if (k === -1 || k === undefined) {
	    k = g;
	  } else {
	    if (k === -2) {
	      k = c - g - 2;
	    } else {
	      if (k < -2) {
	        throw "invalid salt length";
	      }
	    }
	  }if (c < g + k + 2) {
	    throw "data too long";
	  }var f = "";if (k > 0) {
	    f = new Array(k);new SecureRandom().nextBytes(f);f = String.fromCharCode.apply(String, f);
	  }var n = hextorstr(o(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00" + b + f)));var j = [];for (d = 0; d < c - k - g - 2; d += 1) {
	    j[d] = 0;
	  }var e = String.fromCharCode.apply(String, j) + "\x01" + f;var h = pss_mgf1_str(n, e.length, o);var q = [];for (d = 0; d < e.length; d += 1) {
	    q[d] = e.charCodeAt(d) ^ h.charCodeAt(d);
	  }var p = 65280 >> 8 * c - m & 255;q[0] &= ~p;for (d = 0; d < g; d++) {
	    q.push(n.charCodeAt(d));
	  }q.push(188);return _zeroPaddingOfSignature(this.doPrivate(new BigInteger(q)).toString(16), this.n.bitLength());
	};function _rsasign_getDecryptSignatureBI(a, d, c) {
	  var b = new RSAKey();b.setPublic(d, c);var e = b.doPublic(a);return e;
	}function _rsasign_getHexDigestInfoFromSig(a, c, b) {
	  var e = _rsasign_getDecryptSignatureBI(a, c, b);var d = e.toString(16).replace(/^1f+00/, "");return d;
	}function _rsasign_getAlgNameAndHashFromHexDisgestInfo(f) {
	  for (var e in KJUR.crypto.Util.DIGESTINFOHEAD) {
	    var d = KJUR.crypto.Util.DIGESTINFOHEAD[e];var b = d.length;if (f.substring(0, b) == d) {
	      var c = [e, f.substring(b)];return c;
	    }
	  }return [];
	}RSAKey.prototype.verify = function (f, j) {
	  j = j.replace(_RE_HEXDECONLY, "");j = j.replace(/[ \n]+/g, "");var b = parseBigInt(j, 16);if (b.bitLength() > this.n.bitLength()) {
	    return 0;
	  }var i = this.doPublic(b);var e = i.toString(16).replace(/^1f+00/, "");var g = _rsasign_getAlgNameAndHashFromHexDisgestInfo(e);if (g.length == 0) {
	    return false;
	  }var d = g[0];var h = g[1];var a = function a(k) {
	    return KJUR.crypto.Util.hashString(k, d);
	  };var c = a(f);return h == c;
	};RSAKey.prototype.verifyWithMessageHash = function (e, a) {
	  a = a.replace(_RE_HEXDECONLY, "");a = a.replace(/[ \n]+/g, "");var b = parseBigInt(a, 16);if (b.bitLength() > this.n.bitLength()) {
	    return 0;
	  }var h = this.doPublic(b);var g = h.toString(16).replace(/^1f+00/, "");var c = _rsasign_getAlgNameAndHashFromHexDisgestInfo(g);if (c.length == 0) {
	    return false;
	  }var d = c[0];var f = c[1];return f == e;
	};RSAKey.prototype.verifyPSS = function (c, b, a, f) {
	  var e = function e(g) {
	    return KJUR.crypto.Util.hashHex(g, a);
	  };var d = e(rstrtohex(c));if (f === undefined) {
	    f = -1;
	  }return this.verifyWithMessageHashPSS(d, b, a, f);
	};RSAKey.prototype.verifyWithMessageHashPSS = function (f, s, l, c) {
	  var k = new BigInteger(s, 16);if (k.bitLength() > this.n.bitLength()) {
	    return false;
	  }var r = function r(i) {
	    return KJUR.crypto.Util.hashHex(i, l);
	  };var j = hextorstr(f);var h = j.length;var g = this.n.bitLength() - 1;var m = Math.ceil(g / 8);var q;if (c === -1 || c === undefined) {
	    c = h;
	  } else {
	    if (c === -2) {
	      c = m - h - 2;
	    } else {
	      if (c < -2) {
	        throw "invalid salt length";
	      }
	    }
	  }if (m < h + c + 2) {
	    throw "data too long";
	  }var a = this.doPublic(k).toByteArray();for (q = 0; q < a.length; q += 1) {
	    a[q] &= 255;
	  }while (a.length < m) {
	    a.unshift(0);
	  }if (a[m - 1] !== 188) {
	    throw "encoded message does not end in 0xbc";
	  }a = String.fromCharCode.apply(String, a);var d = a.substr(0, m - h - 1);var e = a.substr(d.length, h);var p = 65280 >> 8 * m - g & 255;if ((d.charCodeAt(0) & p) !== 0) {
	    throw "bits beyond keysize not zero";
	  }var n = pss_mgf1_str(e, d.length, r);var o = [];for (q = 0; q < d.length; q += 1) {
	    o[q] = d.charCodeAt(q) ^ n.charCodeAt(q);
	  }o[0] &= ~p;var b = m - h - c - 2;for (q = 0; q < b; q += 1) {
	    if (o[q] !== 0) {
	      throw "leftmost octets not zero";
	    }
	  }if (o[b] !== 1) {
	    throw "0x01 marker not found";
	  }return e === hextorstr(r(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00" + j + String.fromCharCode.apply(String, o.slice(-c)))));
	};RSAKey.SALT_LEN_HLEN = -1;RSAKey.SALT_LEN_MAX = -2;RSAKey.SALT_LEN_RECOVER = -2;
	function X509() {
	  var k = ASN1HEX,
	      j = k.getChildIdx,
	      h = k.getV,
	      b = k.getTLV,
	      f = k.getVbyList,
	      c = k.getTLVbyList,
	      g = k.getIdxbyList,
	      d = k.getVidx,
	      i = k.oidname,
	      a = X509,
	      e = pemtohex;this.hex = null;this.version = 0;this.foffset = 0;this.aExtInfo = null;this.getVersion = function () {
	    if (this.hex === null || this.version !== 0) {
	      return this.version;
	    }if (c(this.hex, 0, [0, 0]) !== "a003020102") {
	      this.version = 1;this.foffset = -1;return 1;
	    }this.version = 3;return 3;
	  };this.getSerialNumberHex = function () {
	    return f(this.hex, 0, [0, 1 + this.foffset], "02");
	  };this.getSignatureAlgorithmField = function () {
	    return i(f(this.hex, 0, [0, 2 + this.foffset, 0], "06"));
	  };this.getIssuerHex = function () {
	    return c(this.hex, 0, [0, 3 + this.foffset], "30");
	  };this.getIssuerString = function () {
	    return a.hex2dn(this.getIssuerHex());
	  };this.getSubjectHex = function () {
	    return c(this.hex, 0, [0, 5 + this.foffset], "30");
	  };this.getSubjectString = function () {
	    return a.hex2dn(this.getSubjectHex());
	  };this.getNotBefore = function () {
	    var l = f(this.hex, 0, [0, 4 + this.foffset, 0]);l = l.replace(/(..)/g, "%$1");l = decodeURIComponent(l);return l;
	  };this.getNotAfter = function () {
	    var l = f(this.hex, 0, [0, 4 + this.foffset, 1]);l = l.replace(/(..)/g, "%$1");l = decodeURIComponent(l);return l;
	  };this.getPublicKeyHex = function () {
	    return k.getTLVbyList(this.hex, 0, [0, 6 + this.foffset], "30");
	  };this.getPublicKeyIdx = function () {
	    return g(this.hex, 0, [0, 6 + this.foffset], "30");
	  };this.getPublicKeyContentIdx = function () {
	    var l = this.getPublicKeyIdx();return g(this.hex, l, [1, 0], "30");
	  };this.getPublicKey = function () {
	    return KEYUTIL.getKey(this.getPublicKeyHex(), null, "pkcs8pub");
	  };this.getSignatureAlgorithmName = function () {
	    return i(f(this.hex, 0, [1, 0], "06"));
	  };this.getSignatureValueHex = function () {
	    return f(this.hex, 0, [2], "03", true);
	  };this.verifySignature = function (n) {
	    var o = this.getSignatureAlgorithmName();var l = this.getSignatureValueHex();var m = c(this.hex, 0, [0], "30");var p = new KJUR.crypto.Signature({ alg: o });p.init(n);p.updateHex(m);return p.verify(l);
	  };this.parseExt = function () {
	    if (this.version !== 3) {
	      return -1;
	    }var p = g(this.hex, 0, [0, 7, 0], "30");var m = j(this.hex, p);this.aExtInfo = new Array();for (var n = 0; n < m.length; n++) {
	      var q = {};q.critical = false;var l = j(this.hex, m[n]);var r = 0;if (l.length === 3) {
	        q.critical = true;r = 1;
	      }q.oid = k.hextooidstr(f(this.hex, m[n], [0], "06"));var o = g(this.hex, m[n], [1 + r]);q.vidx = d(this.hex, o);this.aExtInfo.push(q);
	    }
	  };this.getExtInfo = function (n) {
	    var l = this.aExtInfo;var o = n;if (!n.match(/^[0-9.]+$/)) {
	      o = KJUR.asn1.x509.OID.name2oid(n);
	    }if (o === "") {
	      return undefined;
	    }for (var m = 0; m < l.length; m++) {
	      if (l[m].oid === o) {
	        return l[m];
	      }
	    }return undefined;
	  };this.getExtBasicConstraints = function () {
	    var n = this.getExtInfo("basicConstraints");if (n === undefined) {
	      return n;
	    }var l = h(this.hex, n.vidx);if (l === "") {
	      return {};
	    }if (l === "0101ff") {
	      return { cA: true };
	    }if (l.substr(0, 8) === "0101ff02") {
	      var o = h(l, 6);var m = parseInt(o, 16);return { cA: true, pathLen: m };
	    }throw "basicConstraints parse error";
	  };this.getExtKeyUsageBin = function () {
	    var o = this.getExtInfo("keyUsage");if (o === undefined) {
	      return "";
	    }var m = h(this.hex, o.vidx);if (m.length % 2 != 0 || m.length <= 2) {
	      throw "malformed key usage value";
	    }var l = parseInt(m.substr(0, 2));var n = parseInt(m.substr(2), 16).toString(2);return n.substr(0, n.length - l);
	  };this.getExtKeyUsageString = function () {
	    var n = this.getExtKeyUsageBin();var l = new Array();for (var m = 0; m < n.length; m++) {
	      if (n.substr(m, 1) == "1") {
	        l.push(X509.KEYUSAGE_NAME[m]);
	      }
	    }return l.join(",");
	  };this.getExtSubjectKeyIdentifier = function () {
	    var l = this.getExtInfo("subjectKeyIdentifier");if (l === undefined) {
	      return l;
	    }return h(this.hex, l.vidx);
	  };this.getExtAuthorityKeyIdentifier = function () {
	    var p = this.getExtInfo("authorityKeyIdentifier");if (p === undefined) {
	      return p;
	    }var l = {};var o = b(this.hex, p.vidx);var m = j(o, 0);for (var n = 0; n < m.length; n++) {
	      if (o.substr(m[n], 2) === "80") {
	        l.kid = h(o, m[n]);
	      }
	    }return l;
	  };this.getExtExtKeyUsageName = function () {
	    var p = this.getExtInfo("extKeyUsage");if (p === undefined) {
	      return p;
	    }var l = new Array();var o = b(this.hex, p.vidx);if (o === "") {
	      return l;
	    }var m = j(o, 0);for (var n = 0; n < m.length; n++) {
	      l.push(i(h(o, m[n])));
	    }return l;
	  };this.getExtSubjectAltName = function () {
	    var m = this.getExtSubjectAltName2();var l = new Array();for (var n = 0; n < m.length; n++) {
	      if (m[n][0] === "DNS") {
	        l.push(m[n][1]);
	      }
	    }return l;
	  };this.getExtSubjectAltName2 = function () {
	    var p, s, r;var q = this.getExtInfo("subjectAltName");if (q === undefined) {
	      return q;
	    }var l = new Array();var o = b(this.hex, q.vidx);var m = j(o, 0);for (var n = 0; n < m.length; n++) {
	      r = o.substr(m[n], 2);p = h(o, m[n]);if (r === "81") {
	        s = hextoutf8(p);l.push(["MAIL", s]);
	      }if (r === "82") {
	        s = hextoutf8(p);l.push(["DNS", s]);
	      }if (r === "84") {
	        s = X509.hex2dn(p, 0);l.push(["DN", s]);
	      }if (r === "86") {
	        s = hextoutf8(p);l.push(["URI", s]);
	      }if (r === "87") {
	        s = hextoip(p);l.push(["IP", s]);
	      }
	    }return l;
	  };this.getExtCRLDistributionPointsURI = function () {
	    var q = this.getExtInfo("cRLDistributionPoints");if (q === undefined) {
	      return q;
	    }var l = new Array();var m = j(this.hex, q.vidx);for (var o = 0; o < m.length; o++) {
	      try {
	        var r = f(this.hex, m[o], [0, 0, 0], "86");var p = hextoutf8(r);l.push(p);
	      } catch (n) {}
	    }return l;
	  };this.getExtAIAInfo = function () {
	    var p = this.getExtInfo("authorityInfoAccess");if (p === undefined) {
	      return p;
	    }var l = { ocsp: [], caissuer: [] };var m = j(this.hex, p.vidx);for (var n = 0; n < m.length; n++) {
	      var q = f(this.hex, m[n], [0], "06");var o = f(this.hex, m[n], [1], "86");if (q === "2b06010505073001") {
	        l.ocsp.push(hextoutf8(o));
	      }if (q === "2b06010505073002") {
	        l.caissuer.push(hextoutf8(o));
	      }
	    }return l;
	  };this.getExtCertificatePolicies = function () {
	    var o = this.getExtInfo("certificatePolicies");if (o === undefined) {
	      return o;
	    }var l = b(this.hex, o.vidx);var u = [];var s = j(l, 0);for (var r = 0; r < s.length; r++) {
	      var t = {};var n = j(l, s[r]);t.id = i(h(l, n[0]));if (n.length === 2) {
	        var m = j(l, n[1]);for (var q = 0; q < m.length; q++) {
	          var p = f(l, m[q], [0], "06");if (p === "2b06010505070201") {
	            t.cps = hextoutf8(f(l, m[q], [1]));
	          } else {
	            if (p === "2b06010505070202") {
	              t.unotice = hextoutf8(f(l, m[q], [1, 0]));
	            }
	          }
	        }
	      }u.push(t);
	    }return u;
	  };this.readCertPEM = function (l) {
	    this.readCertHex(e(l));
	  };this.readCertHex = function (l) {
	    this.hex = l;this.getVersion();try {
	      g(this.hex, 0, [0, 7], "a3");this.parseExt();
	    } catch (m) {}
	  };this.getInfo = function () {
	    var m = X509;var B, u, z;B = "Basic Fields\n";B += "  serial number: " + this.getSerialNumberHex() + "\n";B += "  signature algorithm: " + this.getSignatureAlgorithmField() + "\n";B += "  issuer: " + this.getIssuerString() + "\n";B += "  notBefore: " + this.getNotBefore() + "\n";B += "  notAfter: " + this.getNotAfter() + "\n";B += "  subject: " + this.getSubjectString() + "\n";B += "  subject public key info: \n";u = this.getPublicKey();B += "    key algorithm: " + u.type + "\n";if (u.type === "RSA") {
	      B += "    n=" + hextoposhex(u.n.toString(16)).substr(0, 16) + "...\n";B += "    e=" + hextoposhex(u.e.toString(16)) + "\n";
	    }z = this.aExtInfo;if (z !== undefined && z !== null) {
	      B += "X509v3 Extensions:\n";for (var r = 0; r < z.length; r++) {
	        var n = z[r];var A = KJUR.asn1.x509.OID.oid2name(n.oid);if (A === "") {
	          A = n.oid;
	        }var x = "";if (n.critical === true) {
	          x = "CRITICAL";
	        }B += "  " + A + " " + x + ":\n";if (A === "basicConstraints") {
	          var v = this.getExtBasicConstraints();if (v.cA === undefined) {
	            B += "    {}\n";
	          } else {
	            B += "    cA=true";if (v.pathLen !== undefined) {
	              B += ", pathLen=" + v.pathLen;
	            }B += "\n";
	          }
	        } else {
	          if (A === "keyUsage") {
	            B += "    " + this.getExtKeyUsageString() + "\n";
	          } else {
	            if (A === "subjectKeyIdentifier") {
	              B += "    " + this.getExtSubjectKeyIdentifier() + "\n";
	            } else {
	              if (A === "authorityKeyIdentifier") {
	                var l = this.getExtAuthorityKeyIdentifier();if (l.kid !== undefined) {
	                  B += "    kid=" + l.kid + "\n";
	                }
	              } else {
	                if (A === "extKeyUsage") {
	                  var w = this.getExtExtKeyUsageName();B += "    " + w.join(", ") + "\n";
	                } else {
	                  if (A === "subjectAltName") {
	                    var t = this.getExtSubjectAltName2();B += "    " + t + "\n";
	                  } else {
	                    if (A === "cRLDistributionPoints") {
	                      var y = this.getExtCRLDistributionPointsURI();B += "    " + y + "\n";
	                    } else {
	                      if (A === "authorityInfoAccess") {
	                        var p = this.getExtAIAInfo();if (p.ocsp !== undefined) {
	                          B += "    ocsp: " + p.ocsp.join(",") + "\n";
	                        }if (p.caissuer !== undefined) {
	                          B += "    caissuer: " + p.caissuer.join(",") + "\n";
	                        }
	                      } else {
	                        if (A === "certificatePolicies") {
	                          var o = this.getExtCertificatePolicies();for (var q = 0; q < o.length; q++) {
	                            if (o[q].id !== undefined) {
	                              B += "    policy oid: " + o[q].id + "\n";
	                            }if (o[q].cps !== undefined) {
	                              B += "    cps: " + o[q].cps + "\n";
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }B += "signature algorithm: " + this.getSignatureAlgorithmName() + "\n";B += "signature: " + this.getSignatureValueHex().substr(0, 16) + "...\n";return B;
	  };
	}X509.hex2dn = function (f, b) {
	  if (b === undefined) {
	    b = 0;
	  }if (f.substr(b, 2) !== "30") {
	    throw "malformed DN";
	  }var c = new Array();var d = ASN1HEX.getChildIdx(f, b);for (var e = 0; e < d.length; e++) {
	    c.push(X509.hex2rdn(f, d[e]));
	  }c = c.map(function (a) {
	    return a.replace("/", "\\/");
	  });return "/" + c.join("/");
	};X509.hex2rdn = function (f, b) {
	  if (b === undefined) {
	    b = 0;
	  }if (f.substr(b, 2) !== "31") {
	    throw "malformed RDN";
	  }var c = new Array();var d = ASN1HEX.getChildIdx(f, b);for (var e = 0; e < d.length; e++) {
	    c.push(X509.hex2attrTypeValue(f, d[e]));
	  }c = c.map(function (a) {
	    return a.replace("+", "\\+");
	  });return c.join("+");
	};X509.hex2attrTypeValue = function (d, i) {
	  var j = ASN1HEX;var h = j.getV;if (i === undefined) {
	    i = 0;
	  }if (d.substr(i, 2) !== "30") {
	    throw "malformed attribute type and value";
	  }var g = j.getChildIdx(d, i);if (g.length !== 2 || d.substr(g[0], 2) !== "06") {
	    "malformed attribute type and value";
	  }var b = h(d, g[0]);var f = KJUR.asn1.ASN1Util.oidHexToInt(b);var e = KJUR.asn1.x509.OID.oid2atype(f);var a = h(d, g[1]);var c = hextorstr(a);return e + "=" + c;
	};X509.getPublicKeyFromCertHex = function (b) {
	  var a = new X509();a.readCertHex(b);return a.getPublicKey();
	};X509.getPublicKeyFromCertPEM = function (b) {
	  var a = new X509();a.readCertPEM(b);return a.getPublicKey();
	};X509.getPublicKeyInfoPropOfCertPEM = function (c) {
	  var e = ASN1HEX;var g = e.getVbyList;var b = {};var a, f, d;b.algparam = null;a = new X509();a.readCertPEM(c);f = a.getPublicKeyHex();b.keyhex = g(f, 0, [1], "03").substr(2);b.algoid = g(f, 0, [0, 0], "06");if (b.algoid === "2a8648ce3d0201") {
	    b.algparam = g(f, 0, [0, 1], "06");
	  }return b;
	};X509.KEYUSAGE_NAME = ["digitalSignature", "nonRepudiation", "keyEncipherment", "dataEncipherment", "keyAgreement", "keyCertSign", "cRLSign", "encipherOnly", "decipherOnly"];
	if (typeof KJUR == "undefined" || !KJUR) {
	  KJUR = {};
	}if (typeof KJUR.jws == "undefined" || !KJUR.jws) {
	  KJUR.jws = {};
	}KJUR.jws.JWS = function () {
	  var b = KJUR,
	      a = b.jws.JWS,
	      c = a.isSafeJSONString;this.parseJWS = function (g, j) {
	    if (this.parsedJWS !== undefined && (j || this.parsedJWS.sigvalH !== undefined)) {
	      return;
	    }var i = g.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);if (i == null) {
	      throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
	    }var k = i[1];var e = i[2];var l = i[3];var n = k + "." + e;this.parsedJWS = {};this.parsedJWS.headB64U = k;this.parsedJWS.payloadB64U = e;this.parsedJWS.sigvalB64U = l;this.parsedJWS.si = n;if (!j) {
	      var h = b64utohex(l);var f = parseBigInt(h, 16);this.parsedJWS.sigvalH = h;this.parsedJWS.sigvalBI = f;
	    }var d = b64utoutf8(k);var m = b64utoutf8(e);this.parsedJWS.headS = d;this.parsedJWS.payloadS = m;if (!c(d, this.parsedJWS, "headP")) {
	      throw "malformed JSON string for JWS Head: " + d;
	    }
	  };
	};KJUR.jws.JWS.sign = function (i, v, y, z, a) {
	  var w = KJUR,
	      m = w.jws,
	      q = m.JWS,
	      g = q.readSafeJSONString,
	      p = q.isSafeJSONString,
	      d = w.crypto,
	      k = d.ECDSA,
	      o = d.Mac,
	      c = d.Signature,
	      t = JSON;var s, j, n;if (typeof v != "string" && (typeof v === "undefined" ? "undefined" : _typeof(v)) != "object") {
	    throw "spHeader must be JSON string or object: " + v;
	  }if ((typeof v === "undefined" ? "undefined" : _typeof(v)) == "object") {
	    j = v;s = t.stringify(j);
	  }if (typeof v == "string") {
	    s = v;if (!p(s)) {
	      throw "JWS Head is not safe JSON string: " + s;
	    }j = g(s);
	  }n = y;if ((typeof y === "undefined" ? "undefined" : _typeof(y)) == "object") {
	    n = t.stringify(y);
	  }if ((i == "" || i == null) && j.alg !== undefined) {
	    i = j.alg;
	  }if (i != "" && i != null && j.alg === undefined) {
	    j.alg = i;s = t.stringify(j);
	  }if (i !== j.alg) {
	    throw "alg and sHeader.alg doesn't match: " + i + "!=" + j.alg;
	  }var r = null;if (q.jwsalg2sigalg[i] === undefined) {
	    throw "unsupported alg name: " + i;
	  } else {
	    r = q.jwsalg2sigalg[i];
	  }var e = utf8tob64u(s);var l = utf8tob64u(n);var b = e + "." + l;var x = "";if (r.substr(0, 4) == "Hmac") {
	    if (z === undefined) {
	      throw "mac key shall be specified for HS* alg";
	    }var h = new o({ alg: r, prov: "cryptojs", pass: z });h.updateString(b);x = h.doFinal();
	  } else {
	    if (r.indexOf("withECDSA") != -1) {
	      var f = new c({ alg: r });f.init(z, a);f.updateString(b);hASN1Sig = f.sign();x = KJUR.crypto.ECDSA.asn1SigToConcatSig(hASN1Sig);
	    } else {
	      if (r != "none") {
	        var f = new c({ alg: r });f.init(z, a);f.updateString(b);x = f.sign();
	      }
	    }
	  }var u = hextob64u(x);return b + "." + u;
	};KJUR.jws.JWS.verify = function (w, B, n) {
	  var x = KJUR,
	      q = x.jws,
	      t = q.JWS,
	      i = t.readSafeJSONString,
	      e = x.crypto,
	      p = e.ECDSA,
	      s = e.Mac,
	      d = e.Signature,
	      m;if ((typeof RSAKey === "undefined" ? "undefined" : _typeof(RSAKey)) !== undefined) {
	    m = RSAKey;
	  }var y = w.split(".");if (y.length !== 3) {
	    return false;
	  }var f = y[0];var r = y[1];var c = f + "." + r;var A = b64utohex(y[2]);var l = i(b64utoutf8(y[0]));var k = null;var z = null;if (l.alg === undefined) {
	    throw "algorithm not specified in header";
	  } else {
	    k = l.alg;z = k.substr(0, 2);
	  }if (n != null && Object.prototype.toString.call(n) === "[object Array]" && n.length > 0) {
	    var b = ":" + n.join(":") + ":";if (b.indexOf(":" + k + ":") == -1) {
	      throw "algorithm '" + k + "' not accepted in the list";
	    }
	  }if (k != "none" && B === null) {
	    throw "key shall be specified to verify.";
	  }if (typeof B == "string" && B.indexOf("-----BEGIN ") != -1) {
	    B = KEYUTIL.getKey(B);
	  }if (z == "RS" || z == "PS") {
	    if (!(B instanceof m)) {
	      throw "key shall be a RSAKey obj for RS* and PS* algs";
	    }
	  }if (z == "ES") {
	    if (!(B instanceof p)) {
	      throw "key shall be a ECDSA obj for ES* algs";
	    }
	  }if (k == "none") {}var u = null;if (t.jwsalg2sigalg[l.alg] === undefined) {
	    throw "unsupported alg name: " + k;
	  } else {
	    u = t.jwsalg2sigalg[k];
	  }if (u == "none") {
	    throw "not supported";
	  } else {
	    if (u.substr(0, 4) == "Hmac") {
	      var o = null;if (B === undefined) {
	        throw "hexadecimal key shall be specified for HMAC";
	      }var j = new s({ alg: u, pass: B });j.updateString(c);o = j.doFinal();return A == o;
	    } else {
	      if (u.indexOf("withECDSA") != -1) {
	        var h = null;try {
	          h = p.concatSigToASN1Sig(A);
	        } catch (v) {
	          return false;
	        }var g = new d({ alg: u });g.init(B);g.updateString(c);return g.verify(h);
	      } else {
	        var g = new d({ alg: u });g.init(B);g.updateString(c);return g.verify(A);
	      }
	    }
	  }
	};KJUR.jws.JWS.parse = function (g) {
	  var c = g.split(".");var b = {};var f, e, d;if (c.length != 2 && c.length != 3) {
	    throw "malformed sJWS: wrong number of '.' splitted elements";
	  }f = c[0];e = c[1];if (c.length == 3) {
	    d = c[2];
	  }b.headerObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(f));b.payloadObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(e));b.headerPP = JSON.stringify(b.headerObj, null, "  ");if (b.payloadObj == null) {
	    b.payloadPP = b64utoutf8(e);
	  } else {
	    b.payloadPP = JSON.stringify(b.payloadObj, null, "  ");
	  }if (d !== undefined) {
	    b.sigHex = b64utohex(d);
	  }return b;
	};KJUR.jws.JWS.verifyJWT = function (e, l, r) {
	  var d = KJUR,
	      j = d.jws,
	      o = j.JWS,
	      n = o.readSafeJSONString,
	      p = o.inArray,
	      f = o.includedArray;var k = e.split(".");var c = k[0];var i = k[1];var q = c + "." + i;var m = b64utohex(k[2]);var h = n(b64utoutf8(c));var g = n(b64utoutf8(i));if (h.alg === undefined) {
	    return false;
	  }if (r.alg === undefined) {
	    throw "acceptField.alg shall be specified";
	  }if (!p(h.alg, r.alg)) {
	    return false;
	  }if (g.iss !== undefined && _typeof(r.iss) === "object") {
	    if (!p(g.iss, r.iss)) {
	      return false;
	    }
	  }if (g.sub !== undefined && _typeof(r.sub) === "object") {
	    if (!p(g.sub, r.sub)) {
	      return false;
	    }
	  }if (g.aud !== undefined && _typeof(r.aud) === "object") {
	    if (typeof g.aud == "string") {
	      if (!p(g.aud, r.aud)) {
	        return false;
	      }
	    } else {
	      if (_typeof(g.aud) == "object") {
	        if (!f(g.aud, r.aud)) {
	          return false;
	        }
	      }
	    }
	  }var b = j.IntDate.getNow();if (r.verifyAt !== undefined && typeof r.verifyAt === "number") {
	    b = r.verifyAt;
	  }if (r.gracePeriod === undefined || typeof r.gracePeriod !== "number") {
	    r.gracePeriod = 0;
	  }if (g.exp !== undefined && typeof g.exp == "number") {
	    if (g.exp + r.gracePeriod < b) {
	      return false;
	    }
	  }if (g.nbf !== undefined && typeof g.nbf == "number") {
	    if (b < g.nbf - r.gracePeriod) {
	      return false;
	    }
	  }if (g.iat !== undefined && typeof g.iat == "number") {
	    if (b < g.iat - r.gracePeriod) {
	      return false;
	    }
	  }if (g.jti !== undefined && r.jti !== undefined) {
	    if (g.jti !== r.jti) {
	      return false;
	    }
	  }if (!o.verify(e, l, r.alg)) {
	    return false;
	  }return true;
	};KJUR.jws.JWS.includedArray = function (b, a) {
	  var c = KJUR.jws.JWS.inArray;if (b === null) {
	    return false;
	  }if ((typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") {
	    return false;
	  }if (typeof b.length !== "number") {
	    return false;
	  }for (var d = 0; d < b.length; d++) {
	    if (!c(b[d], a)) {
	      return false;
	    }
	  }return true;
	};KJUR.jws.JWS.inArray = function (d, b) {
	  if (b === null) {
	    return false;
	  }if ((typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") {
	    return false;
	  }if (typeof b.length !== "number") {
	    return false;
	  }for (var c = 0; c < b.length; c++) {
	    if (b[c] == d) {
	      return true;
	    }
	  }return false;
	};KJUR.jws.JWS.jwsalg2sigalg = { HS256: "HmacSHA256", HS384: "HmacSHA384", HS512: "HmacSHA512", RS256: "SHA256withRSA", RS384: "SHA384withRSA", RS512: "SHA512withRSA", ES256: "SHA256withECDSA", ES384: "SHA384withECDSA", PS256: "SHA256withRSAandMGF1", PS384: "SHA384withRSAandMGF1", PS512: "SHA512withRSAandMGF1", none: "none" };KJUR.jws.JWS.isSafeJSONString = function (c, b, d) {
	  var e = null;try {
	    e = jsonParse(c);if ((typeof e === "undefined" ? "undefined" : _typeof(e)) != "object") {
	      return 0;
	    }if (e.constructor === Array) {
	      return 0;
	    }if (b) {
	      b[d] = e;
	    }return 1;
	  } catch (a) {
	    return 0;
	  }
	};KJUR.jws.JWS.readSafeJSONString = function (b) {
	  var c = null;try {
	    c = jsonParse(b);if ((typeof c === "undefined" ? "undefined" : _typeof(c)) != "object") {
	      return null;
	    }if (c.constructor === Array) {
	      return null;
	    }return c;
	  } catch (a) {
	    return null;
	  }
	};KJUR.jws.JWS.getEncodedSignatureValueFromJWS = function (b) {
	  var a = b.match(/^[^.]+\.[^.]+\.([^.]+)$/);if (a == null) {
	    throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
	  }return a[1];
	};KJUR.jws.JWS.getJWKthumbprint = function (d) {
	  if (d.kty !== "RSA" && d.kty !== "EC" && d.kty !== "oct") {
	    throw "unsupported algorithm for JWK Thumprint";
	  }var a = "{";if (d.kty === "RSA") {
	    if (typeof d.n != "string" || typeof d.e != "string") {
	      throw "wrong n and e value for RSA key";
	    }a += '"e":"' + d.e + '",';a += '"kty":"' + d.kty + '",';a += '"n":"' + d.n + '"}';
	  } else {
	    if (d.kty === "EC") {
	      if (typeof d.crv != "string" || typeof d.x != "string" || typeof d.y != "string") {
	        throw "wrong crv, x and y value for EC key";
	      }a += '"crv":"' + d.crv + '",';a += '"kty":"' + d.kty + '",';a += '"x":"' + d.x + '",';a += '"y":"' + d.y + '"}';
	    } else {
	      if (d.kty === "oct") {
	        if (typeof d.k != "string") {
	          throw "wrong k value for oct(symmetric) key";
	        }a += '"kty":"' + d.kty + '",';a += '"k":"' + d.k + '"}';
	      }
	    }
	  }var b = rstrtohex(a);var c = KJUR.crypto.Util.hashHex(b, "sha256");var e = hextob64u(c);return e;
	};KJUR.jws.IntDate = {};KJUR.jws.IntDate.get = function (c) {
	  var b = KJUR.jws.IntDate,
	      d = b.getNow,
	      a = b.getZulu;if (c == "now") {
	    return d();
	  } else {
	    if (c == "now + 1hour") {
	      return d() + 60 * 60;
	    } else {
	      if (c == "now + 1day") {
	        return d() + 60 * 60 * 24;
	      } else {
	        if (c == "now + 1month") {
	          return d() + 60 * 60 * 24 * 30;
	        } else {
	          if (c == "now + 1year") {
	            return d() + 60 * 60 * 24 * 365;
	          } else {
	            if (c.match(/Z$/)) {
	              return a(c);
	            } else {
	              if (c.match(/^[0-9]+$/)) {
	                return parseInt(c);
	              }
	            }
	          }
	        }
	      }
	    }
	  }throw "unsupported format: " + c;
	};KJUR.jws.IntDate.getZulu = function (a) {
	  return zulutosec(a);
	};KJUR.jws.IntDate.getNow = function () {
	  var a = ~~(new Date() / 1000);return a;
	};KJUR.jws.IntDate.intDate2UTCString = function (a) {
	  var b = new Date(a * 1000);return b.toUTCString();
	};KJUR.jws.IntDate.intDate2Zulu = function (e) {
	  var i = new Date(e * 1000),
	      h = ("0000" + i.getUTCFullYear()).slice(-4),
	      g = ("00" + (i.getUTCMonth() + 1)).slice(-2),
	      b = ("00" + i.getUTCDate()).slice(-2),
	      a = ("00" + i.getUTCHours()).slice(-2),
	      c = ("00" + i.getUTCMinutes()).slice(-2),
	      f = ("00" + i.getUTCSeconds()).slice(-2);return h + g + b + a + c + f + "Z";
	};
	exports.SecureRandom = SecureRandom;
	exports.rng_seed_time = rng_seed_time;
	
	exports.BigInteger = BigInteger;
	exports.RSAKey = RSAKey;
	exports.ECDSA = KJUR.crypto.ECDSA;
	exports.DSA = KJUR.crypto.DSA;
	exports.Signature = KJUR.crypto.Signature;
	exports.MessageDigest = KJUR.crypto.MessageDigest;
	exports.Mac = KJUR.crypto.Mac;
	exports.Cipher = KJUR.crypto.Cipher;
	exports.KEYUTIL = KEYUTIL;
	exports.ASN1HEX = ASN1HEX;
	exports.X509 = X509;
	exports.CryptoJS = CryptoJS;
	
	// ext/base64.js
	exports.b64tohex = b64tohex;
	exports.b64toBA = b64toBA;
	
	// base64x.js
	exports.stoBA = stoBA;
	exports.BAtos = BAtos;
	exports.BAtohex = BAtohex;
	exports.stohex = stohex;
	exports.stob64 = stob64;
	exports.stob64u = stob64u;
	exports.b64utos = b64utos;
	exports.b64tob64u = b64tob64u;
	exports.b64utob64 = b64utob64;
	exports.hex2b64 = hex2b64;
	exports.hextob64u = hextob64u;
	exports.b64utohex = b64utohex;
	exports.utf8tob64u = utf8tob64u;
	exports.b64utoutf8 = b64utoutf8;
	exports.utf8tob64 = utf8tob64;
	exports.b64toutf8 = b64toutf8;
	exports.utf8tohex = utf8tohex;
	exports.hextoutf8 = hextoutf8;
	exports.hextorstr = hextorstr;
	exports.rstrtohex = rstrtohex;
	exports.hextob64 = hextob64;
	exports.hextob64nl = hextob64nl;
	exports.b64nltohex = b64nltohex;
	exports.hextopem = hextopem;
	exports.pemtohex = pemtohex;
	exports.hextoArrayBuffer = hextoArrayBuffer;
	exports.ArrayBuffertohex = ArrayBuffertohex;
	exports.zulutomsec = zulutomsec;
	exports.zulutosec = zulutosec;
	exports.zulutodate = zulutodate;
	exports.datetozulu = datetozulu;
	exports.uricmptohex = uricmptohex;
	exports.hextouricmp = hextouricmp;
	exports.ipv6tohex = ipv6tohex;
	exports.hextoipv6 = hextoipv6;
	exports.hextoip = hextoip;
	exports.iptohex = iptohex;
	exports.encodeURIComponentAll = encodeURIComponentAll;
	exports.newline_toUnix = newline_toUnix;
	exports.newline_toDos = newline_toDos;
	exports.hextoposhex = hextoposhex;
	exports.intarystrtohex = intarystrtohex;
	exports.strdiffidx = strdiffidx;
	
	// name spaces
	exports.KJUR = KJUR;
	exports.crypto = KJUR.crypto;
	exports.asn1 = KJUR.asn1;
	exports.jws = KJUR.jws;
	exports.lang = KJUR.lang;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13).Buffer))

/***/ }),
/* 13 */
/***/ (function(module, exports) {



/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.SigninRequest = undefined;
	
	var _Log = __webpack_require__(1);
	
	var _UrlUtility = __webpack_require__(15);
	
	var _SigninState = __webpack_require__(16);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SigninRequest = exports.SigninRequest = function () {
	    function SigninRequest(_ref) {
	        var url = _ref.url,
	            client_id = _ref.client_id,
	            redirect_uri = _ref.redirect_uri,
	            response_type = _ref.response_type,
	            scope = _ref.scope,
	            authority = _ref.authority,
	            data = _ref.data,
	            prompt = _ref.prompt,
	            display = _ref.display,
	            max_age = _ref.max_age,
	            ui_locales = _ref.ui_locales,
	            id_token_hint = _ref.id_token_hint,
	            login_hint = _ref.login_hint,
	            acr_values = _ref.acr_values,
	            resource = _ref.resource,
	            request = _ref.request,
	            request_uri = _ref.request_uri,
	            extraQueryParams = _ref.extraQueryParams;
	
	        _classCallCheck(this, SigninRequest);
	
	        if (!url) {
	            _Log.Log.error("SigninRequest.ctor: No url passed");
	            throw new Error("url");
	        }
	        if (!client_id) {
	            _Log.Log.error("SigninRequest.ctor: No client_id passed");
	            throw new Error("client_id");
	        }
	        if (!redirect_uri) {
	            _Log.Log.error("SigninRequest.ctor: No redirect_uri passed");
	            throw new Error("redirect_uri");
	        }
	        if (!response_type) {
	            _Log.Log.error("SigninRequest.ctor: No response_type passed");
	            throw new Error("response_type");
	        }
	        if (!scope) {
	            _Log.Log.error("SigninRequest.ctor: No scope passed");
	            throw new Error("scope");
	        }
	        if (!authority) {
	            _Log.Log.error("SigninRequest.ctor: No authority passed");
	            throw new Error("authority");
	        }
	
	        var oidc = SigninRequest.isOidc(response_type);
	        this.state = new _SigninState.SigninState({ nonce: oidc, data: data, client_id: client_id, authority: authority });
	
	        url = _UrlUtility.UrlUtility.addQueryParam(url, "client_id", client_id);
	        url = _UrlUtility.UrlUtility.addQueryParam(url, "redirect_uri", redirect_uri);
	        url = _UrlUtility.UrlUtility.addQueryParam(url, "response_type", response_type);
	        url = _UrlUtility.UrlUtility.addQueryParam(url, "scope", scope);
	
	        url = _UrlUtility.UrlUtility.addQueryParam(url, "state", this.state.id);
	        if (oidc) {
	            url = _UrlUtility.UrlUtility.addQueryParam(url, "nonce", this.state.nonce);
	        }
	
	        var optional = { prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values, resource: resource, request: request, request_uri: request_uri };
	        for (var key in optional) {
	            if (optional[key]) {
	                url = _UrlUtility.UrlUtility.addQueryParam(url, key, optional[key]);
	            }
	        }
	
	        for (var _key in extraQueryParams) {
	            url = _UrlUtility.UrlUtility.addQueryParam(url, _key, extraQueryParams[_key]);
	        }
	
	        this.url = url;
	    }
	
	    SigninRequest.isOidc = function isOidc(response_type) {
	        var result = response_type.split(/\s+/g).filter(function (item) {
	            return item === "id_token";
	        });
	        return !!result[0];
	    };
	
	    SigninRequest.isOAuth = function isOAuth(response_type) {
	        var result = response_type.split(/\s+/g).filter(function (item) {
	            return item === "token";
	        });
	        return !!result[0];
	    };
	
	    return SigninRequest;
	}();

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.UrlUtility = undefined;
	
	var _Log = __webpack_require__(1);
	
	var _Global = __webpack_require__(5);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var UrlUtility = exports.UrlUtility = function () {
	    function UrlUtility() {
	        _classCallCheck(this, UrlUtility);
	    }
	
	    UrlUtility.addQueryParam = function addQueryParam(url, name, value) {
	        if (url.indexOf('?') < 0) {
	            url += "?";
	        }
	
	        if (url[url.length - 1] !== "?") {
	            url += "&";
	        }
	
	        url += encodeURIComponent(name);
	        url += "=";
	        url += encodeURIComponent(value);
	
	        return url;
	    };
	
	    UrlUtility.parseUrlFragment = function parseUrlFragment(value) {
	        var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#";
	        var global = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Global.Global;
	
	        if (typeof value !== 'string') {
	            value = global.location.href;
	        }
	
	        var idx = value.lastIndexOf(delimiter);
	        if (idx >= 0) {
	            value = value.substr(idx + 1);
	        }
	
	        var params = {},
	            regex = /([^&=]+)=([^&]*)/g,
	            m;
	
	        var counter = 0;
	        while (m = regex.exec(value)) {
	            params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
	            if (counter++ > 50) {
	                _Log.Log.error("UrlUtility.parseUrlFragment: response exceeded expected number of parameters", value);
	                return {
	                    error: "Response exceeded expected number of parameters"
	                };
	            }
	        }
	
	        for (var prop in params) {
	            return params;
	        }
	
	        return {};
	    };
	
	    return UrlUtility;
	}();

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.SigninState = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Log = __webpack_require__(1);
	
	var _State2 = __webpack_require__(17);
	
	var _random = __webpack_require__(18);
	
	var _random2 = _interopRequireDefault(_random);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SigninState = exports.SigninState = function (_State) {
	    _inherits(SigninState, _State);
	
	    function SigninState() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            nonce = _ref.nonce,
	            authority = _ref.authority,
	            client_id = _ref.client_id;
	
	        _classCallCheck(this, SigninState);
	
	        var _this = _possibleConstructorReturn(this, _State.call(this, arguments[0]));
	
	        if (nonce === true) {
	            _this._nonce = (0, _random2.default)();
	        } else if (nonce) {
	            _this._nonce = nonce;
	        }
	
	        _this._authority = authority;
	        _this._client_id = client_id;
	        return _this;
	    }
	
	    SigninState.prototype.toStorageString = function toStorageString() {
	        _Log.Log.debug("SigninState.toStorageString");
	        return JSON.stringify({
	            id: this.id,
	            data: this.data,
	            created: this.created,
	            nonce: this.nonce,
	            authority: this.authority,
	            client_id: this.client_id
	        });
	    };
	
	    SigninState.fromStorageString = function fromStorageString(storageString) {
	        _Log.Log.debug("SigninState.fromStorageString");
	        var data = JSON.parse(storageString);
	        return new SigninState(data);
	    };
	
	    _createClass(SigninState, [{
	        key: 'nonce',
	        get: function get() {
	            return this._nonce;
	        }
	    }, {
	        key: 'authority',
	        get: function get() {
	            return this._authority;
	        }
	    }, {
	        key: 'client_id',
	        get: function get() {
	            return this._client_id;
	        }
	    }]);
	
	    return SigninState;
	}(_State2.State);

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.State = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _random = __webpack_require__(18);
	
	var _random2 = _interopRequireDefault(_random);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var State = exports.State = function () {
	    function State() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            id = _ref.id,
	            data = _ref.data,
	            created = _ref.created;
	
	        _classCallCheck(this, State);
	
	        this._id = id || (0, _random2.default)();
	        this._data = data;
	
	        if (typeof created === 'number' && created > 0) {
	            this._created = created;
	        } else {
	            this._created = parseInt(Date.now() / 1000);
	        }
	    }
	
	    State.prototype.toStorageString = function toStorageString() {
	        _Log.Log.debug("State.toStorageString");
	        return JSON.stringify({
	            id: this.id,
	            data: this.data,
	            created: this.created
	        });
	    };
	
	    State.fromStorageString = function fromStorageString(storageString) {
	        _Log.Log.debug("State.fromStorageString");
	        return new State(JSON.parse(storageString));
	    };
	
	    State.clearStaleState = function clearStaleState(storage, age) {
	
	        var cutoff = Date.now() / 1000 - age;
	
	        return storage.getAllKeys().then(function (keys) {
	            _Log.Log.debug("State.clearStaleState: got keys", keys);
	
	            var promises = [];
	
	            var _loop = function _loop(i) {
	                var key = keys[i];
	                p = storage.get(key).then(function (item) {
	                    var remove = false;
	
	                    if (item) {
	                        try {
	                            var state = State.fromStorageString(item);
	
	                            _Log.Log.debug("State.clearStaleState: got item from key: ", key, state.created);
	
	                            if (state.created <= cutoff) {
	                                remove = true;
	                            }
	                        } catch (e) {
	                            _Log.Log.error("State.clearStaleState: Error parsing state for key", key, e.message);
	                            remove = true;
	                        }
	                    } else {
	                        _Log.Log.debug("State.clearStaleState: no item in storage for key: ", key);
	                        remove = true;
	                    }
	
	                    if (remove) {
	                        _Log.Log.debug("State.clearStaleState: removed item for key: ", key);
	                        return storage.remove(key);
	                    }
	                });
	
	
	                promises.push(p);
	            };
	
	            for (var i = 0; i < keys.length; i++) {
	                var p;
	
	                _loop(i);
	            }
	
	            _Log.Log.debug("State.clearStaleState: waiting on promise count:", promises.length);
	            return Promise.all(promises);
	        });
	    };
	
	    _createClass(State, [{
	        key: 'id',
	        get: function get() {
	            return this._id;
	        }
	    }, {
	        key: 'data',
	        get: function get() {
	            return this._data;
	        }
	    }, {
	        key: 'created',
	        get: function get() {
	            return this._created;
	        }
	    }]);

	    return State;
	}();

/***/ }),
/* 18 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = random;
	// NOTICE: the code in this file originally developed by Microsoft
	// original source: https://github.com/AzureAD/azure-activedirectory-library-for-js/blob/master/lib/adal.js#L1029
	//----------------------------------------------------------------------
	// AdalJS v1.0.8
	// @preserve Copyright (c) Microsoft Open Technologies, Inc.
	// All Rights Reserved
	// Apache License 2.0
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	//----------------------------------------------------------------------
	
	function random() {
	    var guidHolder = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx';
	    var hex = '0123456789abcdef';
	    var r = 0;
	    var guidResponse = "";
	    for (var i = 0; i < guidHolder.length; i++) {
	        if (guidHolder[i] !== '-' && guidHolder[i] !== '4') {
	            // each x and y needs to be random
	            r = Math.random() * 16 | 0;
	        }
	
	        if (guidHolder[i] === 'x') {
	            guidResponse += hex[r];
	        } else if (guidHolder[i] === 'y') {
	            // clock-seq-and-reserved first hex is filtered and remaining hex values are random
	            r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??
	            r |= 0x8; // set pos 3 to 1 as 1???
	            guidResponse += hex[r];
	        } else {
	            guidResponse += guidHolder[i];
	        }
	    }
	    return guidResponse;
	}
	module.exports = exports['default'];

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.SigninResponse = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _UrlUtility = __webpack_require__(15);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var OidcScope = "openid";
	
	var SigninResponse = exports.SigninResponse = function () {
	    function SigninResponse(url) {
	        _classCallCheck(this, SigninResponse);
	
	        var values = _UrlUtility.UrlUtility.parseUrlFragment(url, "#");
	
	        this.error = values.error;
	        this.error_description = values.error_description;
	        this.error_uri = values.error_uri;
	
	        this.state = values.state;
	        this.id_token = values.id_token;
	        this.session_state = values.session_state;
	        this.access_token = values.access_token;
	        this.token_type = values.token_type;
	        this.scope = values.scope;
	        this.profile = undefined; // will be set from ResponseValidator
	
	        var expires_in = parseInt(values.expires_in);
	        if (typeof expires_in === 'number' && expires_in > 0) {
	            var now = parseInt(Date.now() / 1000);
	            this.expires_at = now + expires_in;
	        }
	    }
	
	    _createClass(SigninResponse, [{
	        key: "expires_in",
	        get: function get() {
	            if (this.expires_at) {
	                var now = parseInt(Date.now() / 1000);
	                return this.expires_at - now;
	            }
	            return undefined;
	        }
	    }, {
	        key: "expired",
	        get: function get() {
	            var expires_in = this.expires_in;
	            if (expires_in !== undefined) {
	                return expires_in <= 0;
	            }
	            return undefined;
	        }
	    }, {
	        key: "scopes",
	        get: function get() {
	            return (this.scope || "").split(" ");
	        }
	    }, {
	        key: "isOpenIdConnect",
	        get: function get() {
	            return this.scopes.indexOf(OidcScope) >= 0 || !!this.id_token;
	        }
	    }]);

	    return SigninResponse;
	}();

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.SignoutRequest = undefined;
	
	var _Log = __webpack_require__(1);
	
	var _UrlUtility = __webpack_require__(15);
	
	var _State = __webpack_require__(17);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SignoutRequest = exports.SignoutRequest = function SignoutRequest(_ref) {
	    var url = _ref.url,
	        id_token_hint = _ref.id_token_hint,
	        post_logout_redirect_uri = _ref.post_logout_redirect_uri,
	        data = _ref.data;
	
	    _classCallCheck(this, SignoutRequest);
	
	    if (!url) {
	        _Log.Log.error("SignoutRequest.ctor: No url passed");
	        throw new Error("url");
	    }
	
	    if (id_token_hint) {
	        url = _UrlUtility.UrlUtility.addQueryParam(url, "id_token_hint", id_token_hint);
	    }
	
	    if (post_logout_redirect_uri) {
	        url = _UrlUtility.UrlUtility.addQueryParam(url, "post_logout_redirect_uri", post_logout_redirect_uri);
	
	        if (data) {
	            this.state = new _State.State({ data: data });
	
	            url = _UrlUtility.UrlUtility.addQueryParam(url, "state", this.state.id);
	        }
	    }
	
	    this.url = url;
	};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	        value: true
	});
	exports.SignoutResponse = undefined;
	
	var _UrlUtility = __webpack_require__(15);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SignoutResponse = exports.SignoutResponse = function SignoutResponse(url) {
	        _classCallCheck(this, SignoutResponse);
	
	        var values = _UrlUtility.UrlUtility.parseUrlFragment(url, "?");
	
	        this.error = values.error;
	        this.error_description = values.error_description;
	        this.error_uri = values.error_uri;
	
	        this.state = values.state;
	};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.InMemoryWebStorage = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var InMemoryWebStorage = exports.InMemoryWebStorage = function () {
	    function InMemoryWebStorage() {
	        _classCallCheck(this, InMemoryWebStorage);
	
	        this._data = {};
	    }
	
	    InMemoryWebStorage.prototype.getItem = function getItem(key) {
	        _Log.Log.debug("InMemoryWebStorage.getItem", key);
	        return this._data[key];
	    };
	
	    InMemoryWebStorage.prototype.setItem = function setItem(key, value) {
	        _Log.Log.debug("InMemoryWebStorage.setItem", key);
	        this._data[key] = value;
	    };
	
	    InMemoryWebStorage.prototype.removeItem = function removeItem(key) {
	        _Log.Log.debug("InMemoryWebStorage.removeItem", key);
	        delete this._data[key];
	    };
	
	    InMemoryWebStorage.prototype.key = function key(index) {
	        return Object.getOwnPropertyNames(this._data)[index];
	    };
	
	    _createClass(InMemoryWebStorage, [{
	        key: "length",
	        get: function get() {
	            return Object.getOwnPropertyNames(this._data).length;
	        }
	    }]);

	    return InMemoryWebStorage;
	}();

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.UserManager = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Log = __webpack_require__(1);
	
	var _OidcClient2 = __webpack_require__(2);
	
	var _UserManagerSettings = __webpack_require__(24);
	
	var _User = __webpack_require__(30);
	
	var _UserManagerEvents = __webpack_require__(31);
	
	var _SilentRenewService = __webpack_require__(35);
	
	var _SessionMonitor = __webpack_require__(36);
	
	var _TokenRevocationClient = __webpack_require__(38);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var UserManager = exports.UserManager = function (_OidcClient) {
	    _inherits(UserManager, _OidcClient);
	
	    function UserManager() {
	        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        var SilentRenewServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _SilentRenewService.SilentRenewService;
	        var SessionMonitorCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _SessionMonitor.SessionMonitor;
	        var TokenRevocationClientCtor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _TokenRevocationClient.TokenRevocationClient;
	
	        _classCallCheck(this, UserManager);
	
	        if (!(settings instanceof _UserManagerSettings.UserManagerSettings)) {
	            settings = new _UserManagerSettings.UserManagerSettings(settings);
	        }
	
	        var _this = _possibleConstructorReturn(this, _OidcClient.call(this, settings));
	
	        _this._events = new _UserManagerEvents.UserManagerEvents(settings);
	        _this._silentRenewService = new SilentRenewServiceCtor(_this);
	
	        // order is important for the following properties; these services depend upon the events.
	        if (_this.settings.automaticSilentRenew) {
	            _Log.Log.debug("UserManager.ctor: automaticSilentRenew is configured, setting up silent renew");
	            _this.startSilentRenew();
	        }
	
	        if (_this.settings.monitorSession) {
	            _Log.Log.debug("UserManager.ctor: monitorSession is configured, setting up session monitor");
	            _this._sessionMonitor = new SessionMonitorCtor(_this);
	        }
	
	        _this._tokenRevocationClient = new TokenRevocationClientCtor(_this._settings);
	        return _this;
	    }
	
	    UserManager.prototype.getUser = function getUser() {
	        var _this2 = this;
	
	        return this._loadUser().then(function (user) {
	            if (user) {
	                _Log.Log.info("UserManager.getUser: user loaded");
	
	                _this2._events.load(user, false);
	
	                return user;
	            } else {
	                _Log.Log.info("UserManager.getUser: user not found in storage");
	                return null;
	            }
	        });
	    };
	
	    UserManager.prototype.removeUser = function removeUser() {
	        var _this3 = this;
	
	        return this.storeUser(null).then(function () {
	            _Log.Log.info("UserManager.removeUser: user removed from storage");
	            _this3._events.unload();
	        });
	    };
	
	    UserManager.prototype.signinRedirect = function signinRedirect(args) {
	        return this._signinStart(args, this._redirectNavigator).then(function () {
	            _Log.Log.info("UserManager.signinRedirect: successful");
	        });
	    };
	
	    UserManager.prototype.signinRedirectCallback = function signinRedirectCallback(url) {
	        return this._signinEnd(url || this._redirectNavigator.url).then(function (user) {
	            if (user) {
	                if (user.profile && user.profile.sub) {
	                    _Log.Log.info("UserManager.signinRedirectCallback: successful, signed in sub: ", user.profile.sub);
	                } else {
	                    _Log.Log.info("UserManager.signinRedirectCallback: no sub");
	                }
	            }
	
	            return user;
	        });
	    };
	
	    UserManager.prototype.signinPopup = function signinPopup() {
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var url = args.redirect_uri || this.settings.popup_redirect_uri || this.settings.redirect_uri;
	        if (!url) {
	            _Log.Log.error("UserManager.signinPopup: No popup_redirect_uri or redirect_uri configured");
	            return Promise.reject(new Error("No popup_redirect_uri or redirect_uri configured"));
	        }
	
	        args.redirect_uri = url;
	        args.display = "popup";
	
	        return this._signin(args, this._popupNavigator, {
	            startUrl: url,
	            popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,
	            popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget
	        }).then(function (user) {
	            if (user) {
	                if (user.profile && user.profile.sub) {
	                    _Log.Log.info("UserManager.signinPopup: signinPopup successful, signed in sub: ", user.profile.sub);
	                } else {
	                    _Log.Log.info("UserManager.signinPopup: no sub");
	                }
	            }
	
	            return user;
	        });
	    };
	
	    UserManager.prototype.signinPopupCallback = function signinPopupCallback(url) {
	        return this._signinCallback(url, this._popupNavigator).then(function (user) {
	            if (user) {
	                if (user.profile && user.profile.sub) {
	                    _Log.Log.info("UserManager.signinPopupCallback: successful, signed in sub: ", user.profile.sub);
	                } else {
	                    _Log.Log.info("UserManager.signinPopupCallback: no sub");
	                }
	            }
	
	            return user;
	        }).catch(function (err) {
	            _Log.Log.error("UserManager.signinPopupCallback error: " + err && err.message);
	        });
	    };
	
	    UserManager.prototype.signinSilent = function signinSilent() {
	        var _this4 = this;
	
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var url = args.redirect_uri || this.settings.silent_redirect_uri;
	        if (!url) {
	            _Log.Log.error("UserManager.signinSilent: No silent_redirect_uri configured");
	            return Promise.reject(new Error("No silent_redirect_uri configured"));
	        }
	
	        args.redirect_uri = url;
	        args.prompt = "none";
	
	        var setIdToken = void 0;
	        if (args.id_token_hint || !this.settings.includeIdTokenInSilentRenew) {
	            setIdToken = Promise.resolve();
	        } else {
	            setIdToken = this._loadUser().then(function (user) {
	                args.id_token_hint = user && user.id_token;
	            });
	        }
	
	        return setIdToken.then(function () {
	            return _this4._signin(args, _this4._iframeNavigator, {
	                startUrl: url,
	                silentRequestTimeout: args.silentRequestTimeout || _this4.settings.silentRequestTimeout
	            });
	        }).then(function (user) {
	            if (user) {
	                if (user.profile && user.profile.sub) {
	                    _Log.Log.info("UserManager.signinSilent: successful, signed in sub: ", user.profile.sub);
	                } else {
	                    _Log.Log.info("UserManager.signinSilent: no sub");
	                }
	            }
	
	            return user;
	        });
	    };
	
	    UserManager.prototype.signinSilentCallback = function signinSilentCallback(url) {
	        return this._signinCallback(url, this._iframeNavigator).then(function (user) {
	            if (user) {
	                if (user.profile && user.profile.sub) {
	                    _Log.Log.info("UserManager.signinSilentCallback: successful, signed in sub: ", user.profile.sub);
	                } else {
	                    _Log.Log.info("UserManager.signinSilentCallback: no sub");
	                }
	            }
	
	            return user;
	        });
	    };
	
	    UserManager.prototype.querySessionStatus = function querySessionStatus() {
	        var _this5 = this;
	
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var url = args.redirect_uri || this.settings.silent_redirect_uri;
	        if (!url) {
	            _Log.Log.error("UserManager.querySessionStatus: No silent_redirect_uri configured");
	            return Promise.reject(new Error("No silent_redirect_uri configured"));
	        }
	
	        args.redirect_uri = url;
	        args.prompt = "none";
	        args.response_type = "id_token";
	        args.scope = "openid";
	
	        return this._signinStart(args, this._iframeNavigator, {
	            startUrl: url,
	            silentRequestTimeout: args.silentRequestTimeout || this.settings.silentRequestTimeout
	        }).then(function (navResponse) {
	            return _this5.processSigninResponse(navResponse.url).then(function (signinResponse) {
	                _Log.Log.debug("UserManager.querySessionStatus: got signin response");
	
	                if (signinResponse.session_state && signinResponse.profile.sub && signinResponse.profile.sid) {
	                    _Log.Log.info("UserManager.querySessionStatus: querySessionStatus success for sub: ", signinResponse.profile.sub);
	                    return {
	                        session_state: signinResponse.session_state,
	                        sub: signinResponse.profile.sub,
	                        sid: signinResponse.profile.sid
	                    };
	                } else {
	                    _Log.Log.info("querySessionStatus successful, user not authenticated");
	                }
	            });
	        });
	    };
	
	    UserManager.prototype._signin = function _signin(args, navigator) {
	        var _this6 = this;
	
	        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        return this._signinStart(args, navigator, navigatorParams).then(function (navResponse) {
	            return _this6._signinEnd(navResponse.url);
	        });
	    };
	
	    UserManager.prototype._signinStart = function _signinStart(args, navigator) {
	        var _this7 = this;
	
	        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	
	        return navigator.prepare(navigatorParams).then(function (handle) {
	            _Log.Log.debug("UserManager._signinStart: got navigator window handle");
	
	            return _this7.createSigninRequest(args).then(function (signinRequest) {
	                _Log.Log.debug("UserManager._signinStart: got signin request");
	
	                navigatorParams.url = signinRequest.url;
	                navigatorParams.id = signinRequest.state.id;
	
	                return handle.navigate(navigatorParams);
	            }).catch(function (err) {
	                if (handle.close) {
	                    _Log.Log.debug("UserManager._signinStart: Error after preparing navigator, closing navigator window");
	                    handle.close();
	                }
	                throw err;
	            });
	        });
	    };
	
	    UserManager.prototype._signinEnd = function _signinEnd(url) {
	        var _this8 = this;
	
	        return this.processSigninResponse(url).then(function (signinResponse) {
	            _Log.Log.debug("UserManager._signinEnd: got signin response");
	
	            var user = new _User.User(signinResponse);
	
	            return _this8.storeUser(user).then(function () {
	                _Log.Log.debug("UserManager._signinEnd: user stored");
	
	                _this8._events.load(user);
	
	                return user;
	            });
	        });
	    };
	
	    UserManager.prototype._signinCallback = function _signinCallback(url, navigator) {
	        _Log.Log.debug("UserManager._signinCallback");
	        return navigator.callback(url);
	    };
	
	    UserManager.prototype.signoutRedirect = function signoutRedirect() {
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var postLogoutRedirectUri = args.post_logout_redirect_uri || this.settings.post_logout_redirect_uri;
	        if (postLogoutRedirectUri) {
	            args.post_logout_redirect_uri = postLogoutRedirectUri;
	        }
	        return this._signoutStart(args, this._redirectNavigator).then(function () {
	            _Log.Log.info("UserManager.signoutRedirect: successful");
	        });
	    };
	
	    UserManager.prototype.signoutRedirectCallback = function signoutRedirectCallback(url) {
	        return this._signoutEnd(url || this._redirectNavigator.url).then(function (response) {
	            _Log.Log.info("UserManager.signoutRedirectCallback: successful");
	            return response;
	        });
	    };
	
	    UserManager.prototype.signoutPopup = function signoutPopup() {
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var url = args.post_logout_redirect_uri || this.settings.popup_post_logout_redirect_uri || this.settings.post_logout_redirect_uri;
	        args.post_logout_redirect_uri = url;
	        args.display = "popup";
	        if (args.post_logout_redirect_uri) {
	            // we're putting a dummy entry in here because we
	            // need a unique id from the state for notification
	            // to the parent window, which is necessary if we
	            // plan to return back to the client after signout
	            // and so we can close the popup after signout
	            args.state = args.state || {};
	        }
	
	        return this._signout(args, this._popupNavigator, {
	            startUrl: url,
	            popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,
	            popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget
	        }).then(function () {
	            _Log.Log.info("UserManager.signinPopup: successful");
	        });
	    };
	
	    UserManager.prototype.signoutPopupCallback = function signoutPopupCallback(url, keepOpen) {
	        if (typeof keepOpen === 'undefined' && typeof url === 'boolean') {
	            url = null;
	            keepOpen = true;
	        }
	
	        var delimiter = '?';
	        return this._popupNavigator.callback(url, keepOpen, delimiter).then(function () {
	            _Log.Log.info("UserManager.signoutPopupCallback: successful");
	        });
	    };
	
	    UserManager.prototype._signout = function _signout(args, navigator) {
	        var _this9 = this;
	
	        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        return this._signoutStart(args, navigator, navigatorParams).then(function (navResponse) {
	            return _this9._signoutEnd(navResponse.url);
	        });
	    };
	
	    UserManager.prototype._signoutStart = function _signoutStart() {
	        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	        var _this10 = this;
	
	        var navigator = arguments[1];
	        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	        return navigator.prepare(navigatorParams).then(function (handle) {
	            _Log.Log.debug("UserManager._signoutStart: got navigator window handle");
	
	            return _this10._loadUser().then(function (user) {
	                _Log.Log.debug("UserManager._signoutStart: loaded current user from storage");
	
	                var revokePromise = _this10._settings.revokeAccessTokenOnSignout ? _this10._revokeInternal(user) : Promise.resolve();
	                return revokePromise.then(function () {
	
	                    var id_token = args.id_token_hint || user && user.id_token;
	                    if (id_token) {
	                        _Log.Log.debug("UserManager._signoutStart: Setting id_token into signout request");
	                        args.id_token_hint = id_token;
	                    }
	
	                    return _this10.removeUser().then(function () {
	                        _Log.Log.debug("UserManager._signoutStart: user removed, creating signout request");
	
	                        return _this10.createSignoutRequest(args).then(function (signoutRequest) {
	                            _Log.Log.debug("UserManager._signoutStart: got signout request");
	
	                            navigatorParams.url = signoutRequest.url;
	                            if (signoutRequest.state) {
	                                navigatorParams.id = signoutRequest.state.id;
	                            }
	                            return handle.navigate(navigatorParams);
	                        });
	                    });
	                });
	            }).catch(function (err) {
	                if (handle.close) {
	                    _Log.Log.debug("UserManager._signoutStart: Error after preparing navigator, closing navigator window");
	                    handle.close();
	                }
	                throw err;
	            });
	        });
	    };
	
	    UserManager.prototype._signoutEnd = function _signoutEnd(url) {
	        return this.processSignoutResponse(url).then(function (signoutResponse) {
	            _Log.Log.debug("UserManager._signoutEnd: got signout response");
	
	            return signoutResponse;
	        });
	    };
	
	    UserManager.prototype.revokeAccessToken = function revokeAccessToken() {
	        var _this11 = this;
	
	        return this._loadUser().then(function (user) {
	            return _this11._revokeInternal(user, true).then(function (success) {
	                if (success) {
	                    _Log.Log.debug("UserManager.revokeAccessToken: removing token properties from user and re-storing");
	
	                    user.access_token = null;
	                    user.expires_at = null;
	                    user.token_type = null;
	
	                    return _this11.storeUser(user).then(function () {
	                        _Log.Log.debug("UserManager.revokeAccessToken: user stored");
	                        _this11._events.load(user);
	                    });
	                }
	            });
	        }).then(function () {
	            _Log.Log.info("UserManager.revokeAccessToken: access token revoked successfully");
	        });
	    };
	
	    UserManager.prototype._revokeInternal = function _revokeInternal(user, required) {
	        var access_token = user && user.access_token;
	
	        // check for JWT vs. reference token
	        if (!access_token || access_token.indexOf('.') >= 0) {
	            _Log.Log.debug("UserManager.revokeAccessToken: no need to revoke due to no user, token, or JWT format");
	            return Promise.resolve(false);
	        }
	
	        return this._tokenRevocationClient.revoke(access_token, required).then(function () {
	            return true;
	        });
	    };
	
	    UserManager.prototype.startSilentRenew = function startSilentRenew() {
	        this._silentRenewService.start();
	    };
	
	    UserManager.prototype.stopSilentRenew = function stopSilentRenew() {
	        this._silentRenewService.stop();
	    };
	
	    UserManager.prototype._loadUser = function _loadUser() {
	        return this._userStore.get(this._userStoreKey).then(function (storageString) {
	            if (storageString) {
	                _Log.Log.debug("UserManager._loadUser: user storageString loaded");
	                return _User.User.fromStorageString(storageString);
	            }
	
	            _Log.Log.debug("UserManager._loadUser: no user storageString");
	            return null;
	        });
	    };
	
	    UserManager.prototype.storeUser = function storeUser(user) {
	        if (user) {
	            _Log.Log.debug("UserManager.storeUser: storing user");
	
	            var storageString = user.toStorageString();
	            return this._userStore.set(this._userStoreKey, storageString);
	        } else {
	            _Log.Log.debug("storeUser.storeUser: removing user");
	            return this._userStore.remove(this._userStoreKey);
	        }
	    };
	
	    _createClass(UserManager, [{
	        key: '_redirectNavigator',
	        get: function get() {
	            return this.settings.redirectNavigator;
	        }
	    }, {
	        key: '_popupNavigator',
	        get: function get() {
	            return this.settings.popupNavigator;
	        }
	    }, {
	        key: '_iframeNavigator',
	        get: function get() {
	            return this.settings.iframeNavigator;
	        }
	    }, {
	        key: '_userStore',
	        get: function get() {
	            return this.settings.userStore;
	        }
	    }, {
	        key: 'events',
	        get: function get() {
	            return this._events;
	        }
	    }, {
	        key: '_userStoreKey',
	        get: function get() {
	            return 'user:' + this.settings.authority + ':' + this.settings.client_id;
	        }
	    }]);
	
	    return UserManager;
	}(_OidcClient2.OidcClient);

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.UserManagerSettings = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Log = __webpack_require__(1);
	
	var _OidcClientSettings2 = __webpack_require__(3);
	
	var _RedirectNavigator = __webpack_require__(25);
	
	var _PopupNavigator = __webpack_require__(26);
	
	var _IFrameNavigator = __webpack_require__(28);
	
	var _WebStorageStateStore = __webpack_require__(4);
	
	var _Global = __webpack_require__(5);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var DefaultAccessTokenExpiringNotificationTime = 60;
	var DefaultCheckSessionInterval = 2000;
	
	var UserManagerSettings = exports.UserManagerSettings = function (_OidcClientSettings) {
	    _inherits(UserManagerSettings, _OidcClientSettings);
	
	    function UserManagerSettings() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            popup_redirect_uri = _ref.popup_redirect_uri,
	            popup_post_logout_redirect_uri = _ref.popup_post_logout_redirect_uri,
	            popupWindowFeatures = _ref.popupWindowFeatures,
	            popupWindowTarget = _ref.popupWindowTarget,
	            silent_redirect_uri = _ref.silent_redirect_uri,
	            silentRequestTimeout = _ref.silentRequestTimeout,
	            _ref$automaticSilentR = _ref.automaticSilentRenew,
	            automaticSilentRenew = _ref$automaticSilentR === undefined ? false : _ref$automaticSilentR,
	            _ref$includeIdTokenIn = _ref.includeIdTokenInSilentRenew,
	            includeIdTokenInSilentRenew = _ref$includeIdTokenIn === undefined ? true : _ref$includeIdTokenIn,
	            _ref$monitorSession = _ref.monitorSession,
	            monitorSession = _ref$monitorSession === undefined ? true : _ref$monitorSession,
	            _ref$checkSessionInte = _ref.checkSessionInterval,
	            checkSessionInterval = _ref$checkSessionInte === undefined ? DefaultCheckSessionInterval : _ref$checkSessionInte,
	            _ref$stopCheckSession = _ref.stopCheckSessionOnError,
	            stopCheckSessionOnError = _ref$stopCheckSession === undefined ? true : _ref$stopCheckSession,
	            _ref$revokeAccessToke = _ref.revokeAccessTokenOnSignout,
	            revokeAccessTokenOnSignout = _ref$revokeAccessToke === undefined ? false : _ref$revokeAccessToke,
	            _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime,
	            accessTokenExpiringNotificationTime = _ref$accessTokenExpir === undefined ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir,
	            _ref$redirectNavigato = _ref.redirectNavigator,
	            redirectNavigator = _ref$redirectNavigato === undefined ? new _RedirectNavigator.RedirectNavigator() : _ref$redirectNavigato,
	            _ref$popupNavigator = _ref.popupNavigator,
	            popupNavigator = _ref$popupNavigator === undefined ? new _PopupNavigator.PopupNavigator() : _ref$popupNavigator,
	            _ref$iframeNavigator = _ref.iframeNavigator,
	            iframeNavigator = _ref$iframeNavigator === undefined ? new _IFrameNavigator.IFrameNavigator() : _ref$iframeNavigator,
	            _ref$userStore = _ref.userStore,
	            userStore = _ref$userStore === undefined ? new _WebStorageStateStore.WebStorageStateStore({ store: _Global.Global.sessionStorage }) : _ref$userStore;
	
	        _classCallCheck(this, UserManagerSettings);
	
	        var _this = _possibleConstructorReturn(this, _OidcClientSettings.call(this, arguments[0]));
	
	        _this._popup_redirect_uri = popup_redirect_uri;
	        _this._popup_post_logout_redirect_uri = popup_post_logout_redirect_uri;
	        _this._popupWindowFeatures = popupWindowFeatures;
	        _this._popupWindowTarget = popupWindowTarget;
	
	        _this._silent_redirect_uri = silent_redirect_uri;
	        _this._silentRequestTimeout = silentRequestTimeout;
	        _this._automaticSilentRenew = !!automaticSilentRenew;
	        _this._includeIdTokenInSilentRenew = includeIdTokenInSilentRenew;
	        _this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;
	
	        _this._monitorSession = monitorSession;
	        _this._checkSessionInterval = checkSessionInterval;
	        _this._stopCheckSessionOnError = stopCheckSessionOnError;
	        _this._revokeAccessTokenOnSignout = revokeAccessTokenOnSignout;
	
	        _this._redirectNavigator = redirectNavigator;
	        _this._popupNavigator = popupNavigator;
	        _this._iframeNavigator = iframeNavigator;
	
	        _this._userStore = userStore;
	        return _this;
	    }
	
	    _createClass(UserManagerSettings, [{
	        key: 'popup_redirect_uri',
	        get: function get() {
	            return this._popup_redirect_uri;
	        }
	    }, {
	        key: 'popup_post_logout_redirect_uri',
	        get: function get() {
	            return this._popup_post_logout_redirect_uri;
	        }
	    }, {
	        key: 'popupWindowFeatures',
	        get: function get() {
	            return this._popupWindowFeatures;
	        }
	    }, {
	        key: 'popupWindowTarget',
	        get: function get() {
	            return this._popupWindowTarget;
	        }
	    }, {
	        key: 'silent_redirect_uri',
	        get: function get() {
	            return this._silent_redirect_uri;
	        }
	    }, {
	        key: 'silentRequestTimeout',
	        get: function get() {
	            return this._silentRequestTimeout;
	        }
	    }, {
	        key: 'automaticSilentRenew',
	        get: function get() {
	            return !!(this.silent_redirect_uri && this._automaticSilentRenew);
	        }
	    }, {
	        key: 'includeIdTokenInSilentRenew',
	        get: function get() {
	            return this._includeIdTokenInSilentRenew;
	        }
	    }, {
	        key: 'accessTokenExpiringNotificationTime',
	        get: function get() {
	            return this._accessTokenExpiringNotificationTime;
	        }
	    }, {
	        key: 'monitorSession',
	        get: function get() {
	            return this._monitorSession;
	        }
	    }, {
	        key: 'checkSessionInterval',
	        get: function get() {
	            return this._checkSessionInterval;
	        }
	    }, {
	        key: 'stopCheckSessionOnError',
	        get: function get() {
	            return this._stopCheckSessionOnError;
	        }
	    }, {
	        key: 'revokeAccessTokenOnSignout',
	        get: function get() {
	            return this._revokeAccessTokenOnSignout;
	        }
	    }, {
	        key: 'redirectNavigator',
	        get: function get() {
	            return this._redirectNavigator;
	        }
	    }, {
	        key: 'popupNavigator',
	        get: function get() {
	            return this._popupNavigator;
	        }
	    }, {
	        key: 'iframeNavigator',
	        get: function get() {
	            return this._iframeNavigator;
	        }
	    }, {
	        key: 'userStore',
	        get: function get() {
	            return this._userStore;
	        }
	    }]);
	
	    return UserManagerSettings;
	}(_OidcClientSettings2.OidcClientSettings);

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.RedirectNavigator = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var RedirectNavigator = exports.RedirectNavigator = function () {
	    function RedirectNavigator() {
	        _classCallCheck(this, RedirectNavigator);
	    }
	
	    RedirectNavigator.prototype.prepare = function prepare() {
	        return Promise.resolve(this);
	    };
	
	    RedirectNavigator.prototype.navigate = function navigate(params) {
	        if (!params || !params.url) {
	            _Log.Log.error("RedirectNavigator.navigate: No url provided");
	            return Promise.reject(new Error("No url provided"));
	        }
	
	        window.location = params.url;
	
	        return Promise.resolve();
	    };
	
	    _createClass(RedirectNavigator, [{
	        key: "url",
	        get: function get() {
	            return window.location.href;
	        }
	    }]);

	    return RedirectNavigator;
	}();

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.PopupNavigator = undefined;
	
	var _Log = __webpack_require__(1);
	
	var _PopupWindow = __webpack_require__(27);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var PopupNavigator = exports.PopupNavigator = function () {
	    function PopupNavigator() {
	        _classCallCheck(this, PopupNavigator);
	    }
	
	    PopupNavigator.prototype.prepare = function prepare(params) {
	        var popup = new _PopupWindow.PopupWindow(params);
	        return Promise.resolve(popup);
	    };
	
	    PopupNavigator.prototype.callback = function callback(url, keepOpen, delimiter) {
	        _Log.Log.debug("PopupNavigator.callback");
	
	        try {
	            _PopupWindow.PopupWindow.notifyOpener(url, keepOpen, delimiter);
	            return Promise.resolve();
	        } catch (e) {
	            return Promise.reject(e);
	        }
	    };
	
	    return PopupNavigator;
	}();

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.PopupWindow = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _UrlUtility = __webpack_require__(15);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var CheckForPopupClosedInterval = 500;
	var DefaultPopupFeatures = 'location=no,toolbar=no,width=500,height=500,left=100,top=100;';
	//const DefaultPopupFeatures = 'location=no,toolbar=no,width=500,height=500,left=100,top=100;resizable=yes';
	
	var DefaultPopupTarget = "_blank";
	
	var PopupWindow = exports.PopupWindow = function () {
	    function PopupWindow(params) {
	        var _this = this;
	
	        _classCallCheck(this, PopupWindow);
	
	        this._promise = new Promise(function (resolve, reject) {
	            _this._resolve = resolve;
	            _this._reject = reject;
	        });
	
	        var target = params.popupWindowTarget || DefaultPopupTarget;
	        var features = params.popupWindowFeatures || DefaultPopupFeatures;
	
	        this._popup = window.open('', target, features);
	        if (this._popup) {
	            _Log.Log.debug("PopupWindow.ctor: popup successfully created");
	            this._checkForPopupClosedTimer = window.setInterval(this._checkForPopupClosed.bind(this), CheckForPopupClosedInterval);
	        }
	    }
	
	    PopupWindow.prototype.navigate = function navigate(params) {
	        if (!this._popup) {
	            this._error("PopupWindow.navigate: Error opening popup window");
	        } else if (!params || !params.url) {
	            this._error("PopupWindow.navigate: no url provided");
	            this._error("No url provided");
	        } else {
	            _Log.Log.debug("PopupWindow.navigate: Setting URL in popup");
	
	            this._id = params.id;
	            if (this._id) {
	                window["popupCallback_" + params.id] = this._callback.bind(this);
	            }
	
	            this._popup.focus();
	            this._popup.window.location = params.url;
	        }
	
	        return this.promise;
	    };
	
	    PopupWindow.prototype._success = function _success(data) {
	        _Log.Log.debug("PopupWindow.callback: Successful response from popup window");
	
	        this._cleanup();
	        this._resolve(data);
	    };
	
	    PopupWindow.prototype._error = function _error(message) {
	        _Log.Log.error("PopupWindow.error: ", message);
	
	        this._cleanup();
	        this._reject(new Error(message));
	    };
	
	    PopupWindow.prototype.close = function close() {
	        this._cleanup(false);
	    };
	
	    PopupWindow.prototype._cleanup = function _cleanup(keepOpen) {
	        _Log.Log.debug("PopupWindow.cleanup");
	
	        window.clearInterval(this._checkForPopupClosedTimer);
	        this._checkForPopupClosedTimer = null;
	
	        delete window["popupCallback_" + this._id];
	
	        if (this._popup && !keepOpen) {
	            this._popup.close();
	        }
	        this._popup = null;
	    };
	
	    PopupWindow.prototype._checkForPopupClosed = function _checkForPopupClosed() {
	        if (!this._popup || this._popup.closed) {
	            this._error("Popup window closed");
	        }
	    };
	
	    PopupWindow.prototype._callback = function _callback(url, keepOpen) {
	        this._cleanup(keepOpen);
	
	        if (url) {
	            _Log.Log.debug("PopupWindow.callback success");
	            this._success({ url: url });
	        } else {
	            _Log.Log.debug("PopupWindow.callback: Invalid response from popup");
	            this._error("Invalid response from popup");
	        }
	    };
	
	    PopupWindow.notifyOpener = function notifyOpener(url, keepOpen, delimiter) {
	        if (window.opener) {
	            url = url || window.location.href;
	            if (url) {
	                var data = _UrlUtility.UrlUtility.parseUrlFragment(url, delimiter);
	
	                if (data.state) {
	                    var name = "popupCallback_" + data.state;
	                    var callback = window.opener[name];
	                    if (callback) {
	                        _Log.Log.debug("PopupWindow.notifyOpener: passing url message to opener");
	                        callback(url, keepOpen);
	                    } else {
	                        _Log.Log.warn("PopupWindow.notifyOpener: no matching callback found on opener");
	                    }
	                } else {
	                    _Log.Log.warn("PopupWindow.notifyOpener: no state found in response url");
	                }
	            }
	        } else {
	            _Log.Log.warn("PopupWindow.notifyOpener: no window.opener. Can't complete notification.");
	        }
	    };
	
	    _createClass(PopupWindow, [{
	        key: 'promise',
	        get: function get() {
	            return this._promise;
	        }
	    }]);

	    return PopupWindow;
	}();

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.IFrameNavigator = undefined;
	
	var _Log = __webpack_require__(1);
	
	var _IFrameWindow = __webpack_require__(29);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var IFrameNavigator = exports.IFrameNavigator = function () {
	    function IFrameNavigator() {
	        _classCallCheck(this, IFrameNavigator);
	    }
	
	    IFrameNavigator.prototype.prepare = function prepare(params) {
	        var frame = new _IFrameWindow.IFrameWindow(params);
	        return Promise.resolve(frame);
	    };
	
	    IFrameNavigator.prototype.callback = function callback(url) {
	        _Log.Log.debug("IFrameNavigator.callback");
	
	        try {
	            _IFrameWindow.IFrameWindow.notifyParent(url);
	            return Promise.resolve();
	        } catch (e) {
	            return Promise.reject(e);
	        }
	    };
	
	    return IFrameNavigator;
	}();

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.IFrameWindow = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var DefaultTimeout = 10000;
	
	var IFrameWindow = exports.IFrameWindow = function () {
	    function IFrameWindow(params) {
	        var _this = this;
	
	        _classCallCheck(this, IFrameWindow);
	
	        this._promise = new Promise(function (resolve, reject) {
	            _this._resolve = resolve;
	            _this._reject = reject;
	        });
	
	        this._boundMessageEvent = this._message.bind(this);
	        window.addEventListener("message", this._boundMessageEvent, false);
	
	        this._frame = window.document.createElement("iframe");
	
	        // shotgun approach
	        this._frame.style.visibility = "hidden";
	        this._frame.style.position = "absolute";
	        this._frame.style.display = "none";
	        this._frame.style.width = 0;
	        this._frame.style.height = 0;
	
	        window.document.body.appendChild(this._frame);
	    }
	
	    IFrameWindow.prototype.navigate = function navigate(params) {
	        if (!params || !params.url) {
	            this._error("No url provided");
	        } else {
	            var timeout = params.silentRequestTimeout || DefaultTimeout;
	            _Log.Log.debug("IFrameWindow.navigate: Using timeout of:", timeout);
	            this._timer = window.setTimeout(this._timeout.bind(this), timeout);
	            this._frame.src = params.url;
	        }
	
	        return this.promise;
	    };
	
	    IFrameWindow.prototype._success = function _success(data) {
	        this._cleanup();
	
	        _Log.Log.debug("IFrameWindow: Successful response from frame window");
	        this._resolve(data);
	    };
	
	    IFrameWindow.prototype._error = function _error(message) {
	        this._cleanup();
	
	        _Log.Log.error(message);
	        this._reject(new Error(message));
	    };
	
	    IFrameWindow.prototype.close = function close() {
	        this._cleanup();
	    };
	
	    IFrameWindow.prototype._cleanup = function _cleanup() {
	        if (this._frame) {
	            _Log.Log.debug("IFrameWindow: cleanup");
	
	            window.removeEventListener("message", this._boundMessageEvent, false);
	            window.clearTimeout(this._timer);
	            window.document.body.removeChild(this._frame);
	
	            this._timer = null;
	            this._frame = null;
	            this._boundMessageEvent = null;
	        }
	    };
	
	    IFrameWindow.prototype._timeout = function _timeout() {
	        _Log.Log.debug("IFrameWindow.timeout");
	        this._error("Frame window timed out");
	    };
	
	    IFrameWindow.prototype._message = function _message(e) {
	        _Log.Log.debug("IFrameWindow.message");
	
	        if (this._timer && e.origin === this._origin && e.source === this._frame.contentWindow) {
	            var url = e.data;
	            if (url) {
	                this._success({ url: url });
	            } else {
	                this._error("Invalid response from frame");
	            }
	        }
	    };
	
	    IFrameWindow.notifyParent = function notifyParent(url) {
	        _Log.Log.debug("IFrameWindow.notifyParent");
	
	        if (window.parent && window !== window.parent) {
	            url = url || window.location.href;
	            if (url) {
	                _Log.Log.debug("IFrameWindow.notifyParent: posting url message to parent");
	                window.parent.postMessage(url, location.protocol + "//" + location.host);
	            }
	        }
	    };
	
	    _createClass(IFrameWindow, [{
	        key: "promise",
	        get: function get() {
	            return this._promise;
	        }
	    }, {
	        key: "_origin",
	        get: function get() {
	            return location.protocol + "//" + location.host;
	        }
	    }]);

	    return IFrameWindow;
	}();

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.User = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var User = exports.User = function () {
	    function User(_ref) {
	        var id_token = _ref.id_token,
	            session_state = _ref.session_state,
	            access_token = _ref.access_token,
	            token_type = _ref.token_type,
	            scope = _ref.scope,
	            profile = _ref.profile,
	            expires_at = _ref.expires_at,
	            state = _ref.state;
	
	        _classCallCheck(this, User);
	
	        this.id_token = id_token;
	        this.session_state = session_state;
	        this.access_token = access_token;
	        this.token_type = token_type;
	        this.scope = scope;
	        this.profile = profile;
	        this.expires_at = expires_at;
	        this.state = state;
	    }
	
	    User.prototype.toStorageString = function toStorageString() {
	        _Log.Log.debug("User.toStorageString");
	        return JSON.stringify({
	            id_token: this.id_token,
	            session_state: this.session_state,
	            access_token: this.access_token,
	            token_type: this.token_type,
	            scope: this.scope,
	            profile: this.profile,
	            expires_at: this.expires_at
	        });
	    };
	
	    User.fromStorageString = function fromStorageString(storageString) {
	        _Log.Log.debug("User.fromStorageString");
	        return new User(JSON.parse(storageString));
	    };
	
	    _createClass(User, [{
	        key: "expires_in",
	        get: function get() {
	            if (this.expires_at) {
	                var now = parseInt(Date.now() / 1000);
	                return this.expires_at - now;
	            }
	            return undefined;
	        }
	    }, {
	        key: "expired",
	        get: function get() {
	            var expires_in = this.expires_in;
	            if (expires_in !== undefined) {
	                return expires_in <= 0;
	            }
	            return undefined;
	        }
	    }, {
	        key: "scopes",
	        get: function get() {
	            return (this.scope || "").split(" ");
	        }
	    }]);

	    return User;
	}();

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.UserManagerEvents = undefined;
	
	var _Log = __webpack_require__(1);
	
	var _AccessTokenEvents2 = __webpack_require__(32);
	
	var _Event = __webpack_require__(34);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var UserManagerEvents = exports.UserManagerEvents = function (_AccessTokenEvents) {
	    _inherits(UserManagerEvents, _AccessTokenEvents);
	
	    function UserManagerEvents(settings) {
	        _classCallCheck(this, UserManagerEvents);
	
	        var _this = _possibleConstructorReturn(this, _AccessTokenEvents.call(this, settings));
	
	        _this._userLoaded = new _Event.Event("User loaded");
	        _this._userUnloaded = new _Event.Event("User unloaded");
	        _this._silentRenewError = new _Event.Event("Silent renew error");
	        _this._userSignedOut = new _Event.Event("User signed out");
	        _this._userSessionChanged = new _Event.Event("User session changed");
	        return _this;
	    }
	
	    UserManagerEvents.prototype.load = function load(user) {
	        var raiseEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	        _Log.Log.debug("UserManagerEvents.load");
	        _AccessTokenEvents.prototype.load.call(this, user);
	        if (raiseEvent) {
	            this._userLoaded.raise(user);
	        }
	    };
	
	    UserManagerEvents.prototype.unload = function unload() {
	        _Log.Log.debug("UserManagerEvents.unload");
	        _AccessTokenEvents.prototype.unload.call(this);
	        this._userUnloaded.raise();
	    };
	
	    UserManagerEvents.prototype.addUserLoaded = function addUserLoaded(cb) {
	        this._userLoaded.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeUserLoaded = function removeUserLoaded(cb) {
	        this._userLoaded.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype.addUserUnloaded = function addUserUnloaded(cb) {
	        this._userUnloaded.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeUserUnloaded = function removeUserUnloaded(cb) {
	        this._userUnloaded.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype.addSilentRenewError = function addSilentRenewError(cb) {
	        this._silentRenewError.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeSilentRenewError = function removeSilentRenewError(cb) {
	        this._silentRenewError.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype._raiseSilentRenewError = function _raiseSilentRenewError(e) {
	        _Log.Log.debug("UserManagerEvents._raiseSilentRenewError", e.message);
	        this._silentRenewError.raise(e);
	    };
	
	    UserManagerEvents.prototype.addUserSignedOut = function addUserSignedOut(cb) {
	        this._userSignedOut.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeUserSignedOut = function removeUserSignedOut(cb) {
	        this._userSignedOut.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype._raiseUserSignedOut = function _raiseUserSignedOut(e) {
	        _Log.Log.debug("UserManagerEvents._raiseUserSignedOut");
	        this._userSignedOut.raise(e);
	    };
	
	    UserManagerEvents.prototype.addUserSessionChanged = function addUserSessionChanged(cb) {
	        this._userSessionChanged.addHandler(cb);
	    };
	
	    UserManagerEvents.prototype.removeUserSessionChanged = function removeUserSessionChanged(cb) {
	        this._userSessionChanged.removeHandler(cb);
	    };
	
	    UserManagerEvents.prototype._raiseUserSessionChanged = function _raiseUserSessionChanged(e) {
	        _Log.Log.debug("UserManagerEvents._raiseUserSessionChanged");
	        this._userSessionChanged.raise(e);
	    };
	
	    return UserManagerEvents;
	}(_AccessTokenEvents2.AccessTokenEvents);

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.AccessTokenEvents = undefined;
	
	var _Log = __webpack_require__(1);
	
	var _Timer = __webpack_require__(33);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var DefaultAccessTokenExpiringNotificationTime = 60; // seconds
	
	var AccessTokenEvents = exports.AccessTokenEvents = function () {
	    function AccessTokenEvents() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime,
	            accessTokenExpiringNotificationTime = _ref$accessTokenExpir === undefined ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir,
	            _ref$accessTokenExpir2 = _ref.accessTokenExpiringTimer,
	            accessTokenExpiringTimer = _ref$accessTokenExpir2 === undefined ? new _Timer.Timer("Access token expiring") : _ref$accessTokenExpir2,
	            _ref$accessTokenExpir3 = _ref.accessTokenExpiredTimer,
	            accessTokenExpiredTimer = _ref$accessTokenExpir3 === undefined ? new _Timer.Timer("Access token expired") : _ref$accessTokenExpir3;
	
	        _classCallCheck(this, AccessTokenEvents);
	
	        this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;
	
	        this._accessTokenExpiring = accessTokenExpiringTimer;
	        this._accessTokenExpired = accessTokenExpiredTimer;
	    }
	
	    AccessTokenEvents.prototype.load = function load(container) {
	        // only register events if there's an access token and it has an expiration
	        if (container.access_token && container.expires_in !== undefined) {
	            var duration = container.expires_in;
	            _Log.Log.debug("AccessTokenEvents.load: access token present, remaining duration:", duration);
	
	            if (duration > 0) {
	                // only register expiring if we still have time
	                var expiring = duration - this._accessTokenExpiringNotificationTime;
	                if (expiring <= 0) {
	                    expiring = 1;
	                }
	
	                _Log.Log.debug("AccessTokenEvents.load: registering expiring timer in:", expiring);
	                this._accessTokenExpiring.init(expiring);
	            } else {
	                _Log.Log.debug("AccessTokenEvents.load: canceling existing expiring timer becase we're past expiration.");
	                this._accessTokenExpiring.cancel();
	            }
	
	            // if it's negative, it will still fire
	            var expired = duration + 1;
	            _Log.Log.debug("AccessTokenEvents.load: registering expired timer in:", expired);
	            this._accessTokenExpired.init(expired);
	        } else {
	            this._accessTokenExpiring.cancel();
	            this._accessTokenExpired.cancel();
	        }
	    };
	
	    AccessTokenEvents.prototype.unload = function unload() {
	        _Log.Log.debug("AccessTokenEvents.unload: canceling existing access token timers");
	        this._accessTokenExpiring.cancel();
	        this._accessTokenExpired.cancel();
	    };
	
	    AccessTokenEvents.prototype.addAccessTokenExpiring = function addAccessTokenExpiring(cb) {
	        this._accessTokenExpiring.addHandler(cb);
	    };
	
	    AccessTokenEvents.prototype.removeAccessTokenExpiring = function removeAccessTokenExpiring(cb) {
	        this._accessTokenExpiring.removeHandler(cb);
	    };
	
	    AccessTokenEvents.prototype.addAccessTokenExpired = function addAccessTokenExpired(cb) {
	        this._accessTokenExpired.addHandler(cb);
	    };
	
	    AccessTokenEvents.prototype.removeAccessTokenExpired = function removeAccessTokenExpired(cb) {
	        this._accessTokenExpired.removeHandler(cb);
	    };
	
	    return AccessTokenEvents;
	}();

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Timer = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Log = __webpack_require__(1);
	
	var _Global = __webpack_require__(5);
	
	var _Event2 = __webpack_require__(34);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var TimerDuration = 5; // seconds
	
	var Timer = exports.Timer = function (_Event) {
	    _inherits(Timer, _Event);
	
	    function Timer(name) {
	        var timer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global.Global.timer;
	        var nowFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
	
	        _classCallCheck(this, Timer);
	
	        var _this = _possibleConstructorReturn(this, _Event.call(this, name));
	
	        _this._timer = timer;
	
	        if (nowFunc) {
	            _this._nowFunc = nowFunc;
	        } else {
	            _this._nowFunc = function () {
	                return Date.now() / 1000;
	            };
	        }
	        return _this;
	    }
	
	    Timer.prototype.init = function init(duration) {
	        if (duration <= 0) {
	            duration = 1;
	        }
	        duration = parseInt(duration);
	
	        var expiration = this.now + duration;
	        if (this.expiration === expiration && this._timerHandle) {
	            // no need to reinitialize to same expiration, so bail out
	            _Log.Log.debug("Timer.init timer " + this._name + " skipping initialization since already initialized for expiration:", this.expiration);
	            return;
	        }
	
	        this.cancel();
	
	        _Log.Log.debug("Timer.init timer " + this._name + " for duration:", duration);
	        this._expiration = expiration;
	
	        // we're using a fairly short timer and then checking the expiration in the
	        // callback to handle scenarios where the browser device sleeps, and then
	        // the timers end up getting delayed.
	        var timerDuration = TimerDuration;
	        if (duration < timerDuration) {
	            timerDuration = duration;
	        }
	        this._timerHandle = this._timer.setInterval(this._callback.bind(this), timerDuration * 1000);
	    };
	
	    Timer.prototype.cancel = function cancel() {
	        if (this._timerHandle) {
	            _Log.Log.debug("Timer.cancel: ", this._name);
	            this._timer.clearInterval(this._timerHandle);
	            this._timerHandle = null;
	        }
	    };
	
	    Timer.prototype._callback = function _callback() {
	        var diff = this._expiration - this.now;
	        _Log.Log.debug("Timer.callback; " + this._name + " timer expires in:", diff);
	
	        if (this._expiration <= this.now) {
	            this.cancel();
	            _Event.prototype.raise.call(this);
	        }
	    };
	
	    _createClass(Timer, [{
	        key: 'now',
	        get: function get() {
	            return parseInt(this._nowFunc());
	        }
	    }, {
	        key: 'expiration',
	        get: function get() {
	            return this._expiration;
	        }
	    }]);
	
	    return Timer;
	}(_Event2.Event);

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Event = undefined;
	
	var _Log = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var Event = exports.Event = function () {
	    function Event(name) {
	        _classCallCheck(this, Event);
	
	        this._name = name;
	        this._callbacks = [];
	    }
	
	    Event.prototype.addHandler = function addHandler(cb) {
	        this._callbacks.push(cb);
	    };
	
	    Event.prototype.removeHandler = function removeHandler(cb) {
	        var idx = this._callbacks.findIndex(function (item) {
	            return item === cb;
	        });
	        if (idx >= 0) {
	            this._callbacks.splice(idx, 1);
	        }
	    };
	
	    Event.prototype.raise = function raise() {
	        _Log.Log.debug("Event: Raising event: " + this._name);
	        for (var i = 0; i < this._callbacks.length; i++) {
	            var _callbacks;
	
	            (_callbacks = this._callbacks)[i].apply(_callbacks, arguments);
	        }
	    };
	
	    return Event;
	}();

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.SilentRenewService = undefined;
	
	var _Log = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var SilentRenewService = exports.SilentRenewService = function () {
	    function SilentRenewService(userManager) {
	        _classCallCheck(this, SilentRenewService);
	
	        this._userManager = userManager;
	    }
	
	    SilentRenewService.prototype.start = function start() {
	        if (!this._callback) {
	            this._callback = this._tokenExpiring.bind(this);
	            this._userManager.events.addAccessTokenExpiring(this._callback);
	
	            // this will trigger loading of the user so the expiring events can be initialized
	            this._userManager.getUser().then(function (user) {
	                // deliberate nop
	            }).catch(function (err) {
	                // catch to suppress errors since we're in a ctor
	                _Log.Log.error("SilentRenewService.start: Error from getUser:", err.message);
	            });
	        }
	    };
	
	    SilentRenewService.prototype.stop = function stop() {
	        if (this._callback) {
	            this._userManager.events.removeAccessTokenExpiring(this._callback);
	            delete this._callback;
	        }
	    };
	
	    SilentRenewService.prototype._tokenExpiring = function _tokenExpiring() {
	        var _this = this;
	
	        this._userManager.signinSilent().then(function (user) {
	            _Log.Log.debug("SilentRenewService._tokenExpiring: Silent token renewal successful");
	        }, function (err) {
	            _Log.Log.error("SilentRenewService._tokenExpiring: Error from signinSilent:", err.message);
	            _this._userManager.events._raiseSilentRenewError(err);
	        });
	    };
	
	    return SilentRenewService;
	}();

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.SessionMonitor = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	var _CheckSessionIFrame = __webpack_require__(37);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SessionMonitor = exports.SessionMonitor = function () {
	    function SessionMonitor(userManager) {
	        var _this = this;
	
	        var CheckSessionIFrameCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _CheckSessionIFrame.CheckSessionIFrame;
	
	        _classCallCheck(this, SessionMonitor);
	
	        if (!userManager) {
	            _Log.Log.error("SessionMonitor.ctor: No user manager passed to SessionMonitor");
	            throw new Error("userManager");
	        }
	
	        this._userManager = userManager;
	        this._CheckSessionIFrameCtor = CheckSessionIFrameCtor;
	
	        this._userManager.events.addUserLoaded(this._start.bind(this));
	        this._userManager.events.addUserUnloaded(this._stop.bind(this));
	
	        this._userManager.getUser().then(function (user) {
	            // doing this manually here since calling getUser 
	            // doesn't trigger load event.
	            if (user) {
	                _this._start(user);
	            }
	        }).catch(function (err) {
	            // catch to suppress errors since we're in a ctor
	            _Log.Log.error("SessionMonitor ctor: error from getUser:", err.message);
	        });
	    }
	
	    SessionMonitor.prototype._start = function _start(user) {
	        var _this2 = this;
	
	        var session_state = user.session_state;
	
	        if (session_state) {
	            this._sub = user.profile.sub;
	            this._sid = user.profile.sid;
	            _Log.Log.debug("SessionMonitor._start: session_state:", session_state, ", sub:", this._sub);
	
	            if (!this._checkSessionIFrame) {
	                this._metadataService.getCheckSessionIframe().then(function (url) {
	                    if (url) {
	                        _Log.Log.debug("SessionMonitor._start: Initializing check session iframe");
	
	                        var client_id = _this2._client_id;
	                        var interval = _this2._checkSessionInterval;
	                        var stopOnError = _this2._stopCheckSessionOnError;
	
	                        _this2._checkSessionIFrame = new _this2._CheckSessionIFrameCtor(_this2._callback.bind(_this2), client_id, url, interval, stopOnError);
	                        _this2._checkSessionIFrame.load().then(function () {
	                            _this2._checkSessionIFrame.start(session_state);
	                        });
	                    } else {
	                        _Log.Log.warn("SessionMonitor._start: No check session iframe found in the metadata");
	                    }
	                }).catch(function (err) {
	                    // catch to suppress errors since we're in non-promise callback
	                    _Log.Log.error("SessionMonitor._start: Error from getCheckSessionIframe:", err.message);
	                });
	            } else {
	                this._checkSessionIFrame.start(session_state);
	            }
	        }
	    };
	
	    SessionMonitor.prototype._stop = function _stop() {
	        this._sub = null;
	        this._sid = null;
	
	        if (this._checkSessionIFrame) {
	            _Log.Log.debug("SessionMonitor._stop");
	            this._checkSessionIFrame.stop();
	        }
	    };
	
	    SessionMonitor.prototype._callback = function _callback() {
	        var _this3 = this;
	
	        this._userManager.querySessionStatus().then(function (session) {
	            var raiseUserSignedOutEvent = true;
	
	            if (session) {
	                if (session.sub === _this3._sub) {
	                    raiseUserSignedOutEvent = false;
	                    _this3._checkSessionIFrame.start(session.session_state);
	
	                    if (session.sid === _this3._sid) {
	                        _Log.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, restarting check session iframe; session_state:", session.session_state);
	                    } else {
	                        _Log.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, session state has changed, restarting check session iframe; session_state:", session.session_state);
	                        _this3._userManager.events._raiseUserSessionChanged();
	                    }
	                } else {
	                    _Log.Log.debug("SessionMonitor._callback: Different subject signed into OP:", session.sub);
	                }
	            } else {
	                _Log.Log.debug("SessionMonitor._callback: Subject no longer signed into OP");
	            }
	
	            if (raiseUserSignedOutEvent) {
	                _Log.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed out event");
	                _this3._userManager.events._raiseUserSignedOut();
	            }
	        }).catch(function (err) {
	            _Log.Log.debug("SessionMonitor._callback: Error calling queryCurrentSigninSession; raising signed out event", err.message);
	            _this3._userManager.events._raiseUserSignedOut();
	        });
	    };
	
	    _createClass(SessionMonitor, [{
	        key: '_settings',
	        get: function get() {
	            return this._userManager.settings;
	        }
	    }, {
	        key: '_metadataService',
	        get: function get() {
	            return this._userManager.metadataService;
	        }
	    }, {
	        key: '_client_id',
	        get: function get() {
	            return this._settings.client_id;
	        }
	    }, {
	        key: '_checkSessionInterval',
	        get: function get() {
	            return this._settings.checkSessionInterval;
	        }
	    }, {
	        key: '_stopCheckSessionOnError',
	        get: function get() {
	            return this._settings.stopCheckSessionOnError;
	        }
	    }]);

	    return SessionMonitor;
	}();

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.CheckSessionIFrame = undefined;
	
	var _Log = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var DefaultInterval = 2000;
	
	var CheckSessionIFrame = exports.CheckSessionIFrame = function () {
	    function CheckSessionIFrame(callback, client_id, url, interval) {
	        var stopOnError = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	
	        _classCallCheck(this, CheckSessionIFrame);
	
	        this._callback = callback;
	        this._client_id = client_id;
	        this._url = url;
	        this._interval = interval || DefaultInterval;
	        this._stopOnError = stopOnError;
	
	        var idx = url.indexOf("/", url.indexOf("//") + 2);
	        this._frame_origin = url.substr(0, idx);
	
	        this._frame = window.document.createElement("iframe");
	
	        // shotgun approach
	        this._frame.style.visibility = "hidden";
	        this._frame.style.position = "absolute";
	        this._frame.style.display = "none";
	        this._frame.style.width = 0;
	        this._frame.style.height = 0;
	
	        this._frame.src = url;
	    }
	
	    CheckSessionIFrame.prototype.load = function load() {
	        var _this = this;
	
	        return new Promise(function (resolve) {
	            _this._frame.onload = function () {
	                resolve();
	            };
	
	            window.document.body.appendChild(_this._frame);
	            _this._boundMessageEvent = _this._message.bind(_this);
	            window.addEventListener("message", _this._boundMessageEvent, false);
	        });
	    };
	
	    CheckSessionIFrame.prototype._message = function _message(e) {
	        if (e.origin === this._frame_origin && e.source === this._frame.contentWindow) {
	            if (e.data === "error") {
	                _Log.Log.error("CheckSessionIFrame: error message from check session op iframe");
	                if (this._stopOnError) {
	                    this.stop();
	                }
	            } else if (e.data === "changed") {
	                _Log.Log.debug("CheckSessionIFrame: changed message from check session op iframe");
	                this.stop();
	                this._callback();
	            } else {
	                _Log.Log.debug("CheckSessionIFrame: " + e.data + " message from check session op iframe");
	            }
	        }
	    };
	
	    CheckSessionIFrame.prototype.start = function start(session_state) {
	        var _this2 = this;
	
	        if (this._session_state !== session_state) {
	            _Log.Log.debug("CheckSessionIFrame.start");
	
	            this.stop();
	
	            this._session_state = session_state;
	
	            var send = function send() {
	                _this2._frame.contentWindow.postMessage(_this2._client_id + " " + _this2._session_state, _this2._frame_origin);
	            };
	
	            // trigger now
	            send();
	
	            // and setup timer
	            this._timer = window.setInterval(send, this._interval);
	        }
	    };
	
	    CheckSessionIFrame.prototype.stop = function stop() {
	        this._session_state = null;
	
	        if (this._timer) {
	            _Log.Log.debug("CheckSessionIFrame.stop");
	
	            window.clearInterval(this._timer);
	            this._timer = null;
	        }
	    };
	
	    return CheckSessionIFrame;
	}();

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.TokenRevocationClient = undefined;
	
	var _Log = __webpack_require__(1);
	
	var _MetadataService = __webpack_require__(7);
	
	var _Global = __webpack_require__(5);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var AccessTokenTypeHint = "access_token";
	
	var TokenRevocationClient = exports.TokenRevocationClient = function () {
	    function TokenRevocationClient(settings) {
	        var XMLHttpRequestCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global.Global.XMLHttpRequest;
	        var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService.MetadataService;
	
	        _classCallCheck(this, TokenRevocationClient);
	
	        if (!settings) {
	            _Log.Log.error("TokenRevocationClient.ctor: No settings provided");
	            throw new Error("No settings provided.");
	        }
	
	        this._settings = settings;
	        this._XMLHttpRequestCtor = XMLHttpRequestCtor;
	        this._metadataService = new MetadataServiceCtor(this._settings);
	    }
	
	    TokenRevocationClient.prototype.revoke = function revoke(accessToken, required) {
	        var _this = this;
	
	        if (!accessToken) {
	            _Log.Log.error("TokenRevocationClient.revoke: No accessToken provided");
	            throw new Error("No accessToken provided.");
	        }
	
	        return this._metadataService.getRevocationEndpoint().then(function (url) {
	            if (!url) {
	                if (required) {
	                    _Log.Log.error("TokenRevocationClient.revoke: Revocation not supported");
	                    throw new Error("Revocation not supported");
	                }
	
	                // not required, so don't error and just return
	                return;
	            }
	
	            _Log.Log.error("TokenRevocationClient.revoke: Revoking access token");
	            var client_id = _this._settings.client_id;
	            var client_secret = _this._settings.client_secret;
	            return _this._revoke(url, client_id, client_secret, accessToken);
	        });
	    };
	
	    TokenRevocationClient.prototype._revoke = function _revoke(url, client_id, client_secret, accessToken) {
	        var _this2 = this;
	
	        return new Promise(function (resolve, reject) {
	
	            var xhr = new _this2._XMLHttpRequestCtor();
	            xhr.open("POST", url);
	
	            xhr.onload = function () {
	                _Log.Log.debug("TokenRevocationClient.revoke: HTTP response received, status", xhr.status);
	
	                if (xhr.status === 200) {
	                    resolve();
	                } else {
	                    reject(Error(xhr.statusText + " (" + xhr.status + ")"));
	                }
	            };
	
	            var body = "client_id=" + encodeURIComponent(client_id);
	            if (client_secret) {
	                body += "&client_secret=" + encodeURIComponent(client_secret);
	            }
	            body += "&token_type_hint=" + encodeURIComponent(AccessTokenTypeHint);
	            body += "&token=" + encodeURIComponent(accessToken);
	
	            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	            xhr.send(body);
	        });
	    };
	
	    return TokenRevocationClient;
	}();

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.CordovaPopupNavigator = undefined;
	
	var _CordovaPopupWindow = __webpack_require__(40);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var CordovaPopupNavigator = exports.CordovaPopupNavigator = function () {
	    function CordovaPopupNavigator() {
	        _classCallCheck(this, CordovaPopupNavigator);
	    }
	
	    CordovaPopupNavigator.prototype.prepare = function prepare(params) {
	        var popup = new _CordovaPopupWindow.CordovaPopupWindow(params);
	        return Promise.resolve(popup);
	    };
	
	    return CordovaPopupNavigator;
	}();

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.CordovaPopupWindow = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var _Log = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var DefaultPopupFeatures = 'location=no,toolbar=no,zoom=no';
	var DefaultPopupTarget = "_blank";
	
	var CordovaPopupWindow = exports.CordovaPopupWindow = function () {
	    function CordovaPopupWindow(params) {
	        var _this = this;
	
	        _classCallCheck(this, CordovaPopupWindow);
	
	        this._promise = new Promise(function (resolve, reject) {
	            _this._resolve = resolve;
	            _this._reject = reject;
	        });
	
	        this.features = params.popupWindowFeatures || DefaultPopupFeatures;
	        this.target = params.popupWindowTarget || DefaultPopupTarget;
	
	        this.redirect_uri = params.startUrl;
	        _Log.Log.debug("CordovaPopupWindow.ctor: redirect_uri: " + this.redirect_uri);
	    }
	
	    CordovaPopupWindow.prototype._isInAppBrowserInstalled = function _isInAppBrowserInstalled(cordovaMetadata) {
	        return ["cordova-plugin-inappbrowser", "cordova-plugin-inappbrowser.inappbrowser", "org.apache.cordova.inappbrowser"].some(function (name) {
	            return cordovaMetadata.hasOwnProperty(name);
	        });
	    };
	
	    CordovaPopupWindow.prototype.navigate = function navigate(params) {
	        if (!params || !params.url) {
	            this._error("No url provided");
	        } else {
	            if (!window.cordova) {
	                return this._error("cordova is undefined");
	            }
	
	            var cordovaMetadata = window.cordova.require("cordova/plugin_list").metadata;
	            if (this._isInAppBrowserInstalled(cordovaMetadata) === false) {
	                return this._error("InAppBrowser plugin not found");
	            }
	            this._popup = cordova.InAppBrowser.open(params.url, this.target, this.features);
	            if (this._popup) {
	                _Log.Log.debug("CordovaPopupWindow.navigate: popup successfully created");
	
	                this._exitCallbackEvent = this._exitCallback.bind(this);
	                this._loadStartCallbackEvent = this._loadStartCallback.bind(this);
	
	                this._popup.addEventListener("exit", this._exitCallbackEvent, false);
	                this._popup.addEventListener("loadstart", this._loadStartCallbackEvent, false);
	            } else {
	                this._error("Error opening popup window");
	            }
	        }
	        return this.promise;
	    };
	
	    CordovaPopupWindow.prototype._loadStartCallback = function _loadStartCallback(event) {
	        if (event.url.indexOf(this.redirect_uri) === 0) {
	            this._success({ url: event.url });
	        }
	    };
	
	    CordovaPopupWindow.prototype._exitCallback = function _exitCallback(message) {
	        this._error(message);
	    };
	
	    CordovaPopupWindow.prototype._success = function _success(data) {
	        this._cleanup();
	
	        _Log.Log.debug("CordovaPopupWindow: Successful response from cordova popup window");
	        this._resolve(data);
	    };
	
	    CordovaPopupWindow.prototype._error = function _error(message) {
	        this._cleanup();
	
	        _Log.Log.error(message);
	        this._reject(new Error(message));
	    };
	
	    CordovaPopupWindow.prototype.close = function close() {
	        this._cleanup();
	    };
	
	    CordovaPopupWindow.prototype._cleanup = function _cleanup() {
	        if (this._popup) {
	            _Log.Log.debug("CordovaPopupWindow: cleaning up popup");
	            this._popup.removeEventListener("exit", this._exitCallbackEvent, false);
	            this._popup.removeEventListener("loadstart", this._loadStartCallbackEvent, false);
	            this._popup.close();
	        }
	        this._popup = null;
	    };
	
	    _createClass(CordovaPopupWindow, [{
	        key: 'promise',
	        get: function get() {
	            return this._promise;
	        }
	    }]);

	    return CordovaPopupWindow;
	}();

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.CordovaIFrameNavigator = undefined;
	
	var _CordovaPopupWindow = __webpack_require__(40);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
	// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
	
	var CordovaIFrameNavigator = exports.CordovaIFrameNavigator = function () {
	    function CordovaIFrameNavigator() {
	        _classCallCheck(this, CordovaIFrameNavigator);
	    }
	
	    CordovaIFrameNavigator.prototype.prepare = function prepare(params) {
	        params.popupWindowFeatures = 'hidden=yes';
	        var popup = new _CordovaPopupWindow.CordovaPopupWindow(params);
	        return Promise.resolve(popup);
	    };
	
	    return CordovaIFrameNavigator;
	}();

/***/ })
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBkNDgwNjdhZmM0NGI0YTJiOGI5YyIsIndlYnBhY2s6Ly8vLi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvTG9nLmpzIiwid2VicGFjazovLy8uL3NyYy9PaWRjQ2xpZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9PaWRjQ2xpZW50U2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1dlYlN0b3JhZ2VTdGF0ZVN0b3JlLmpzIiwid2VicGFjazovLy8uL3NyYy9HbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Jlc3BvbnNlVmFsaWRhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9NZXRhZGF0YVNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0pzb25TZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9Vc2VySW5mb1NlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Vycm9yUmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0pvc2VVdGlsLmpzIiwid2VicGFjazovLy8uL2pzcnNhc2lnbi9kaXN0L2pzcnNhc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU2lnbmluUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXJsVXRpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU2lnbmluU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1N0YXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9yYW5kb20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NpZ25pblJlc3BvbnNlLmpzIiwid2VicGFjazovLy8uL3NyYy9TaWdub3V0UmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU2lnbm91dFJlc3BvbnNlLmpzIiwid2VicGFjazovLy8uL3NyYy9Jbk1lbW9yeVdlYlN0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VzZXJNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9Vc2VyTWFuYWdlclNldHRpbmdzLmpzIiwid2VicGFjazovLy8uL3NyYy9SZWRpcmVjdE5hdmlnYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUG9wdXBOYXZpZ2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1BvcHVwV2luZG93LmpzIiwid2VicGFjazovLy8uL3NyYy9JRnJhbWVOYXZpZ2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0lGcmFtZVdpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXNlck1hbmFnZXJFdmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FjY2Vzc1Rva2VuRXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9UaW1lci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NpbGVudFJlbmV3U2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU2Vzc2lvbk1vbml0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NoZWNrU2Vzc2lvbklGcmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVG9rZW5SZXZvY2F0aW9uQ2xpZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9Db3Jkb3ZhUG9wdXBOYXZpZ2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvcmRvdmFQb3B1cFdpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29yZG92YUlGcmFtZU5hdmlnYXRvci5qcyJdLCJuYW1lcyI6WyJMb2ciLCJPaWRjQ2xpZW50IiwiT2lkY0NsaWVudFNldHRpbmdzIiwiV2ViU3RvcmFnZVN0YXRlU3RvcmUiLCJJbk1lbW9yeVdlYlN0b3JhZ2UiLCJVc2VyTWFuYWdlciIsIkFjY2Vzc1Rva2VuRXZlbnRzIiwiTWV0YWRhdGFTZXJ2aWNlIiwiQ29yZG92YVBvcHVwTmF2aWdhdG9yIiwiQ29yZG92YUlGcmFtZU5hdmlnYXRvciIsIkNoZWNrU2Vzc2lvbklGcmFtZSIsIlRva2VuUmV2b2NhdGlvbkNsaWVudCIsIlNlc3Npb25Nb25pdG9yIiwiR2xvYmFsIiwiVXNlciIsIm5vcExvZ2dlciIsImRlYnVnIiwiaW5mbyIsIndhcm4iLCJlcnJvciIsIk5PTkUiLCJFUlJPUiIsIldBUk4iLCJJTkZPIiwiREVCVUciLCJsb2dnZXIiLCJsZXZlbCIsInJlc2V0IiwiYXJncyIsImFwcGx5IiwiQXJyYXkiLCJmcm9tIiwidmFsdWUiLCJFcnJvciIsInNldHRpbmdzIiwiX3NldHRpbmdzIiwiY3JlYXRlU2lnbmluUmVxdWVzdCIsInJlc3BvbnNlX3R5cGUiLCJzY29wZSIsInJlZGlyZWN0X3VyaSIsImRhdGEiLCJzdGF0ZSIsInByb21wdCIsImRpc3BsYXkiLCJtYXhfYWdlIiwidWlfbG9jYWxlcyIsImlkX3Rva2VuX2hpbnQiLCJsb2dpbl9oaW50IiwiYWNyX3ZhbHVlcyIsInJlc291cmNlIiwicmVxdWVzdCIsInJlcXVlc3RfdXJpIiwiZXh0cmFRdWVyeVBhcmFtcyIsInN0YXRlU3RvcmUiLCJjbGllbnRfaWQiLCJhdXRob3JpdHkiLCJfbWV0YWRhdGFTZXJ2aWNlIiwiZ2V0QXV0aG9yaXphdGlvbkVuZHBvaW50IiwidGhlbiIsInVybCIsInNpZ25pblJlcXVlc3QiLCJTaWduaW5SZXF1ZXN0Iiwic2lnbmluU3RhdGUiLCJfc3RhdGVTdG9yZSIsInNldCIsImlkIiwidG9TdG9yYWdlU3RyaW5nIiwicHJvY2Vzc1NpZ25pblJlc3BvbnNlIiwicmVzcG9uc2UiLCJTaWduaW5SZXNwb25zZSIsIlByb21pc2UiLCJyZWplY3QiLCJyZW1vdmUiLCJzdG9yZWRTdGF0ZVN0cmluZyIsIlNpZ25pblN0YXRlIiwiZnJvbVN0b3JhZ2VTdHJpbmciLCJfdmFsaWRhdG9yIiwidmFsaWRhdGVTaWduaW5SZXNwb25zZSIsImNyZWF0ZVNpZ25vdXRSZXF1ZXN0IiwicG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpIiwiZ2V0RW5kU2Vzc2lvbkVuZHBvaW50IiwiU2lnbm91dFJlcXVlc3QiLCJzaWdub3V0U3RhdGUiLCJwcm9jZXNzU2lnbm91dFJlc3BvbnNlIiwiU2lnbm91dFJlc3BvbnNlIiwiRXJyb3JSZXNwb25zZSIsInJlc29sdmUiLCJzdGF0ZUtleSIsIlN0YXRlIiwidmFsaWRhdGVTaWdub3V0UmVzcG9uc2UiLCJjbGVhclN0YWxlU3RhdGUiLCJzdGFsZVN0YXRlQWdlIiwidmFsaWRhdG9yIiwibWV0YWRhdGFTZXJ2aWNlIiwiT2lkY01ldGFkYXRhVXJsUGF0aCIsIkRlZmF1bHRSZXNwb25zZVR5cGUiLCJEZWZhdWx0U2NvcGUiLCJEZWZhdWx0U3RhbGVTdGF0ZUFnZSIsIkRlZmF1bHRDbG9ja1NrZXdJblNlY29uZHMiLCJtZXRhZGF0YVVybCIsIm1ldGFkYXRhIiwic2lnbmluZ0tleXMiLCJjbGllbnRfc2VjcmV0IiwiZmlsdGVyUHJvdG9jb2xDbGFpbXMiLCJsb2FkVXNlckluZm8iLCJjbG9ja1NrZXciLCJSZXNwb25zZVZhbGlkYXRvckN0b3IiLCJSZXNwb25zZVZhbGlkYXRvciIsIk1ldGFkYXRhU2VydmljZUN0b3IiLCJfYXV0aG9yaXR5IiwiX21ldGFkYXRhVXJsIiwiX21ldGFkYXRhIiwiX3NpZ25pbmdLZXlzIiwiX2NsaWVudF9pZCIsIl9jbGllbnRfc2VjcmV0IiwiX3Jlc3BvbnNlX3R5cGUiLCJfc2NvcGUiLCJfcmVkaXJlY3RfdXJpIiwiX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSIsIl9wcm9tcHQiLCJfZGlzcGxheSIsIl9tYXhfYWdlIiwiX3VpX2xvY2FsZXMiLCJfYWNyX3ZhbHVlcyIsIl9yZXNvdXJjZSIsIl9maWx0ZXJQcm90b2NvbENsYWltcyIsIl9sb2FkVXNlckluZm8iLCJfc3RhbGVTdGF0ZUFnZSIsIl9jbG9ja1NrZXciLCJfZXh0cmFRdWVyeVBhcmFtcyIsImluZGV4T2YiLCJsZW5ndGgiLCJwcmVmaXgiLCJzdG9yZSIsImxvY2FsU3RvcmFnZSIsIl9zdG9yZSIsIl9wcmVmaXgiLCJrZXkiLCJzZXRJdGVtIiwiZ2V0IiwiaXRlbSIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwiZ2V0QWxsS2V5cyIsImtleXMiLCJpbmRleCIsInB1c2giLCJzdWJzdHIiLCJ0aW1lciIsInNldEludGVydmFsIiwiY2IiLCJkdXJhdGlvbiIsImNsZWFySW50ZXJ2YWwiLCJoYW5kbGUiLCJ0ZXN0aW5nIiwiX3Rlc3RpbmciLCJzZXRYTUxIdHRwUmVxdWVzdCIsIm5ld1JlcXVlc3QiLCJsb2NhdGlvbiIsIndpbmRvdyIsInNlc3Npb25TdG9yYWdlIiwiWE1MSHR0cFJlcXVlc3QiLCJQcm90b2NvbENsYWltcyIsIlVzZXJJbmZvU2VydmljZUN0b3IiLCJVc2VySW5mb1NlcnZpY2UiLCJqb3NlVXRpbCIsIkpvc2VVdGlsIiwiX3VzZXJJbmZvU2VydmljZSIsIl9qb3NlVXRpbCIsIl9wcm9jZXNzU2lnbmluUGFyYW1zIiwiX3ZhbGlkYXRlVG9rZW5zIiwiX3Byb2Nlc3NDbGFpbXMiLCJub25jZSIsImlkX3Rva2VuIiwiaXNPcGVuSWRDb25uZWN0IiwicHJvZmlsZSIsImFjY2Vzc190b2tlbiIsImdldENsYWltcyIsImNsYWltcyIsInN1YiIsIl9tZXJnZUNsYWltcyIsImNsYWltczEiLCJjbGFpbXMyIiwicmVzdWx0IiwiT2JqZWN0IiwiYXNzaWduIiwibmFtZSIsInZhbHVlcyIsImlzQXJyYXkiLCJpIiwiZm9yRWFjaCIsInR5cGUiLCJfdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW4iLCJfdmFsaWRhdGVJZFRva2VuIiwiX3ZhbGlkYXRlQWNjZXNzVG9rZW4iLCJqd3QiLCJwYXJzZUp3dCIsImhlYWRlciIsInBheWxvYWQiLCJraWQiLCJnZXRJc3N1ZXIiLCJnZXRTaWduaW5nS2V5cyIsIl9maWx0ZXJCeUFsZyIsImFsZyIsImZpbHRlciIsImF1ZGllbmNlIiwiY2xvY2tTa2V3SW5TZWNvbmRzIiwidmFsaWRhdGVKd3QiLCJpc3N1ZXIiLCJrdHkiLCJzdGFydHNXaXRoIiwiYXRfaGFzaCIsImhhc2hBbGciLCJoYXNoQml0cyIsInBhcnNlSW50Iiwic2hhIiwiaGFzaCIsImhhc2hTdHJpbmciLCJsZWZ0IiwibGVmdF9iNjR1IiwiaGV4VG9CYXNlNjRVcmwiLCJKc29uU2VydmljZUN0b3IiLCJKc29uU2VydmljZSIsIl9qc29uU2VydmljZSIsImdldE1ldGFkYXRhIiwiZ2V0SnNvbiIsIl9nZXRNZXRhZGF0YVByb3BlcnR5IiwiZ2V0VXNlckluZm9FbmRwb2ludCIsImdldFRva2VuRW5kcG9pbnQiLCJnZXRDaGVja1Nlc3Npb25JZnJhbWUiLCJnZXRSZXZvY2F0aW9uRW5kcG9pbnQiLCJvcHRpb25hbCIsInVuZGVmaW5lZCIsImp3a3NfdXJpIiwia2V5U2V0IiwiWE1MSHR0cFJlcXVlc3RDdG9yIiwiX1hNTEh0dHBSZXF1ZXN0IiwidG9rZW4iLCJyZXEiLCJvcGVuIiwib25sb2FkIiwic3RhdHVzIiwiY29udGVudFR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsImUiLCJtZXNzYWdlIiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsImVycm9yX2Rlc2NyaXB0aW9uIiwiZXJyb3JfdXJpIiwiQWxsb3dlZFNpZ25pbmdBbGdzIiwiandzIiwiSldTIiwiaGVhZGVyT2JqIiwicGF5bG9hZE9iaiIsIm5vdyIsIm4iLCJLZXlVdGlsIiwiZ2V0S2V5IiwieDVjIiwiaGV4IiwiWDUwOSIsImdldFB1YmxpY0tleUZyb21DZXJ0SGV4IiwiY3J2IiwieCIsInkiLCJfdmFsaWRhdGVKd3QiLCJEYXRlIiwiaXNzIiwiYXVkIiwidmFsaWRBdWRpZW5jZSIsImxvd2VyTm93IiwidXBwZXJOb3ciLCJpYXQiLCJuYmYiLCJleHAiLCJ2ZXJpZnkiLCJjcnlwdG8iLCJVdGlsIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiWUFIT08iLCJsYW5nIiwiZXh0ZW5kIiwiZyIsImgiLCJmIiwiZCIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwic3VwZXJjbGFzcyIsImIiLCJjIiwidGVzdCIsImoiLCJsIiwiayIsImEiLCJDcnlwdG9KUyIsImxpYiIsIkJhc2UiLCJwIiwibyIsIm1peEluIiwiaGFzT3duUHJvcGVydHkiLCJpbml0IiwiJHN1cGVyIiwiYXJndW1lbnRzIiwiY3JlYXRlIiwidG9TdHJpbmciLCJjbG9uZSIsIldvcmRBcnJheSIsIndvcmRzIiwic2lnQnl0ZXMiLCJzdHJpbmdpZnkiLCJjb25jYXQiLCJ0IiwicSIsInMiLCJjbGFtcCIsInIiLCJjZWlsIiwiY2FsbCIsInNsaWNlIiwicmFuZG9tIiwibSIsImVuYyIsIkhleCIsImpvaW4iLCJMYXRpbjEiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjaGFyQ29kZUF0IiwiVXRmOCIsImRlY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQnVmZmVyZWRCbG9ja0FsZ29yaXRobSIsIl9kYXRhIiwiX25EYXRhQnl0ZXMiLCJfYXBwZW5kIiwiX3Byb2Nlc3MiLCJ3IiwiYmxvY2tTaXplIiwidiIsInUiLCJtYXgiLCJfbWluQnVmZmVyU2l6ZSIsIm1pbiIsIl9kb1Byb2Nlc3NCbG9jayIsInNwbGljZSIsIkhhc2hlciIsImNmZyIsIl9kb1Jlc2V0IiwidXBkYXRlIiwiZmluYWxpemUiLCJfZG9GaW5hbGl6ZSIsIl9jcmVhdGVIZWxwZXIiLCJfY3JlYXRlSG1hY0hlbHBlciIsIkhNQUMiLCJhbGdvIiwiTWF0aCIsIng2NCIsIldvcmQiLCJoaWdoIiwibG93IiwidG9YMzIiLCJCYXNlNjQiLCJfbWFwIiwiY2hhckF0Iiwic3FydCIsInBvdyIsIlNIQTI1NiIsIl9oYXNoIiwiZmxvb3IiLCJIbWFjU0hBMjU2IiwiVCIsImVhIiwiU0hBNTEyIiwiRiIsIkciLCJIIiwiSSIsIkoiLCJYIiwiSyIsIlkiLCJMIiwiWiIsIk0iLCIkIiwiTiIsImFhIiwiTyIsImJhIiwiUCIsImNhIiwiUSIsInoiLCJBIiwiVSIsIkIiLCJSIiwiQyIsIlMiLCJEIiwiViIsIkUiLCJXIiwiZmEiLCJkYSIsIkhtYWNTSEE1MTIiLCJTSEEzODQiLCJIbWFjU0hBMzg0IiwiYjY0bWFwIiwiYjY0cGFkIiwiaGV4MmI2NCIsInN1YnN0cmluZyIsImI2NHRvaGV4IiwiaW50MmNoYXIiLCJiNjR0b0JBIiwiZGJpdHMiLCJjYW5hcnkiLCJqX2xtIiwiQmlnSW50ZWdlciIsImZyb21OdW1iZXIiLCJmcm9tU3RyaW5nIiwibmJpIiwiYW0xIiwiYW0yIiwiYW0zIiwiYXBwTmFtZSIsImFtIiwiREIiLCJETSIsIkRWIiwiQklfRlAiLCJGViIsIkYxIiwiRjIiLCJCSV9STSIsIkJJX1JDIiwicnIiLCJ2diIsImludEF0IiwiYm5wQ29weVRvIiwiYm5wRnJvbUludCIsIm5idiIsImZyb21JbnQiLCJibnBGcm9tU3RyaW5nIiwiZnJvbVJhZGl4IiwiWkVSTyIsInN1YlRvIiwiYm5wQ2xhbXAiLCJiblRvU3RyaW5nIiwibmVnYXRlIiwidG9SYWRpeCIsImJuTmVnYXRlIiwiYm5BYnMiLCJibkNvbXBhcmVUbyIsIm5iaXRzIiwiYm5CaXRMZW5ndGgiLCJibnBETFNoaWZ0VG8iLCJibnBEUlNoaWZ0VG8iLCJibnBMU2hpZnRUbyIsImJucFJTaGlmdFRvIiwiYm5wU3ViVG8iLCJibnBNdWx0aXBseVRvIiwiYWJzIiwiYm5wU3F1YXJlVG8iLCJibnBEaXZSZW1UbyIsImNvcHlUbyIsImxTaGlmdFRvIiwiZGxTaGlmdFRvIiwiY29tcGFyZVRvIiwiT05FIiwiZHJTaGlmdFRvIiwiclNoaWZ0VG8iLCJibk1vZCIsImRpdlJlbVRvIiwiQ2xhc3NpYyIsImNDb252ZXJ0IiwibW9kIiwiY1JldmVydCIsImNSZWR1Y2UiLCJjTXVsVG8iLCJtdWx0aXBseVRvIiwicmVkdWNlIiwiY1NxclRvIiwic3F1YXJlVG8iLCJjb252ZXJ0IiwicmV2ZXJ0IiwibXVsVG8iLCJzcXJUbyIsImJucEludkRpZ2l0IiwiTW9udGdvbWVyeSIsIm1wIiwiaW52RGlnaXQiLCJtcGwiLCJtcGgiLCJ1bSIsIm10MiIsIm1vbnRDb252ZXJ0IiwibW9udFJldmVydCIsIm1vbnRSZWR1Y2UiLCJtb250U3FyVG8iLCJtb250TXVsVG8iLCJibnBJc0V2ZW4iLCJibnBFeHAiLCJibk1vZFBvd0ludCIsImlzRXZlbiIsImJpdExlbmd0aCIsIm1vZFBvd0ludCIsImJuQ2xvbmUiLCJibkludFZhbHVlIiwiYm5CeXRlVmFsdWUiLCJiblNob3J0VmFsdWUiLCJibnBDaHVua1NpemUiLCJMTjIiLCJsb2ciLCJiblNpZ051bSIsImJucFRvUmFkaXgiLCJzaWdudW0iLCJjaHVua1NpemUiLCJpbnRWYWx1ZSIsImJucEZyb21SYWRpeCIsImRNdWx0aXBseSIsImRBZGRPZmZzZXQiLCJibnBGcm9tTnVtYmVyIiwidGVzdEJpdCIsImJpdHdpc2VUbyIsInNoaWZ0TGVmdCIsIm9wX29yIiwiaXNQcm9iYWJsZVByaW1lIiwibmV4dEJ5dGVzIiwiYm5Ub0J5dGVBcnJheSIsImJuRXF1YWxzIiwiYm5NaW4iLCJibk1heCIsImJucEJpdHdpc2VUbyIsIm9wX2FuZCIsImJuQW5kIiwiYm5PciIsIm9wX3hvciIsImJuWG9yIiwib3BfYW5kbm90IiwiYm5BbmROb3QiLCJibk5vdCIsImJuU2hpZnRMZWZ0IiwiYm5TaGlmdFJpZ2h0IiwibGJpdCIsImJuR2V0TG93ZXN0U2V0Qml0IiwiY2JpdCIsImJuQml0Q291bnQiLCJiblRlc3RCaXQiLCJibnBDaGFuZ2VCaXQiLCJiblNldEJpdCIsImNoYW5nZUJpdCIsImJuQ2xlYXJCaXQiLCJibkZsaXBCaXQiLCJibnBBZGRUbyIsImJuQWRkIiwiYWRkVG8iLCJiblN1YnRyYWN0IiwiYm5NdWx0aXBseSIsImJuU3F1YXJlIiwiYm5EaXZpZGUiLCJiblJlbWFpbmRlciIsImJuRGl2aWRlQW5kUmVtYWluZGVyIiwiYm5wRE11bHRpcGx5IiwiYm5wREFkZE9mZnNldCIsIk51bGxFeHAiLCJuTm9wIiwibk11bFRvIiwiblNxclRvIiwiYm5Qb3ciLCJibnBNdWx0aXBseUxvd2VyVG8iLCJibnBNdWx0aXBseVVwcGVyVG8iLCJCYXJyZXR0IiwicjIiLCJxMyIsIm11IiwiZGl2aWRlIiwiYmFycmV0dENvbnZlcnQiLCJiYXJyZXR0UmV2ZXJ0IiwiYmFycmV0dFJlZHVjZSIsIm11bHRpcGx5VXBwZXJUbyIsIm11bHRpcGx5TG93ZXJUbyIsImJhcnJldHRTcXJUbyIsImJhcnJldHRNdWxUbyIsImJuTW9kUG93IiwiYm5HQ0QiLCJnZXRMb3dlc3RTZXRCaXQiLCJibnBNb2RJbnQiLCJibk1vZEludmVyc2UiLCJzdWJ0cmFjdCIsImFkZCIsImxvd3ByaW1lcyIsImxwbGltIiwiYm5Jc1Byb2JhYmxlUHJpbWUiLCJtb2RJbnQiLCJtaWxsZXJSYWJpbiIsImJucE1pbGxlclJhYmluIiwic2hpZnRSaWdodCIsIm1vZFBvdyIsImJ5dGVWYWx1ZSIsInNob3J0VmFsdWUiLCJ0b0J5dGVBcnJheSIsImVxdWFscyIsImFuZCIsIm9yIiwieG9yIiwiYW5kTm90Iiwibm90IiwiYml0Q291bnQiLCJzZXRCaXQiLCJjbGVhckJpdCIsImZsaXBCaXQiLCJtdWx0aXBseSIsInJlbWFpbmRlciIsImRpdmlkZUFuZFJlbWFpbmRlciIsIm1vZEludmVyc2UiLCJnY2QiLCJzcXVhcmUiLCJBcmNmb3VyIiwiQVJDNGluaXQiLCJBUkM0bmV4dCIsIm5leHQiLCJwcm5nX25ld3N0YXRlIiwicm5nX3BzaXplIiwicm5nX3N0YXRlIiwicm5nX3Bvb2wiLCJybmdfcHB0ciIsInJuZ19zZWVkX2ludCIsInJuZ19zZWVkX3RpbWUiLCJnZXRUaW1lIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJ1YSIsIlVpbnQ4QXJyYXkiLCJhcHBWZXJzaW9uIiwicm5nX2dldF9ieXRlIiwicm5nX2dldF9ieXRlcyIsIlNlY3VyZVJhbmRvbSIsInBhcnNlQmlnSW50IiwibGluZWJyayIsImJ5dGUySGV4IiwicGtjczFwYWQyIiwib2FlcF9tZ2YxX2FyciIsIm9hZXBfcGFkIiwiS0pVUiIsIk1lc3NhZ2VEaWdlc3QiLCJnZXRDYW5vbmljYWxBbGdOYW1lIiwiZ2V0SGFzaExlbmd0aCIsImhleHRvcnN0ciIsImhhc2hIZXgiLCJyc3RydG9oZXgiLCJSU0FLZXkiLCJkbXAxIiwiZG1xMSIsImNvZWZmIiwiUlNBU2V0UHVibGljIiwiaXNQdWJsaWMiLCJpc1ByaXZhdGUiLCJSU0FEb1B1YmxpYyIsIlJTQUVuY3J5cHQiLCJkb1B1YmxpYyIsIlJTQUVuY3J5cHRPQUVQIiwic2V0UHVibGljIiwiZW5jcnlwdCIsImVuY3J5cHRPQUVQIiwiRUNGaWVsZEVsZW1lbnRGcCIsImZlRnBFcXVhbHMiLCJmZUZwVG9CaWdJbnRlZ2VyIiwiZmVGcE5lZ2F0ZSIsImZlRnBBZGQiLCJ0b0JpZ0ludGVnZXIiLCJmZUZwU3VidHJhY3QiLCJmZUZwTXVsdGlwbHkiLCJmZUZwU3F1YXJlIiwiZmVGcERpdmlkZSIsIkVDUG9pbnRGcCIsImN1cnZlIiwiemludiIsInBvaW50RnBHZXRYIiwiZnJvbUJpZ0ludGVnZXIiLCJwb2ludEZwR2V0WSIsInBvaW50RnBFcXVhbHMiLCJpc0luZmluaXR5IiwicG9pbnRGcElzSW5maW5pdHkiLCJwb2ludEZwTmVnYXRlIiwicG9pbnRGcEFkZCIsInR3aWNlIiwiZ2V0SW5maW5pdHkiLCJwb2ludEZwVHdpY2UiLCJwb2ludEZwTXVsdGlwbHkiLCJwb2ludEZwTXVsdGlwbHlUd28iLCJnZXRYIiwiZ2V0WSIsIm11bHRpcGx5VHdvIiwiRUNDdXJ2ZUZwIiwiaW5maW5pdHkiLCJjdXJ2ZUZwR2V0USIsImN1cnZlRnBHZXRBIiwiY3VydmVGcEdldEIiLCJjdXJ2ZUZwRXF1YWxzIiwiY3VydmVGcEdldEluZmluaXR5IiwiY3VydmVGcEZyb21CaWdJbnRlZ2VyIiwiY3VydmVGcERlY29kZVBvaW50SGV4IiwiZ2V0USIsImdldEEiLCJnZXRCIiwiZGVjb2RlUG9pbnRIZXgiLCJqc29uUGFyc2UiLCJSZWdFeHAiLCJtYXRjaCIsInJlcGxhY2UiLCJ1bnNoaWZ0Iiwic2hpZnQiLCJBU04xSEVYIiwiZ2V0TGJsZW4iLCJnZXRMIiwiZ2V0VmJsZW4iLCJnZXRWaWR4IiwiZ2V0ViIsImdldFRMViIsImdldE5leHRTaWJsaW5nSWR4IiwiZ2V0Q2hpbGRJZHgiLCJnZXROdGhDaGlsZElkeCIsImdldElkeGJ5TGlzdCIsImdldFRMVmJ5TGlzdCIsImdldFZieUxpc3QiLCJoZXh0b29pZHN0ciIsImR1bXAiLCJhc24xIiwiQVNOMU9iamVjdCIsImdldEVuY29kZWRIZXgiLCJvbW1pdF9sb25nX29jdGV0IiwiaXNBU04xSEVYIiwiQVNOMVV0aWwiLCJvaWRIZXhUb0ludCIsIng1MDkiLCJPSUQiLCJvaWQybmFtZSIsImhleHRvdXRmOCIsIm9pZG5hbWUiLCJ4NTA5RXh0TmFtZSIsImlzSGV4IiwiQmFzZTY0eCIsInN0b0JBIiwiQkF0b3MiLCJCQXRvaGV4Iiwic3RvaGV4Iiwic3RvYjY0Iiwic3RvYjY0dSIsImI2NHRvYjY0dSIsImI2NHV0b3MiLCJiNjR1dG9iNjQiLCJoZXh0b2I2NHUiLCJiNjR1dG9oZXgiLCJ1dGY4dG9iNjR1IiwiYjY0dXRvdXRmOCIsIkJ1ZmZlciIsInVyaWNtcHRvaGV4IiwiZW5jb2RlVVJJQ29tcG9uZW50QWxsIiwiaGV4dG91cmljbXAiLCJ1dGY4dG9iNjQiLCJiNjR0b3V0ZjgiLCJ1dGY4dG9oZXgiLCJoZXh0b2I2NCIsImhleHRvYjY0bmwiLCJiNjRubHRvaGV4IiwiaGV4dG9wZW0iLCJwZW10b2hleCIsImhleHRvQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsIkRhdGFWaWV3Iiwic2V0VWludDgiLCJBcnJheUJ1ZmZlcnRvaGV4IiwiYnl0ZUxlbmd0aCIsImdldFVpbnQ4IiwienVsdXRvbXNlYyIsIlVUQyIsInp1bHV0b3NlYyIsInp1bHV0b2RhdGUiLCJkYXRldG96dWx1IiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiaXB2NnRvaGV4IiwidG9Mb3dlckNhc2UiLCJzcGxpdCIsInJlcGVhdCIsImhleHRvaXB2NiIsImhleHRvaXAiLCJpcHRvaGV4IiwibmV3bGluZV90b1VuaXgiLCJuZXdsaW5lX3RvRG9zIiwiaXNJbnRlZ2VyIiwiaXNCYXNlNjQiLCJpc0Jhc2U2NFVSTCIsImlzSW50ZWdlckFycmF5IiwiaGV4dG9wb3NoZXgiLCJpbnRhcnlzdHJ0b2hleCIsIm1hcCIsInN0cmRpZmZpZHgiLCJESUdFU1RJTkZPSEVBRCIsInNoYTEiLCJzaGEyMjQiLCJzaGEyNTYiLCJzaGEzODQiLCJzaGE1MTIiLCJtZDIiLCJtZDUiLCJyaXBlbWQxNjAiLCJERUZBVUxUUFJPVklERVIiLCJobWFjbWQ1IiwiaG1hY3NoYTEiLCJobWFjc2hhMjI0IiwiaG1hY3NoYTI1NiIsImhtYWNzaGEzODQiLCJobWFjc2hhNTEyIiwiaG1hY3JpcGVtZDE2MCIsIk1ENXdpdGhSU0EiLCJTSEExd2l0aFJTQSIsIlNIQTIyNHdpdGhSU0EiLCJTSEEyNTZ3aXRoUlNBIiwiU0hBMzg0d2l0aFJTQSIsIlNIQTUxMndpdGhSU0EiLCJSSVBFTUQxNjB3aXRoUlNBIiwiTUQ1d2l0aEVDRFNBIiwiU0hBMXdpdGhFQ0RTQSIsIlNIQTIyNHdpdGhFQ0RTQSIsIlNIQTI1NndpdGhFQ0RTQSIsIlNIQTM4NHdpdGhFQ0RTQSIsIlNIQTUxMndpdGhFQ0RTQSIsIlJJUEVNRDE2MHdpdGhFQ0RTQSIsIlNIQTF3aXRoRFNBIiwiU0hBMjI0d2l0aERTQSIsIlNIQTI1NndpdGhEU0EiLCJNRDV3aXRoUlNBYW5kTUdGMSIsIlNIQTF3aXRoUlNBYW5kTUdGMSIsIlNIQTIyNHdpdGhSU0FhbmRNR0YxIiwiU0hBMjU2d2l0aFJTQWFuZE1HRjEiLCJTSEEzODR3aXRoUlNBYW5kTUdGMSIsIlNIQTUxMndpdGhSU0FhbmRNR0YxIiwiUklQRU1EMTYwd2l0aFJTQWFuZE1HRjEiLCJDUllQVE9KU01FU1NBR0VESUdFU1ROQU1FIiwiTUQ1IiwiU0hBMSIsIlNIQTIyNCIsIlJJUEVNRDE2MCIsImdldERpZ2VzdEluZm9IZXgiLCJnZXRQYWRkZWREaWdlc3RJbmZvSGV4IiwiZGlnZXN0U3RyaW5nIiwiZGlnZXN0SGV4IiwicHJvdiIsInNoYTI1NkhleCIsInNoYTUxMkhleCIsIlNFQ1VSRVJBTkRPTUdFTiIsImdldFJhbmRvbUhleE9mTmJ5dGVzIiwiZ2V0UmFuZG9tQmlnSW50ZWdlck9mTmJ5dGVzIiwiZ2V0UmFuZG9tSGV4T2ZOYml0cyIsImdldFJhbmRvbUJpZ0ludGVnZXJPZk5iaXRzIiwiZ2V0UmFuZG9tQmlnSW50ZWdlclplcm9Ub01heCIsImdldFJhbmRvbUJpZ0ludGVnZXJNaW5Ub01heCIsInNldEFsZ0FuZFByb3ZpZGVyIiwibWQiLCJ1cGRhdGVTdHJpbmciLCJ1cGRhdGVIZXgiLCJkaWdlc3QiLCJzamNsIiwiY29kZWMiLCJ0b0JpdHMiLCJmcm9tQml0cyIsImFsZ05hbWUiLCJwcm92TmFtZSIsIkhBU0hMRU5HVEgiLCJNYWMiLCJhbGdQcm92IiwibWFjIiwicGFzcyIsImRvRmluYWwiLCJkb0ZpbmFsU3RyaW5nIiwiZG9GaW5hbEhleCIsInNldFBhc3N3b3JkIiwidXRmOCIsInJzdHIiLCJiNjQiLCJiNjR1IiwiU2lnbmF0dXJlIiwiX3NldEFsZ05hbWVzIiwibWRBbGdOYW1lIiwicHVia2V5QWxnTmFtZSIsIl96ZXJvUGFkZGluZ09mU2lnbmF0dXJlIiwiS0VZVVRJTCIsInBydktleSIsInB1YktleSIsInNpZ24iLCJzSGFzaEhleCIsImVjcHJ2aGV4IiwiZWNjdXJ2ZW5hbWUiLCJFQ0RTQSIsImhTaWduIiwic2lnbkhleCIsInNpZ25XaXRoTWVzc2FnZUhhc2hQU1MiLCJwc3NTYWx0TGVuIiwic2lnbldpdGhNZXNzYWdlSGFzaCIsIkRTQSIsInNpZ25TdHJpbmciLCJlY3B1YmhleCIsInZlcmlmeUhleCIsInZlcmlmeVdpdGhNZXNzYWdlSGFzaFBTUyIsInZlcmlmeVdpdGhNZXNzYWdlSGFzaCIsImFsZ1Byb3ZOYW1lIiwiaW5pdFBhcmFtcyIsInBzc3NhbHRsZW4iLCJwcnZrZXlwZW0iLCJwcnZrZXlwYXMiLCJDaXBoZXIiLCJnZXRBbGdCeUtleUFuZE5hbWUiLCJkZWNyeXB0IiwiZGVjcnlwdE9BRVAiLCJvaWRoZXgybmFtZSIsImFkZDJEIiwidHdpY2UyRCIsImdldEJpZ1JhbmRvbSIsInNldE5hbWVkQ3VydmUiLCJlY3BhcmFtcyIsIkVDUGFyYW1ldGVyREIiLCJnZXRCeU5hbWUiLCJwcnZLZXlIZXgiLCJwdWJLZXlIZXgiLCJjdXJ2ZU5hbWUiLCJzZXRQcml2YXRlS2V5SGV4Iiwic2V0UHVibGljS2V5SGV4IiwiZ2V0UHVibGljS2V5WFlIZXgiLCJrZXlsZW4iLCJnZXRTaG9ydE5JU1RQQ3VydmVOYW1lIiwiZ2VuZXJhdGVLZXlQYWlySGV4IiwiYmlSU1NpZ1RvQVNOMVNpZyIsImZyb21CeXRlQXJyYXlVbnNpZ25lZCIsInNlcmlhbGl6ZVNpZyIsInBhcnNlU2lnSGV4IiwiZGVjb2RlRnJvbUhleCIsInZlcmlmeVJhdyIsIkJpdGNvaW4iLCJwYXJzZVNpZyIsImRlY29kZUZyb20iLCJ0b0J5dGVBcnJheVNpZ25lZCIsInBhcnNlU2lnQ29tcGFjdCIsInJlYWRQS0NTNVBydktleUhleCIsImdldE5hbWUiLCJyZWFkUEtDUzhQcnZLZXlIZXgiLCJyZWFkUEtDUzhQdWJLZXlIZXgiLCJyZWFkQ2VydFB1YktleUhleCIsInBydiIsInB1YiIsInBhcnNlU2lnSGV4SW5IZXhSUyIsImFzbjFTaWdUb0NvbmNhdFNpZyIsImNvbmNhdFNpZ1RvQVNOMVNpZyIsImhleFJTU2lnVG9BU04xU2lnIiwiREVSSW50ZWdlciIsImJpZ2ludCIsIkRFUlNlcXVlbmNlIiwiYXJyYXkiLCJyZWdpc3QiLCJBRVMiLCJUcmlwbGVERVMiLCJERVMiLCJpdiIsImNpcGhlcnRleHQiLCJwcm9jIiwiZXByb2MiLCJpdmxlbiIsImNpcGhlciIsIml2c2FsdCIsImtleWhleCIsIml2aGV4IiwidmVyc2lvbiIsInBhcnNlUEtDUzVQRU0iLCJnZXRLZXlBbmRVbnVzZWRJdkJ5UGFzc2NvZGVBbmRJdnNhbHQiLCJkZWNyeXB0S2V5QjY0IiwiZ2V0RGVjcnlwdGVkS2V5SGV4IiwiZ2V0RW5jcnlwdGVkUEtDUzVQRU1Gcm9tUHJ2S2V5SGV4IiwidG9VcHBlckNhc2UiLCJwYXJzZUhleE9mRW5jcnlwdGVkUEtDUzgiLCJlbmNyeXB0aW9uU2NoZW1lQWxnIiwiZW5jcnlwdGlvblNjaGVtZUlWIiwicGJrZGYyU2FsdCIsInBia2RmMkl0ZXIiLCJnZXRQQktERjJLZXlIZXhGcm9tUGFyYW0iLCJQQktERjIiLCJrZXlTaXplIiwiaXRlcmF0aW9ucyIsIl9nZXRQbGFpblBLQ1M4SGV4RnJvbUVuY3J5cHRlZFBLQ1M4UEVNIiwiZ2V0S2V5RnJvbUVuY3J5cHRlZFBLQ1M4UEVNIiwiZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4IiwicGFyc2VQbGFpblByaXZhdGVQS0NTOEhleCIsImFsZ3BhcmFtIiwiYWxnb2lkIiwia2V5aWR4IiwiZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4UEVNIiwiX2dldEtleUZyb21QdWJsaWNQS0NTOEhleCIsInBhcnNlUHVibGljUmF3UlNBS2V5SGV4IiwicGFyc2VQdWJsaWNQS0NTOEhleCIsInh5IiwiZHAiLCJkcSIsImNvIiwicWkiLCJzZXRQcml2YXRlRXgiLCJzZXRQcml2YXRlIiwiZ2V0UHVibGljS2V5RnJvbUNlcnRQRU0iLCJnZW5lcmF0ZUtleXBhaXIiLCJnZW5lcmF0ZSIsInBydktleU9iaiIsInB1YktleU9iaiIsImdldFBFTSIsIkRFUk9iamVjdElkZW50aWZpZXIiLCJuZXdPYmplY3QiLCJTdWJqZWN0UHVibGljS2V5SW5mbyIsInNlcSIsIm9jdHN0ciIsInRhZyIsIm9pZCIsImJpdHN0ciIsImdldEtleUZyb21DU1JQRU0iLCJnZXRLZXlGcm9tQ1NSSGV4IiwicGFyc2VDU1JIZXgiLCJwOHB1YmtleWhleCIsImdldEpXS0Zyb21LZXkiLCJnZXRQb3NBcnJheU9mQ2hpbGRyZW5Gcm9tSGV4IiwiZ2V0SGV4VmFsdWVBcnJheU9mQ2hpbGRyZW5Gcm9tSGV4IiwicmVhZFByaXZhdGVLZXlGcm9tUEVNU3RyaW5nIiwicmVhZFBLQ1M1UHViS2V5SGV4IiwicmVhZENlcnRIZXgiLCJnZXRQdWJsaWNLZXlIZXgiLCJfUkVfSEVYREVDT05MWSIsImNvbXBpbGUiLCJfcnNhc2lnbl9nZXRIZXhQYWRkZWREaWdlc3RJbmZvRm9yU3RyaW5nIiwiZG9Qcml2YXRlIiwicHNzX21nZjFfc3RyIiwic2lnblBTUyIsIl9yc2FzaWduX2dldERlY3J5cHRTaWduYXR1cmVCSSIsIl9yc2FzaWduX2dldEhleERpZ2VzdEluZm9Gcm9tU2lnIiwiX3JzYXNpZ25fZ2V0QWxnTmFtZUFuZEhhc2hGcm9tSGV4RGlzZ2VzdEluZm8iLCJ2ZXJpZnlQU1MiLCJTQUxUX0xFTl9ITEVOIiwiU0FMVF9MRU5fTUFYIiwiU0FMVF9MRU5fUkVDT1ZFUiIsImZvZmZzZXQiLCJhRXh0SW5mbyIsImdldFZlcnNpb24iLCJnZXRTZXJpYWxOdW1iZXJIZXgiLCJnZXRTaWduYXR1cmVBbGdvcml0aG1GaWVsZCIsImdldElzc3VlckhleCIsImdldElzc3VlclN0cmluZyIsImhleDJkbiIsImdldFN1YmplY3RIZXgiLCJnZXRTdWJqZWN0U3RyaW5nIiwiZ2V0Tm90QmVmb3JlIiwiZ2V0Tm90QWZ0ZXIiLCJnZXRQdWJsaWNLZXlJZHgiLCJnZXRQdWJsaWNLZXlDb250ZW50SWR4IiwiZ2V0UHVibGljS2V5IiwiZ2V0U2lnbmF0dXJlQWxnb3JpdGhtTmFtZSIsImdldFNpZ25hdHVyZVZhbHVlSGV4IiwidmVyaWZ5U2lnbmF0dXJlIiwicGFyc2VFeHQiLCJjcml0aWNhbCIsInZpZHgiLCJnZXRFeHRJbmZvIiwibmFtZTJvaWQiLCJnZXRFeHRCYXNpY0NvbnN0cmFpbnRzIiwiY0EiLCJwYXRoTGVuIiwiZ2V0RXh0S2V5VXNhZ2VCaW4iLCJnZXRFeHRLZXlVc2FnZVN0cmluZyIsIktFWVVTQUdFX05BTUUiLCJnZXRFeHRTdWJqZWN0S2V5SWRlbnRpZmllciIsImdldEV4dEF1dGhvcml0eUtleUlkZW50aWZpZXIiLCJnZXRFeHRFeHRLZXlVc2FnZU5hbWUiLCJnZXRFeHRTdWJqZWN0QWx0TmFtZSIsImdldEV4dFN1YmplY3RBbHROYW1lMiIsImdldEV4dENSTERpc3RyaWJ1dGlvblBvaW50c1VSSSIsImdldEV4dEFJQUluZm8iLCJvY3NwIiwiY2Fpc3N1ZXIiLCJnZXRFeHRDZXJ0aWZpY2F0ZVBvbGljaWVzIiwiY3BzIiwidW5vdGljZSIsInJlYWRDZXJ0UEVNIiwiZ2V0SW5mbyIsImhleDJyZG4iLCJoZXgyYXR0clR5cGVWYWx1ZSIsIm9pZDJhdHlwZSIsImdldFB1YmxpY0tleUluZm9Qcm9wT2ZDZXJ0UEVNIiwiaXNTYWZlSlNPTlN0cmluZyIsInBhcnNlSldTIiwicGFyc2VkSldTIiwic2lndmFsSCIsImhlYWRCNjRVIiwicGF5bG9hZEI2NFUiLCJzaWd2YWxCNjRVIiwic2kiLCJzaWd2YWxCSSIsImhlYWRTIiwicGF5bG9hZFMiLCJyZWFkU2FmZUpTT05TdHJpbmciLCJqd3NhbGcyc2lnYWxnIiwiaEFTTjFTaWciLCJoZWFkZXJQUCIsInBheWxvYWRQUCIsInNpZ0hleCIsInZlcmlmeUpXVCIsImluQXJyYXkiLCJpbmNsdWRlZEFycmF5IiwiSW50RGF0ZSIsImdldE5vdyIsInZlcmlmeUF0IiwiZ3JhY2VQZXJpb2QiLCJqdGkiLCJIUzI1NiIsIkhTMzg0IiwiSFM1MTIiLCJSUzI1NiIsIlJTMzg0IiwiUlM1MTIiLCJFUzI1NiIsIkVTMzg0IiwiUFMyNTYiLCJQUzM4NCIsIlBTNTEyIiwibm9uZSIsImdldEVuY29kZWRTaWduYXR1cmVWYWx1ZUZyb21KV1MiLCJnZXRKV0t0aHVtYnByaW50IiwiZ2V0WnVsdSIsImludERhdGUyVVRDU3RyaW5nIiwidG9VVENTdHJpbmciLCJpbnREYXRlMlp1bHUiLCJleHBvcnRzIiwib2lkYyIsImlzT2lkYyIsIlVybFV0aWxpdHkiLCJhZGRRdWVyeVBhcmFtIiwiaXNPQXV0aCIsInBhcnNlVXJsRnJhZ21lbnQiLCJkZWxpbWl0ZXIiLCJnbG9iYWwiLCJocmVmIiwiaWR4IiwibGFzdEluZGV4T2YiLCJwYXJhbXMiLCJyZWdleCIsImNvdW50ZXIiLCJleGVjIiwicHJvcCIsIl9ub25jZSIsImNyZWF0ZWQiLCJzdG9yYWdlU3RyaW5nIiwiX2lkIiwiX2NyZWF0ZWQiLCJzdG9yYWdlIiwiYWdlIiwiY3V0b2ZmIiwicHJvbWlzZXMiLCJhbGwiLCJndWlkSG9sZGVyIiwiZ3VpZFJlc3BvbnNlIiwiT2lkY1Njb3BlIiwic2Vzc2lvbl9zdGF0ZSIsInRva2VuX3R5cGUiLCJleHBpcmVzX2luIiwiZXhwaXJlc19hdCIsInNjb3BlcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJTaWxlbnRSZW5ld1NlcnZpY2VDdG9yIiwiU2lsZW50UmVuZXdTZXJ2aWNlIiwiU2Vzc2lvbk1vbml0b3JDdG9yIiwiVG9rZW5SZXZvY2F0aW9uQ2xpZW50Q3RvciIsIlVzZXJNYW5hZ2VyU2V0dGluZ3MiLCJfZXZlbnRzIiwiVXNlck1hbmFnZXJFdmVudHMiLCJfc2lsZW50UmVuZXdTZXJ2aWNlIiwiYXV0b21hdGljU2lsZW50UmVuZXciLCJzdGFydFNpbGVudFJlbmV3IiwibW9uaXRvclNlc3Npb24iLCJfc2Vzc2lvbk1vbml0b3IiLCJfdG9rZW5SZXZvY2F0aW9uQ2xpZW50IiwiZ2V0VXNlciIsIl9sb2FkVXNlciIsInVzZXIiLCJsb2FkIiwicmVtb3ZlVXNlciIsInN0b3JlVXNlciIsInVubG9hZCIsInNpZ25pblJlZGlyZWN0IiwiX3NpZ25pblN0YXJ0IiwiX3JlZGlyZWN0TmF2aWdhdG9yIiwic2lnbmluUmVkaXJlY3RDYWxsYmFjayIsIl9zaWduaW5FbmQiLCJzaWduaW5Qb3B1cCIsInBvcHVwX3JlZGlyZWN0X3VyaSIsIl9zaWduaW4iLCJfcG9wdXBOYXZpZ2F0b3IiLCJzdGFydFVybCIsInBvcHVwV2luZG93RmVhdHVyZXMiLCJwb3B1cFdpbmRvd1RhcmdldCIsInNpZ25pblBvcHVwQ2FsbGJhY2siLCJfc2lnbmluQ2FsbGJhY2siLCJjYXRjaCIsImVyciIsInNpZ25pblNpbGVudCIsInNpbGVudF9yZWRpcmVjdF91cmkiLCJzZXRJZFRva2VuIiwiaW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3IiwiX2lmcmFtZU5hdmlnYXRvciIsInNpbGVudFJlcXVlc3RUaW1lb3V0Iiwic2lnbmluU2lsZW50Q2FsbGJhY2siLCJxdWVyeVNlc3Npb25TdGF0dXMiLCJuYXZSZXNwb25zZSIsInNpZ25pblJlc3BvbnNlIiwic2lkIiwibmF2aWdhdG9yUGFyYW1zIiwicHJlcGFyZSIsIm5hdmlnYXRlIiwiY2xvc2UiLCJjYWxsYmFjayIsInNpZ25vdXRSZWRpcmVjdCIsInBvc3RMb2dvdXRSZWRpcmVjdFVyaSIsIl9zaWdub3V0U3RhcnQiLCJzaWdub3V0UmVkaXJlY3RDYWxsYmFjayIsIl9zaWdub3V0RW5kIiwic2lnbm91dFBvcHVwIiwicG9wdXBfcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpIiwiX3NpZ25vdXQiLCJzaWdub3V0UG9wdXBDYWxsYmFjayIsImtlZXBPcGVuIiwicmV2b2tlUHJvbWlzZSIsInJldm9rZUFjY2Vzc1Rva2VuT25TaWdub3V0IiwiX3Jldm9rZUludGVybmFsIiwic2lnbm91dFJlcXVlc3QiLCJzaWdub3V0UmVzcG9uc2UiLCJyZXZva2VBY2Nlc3NUb2tlbiIsInN1Y2Nlc3MiLCJyZXF1aXJlZCIsInJldm9rZSIsInN0YXJ0Iiwic3RvcFNpbGVudFJlbmV3Iiwic3RvcCIsIl91c2VyU3RvcmUiLCJfdXNlclN0b3JlS2V5IiwicmVkaXJlY3ROYXZpZ2F0b3IiLCJwb3B1cE5hdmlnYXRvciIsImlmcmFtZU5hdmlnYXRvciIsInVzZXJTdG9yZSIsIkRlZmF1bHRBY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSIsIkRlZmF1bHRDaGVja1Nlc3Npb25JbnRlcnZhbCIsImNoZWNrU2Vzc2lvbkludGVydmFsIiwic3RvcENoZWNrU2Vzc2lvbk9uRXJyb3IiLCJhY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSIsIlJlZGlyZWN0TmF2aWdhdG9yIiwiUG9wdXBOYXZpZ2F0b3IiLCJJRnJhbWVOYXZpZ2F0b3IiLCJfcG9wdXBfcmVkaXJlY3RfdXJpIiwiX3BvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSIsIl9wb3B1cFdpbmRvd0ZlYXR1cmVzIiwiX3BvcHVwV2luZG93VGFyZ2V0IiwiX3NpbGVudF9yZWRpcmVjdF91cmkiLCJfc2lsZW50UmVxdWVzdFRpbWVvdXQiLCJfYXV0b21hdGljU2lsZW50UmVuZXciLCJfaW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3IiwiX2FjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lIiwiX21vbml0b3JTZXNzaW9uIiwiX2NoZWNrU2Vzc2lvbkludGVydmFsIiwiX3N0b3BDaGVja1Nlc3Npb25PbkVycm9yIiwiX3Jldm9rZUFjY2Vzc1Rva2VuT25TaWdub3V0IiwicG9wdXAiLCJQb3B1cFdpbmRvdyIsIm5vdGlmeU9wZW5lciIsIkNoZWNrRm9yUG9wdXBDbG9zZWRJbnRlcnZhbCIsIkRlZmF1bHRQb3B1cEZlYXR1cmVzIiwiRGVmYXVsdFBvcHVwVGFyZ2V0IiwiX3Byb21pc2UiLCJfcmVzb2x2ZSIsIl9yZWplY3QiLCJ0YXJnZXQiLCJmZWF0dXJlcyIsIl9wb3B1cCIsIl9jaGVja0ZvclBvcHVwQ2xvc2VkVGltZXIiLCJfY2hlY2tGb3JQb3B1cENsb3NlZCIsImJpbmQiLCJfZXJyb3IiLCJfY2FsbGJhY2siLCJmb2N1cyIsInByb21pc2UiLCJfc3VjY2VzcyIsIl9jbGVhbnVwIiwiY2xvc2VkIiwib3BlbmVyIiwiZnJhbWUiLCJJRnJhbWVXaW5kb3ciLCJub3RpZnlQYXJlbnQiLCJEZWZhdWx0VGltZW91dCIsIl9ib3VuZE1lc3NhZ2VFdmVudCIsIl9tZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9mcmFtZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwidmlzaWJpbGl0eSIsInBvc2l0aW9uIiwid2lkdGgiLCJoZWlnaHQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJ0aW1lb3V0IiwiX3RpbWVyIiwic2V0VGltZW91dCIsIl90aW1lb3V0Iiwic3JjIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNsZWFyVGltZW91dCIsInJlbW92ZUNoaWxkIiwib3JpZ2luIiwiX29yaWdpbiIsInNvdXJjZSIsImNvbnRlbnRXaW5kb3ciLCJwYXJlbnQiLCJwb3N0TWVzc2FnZSIsInByb3RvY29sIiwiaG9zdCIsIl91c2VyTG9hZGVkIiwiRXZlbnQiLCJfdXNlclVubG9hZGVkIiwiX3NpbGVudFJlbmV3RXJyb3IiLCJfdXNlclNpZ25lZE91dCIsIl91c2VyU2Vzc2lvbkNoYW5nZWQiLCJyYWlzZUV2ZW50IiwicmFpc2UiLCJhZGRVc2VyTG9hZGVkIiwiYWRkSGFuZGxlciIsInJlbW92ZVVzZXJMb2FkZWQiLCJyZW1vdmVIYW5kbGVyIiwiYWRkVXNlclVubG9hZGVkIiwicmVtb3ZlVXNlclVubG9hZGVkIiwiYWRkU2lsZW50UmVuZXdFcnJvciIsInJlbW92ZVNpbGVudFJlbmV3RXJyb3IiLCJfcmFpc2VTaWxlbnRSZW5ld0Vycm9yIiwiYWRkVXNlclNpZ25lZE91dCIsInJlbW92ZVVzZXJTaWduZWRPdXQiLCJfcmFpc2VVc2VyU2lnbmVkT3V0IiwiYWRkVXNlclNlc3Npb25DaGFuZ2VkIiwicmVtb3ZlVXNlclNlc3Npb25DaGFuZ2VkIiwiX3JhaXNlVXNlclNlc3Npb25DaGFuZ2VkIiwiYWNjZXNzVG9rZW5FeHBpcmluZ1RpbWVyIiwiVGltZXIiLCJhY2Nlc3NUb2tlbkV4cGlyZWRUaW1lciIsIl9hY2Nlc3NUb2tlbkV4cGlyaW5nIiwiX2FjY2Vzc1Rva2VuRXhwaXJlZCIsImNvbnRhaW5lciIsImV4cGlyaW5nIiwiY2FuY2VsIiwiZXhwaXJlZCIsImFkZEFjY2Vzc1Rva2VuRXhwaXJpbmciLCJyZW1vdmVBY2Nlc3NUb2tlbkV4cGlyaW5nIiwiYWRkQWNjZXNzVG9rZW5FeHBpcmVkIiwicmVtb3ZlQWNjZXNzVG9rZW5FeHBpcmVkIiwiVGltZXJEdXJhdGlvbiIsIm5vd0Z1bmMiLCJfbm93RnVuYyIsImV4cGlyYXRpb24iLCJfdGltZXJIYW5kbGUiLCJfbmFtZSIsIl9leHBpcmF0aW9uIiwidGltZXJEdXJhdGlvbiIsImRpZmYiLCJfY2FsbGJhY2tzIiwiZmluZEluZGV4IiwidXNlck1hbmFnZXIiLCJfdXNlck1hbmFnZXIiLCJfdG9rZW5FeHBpcmluZyIsImV2ZW50cyIsIkNoZWNrU2Vzc2lvbklGcmFtZUN0b3IiLCJfQ2hlY2tTZXNzaW9uSUZyYW1lQ3RvciIsIl9zdGFydCIsIl9zdG9wIiwiX3N1YiIsIl9zaWQiLCJfY2hlY2tTZXNzaW9uSUZyYW1lIiwiaW50ZXJ2YWwiLCJzdG9wT25FcnJvciIsInJhaXNlVXNlclNpZ25lZE91dEV2ZW50Iiwic2Vzc2lvbiIsIkRlZmF1bHRJbnRlcnZhbCIsIl91cmwiLCJfaW50ZXJ2YWwiLCJfc3RvcE9uRXJyb3IiLCJfZnJhbWVfb3JpZ2luIiwiX3Nlc3Npb25fc3RhdGUiLCJBY2Nlc3NUb2tlblR5cGVIaW50IiwiX1hNTEh0dHBSZXF1ZXN0Q3RvciIsImFjY2Vzc1Rva2VuIiwiX3Jldm9rZSIsInhociIsIkNvcmRvdmFQb3B1cFdpbmRvdyIsIl9pc0luQXBwQnJvd3Nlckluc3RhbGxlZCIsImNvcmRvdmFNZXRhZGF0YSIsInNvbWUiLCJjb3Jkb3ZhIiwicmVxdWlyZSIsIkluQXBwQnJvd3NlciIsIl9leGl0Q2FsbGJhY2tFdmVudCIsIl9leGl0Q2FsbGJhY2siLCJfbG9hZFN0YXJ0Q2FsbGJhY2tFdmVudCIsIl9sb2FkU3RhcnRDYWxsYmFjayIsImV2ZW50Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsTztBQ1ZBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztpQkNuQ1NBLEc7Ozs7Ozs7Ozt3QkFDQUMsVTs7Ozs7Ozs7O2dDQUNBQyxrQjs7Ozs7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eE0sRUFBNE0sR0FBNU0sRUFBZ04sR0FBaE4sRUFBb04sR0FBcE4sRUFBd04sR0FBeE4sRUFBNE4sR0FBNU4sRUFBZ08sR0FBaE8sRUFBb08sR0FBcE8sRUFBd08sR0FBeE8sRUFBNE8sR0FBNU8sRUFBZ1AsR0FBaFAsRUFBb1AsR0FBcFAsRUFBd1AsR0FBeFAsRUFBNFAsR0FBNVAsRUFBZ1EsR0FBaFEsRUFBb1EsR0FBcFEsRUFBd1EsR0FBeFEsRUFBNFEsR0FBNVEsRUFBZ1IsR0FBaFIsRUFBb1IsR0FBcFIsRUFBd1IsR0FBeFIsRUFBNFIsR0FBNVIsRUFBZ1MsR0FBaFMsRUFBb1MsR0FBcFMsRUFBd1MsR0FBeFMsRUFBNFMsR0FBNVMsRUFBZ1QsR0FBaFQsRUFBb1QsR0FBcFQsRUFBd1QsR0FBeFQsRUFBNFQsR0FBNVQsRUFBZ1UsR0FBaFUsRUFBb1UsR0FBcFUsRUFBd1UsR0FBeFUsRUFBNFUsR0FBNVUsRUFBZ1YsR0FBaFYsRUFBb1YsR0FBcFYsRUFBd1YsR0FBeFYsRUFBNFYsR0FBNVYsRUFBZ1csR0FBaFcsRUFBb1csR0FBcFcsRUFBd1csR0FBeFcsRUFBNFcsR0FBNVcsRUFBZ1gsR0FBaFgsRUFBb1gsR0FBcFgsRUFBd1gsR0FBeFgsRUFBNFgsR0FBNVgsRUFBZ1ksR0FBaFksRUFBb1ksR0FBcFksRUFBd1ksR0FBeFksRUFBNFksR0FBNVksRUFBZ1osR0FBaFosRUFBb1osR0FBcFosRUFBd1osR0FBeFosRUFBNFosR0FBNVosRUFBZ2EsR0FBaGEsRUFBb2EsR0FBcGEsRUFBd2EsR0FBeGEsRUFBNGEsR0FBNWEsRUFBZ2IsR0FBaGIsRUFBb2IsR0FBcGIsRUFBd2IsR0FBeGIsRUFBNGIsR0FBNWIsRUFBZ2MsR0FBaGMsRUFBb2MsR0FBcGMsRUFBd2MsR0FBeGMsRUFBNGMsR0FBNWMsRUFBZ2QsR0FBaGQsRUFBb2QsR0FBcGQsRUFBd2QsR0FBeGQsRUFBNGQsR0FBNWQsRUFBZ2UsR0FBaGUsRUFBb2UsR0FBcGUsRUFBd2UsR0FBeGUsRUFBNGUsR0FBNWUsRUFBZ2YsR0FBaGYsRUFBb2YsR0FBcGYsRUFBd2YsR0FBeGYsRUFBNGYsR0FBNWYsRUFBZ2dCLEdBQWhnQixFQUFvZ0IsR0FBcGdCLEVBQXdnQixHQUF4Z0IsRUFBNGdCLEdBQTVnQixFQUFnaEIsR0FBaGhCLEVBQW9oQixHQUFwaEIsRUFBd2hCLEdBQXhoQixFQUE0aEIsR0FBNWhCLEVBQWdpQixHQUFoaUIsRUFBb2lCLEdBQXBpQixFQUF3aUIsR0FBeGlCLEVBQTRpQixHQUE1aUIsRUFBZ2pCLEdBQWhqQixFQUFvakIsR0FBcGpCLEVBQXdqQixHQUF4akIsRUFBNGpCLEdBQTVqQixFQUFna0IsR0FBaGtCLEVBQW9rQixHQUFwa0IsRUFBd2tCLEdBQXhrQixFQUE0a0IsR0FBNWtCLEVBQWdsQixHQUFobEIsRUFBb2xCLEdBQXBsQixFQUF3bEIsR0FBeGxCLEVBQTRsQixHQUE1bEIsRUFBZ21CLEdBQWhtQixFQUFvbUIsR0FBcG1CLEVBQXdtQixHQUF4bUIsRUFBNG1CLEdBQTVtQixFQUFnbkIsR0FBaG5CLEVBQW9uQixHQUFwbkIsRUFBd25CLEdBQXhuQixFQUE0bkIsR0FBNW5CLEVBQWdvQixHQUFob0IsQ0FBZCxDQUFtcEIsSUFBSUMsUUFBTSxDQUFDLEtBQUcsRUFBSixJQUFRRCxVQUFVQSxVQUFVeGQsTUFBVixHQUFpQixDQUEzQixDQUFsQixDQUFnRCxTQUFTMGQsaUJBQVQsQ0FBMkJ0VyxDQUEzQixFQUE2QjtBQUFDLE9BQUk2QyxDQUFKO0FBQUEsT0FBTUksSUFBRSxLQUFLa0wsR0FBTCxFQUFSLENBQW1CLElBQUdsTCxFQUFFeUIsQ0FBRixJQUFLLENBQUwsSUFBUXpCLEVBQUUsQ0FBRixLQUFNbVQsVUFBVUEsVUFBVXhkLE1BQVYsR0FBaUIsQ0FBM0IsQ0FBakIsRUFBK0M7QUFBQyxVQUFJaUssSUFBRSxDQUFOLEVBQVFBLElBQUV1VCxVQUFVeGQsTUFBcEIsRUFBMkIsRUFBRWlLLENBQTdCLEVBQStCO0FBQUMsV0FBR0ksRUFBRSxDQUFGLEtBQU1tVCxVQUFVdlQsQ0FBVixDQUFULEVBQXNCO0FBQUMsZ0JBQU8sSUFBUDtBQUFZO0FBQUMsYUFBTyxLQUFQO0FBQWEsUUFBR0ksRUFBRTROLE1BQUYsRUFBSCxFQUFjO0FBQUMsWUFBTyxLQUFQO0FBQWEsUUFBRSxDQUFGLENBQUksT0FBTWhPLElBQUV1VCxVQUFVeGQsTUFBbEIsRUFBeUI7QUFBQyxTQUFJMkssSUFBRTZTLFVBQVV2VCxDQUFWLENBQU47QUFBQSxTQUFtQkssSUFBRUwsSUFBRSxDQUF2QixDQUF5QixPQUFNSyxJQUFFa1QsVUFBVXhkLE1BQVosSUFBb0IySyxJQUFFOFMsS0FBNUIsRUFBa0M7QUFBQzlTLFlBQUc2UyxVQUFVbFQsR0FBVixDQUFIO0FBQWtCLFVBQUVELEVBQUVzVCxNQUFGLENBQVNoVCxDQUFULENBQUYsQ0FBYyxPQUFNVixJQUFFSyxDQUFSLEVBQVU7QUFBQyxXQUFHSyxJQUFFNlMsVUFBVXZULEdBQVYsQ0FBRixJQUFrQixDQUFyQixFQUF1QjtBQUFDLGdCQUFPLEtBQVA7QUFBYTtBQUFDO0FBQUMsV0FBT0ksRUFBRXVULFdBQUYsQ0FBY3hXLENBQWQsQ0FBUDtBQUF3QixXQUFTeVcsY0FBVCxDQUF3QjdULENBQXhCLEVBQTBCO0FBQUMsT0FBSUYsSUFBRSxLQUFLd1QsUUFBTCxDQUFjM0ssV0FBV21ELEdBQXpCLENBQU4sQ0FBb0MsSUFBSXhMLElBQUVSLEVBQUVxVCxlQUFGLEVBQU4sQ0FBMEIsSUFBRzdTLEtBQUcsQ0FBTixFQUFRO0FBQUMsWUFBTyxLQUFQO0FBQWEsUUFBSVAsSUFBRUQsRUFBRWdVLFVBQUYsQ0FBYXhULENBQWIsQ0FBTixDQUFzQk4sSUFBR0EsSUFBRSxDQUFILElBQU8sQ0FBVCxDQUFXLElBQUdBLElBQUV3VCxVQUFVeGQsTUFBZixFQUFzQjtBQUFDZ0ssU0FBRXdULFVBQVV4ZCxNQUFaO0FBQW1CLFFBQUlxSyxJQUFFeUksS0FBTixDQUFZLEtBQUksSUFBSTFMLElBQUUsQ0FBVixFQUFZQSxJQUFFNEMsQ0FBZCxFQUFnQixFQUFFNUMsQ0FBbEIsRUFBb0I7QUFBQ2lELE9BQUU4SixPQUFGLENBQVVxSixVQUFVNU8sS0FBS2EsS0FBTCxDQUFXYixLQUFLdEMsTUFBTCxLQUFja1IsVUFBVXhkLE1BQW5DLENBQVYsQ0FBVixFQUFpRSxJQUFJeUssSUFBRUosRUFBRTBULE1BQUYsQ0FBU2hVLENBQVQsRUFBVyxJQUFYLENBQU4sQ0FBdUIsSUFBR1UsRUFBRW9MLFNBQUYsQ0FBWWxELFdBQVdtRCxHQUF2QixLQUE2QixDQUE3QixJQUFnQ3JMLEVBQUVvTCxTQUFGLENBQVkvTCxDQUFaLEtBQWdCLENBQW5ELEVBQXFEO0FBQUMsV0FBSUcsSUFBRSxDQUFOLENBQVEsT0FBTUEsTUFBSUssQ0FBSixJQUFPRyxFQUFFb0wsU0FBRixDQUFZL0wsQ0FBWixLQUFnQixDQUE3QixFQUErQjtBQUFDVyxhQUFFQSxFQUFFME4sU0FBRixDQUFZLENBQVosRUFBYyxJQUFkLENBQUYsQ0FBc0IsSUFBRzFOLEVBQUVvTCxTQUFGLENBQVlsRCxXQUFXbUQsR0FBdkIsS0FBNkIsQ0FBaEMsRUFBa0M7QUFBQyxrQkFBTyxLQUFQO0FBQWE7QUFBQyxZQUFHckwsRUFBRW9MLFNBQUYsQ0FBWS9MLENBQVosS0FBZ0IsQ0FBbkIsRUFBcUI7QUFBQyxnQkFBTyxLQUFQO0FBQWE7QUFBQztBQUFDLFdBQU8sSUFBUDtBQUFZLGFBQVdJLFNBQVgsQ0FBcUI0TyxTQUFyQixHQUErQk4sWUFBL0IsQ0FBNEM3RixXQUFXekksU0FBWCxDQUFxQnlLLE9BQXJCLEdBQTZCaUUsVUFBN0IsQ0FBd0NqRyxXQUFXekksU0FBWCxDQUFxQm1LLFNBQXJCLEdBQStCMkUsWUFBL0IsQ0FBNENyRyxXQUFXekksU0FBWCxDQUFxQjBJLFVBQXJCLEdBQWdDdUcsYUFBaEMsQ0FBOEN4RyxXQUFXekksU0FBWCxDQUFxQm1QLFNBQXJCLEdBQStCUyxZQUEvQixDQUE0Q25ILFdBQVd6SSxTQUFYLENBQXFCOFEsU0FBckIsR0FBK0JGLFlBQS9CLENBQTRDbkksV0FBV3pJLFNBQVgsQ0FBcUJtUixLQUFyQixHQUEyQkYsUUFBM0IsQ0FBb0N4SSxXQUFXekksU0FBWCxDQUFxQitPLFNBQXJCLEdBQStCMkMsWUFBL0IsQ0FBNENqSixXQUFXekksU0FBWCxDQUFxQmdQLFVBQXJCLEdBQWdDMkMsYUFBaEMsQ0FBOENsSixXQUFXekksU0FBWCxDQUFxQjRTLGVBQXJCLEdBQXFDWCxrQkFBckMsQ0FBd0R4SixXQUFXekksU0FBWCxDQUFxQjJTLGVBQXJCLEdBQXFDVCxrQkFBckMsQ0FBd0R6SixXQUFXekksU0FBWCxDQUFxQnlULE1BQXJCLEdBQTRCUCxTQUE1QixDQUFzQ3pLLFdBQVd6SSxTQUFYLENBQXFCMFQsV0FBckIsR0FBaUNDLGNBQWpDLENBQWdEbEwsV0FBV3pJLFNBQVgsQ0FBcUJzQixLQUFyQixHQUEyQjRNLE9BQTNCLENBQW1DekYsV0FBV3pJLFNBQVgsQ0FBcUI2TyxRQUFyQixHQUE4QlYsVUFBOUIsQ0FBeUMxRixXQUFXekksU0FBWCxDQUFxQjhULFNBQXJCLEdBQStCMUYsV0FBL0IsQ0FBMkMzRixXQUFXekksU0FBWCxDQUFxQitULFVBQXJCLEdBQWdDMUYsWUFBaEMsQ0FBNkM1RixXQUFXekksU0FBWCxDQUFxQjJPLE1BQXJCLEdBQTRCRixRQUE1QixDQUFxQ2hHLFdBQVd6SSxTQUFYLENBQXFCZ1UsV0FBckIsR0FBaUN4RSxhQUFqQyxDQUErQy9HLFdBQVd6SSxTQUFYLENBQXFCaVUsTUFBckIsR0FBNEJ4RSxRQUE1QixDQUFxQ2hILFdBQVd6SSxTQUFYLENBQXFCNkQsR0FBckIsR0FBeUI2TCxLQUF6QixDQUErQmpILFdBQVd6SSxTQUFYLENBQXFCMkQsR0FBckIsR0FBeUJnTSxLQUF6QixDQUErQmxILFdBQVd6SSxTQUFYLENBQXFCa1UsR0FBckIsR0FBeUJwRSxLQUF6QixDQUErQnJILFdBQVd6SSxTQUFYLENBQXFCbVUsRUFBckIsR0FBd0JwRSxJQUF4QixDQUE2QnRILFdBQVd6SSxTQUFYLENBQXFCb1UsR0FBckIsR0FBeUJuRSxLQUF6QixDQUErQnhILFdBQVd6SSxTQUFYLENBQXFCcVUsTUFBckIsR0FBNEJsRSxRQUE1QixDQUFxQzFILFdBQVd6SSxTQUFYLENBQXFCc1UsR0FBckIsR0FBeUJsRSxLQUF6QixDQUErQjNILFdBQVd6SSxTQUFYLENBQXFCb1AsU0FBckIsR0FBK0JpQixXQUEvQixDQUEyQzVILFdBQVd6SSxTQUFYLENBQXFCNFQsVUFBckIsR0FBZ0N0RCxZQUFoQyxDQUE2QzdILFdBQVd6SSxTQUFYLENBQXFCaVQsZUFBckIsR0FBcUN6QyxpQkFBckMsQ0FBdUQvSCxXQUFXekksU0FBWCxDQUFxQnVVLFFBQXJCLEdBQThCN0QsVUFBOUIsQ0FBeUNqSSxXQUFXekksU0FBWCxDQUFxQmtQLE9BQXJCLEdBQTZCeUIsU0FBN0IsQ0FBdUNsSSxXQUFXekksU0FBWCxDQUFxQndVLE1BQXJCLEdBQTRCM0QsUUFBNUIsQ0FBcUNwSSxXQUFXekksU0FBWCxDQUFxQnlVLFFBQXJCLEdBQThCMUQsVUFBOUIsQ0FBeUN0SSxXQUFXekksU0FBWCxDQUFxQjBVLE9BQXJCLEdBQTZCMUQsU0FBN0IsQ0FBdUN2SSxXQUFXekksU0FBWCxDQUFxQnFULEdBQXJCLEdBQXlCbkMsS0FBekIsQ0FBK0J6SSxXQUFXekksU0FBWCxDQUFxQm9ULFFBQXJCLEdBQThCaEMsVUFBOUIsQ0FBeUMzSSxXQUFXekksU0FBWCxDQUFxQjJVLFFBQXJCLEdBQThCdEQsVUFBOUIsQ0FBeUM1SSxXQUFXekksU0FBWCxDQUFxQnVTLE1BQXJCLEdBQTRCaEIsUUFBNUIsQ0FBcUM5SSxXQUFXekksU0FBWCxDQUFxQjRVLFNBQXJCLEdBQStCcEQsV0FBL0IsQ0FBMkMvSSxXQUFXekksU0FBWCxDQUFxQjZVLGtCQUFyQixHQUF3Q3BELG9CQUF4QyxDQUE2RGhKLFdBQVd6SSxTQUFYLENBQXFCNlQsTUFBckIsR0FBNEJkLFFBQTVCLENBQXFDdEssV0FBV3pJLFNBQVgsQ0FBcUI4VSxVQUFyQixHQUFnQzNCLFlBQWhDLENBQTZDMUssV0FBV3pJLFNBQVgsQ0FBcUJvRixHQUFyQixHQUF5QjRNLEtBQXpCLENBQStCdkosV0FBV3pJLFNBQVgsQ0FBcUIrVSxHQUFyQixHQUF5Qi9CLEtBQXpCLENBQStCdkssV0FBV3pJLFNBQVgsQ0FBcUJzUCxlQUFyQixHQUFxQ2tFLGlCQUFyQyxDQUF1RC9LLFdBQVd6SSxTQUFYLENBQXFCZ1YsTUFBckIsR0FBNEIxRCxRQUE1QjtBQUNyZ1o7O0FBRUEsVUFBUzJELE9BQVQsR0FBa0I7QUFBQyxRQUFLemIsQ0FBTCxHQUFPLENBQVAsQ0FBUyxLQUFLOEcsQ0FBTCxHQUFPLENBQVAsQ0FBUyxLQUFLK0csQ0FBTCxHQUFPLElBQUk1WCxLQUFKLEVBQVA7QUFBbUIsV0FBU3lsQixRQUFULENBQWtCblYsQ0FBbEIsRUFBb0I7QUFBQyxPQUFJSyxDQUFKLEVBQU1LLENBQU4sRUFBUU4sQ0FBUixDQUFVLEtBQUlDLElBQUUsQ0FBTixFQUFRQSxJQUFFLEdBQVYsRUFBYyxFQUFFQSxDQUFoQixFQUFrQjtBQUFDLFVBQUtpSCxDQUFMLENBQU9qSCxDQUFQLElBQVVBLENBQVY7QUFBWSxRQUFFLENBQUYsQ0FBSSxLQUFJQSxJQUFFLENBQU4sRUFBUUEsSUFBRSxHQUFWLEVBQWMsRUFBRUEsQ0FBaEIsRUFBa0I7QUFBQ0ssU0FBR0EsSUFBRSxLQUFLNEcsQ0FBTCxDQUFPakgsQ0FBUCxDQUFGLEdBQVlMLEVBQUVLLElBQUVMLEVBQUVqSyxNQUFOLENBQWIsR0FBNEIsR0FBOUIsQ0FBa0NxSyxJQUFFLEtBQUtrSCxDQUFMLENBQU9qSCxDQUFQLENBQUYsQ0FBWSxLQUFLaUgsQ0FBTCxDQUFPakgsQ0FBUCxJQUFVLEtBQUtpSCxDQUFMLENBQU81RyxDQUFQLENBQVYsQ0FBb0IsS0FBSzRHLENBQUwsQ0FBTzVHLENBQVAsSUFBVU4sQ0FBVjtBQUFZLFNBQUszRyxDQUFMLEdBQU8sQ0FBUCxDQUFTLEtBQUs4RyxDQUFMLEdBQU8sQ0FBUDtBQUFTLFdBQVM2VSxRQUFULEdBQW1CO0FBQUMsT0FBSTFVLENBQUosQ0FBTSxLQUFLakgsQ0FBTCxHQUFRLEtBQUtBLENBQUwsR0FBTyxDQUFSLEdBQVcsR0FBbEIsQ0FBc0IsS0FBSzhHLENBQUwsR0FBUSxLQUFLQSxDQUFMLEdBQU8sS0FBSytHLENBQUwsQ0FBTyxLQUFLN04sQ0FBWixDQUFSLEdBQXdCLEdBQS9CLENBQW1DaUgsSUFBRSxLQUFLNEcsQ0FBTCxDQUFPLEtBQUs3TixDQUFaLENBQUYsQ0FBaUIsS0FBSzZOLENBQUwsQ0FBTyxLQUFLN04sQ0FBWixJQUFlLEtBQUs2TixDQUFMLENBQU8sS0FBSy9HLENBQVosQ0FBZixDQUE4QixLQUFLK0csQ0FBTCxDQUFPLEtBQUsvRyxDQUFaLElBQWVHLENBQWYsQ0FBaUIsT0FBTyxLQUFLNEcsQ0FBTCxDQUFRNUcsSUFBRSxLQUFLNEcsQ0FBTCxDQUFPLEtBQUs3TixDQUFaLENBQUgsR0FBbUIsR0FBMUIsQ0FBUDtBQUFzQyxVQUFRd0csU0FBUixDQUFrQmlCLElBQWxCLEdBQXVCaVUsUUFBdkIsQ0FBZ0NELFFBQVFqVixTQUFSLENBQWtCb1YsSUFBbEIsR0FBdUJELFFBQXZCLENBQWdDLFNBQVNFLGFBQVQsR0FBd0I7QUFBQyxVQUFPLElBQUlKLE9BQUosRUFBUDtBQUFxQixNQUFJSyxZQUFVLEdBQWQ7QUFDcGhCOztBQUVBLEtBQUlDLFNBQUosQ0FBYyxJQUFJQyxRQUFKLENBQWEsSUFBSUMsUUFBSixDQUFhLFNBQVNDLFlBQVQsQ0FBc0JqVixDQUF0QixFQUF3QjtBQUFDK1UsWUFBU0MsVUFBVCxLQUFzQmhWLElBQUUsR0FBeEIsQ0FBNEIrVSxTQUFTQyxVQUFULEtBQXVCaFYsS0FBRyxDQUFKLEdBQU8sR0FBN0IsQ0FBaUMrVSxTQUFTQyxVQUFULEtBQXVCaFYsS0FBRyxFQUFKLEdBQVEsR0FBOUIsQ0FBa0MrVSxTQUFTQyxVQUFULEtBQXVCaFYsS0FBRyxFQUFKLEdBQVEsR0FBOUIsQ0FBa0MsSUFBR2dWLFlBQVVILFNBQWIsRUFBdUI7QUFBQ0csaUJBQVVILFNBQVY7QUFBb0I7QUFBQyxXQUFTSyxhQUFULEdBQXdCO0FBQUNELGdCQUFhLElBQUkvVyxJQUFKLEdBQVdpWCxPQUFYLEVBQWI7QUFBbUMsTUFBR0osWUFBVSxJQUFiLEVBQWtCO0FBQUNBLGNBQVMsSUFBSS9sQixLQUFKLEVBQVQsQ0FBcUJnbUIsV0FBUyxDQUFULENBQVcsSUFBSTdULENBQUosQ0FBTSxJQUFHbEssV0FBU3lFLFNBQVQsS0FBcUJ6RSxPQUFPMkgsTUFBUCxLQUFnQmxELFNBQWhCLElBQTJCekUsT0FBT21lLFFBQVAsS0FBa0IxWixTQUFsRSxDQUFILEVBQWdGO0FBQUMsU0FBSWtELFNBQU8zSCxPQUFPMkgsTUFBUCxJQUFlM0gsT0FBT21lLFFBQWpDLENBQTBDLElBQUd4VyxPQUFPeVcsZUFBVixFQUEwQjtBQUFDLFdBQUlDLEtBQUcsSUFBSUMsVUFBSixDQUFlLEVBQWYsQ0FBUCxDQUEwQjNXLE9BQU95VyxlQUFQLENBQXVCQyxFQUF2QixFQUEyQixLQUFJblUsSUFBRSxDQUFOLEVBQVFBLElBQUUsRUFBVixFQUFhLEVBQUVBLENBQWYsRUFBaUI7QUFBQzRULGtCQUFTQyxVQUFULElBQXFCTSxHQUFHblUsQ0FBSCxDQUFyQjtBQUEyQjtBQUFDLE1BQTlILE1BQWtJO0FBQUMsV0FBR3JDLFVBQVV5SixPQUFWLElBQW1CLFVBQW5CLElBQStCekosVUFBVTBXLFVBQVYsR0FBcUIsR0FBdkQsRUFBMkQ7QUFBQyxhQUFJbFAsSUFBRXJQLE9BQU8ySCxNQUFQLENBQWMrQyxNQUFkLENBQXFCLEVBQXJCLENBQU4sQ0FBK0IsS0FBSVIsSUFBRSxDQUFOLEVBQVFBLElBQUVtRixFQUFFalIsTUFBWixFQUFtQixFQUFFOEwsQ0FBckIsRUFBdUI7QUFBQzRULG9CQUFTQyxVQUFULElBQXFCMU8sRUFBRW5FLFVBQUYsQ0FBYWhCLENBQWIsSUFBZ0IsR0FBckM7QUFBeUM7QUFBQztBQUFDO0FBQUMsV0FBTTZULFdBQVNILFNBQWYsRUFBeUI7QUFBQzFULFNBQUU4QyxLQUFLYSxLQUFMLENBQVcsUUFBTWIsS0FBS3RDLE1BQUwsRUFBakIsQ0FBRixDQUFrQ29ULFNBQVNDLFVBQVQsSUFBcUI3VCxNQUFJLENBQXpCLENBQTJCNFQsU0FBU0MsVUFBVCxJQUFxQjdULElBQUUsR0FBdkI7QUFBMkIsZUFBUyxDQUFULENBQVcrVDtBQUFnQixXQUFTTyxZQUFULEdBQXVCO0FBQUMsT0FBR1gsYUFBVyxJQUFkLEVBQW1CO0FBQUNJLHFCQUFnQkosWUFBVUYsZUFBVixDQUEwQkUsVUFBVXRVLElBQVYsQ0FBZXVVLFFBQWYsRUFBeUIsS0FBSUMsV0FBUyxDQUFiLEVBQWVBLFdBQVNELFNBQVMxZixNQUFqQyxFQUF3QyxFQUFFMmYsUUFBMUMsRUFBbUQ7QUFBQ0QsZ0JBQVNDLFFBQVQsSUFBbUIsQ0FBbkI7QUFBcUIsaUJBQVMsQ0FBVDtBQUFXLFdBQU9GLFVBQVVILElBQVYsRUFBUDtBQUF3QixXQUFTZSxhQUFULENBQXVCaFcsQ0FBdkIsRUFBeUI7QUFBQyxPQUFJTSxDQUFKLENBQU0sS0FBSUEsSUFBRSxDQUFOLEVBQVFBLElBQUVOLEVBQUVySyxNQUFaLEVBQW1CLEVBQUUySyxDQUFyQixFQUF1QjtBQUFDTixPQUFFTSxDQUFGLElBQUt5VixjQUFMO0FBQW9CO0FBQUMsV0FBU0UsWUFBVCxHQUF1QixDQUFFLGNBQWFwVyxTQUFiLENBQXVCdVAsU0FBdkIsR0FBaUM0RyxhQUFqQztBQUMvc0M7O0FBRUEsVUFBU0UsV0FBVCxDQUFxQmxXLENBQXJCLEVBQXVCTSxDQUF2QixFQUF5QjtBQUFDLFVBQU8sSUFBSWdJLFVBQUosQ0FBZXRJLENBQWYsRUFBaUJNLENBQWpCLENBQVA7QUFBMkIsV0FBUzZWLE9BQVQsQ0FBaUJsVyxDQUFqQixFQUFtQkwsQ0FBbkIsRUFBcUI7QUFBQyxPQUFJVSxJQUFFLEVBQU4sQ0FBUyxJQUFJTixJQUFFLENBQU4sQ0FBUSxPQUFNQSxJQUFFSixDQUFGLEdBQUlLLEVBQUV0SyxNQUFaLEVBQW1CO0FBQUMySyxVQUFHTCxFQUFFOEgsU0FBRixDQUFZL0gsQ0FBWixFQUFjQSxJQUFFSixDQUFoQixJQUFtQixJQUF0QixDQUEyQkksS0FBR0osQ0FBSDtBQUFLLFdBQU9VLElBQUVMLEVBQUU4SCxTQUFGLENBQVkvSCxDQUFaLEVBQWNDLEVBQUV0SyxNQUFoQixDQUFUO0FBQWlDLFdBQVN5Z0IsUUFBVCxDQUFrQjlWLENBQWxCLEVBQW9CO0FBQUMsT0FBR0EsSUFBRSxFQUFMLEVBQVE7QUFBQyxZQUFNLE1BQUlBLEVBQUVZLFFBQUYsQ0FBVyxFQUFYLENBQVY7QUFBeUIsSUFBbEMsTUFBc0M7QUFBQyxZQUFPWixFQUFFWSxRQUFGLENBQVcsRUFBWCxDQUFQO0FBQXNCO0FBQUMsV0FBU21WLFNBQVQsQ0FBbUJ0WixDQUFuQixFQUFxQjJDLENBQXJCLEVBQXVCO0FBQUMsT0FBR0EsSUFBRTNDLEVBQUVwSCxNQUFGLEdBQVMsRUFBZCxFQUFpQjtBQUFDLFdBQUssMEJBQUwsQ0FBZ0MsT0FBTyxJQUFQO0FBQVksUUFBSThKLElBQUUsSUFBSW5RLEtBQUosRUFBTixDQUFrQixJQUFJc1EsSUFBRTdDLEVBQUVwSCxNQUFGLEdBQVMsQ0FBZixDQUFpQixPQUFNaUssS0FBRyxDQUFILElBQU1GLElBQUUsQ0FBZCxFQUFnQjtBQUFDLFNBQUlDLElBQUU1QyxFQUFFMEYsVUFBRixDQUFhN0MsR0FBYixDQUFOLENBQXdCLElBQUdELElBQUUsR0FBTCxFQUFTO0FBQUNGLFNBQUUsRUFBRUMsQ0FBSixJQUFPQyxDQUFQO0FBQVMsTUFBbkIsTUFBdUI7QUFBQyxXQUFJQSxJQUFFLEdBQUgsSUFBVUEsSUFBRSxJQUFmLEVBQXFCO0FBQUNGLFdBQUUsRUFBRUMsQ0FBSixJQUFRQyxJQUFFLEVBQUgsR0FBTyxHQUFkLENBQWtCRixFQUFFLEVBQUVDLENBQUosSUFBUUMsS0FBRyxDQUFKLEdBQU8sR0FBZDtBQUFrQixRQUExRCxNQUE4RDtBQUFDRixXQUFFLEVBQUVDLENBQUosSUFBUUMsSUFBRSxFQUFILEdBQU8sR0FBZCxDQUFrQkYsRUFBRSxFQUFFQyxDQUFKLElBQVNDLEtBQUcsQ0FBSixHQUFPLEVBQVIsR0FBWSxHQUFuQixDQUF1QkYsRUFBRSxFQUFFQyxDQUFKLElBQVFDLEtBQUcsRUFBSixHQUFRLEdBQWY7QUFBbUI7QUFBQztBQUFDLE1BQUUsRUFBRUQsQ0FBSixJQUFPLENBQVAsQ0FBUyxJQUFJTSxJQUFFLElBQUlpVyxZQUFKLEVBQU4sQ0FBeUIsSUFBSTNWLElBQUUsSUFBSWhSLEtBQUosRUFBTixDQUFrQixPQUFNb1EsSUFBRSxDQUFSLEVBQVU7QUFBQ1ksT0FBRSxDQUFGLElBQUssQ0FBTCxDQUFPLE9BQU1BLEVBQUUsQ0FBRixLQUFNLENBQVosRUFBYztBQUFDTixTQUFFb1AsU0FBRixDQUFZOU8sQ0FBWjtBQUFlLFFBQUUsRUFBRVosQ0FBSixJQUFPWSxFQUFFLENBQUYsQ0FBUDtBQUFZLE1BQUUsRUFBRVosQ0FBSixJQUFPLENBQVAsQ0FBU0QsRUFBRSxFQUFFQyxDQUFKLElBQU8sQ0FBUCxDQUFTLE9BQU8sSUFBSTRJLFVBQUosQ0FBZTdJLENBQWYsQ0FBUDtBQUF5QixXQUFTNlcsYUFBVCxDQUF1QnJXLENBQXZCLEVBQXlCSyxDQUF6QixFQUEyQnZELENBQTNCLEVBQTZCO0FBQUMsT0FBSWlELElBQUUsRUFBTjtBQUFBLE9BQVNKLElBQUUsQ0FBWCxDQUFhLE9BQU1JLEVBQUVySyxNQUFGLEdBQVMySyxDQUFmLEVBQWlCO0FBQUNOLFVBQUdqRCxFQUFFd0YsT0FBT0MsWUFBUCxDQUFvQm5ULEtBQXBCLENBQTBCa1QsTUFBMUIsRUFBaUN0QyxFQUFFdUIsTUFBRixDQUFTLENBQUMsQ0FBQzVCLElBQUUsVUFBSCxLQUFnQixFQUFqQixFQUFvQixDQUFDQSxJQUFFLFFBQUgsS0FBYyxFQUFsQyxFQUFxQyxDQUFDQSxJQUFFLEtBQUgsS0FBVyxDQUFoRCxFQUFrREEsSUFBRSxHQUFwRCxDQUFULENBQWpDLENBQUYsQ0FBSCxDQUEyR0EsS0FBRyxDQUFIO0FBQUssV0FBT0ksQ0FBUDtBQUFTLFdBQVN1VyxRQUFULENBQWtCN1UsQ0FBbEIsRUFBb0JwQixDQUFwQixFQUFzQlgsQ0FBdEIsRUFBd0JTLENBQXhCLEVBQTBCO0FBQUMsT0FBSUgsSUFBRXVXLEtBQUt0WCxNQUFMLENBQVl1WCxhQUFsQixDQUFnQyxJQUFJOVYsSUFBRTZWLEtBQUt0WCxNQUFMLENBQVlDLElBQWxCLENBQXVCLElBQUlhLElBQUUsSUFBTixDQUFXLElBQUcsQ0FBQ0wsQ0FBSixFQUFNO0FBQUNBLFNBQUUsTUFBRjtBQUFTLFFBQUcsT0FBT0EsQ0FBUCxLQUFXLFFBQWQsRUFBdUI7QUFBQ0ssU0FBRUMsRUFBRXlXLG1CQUFGLENBQXNCL1csQ0FBdEIsQ0FBRixDQUEyQlMsSUFBRUgsRUFBRTBXLGFBQUYsQ0FBZ0IzVyxDQUFoQixDQUFGLENBQXFCTCxJQUFFLFdBQVN0RyxDQUFULEVBQVc7QUFBQyxjQUFPdWQsVUFBVWpXLEVBQUVrVyxPQUFGLENBQVVDLFVBQVV6ZCxDQUFWLENBQVYsRUFBdUIyRyxDQUF2QixDQUFWLENBQVA7QUFBNEMsTUFBMUQ7QUFBMkQsUUFBRzBCLEVBQUUvTCxNQUFGLEdBQVMsSUFBRXlLLENBQVgsR0FBYSxDQUFiLEdBQWVFLENBQWxCLEVBQW9CO0FBQUMsV0FBSywwQkFBTDtBQUFnQyxRQUFJRCxJQUFFLEVBQU47QUFBQSxPQUFTdEQsQ0FBVCxDQUFXLEtBQUlBLElBQUUsQ0FBTixFQUFRQSxJQUFFdUQsSUFBRW9CLEVBQUUvTCxNQUFKLEdBQVcsSUFBRXlLLENBQWIsR0FBZSxDQUF6QixFQUEyQnJELEtBQUcsQ0FBOUIsRUFBZ0M7QUFBQ3NELFVBQUcsTUFBSDtBQUFVLFFBQUlYLElBQUVDLEVBQUUsRUFBRixJQUFNVSxDQUFOLEdBQVEsTUFBUixHQUFlcUIsQ0FBckIsQ0FBdUIsSUFBSWpDLElBQUUsSUFBSW5RLEtBQUosQ0FBVThRLENBQVYsQ0FBTixDQUFtQixJQUFJNlYsWUFBSixHQUFtQjdHLFNBQW5CLENBQTZCM1AsQ0FBN0IsRUFBZ0MsSUFBSVUsSUFBRW1XLGNBQWM3VyxDQUFkLEVBQWdCQyxFQUFFL0osTUFBbEIsRUFBeUJnSyxDQUF6QixDQUFOLENBQWtDLElBQUllLElBQUUsRUFBTixDQUFTLEtBQUkzRCxJQUFFLENBQU4sRUFBUUEsSUFBRTJDLEVBQUUvSixNQUFaLEVBQW1Cb0gsS0FBRyxDQUF0QixFQUF3QjtBQUFDMkQsT0FBRTNELENBQUYsSUFBSzJDLEVBQUUrQyxVQUFGLENBQWExRixDQUFiLElBQWdCb0QsRUFBRXNDLFVBQUYsQ0FBYTFGLENBQWIsQ0FBckI7QUFBcUMsUUFBSW1GLElBQUVvVSxjQUFjNVYsQ0FBZCxFQUFnQmpCLEVBQUU5SixNQUFsQixFQUF5QmdLLENBQXpCLENBQU4sQ0FBa0MsSUFBSUMsSUFBRSxDQUFDLENBQUQsQ0FBTixDQUFVLEtBQUk3QyxJQUFFLENBQU4sRUFBUUEsSUFBRTBDLEVBQUU5SixNQUFaLEVBQW1Cb0gsS0FBRyxDQUF0QixFQUF3QjtBQUFDNkMsT0FBRTdDLElBQUUsQ0FBSixJQUFPMEMsRUFBRTFDLENBQUYsSUFBS21GLEVBQUVPLFVBQUYsQ0FBYTFGLENBQWIsQ0FBWjtBQUE0QixXQUFPLElBQUl1TCxVQUFKLENBQWUxSSxFQUFFNEIsTUFBRixDQUFTZCxDQUFULENBQWYsQ0FBUDtBQUFtQyxXQUFTcVcsTUFBVCxHQUFpQjtBQUFDLFFBQUtsWixDQUFMLEdBQU8sSUFBUCxDQUFZLEtBQUtkLENBQUwsR0FBTyxDQUFQLENBQVMsS0FBSzZDLENBQUwsR0FBTyxJQUFQLENBQVksS0FBS2MsQ0FBTCxHQUFPLElBQVAsQ0FBWSxLQUFLZ0IsQ0FBTCxHQUFPLElBQVAsQ0FBWSxLQUFLc1YsSUFBTCxHQUFVLElBQVYsQ0FBZSxLQUFLQyxJQUFMLEdBQVUsSUFBVixDQUFlLEtBQUtDLEtBQUwsR0FBVyxJQUFYO0FBQWdCLFdBQVNDLFlBQVQsQ0FBc0JuWCxDQUF0QixFQUF3Qk0sQ0FBeEIsRUFBMEI7QUFBQyxRQUFLOFcsUUFBTCxHQUFjLElBQWQsQ0FBbUIsS0FBS0MsU0FBTCxHQUFlLEtBQWYsQ0FBcUIsSUFBRyxPQUFPclgsQ0FBUCxLQUFXLFFBQWQsRUFBdUI7QUFBQyxVQUFLbkMsQ0FBTCxHQUFPbUMsQ0FBUCxDQUFTLEtBQUtqRCxDQUFMLEdBQU91RCxDQUFQO0FBQVMsSUFBMUMsTUFBOEM7QUFBQyxTQUFHTixLQUFHLElBQUgsSUFBU00sS0FBRyxJQUFaLElBQWtCTixFQUFFckssTUFBRixHQUFTLENBQTNCLElBQThCMkssRUFBRTNLLE1BQUYsR0FBUyxDQUExQyxFQUE0QztBQUFDLFlBQUtrSSxDQUFMLEdBQU9xWSxZQUFZbFcsQ0FBWixFQUFjLEVBQWQsQ0FBUCxDQUF5QixLQUFLakQsQ0FBTCxHQUFPakMsU0FBU3dGLENBQVQsRUFBVyxFQUFYLENBQVA7QUFBc0IsTUFBNUYsTUFBZ0c7QUFBQyxhQUFLLHdCQUFMO0FBQThCO0FBQUM7QUFBQyxXQUFTZ1gsV0FBVCxDQUFxQmhYLENBQXJCLEVBQXVCO0FBQUMsVUFBT0EsRUFBRXdOLFNBQUYsQ0FBWSxLQUFLL1EsQ0FBakIsRUFBbUIsS0FBS2MsQ0FBeEIsQ0FBUDtBQUFrQyxXQUFTMFosVUFBVCxDQUFvQjNYLENBQXBCLEVBQXNCO0FBQUMsT0FBSVUsSUFBRStWLFVBQVV6VyxDQUFWLEVBQWEsS0FBSy9CLENBQUwsQ0FBT2dRLFNBQVAsS0FBbUIsQ0FBcEIsSUFBd0IsQ0FBcEMsQ0FBTixDQUE2QyxJQUFHdk4sS0FBRyxJQUFOLEVBQVc7QUFBQyxZQUFPLElBQVA7QUFBWSxRQUFJdkQsSUFBRSxLQUFLeWEsUUFBTCxDQUFjbFgsQ0FBZCxDQUFOLENBQXVCLElBQUd2RCxLQUFHLElBQU4sRUFBVztBQUFDLFlBQU8sSUFBUDtBQUFZLFFBQUlpRCxJQUFFakQsRUFBRW1FLFFBQUYsQ0FBVyxFQUFYLENBQU4sQ0FBcUIsSUFBRyxDQUFDbEIsRUFBRXJLLE1BQUYsR0FBUyxDQUFWLEtBQWMsQ0FBakIsRUFBbUI7QUFBQyxZQUFPcUssQ0FBUDtBQUFTLElBQTdCLE1BQWlDO0FBQUMsWUFBTSxNQUFJQSxDQUFWO0FBQVk7QUFBQyxXQUFTeVgsY0FBVCxDQUF3QjlYLENBQXhCLEVBQTBCNUMsQ0FBMUIsRUFBNEJpRCxDQUE1QixFQUE4QjtBQUFDLE9BQUlNLElBQUVpVyxTQUFTNVcsQ0FBVCxFQUFZLEtBQUs5QixDQUFMLENBQU9nUSxTQUFQLEtBQW1CLENBQXBCLElBQXdCLENBQW5DLEVBQXFDOVEsQ0FBckMsRUFBdUNpRCxDQUF2QyxDQUFOLENBQWdELElBQUdNLEtBQUcsSUFBTixFQUFXO0FBQUMsWUFBTyxJQUFQO0FBQVksUUFBSWIsSUFBRSxLQUFLK1gsUUFBTCxDQUFjbFgsQ0FBZCxDQUFOLENBQXVCLElBQUdiLEtBQUcsSUFBTixFQUFXO0FBQUMsWUFBTyxJQUFQO0FBQVksUUFBSUcsSUFBRUgsRUFBRXlCLFFBQUYsQ0FBVyxFQUFYLENBQU4sQ0FBcUIsSUFBRyxDQUFDdEIsRUFBRWpLLE1BQUYsR0FBUyxDQUFWLEtBQWMsQ0FBakIsRUFBbUI7QUFBQyxZQUFPaUssQ0FBUDtBQUFTLElBQTdCLE1BQWlDO0FBQUMsWUFBTSxNQUFJQSxDQUFWO0FBQVk7QUFBQyxTQUFPQyxTQUFQLENBQWlCMlgsUUFBakIsR0FBMEJGLFdBQTFCLENBQXNDUCxPQUFPbFgsU0FBUCxDQUFpQjZYLFNBQWpCLEdBQTJCUCxZQUEzQixDQUF3Q0osT0FBT2xYLFNBQVAsQ0FBaUI4WCxPQUFqQixHQUF5QkosVUFBekIsQ0FBb0NSLE9BQU9sWCxTQUFQLENBQWlCK1gsV0FBakIsR0FBNkJILGNBQTdCLENBQTRDVixPQUFPbFgsU0FBUCxDQUFpQnRHLElBQWpCLEdBQXNCLEtBQXRCO0FBQzNnRjs7QUFFQSxVQUFTc2UsZ0JBQVQsQ0FBMEI3WCxDQUExQixFQUE0Qk0sQ0FBNUIsRUFBOEI7QUFBQyxRQUFLakMsQ0FBTCxHQUFPaUMsQ0FBUCxDQUFTLEtBQUtvQixDQUFMLEdBQU8xQixDQUFQO0FBQVMsV0FBUzhYLFVBQVQsQ0FBb0J4WCxDQUFwQixFQUFzQjtBQUFDLE9BQUdBLEtBQUcsSUFBTixFQUFXO0FBQUMsWUFBTyxJQUFQO0FBQVksV0FBTyxLQUFLb0IsQ0FBTCxDQUFPb1MsTUFBUCxDQUFjeFQsRUFBRW9CLENBQWhCLEtBQW9CLEtBQUtyRCxDQUFMLENBQU95VixNQUFQLENBQWN4VCxFQUFFakMsQ0FBaEIsQ0FBM0I7QUFBK0MsV0FBUzBaLGdCQUFULEdBQTJCO0FBQUMsVUFBTyxLQUFLMVosQ0FBWjtBQUFjLFdBQVMyWixVQUFULEdBQXFCO0FBQUMsVUFBTyxJQUFJSCxnQkFBSixDQUFxQixLQUFLblcsQ0FBMUIsRUFBNEIsS0FBS3JELENBQUwsQ0FBT2dNLE1BQVAsR0FBZ0IyQixHQUFoQixDQUFvQixLQUFLdEssQ0FBekIsQ0FBNUIsQ0FBUDtBQUFnRSxXQUFTdVcsT0FBVCxDQUFpQjNYLENBQWpCLEVBQW1CO0FBQUMsVUFBTyxJQUFJdVgsZ0JBQUosQ0FBcUIsS0FBS25XLENBQTFCLEVBQTRCLEtBQUtyRCxDQUFMLENBQU82VSxHQUFQLENBQVc1UyxFQUFFNFgsWUFBRixFQUFYLEVBQTZCbE0sR0FBN0IsQ0FBaUMsS0FBS3RLLENBQXRDLENBQTVCLENBQVA7QUFBNkUsV0FBU3lXLFlBQVQsQ0FBc0I3WCxDQUF0QixFQUF3QjtBQUFDLFVBQU8sSUFBSXVYLGdCQUFKLENBQXFCLEtBQUtuVyxDQUExQixFQUE0QixLQUFLckQsQ0FBTCxDQUFPNFUsUUFBUCxDQUFnQjNTLEVBQUU0WCxZQUFGLEVBQWhCLEVBQWtDbE0sR0FBbEMsQ0FBc0MsS0FBS3RLLENBQTNDLENBQTVCLENBQVA7QUFBa0YsV0FBUzBXLFlBQVQsQ0FBc0I5WCxDQUF0QixFQUF3QjtBQUFDLFVBQU8sSUFBSXVYLGdCQUFKLENBQXFCLEtBQUtuVyxDQUExQixFQUE0QixLQUFLckQsQ0FBTCxDQUFPbVcsUUFBUCxDQUFnQmxVLEVBQUU0WCxZQUFGLEVBQWhCLEVBQWtDbE0sR0FBbEMsQ0FBc0MsS0FBS3RLLENBQTNDLENBQTVCLENBQVA7QUFBa0YsV0FBUzJXLFVBQVQsR0FBcUI7QUFBQyxVQUFPLElBQUlSLGdCQUFKLENBQXFCLEtBQUtuVyxDQUExQixFQUE0QixLQUFLckQsQ0FBTCxDQUFPd1csTUFBUCxHQUFnQjdJLEdBQWhCLENBQW9CLEtBQUt0SyxDQUF6QixDQUE1QixDQUFQO0FBQWdFLFdBQVM0VyxVQUFULENBQW9CaFksQ0FBcEIsRUFBc0I7QUFBQyxVQUFPLElBQUl1WCxnQkFBSixDQUFxQixLQUFLblcsQ0FBMUIsRUFBNEIsS0FBS3JELENBQUwsQ0FBT21XLFFBQVAsQ0FBZ0JsVSxFQUFFNFgsWUFBRixHQUFpQnZELFVBQWpCLENBQTRCLEtBQUtqVCxDQUFqQyxDQUFoQixFQUFxRHNLLEdBQXJELENBQXlELEtBQUt0SyxDQUE5RCxDQUE1QixDQUFQO0FBQXFHLG1CQUFpQjdCLFNBQWpCLENBQTJCaVUsTUFBM0IsR0FBa0NnRSxVQUFsQyxDQUE2Q0QsaUJBQWlCaFksU0FBakIsQ0FBMkJxWSxZQUEzQixHQUF3Q0gsZ0JBQXhDLENBQXlERixpQkFBaUJoWSxTQUFqQixDQUEyQndLLE1BQTNCLEdBQWtDMk4sVUFBbEMsQ0FBNkNILGlCQUFpQmhZLFNBQWpCLENBQTJCcVQsR0FBM0IsR0FBK0IrRSxPQUEvQixDQUF1Q0osaUJBQWlCaFksU0FBakIsQ0FBMkJvVCxRQUEzQixHQUFvQ2tGLFlBQXBDLENBQWlETixpQkFBaUJoWSxTQUFqQixDQUEyQjJVLFFBQTNCLEdBQW9DNEQsWUFBcEMsQ0FBaURQLGlCQUFpQmhZLFNBQWpCLENBQTJCZ1YsTUFBM0IsR0FBa0N3RCxVQUFsQyxDQUE2Q1IsaUJBQWlCaFksU0FBakIsQ0FBMkJ1UyxNQUEzQixHQUFrQ2tHLFVBQWxDLENBQTZDLFNBQVNDLFNBQVQsQ0FBbUJ0WSxDQUFuQixFQUFxQkssQ0FBckIsRUFBdUJWLENBQXZCLEVBQXlCSSxDQUF6QixFQUEyQjtBQUFDLFFBQUt3WSxLQUFMLEdBQVd2WSxDQUFYLENBQWEsS0FBSzVCLENBQUwsR0FBT2lDLENBQVAsQ0FBUyxLQUFLaEMsQ0FBTCxHQUFPc0IsQ0FBUCxDQUFTLElBQUdJLEtBQUcsSUFBTixFQUFXO0FBQUMsVUFBSzRHLENBQUwsR0FBTzBCLFdBQVdtRCxHQUFsQjtBQUFzQixJQUFsQyxNQUFzQztBQUFDLFVBQUs3RSxDQUFMLEdBQU81RyxDQUFQO0FBQVMsU0FBS3lZLElBQUwsR0FBVSxJQUFWO0FBQWUsV0FBU0MsV0FBVCxHQUFzQjtBQUFDLE9BQUcsS0FBS0QsSUFBTCxJQUFXLElBQWQsRUFBbUI7QUFBQyxVQUFLQSxJQUFMLEdBQVUsS0FBSzdSLENBQUwsQ0FBTytOLFVBQVAsQ0FBa0IsS0FBSzZELEtBQUwsQ0FBVzlXLENBQTdCLENBQVY7QUFBMEMsV0FBTyxLQUFLOFcsS0FBTCxDQUFXRyxjQUFYLENBQTBCLEtBQUt0YSxDQUFMLENBQU82WixZQUFQLEdBQXNCMUQsUUFBdEIsQ0FBK0IsS0FBS2lFLElBQXBDLEVBQTBDek0sR0FBMUMsQ0FBOEMsS0FBS3dNLEtBQUwsQ0FBVzlXLENBQXpELENBQTFCLENBQVA7QUFBOEYsV0FBU2tYLFdBQVQsR0FBc0I7QUFBQyxPQUFHLEtBQUtILElBQUwsSUFBVyxJQUFkLEVBQW1CO0FBQUMsVUFBS0EsSUFBTCxHQUFVLEtBQUs3UixDQUFMLENBQU8rTixVQUFQLENBQWtCLEtBQUs2RCxLQUFMLENBQVc5VyxDQUE3QixDQUFWO0FBQTBDLFdBQU8sS0FBSzhXLEtBQUwsQ0FBV0csY0FBWCxDQUEwQixLQUFLcmEsQ0FBTCxDQUFPNFosWUFBUCxHQUFzQjFELFFBQXRCLENBQStCLEtBQUtpRSxJQUFwQyxFQUEwQ3pNLEdBQTFDLENBQThDLEtBQUt3TSxLQUFMLENBQVc5VyxDQUF6RCxDQUExQixDQUFQO0FBQThGLFdBQVNtWCxhQUFULENBQXVCdlksQ0FBdkIsRUFBeUI7QUFBQyxPQUFHQSxLQUFHLElBQU4sRUFBVztBQUFDLFlBQU8sSUFBUDtBQUFZLFFBQUcsS0FBS3dZLFVBQUwsRUFBSCxFQUFxQjtBQUFDLFlBQU94WSxFQUFFd1ksVUFBRixFQUFQO0FBQXNCLFFBQUd4WSxFQUFFd1ksVUFBRixFQUFILEVBQWtCO0FBQUMsWUFBTyxLQUFLQSxVQUFMLEVBQVA7QUFBeUIsUUFBSTdZLENBQUosRUFBTUQsQ0FBTixDQUFRQyxJQUFFSyxFQUFFaEMsQ0FBRixDQUFJNFosWUFBSixHQUFtQjFELFFBQW5CLENBQTRCLEtBQUs1TixDQUFqQyxFQUFvQ3FNLFFBQXBDLENBQTZDLEtBQUszVSxDQUFMLENBQU80WixZQUFQLEdBQXNCMUQsUUFBdEIsQ0FBK0JsVSxFQUFFc0csQ0FBakMsQ0FBN0MsRUFBa0ZvRixHQUFsRixDQUFzRixLQUFLd00sS0FBTCxDQUFXOVcsQ0FBakcsQ0FBRixDQUFzRyxJQUFHLENBQUN6QixFQUFFNlQsTUFBRixDQUFTeEwsV0FBVzJCLElBQXBCLENBQUosRUFBOEI7QUFBQyxZQUFPLEtBQVA7QUFBYSxRQUFFM0osRUFBRWpDLENBQUYsQ0FBSTZaLFlBQUosR0FBbUIxRCxRQUFuQixDQUE0QixLQUFLNU4sQ0FBakMsRUFBb0NxTSxRQUFwQyxDQUE2QyxLQUFLNVUsQ0FBTCxDQUFPNlosWUFBUCxHQUFzQjFELFFBQXRCLENBQStCbFUsRUFBRXNHLENBQWpDLENBQTdDLEVBQWtGb0YsR0FBbEYsQ0FBc0YsS0FBS3dNLEtBQUwsQ0FBVzlXLENBQWpHLENBQUYsQ0FBc0csT0FBTzFCLEVBQUU4VCxNQUFGLENBQVN4TCxXQUFXMkIsSUFBcEIsQ0FBUDtBQUFpQyxXQUFTOE8saUJBQVQsR0FBNEI7QUFBQyxPQUFJLEtBQUsxYSxDQUFMLElBQVEsSUFBVCxJQUFpQixLQUFLQyxDQUFMLElBQVEsSUFBNUIsRUFBa0M7QUFBQyxZQUFPLElBQVA7QUFBWSxXQUFPLEtBQUtzSSxDQUFMLENBQU9rTixNQUFQLENBQWN4TCxXQUFXMkIsSUFBekIsS0FBZ0MsQ0FBQyxLQUFLM0wsQ0FBTCxDQUFPNFosWUFBUCxHQUFzQnBFLE1BQXRCLENBQTZCeEwsV0FBVzJCLElBQXhDLENBQXhDO0FBQXNGLFdBQVMrTyxhQUFULEdBQXdCO0FBQUMsVUFBTyxJQUFJVCxTQUFKLENBQWMsS0FBS0MsS0FBbkIsRUFBeUIsS0FBS25hLENBQTlCLEVBQWdDLEtBQUtDLENBQUwsQ0FBTytMLE1BQVAsRUFBaEMsRUFBZ0QsS0FBS3pELENBQXJELENBQVA7QUFBK0QsV0FBU3FTLFVBQVQsQ0FBb0I3WSxDQUFwQixFQUFzQjtBQUFDLE9BQUcsS0FBSzBZLFVBQUwsRUFBSCxFQUFxQjtBQUFDLFlBQU8xWSxDQUFQO0FBQVMsUUFBR0EsRUFBRTBZLFVBQUYsRUFBSCxFQUFrQjtBQUFDLFlBQU8sSUFBUDtBQUFZLFFBQUlwWSxJQUFFTixFQUFFOUIsQ0FBRixDQUFJNFosWUFBSixHQUFtQjFELFFBQW5CLENBQTRCLEtBQUs1TixDQUFqQyxFQUFvQ3FNLFFBQXBDLENBQTZDLEtBQUszVSxDQUFMLENBQU80WixZQUFQLEdBQXNCMUQsUUFBdEIsQ0FBK0JwVSxFQUFFd0csQ0FBakMsQ0FBN0MsRUFBa0ZvRixHQUFsRixDQUFzRixLQUFLd00sS0FBTCxDQUFXOVcsQ0FBakcsQ0FBTixDQUEwRyxJQUFJZixJQUFFUCxFQUFFL0IsQ0FBRixDQUFJNlosWUFBSixHQUFtQjFELFFBQW5CLENBQTRCLEtBQUs1TixDQUFqQyxFQUFvQ3FNLFFBQXBDLENBQTZDLEtBQUs1VSxDQUFMLENBQU82WixZQUFQLEdBQXNCMUQsUUFBdEIsQ0FBK0JwVSxFQUFFd0csQ0FBakMsQ0FBN0MsRUFBa0ZvRixHQUFsRixDQUFzRixLQUFLd00sS0FBTCxDQUFXOVcsQ0FBakcsQ0FBTixDQUEwRyxJQUFHNEcsV0FBVzJCLElBQVgsQ0FBZ0I2SixNQUFoQixDQUF1Qm5ULENBQXZCLENBQUgsRUFBNkI7QUFBQyxTQUFHMkgsV0FBVzJCLElBQVgsQ0FBZ0I2SixNQUFoQixDQUF1QnBULENBQXZCLENBQUgsRUFBNkI7QUFBQyxjQUFPLEtBQUt3WSxLQUFMLEVBQVA7QUFBb0IsYUFBTyxLQUFLVixLQUFMLENBQVdXLFdBQVgsRUFBUDtBQUFnQyxRQUFJaFosSUFBRSxJQUFJbUksVUFBSixDQUFlLEdBQWYsQ0FBTixDQUEwQixJQUFJdkwsSUFBRSxLQUFLc0IsQ0FBTCxDQUFPNlosWUFBUCxFQUFOLENBQTRCLElBQUlyYSxJQUFFLEtBQUtTLENBQUwsQ0FBTzRaLFlBQVAsRUFBTixDQUE0QixJQUFJalksSUFBRUcsRUFBRS9CLENBQUYsQ0FBSTZaLFlBQUosRUFBTixDQUF5QixJQUFJN1gsSUFBRUQsRUFBRTlCLENBQUYsQ0FBSTRaLFlBQUosRUFBTixDQUF5QixJQUFJaFcsSUFBRXZCLEVBQUVrVSxNQUFGLEVBQU4sQ0FBaUIsSUFBSXhiLElBQUU2SSxFQUFFc1MsUUFBRixDQUFXN1QsQ0FBWCxDQUFOLENBQW9CLElBQUlmLElBQUU3QyxFQUFFeVgsUUFBRixDQUFXdFMsQ0FBWCxDQUFOLENBQW9CLElBQUl6QyxJQUFFaUIsRUFBRW1VLE1BQUYsR0FBV0wsUUFBWCxDQUFvQixLQUFLNU4sQ0FBekIsQ0FBTixDQUFrQyxJQUFJdEcsSUFBRWIsRUFBRXdULFFBQUYsQ0FBV3JULEVBQUVxUCxTQUFGLENBQVksQ0FBWixDQUFYLEVBQTJCdUYsUUFBM0IsQ0FBb0NwVSxFQUFFd0csQ0FBdEMsRUFBeUNxTSxRQUF6QyxDQUFrRDVaLENBQWxELEVBQXFEbWIsUUFBckQsQ0FBOEQ3VCxDQUE5RCxFQUFpRXFMLEdBQWpFLENBQXFFLEtBQUt3TSxLQUFMLENBQVc5VyxDQUFoRixDQUFOLENBQXlGLElBQUloQyxJQUFFRSxFQUFFNFUsUUFBRixDQUFXclUsQ0FBWCxFQUFjcVUsUUFBZCxDQUF1QjlULENBQXZCLEVBQTBCdVMsUUFBMUIsQ0FBbUNwVixFQUFFMlcsUUFBRixDQUFXbmIsQ0FBWCxDQUFuQyxFQUFrRDRaLFFBQWxELENBQTJEeFQsRUFBRStVLFFBQUYsQ0FBVzlULENBQVgsQ0FBM0QsRUFBMEU4VCxRQUExRSxDQUFtRnBVLEVBQUV3RyxDQUFyRixFQUF3RnNNLEdBQXhGLENBQTRGeFMsRUFBRThULFFBQUYsQ0FBV25iLENBQVgsQ0FBNUYsRUFBMkcyUyxHQUEzRyxDQUErRyxLQUFLd00sS0FBTCxDQUFXOVcsQ0FBMUgsQ0FBTixDQUFtSSxJQUFJL0IsSUFBRXRHLEVBQUVtYixRQUFGLENBQVcsS0FBSzVOLENBQWhCLEVBQW1CNE4sUUFBbkIsQ0FBNEJwVSxFQUFFd0csQ0FBOUIsRUFBaUNvRixHQUFqQyxDQUFxQyxLQUFLd00sS0FBTCxDQUFXOVcsQ0FBaEQsQ0FBTixDQUF5RCxPQUFPLElBQUk2VyxTQUFKLENBQWMsS0FBS0MsS0FBbkIsRUFBeUIsS0FBS0EsS0FBTCxDQUFXRyxjQUFYLENBQTBCclksQ0FBMUIsQ0FBekIsRUFBc0QsS0FBS2tZLEtBQUwsQ0FBV0csY0FBWCxDQUEwQmpaLENBQTFCLENBQXRELEVBQW1GQyxDQUFuRixDQUFQO0FBQTZGLFdBQVN5WixZQUFULEdBQXVCO0FBQUMsT0FBRyxLQUFLTixVQUFMLEVBQUgsRUFBcUI7QUFBQyxZQUFPLElBQVA7QUFBWSxRQUFHLEtBQUt4YSxDQUFMLENBQU80WixZQUFQLEdBQXNCMUosTUFBdEIsTUFBZ0MsQ0FBbkMsRUFBcUM7QUFBQyxZQUFPLEtBQUtnSyxLQUFMLENBQVdXLFdBQVgsRUFBUDtBQUFnQyxRQUFJMVosSUFBRSxJQUFJNkksVUFBSixDQUFlLEdBQWYsQ0FBTixDQUEwQixJQUFJckksSUFBRSxLQUFLNUIsQ0FBTCxDQUFPNlosWUFBUCxFQUFOLENBQTRCLElBQUl4WSxJQUFFLEtBQUtwQixDQUFMLENBQU80WixZQUFQLEVBQU4sQ0FBNEIsSUFBSW5iLElBQUUyQyxFQUFFOFUsUUFBRixDQUFXLEtBQUs1TixDQUFoQixDQUFOLENBQXlCLElBQUl6RyxJQUFFcEQsRUFBRXlYLFFBQUYsQ0FBVzlVLENBQVgsRUFBY3NNLEdBQWQsQ0FBa0IsS0FBS3dNLEtBQUwsQ0FBVzlXLENBQTdCLENBQU4sQ0FBc0MsSUFBSXJJLElBQUUsS0FBS21mLEtBQUwsQ0FBV2xZLENBQVgsQ0FBYTRYLFlBQWIsRUFBTixDQUFrQyxJQUFJN1gsSUFBRUosRUFBRTRVLE1BQUYsR0FBV0wsUUFBWCxDQUFvQi9VLENBQXBCLENBQU4sQ0FBNkIsSUFBRyxDQUFDNkksV0FBVzJCLElBQVgsQ0FBZ0I2SixNQUFoQixDQUF1QnphLENBQXZCLENBQUosRUFBOEI7QUFBQ2dILFNBQUVBLEVBQUU2UyxHQUFGLENBQU0sS0FBS3RNLENBQUwsQ0FBT2lPLE1BQVAsR0FBZ0JMLFFBQWhCLENBQXlCbmIsQ0FBekIsQ0FBTixDQUFGO0FBQXFDLFFBQUVnSCxFQUFFMkwsR0FBRixDQUFNLEtBQUt3TSxLQUFMLENBQVc5VyxDQUFqQixDQUFGLENBQXNCLElBQUkxQixJQUFFSyxFQUFFd1UsTUFBRixHQUFXNUIsUUFBWCxDQUFvQmhULEVBQUVnUCxTQUFGLENBQVksQ0FBWixFQUFldUYsUUFBZixDQUF3QnJVLENBQXhCLENBQXBCLEVBQWdEOE8sU0FBaEQsQ0FBMEQsQ0FBMUQsRUFBNkR1RixRQUE3RCxDQUFzRXpYLENBQXRFLEVBQXlFaVAsR0FBekUsQ0FBNkUsS0FBS3dNLEtBQUwsQ0FBVzlXLENBQXhGLENBQU4sQ0FBaUcsSUFBSS9CLElBQUVVLEVBQUVtVSxRQUFGLENBQVcvVSxDQUFYLEVBQWMrVSxRQUFkLENBQXVCdlUsQ0FBdkIsRUFBMEJnVCxRQUExQixDQUFtQzlTLEVBQUU4TyxTQUFGLENBQVksQ0FBWixDQUFuQyxFQUFtREEsU0FBbkQsQ0FBNkQsQ0FBN0QsRUFBZ0V1RixRQUFoRSxDQUF5RXJVLENBQXpFLEVBQTRFOFMsUUFBNUUsQ0FBcUY1UyxFQUFFd1UsTUFBRixHQUFXTCxRQUFYLENBQW9CblUsQ0FBcEIsQ0FBckYsRUFBNkcyTCxHQUE3RyxDQUFpSCxLQUFLd00sS0FBTCxDQUFXOVcsQ0FBNUgsQ0FBTixDQUFxSSxJQUFJOUIsSUFBRTdDLEVBQUU4WCxNQUFGLEdBQVdMLFFBQVgsQ0FBb0J6WCxDQUFwQixFQUF1QmtTLFNBQXZCLENBQWlDLENBQWpDLEVBQW9DakQsR0FBcEMsQ0FBd0MsS0FBS3dNLEtBQUwsQ0FBVzlXLENBQW5ELENBQU4sQ0FBNEQsT0FBTyxJQUFJNlcsU0FBSixDQUFjLEtBQUtDLEtBQW5CLEVBQXlCLEtBQUtBLEtBQUwsQ0FBV0csY0FBWCxDQUEwQjNZLENBQTFCLENBQXpCLEVBQXNELEtBQUt3WSxLQUFMLENBQVdHLGNBQVgsQ0FBMEJoWixDQUExQixDQUF0RCxFQUFtRkMsQ0FBbkYsQ0FBUDtBQUE2RixXQUFTeVosZUFBVCxDQUF5QnJaLENBQXpCLEVBQTJCO0FBQUMsT0FBRyxLQUFLOFksVUFBTCxFQUFILEVBQXFCO0FBQUMsWUFBTyxJQUFQO0FBQVksUUFBRzlZLEVBQUV3TyxNQUFGLE1BQVksQ0FBZixFQUFpQjtBQUFDLFlBQU8sS0FBS2dLLEtBQUwsQ0FBV1csV0FBWCxFQUFQO0FBQWdDLFFBQUkxWixJQUFFTyxDQUFOLENBQVEsSUFBSUwsSUFBRUYsRUFBRStVLFFBQUYsQ0FBVyxJQUFJbE0sVUFBSixDQUFlLEdBQWYsQ0FBWCxDQUFOLENBQXNDLElBQUlsSSxJQUFFLEtBQUtpSyxNQUFMLEVBQU4sQ0FBb0IsSUFBSXpLLElBQUUsSUFBTixDQUFXLElBQUlLLENBQUosQ0FBTSxLQUFJQSxJQUFFTixFQUFFa08sU0FBRixLQUFjLENBQXBCLEVBQXNCNU4sSUFBRSxDQUF4QixFQUEwQixFQUFFQSxDQUE1QixFQUE4QjtBQUFDTCxTQUFFQSxFQUFFc1osS0FBRixFQUFGLENBQVksSUFBSTVZLElBQUVYLEVBQUVvUCxPQUFGLENBQVU5TyxDQUFWLENBQU4sQ0FBbUIsSUFBSUUsSUFBRVYsRUFBRXNQLE9BQUYsQ0FBVTlPLENBQVYsQ0FBTixDQUFtQixJQUFHSyxLQUFHSCxDQUFOLEVBQVE7QUFBQ1AsV0FBRUEsRUFBRXNULEdBQUYsQ0FBTTVTLElBQUUsSUFBRixHQUFPRixDQUFiLENBQUY7QUFBa0I7QUFBQyxXQUFPUixDQUFQO0FBQVMsV0FBUzBaLGtCQUFULENBQTRCclosQ0FBNUIsRUFBOEJLLENBQTlCLEVBQWdDTixDQUFoQyxFQUFrQztBQUFDLE9BQUlKLENBQUosQ0FBTSxJQUFHSyxFQUFFNE4sU0FBRixLQUFjN04sRUFBRTZOLFNBQUYsRUFBakIsRUFBK0I7QUFBQ2pPLFNBQUVLLEVBQUU0TixTQUFGLEtBQWMsQ0FBaEI7QUFBa0IsSUFBbEQsTUFBc0Q7QUFBQ2pPLFNBQUVJLEVBQUU2TixTQUFGLEtBQWMsQ0FBaEI7QUFBa0IsUUFBSWxPLElBQUUsS0FBSzZZLEtBQUwsQ0FBV1csV0FBWCxFQUFOLENBQStCLElBQUlwYyxJQUFFLEtBQUttVyxHQUFMLENBQVM1UyxDQUFULENBQU4sQ0FBa0IsT0FBTVYsS0FBRyxDQUFULEVBQVc7QUFBQ0QsU0FBRUEsRUFBRXVaLEtBQUYsRUFBRixDQUFZLElBQUdqWixFQUFFOE8sT0FBRixDQUFVblAsQ0FBVixDQUFILEVBQWdCO0FBQUMsV0FBR0ksRUFBRStPLE9BQUYsQ0FBVW5QLENBQVYsQ0FBSCxFQUFnQjtBQUFDRCxhQUFFQSxFQUFFdVQsR0FBRixDQUFNblcsQ0FBTixDQUFGO0FBQVcsUUFBNUIsTUFBZ0M7QUFBQzRDLGFBQUVBLEVBQUV1VCxHQUFGLENBQU0sSUFBTixDQUFGO0FBQWM7QUFBQyxNQUFqRSxNQUFxRTtBQUFDLFdBQUdsVCxFQUFFK08sT0FBRixDQUFVblAsQ0FBVixDQUFILEVBQWdCO0FBQUNELGFBQUVBLEVBQUV1VCxHQUFGLENBQU01UyxDQUFOLENBQUY7QUFBVztBQUFDLFFBQUVWLENBQUY7QUFBSSxXQUFPRCxDQUFQO0FBQVMsWUFBVUUsU0FBVixDQUFvQjBaLElBQXBCLEdBQXlCYixXQUF6QixDQUFxQ0gsVUFBVTFZLFNBQVYsQ0FBb0IyWixJQUFwQixHQUF5QlosV0FBekIsQ0FBcUNMLFVBQVUxWSxTQUFWLENBQW9CaVUsTUFBcEIsR0FBMkIrRSxhQUEzQixDQUF5Q04sVUFBVTFZLFNBQVYsQ0FBb0JpWixVQUFwQixHQUErQkMsaUJBQS9CLENBQWlEUixVQUFVMVksU0FBVixDQUFvQndLLE1BQXBCLEdBQTJCMk8sYUFBM0IsQ0FBeUNULFVBQVUxWSxTQUFWLENBQW9CcVQsR0FBcEIsR0FBd0IrRixVQUF4QixDQUFtQ1YsVUFBVTFZLFNBQVYsQ0FBb0JxWixLQUFwQixHQUEwQkUsWUFBMUIsQ0FBdUNiLFVBQVUxWSxTQUFWLENBQW9CMlUsUUFBcEIsR0FBNkI2RSxlQUE3QixDQUE2Q2QsVUFBVTFZLFNBQVYsQ0FBb0I0WixXQUFwQixHQUFnQ0gsa0JBQWhDLENBQW1ELFNBQVNJLFNBQVQsQ0FBbUIzYyxDQUFuQixFQUFxQjZDLENBQXJCLEVBQXVCSyxDQUF2QixFQUF5QjtBQUFDLFFBQUt5QixDQUFMLEdBQU8zRSxDQUFQLENBQVMsS0FBS3VELENBQUwsR0FBTyxLQUFLcVksY0FBTCxDQUFvQi9ZLENBQXBCLENBQVAsQ0FBOEIsS0FBS0ksQ0FBTCxHQUFPLEtBQUsyWSxjQUFMLENBQW9CMVksQ0FBcEIsQ0FBUCxDQUE4QixLQUFLMFosUUFBTCxHQUFjLElBQUlwQixTQUFKLENBQWMsSUFBZCxFQUFtQixJQUFuQixFQUF3QixJQUF4QixDQUFkO0FBQTRDLFdBQVNxQixXQUFULEdBQXNCO0FBQUMsVUFBTyxLQUFLbFksQ0FBWjtBQUFjLFdBQVNtWSxXQUFULEdBQXNCO0FBQUMsVUFBTyxLQUFLdlosQ0FBWjtBQUFjLFdBQVN3WixXQUFULEdBQXNCO0FBQUMsVUFBTyxLQUFLOVosQ0FBWjtBQUFjLFdBQVMrWixhQUFULENBQXVCelosQ0FBdkIsRUFBeUI7QUFBQyxPQUFHQSxLQUFHLElBQU4sRUFBVztBQUFDLFlBQU8sSUFBUDtBQUFZLFdBQU8sS0FBS29CLENBQUwsQ0FBT29TLE1BQVAsQ0FBY3hULEVBQUVvQixDQUFoQixLQUFvQixLQUFLcEIsQ0FBTCxDQUFPd1QsTUFBUCxDQUFjeFQsRUFBRUEsQ0FBaEIsQ0FBcEIsSUFBd0MsS0FBS04sQ0FBTCxDQUFPOFQsTUFBUCxDQUFjeFQsRUFBRU4sQ0FBaEIsQ0FBL0M7QUFBbUUsV0FBU2dhLGtCQUFULEdBQTZCO0FBQUMsVUFBTyxLQUFLTCxRQUFaO0FBQXFCLFdBQVNNLHFCQUFULENBQStCM1osQ0FBL0IsRUFBaUM7QUFBQyxVQUFPLElBQUl1WCxnQkFBSixDQUFxQixLQUFLblcsQ0FBMUIsRUFBNEJwQixDQUE1QixDQUFQO0FBQXNDLFdBQVM0WixxQkFBVCxDQUErQnRhLENBQS9CLEVBQWlDO0FBQUMsV0FBTzlFLFNBQVM4RSxFQUFFakosTUFBRixDQUFTLENBQVQsRUFBVyxDQUFYLENBQVQsRUFBdUIsRUFBdkIsQ0FBUCxHQUFtQyxLQUFLLENBQUw7QUFBTyxjQUFPLEtBQUtnakIsUUFBWixDQUFxQixLQUFLLENBQUwsQ0FBTyxLQUFLLENBQUw7QUFBTyxjQUFPLElBQVAsQ0FBWSxLQUFLLENBQUwsQ0FBTyxLQUFLLENBQUwsQ0FBTyxLQUFLLENBQUw7QUFBTyxXQUFJclosSUFBRSxDQUFDVixFQUFFakssTUFBRixHQUFTLENBQVYsSUFBYSxDQUFuQixDQUFxQixJQUFJc0ssSUFBRUwsRUFBRWpKLE1BQUYsQ0FBUyxDQUFULEVBQVcySixDQUFYLENBQU4sQ0FBb0IsSUFBSU4sSUFBRUosRUFBRWpKLE1BQUYsQ0FBUzJKLElBQUUsQ0FBWCxFQUFhQSxDQUFiLENBQU4sQ0FBc0IsT0FBTyxJQUFJaVksU0FBSixDQUFjLElBQWQsRUFBbUIsS0FBS0ksY0FBTCxDQUFvQixJQUFJclEsVUFBSixDQUFlckksQ0FBZixFQUFpQixFQUFqQixDQUFwQixDQUFuQixFQUE2RCxLQUFLMFksY0FBTCxDQUFvQixJQUFJclEsVUFBSixDQUFldEksQ0FBZixFQUFpQixFQUFqQixDQUFwQixDQUE3RCxDQUFQLENBQStHO0FBQVEsY0FBTyxJQUFQLENBQXBTO0FBQWlULFlBQVVILFNBQVYsQ0FBb0JzYSxJQUFwQixHQUF5QlAsV0FBekIsQ0FBcUNGLFVBQVU3WixTQUFWLENBQW9CdWEsSUFBcEIsR0FBeUJQLFdBQXpCLENBQXFDSCxVQUFVN1osU0FBVixDQUFvQndhLElBQXBCLEdBQXlCUCxXQUF6QixDQUFxQ0osVUFBVTdaLFNBQVYsQ0FBb0JpVSxNQUFwQixHQUEyQmlHLGFBQTNCLENBQXlDTCxVQUFVN1osU0FBVixDQUFvQnNaLFdBQXBCLEdBQWdDYSxrQkFBaEMsQ0FBbUROLFVBQVU3WixTQUFWLENBQW9COFksY0FBcEIsR0FBbUNzQixxQkFBbkMsQ0FBeURQLFVBQVU3WixTQUFWLENBQW9CeWEsY0FBcEIsR0FBbUNKLHFCQUFuQztBQUNsa007O0FBRUEsS0FBSUssWUFBVyxZQUFVO0FBQUMsT0FBSXhkLElBQUUsaUVBQU4sQ0FBd0UsSUFBSW9ELElBQUUsd0VBQU4sQ0FBK0UsSUFBSTlHLElBQUUsU0FBTzhHLENBQVAsR0FBUyxLQUFmLENBQXFCLElBQUlQLElBQUUsSUFBSTRhLE1BQUosQ0FBVyx1Q0FBcUN6ZCxDQUFyQyxHQUF1QyxHQUF2QyxHQUEyQzFELENBQTNDLEdBQTZDLEdBQXhELEVBQTRELEdBQTVELENBQU4sQ0FBdUUsSUFBSWdILElBQUUsSUFBSW1hLE1BQUosQ0FBVyx3QkFBWCxFQUFvQyxHQUFwQyxDQUFOLENBQStDLElBQUkvYSxJQUFFLEVBQUMsS0FBSSxHQUFMLEVBQVMsS0FBSSxHQUFiLEVBQWlCLE1BQUssSUFBdEIsRUFBMkJPLEdBQUUsSUFBN0IsRUFBa0NMLEdBQUUsSUFBcEMsRUFBeUM5QixHQUFFLElBQTNDLEVBQWdEZ0UsR0FBRSxJQUFsRCxFQUF1REosR0FBRSxJQUF6RCxFQUFOLENBQXFFLFNBQVMvQixDQUFULENBQVdVLENBQVgsRUFBYThCLENBQWIsRUFBZXJFLENBQWYsRUFBaUI7QUFBQyxZQUFPcUUsSUFBRXpDLEVBQUV5QyxDQUFGLENBQUYsR0FBT0ssT0FBT0MsWUFBUCxDQUFvQjFILFNBQVMrQyxDQUFULEVBQVcsRUFBWCxDQUFwQixDQUFkO0FBQWtELFFBQUlvQyxJQUFFLElBQUlzQyxNQUFKLENBQVcsRUFBWCxDQUFOLENBQXFCLElBQUlqQyxJQUFFLElBQU4sQ0FBVyxJQUFJWCxJQUFFLEVBQUMsS0FBSTNHLE1BQUwsRUFBWSxLQUFJMUosS0FBaEIsRUFBTixDQUE2QixJQUFJMFEsSUFBRWhILE9BQU82SCxjQUFiLENBQTRCLE9BQU8sVUFBUzBDLENBQVQsRUFBVzdCLENBQVgsRUFBYTtBQUFDLFNBQUloQixJQUFFNkMsRUFBRWtYLEtBQUYsQ0FBUTdhLENBQVIsQ0FBTixDQUFpQixJQUFJdkIsQ0FBSixDQUFNLElBQUlpRixJQUFFNUMsRUFBRSxDQUFGLENBQU4sQ0FBVyxJQUFJTixJQUFFLEtBQU4sQ0FBWSxJQUFHLFFBQU1rRCxDQUFULEVBQVc7QUFBQ2pGLFdBQUUsRUFBRjtBQUFLLE1BQWpCLE1BQXFCO0FBQUMsV0FBRyxRQUFNaUYsQ0FBVCxFQUFXO0FBQUNqRixhQUFFLEVBQUY7QUFBSyxRQUFqQixNQUFxQjtBQUFDQSxhQUFFLEVBQUYsQ0FBSytCLElBQUUsSUFBRjtBQUFPO0FBQUMsVUFBSXFCLENBQUosQ0FBTSxJQUFJSSxJQUFFLENBQUN4RCxDQUFELENBQU4sQ0FBVSxLQUFJLElBQUlzQyxJQUFFLElBQUVQLENBQVIsRUFBVThCLElBQUV4QixFQUFFL0ssTUFBbEIsRUFBeUJnTCxJQUFFdUIsQ0FBM0IsRUFBNkIsRUFBRXZCLENBQS9CLEVBQWlDO0FBQUMyQyxXQUFFNUMsRUFBRUMsQ0FBRixDQUFGLENBQU8sSUFBSXlDLENBQUosQ0FBTSxRQUFPRSxFQUFFYixVQUFGLENBQWEsQ0FBYixDQUFQLEdBQXdCO0FBQVFXLGVBQUV2QixFQUFFLENBQUYsQ0FBRixDQUFPdUIsRUFBRTNCLEtBQUcyQixFQUFFek4sTUFBUCxJQUFlLENBQUUyTixDQUFqQixDQUFvQjdCLElBQUUsS0FBSyxDQUFQLENBQVMsTUFBTSxLQUFLLEVBQUw7QUFBUTZCLGVBQUVBLEVBQUV5RSxTQUFGLENBQVksQ0FBWixFQUFjekUsRUFBRTNOLE1BQUYsR0FBUyxDQUF2QixDQUFGLENBQTRCLElBQUcyTixFQUFFNU4sT0FBRixDQUFVNEssQ0FBVixNQUFlLENBQUMsQ0FBbkIsRUFBcUI7QUFBQ2dELGlCQUFFQSxFQUFFb1gsT0FBRixDQUFVcmEsQ0FBVixFQUFZWCxDQUFaLENBQUY7QUFBaUIsZ0JBQUVtQyxFQUFFLENBQUYsQ0FBRixDQUFPLElBQUcsQ0FBQ0osQ0FBSixFQUFNO0FBQUMsaUJBQUcyQixhQUFhOVQsS0FBaEIsRUFBc0I7QUFBQ21TLG1CQUFFMkIsRUFBRXpOLE1BQUo7QUFBVyxjQUFsQyxNQUFzQztBQUFDOEwsbUJBQUU2QixLQUFHckQsQ0FBTCxDQUFPO0FBQU07QUFBQyxjQUFFd0IsQ0FBRixJQUFLNkIsQ0FBTCxDQUFPN0IsSUFBRSxLQUFLLENBQVAsQ0FBUyxNQUFNLEtBQUssRUFBTDtBQUFRMkIsZUFBRXZCLEVBQUUsQ0FBRixDQUFGLENBQU9BLEVBQUU4WSxPQUFGLENBQVV2WCxFQUFFM0IsS0FBRzJCLEVBQUV6TixNQUFQLElBQWUsRUFBekIsRUFBNkI4TCxJQUFFLEtBQUssQ0FBUCxDQUFTLE1BQU0sS0FBSyxFQUFMO0FBQVFJLGFBQUUrWSxLQUFGLEdBQVUsTUFBTSxLQUFLLEdBQUw7QUFBU3hYLGVBQUV2QixFQUFFLENBQUYsQ0FBRixDQUFPdUIsRUFBRTNCLEtBQUcyQixFQUFFek4sTUFBUCxJQUFlLEtBQWYsQ0FBcUI4TCxJQUFFLEtBQUssQ0FBUCxDQUFTLE1BQU0sS0FBSyxHQUFMO0FBQVMyQixlQUFFdkIsRUFBRSxDQUFGLENBQUYsQ0FBT3VCLEVBQUUzQixLQUFHMkIsRUFBRXpOLE1BQVAsSUFBZSxJQUFmLENBQW9COEwsSUFBRSxLQUFLLENBQVAsQ0FBUyxNQUFNLEtBQUssR0FBTDtBQUFTMkIsZUFBRXZCLEVBQUUsQ0FBRixDQUFGLENBQU91QixFQUFFM0IsS0FBRzJCLEVBQUV6TixNQUFQLElBQWUsSUFBZixDQUFvQjhMLElBQUUsS0FBSyxDQUFQLENBQVMsTUFBTSxLQUFLLEdBQUw7QUFBUzJCLGVBQUV2QixFQUFFLENBQUYsQ0FBRixDQUFPQSxFQUFFOFksT0FBRixDQUFVdlgsRUFBRTNCLEtBQUcyQixFQUFFek4sTUFBUCxJQUFlLEVBQXpCLEVBQTZCOEwsSUFBRSxLQUFLLENBQVAsQ0FBUyxNQUFNLEtBQUssR0FBTDtBQUFTSSxhQUFFK1ksS0FBRixHQUFVLE1BQTFpQjtBQUFpakIsVUFBR3hhLENBQUgsRUFBSztBQUFDLFdBQUd5QixFQUFFbE0sTUFBRixLQUFXLENBQWQsRUFBZ0I7QUFBQyxlQUFNLElBQUlsRyxLQUFKLEVBQU47QUFBa0IsWUFBRTRPLEVBQUUsQ0FBRixDQUFGO0FBQU8sTUFBaEQsTUFBb0Q7QUFBQyxXQUFHd0QsRUFBRWxNLE1BQUwsRUFBWTtBQUFDLGVBQU0sSUFBSWxHLEtBQUosRUFBTjtBQUFrQjtBQUFDLFVBQUdpUyxDQUFILEVBQUs7QUFBQyxXQUFJQyxJQUFFLFNBQUZBLENBQUUsQ0FBU3NGLENBQVQsRUFBV0YsQ0FBWCxFQUFhO0FBQUMsYUFBSUksSUFBRUYsRUFBRUYsQ0FBRixDQUFOLENBQVcsSUFBR0ksS0FBRyxRQUFPQSxDQUFQLHlDQUFPQSxDQUFQLE9BQVcsUUFBakIsRUFBMEI7QUFBQyxlQUFJdEosSUFBRSxJQUFOLENBQVcsS0FBSSxJQUFJK0ksQ0FBUixJQUFhTyxDQUFiLEVBQWU7QUFBQyxpQkFBR25ILEVBQUUrQixJQUFGLENBQU9vRixDQUFQLEVBQVNQLENBQVQsS0FBYU8sTUFBSUYsQ0FBcEIsRUFBc0I7QUFBQyxtQkFBSTNJLElBQUVxRCxFQUFFd0YsQ0FBRixFQUFJUCxDQUFKLENBQU4sQ0FBYSxJQUFHdEksTUFBSSxLQUFLLENBQVosRUFBYztBQUFDNkksbUJBQUVQLENBQUYsSUFBS3RJLENBQUw7QUFBTyxnQkFBdEIsTUFBMEI7QUFBQyxxQkFBRyxDQUFDVCxDQUFKLEVBQU07QUFBQ0EsdUJBQUUsRUFBRjtBQUFLLG9CQUFFbkgsSUFBRixDQUFPa1EsQ0FBUDtBQUFVO0FBQUM7QUFBQyxnQkFBRy9JLENBQUgsRUFBSztBQUFDLGtCQUFJLElBQUlnSixJQUFFaEosRUFBRWxJLE1BQVosRUFBbUIsRUFBRWtSLENBQUYsSUFBSyxDQUF4QixHQUEyQjtBQUFDLHNCQUFPTSxFQUFFdEosRUFBRWdKLENBQUYsQ0FBRixDQUFQO0FBQWU7QUFBQztBQUFDLGlCQUFPbkYsRUFBRUssSUFBRixDQUFPa0YsQ0FBUCxFQUFTRixDQUFULEVBQVdJLENBQVgsQ0FBUDtBQUFxQixRQUFwUCxDQUFxUDlJLElBQUVzRCxFQUFFLEVBQUMsSUFBR3RELENBQUosRUFBRixFQUFTLEVBQVQsQ0FBRjtBQUFlLGFBQU9BLENBQVA7QUFBUyxJQUFwbEM7QUFBcWxDLEVBQXJtRCxFQUFkO0FBQ0EsS0FBSXdjLFVBQVEsSUFBSSxZQUFVLENBQUUsQ0FBaEIsRUFBWixDQUE2QkEsUUFBUUMsUUFBUixHQUFpQixVQUFTN2EsQ0FBVCxFQUFXSyxDQUFYLEVBQWE7QUFBQyxPQUFHTCxFQUFFdEosTUFBRixDQUFTMkosSUFBRSxDQUFYLEVBQWEsQ0FBYixLQUFpQixHQUFwQixFQUF3QjtBQUFDLFlBQU8sQ0FBUDtBQUFTLFFBQUlOLElBQUVsRixTQUFTbUYsRUFBRXRKLE1BQUYsQ0FBUzJKLElBQUUsQ0FBWCxFQUFhLENBQWIsQ0FBVCxDQUFOLENBQWdDLElBQUdOLEtBQUcsQ0FBTixFQUFRO0FBQUMsWUFBTyxDQUFDLENBQVI7QUFBVSxRQUFHLElBQUVBLENBQUYsSUFBS0EsSUFBRSxFQUFWLEVBQWE7QUFBQyxZQUFPQSxJQUFFLENBQVQ7QUFBVyxXQUFPLENBQUMsQ0FBUjtBQUFVLEVBQXZKLENBQXdKNmEsUUFBUUUsSUFBUixHQUFhLFVBQVM5YSxDQUFULEVBQVdELENBQVgsRUFBYTtBQUFDLE9BQUlNLElBQUV1YSxRQUFRQyxRQUFSLENBQWlCN2EsQ0FBakIsRUFBbUJELENBQW5CLENBQU4sQ0FBNEIsSUFBR00sSUFBRSxDQUFMLEVBQU87QUFBQyxZQUFNLEVBQU47QUFBUyxXQUFPTCxFQUFFdEosTUFBRixDQUFTcUosSUFBRSxDQUFYLEVBQWFNLElBQUUsQ0FBZixDQUFQO0FBQXlCLEVBQWpHLENBQWtHdWEsUUFBUUcsUUFBUixHQUFpQixVQUFTcGIsQ0FBVCxFQUFXVSxDQUFYLEVBQWE7QUFBQyxPQUFJTCxDQUFKLEVBQU1ELENBQU4sQ0FBUUMsSUFBRTRhLFFBQVFFLElBQVIsQ0FBYW5iLENBQWIsRUFBZVUsQ0FBZixDQUFGLENBQW9CLElBQUdMLEtBQUcsRUFBTixFQUFTO0FBQUMsWUFBTyxDQUFDLENBQVI7QUFBVSxRQUFHQSxFQUFFdEosTUFBRixDQUFTLENBQVQsRUFBVyxDQUFYLE1BQWdCLEdBQW5CLEVBQXVCO0FBQUNxSixTQUFFLElBQUlzSSxVQUFKLENBQWVySSxFQUFFdEosTUFBRixDQUFTLENBQVQsQ0FBZixFQUEyQixFQUEzQixDQUFGO0FBQWlDLElBQXpELE1BQTZEO0FBQUNxSixTQUFFLElBQUlzSSxVQUFKLENBQWVySSxDQUFmLEVBQWlCLEVBQWpCLENBQUY7QUFBdUIsV0FBT0QsRUFBRTBPLFFBQUYsRUFBUDtBQUFvQixFQUF4TCxDQUF5TG1NLFFBQVFJLE9BQVIsR0FBZ0IsVUFBU2hiLENBQVQsRUFBV0QsQ0FBWCxFQUFhO0FBQUMsT0FBSU0sSUFBRXVhLFFBQVFDLFFBQVIsQ0FBaUI3YSxDQUFqQixFQUFtQkQsQ0FBbkIsQ0FBTixDQUE0QixJQUFHTSxJQUFFLENBQUwsRUFBTztBQUFDLFlBQU9BLENBQVA7QUFBUyxXQUFPTixJQUFFLENBQUNNLElBQUUsQ0FBSCxJQUFNLENBQWY7QUFBaUIsRUFBNUYsQ0FBNkZ1YSxRQUFRSyxJQUFSLEdBQWEsVUFBU3RiLENBQVQsRUFBV1UsQ0FBWCxFQUFhO0FBQUMsT0FBSUwsSUFBRTRhLFFBQVFJLE9BQVIsQ0FBZ0JyYixDQUFoQixFQUFrQlUsQ0FBbEIsQ0FBTixDQUEyQixJQUFJTixJQUFFNmEsUUFBUUcsUUFBUixDQUFpQnBiLENBQWpCLEVBQW1CVSxDQUFuQixDQUFOLENBQTRCLE9BQU9WLEVBQUVqSixNQUFGLENBQVNzSixDQUFULEVBQVdELElBQUUsQ0FBYixDQUFQO0FBQXVCLEVBQXpHLENBQTBHNmEsUUFBUU0sTUFBUixHQUFlLFVBQVNuYixDQUFULEVBQVdNLENBQVgsRUFBYTtBQUFDLFVBQU9OLEVBQUVySixNQUFGLENBQVMySixDQUFULEVBQVcsQ0FBWCxJQUFjdWEsUUFBUUUsSUFBUixDQUFhL2EsQ0FBYixFQUFlTSxDQUFmLENBQWQsR0FBZ0N1YSxRQUFRSyxJQUFSLENBQWFsYixDQUFiLEVBQWVNLENBQWYsQ0FBdkM7QUFBeUQsRUFBdEYsQ0FBdUZ1YSxRQUFRTyxpQkFBUixHQUEwQixVQUFTeGIsQ0FBVCxFQUFXVSxDQUFYLEVBQWE7QUFBQyxPQUFJTCxJQUFFNGEsUUFBUUksT0FBUixDQUFnQnJiLENBQWhCLEVBQWtCVSxDQUFsQixDQUFOLENBQTJCLElBQUlOLElBQUU2YSxRQUFRRyxRQUFSLENBQWlCcGIsQ0FBakIsRUFBbUJVLENBQW5CLENBQU4sQ0FBNEIsT0FBT0wsSUFBRUQsSUFBRSxDQUFYO0FBQWEsRUFBNUcsQ0FBNkc2YSxRQUFRUSxXQUFSLEdBQW9CLFVBQVN0ZSxDQUFULEVBQVc0QyxDQUFYLEVBQWE7QUFBQyxPQUFJUSxJQUFFMGEsT0FBTixDQUFjLElBQUlwYixJQUFFLElBQUluUSxLQUFKLEVBQU4sQ0FBa0IsSUFBSStKLElBQUU4RyxFQUFFOGEsT0FBRixDQUFVbGUsQ0FBVixFQUFZNEMsQ0FBWixDQUFOLENBQXFCLElBQUc1QyxFQUFFcEcsTUFBRixDQUFTZ0osQ0FBVCxFQUFXLENBQVgsS0FBZSxJQUFsQixFQUF1QjtBQUFDRixPQUFFL0ksSUFBRixDQUFPMkMsSUFBRSxDQUFUO0FBQVksSUFBcEMsTUFBd0M7QUFBQ29HLE9BQUUvSSxJQUFGLENBQU8yQyxDQUFQO0FBQVUsUUFBSStHLElBQUVELEVBQUU2YSxRQUFGLENBQVdqZSxDQUFYLEVBQWE0QyxDQUFiLENBQU4sQ0FBc0IsSUFBSU0sSUFBRTVHLENBQU4sQ0FBUSxJQUFJdUcsSUFBRSxDQUFOLENBQVEsT0FBTSxDQUFOLEVBQVE7QUFBQyxTQUFJSSxJQUFFRyxFQUFFaWIsaUJBQUYsQ0FBb0JyZSxDQUFwQixFQUFzQmtELENBQXRCLENBQU4sQ0FBK0IsSUFBR0QsS0FBRyxJQUFILElBQVVBLElBQUUzRyxDQUFGLElBQU0rRyxJQUFFLENBQXJCLEVBQXlCO0FBQUM7QUFBTSxVQUFHUixLQUFHLEdBQU4sRUFBVTtBQUFDO0FBQU0sUUFBRWxKLElBQUYsQ0FBT3NKLENBQVAsRUFBVUMsSUFBRUQsQ0FBRixDQUFJSjtBQUFJLFdBQU9ILENBQVA7QUFBUyxFQUFwUyxDQUFxU29iLFFBQVFTLGNBQVIsR0FBdUIsVUFBUzFiLENBQVQsRUFBV0ksQ0FBWCxFQUFhakQsQ0FBYixFQUFlO0FBQUMsT0FBSWtELElBQUU0YSxRQUFRUSxXQUFSLENBQW9CemIsQ0FBcEIsRUFBc0JJLENBQXRCLENBQU4sQ0FBK0IsT0FBT0MsRUFBRWxELENBQUYsQ0FBUDtBQUFZLEVBQWxGLENBQW1GOGQsUUFBUVUsWUFBUixHQUFxQixVQUFTeGUsQ0FBVCxFQUFXNkMsQ0FBWCxFQUFhSyxDQUFiLEVBQWU1RyxDQUFmLEVBQWlCO0FBQUMsT0FBSW9HLElBQUVvYixPQUFOLENBQWMsSUFBSWxiLENBQUosRUFBTUssQ0FBTixDQUFRLElBQUdDLEVBQUV0SyxNQUFGLElBQVUsQ0FBYixFQUFlO0FBQUMsU0FBRzBELE1BQUkyQyxTQUFQLEVBQWlCO0FBQUMsV0FBR2UsRUFBRXBHLE1BQUYsQ0FBU2lKLENBQVQsRUFBVyxDQUFYLE1BQWdCdkcsQ0FBbkIsRUFBcUI7QUFBQyxlQUFLLGlDQUErQjBELEVBQUVwRyxNQUFGLENBQVNpSixDQUFULEVBQVcsQ0FBWCxDQUEvQixHQUE2QyxJQUE3QyxHQUFrRHZHLENBQXZEO0FBQXlEO0FBQUMsYUFBT3VHLENBQVA7QUFBUyxRQUFFSyxFQUFFMmEsS0FBRixFQUFGLENBQVk1YSxJQUFFUCxFQUFFNGIsV0FBRixDQUFjdGUsQ0FBZCxFQUFnQjZDLENBQWhCLENBQUYsQ0FBcUIsT0FBT0gsRUFBRThiLFlBQUYsQ0FBZXhlLENBQWYsRUFBaUJpRCxFQUFFTCxDQUFGLENBQWpCLEVBQXNCTSxDQUF0QixFQUF3QjVHLENBQXhCLENBQVA7QUFBa0MsRUFBM1AsQ0FBNFB3aEIsUUFBUVcsWUFBUixHQUFxQixVQUFTNWIsQ0FBVCxFQUFXSyxDQUFYLEVBQWFELENBQWIsRUFBZUwsQ0FBZixFQUFpQjtBQUFDLE9BQUk1QyxJQUFFOGQsT0FBTixDQUFjLElBQUl2YSxJQUFFdkQsRUFBRXdlLFlBQUYsQ0FBZTNiLENBQWYsRUFBaUJLLENBQWpCLEVBQW1CRCxDQUFuQixDQUFOLENBQTRCLElBQUdNLE1BQUl0RSxTQUFQLEVBQWlCO0FBQUMsV0FBSywyQkFBTDtBQUFpQyxRQUFHMkQsTUFBSTNELFNBQVAsRUFBaUI7QUFBQyxTQUFHNEQsRUFBRWpKLE1BQUYsQ0FBUzJKLENBQVQsRUFBVyxDQUFYLEtBQWVYLENBQWxCLEVBQW9CO0FBQUMsYUFBSyxpQ0FBK0JDLEVBQUVqSixNQUFGLENBQVMySixDQUFULEVBQVcsQ0FBWCxDQUEvQixHQUE2QyxJQUE3QyxHQUFrRFgsQ0FBdkQ7QUFBeUQ7QUFBQyxXQUFPNUMsRUFBRW9lLE1BQUYsQ0FBU3ZiLENBQVQsRUFBV1UsQ0FBWCxDQUFQO0FBQXFCLEVBQTFQLENBQTJQdWEsUUFBUVksVUFBUixHQUFtQixVQUFTMWUsQ0FBVCxFQUFXa0QsQ0FBWCxFQUFhRCxDQUFiLEVBQWVQLENBQWYsRUFBaUJwRyxDQUFqQixFQUFtQjtBQUFDLE9BQUlzRyxJQUFFa2IsT0FBTixDQUFjLElBQUl2YSxDQUFKLEVBQU1WLENBQU4sQ0FBUVUsSUFBRVgsRUFBRTRiLFlBQUYsQ0FBZXhlLENBQWYsRUFBaUJrRCxDQUFqQixFQUFtQkQsQ0FBbkIsRUFBcUJQLENBQXJCLENBQUYsQ0FBMEIsSUFBR2EsTUFBSXRFLFNBQVAsRUFBaUI7QUFBQyxXQUFLLDJCQUFMO0FBQWlDLFFBQUUyRCxFQUFFdWIsSUFBRixDQUFPbmUsQ0FBUCxFQUFTdUQsQ0FBVCxDQUFGLENBQWMsSUFBR2pILE1BQUksSUFBUCxFQUFZO0FBQUN1RyxTQUFFQSxFQUFFakosTUFBRixDQUFTLENBQVQsQ0FBRjtBQUFjLFdBQU9pSixDQUFQO0FBQVMsRUFBNUwsQ0FBNkxpYixRQUFRYSxXQUFSLEdBQW9CLFVBQVMzZSxDQUFULEVBQVc7QUFBQyxPQUFJMkMsSUFBRSxTQUFGQSxDQUFFLENBQVNNLENBQVQsRUFBV00sQ0FBWCxFQUFhO0FBQUMsU0FBR04sRUFBRXJLLE1BQUYsSUFBVTJLLENBQWIsRUFBZTtBQUFDLGNBQU9OLENBQVA7QUFBUyxhQUFPLElBQUkxUSxLQUFKLENBQVVnUixJQUFFTixFQUFFckssTUFBSixHQUFXLENBQXJCLEVBQXdCME0sSUFBeEIsQ0FBNkIsR0FBN0IsSUFBa0NyQyxDQUF6QztBQUEyQyxJQUF4RixDQUF5RixJQUFJSSxJQUFFLEVBQU4sQ0FBUyxJQUFJTyxJQUFFNUQsRUFBRXBHLE1BQUYsQ0FBUyxDQUFULEVBQVcsQ0FBWCxDQUFOLENBQW9CLElBQUlnSixJQUFFN0UsU0FBUzZGLENBQVQsRUFBVyxFQUFYLENBQU4sQ0FBcUJQLEVBQUUsQ0FBRixJQUFLLElBQUltQyxNQUFKLENBQVdnQyxLQUFLYSxLQUFMLENBQVd6RixJQUFFLEVBQWIsQ0FBWCxDQUFMLENBQWtDUyxFQUFFLENBQUYsSUFBSyxJQUFJbUMsTUFBSixDQUFXNUMsSUFBRSxFQUFiLENBQUwsQ0FBc0IsSUFBSXVDLElBQUVuRixFQUFFcEcsTUFBRixDQUFTLENBQVQsQ0FBTixDQUFrQixJQUFJMEosSUFBRSxFQUFOLENBQVMsS0FBSSxJQUFJWixJQUFFLENBQVYsRUFBWUEsSUFBRXlDLEVBQUV2TSxNQUFGLEdBQVMsQ0FBdkIsRUFBeUI4SixHQUF6QixFQUE2QjtBQUFDWSxPQUFFM0osSUFBRixDQUFPb0UsU0FBU29ILEVBQUV2TCxNQUFGLENBQVM4SSxJQUFFLENBQVgsRUFBYSxDQUFiLENBQVQsRUFBeUIsRUFBekIsQ0FBUDtBQUFxQyxRQUFJVSxJQUFFLEVBQU4sQ0FBUyxJQUFJUCxJQUFFLEVBQU4sQ0FBUyxLQUFJLElBQUlILElBQUUsQ0FBVixFQUFZQSxJQUFFWSxFQUFFMUssTUFBaEIsRUFBdUI4SixHQUF2QixFQUEyQjtBQUFDLFNBQUdZLEVBQUVaLENBQUYsSUFBSyxHQUFSLEVBQVk7QUFBQ0csV0FBRUEsSUFBRUYsRUFBRSxDQUFDVyxFQUFFWixDQUFGLElBQUssR0FBTixFQUFXeUIsUUFBWCxDQUFvQixDQUFwQixDQUFGLEVBQXlCLENBQXpCLENBQUo7QUFBZ0MsTUFBN0MsTUFBaUQ7QUFBQ3RCLFdBQUVBLElBQUVGLEVBQUUsQ0FBQ1csRUFBRVosQ0FBRixJQUFLLEdBQU4sRUFBV3lCLFFBQVgsQ0FBb0IsQ0FBcEIsQ0FBRixFQUF5QixDQUF6QixDQUFKLENBQWdDZixFQUFFekosSUFBRixDQUFPLElBQUk2TCxNQUFKLENBQVd6SCxTQUFTOEUsQ0FBVCxFQUFXLENBQVgsQ0FBWCxDQUFQLEVBQWtDQSxJQUFFLEVBQUY7QUFBSztBQUFDLFFBQUkvQixJQUFFdUMsRUFBRWlDLElBQUYsQ0FBTyxHQUFQLENBQU4sQ0FBa0IsSUFBR2xDLEVBQUV4SyxNQUFGLEdBQVMsQ0FBWixFQUFjO0FBQUNrSSxTQUFFQSxJQUFFLEdBQUYsR0FBTXNDLEVBQUVrQyxJQUFGLENBQU8sR0FBUCxDQUFSO0FBQW9CLFdBQU94RSxDQUFQO0FBQVMsRUFBdmlCLENBQXdpQmdkLFFBQVFjLElBQVIsR0FBYSxVQUFTbGEsQ0FBVCxFQUFXeEIsQ0FBWCxFQUFhRyxDQUFiLEVBQWVYLENBQWYsRUFBaUI7QUFBQyxPQUFJaUIsSUFBRW1hLE9BQU4sQ0FBYyxJQUFJMWEsSUFBRU8sRUFBRXdhLElBQVIsQ0FBYSxJQUFJNWMsSUFBRW9DLEVBQUVpYixJQUFSLENBQWEsSUFBSXZZLElBQUUxQyxFQUFFMmEsV0FBUixDQUFvQixJQUFJdGUsSUFBRTBFLENBQU4sQ0FBUSxJQUFHQSxhQUFhK1UsS0FBS29GLElBQUwsQ0FBVUMsVUFBMUIsRUFBcUM7QUFBQzllLFNBQUUwRSxFQUFFcWEsYUFBRixFQUFGO0FBQW9CLFFBQUlwYSxJQUFFLFNBQUZBLENBQUUsQ0FBU21GLENBQVQsRUFBV3hOLENBQVgsRUFBYTtBQUFDLFNBQUd3TixFQUFFbFIsTUFBRixJQUFVMEQsSUFBRSxDQUFmLEVBQWlCO0FBQUMsY0FBT3dOLENBQVA7QUFBUyxNQUEzQixNQUErQjtBQUFDLFdBQUl2RCxJQUFFdUQsRUFBRWxRLE1BQUYsQ0FBUyxDQUFULEVBQVcwQyxDQUFYLElBQWMsV0FBZCxHQUEwQndOLEVBQUVsUixNQUFGLEdBQVMsQ0FBbkMsR0FBcUMsVUFBckMsR0FBZ0RrUixFQUFFbFEsTUFBRixDQUFTa1EsRUFBRWxSLE1BQUYsR0FBUzBELENBQWxCLEVBQW9CQSxDQUFwQixDQUF0RCxDQUE2RSxPQUFPaUssQ0FBUDtBQUFTO0FBQUMsSUFBM0ksQ0FBNEksSUFBR3JELE1BQUlqRSxTQUFQLEVBQWlCO0FBQUNpRSxTQUFFLEVBQUM4YixrQkFBaUIsRUFBbEIsRUFBRjtBQUF3QixRQUFHM2IsTUFBSXBFLFNBQVAsRUFBaUI7QUFBQ29FLFNBQUUsQ0FBRjtBQUFJLFFBQUdYLE1BQUl6RCxTQUFQLEVBQWlCO0FBQUN5RCxTQUFFLEVBQUY7QUFBSyxRQUFJcEIsSUFBRTRCLEVBQUU4YixnQkFBUixDQUF5QixJQUFHaGYsRUFBRXBHLE1BQUYsQ0FBU3lKLENBQVQsRUFBVyxDQUFYLEtBQWUsSUFBbEIsRUFBdUI7QUFBQyxTQUFJVixJQUFFUyxFQUFFcEQsQ0FBRixFQUFJcUQsQ0FBSixDQUFOLENBQWEsSUFBR1YsS0FBRyxJQUFOLEVBQVc7QUFBQyxjQUFPRCxJQUFFLGlCQUFUO0FBQTJCLE1BQXZDLE1BQTJDO0FBQUMsY0FBT0EsSUFBRSxnQkFBVDtBQUEwQjtBQUFDLFFBQUcxQyxFQUFFcEcsTUFBRixDQUFTeUosQ0FBVCxFQUFXLENBQVgsS0FBZSxJQUFsQixFQUF1QjtBQUFDLFNBQUlWLElBQUVTLEVBQUVwRCxDQUFGLEVBQUlxRCxDQUFKLENBQU4sQ0FBYSxPQUFPWCxJQUFFLFVBQUYsR0FBYWlDLEVBQUVoQyxDQUFGLEVBQUlyQixDQUFKLENBQWIsR0FBb0IsSUFBM0I7QUFBZ0MsUUFBR3RCLEVBQUVwRyxNQUFGLENBQVN5SixDQUFULEVBQVcsQ0FBWCxLQUFlLElBQWxCLEVBQXVCO0FBQUMsU0FBSVYsSUFBRVMsRUFBRXBELENBQUYsRUFBSXFELENBQUosQ0FBTixDQUFhLE9BQU9YLElBQUUsWUFBRixHQUFlaUMsRUFBRWhDLENBQUYsRUFBSXJCLENBQUosQ0FBZixHQUFzQixJQUE3QjtBQUFrQyxRQUFHdEIsRUFBRXBHLE1BQUYsQ0FBU3lKLENBQVQsRUFBVyxDQUFYLEtBQWUsSUFBbEIsRUFBdUI7QUFBQyxTQUFJVixJQUFFUyxFQUFFcEQsQ0FBRixFQUFJcUQsQ0FBSixDQUFOLENBQWEsSUFBR00sRUFBRXNiLFNBQUYsQ0FBWXRjLENBQVosQ0FBSCxFQUFrQjtBQUFDLFdBQUlXLElBQUVaLElBQUUsNkJBQVIsQ0FBc0NZLElBQUVBLElBQUUvQixFQUFFb0IsQ0FBRixFQUFJTyxDQUFKLEVBQU0sQ0FBTixFQUFRUixJQUFFLElBQVYsQ0FBSixDQUFvQixPQUFPWSxDQUFQO0FBQVMsTUFBdEYsTUFBMEY7QUFBQyxjQUFPWixJQUFFLGNBQUYsR0FBaUJpQyxFQUFFaEMsQ0FBRixFQUFJckIsQ0FBSixDQUFqQixHQUF3QixJQUEvQjtBQUFvQztBQUFDLFFBQUd0QixFQUFFcEcsTUFBRixDQUFTeUosQ0FBVCxFQUFXLENBQVgsS0FBZSxJQUFsQixFQUF1QjtBQUFDLFlBQU9YLElBQUUsUUFBVDtBQUFrQixRQUFHMUMsRUFBRXBHLE1BQUYsQ0FBU3lKLENBQVQsRUFBVyxDQUFYLEtBQWUsSUFBbEIsRUFBdUI7QUFBQyxTQUFJOEIsSUFBRS9CLEVBQUVwRCxDQUFGLEVBQUlxRCxDQUFKLENBQU4sQ0FBYSxJQUFJRSxJQUFFa1csS0FBS29GLElBQUwsQ0FBVUssUUFBVixDQUFtQkMsV0FBbkIsQ0FBK0JoYSxDQUEvQixDQUFOLENBQXdDLElBQUl2QixJQUFFNlYsS0FBS29GLElBQUwsQ0FBVU8sSUFBVixDQUFlQyxHQUFmLENBQW1CQyxRQUFuQixDQUE0Qi9iLENBQTVCLENBQU4sQ0FBcUMsSUFBSU4sSUFBRU0sRUFBRW9hLE9BQUYsQ0FBVSxLQUFWLEVBQWdCLEdBQWhCLENBQU4sQ0FBMkIsSUFBRy9aLEtBQUcsRUFBTixFQUFTO0FBQUMsY0FBT2xCLElBQUUsbUJBQUYsR0FBc0JrQixDQUF0QixHQUF3QixJQUF4QixHQUE2QlgsQ0FBN0IsR0FBK0IsS0FBdEM7QUFBNEMsTUFBdEQsTUFBMEQ7QUFBQyxjQUFPUCxJQUFFLG9CQUFGLEdBQXVCTyxDQUF2QixHQUF5QixLQUFoQztBQUFzQztBQUFDLFFBQUdqRCxFQUFFcEcsTUFBRixDQUFTeUosQ0FBVCxFQUFXLENBQVgsS0FBZSxJQUFsQixFQUF1QjtBQUFDLFlBQU9YLElBQUUsY0FBRixHQUFpQjZjLFVBQVVuYyxFQUFFcEQsQ0FBRixFQUFJcUQsQ0FBSixDQUFWLENBQWpCLEdBQW1DLEtBQTFDO0FBQWdELFFBQUdyRCxFQUFFcEcsTUFBRixDQUFTeUosQ0FBVCxFQUFXLENBQVgsS0FBZSxJQUFsQixFQUF1QjtBQUFDLFlBQU9YLElBQUUsbUJBQUYsR0FBc0I2YyxVQUFVbmMsRUFBRXBELENBQUYsRUFBSXFELENBQUosQ0FBVixDQUF0QixHQUF3QyxLQUEvQztBQUFxRCxRQUFHckQsRUFBRXBHLE1BQUYsQ0FBU3lKLENBQVQsRUFBVyxDQUFYLEtBQWUsSUFBbEIsRUFBdUI7QUFBQyxZQUFPWCxJQUFFLGlCQUFGLEdBQW9CNmMsVUFBVW5jLEVBQUVwRCxDQUFGLEVBQUlxRCxDQUFKLENBQVYsQ0FBcEIsR0FBc0MsS0FBN0M7QUFBbUQsUUFBR3JELEVBQUVwRyxNQUFGLENBQVN5SixDQUFULEVBQVcsQ0FBWCxLQUFlLElBQWxCLEVBQXVCO0FBQUMsWUFBT1gsSUFBRSxhQUFGLEdBQWdCNmMsVUFBVW5jLEVBQUVwRCxDQUFGLEVBQUlxRCxDQUFKLENBQVYsQ0FBaEIsR0FBa0MsS0FBekM7QUFBK0MsUUFBR3JELEVBQUVwRyxNQUFGLENBQVN5SixDQUFULEVBQVcsQ0FBWCxLQUFlLElBQWxCLEVBQXVCO0FBQUMsWUFBT1gsSUFBRSxVQUFGLEdBQWE2YyxVQUFVbmMsRUFBRXBELENBQUYsRUFBSXFELENBQUosQ0FBVixDQUFiLEdBQStCLElBQXRDO0FBQTJDLFFBQUdyRCxFQUFFcEcsTUFBRixDQUFTeUosQ0FBVCxFQUFXLENBQVgsS0FBZSxJQUFsQixFQUF1QjtBQUFDLFlBQU9YLElBQUUsa0JBQUYsR0FBcUI2YyxVQUFVbmMsRUFBRXBELENBQUYsRUFBSXFELENBQUosQ0FBVixDQUFyQixHQUF1QyxJQUE5QztBQUFtRCxRQUFHckQsRUFBRXBHLE1BQUYsQ0FBU3lKLENBQVQsRUFBVyxDQUFYLEtBQWUsSUFBbEIsRUFBdUI7QUFBQyxTQUFHckQsRUFBRXBHLE1BQUYsQ0FBU3lKLENBQVQsRUFBVyxDQUFYLEtBQWUsTUFBbEIsRUFBeUI7QUFBQyxjQUFPWCxJQUFFLGVBQVQ7QUFBeUIsVUFBSVksSUFBRVosSUFBRSxZQUFSLENBQXFCLElBQUlHLElBQUV3RCxFQUFFckcsQ0FBRixFQUFJcUQsQ0FBSixDQUFOLENBQWEsSUFBSVQsSUFBRU0sQ0FBTixDQUFRLElBQUcsQ0FBQ0wsRUFBRWpLLE1BQUYsSUFBVSxDQUFWLElBQWFpSyxFQUFFakssTUFBRixJQUFVLENBQXhCLEtBQTRCb0gsRUFBRXBHLE1BQUYsQ0FBU2lKLEVBQUUsQ0FBRixDQUFULEVBQWMsQ0FBZCxLQUFrQixJQUE5QyxJQUFvRDdDLEVBQUVwRyxNQUFGLENBQVNpSixFQUFFQSxFQUFFakssTUFBRixHQUFTLENBQVgsQ0FBVCxFQUF1QixDQUF2QixLQUEyQixJQUFsRixFQUF1RjtBQUFDLFdBQUlnTCxJQUFFRCxFQUFFNmIsT0FBRixDQUFVcGMsRUFBRXBELENBQUYsRUFBSTZDLEVBQUUsQ0FBRixDQUFKLENBQVYsQ0FBTixDQUEyQixJQUFJaUMsSUFBRWpGLEtBQUtDLEtBQUwsQ0FBV0QsS0FBSzJFLFNBQUwsQ0FBZXRCLENBQWYsQ0FBWCxDQUFOLENBQW9DNEIsRUFBRTJhLFdBQUYsR0FBYzdiLENBQWQsQ0FBZ0JoQixJQUFFa0MsQ0FBRjtBQUFJLFdBQUksSUFBSTBCLElBQUUsQ0FBVixFQUFZQSxJQUFFM0QsRUFBRWpLLE1BQWhCLEVBQXVCNE4sR0FBdkIsRUFBMkI7QUFBQ2xELFdBQUVBLElBQUUvQixFQUFFdkIsQ0FBRixFQUFJNEMsQ0FBSixFQUFNQyxFQUFFMkQsQ0FBRixDQUFOLEVBQVc5RCxJQUFFLElBQWIsQ0FBSjtBQUF1QixhQUFPWSxDQUFQO0FBQVMsUUFBR3RELEVBQUVwRyxNQUFGLENBQVN5SixDQUFULEVBQVcsQ0FBWCxLQUFlLElBQWxCLEVBQXVCO0FBQUMsU0FBSUMsSUFBRVosSUFBRSxPQUFSLENBQWdCLElBQUlHLElBQUV3RCxFQUFFckcsQ0FBRixFQUFJcUQsQ0FBSixDQUFOLENBQWEsS0FBSSxJQUFJbUQsSUFBRSxDQUFWLEVBQVlBLElBQUUzRCxFQUFFakssTUFBaEIsRUFBdUI0TixHQUF2QixFQUEyQjtBQUFDbEQsV0FBRUEsSUFBRS9CLEVBQUV2QixDQUFGLEVBQUlrRCxDQUFKLEVBQU1MLEVBQUUyRCxDQUFGLENBQU4sRUFBVzlELElBQUUsSUFBYixDQUFKO0FBQXVCLGFBQU9ZLENBQVA7QUFBUyxRQUFJdUcsSUFBRTlMLFNBQVNpQyxFQUFFcEcsTUFBRixDQUFTeUosQ0FBVCxFQUFXLENBQVgsQ0FBVCxFQUF1QixFQUF2QixDQUFOLENBQWlDLElBQUcsQ0FBQ3dHLElBQUUsR0FBSCxLQUFTLENBQVosRUFBYztBQUFDLFNBQUkvSSxJQUFFK0ksSUFBRSxFQUFSLENBQVcsSUFBRyxDQUFDQSxJQUFFLEVBQUgsS0FBUSxDQUFYLEVBQWE7QUFBQyxXQUFJdkcsSUFBRVosSUFBRSxHQUFGLEdBQU01QixDQUFOLEdBQVEsS0FBZCxDQUFvQixJQUFJK0IsSUFBRXdELEVBQUVyRyxDQUFGLEVBQUlxRCxDQUFKLENBQU4sQ0FBYSxLQUFJLElBQUltRCxJQUFFLENBQVYsRUFBWUEsSUFBRTNELEVBQUVqSyxNQUFoQixFQUF1QjROLEdBQXZCLEVBQTJCO0FBQUNsRCxhQUFFQSxJQUFFL0IsRUFBRXZCLENBQUYsRUFBSWtELENBQUosRUFBTUwsRUFBRTJELENBQUYsQ0FBTixFQUFXOUQsSUFBRSxJQUFiLENBQUo7QUFBdUIsZUFBT1ksQ0FBUDtBQUFTLE1BQTNHLE1BQStHO0FBQUMsV0FBSVgsSUFBRVMsRUFBRXBELENBQUYsRUFBSXFELENBQUosQ0FBTixDQUFhLElBQUdWLEVBQUUvSSxNQUFGLENBQVMsQ0FBVCxFQUFXLENBQVgsS0FBZSxVQUFsQixFQUE2QjtBQUFDK0ksYUFBRTRjLFVBQVU1YyxDQUFWLENBQUY7QUFBZSxZQUFHTyxFQUFFdWMsV0FBRixLQUFnQixnQkFBaEIsSUFBa0MzZSxLQUFHLENBQXhDLEVBQTBDO0FBQUM2QixhQUFFNGMsVUFBVTVjLENBQVYsQ0FBRjtBQUFlLFlBQUlXLElBQUVaLElBQUUsR0FBRixHQUFNNUIsQ0FBTixHQUFRLElBQVIsR0FBYTZCLENBQWIsR0FBZSxJQUFyQixDQUEwQixPQUFPVyxDQUFQO0FBQVM7QUFBQyxXQUFPWixJQUFFLFVBQUYsR0FBYTFDLEVBQUVwRyxNQUFGLENBQVN5SixDQUFULEVBQVcsQ0FBWCxDQUFiLEdBQTJCLElBQTNCLEdBQWdDRCxFQUFFcEQsQ0FBRixFQUFJcUQsQ0FBSixDQUFoQyxHQUF1QyxJQUE5QztBQUFtRCxFQUF2MEUsQ0FBdzBFeWEsUUFBUW1CLFNBQVIsR0FBa0IsVUFBU2pmLENBQVQsRUFBVztBQUFDLE9BQUk2QyxJQUFFaWIsT0FBTixDQUFjLElBQUc5ZCxFQUFFcEgsTUFBRixHQUFTLENBQVQsSUFBWSxDQUFmLEVBQWlCO0FBQUMsWUFBTyxLQUFQO0FBQWEsUUFBSXNLLElBQUVMLEVBQUVvYixRQUFGLENBQVdqZSxDQUFYLEVBQWEsQ0FBYixDQUFOLENBQXNCLElBQUlpRCxJQUFFakQsRUFBRXBHLE1BQUYsQ0FBUyxDQUFULEVBQVcsQ0FBWCxDQUFOLENBQW9CLElBQUlnSixJQUFFQyxFQUFFbWIsSUFBRixDQUFPaGUsQ0FBUCxFQUFTLENBQVQsQ0FBTixDQUFrQixJQUFJdUQsSUFBRXZELEVBQUVwSCxNQUFGLEdBQVNxSyxFQUFFckssTUFBWCxHQUFrQmdLLEVBQUVoSyxNQUExQixDQUFpQyxJQUFHMkssS0FBR0wsSUFBRSxDQUFSLEVBQVU7QUFBQyxZQUFPLElBQVA7QUFBWSxXQUFPLEtBQVA7QUFBYSxFQUE1TSxDQUE2TTRhLFFBQVEwQixPQUFSLEdBQWdCLFVBQVNqYyxDQUFULEVBQVc7QUFBQyxPQUFJTCxJQUFFdVcsS0FBS29GLElBQVgsQ0FBZ0IsSUFBR3BGLEtBQUtqWCxJQUFMLENBQVVnRCxNQUFWLENBQWlCa2EsS0FBakIsQ0FBdUJuYyxDQUF2QixDQUFILEVBQTZCO0FBQUNBLFNBQUVMLEVBQUVnYyxRQUFGLENBQVdDLFdBQVgsQ0FBdUI1YixDQUF2QixDQUFGO0FBQTRCLFFBQUlOLElBQUVDLEVBQUVrYyxJQUFGLENBQU9DLEdBQVAsQ0FBV0MsUUFBWCxDQUFvQi9iLENBQXBCLENBQU4sQ0FBNkIsSUFBR04sTUFBSSxFQUFQLEVBQVU7QUFBQ0EsU0FBRU0sQ0FBRjtBQUFJLFdBQU9OLENBQVA7QUFBUyxFQUEzSjtBQUNwOEosS0FBSXdXLElBQUosQ0FBUyxJQUFHLE9BQU9BLElBQVAsSUFBYSxXQUFiLElBQTBCLENBQUNBLElBQTlCLEVBQW1DO0FBQUNBLFVBQUssRUFBTDtBQUFRLE1BQUcsT0FBT0EsS0FBS2pYLElBQVosSUFBa0IsV0FBbEIsSUFBK0IsQ0FBQ2lYLEtBQUtqWCxJQUF4QyxFQUE2QztBQUFDaVgsUUFBS2pYLElBQUwsR0FBVSxFQUFWO0FBQWEsT0FBS0EsSUFBTCxDQUFVZ0QsTUFBVixHQUFpQixZQUFVLENBQUUsQ0FBN0IsQ0FBOEIsU0FBU21hLE9BQVQsR0FBa0IsQ0FBRSxVQUFTQyxLQUFULENBQWUvYyxDQUFmLEVBQWlCO0FBQUMsT0FBSUksSUFBRSxJQUFJMVEsS0FBSixFQUFOLENBQWtCLEtBQUksSUFBSTJRLElBQUUsQ0FBVixFQUFZQSxJQUFFTCxFQUFFakssTUFBaEIsRUFBdUJzSyxHQUF2QixFQUEyQjtBQUFDRCxPQUFFQyxDQUFGLElBQUtMLEVBQUU2QyxVQUFGLENBQWF4QyxDQUFiLENBQUw7QUFBcUIsV0FBT0QsQ0FBUDtBQUFTLFdBQVM0YyxLQUFULENBQWU1YyxDQUFmLEVBQWlCO0FBQUMsT0FBSUosSUFBRSxFQUFOLENBQVMsS0FBSSxJQUFJSyxJQUFFLENBQVYsRUFBWUEsSUFBRUQsRUFBRXJLLE1BQWhCLEVBQXVCc0ssR0FBdkIsRUFBMkI7QUFBQ0wsU0FBRUEsSUFBRTJDLE9BQU9DLFlBQVAsQ0FBb0J4QyxFQUFFQyxDQUFGLENBQXBCLENBQUo7QUFBOEIsV0FBT0wsQ0FBUDtBQUFTLFdBQVNpZCxPQUFULENBQWlCN2MsQ0FBakIsRUFBbUI7QUFBQyxPQUFJakQsSUFBRSxFQUFOLENBQVMsS0FBSSxJQUFJNkMsSUFBRSxDQUFWLEVBQVlBLElBQUVJLEVBQUVySyxNQUFoQixFQUF1QmlLLEdBQXZCLEVBQTJCO0FBQUMsU0FBSUssSUFBRUQsRUFBRUosQ0FBRixFQUFLc0IsUUFBTCxDQUFjLEVBQWQsQ0FBTixDQUF3QixJQUFHakIsRUFBRXRLLE1BQUYsSUFBVSxDQUFiLEVBQWU7QUFBQ3NLLFdBQUUsTUFBSUEsQ0FBTjtBQUFRLFVBQUVsRCxJQUFFa0QsQ0FBSjtBQUFNLFdBQU9sRCxDQUFQO0FBQVMsV0FBUytmLE1BQVQsQ0FBZ0J4YyxDQUFoQixFQUFrQjtBQUFDLFVBQU91YyxRQUFRRixNQUFNcmMsQ0FBTixDQUFSLENBQVA7QUFBeUIsV0FBU3ljLE1BQVQsQ0FBZ0J6YyxDQUFoQixFQUFrQjtBQUFDLFVBQU93SCxRQUFRZ1YsT0FBT3hjLENBQVAsQ0FBUixDQUFQO0FBQTBCLFdBQVMwYyxPQUFULENBQWlCMWMsQ0FBakIsRUFBbUI7QUFBQyxVQUFPMmMsVUFBVW5WLFFBQVFnVixPQUFPeGMsQ0FBUCxDQUFSLENBQVYsQ0FBUDtBQUFxQyxXQUFTNGMsT0FBVCxDQUFpQjVjLENBQWpCLEVBQW1CO0FBQUMsVUFBT3NjLE1BQU0xVSxRQUFRaVYsVUFBVTdjLENBQVYsQ0FBUixDQUFOLENBQVA7QUFBb0MsV0FBUzJjLFNBQVQsQ0FBbUIzYyxDQUFuQixFQUFxQjtBQUFDQSxPQUFFQSxFQUFFb2EsT0FBRixDQUFVLEtBQVYsRUFBZ0IsRUFBaEIsQ0FBRixDQUFzQnBhLElBQUVBLEVBQUVvYSxPQUFGLENBQVUsS0FBVixFQUFnQixHQUFoQixDQUFGLENBQXVCcGEsSUFBRUEsRUFBRW9hLE9BQUYsQ0FBVSxLQUFWLEVBQWdCLEdBQWhCLENBQUYsQ0FBdUIsT0FBT3BhLENBQVA7QUFBUyxXQUFTNmMsU0FBVCxDQUFtQjdjLENBQW5CLEVBQXFCO0FBQUMsT0FBR0EsRUFBRTNLLE1BQUYsR0FBUyxDQUFULElBQVksQ0FBZixFQUFpQjtBQUFDMkssU0FBRUEsSUFBRSxJQUFKO0FBQVMsSUFBM0IsTUFBK0I7QUFBQyxTQUFHQSxFQUFFM0ssTUFBRixHQUFTLENBQVQsSUFBWSxDQUFmLEVBQWlCO0FBQUMySyxXQUFFQSxJQUFFLEdBQUo7QUFBUTtBQUFDLFFBQUVBLEVBQUVvYSxPQUFGLENBQVUsSUFBVixFQUFlLEdBQWYsQ0FBRixDQUFzQnBhLElBQUVBLEVBQUVvYSxPQUFGLENBQVUsSUFBVixFQUFlLEdBQWYsQ0FBRixDQUFzQixPQUFPcGEsQ0FBUDtBQUFTLFdBQVM4YyxTQUFULENBQW1COWMsQ0FBbkIsRUFBcUI7QUFBQyxPQUFHQSxFQUFFM0ssTUFBRixHQUFTLENBQVQsSUFBWSxDQUFmLEVBQWlCO0FBQUMySyxTQUFFLE1BQUlBLENBQU47QUFBUSxXQUFPMmMsVUFBVW5WLFFBQVF4SCxDQUFSLENBQVYsQ0FBUDtBQUE2QixXQUFTK2MsU0FBVCxDQUFtQi9jLENBQW5CLEVBQXFCO0FBQUMsVUFBTzBILFNBQVNtVixVQUFVN2MsQ0FBVixDQUFULENBQVA7QUFBOEIsTUFBSWdkLFVBQUosRUFBZUMsVUFBZixDQUEwQixJQUFHLE9BQU9DLE1BQVAsS0FBZ0IsVUFBbkIsRUFBOEI7QUFBQ0YsZ0JBQVcsb0JBQVNoZCxDQUFULEVBQVc7QUFBQyxZQUFPMmMsVUFBVSxJQUFJTyxNQUFKLENBQVdsZCxDQUFYLEVBQWEsTUFBYixFQUFxQlksUUFBckIsQ0FBOEIsUUFBOUIsQ0FBVixDQUFQO0FBQTBELElBQWpGLENBQWtGcWMsYUFBVyxvQkFBU2pkLENBQVQsRUFBVztBQUFDLFlBQU8sSUFBSWtkLE1BQUosQ0FBV0wsVUFBVTdjLENBQVYsQ0FBWCxFQUF3QixRQUF4QixFQUFrQ1ksUUFBbEMsQ0FBMkMsTUFBM0MsQ0FBUDtBQUEwRCxJQUFqRjtBQUFrRixFQUFuTSxNQUF1TTtBQUFDb2MsZ0JBQVcsb0JBQVNoZCxDQUFULEVBQVc7QUFBQyxZQUFPOGMsVUFBVUssWUFBWUMsc0JBQXNCcGQsQ0FBdEIsQ0FBWixDQUFWLENBQVA7QUFBd0QsSUFBL0UsQ0FBZ0ZpZCxhQUFXLG9CQUFTamQsQ0FBVCxFQUFXO0FBQUMsWUFBT3FDLG1CQUFtQmdiLFlBQVlOLFVBQVUvYyxDQUFWLENBQVosQ0FBbkIsQ0FBUDtBQUFxRCxJQUE1RTtBQUE2RSxXQUFTc2QsU0FBVCxDQUFtQnRkLENBQW5CLEVBQXFCO0FBQUMsVUFBT3dILFFBQVEyVixZQUFZQyxzQkFBc0JwZCxDQUF0QixDQUFaLENBQVIsQ0FBUDtBQUFzRCxXQUFTdWQsU0FBVCxDQUFtQnZkLENBQW5CLEVBQXFCO0FBQUMsVUFBT3FDLG1CQUFtQmdiLFlBQVkzVixTQUFTMUgsQ0FBVCxDQUFaLENBQW5CLENBQVA7QUFBb0QsV0FBU3dkLFNBQVQsQ0FBbUJ4ZCxDQUFuQixFQUFxQjtBQUFDLFVBQU9tZCxZQUFZQyxzQkFBc0JwZCxDQUF0QixDQUFaLENBQVA7QUFBNkMsV0FBU2djLFNBQVQsQ0FBbUJoYyxDQUFuQixFQUFxQjtBQUFDLFVBQU9xQyxtQkFBbUJnYixZQUFZcmQsQ0FBWixDQUFuQixDQUFQO0FBQTBDLFdBQVNzVyxTQUFULENBQW1CM1csQ0FBbkIsRUFBcUI7QUFBQyxPQUFJRCxJQUFFLEVBQU4sQ0FBUyxLQUFJLElBQUlNLElBQUUsQ0FBVixFQUFZQSxJQUFFTCxFQUFFdEssTUFBRixHQUFTLENBQXZCLEVBQXlCMkssS0FBRyxDQUE1QixFQUE4QjtBQUFDTixVQUFHdUMsT0FBT0MsWUFBUCxDQUFvQjFILFNBQVNtRixFQUFFdEosTUFBRixDQUFTMkosQ0FBVCxFQUFXLENBQVgsQ0FBVCxFQUF1QixFQUF2QixDQUFwQixDQUFIO0FBQW1ELFdBQU9OLENBQVA7QUFBUyxXQUFTOFcsU0FBVCxDQUFtQjdXLENBQW5CLEVBQXFCO0FBQUMsT0FBSUssSUFBRSxFQUFOLENBQVMsS0FBSSxJQUFJTixJQUFFLENBQVYsRUFBWUEsSUFBRUMsRUFBRXRLLE1BQWhCLEVBQXVCcUssR0FBdkIsRUFBMkI7QUFBQ00sVUFBRyxDQUFDLE1BQUlMLEVBQUV3QyxVQUFGLENBQWF6QyxDQUFiLEVBQWdCa0IsUUFBaEIsQ0FBeUIsRUFBekIsQ0FBTCxFQUFtQ2MsS0FBbkMsQ0FBeUMsQ0FBQyxDQUExQyxDQUFIO0FBQWdELFdBQU8xQixDQUFQO0FBQVMsV0FBU3lkLFFBQVQsQ0FBa0J6ZCxDQUFsQixFQUFvQjtBQUFDLFVBQU93SCxRQUFReEgsQ0FBUixDQUFQO0FBQWtCLFdBQVMwZCxVQUFULENBQW9CaGUsQ0FBcEIsRUFBc0I7QUFBQyxPQUFJTSxJQUFFeWQsU0FBUy9kLENBQVQsQ0FBTixDQUFrQixJQUFJQyxJQUFFSyxFQUFFb2EsT0FBRixDQUFVLFVBQVYsRUFBcUIsUUFBckIsQ0FBTixDQUFxQ3phLElBQUVBLEVBQUV5YSxPQUFGLENBQVUsT0FBVixFQUFrQixFQUFsQixDQUFGLENBQXdCLE9BQU96YSxDQUFQO0FBQVMsV0FBU2dlLFVBQVQsQ0FBb0JqZSxDQUFwQixFQUFzQjtBQUFDLE9BQUlNLElBQUVOLEVBQUUwYSxPQUFGLENBQVUsb0JBQVYsRUFBK0IsRUFBL0IsQ0FBTixDQUF5QyxJQUFJemEsSUFBRStILFNBQVMxSCxDQUFULENBQU4sQ0FBa0IsT0FBT0wsQ0FBUDtBQUFTLFdBQVNpZSxRQUFULENBQWtCNWQsQ0FBbEIsRUFBb0JOLENBQXBCLEVBQXNCO0FBQUMsT0FBSUMsSUFBRStkLFdBQVcxZCxDQUFYLENBQU4sQ0FBb0IsT0FBTSxnQkFBY04sQ0FBZCxHQUFnQixXQUFoQixHQUE0QkMsQ0FBNUIsR0FBOEIsZUFBOUIsR0FBOENELENBQTlDLEdBQWdELFdBQXREO0FBQWtFLFdBQVNtZSxRQUFULENBQWtCN2QsQ0FBbEIsRUFBb0JOLENBQXBCLEVBQXNCO0FBQUMsT0FBR00sRUFBRTVLLE9BQUYsQ0FBVSxhQUFWLEtBQTBCLENBQUMsQ0FBOUIsRUFBZ0M7QUFBQyxXQUFLLDRCQUEwQnNLLENBQS9CO0FBQWlDLFFBQUdBLE1BQUloRSxTQUFQLEVBQWlCO0FBQUNzRSxTQUFFQSxFQUFFb2EsT0FBRixDQUFVLGdCQUFjMWEsQ0FBZCxHQUFnQixPQUExQixFQUFrQyxFQUFsQyxDQUFGLENBQXdDTSxJQUFFQSxFQUFFb2EsT0FBRixDQUFVLGNBQVkxYSxDQUFaLEdBQWMsT0FBeEIsRUFBZ0MsRUFBaEMsQ0FBRjtBQUFzQyxJQUFoRyxNQUFvRztBQUFDTSxTQUFFQSxFQUFFb2EsT0FBRixDQUFVLHVCQUFWLEVBQWtDLEVBQWxDLENBQUYsQ0FBd0NwYSxJQUFFQSxFQUFFb2EsT0FBRixDQUFVLHFCQUFWLEVBQWdDLEVBQWhDLENBQUY7QUFBc0MsV0FBT3VELFdBQVczZCxDQUFYLENBQVA7QUFBcUIsV0FBUzhkLGdCQUFULENBQTBCeGUsQ0FBMUIsRUFBNEI7QUFBQyxPQUFHQSxFQUFFakssTUFBRixHQUFTLENBQVQsSUFBWSxDQUFmLEVBQWlCO0FBQUMsV0FBSywwQkFBTDtBQUFnQyxRQUFHaUssRUFBRTZhLEtBQUYsQ0FBUSxnQkFBUixLQUEyQixJQUE5QixFQUFtQztBQUFDLFdBQUssMEJBQUw7QUFBZ0MsUUFBSXphLElBQUUsSUFBSXFlLFdBQUosQ0FBZ0J6ZSxFQUFFakssTUFBRixHQUFTLENBQXpCLENBQU4sQ0FBa0MsSUFBSTJLLElBQUUsSUFBSWdlLFFBQUosQ0FBYXRlLENBQWIsQ0FBTixDQUFzQixLQUFJLElBQUlDLElBQUUsQ0FBVixFQUFZQSxJQUFFTCxFQUFFakssTUFBRixHQUFTLENBQXZCLEVBQXlCc0ssR0FBekIsRUFBNkI7QUFBQ0ssT0FBRWllLFFBQUYsQ0FBV3RlLENBQVgsRUFBYW5GLFNBQVM4RSxFQUFFakosTUFBRixDQUFTc0osSUFBRSxDQUFYLEVBQWEsQ0FBYixDQUFULEVBQXlCLEVBQXpCLENBQWI7QUFBMkMsV0FBT0QsQ0FBUDtBQUFTLFdBQVN3ZSxnQkFBVCxDQUEwQnhlLENBQTFCLEVBQTRCO0FBQUMsT0FBSUosSUFBRSxFQUFOLENBQVMsSUFBSVUsSUFBRSxJQUFJZ2UsUUFBSixDQUFhdGUsQ0FBYixDQUFOLENBQXNCLEtBQUksSUFBSUMsSUFBRSxDQUFWLEVBQVlBLElBQUVELEVBQUV5ZSxVQUFoQixFQUEyQnhlLEdBQTNCLEVBQStCO0FBQUNMLFVBQUcsQ0FBQyxPQUFLVSxFQUFFb2UsUUFBRixDQUFXemUsQ0FBWCxFQUFjaUIsUUFBZCxDQUF1QixFQUF2QixDQUFOLEVBQWtDYyxLQUFsQyxDQUF3QyxDQUFDLENBQXpDLENBQUg7QUFBK0MsV0FBT3BDLENBQVA7QUFBUyxXQUFTK2UsVUFBVCxDQUFvQjlnQixDQUFwQixFQUFzQjtBQUFDLE9BQUl1QyxDQUFKLEVBQU1ELENBQU4sRUFBUStCLENBQVIsRUFBVW5GLENBQVYsRUFBWTRDLENBQVosRUFBY3RHLENBQWQsRUFBZ0IyRyxDQUFoQixFQUFrQkssQ0FBbEIsQ0FBb0IsSUFBSUMsQ0FBSixFQUFNWixDQUFOLEVBQVFELENBQVIsRUFBVVEsQ0FBVixDQUFZQSxJQUFFcEMsRUFBRTRjLEtBQUYsQ0FBUSx3REFBUixDQUFGLENBQW9FLElBQUd4YSxDQUFILEVBQUs7QUFBQ0ssU0FBRUwsRUFBRSxDQUFGLENBQUYsQ0FBT0csSUFBRXRGLFNBQVN3RixDQUFULENBQUYsQ0FBYyxJQUFHQSxFQUFFM0ssTUFBRixLQUFXLENBQWQsRUFBZ0I7QUFBQyxXQUFHLE1BQUl5SyxDQUFKLElBQU9BLElBQUUsR0FBWixFQUFnQjtBQUFDQSxhQUFFLE9BQUtBLENBQVA7QUFBUyxRQUExQixNQUE4QjtBQUFDLGFBQUcsS0FBR0EsQ0FBSCxJQUFNQSxJQUFFLEVBQVgsRUFBYztBQUFDQSxlQUFFLE9BQUtBLENBQVA7QUFBUztBQUFDO0FBQUMsVUFBRXRGLFNBQVNtRixFQUFFLENBQUYsQ0FBVCxJQUFlLENBQWpCLENBQW1CaUMsSUFBRXBILFNBQVNtRixFQUFFLENBQUYsQ0FBVCxDQUFGLENBQWlCbEQsSUFBRWpDLFNBQVNtRixFQUFFLENBQUYsQ0FBVCxDQUFGLENBQWlCTixJQUFFN0UsU0FBU21GLEVBQUUsQ0FBRixDQUFULENBQUYsQ0FBaUI1RyxJQUFFeUIsU0FBU21GLEVBQUUsQ0FBRixDQUFULENBQUYsQ0FBaUJELElBQUUsQ0FBRixDQUFJTixJQUFFTyxFQUFFLENBQUYsQ0FBRixDQUFPLElBQUdQLE1BQUksRUFBUCxFQUFVO0FBQUNELFdBQUUsQ0FBQ0MsRUFBRS9JLE1BQUYsQ0FBUyxDQUFULElBQVksSUFBYixFQUFtQkEsTUFBbkIsQ0FBMEIsQ0FBMUIsRUFBNEIsQ0FBNUIsQ0FBRixDQUFpQ3FKLElBQUVsRixTQUFTMkUsQ0FBVCxDQUFGO0FBQWMsYUFBT2pCLEtBQUtvZ0IsR0FBTCxDQUFTeGUsQ0FBVCxFQUFXRCxDQUFYLEVBQWErQixDQUFiLEVBQWVuRixDQUFmLEVBQWlCNEMsQ0FBakIsRUFBbUJ0RyxDQUFuQixFQUFxQjJHLENBQXJCLENBQVA7QUFBK0IsVUFBSyw4QkFBNEJuQyxDQUFqQztBQUFtQyxXQUFTZ2hCLFNBQVQsQ0FBbUJ2ZSxDQUFuQixFQUFxQjtBQUFDLE9BQUlOLElBQUUyZSxXQUFXcmUsQ0FBWCxDQUFOLENBQW9CLE9BQU8sQ0FBQyxFQUFFTixJQUFFLElBQUosQ0FBUjtBQUFrQixXQUFTOGUsVUFBVCxDQUFvQnhlLENBQXBCLEVBQXNCO0FBQUMsVUFBTyxJQUFJOUIsSUFBSixDQUFTbWdCLFdBQVdyZSxDQUFYLENBQVQsQ0FBUDtBQUErQixXQUFTeWUsVUFBVCxDQUFvQnRmLENBQXBCLEVBQXNCMUMsQ0FBdEIsRUFBd0I0QyxDQUF4QixFQUEwQjtBQUFDLE9BQUlLLENBQUosQ0FBTSxJQUFJTSxJQUFFYixFQUFFdWYsY0FBRixFQUFOLENBQXlCLElBQUdqaUIsQ0FBSCxFQUFLO0FBQUMsU0FBR3VELElBQUUsSUFBRixJQUFRLE9BQUtBLENBQWhCLEVBQWtCO0FBQUMsYUFBSyxrQ0FBZ0NBLENBQXJDO0FBQXVDLFVBQUUsQ0FBQyxLQUFHQSxDQUFKLEVBQU8wQixLQUFQLENBQWEsQ0FBQyxDQUFkLENBQUY7QUFBbUIsSUFBbkYsTUFBdUY7QUFBQ2hDLFNBQUUsQ0FBQyxRQUFNTSxDQUFQLEVBQVUwQixLQUFWLENBQWdCLENBQUMsQ0FBakIsQ0FBRjtBQUFzQixTQUFHLENBQUMsT0FBS3ZDLEVBQUV3ZixXQUFGLEtBQWdCLENBQXJCLENBQUQsRUFBMEJqZCxLQUExQixDQUFnQyxDQUFDLENBQWpDLENBQUgsQ0FBdUNoQyxLQUFHLENBQUMsTUFBSVAsRUFBRXlmLFVBQUYsRUFBTCxFQUFxQmxkLEtBQXJCLENBQTJCLENBQUMsQ0FBNUIsQ0FBSCxDQUFrQ2hDLEtBQUcsQ0FBQyxNQUFJUCxFQUFFMGYsV0FBRixFQUFMLEVBQXNCbmQsS0FBdEIsQ0FBNEIsQ0FBQyxDQUE3QixDQUFILENBQW1DaEMsS0FBRyxDQUFDLE1BQUlQLEVBQUUyZixhQUFGLEVBQUwsRUFBd0JwZCxLQUF4QixDQUE4QixDQUFDLENBQS9CLENBQUgsQ0FBcUNoQyxLQUFHLENBQUMsTUFBSVAsRUFBRTRmLGFBQUYsRUFBTCxFQUF3QnJkLEtBQXhCLENBQThCLENBQUMsQ0FBL0IsQ0FBSCxDQUFxQyxJQUFHckMsQ0FBSCxFQUFLO0FBQUMsU0FBSU0sSUFBRVIsRUFBRTZmLGtCQUFGLEVBQU4sQ0FBNkIsSUFBR3JmLE1BQUksQ0FBUCxFQUFTO0FBQUNBLFdBQUUsQ0FBQyxPQUFLQSxDQUFOLEVBQVMrQixLQUFULENBQWUsQ0FBQyxDQUFoQixDQUFGLENBQXFCL0IsSUFBRUEsRUFBRXlhLE9BQUYsQ0FBVSxNQUFWLEVBQWlCLEVBQWpCLENBQUYsQ0FBdUIxYSxLQUFHLE1BQUlDLENBQVA7QUFBUztBQUFDLFNBQUcsR0FBSCxDQUFPLE9BQU9ELENBQVA7QUFBUyxXQUFTeWQsV0FBVCxDQUFxQm5kLENBQXJCLEVBQXVCO0FBQUMsVUFBT0EsRUFBRW9hLE9BQUYsQ0FBVSxJQUFWLEVBQWUsRUFBZixDQUFQO0FBQTBCLFdBQVNpRCxXQUFULENBQXFCcmQsQ0FBckIsRUFBdUI7QUFBQyxVQUFPQSxFQUFFb2EsT0FBRixDQUFVLE9BQVYsRUFBa0IsS0FBbEIsQ0FBUDtBQUFnQyxXQUFTNkUsU0FBVCxDQUFtQjlmLENBQW5CLEVBQXFCO0FBQUMsT0FBSU8sSUFBRSx3QkFBTixDQUErQixJQUFHLENBQUNQLEVBQUVnYixLQUFGLENBQVEsaUJBQVIsQ0FBSixFQUErQjtBQUFDLFdBQU16YSxDQUFOO0FBQVEsUUFBRVAsRUFBRStmLFdBQUYsRUFBRixDQUFrQixJQUFJNWYsSUFBRUgsRUFBRWdnQixLQUFGLENBQVEsR0FBUixFQUFhOXBCLE1BQWIsR0FBb0IsQ0FBMUIsQ0FBNEIsSUFBR2lLLElBQUUsQ0FBTCxFQUFPO0FBQUMsV0FBTUksQ0FBTjtBQUFRLFFBQUlqRCxJQUFFLElBQUkyaUIsTUFBSixDQUFXLElBQUU5ZixDQUFGLEdBQUksQ0FBZixDQUFOLENBQXdCSCxJQUFFQSxFQUFFaWIsT0FBRixDQUFVLElBQVYsRUFBZTNkLENBQWYsQ0FBRixDQUFvQixJQUFJa0QsSUFBRVIsRUFBRWdnQixLQUFGLENBQVEsR0FBUixDQUFOLENBQW1CLElBQUd4ZixFQUFFdEssTUFBRixJQUFVLENBQWIsRUFBZTtBQUFDLFdBQU1xSyxDQUFOO0FBQVEsU0FBSSxJQUFJTCxJQUFFLENBQVYsRUFBWUEsSUFBRSxDQUFkLEVBQWdCQSxHQUFoQixFQUFvQjtBQUFDTSxPQUFFTixDQUFGLElBQUssQ0FBQyxTQUFPTSxFQUFFTixDQUFGLENBQVIsRUFBY3FDLEtBQWQsQ0FBb0IsQ0FBQyxDQUFyQixDQUFMO0FBQTZCLFdBQU8vQixFQUFFb0MsSUFBRixDQUFPLEVBQVAsQ0FBUDtBQUFrQixXQUFTc2QsU0FBVCxDQUFtQjVpQixDQUFuQixFQUFxQjtBQUFDLE9BQUcsQ0FBQ0EsRUFBRTBkLEtBQUYsQ0FBUSxtQkFBUixDQUFKLEVBQWlDO0FBQUMsV0FBSyw4QkFBTDtBQUFvQyxRQUFFMWQsRUFBRXlpQixXQUFGLEVBQUYsQ0FBa0IsSUFBSXhmLElBQUVqRCxFQUFFMGQsS0FBRixDQUFRLFNBQVIsQ0FBTixDQUF5QixLQUFJLElBQUk3YSxJQUFFLENBQVYsRUFBWUEsSUFBRSxDQUFkLEVBQWdCQSxHQUFoQixFQUFvQjtBQUFDSSxPQUFFSixDQUFGLElBQUtJLEVBQUVKLENBQUYsRUFBSzhhLE9BQUwsQ0FBYSxLQUFiLEVBQW1CLEVBQW5CLENBQUwsQ0FBNEIsSUFBRzFhLEVBQUVKLENBQUYsS0FBTSxFQUFULEVBQVk7QUFBQ0ksU0FBRUosQ0FBRixJQUFLLEdBQUw7QUFBUztBQUFDLFFBQUUsTUFBSUksRUFBRXFDLElBQUYsQ0FBTyxHQUFQLENBQUosR0FBZ0IsR0FBbEIsQ0FBc0IsSUFBSXBDLElBQUVsRCxFQUFFMGQsS0FBRixDQUFRLFlBQVIsQ0FBTixDQUE0QixJQUFHeGEsTUFBSSxJQUFQLEVBQVk7QUFBQyxZQUFPbEQsRUFBRWlGLEtBQUYsQ0FBUSxDQUFSLEVBQVUsQ0FBQyxDQUFYLENBQVA7QUFBcUIsUUFBSXJDLElBQUUsRUFBTixDQUFTLEtBQUksSUFBSUMsSUFBRSxDQUFWLEVBQVlBLElBQUVLLEVBQUV0SyxNQUFoQixFQUF1QmlLLEdBQXZCLEVBQTJCO0FBQUMsU0FBR0ssRUFBRUwsQ0FBRixFQUFLakssTUFBTCxHQUFZZ0ssRUFBRWhLLE1BQWpCLEVBQXdCO0FBQUNnSyxXQUFFTSxFQUFFTCxDQUFGLENBQUY7QUFBTztBQUFDLFFBQUU3QyxFQUFFMmQsT0FBRixDQUFVL2EsQ0FBVixFQUFZLElBQVosQ0FBRixDQUFvQixPQUFPNUMsRUFBRWlGLEtBQUYsQ0FBUSxDQUFSLEVBQVUsQ0FBQyxDQUFYLENBQVA7QUFBcUIsV0FBUzRkLE9BQVQsQ0FBaUI1ZixDQUFqQixFQUFtQjtBQUFDLE9BQUlKLElBQUUscUJBQU4sQ0FBNEIsSUFBRyxDQUFDSSxFQUFFeWEsS0FBRixDQUFRLGdDQUFSLENBQUosRUFBOEM7QUFBQyxXQUFNN2EsQ0FBTjtBQUFRLFFBQUdJLEVBQUVySyxNQUFGLElBQVUsQ0FBYixFQUFlO0FBQUMsU0FBSXNLLENBQUosQ0FBTSxJQUFHO0FBQUNBLFdBQUVuRixTQUFTa0YsRUFBRXJKLE1BQUYsQ0FBUyxDQUFULEVBQVcsQ0FBWCxDQUFULEVBQXVCLEVBQXZCLElBQTJCLEdBQTNCLEdBQStCbUUsU0FBU2tGLEVBQUVySixNQUFGLENBQVMsQ0FBVCxFQUFXLENBQVgsQ0FBVCxFQUF1QixFQUF2QixDQUEvQixHQUEwRCxHQUExRCxHQUE4RG1FLFNBQVNrRixFQUFFckosTUFBRixDQUFTLENBQVQsRUFBVyxDQUFYLENBQVQsRUFBdUIsRUFBdkIsQ0FBOUQsR0FBeUYsR0FBekYsR0FBNkZtRSxTQUFTa0YsRUFBRXJKLE1BQUYsQ0FBUyxDQUFULEVBQVcsQ0FBWCxDQUFULEVBQXVCLEVBQXZCLENBQS9GLENBQTBILE9BQU9zSixDQUFQO0FBQVMsTUFBdkksQ0FBdUksT0FBTUssQ0FBTixFQUFRO0FBQUMsYUFBTVYsQ0FBTjtBQUFRO0FBQUMsSUFBL0ssTUFBbUw7QUFBQyxTQUFHSSxFQUFFckssTUFBRixJQUFVLEVBQWIsRUFBZ0I7QUFBQyxjQUFPZ3FCLFVBQVUzZixDQUFWLENBQVA7QUFBb0IsTUFBckMsTUFBeUM7QUFBQyxjQUFPQSxDQUFQO0FBQVM7QUFBQztBQUFDLFdBQVM2ZixPQUFULENBQWlCbGdCLENBQWpCLEVBQW1CO0FBQUMsT0FBSVEsSUFBRSxzQkFBTixDQUE2QlIsSUFBRUEsRUFBRTZmLFdBQUYsQ0FBYzdmLENBQWQsQ0FBRixDQUFtQixJQUFHQSxFQUFFOGEsS0FBRixDQUFRLFdBQVIsQ0FBSCxFQUF3QjtBQUFDLFNBQUl6YSxJQUFFTCxFQUFFOGYsS0FBRixDQUFRLEdBQVIsQ0FBTixDQUFtQixJQUFHemYsRUFBRXJLLE1BQUYsS0FBVyxDQUFkLEVBQWdCO0FBQUMsYUFBTXdLLENBQU47QUFBUSxVQUFJVixJQUFFLEVBQU4sQ0FBUyxJQUFHO0FBQUMsWUFBSSxJQUFJMUMsSUFBRSxDQUFWLEVBQVlBLElBQUUsQ0FBZCxFQUFnQkEsR0FBaEIsRUFBb0I7QUFBQyxhQUFJMkMsSUFBRTVFLFNBQVNrRixFQUFFakQsQ0FBRixDQUFULENBQU4sQ0FBcUIwQyxLQUFHLENBQUMsTUFBSUMsRUFBRXdCLFFBQUYsQ0FBVyxFQUFYLENBQUwsRUFBcUJjLEtBQXJCLENBQTJCLENBQUMsQ0FBNUIsQ0FBSDtBQUFrQyxlQUFPdkMsQ0FBUDtBQUFTLE1BQXpGLENBQXlGLE9BQU1RLENBQU4sRUFBUTtBQUFDLGFBQU1FLENBQU47QUFBUTtBQUFDLElBQXpMLE1BQTZMO0FBQUMsU0FBR1IsRUFBRThhLEtBQUYsQ0FBUSxjQUFSLEtBQXlCOWEsRUFBRWpLLE9BQUYsQ0FBVSxHQUFWLE1BQWlCLENBQUMsQ0FBOUMsRUFBZ0Q7QUFBQyxjQUFPNnBCLFVBQVU1ZixDQUFWLENBQVA7QUFBb0IsTUFBckUsTUFBeUU7QUFBQyxhQUFNUSxDQUFOO0FBQVE7QUFBQztBQUFDLFdBQVN1ZCxxQkFBVCxDQUErQnBkLENBQS9CLEVBQWlDO0FBQUMsT0FBSVYsSUFBRWtELG1CQUFtQnhDLENBQW5CLENBQU4sQ0FBNEIsSUFBSU4sSUFBRSxFQUFOLENBQVMsS0FBSSxJQUFJQyxJQUFFLENBQVYsRUFBWUEsSUFBRUwsRUFBRWpLLE1BQWhCLEVBQXVCc0ssR0FBdkIsRUFBMkI7QUFBQyxTQUFHTCxFQUFFSyxDQUFGLEtBQU0sR0FBVCxFQUFhO0FBQUNELFdBQUVBLElBQUVKLEVBQUVqSixNQUFGLENBQVNzSixDQUFULEVBQVcsQ0FBWCxDQUFKLENBQWtCQSxJQUFFQSxJQUFFLENBQUo7QUFBTSxNQUF0QyxNQUEwQztBQUFDRCxXQUFFQSxJQUFFLEdBQUYsR0FBTThjLE9BQU9sZCxFQUFFSyxDQUFGLENBQVAsQ0FBUjtBQUFxQjtBQUFDLFdBQU9ELENBQVA7QUFBUyxXQUFTOGYsY0FBVCxDQUF3QnhmLENBQXhCLEVBQTBCO0FBQUNBLE9BQUVBLEVBQUVvYSxPQUFGLENBQVUsUUFBVixFQUFtQixJQUFuQixDQUFGLENBQTJCLE9BQU9wYSxDQUFQO0FBQVMsV0FBU3lmLGFBQVQsQ0FBdUJ6ZixDQUF2QixFQUF5QjtBQUFDQSxPQUFFQSxFQUFFb2EsT0FBRixDQUFVLFFBQVYsRUFBbUIsSUFBbkIsQ0FBRixDQUEyQnBhLElBQUVBLEVBQUVvYSxPQUFGLENBQVUsTUFBVixFQUFpQixNQUFqQixDQUFGLENBQTJCLE9BQU9wYSxDQUFQO0FBQVMsT0FBS2YsSUFBTCxDQUFVZ0QsTUFBVixDQUFpQnlkLFNBQWpCLEdBQTJCLFVBQVMxZixDQUFULEVBQVc7QUFBQyxPQUFHQSxFQUFFbWEsS0FBRixDQUFRLFVBQVIsQ0FBSCxFQUF1QjtBQUFDLFlBQU8sSUFBUDtBQUFZLElBQXBDLE1BQXdDO0FBQUMsU0FBR25hLEVBQUVtYSxLQUFGLENBQVEsV0FBUixDQUFILEVBQXdCO0FBQUMsY0FBTyxJQUFQO0FBQVksTUFBckMsTUFBeUM7QUFBQyxjQUFPLEtBQVA7QUFBYTtBQUFDO0FBQUMsRUFBekksQ0FBMElqRSxLQUFLalgsSUFBTCxDQUFVZ0QsTUFBVixDQUFpQmthLEtBQWpCLEdBQXVCLFVBQVNuYyxDQUFULEVBQVc7QUFBQyxPQUFHQSxFQUFFM0ssTUFBRixHQUFTLENBQVQsSUFBWSxDQUFaLEtBQWdCMkssRUFBRW1hLEtBQUYsQ0FBUSxhQUFSLEtBQXdCbmEsRUFBRW1hLEtBQUYsQ0FBUSxhQUFSLENBQXhDLENBQUgsRUFBbUU7QUFBQyxZQUFPLElBQVA7QUFBWSxJQUFoRixNQUFvRjtBQUFDLFlBQU8sS0FBUDtBQUFhO0FBQUMsRUFBdEksQ0FBdUlqRSxLQUFLalgsSUFBTCxDQUFVZ0QsTUFBVixDQUFpQjBkLFFBQWpCLEdBQTBCLFVBQVMzZixDQUFULEVBQVc7QUFBQ0EsT0FBRUEsRUFBRW9hLE9BQUYsQ0FBVSxNQUFWLEVBQWlCLEVBQWpCLENBQUYsQ0FBdUIsSUFBR3BhLEVBQUVtYSxLQUFGLENBQVEseUJBQVIsS0FBb0NuYSxFQUFFM0ssTUFBRixHQUFTLENBQVQsSUFBWSxDQUFuRCxFQUFxRDtBQUFDLFlBQU8sSUFBUDtBQUFZLElBQWxFLE1BQXNFO0FBQUMsWUFBTyxLQUFQO0FBQWE7QUFBQyxFQUFsSixDQUFtSjZnQixLQUFLalgsSUFBTCxDQUFVZ0QsTUFBVixDQUFpQjJkLFdBQWpCLEdBQTZCLFVBQVM1ZixDQUFULEVBQVc7QUFBQyxPQUFHQSxFQUFFbWEsS0FBRixDQUFRLE9BQVIsQ0FBSCxFQUFvQjtBQUFDLFlBQU8sS0FBUDtBQUFhLFFBQUUwQyxVQUFVN2MsQ0FBVixDQUFGLENBQWUsT0FBT2tXLEtBQUtqWCxJQUFMLENBQVVnRCxNQUFWLENBQWlCMGQsUUFBakIsQ0FBMEIzZixDQUExQixDQUFQO0FBQW9DLEVBQTlILENBQStIa1csS0FBS2pYLElBQUwsQ0FBVWdELE1BQVYsQ0FBaUI0ZCxjQUFqQixHQUFnQyxVQUFTN2YsQ0FBVCxFQUFXO0FBQUNBLE9BQUVBLEVBQUVvYSxPQUFGLENBQVUsTUFBVixFQUFpQixFQUFqQixDQUFGLENBQXVCLElBQUdwYSxFQUFFbWEsS0FBRixDQUFRLGVBQVIsQ0FBSCxFQUE0QjtBQUFDLFlBQU8sSUFBUDtBQUFZLElBQXpDLE1BQTZDO0FBQUMsWUFBTyxLQUFQO0FBQWE7QUFBQyxFQUEvSCxDQUFnSSxTQUFTMkYsV0FBVCxDQUFxQjlmLENBQXJCLEVBQXVCO0FBQUMsT0FBR0EsRUFBRTNLLE1BQUYsR0FBUyxDQUFULElBQVksQ0FBZixFQUFpQjtBQUFDLFlBQU0sTUFBSTJLLENBQVY7QUFBWSxRQUFHQSxFQUFFM0osTUFBRixDQUFTLENBQVQsRUFBVyxDQUFYLElBQWMsR0FBakIsRUFBcUI7QUFBQyxZQUFNLE9BQUsySixDQUFYO0FBQWEsV0FBT0EsQ0FBUDtBQUFTLFdBQVMrZixjQUFULENBQXdCcmdCLENBQXhCLEVBQTBCO0FBQUNBLE9BQUVBLEVBQUUwYSxPQUFGLENBQVUsV0FBVixFQUFzQixFQUF0QixDQUFGLENBQTRCMWEsSUFBRUEsRUFBRTBhLE9BQUYsQ0FBVSxXQUFWLEVBQXNCLEVBQXRCLENBQUYsQ0FBNEIxYSxJQUFFQSxFQUFFMGEsT0FBRixDQUFVLE1BQVYsRUFBaUIsRUFBakIsQ0FBRixDQUF1QixJQUFHO0FBQUMsU0FBSXphLElBQUVELEVBQUV5ZixLQUFGLENBQVEsR0FBUixFQUFhYSxHQUFiLENBQWlCLFVBQVM3Z0IsQ0FBVCxFQUFXMUMsQ0FBWCxFQUFhMkMsQ0FBYixFQUFlO0FBQUMsV0FBSUMsSUFBRTdFLFNBQVMyRSxDQUFULENBQU4sQ0FBa0IsSUFBR0UsSUFBRSxDQUFGLElBQUssTUFBSUEsQ0FBWixFQUFjO0FBQUMsZUFBSyw0QkFBTDtBQUFrQyxZQUFJQyxJQUFFLENBQUMsT0FBS0QsRUFBRXVCLFFBQUYsQ0FBVyxFQUFYLENBQU4sRUFBc0JjLEtBQXRCLENBQTRCLENBQUMsQ0FBN0IsQ0FBTixDQUFzQyxPQUFPcEMsQ0FBUDtBQUFTLE1BQW5KLEVBQXFKeUMsSUFBckosQ0FBMEosRUFBMUosQ0FBTixDQUFvSyxPQUFPcEMsQ0FBUDtBQUFTLElBQWpMLENBQWlMLE9BQU1LLENBQU4sRUFBUTtBQUFDLFdBQUsscUNBQW1DQSxDQUF4QztBQUEwQztBQUFDLE1BQUlpZ0IsYUFBVyxTQUFYQSxVQUFXLENBQVN0Z0IsQ0FBVCxFQUFXSyxDQUFYLEVBQWE7QUFBQyxPQUFJVixJQUFFSyxFQUFFdEssTUFBUixDQUFlLElBQUdzSyxFQUFFdEssTUFBRixHQUFTMkssRUFBRTNLLE1BQWQsRUFBcUI7QUFBQ2lLLFNBQUVVLEVBQUUzSyxNQUFKO0FBQVcsU0FBSSxJQUFJcUssSUFBRSxDQUFWLEVBQVlBLElBQUVKLENBQWQsRUFBZ0JJLEdBQWhCLEVBQW9CO0FBQUMsU0FBR0MsRUFBRXdDLFVBQUYsQ0FBYXpDLENBQWIsS0FBaUJNLEVBQUVtQyxVQUFGLENBQWF6QyxDQUFiLENBQXBCLEVBQW9DO0FBQUMsY0FBT0EsQ0FBUDtBQUFTO0FBQUMsUUFBR0MsRUFBRXRLLE1BQUYsSUFBVTJLLEVBQUUzSyxNQUFmLEVBQXNCO0FBQUMsWUFBT2lLLENBQVA7QUFBUyxXQUFPLENBQUMsQ0FBUjtBQUFVLEVBQTNMO0FBQ2x6TixLQUFHLE9BQU80VyxJQUFQLElBQWEsV0FBYixJQUEwQixDQUFDQSxJQUE5QixFQUFtQztBQUFDQSxVQUFLLEVBQUw7QUFBUSxNQUFHLE9BQU9BLEtBQUt0WCxNQUFaLElBQW9CLFdBQXBCLElBQWlDLENBQUNzWCxLQUFLdFgsTUFBMUMsRUFBaUQ7QUFBQ3NYLFFBQUt0WCxNQUFMLEdBQVksRUFBWjtBQUFlLE9BQUtBLE1BQUwsQ0FBWUMsSUFBWixHQUFpQixJQUFJLFlBQVU7QUFBQyxRQUFLcWhCLGNBQUwsR0FBb0IsRUFBQ0MsTUFBSyxnQ0FBTixFQUF1Q0MsUUFBTyx3Q0FBOUMsRUFBdUZDLFFBQU8sd0NBQTlGLEVBQXVJQyxRQUFPLHdDQUE5SSxFQUF1TEMsUUFBTyx3Q0FBOUwsRUFBdU9DLEtBQUksc0NBQTNPLEVBQWtSQyxLQUFJLHNDQUF0UixFQUE2VEMsV0FBVSxnQ0FBdlUsRUFBcEIsQ0FBOFgsS0FBS0MsZUFBTCxHQUFxQixFQUFDRixLQUFJLFVBQUwsRUFBZ0JOLE1BQUssVUFBckIsRUFBZ0NDLFFBQU8sVUFBdkMsRUFBa0RDLFFBQU8sVUFBekQsRUFBb0VDLFFBQU8sVUFBM0UsRUFBc0ZDLFFBQU8sVUFBN0YsRUFBd0dHLFdBQVUsVUFBbEgsRUFBNkhFLFNBQVEsVUFBckksRUFBZ0pDLFVBQVMsVUFBekosRUFBb0tDLFlBQVcsVUFBL0ssRUFBMExDLFlBQVcsVUFBck0sRUFBZ05DLFlBQVcsVUFBM04sRUFBc09DLFlBQVcsVUFBalAsRUFBNFBDLGVBQWMsVUFBMVEsRUFBcVJDLFlBQVcsZ0JBQWhTLEVBQWlUQyxhQUFZLGdCQUE3VCxFQUE4VUMsZUFBYyxnQkFBNVYsRUFBNldDLGVBQWMsZ0JBQTNYLEVBQTRZQyxlQUFjLGdCQUExWixFQUEyYUMsZUFBYyxnQkFBemIsRUFBMGNDLGtCQUFpQixnQkFBM2QsRUFBNGVDLGNBQWEsZ0JBQXpmLEVBQTBnQkMsZUFBYyxnQkFBeGhCLEVBQXlpQkMsaUJBQWdCLGdCQUF6akIsRUFBMGtCQyxpQkFBZ0IsZ0JBQTFsQixFQUEybUJDLGlCQUFnQixnQkFBM25CLEVBQTRvQkMsaUJBQWdCLGdCQUE1cEIsRUFBNnFCQyxvQkFBbUIsZ0JBQWhzQixFQUFpdEJDLGFBQVksZ0JBQTd0QixFQUE4dUJDLGVBQWMsZ0JBQTV2QixFQUE2d0JDLGVBQWMsZ0JBQTN4QixFQUE0eUJDLG1CQUFrQixnQkFBOXpCLEVBQSswQkMsb0JBQW1CLGdCQUFsMkIsRUFBbTNCQyxzQkFBcUIsZ0JBQXg0QixFQUF5NUJDLHNCQUFxQixnQkFBOTZCLEVBQSs3QkMsc0JBQXFCLGdCQUFwOUIsRUFBcStCQyxzQkFBcUIsZ0JBQTEvQixFQUEyZ0NDLHlCQUF3QixnQkFBbmlDLEVBQXJCLENBQTJrQyxLQUFLQyx5QkFBTCxHQUErQixFQUFDbEMsS0FBSXhnQixTQUFTK0QsSUFBVCxDQUFjNGUsR0FBbkIsRUFBdUJ6QyxNQUFLbGdCLFNBQVMrRCxJQUFULENBQWM2ZSxJQUExQyxFQUErQ3pDLFFBQU9uZ0IsU0FBUytELElBQVQsQ0FBYzhlLE1BQXBFLEVBQTJFekMsUUFBT3BnQixTQUFTK0QsSUFBVCxDQUFjWSxNQUFoRyxFQUF1RzBiLFFBQU9yZ0IsU0FBUytELElBQVQsQ0FBY29ELE1BQTVILEVBQW1JbVosUUFBT3RnQixTQUFTK0QsSUFBVCxDQUFja0IsTUFBeEosRUFBK0p3YixXQUFVemdCLFNBQVMrRCxJQUFULENBQWMrZSxTQUF2TCxFQUEvQixDQUFpTyxLQUFLQyxnQkFBTCxHQUFzQixVQUFTaGpCLENBQVQsRUFBV04sQ0FBWCxFQUFhO0FBQUMsU0FBRyxPQUFPLEtBQUt3Z0IsY0FBTCxDQUFvQnhnQixDQUFwQixDQUFQLElBQStCLFdBQWxDLEVBQThDO0FBQUMsYUFBSywrQ0FBNkNBLENBQWxEO0FBQW9ELGFBQU8sS0FBS3dnQixjQUFMLENBQW9CeGdCLENBQXBCLElBQXVCTSxDQUE5QjtBQUFnQyxJQUF2SyxDQUF3SyxLQUFLaWpCLHNCQUFMLEdBQTRCLFVBQVM3akIsQ0FBVCxFQUFXWSxDQUFYLEVBQWFILENBQWIsRUFBZTtBQUFDLFNBQUlGLElBQUUsS0FBS3FqQixnQkFBTCxDQUFzQjVqQixDQUF0QixFQUF3QlksQ0FBeEIsQ0FBTixDQUFpQyxJQUFJVixJQUFFTyxJQUFFLENBQVIsQ0FBVSxJQUFHRixFQUFFdEssTUFBRixHQUFTLEVBQVQsR0FBWWlLLENBQWYsRUFBaUI7QUFBQyxhQUFLLHlDQUF1Q08sQ0FBdkMsR0FBeUMsR0FBekMsR0FBNkNHLENBQWxEO0FBQW9ELFVBQUlOLElBQUUsTUFBTixDQUFhLElBQUlLLElBQUUsT0FBS0osQ0FBWCxDQUFhLElBQUlSLElBQUUsRUFBTixDQUFTLElBQUlXLElBQUVSLElBQUVJLEVBQUVySyxNQUFKLEdBQVcwSyxFQUFFMUssTUFBbkIsQ0FBMEIsS0FBSSxJQUFJZ0ssSUFBRSxDQUFWLEVBQVlBLElBQUVTLENBQWQsRUFBZ0JULEtBQUcsQ0FBbkIsRUFBcUI7QUFBQ0YsWUFBRyxJQUFIO0FBQVEsVUFBSTFDLElBQUVpRCxJQUFFUCxDQUFGLEdBQUlZLENBQVYsQ0FBWSxPQUFPdEQsQ0FBUDtBQUFTLElBQTdRLENBQThRLEtBQUs5QixVQUFMLEdBQWdCLFVBQVNxRixDQUFULEVBQVdMLENBQVgsRUFBYTtBQUFDLFNBQUlELElBQUUsSUFBSXdXLEtBQUt0WCxNQUFMLENBQVl1WCxhQUFoQixDQUE4QixFQUFDdGMsS0FBSThGLENBQUwsRUFBOUIsQ0FBTixDQUE2QyxPQUFPRCxFQUFFd2pCLFlBQUYsQ0FBZWxqQixDQUFmLENBQVA7QUFBeUIsSUFBcEcsQ0FBcUcsS0FBS3VXLE9BQUwsR0FBYSxVQUFTN1csQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxTQUFJSyxJQUFFLElBQUlrVyxLQUFLdFgsTUFBTCxDQUFZdVgsYUFBaEIsQ0FBOEIsRUFBQ3RjLEtBQUk4RixDQUFMLEVBQTlCLENBQU4sQ0FBNkMsT0FBT0ssRUFBRW1qQixTQUFGLENBQVl6akIsQ0FBWixDQUFQO0FBQXNCLElBQTlGLENBQStGLEtBQUt5Z0IsSUFBTCxHQUFVLFVBQVNuZ0IsQ0FBVCxFQUFXO0FBQUMsU0FBSU4sSUFBRSxJQUFJd1csS0FBS3RYLE1BQUwsQ0FBWXVYLGFBQWhCLENBQThCLEVBQUN0YyxLQUFJLE1BQUwsRUFBWXVwQixNQUFLLFVBQWpCLEVBQTlCLENBQU4sQ0FBa0UsT0FBTzFqQixFQUFFd2pCLFlBQUYsQ0FBZWxqQixDQUFmLENBQVA7QUFBeUIsSUFBakgsQ0FBa0gsS0FBS3FnQixNQUFMLEdBQVksVUFBU3JnQixDQUFULEVBQVc7QUFBQyxTQUFJTixJQUFFLElBQUl3VyxLQUFLdFgsTUFBTCxDQUFZdVgsYUFBaEIsQ0FBOEIsRUFBQ3RjLEtBQUksUUFBTCxFQUFjdXBCLE1BQUssVUFBbkIsRUFBOUIsQ0FBTixDQUFvRSxPQUFPMWpCLEVBQUV3akIsWUFBRixDQUFlbGpCLENBQWYsQ0FBUDtBQUF5QixJQUFySCxDQUFzSCxLQUFLcWpCLFNBQUwsR0FBZSxVQUFTcmpCLENBQVQsRUFBVztBQUFDLFNBQUlOLElBQUUsSUFBSXdXLEtBQUt0WCxNQUFMLENBQVl1WCxhQUFoQixDQUE4QixFQUFDdGMsS0FBSSxRQUFMLEVBQWN1cEIsTUFBSyxVQUFuQixFQUE5QixDQUFOLENBQW9FLE9BQU8xakIsRUFBRXlqQixTQUFGLENBQVluakIsQ0FBWixDQUFQO0FBQXNCLElBQXJILENBQXNILEtBQUt1Z0IsTUFBTCxHQUFZLFVBQVN2Z0IsQ0FBVCxFQUFXO0FBQUMsU0FBSU4sSUFBRSxJQUFJd1csS0FBS3RYLE1BQUwsQ0FBWXVYLGFBQWhCLENBQThCLEVBQUN0YyxLQUFJLFFBQUwsRUFBY3VwQixNQUFLLFVBQW5CLEVBQTlCLENBQU4sQ0FBb0UsT0FBTzFqQixFQUFFd2pCLFlBQUYsQ0FBZWxqQixDQUFmLENBQVA7QUFBeUIsSUFBckgsQ0FBc0gsS0FBS3NqQixTQUFMLEdBQWUsVUFBU3RqQixDQUFULEVBQVc7QUFBQyxTQUFJTixJQUFFLElBQUl3VyxLQUFLdFgsTUFBTCxDQUFZdVgsYUFBaEIsQ0FBOEIsRUFBQ3RjLEtBQUksUUFBTCxFQUFjdXBCLE1BQUssVUFBbkIsRUFBOUIsQ0FBTixDQUFvRSxPQUFPMWpCLEVBQUV5akIsU0FBRixDQUFZbmpCLENBQVosQ0FBUDtBQUFzQixJQUFySDtBQUFzSCxFQUE3M0YsRUFBakIsQ0FBKzRGa1csS0FBS3RYLE1BQUwsQ0FBWUMsSUFBWixDQUFpQjRoQixHQUFqQixHQUFxQixVQUFTemdCLENBQVQsRUFBVztBQUFDLE9BQUlOLElBQUUsSUFBSXdXLEtBQUt0WCxNQUFMLENBQVl1WCxhQUFoQixDQUE4QixFQUFDdGMsS0FBSSxLQUFMLEVBQVd1cEIsTUFBSyxVQUFoQixFQUE5QixDQUFOLENBQWlFLE9BQU8xakIsRUFBRXdqQixZQUFGLENBQWVsakIsQ0FBZixDQUFQO0FBQXlCLEVBQTNILENBQTRIa1csS0FBS3RYLE1BQUwsQ0FBWUMsSUFBWixDQUFpQjZoQixTQUFqQixHQUEyQixVQUFTMWdCLENBQVQsRUFBVztBQUFDLE9BQUlOLElBQUUsSUFBSXdXLEtBQUt0WCxNQUFMLENBQVl1WCxhQUFoQixDQUE4QixFQUFDdGMsS0FBSSxXQUFMLEVBQWlCdXBCLE1BQUssVUFBdEIsRUFBOUIsQ0FBTixDQUF1RSxPQUFPMWpCLEVBQUV3akIsWUFBRixDQUFlbGpCLENBQWYsQ0FBUDtBQUF5QixFQUF2SSxDQUF3SWtXLEtBQUt0WCxNQUFMLENBQVlDLElBQVosQ0FBaUIwa0IsZUFBakIsR0FBaUMsSUFBSTVOLFlBQUosRUFBakMsQ0FBb0RPLEtBQUt0WCxNQUFMLENBQVlDLElBQVosQ0FBaUIya0Isb0JBQWpCLEdBQXNDLFVBQVM5akIsQ0FBVCxFQUFXO0FBQUMsT0FBSU0sSUFBRSxJQUFJaFIsS0FBSixDQUFVMFEsQ0FBVixDQUFOLENBQW1Cd1csS0FBS3RYLE1BQUwsQ0FBWUMsSUFBWixDQUFpQjBrQixlQUFqQixDQUFpQ3pVLFNBQWpDLENBQTJDOU8sQ0FBM0MsRUFBOEMsT0FBT3VjLFFBQVF2YyxDQUFSLENBQVA7QUFBa0IsRUFBckksQ0FBc0lrVyxLQUFLdFgsTUFBTCxDQUFZQyxJQUFaLENBQWlCNGtCLDJCQUFqQixHQUE2QyxVQUFTempCLENBQVQsRUFBVztBQUFDLFVBQU8sSUFBSWdJLFVBQUosQ0FBZWtPLEtBQUt0WCxNQUFMLENBQVlDLElBQVosQ0FBaUIya0Isb0JBQWpCLENBQXNDeGpCLENBQXRDLENBQWYsRUFBd0QsRUFBeEQsQ0FBUDtBQUFtRSxFQUE1SCxDQUE2SGtXLEtBQUt0WCxNQUFMLENBQVlDLElBQVosQ0FBaUI2a0IsbUJBQWpCLEdBQXFDLFVBQVNwa0IsQ0FBVCxFQUFXO0FBQUMsT0FBSUssSUFBRUwsSUFBRSxDQUFSLENBQVUsSUFBSVUsSUFBRSxDQUFDVixJQUFFSyxDQUFILElBQU0sQ0FBWixDQUFjLElBQUlELElBQUUsSUFBSTFRLEtBQUosQ0FBVWdSLElBQUUsQ0FBWixDQUFOLENBQXFCa1csS0FBS3RYLE1BQUwsQ0FBWUMsSUFBWixDQUFpQjBrQixlQUFqQixDQUFpQ3pVLFNBQWpDLENBQTJDcFAsQ0FBM0MsRUFBOENBLEVBQUUsQ0FBRixJQUFLLENBQUcsT0FBS0MsQ0FBTixHQUFTLEdBQVYsR0FBZSxHQUFoQixJQUFxQkQsRUFBRSxDQUFGLENBQTFCLENBQStCLE9BQU82YyxRQUFRN2MsQ0FBUixDQUFQO0FBQWtCLEVBQTdMLENBQThMd1csS0FBS3RYLE1BQUwsQ0FBWUMsSUFBWixDQUFpQjhrQiwwQkFBakIsR0FBNEMsVUFBUzNqQixDQUFULEVBQVc7QUFBQyxVQUFPLElBQUlnSSxVQUFKLENBQWVrTyxLQUFLdFgsTUFBTCxDQUFZQyxJQUFaLENBQWlCNmtCLG1CQUFqQixDQUFxQzFqQixDQUFyQyxDQUFmLEVBQXVELEVBQXZELENBQVA7QUFBa0UsRUFBMUgsQ0FBMkhrVyxLQUFLdFgsTUFBTCxDQUFZQyxJQUFaLENBQWlCK2tCLDRCQUFqQixHQUE4QyxVQUFTbGtCLENBQVQsRUFBVztBQUFDLE9BQUlNLElBQUVOLEVBQUU2TixTQUFGLEVBQU4sQ0FBb0IsT0FBTSxDQUFOLEVBQVE7QUFBQyxTQUFJNU4sSUFBRXVXLEtBQUt0WCxNQUFMLENBQVlDLElBQVosQ0FBaUI4a0IsMEJBQWpCLENBQTRDM2pCLENBQTVDLENBQU4sQ0FBcUQsSUFBR04sRUFBRXdMLFNBQUYsQ0FBWXZMLENBQVosS0FBZ0IsQ0FBQyxDQUFwQixFQUFzQjtBQUFDLGNBQU9BLENBQVA7QUFBUztBQUFDO0FBQUMsRUFBOUssQ0FBK0t1VyxLQUFLdFgsTUFBTCxDQUFZQyxJQUFaLENBQWlCZ2xCLDJCQUFqQixHQUE2QyxVQUFTcG5CLENBQVQsRUFBV2lELENBQVgsRUFBYTtBQUFDLE9BQUlDLElBQUVsRCxFQUFFeU8sU0FBRixDQUFZeEwsQ0FBWixDQUFOLENBQXFCLElBQUdDLEtBQUcsQ0FBTixFQUFRO0FBQUMsV0FBSyw2QkFBTDtBQUFtQyxRQUFHQSxLQUFHLENBQU4sRUFBUTtBQUFDLFlBQU9sRCxDQUFQO0FBQVMsUUFBSXVELElBQUVOLEVBQUVpVCxRQUFGLENBQVdsVyxDQUFYLENBQU4sQ0FBb0IsSUFBSTZDLElBQUU0VyxLQUFLdFgsTUFBTCxDQUFZQyxJQUFaLENBQWlCK2tCLDRCQUFqQixDQUE4QzVqQixDQUE5QyxDQUFOLENBQXVELE9BQU9WLEVBQUVzVCxHQUFGLENBQU1uVyxDQUFOLENBQVA7QUFBZ0IsRUFBek8sQ0FBME95WixLQUFLdFgsTUFBTCxDQUFZdVgsYUFBWixHQUEwQixVQUFTeFcsQ0FBVCxFQUFXO0FBQUMsT0FBSUQsSUFBRSxJQUFOLENBQVcsSUFBSU0sSUFBRSxJQUFOLENBQVcsSUFBSVYsSUFBRSxJQUFOLENBQVcsS0FBS3drQixpQkFBTCxHQUF1QixVQUFTM2tCLENBQVQsRUFBV0UsQ0FBWCxFQUFhO0FBQUNGLFNBQUUrVyxLQUFLdFgsTUFBTCxDQUFZdVgsYUFBWixDQUEwQkMsbUJBQTFCLENBQThDalgsQ0FBOUMsQ0FBRixDQUFtRCxJQUFHQSxNQUFJLElBQUosSUFBVUUsTUFBSTNELFNBQWpCLEVBQTJCO0FBQUMyRCxXQUFFNlcsS0FBS3RYLE1BQUwsQ0FBWUMsSUFBWixDQUFpQjhoQixlQUFqQixDQUFpQ3hoQixDQUFqQyxDQUFGO0FBQXNDLFVBQUcsbURBQW1EL0osT0FBbkQsQ0FBMkQrSixDQUEzRCxLQUErRCxDQUFDLENBQWhFLElBQW1FRSxLQUFHLFVBQXpFLEVBQW9GO0FBQUMsV0FBRztBQUFDLGNBQUswa0IsRUFBTCxHQUFRN04sS0FBS3RYLE1BQUwsQ0FBWUMsSUFBWixDQUFpQjhqQix5QkFBakIsQ0FBMkN4akIsQ0FBM0MsRUFBOEN3QixNQUE5QyxFQUFSO0FBQStELFFBQW5FLENBQW1FLE9BQU1sRSxDQUFOLEVBQVE7QUFBQyxlQUFLLDZDQUEyQzBDLENBQTNDLEdBQTZDLEdBQTdDLEdBQWlEMUMsQ0FBdEQ7QUFBd0QsYUFBS3VuQixZQUFMLEdBQWtCLFVBQVM1a0IsQ0FBVCxFQUFXO0FBQUMsY0FBSzJrQixFQUFMLENBQVFyZ0IsTUFBUixDQUFldEUsQ0FBZjtBQUFrQixRQUFoRCxDQUFpRCxLQUFLNmtCLFNBQUwsR0FBZSxVQUFTN2tCLENBQVQsRUFBVztBQUFDLGFBQUlyRyxJQUFFa0gsU0FBUzRCLEdBQVQsQ0FBYUMsR0FBYixDQUFpQnZGLEtBQWpCLENBQXVCNkMsQ0FBdkIsQ0FBTixDQUFnQyxLQUFLMmtCLEVBQUwsQ0FBUXJnQixNQUFSLENBQWUzSyxDQUFmO0FBQWtCLFFBQTdFLENBQThFLEtBQUttckIsTUFBTCxHQUFZLFlBQVU7QUFBQyxhQUFJOWtCLElBQUUsS0FBSzJrQixFQUFMLENBQVFwZ0IsUUFBUixFQUFOLENBQXlCLE9BQU92RSxFQUFFd0IsUUFBRixDQUFXWCxTQUFTNEIsR0FBVCxDQUFhQyxHQUF4QixDQUFQO0FBQW9DLFFBQXBGLENBQXFGLEtBQUtvaEIsWUFBTCxHQUFrQixVQUFTOWpCLENBQVQsRUFBVztBQUFDLGNBQUs0a0IsWUFBTCxDQUFrQjVrQixDQUFsQixFQUFxQixPQUFPLEtBQUs4a0IsTUFBTCxFQUFQO0FBQXFCLFFBQXhFLENBQXlFLEtBQUtmLFNBQUwsR0FBZSxVQUFTL2pCLENBQVQsRUFBVztBQUFDLGNBQUs2a0IsU0FBTCxDQUFlN2tCLENBQWYsRUFBa0IsT0FBTyxLQUFLOGtCLE1BQUwsRUFBUDtBQUFxQixRQUFsRTtBQUFtRSxVQUFHLFdBQVc5dUIsT0FBWCxDQUFtQitKLENBQW5CLEtBQXVCLENBQUMsQ0FBeEIsSUFBMkJFLEtBQUcsTUFBakMsRUFBd0M7QUFBQyxXQUFHO0FBQUMsY0FBSzBrQixFQUFMLEdBQVEsSUFBSUksS0FBS3pwQixJQUFMLENBQVUybEIsTUFBZCxFQUFSO0FBQStCLFFBQW5DLENBQW1DLE9BQU01akIsQ0FBTixFQUFRO0FBQUMsZUFBSyw2Q0FBMkMwQyxDQUEzQyxHQUE2QyxHQUE3QyxHQUFpRDFDLENBQXREO0FBQXdELGFBQUt1bkIsWUFBTCxHQUFrQixVQUFTNWtCLENBQVQsRUFBVztBQUFDLGNBQUsya0IsRUFBTCxDQUFRcmdCLE1BQVIsQ0FBZXRFLENBQWY7QUFBa0IsUUFBaEQsQ0FBaUQsS0FBSzZrQixTQUFMLEdBQWUsVUFBU2xyQixDQUFULEVBQVc7QUFBQyxhQUFJcUcsSUFBRStrQixLQUFLQyxLQUFMLENBQVd6bUIsR0FBWCxDQUFlMG1CLE1BQWYsQ0FBc0J0ckIsQ0FBdEIsQ0FBTixDQUErQixLQUFLZ3JCLEVBQUwsQ0FBUXJnQixNQUFSLENBQWV0RSxDQUFmO0FBQWtCLFFBQTVFLENBQTZFLEtBQUs4a0IsTUFBTCxHQUFZLFlBQVU7QUFBQyxhQUFJOWtCLElBQUUsS0FBSzJrQixFQUFMLENBQVFwZ0IsUUFBUixFQUFOLENBQXlCLE9BQU93Z0IsS0FBS0MsS0FBTCxDQUFXem1CLEdBQVgsQ0FBZTJtQixRQUFmLENBQXdCbGxCLENBQXhCLENBQVA7QUFBa0MsUUFBbEYsQ0FBbUYsS0FBSzhqQixZQUFMLEdBQWtCLFVBQVM5akIsQ0FBVCxFQUFXO0FBQUMsY0FBSzRrQixZQUFMLENBQWtCNWtCLENBQWxCLEVBQXFCLE9BQU8sS0FBSzhrQixNQUFMLEVBQVA7QUFBcUIsUUFBeEUsQ0FBeUUsS0FBS2YsU0FBTCxHQUFlLFVBQVMvakIsQ0FBVCxFQUFXO0FBQUMsY0FBSzZrQixTQUFMLENBQWU3a0IsQ0FBZixFQUFrQixPQUFPLEtBQUs4a0IsTUFBTCxFQUFQO0FBQXFCLFFBQWxFO0FBQW1FO0FBQUMsSUFBOXJDLENBQStyQyxLQUFLRixZQUFMLEdBQWtCLFVBQVN2bkIsQ0FBVCxFQUFXO0FBQUMsV0FBSyx3REFBc0QsS0FBSzhuQixPQUEzRCxHQUFtRSxHQUFuRSxHQUF1RSxLQUFLQyxRQUFqRjtBQUEwRixJQUF4SCxDQUF5SCxLQUFLUCxTQUFMLEdBQWUsVUFBU3huQixDQUFULEVBQVc7QUFBQyxXQUFLLHFEQUFtRCxLQUFLOG5CLE9BQXhELEdBQWdFLEdBQWhFLEdBQW9FLEtBQUtDLFFBQTlFO0FBQXVGLElBQWxILENBQW1ILEtBQUtOLE1BQUwsR0FBWSxZQUFVO0FBQUMsV0FBSywrQ0FBNkMsS0FBS0ssT0FBbEQsR0FBMEQsR0FBMUQsR0FBOEQsS0FBS0MsUUFBeEU7QUFBaUYsSUFBeEcsQ0FBeUcsS0FBS3RCLFlBQUwsR0FBa0IsVUFBU3ptQixDQUFULEVBQVc7QUFBQyxXQUFLLHdEQUFzRCxLQUFLOG5CLE9BQTNELEdBQW1FLEdBQW5FLEdBQXVFLEtBQUtDLFFBQWpGO0FBQTBGLElBQXhILENBQXlILEtBQUtyQixTQUFMLEdBQWUsVUFBUzFtQixDQUFULEVBQVc7QUFBQyxXQUFLLHFEQUFtRCxLQUFLOG5CLE9BQXhELEdBQWdFLEdBQWhFLEdBQW9FLEtBQUtDLFFBQTlFO0FBQXVGLElBQWxILENBQW1ILElBQUc3a0IsTUFBSWpFLFNBQVAsRUFBaUI7QUFBQyxTQUFHaUUsRUFBRTlGLEdBQUYsS0FBUTZCLFNBQVgsRUFBcUI7QUFBQyxZQUFLNm9CLE9BQUwsR0FBYTVrQixFQUFFOUYsR0FBZixDQUFtQixJQUFHOEYsRUFBRXlqQixJQUFGLEtBQVMxbkIsU0FBWixFQUFzQjtBQUFDLGNBQUs4b0IsUUFBTCxHQUFjdE8sS0FBS3RYLE1BQUwsQ0FBWUMsSUFBWixDQUFpQjhoQixlQUFqQixDQUFpQyxLQUFLNEQsT0FBdEMsQ0FBZDtBQUE2RCxhQUFLVCxpQkFBTCxDQUF1QixLQUFLUyxPQUE1QixFQUFvQyxLQUFLQyxRQUF6QztBQUFtRDtBQUFDO0FBQUMsRUFBM2dFLENBQTRnRXRPLEtBQUt0WCxNQUFMLENBQVl1WCxhQUFaLENBQTBCQyxtQkFBMUIsR0FBOEMsVUFBU3BXLENBQVQsRUFBVztBQUFDLE9BQUcsT0FBT0EsQ0FBUCxLQUFXLFFBQWQsRUFBdUI7QUFBQ0EsU0FBRUEsRUFBRWtmLFdBQUYsRUFBRixDQUFrQmxmLElBQUVBLEVBQUVvYSxPQUFGLENBQVUsR0FBVixFQUFjLEVBQWQsQ0FBRjtBQUFvQixXQUFPcGEsQ0FBUDtBQUFTLEVBQWpJLENBQWtJa1csS0FBS3RYLE1BQUwsQ0FBWXVYLGFBQVosQ0FBMEJFLGFBQTFCLEdBQXdDLFVBQVMxVyxDQUFULEVBQVc7QUFBQyxPQUFJRCxJQUFFd1csS0FBS3RYLE1BQUwsQ0FBWXVYLGFBQWxCLENBQWdDLElBQUluVyxJQUFFTixFQUFFMFcsbUJBQUYsQ0FBc0J6VyxDQUF0QixDQUFOLENBQStCLElBQUdELEVBQUUra0IsVUFBRixDQUFhemtCLENBQWIsTUFBa0J0RSxTQUFyQixFQUErQjtBQUFDLFdBQUssOEJBQTRCaUUsQ0FBakM7QUFBbUMsV0FBT0QsRUFBRStrQixVQUFGLENBQWF6a0IsQ0FBYixDQUFQO0FBQXVCLEVBQTdNLENBQThNa1csS0FBS3RYLE1BQUwsQ0FBWXVYLGFBQVosQ0FBMEJzTyxVQUExQixHQUFxQyxFQUFDaEUsS0FBSSxFQUFMLEVBQVFOLE1BQUssRUFBYixFQUFnQkMsUUFBTyxFQUF2QixFQUEwQkMsUUFBTyxFQUFqQyxFQUFvQ0MsUUFBTyxFQUEzQyxFQUE4Q0MsUUFBTyxFQUFyRCxFQUF3REcsV0FBVSxFQUFsRSxFQUFyQyxDQUEyR3hLLEtBQUt0WCxNQUFMLENBQVk4bEIsR0FBWixHQUFnQixVQUFTcGxCLENBQVQsRUFBVztBQUFDLE9BQUlELElBQUUsSUFBTixDQUFXLElBQUlNLElBQUUsSUFBTixDQUFXLElBQUlLLElBQUUsSUFBTixDQUFXLElBQUl2RCxJQUFFLElBQU4sQ0FBVyxJQUFJaUQsSUFBRSxJQUFOLENBQVcsS0FBS29rQixpQkFBTCxHQUF1QixVQUFTL2pCLENBQVQsRUFBV2hILENBQVgsRUFBYTtBQUFDZ0gsU0FBRUEsRUFBRW1mLFdBQUYsRUFBRixDQUFrQixJQUFHbmYsS0FBRyxJQUFOLEVBQVc7QUFBQ0EsV0FBRSxVQUFGO0FBQWEsVUFBRUEsRUFBRW1mLFdBQUYsRUFBRixDQUFrQixJQUFHbmYsRUFBRTFKLE1BQUYsQ0FBUyxDQUFULEVBQVcsQ0FBWCxLQUFlLE1BQWxCLEVBQXlCO0FBQUMsYUFBSyw2Q0FBMkMwSixDQUFoRDtBQUFrRCxVQUFHaEgsTUFBSTJDLFNBQVAsRUFBaUI7QUFBQzNDLFdBQUVtZCxLQUFLdFgsTUFBTCxDQUFZQyxJQUFaLENBQWlCOGhCLGVBQWpCLENBQWlDNWdCLENBQWpDLENBQUY7QUFBc0MsV0FBSzRrQixPQUFMLEdBQWE1a0IsSUFBRSxHQUFGLEdBQU1oSCxDQUFuQixDQUFxQixJQUFJb0csSUFBRVksRUFBRTFKLE1BQUYsQ0FBUyxDQUFULENBQU4sQ0FBa0IsSUFBRyxtREFBbURqQixPQUFuRCxDQUEyRCtKLENBQTNELEtBQStELENBQUMsQ0FBaEUsSUFBbUVwRyxLQUFHLFVBQXpFLEVBQW9GO0FBQUMsV0FBRztBQUFDLGFBQUk4RyxJQUFFcVcsS0FBS3RYLE1BQUwsQ0FBWUMsSUFBWixDQUFpQjhqQix5QkFBakIsQ0FBMkN4akIsQ0FBM0MsQ0FBTixDQUFvRCxLQUFLeWxCLEdBQUwsR0FBUzNrQixTQUFTK0QsSUFBVCxDQUFjRCxJQUFkLENBQW1CcEQsTUFBbkIsQ0FBMEJkLENBQTFCLEVBQTRCLEtBQUtnbEIsSUFBakMsQ0FBVDtBQUFnRCxRQUF4RyxDQUF3RyxPQUFNemxCLENBQU4sRUFBUTtBQUFDLGVBQUssaURBQStDRCxDQUEvQyxHQUFpRCxHQUFqRCxHQUFxREMsQ0FBMUQ7QUFBNEQsYUFBSzRrQixZQUFMLEdBQWtCLFVBQVNsa0IsQ0FBVCxFQUFXO0FBQUMsY0FBSzhrQixHQUFMLENBQVNsaEIsTUFBVCxDQUFnQjVELENBQWhCO0FBQW1CLFFBQWpELENBQWtELEtBQUtta0IsU0FBTCxHQUFlLFVBQVNua0IsQ0FBVCxFQUFXO0FBQUMsYUFBSThCLElBQUUzQixTQUFTNEIsR0FBVCxDQUFhQyxHQUFiLENBQWlCdkYsS0FBakIsQ0FBdUJ1RCxDQUF2QixDQUFOLENBQWdDLEtBQUs4a0IsR0FBTCxDQUFTbGhCLE1BQVQsQ0FBZ0I5QixDQUFoQjtBQUFtQixRQUE5RSxDQUErRSxLQUFLa2pCLE9BQUwsR0FBYSxZQUFVO0FBQUMsYUFBSWhsQixJQUFFLEtBQUs4a0IsR0FBTCxDQUFTamhCLFFBQVQsRUFBTixDQUEwQixPQUFPN0QsRUFBRWMsUUFBRixDQUFXWCxTQUFTNEIsR0FBVCxDQUFhQyxHQUF4QixDQUFQO0FBQW9DLFFBQXRGLENBQXVGLEtBQUtpakIsYUFBTCxHQUFtQixVQUFTamxCLENBQVQsRUFBVztBQUFDLGNBQUtra0IsWUFBTCxDQUFrQmxrQixDQUFsQixFQUFxQixPQUFPLEtBQUtnbEIsT0FBTCxFQUFQO0FBQXNCLFFBQTFFLENBQTJFLEtBQUtFLFVBQUwsR0FBZ0IsVUFBU2xsQixDQUFULEVBQVc7QUFBQyxjQUFLbWtCLFNBQUwsQ0FBZW5rQixDQUFmLEVBQWtCLE9BQU8sS0FBS2dsQixPQUFMLEVBQVA7QUFBc0IsUUFBcEU7QUFBcUU7QUFBQyxJQUF4M0IsQ0FBeTNCLEtBQUtkLFlBQUwsR0FBa0IsVUFBUzdrQixDQUFULEVBQVc7QUFBQyxXQUFLLHdEQUFzRCxLQUFLd2xCLE9BQWhFO0FBQXdFLElBQXRHLENBQXVHLEtBQUtWLFNBQUwsR0FBZSxVQUFTOWtCLENBQVQsRUFBVztBQUFDLFdBQUsscURBQW1ELEtBQUt3bEIsT0FBN0Q7QUFBcUUsSUFBaEcsQ0FBaUcsS0FBS0csT0FBTCxHQUFhLFlBQVU7QUFBQyxXQUFLLCtDQUE2QyxLQUFLSCxPQUF2RDtBQUErRCxJQUF2RixDQUF3RixLQUFLSSxhQUFMLEdBQW1CLFVBQVM1bEIsQ0FBVCxFQUFXO0FBQUMsV0FBSyx3REFBc0QsS0FBS3dsQixPQUFoRTtBQUF3RSxJQUF2RyxDQUF3RyxLQUFLSyxVQUFMLEdBQWdCLFVBQVM3bEIsQ0FBVCxFQUFXO0FBQUMsV0FBSyxxREFBbUQsS0FBS3dsQixPQUE3RDtBQUFxRSxJQUFqRyxDQUFrRyxLQUFLTSxXQUFMLEdBQWlCLFVBQVM3bEIsQ0FBVCxFQUFXO0FBQUMsU0FBRyxPQUFPQSxDQUFQLElBQVUsUUFBYixFQUFzQjtBQUFDLFdBQUlELElBQUVDLENBQU4sQ0FBUSxJQUFHQSxFQUFFL0osTUFBRixHQUFTLENBQVQsSUFBWSxDQUFaLElBQWUsQ0FBQytKLEVBQUUrYSxLQUFGLENBQVEsZ0JBQVIsQ0FBbkIsRUFBNkM7QUFBQ2hiLGFBQUVxWCxVQUFVcFgsQ0FBVixDQUFGO0FBQWUsYUFBS3lsQixJQUFMLEdBQVU1a0IsU0FBUzRCLEdBQVQsQ0FBYUMsR0FBYixDQUFpQnZGLEtBQWpCLENBQXVCNEMsQ0FBdkIsQ0FBVixDQUFvQztBQUFPLFVBQUcsUUFBT0MsQ0FBUCx5Q0FBT0EsQ0FBUCxNQUFVLFFBQWIsRUFBc0I7QUFBQyxhQUFLLGdEQUE4Q0EsQ0FBbkQ7QUFBcUQsVUFBSUQsSUFBRSxJQUFOLENBQVcsSUFBR0MsRUFBRXpCLEdBQUYsS0FBUWpDLFNBQVgsRUFBcUI7QUFBQyxXQUFHMEQsRUFBRXpCLEdBQUYsQ0FBTXRJLE1BQU4sR0FBYSxDQUFiLElBQWdCLENBQWhCLElBQW1CLENBQUMrSixFQUFFekIsR0FBRixDQUFNd2MsS0FBTixDQUFZLGdCQUFaLENBQXZCLEVBQXFEO0FBQUMsZUFBSyw4QkFBNEIvYSxFQUFFekIsR0FBbkM7QUFBdUMsWUFBRXlCLEVBQUV6QixHQUFKO0FBQVEsVUFBR3lCLEVBQUU4bEIsSUFBRixLQUFTeHBCLFNBQVosRUFBc0I7QUFBQ3lELFdBQUVxZSxVQUFVcGUsRUFBRThsQixJQUFaLENBQUY7QUFBb0IsVUFBRzlsQixFQUFFK2xCLElBQUYsS0FBU3pwQixTQUFaLEVBQXNCO0FBQUN5RCxXQUFFcVgsVUFBVXBYLEVBQUUrbEIsSUFBWixDQUFGO0FBQW9CLFVBQUcvbEIsRUFBRWdtQixHQUFGLEtBQVExcEIsU0FBWCxFQUFxQjtBQUFDeUQsV0FBRXVJLFNBQVN0SSxFQUFFZ21CLEdBQVgsQ0FBRjtBQUFrQixVQUFHaG1CLEVBQUVpbUIsSUFBRixLQUFTM3BCLFNBQVosRUFBc0I7QUFBQ3lELFdBQUU0ZCxVQUFVM2QsRUFBRWltQixJQUFaLENBQUY7QUFBb0IsVUFBR2xtQixLQUFHLElBQU4sRUFBVztBQUFDLGFBQUssZ0RBQThDQyxDQUFuRDtBQUFxRCxXQUFLeWxCLElBQUwsR0FBVTVrQixTQUFTNEIsR0FBVCxDQUFhQyxHQUFiLENBQWlCdkYsS0FBakIsQ0FBdUI0QyxDQUF2QixDQUFWO0FBQW9DLElBQXBvQixDQUFxb0IsSUFBR0csTUFBSTVELFNBQVAsRUFBaUI7QUFBQyxTQUFHNEQsRUFBRXVsQixJQUFGLEtBQVNucEIsU0FBWixFQUFzQjtBQUFDLFlBQUt1cEIsV0FBTCxDQUFpQjNsQixFQUFFdWxCLElBQW5CO0FBQXlCLFVBQUd2bEIsRUFBRXpGLEdBQUYsS0FBUTZCLFNBQVgsRUFBcUI7QUFBQyxZQUFLNm9CLE9BQUwsR0FBYWpsQixFQUFFekYsR0FBZixDQUFtQixJQUFHeUYsRUFBRThqQixJQUFGLEtBQVMxbkIsU0FBWixFQUFzQjtBQUFDLGNBQUs4b0IsUUFBTCxHQUFjdE8sS0FBS3RYLE1BQUwsQ0FBWUMsSUFBWixDQUFpQjhoQixlQUFqQixDQUFpQyxLQUFLNEQsT0FBdEMsQ0FBZDtBQUE2RCxhQUFLVCxpQkFBTCxDQUF1QixLQUFLUyxPQUE1QixFQUFvQyxLQUFLQyxRQUF6QztBQUFtRDtBQUFDO0FBQUMsRUFBL3lFLENBQWd6RXRPLEtBQUt0WCxNQUFMLENBQVkwbUIsU0FBWixHQUFzQixVQUFTamxCLENBQVQsRUFBVztBQUFDLE9BQUllLElBQUUsSUFBTixDQUFXLElBQUk3RCxJQUFFLElBQU4sQ0FBVyxJQUFJZ0UsSUFBRSxJQUFOLENBQVcsSUFBSTVCLElBQUUsSUFBTixDQUFXLElBQUlHLElBQUUsSUFBTixDQUFXLElBQUlSLElBQUUsSUFBTixDQUFXLElBQUlTLElBQUUsSUFBTixDQUFXLElBQUlYLElBQUUsSUFBTixDQUFXLElBQUlnQixJQUFFLElBQU4sQ0FBVyxJQUFJM0QsSUFBRSxJQUFOLENBQVcsSUFBSWlELElBQUUsQ0FBQyxDQUFQLENBQVMsSUFBSVAsSUFBRSxJQUFOLENBQVcsSUFBSVUsSUFBRSxJQUFOLENBQVcsSUFBSUcsSUFBRSxJQUFOLENBQVcsSUFBSWpILElBQUUsSUFBTixDQUFXLElBQUlzRyxJQUFFLElBQU4sQ0FBVyxLQUFLa21CLFlBQUwsR0FBa0IsWUFBVTtBQUFDLFNBQUlsa0IsSUFBRSxLQUFLa2pCLE9BQUwsQ0FBYXBLLEtBQWIsQ0FBbUIsZ0JBQW5CLENBQU4sQ0FBMkMsSUFBRzlZLENBQUgsRUFBSztBQUFDLFlBQUtta0IsU0FBTCxHQUFlbmtCLEVBQUUsQ0FBRixFQUFLNmQsV0FBTCxFQUFmLENBQWtDLEtBQUt1RyxhQUFMLEdBQW1CcGtCLEVBQUUsQ0FBRixFQUFLNmQsV0FBTCxFQUFuQjtBQUFzQztBQUFDLElBQXZKLENBQXdKLEtBQUt3Ryx1QkFBTCxHQUE2QixVQUFTM25CLENBQVQsRUFBVytFLENBQVgsRUFBYTtBQUFDLFNBQUlFLElBQUUsRUFBTixDQUFTLElBQUk3QixJQUFFMkIsSUFBRSxDQUFGLEdBQUkvRSxFQUFFMUksTUFBWixDQUFtQixLQUFJLElBQUk0TixJQUFFLENBQVYsRUFBWUEsSUFBRTlCLENBQWQsRUFBZ0I4QixHQUFoQixFQUFvQjtBQUFDRCxXQUFFQSxJQUFFLEdBQUo7QUFBUSxhQUFPQSxJQUFFakYsQ0FBVDtBQUFXLElBQS9HLENBQWdILEtBQUsrbEIsaUJBQUwsR0FBdUIsVUFBUzdnQixDQUFULEVBQVc5QixDQUFYLEVBQWE7QUFBQyxVQUFLb2tCLFlBQUwsR0FBb0IsSUFBR3BrQixLQUFHLGdCQUFOLEVBQXVCO0FBQUMsYUFBSyw2QkFBMkJBLENBQWhDO0FBQWtDLFVBQUcsbURBQW1EL0wsT0FBbkQsQ0FBMkQsS0FBS293QixTQUFoRSxLQUE0RSxDQUFDLENBQWhGLEVBQWtGO0FBQUMsV0FBRztBQUFDLGNBQUt6QixFQUFMLEdBQVEsSUFBSTdOLEtBQUt0WCxNQUFMLENBQVl1WCxhQUFoQixDQUE4QixFQUFDdGMsS0FBSSxLQUFLMnJCLFNBQVYsRUFBOUIsQ0FBUjtBQUE0RCxRQUFoRSxDQUFnRSxPQUFNbmtCLENBQU4sRUFBUTtBQUFDLGVBQUssNkNBQTJDLEtBQUtta0IsU0FBaEQsR0FBMEQsR0FBMUQsR0FBOERua0IsQ0FBbkU7QUFBcUUsYUFBS2IsSUFBTCxHQUFVLFVBQVNzQyxDQUFULEVBQVcvRSxDQUFYLEVBQWE7QUFBQyxhQUFJQyxJQUFFLElBQU4sQ0FBVyxJQUFHO0FBQUMsZUFBR0QsTUFBSXJDLFNBQVAsRUFBaUI7QUFBQ3NDLGlCQUFFMm5CLFFBQVFsb0IsTUFBUixDQUFlcUYsQ0FBZixDQUFGO0FBQW9CLFlBQXRDLE1BQTBDO0FBQUM5RSxpQkFBRTJuQixRQUFRbG9CLE1BQVIsQ0FBZXFGLENBQWYsRUFBaUIvRSxDQUFqQixDQUFGO0FBQXNCO0FBQUMsVUFBdEUsQ0FBc0UsT0FBTWlGLENBQU4sRUFBUTtBQUFDLGlCQUFLLGlCQUFlQSxDQUFwQjtBQUFzQixjQUFHaEYsRUFBRStZLFNBQUYsS0FBYyxJQUFqQixFQUFzQjtBQUFDLGdCQUFLNk8sTUFBTCxHQUFZNW5CLENBQVosQ0FBYyxLQUFLck8sS0FBTCxHQUFXLE1BQVg7QUFBa0IsVUFBdkQsTUFBMkQ7QUFBQyxlQUFHcU8sRUFBRThZLFFBQUYsS0FBYSxJQUFoQixFQUFxQjtBQUFDLGtCQUFLK08sTUFBTCxHQUFZN25CLENBQVosQ0FBYyxLQUFLck8sS0FBTCxHQUFXLFFBQVg7QUFBb0IsWUFBeEQsTUFBNEQ7QUFBQyxtQkFBSyxrQkFBZ0JxTyxDQUFyQjtBQUF1QjtBQUFDO0FBQUMsUUFBMVIsQ0FBMlIsS0FBS2dtQixZQUFMLEdBQWtCLFVBQVNoaEIsQ0FBVCxFQUFXO0FBQUMsY0FBSytnQixFQUFMLENBQVFDLFlBQVIsQ0FBcUJoaEIsQ0FBckI7QUFBd0IsUUFBdEQsQ0FBdUQsS0FBS2loQixTQUFMLEdBQWUsVUFBU2poQixDQUFULEVBQVc7QUFBQyxjQUFLK2dCLEVBQUwsQ0FBUUUsU0FBUixDQUFrQmpoQixDQUFsQjtBQUFxQixRQUFoRCxDQUFpRCxLQUFLOGlCLElBQUwsR0FBVSxZQUFVO0FBQUMsY0FBS0MsUUFBTCxHQUFjLEtBQUtoQyxFQUFMLENBQVFHLE1BQVIsRUFBZCxDQUErQixJQUFHLE9BQU8sS0FBSzhCLFFBQVosSUFBc0IsV0FBdEIsSUFBbUMsT0FBTyxLQUFLQyxXQUFaLElBQXlCLFdBQS9ELEVBQTJFO0FBQUMsZUFBSWpqQixJQUFFLElBQUlrVCxLQUFLdFgsTUFBTCxDQUFZc25CLEtBQWhCLENBQXNCLEVBQUNoTyxPQUFNLEtBQUsrTixXQUFaLEVBQXRCLENBQU4sQ0FBc0QsS0FBS0UsS0FBTCxHQUFXbmpCLEVBQUVvakIsT0FBRixDQUFVLEtBQUtMLFFBQWYsRUFBd0IsS0FBS0MsUUFBN0IsQ0FBWDtBQUFrRCxVQUFwTCxNQUF3TDtBQUFDLGVBQUcsS0FBS0osTUFBTCxZQUF1Qm5QLE1BQXZCLElBQStCLEtBQUtnUCxhQUFMLEtBQXFCLFlBQXZELEVBQW9FO0FBQUMsa0JBQUtVLEtBQUwsR0FBVyxLQUFLUCxNQUFMLENBQVlTLHNCQUFaLENBQW1DLEtBQUtOLFFBQXhDLEVBQWlELEtBQUtQLFNBQXRELEVBQWdFLEtBQUtjLFVBQXJFLENBQVg7QUFBNEYsWUFBakssTUFBcUs7QUFBQyxpQkFBRyxLQUFLVixNQUFMLFlBQXVCblAsTUFBdkIsSUFBK0IsS0FBS2dQLGFBQUwsS0FBcUIsS0FBdkQsRUFBNkQ7QUFBQyxvQkFBS1UsS0FBTCxHQUFXLEtBQUtQLE1BQUwsQ0FBWVcsbUJBQVosQ0FBZ0MsS0FBS1IsUUFBckMsRUFBOEMsS0FBS1AsU0FBbkQsQ0FBWDtBQUF5RSxjQUF2SSxNQUEySTtBQUFDLG1CQUFHLEtBQUtJLE1BQUwsWUFBdUIxUCxLQUFLdFgsTUFBTCxDQUFZc25CLEtBQXRDLEVBQTRDO0FBQUMsc0JBQUtDLEtBQUwsR0FBVyxLQUFLUCxNQUFMLENBQVlXLG1CQUFaLENBQWdDLEtBQUtSLFFBQXJDLENBQVg7QUFBMEQsZ0JBQXZHLE1BQTJHO0FBQUMscUJBQUcsS0FBS0gsTUFBTCxZQUF1QjFQLEtBQUt0WCxNQUFMLENBQVk0bkIsR0FBdEMsRUFBMEM7QUFBQyx3QkFBS0wsS0FBTCxHQUFXLEtBQUtQLE1BQUwsQ0FBWVcsbUJBQVosQ0FBZ0MsS0FBS1IsUUFBckMsQ0FBWDtBQUEwRCxrQkFBckcsTUFBeUc7QUFBQyx5QkFBSyw2Q0FBMkMsS0FBS04sYUFBckQ7QUFBbUU7QUFBQztBQUFDO0FBQUM7QUFBQyxpQkFBTyxLQUFLVSxLQUFaO0FBQWtCLFFBQTkwQixDQUErMEIsS0FBS00sVUFBTCxHQUFnQixVQUFTempCLENBQVQsRUFBVztBQUFDLGNBQUtnaEIsWUFBTCxDQUFrQmhoQixDQUFsQixFQUFxQixPQUFPLEtBQUs4aUIsSUFBTCxFQUFQO0FBQW1CLFFBQXBFLENBQXFFLEtBQUtNLE9BQUwsR0FBYSxVQUFTcGpCLENBQVQsRUFBVztBQUFDLGNBQUtpaEIsU0FBTCxDQUFlamhCLENBQWYsRUFBa0IsT0FBTyxLQUFLOGlCLElBQUwsRUFBUDtBQUFtQixRQUE5RCxDQUErRCxLQUFLbm5CLE1BQUwsR0FBWSxVQUFTcUUsQ0FBVCxFQUFXO0FBQUMsY0FBSytpQixRQUFMLEdBQWMsS0FBS2hDLEVBQUwsQ0FBUUcsTUFBUixFQUFkLENBQStCLElBQUcsT0FBTyxLQUFLd0MsUUFBWixJQUFzQixXQUF0QixJQUFtQyxPQUFPLEtBQUtULFdBQVosSUFBeUIsV0FBL0QsRUFBMkU7QUFBQyxlQUFJbmpCLElBQUUsSUFBSW9ULEtBQUt0WCxNQUFMLENBQVlzbkIsS0FBaEIsQ0FBc0IsRUFBQ2hPLE9BQU0sS0FBSytOLFdBQVosRUFBdEIsQ0FBTixDQUFzRCxPQUFPbmpCLEVBQUU2akIsU0FBRixDQUFZLEtBQUtaLFFBQWpCLEVBQTBCL2lCLENBQTFCLEVBQTRCLEtBQUswakIsUUFBakMsQ0FBUDtBQUFrRCxVQUFwTCxNQUF3TDtBQUFDLGVBQUcsS0FBS2IsTUFBTCxZQUF1QnBQLE1BQXZCLElBQStCLEtBQUtnUCxhQUFMLEtBQXFCLFlBQXZELEVBQW9FO0FBQUMsb0JBQU8sS0FBS0ksTUFBTCxDQUFZZSx3QkFBWixDQUFxQyxLQUFLYixRQUExQyxFQUFtRC9pQixDQUFuRCxFQUFxRCxLQUFLd2lCLFNBQTFELEVBQW9FLEtBQUtjLFVBQXpFLENBQVA7QUFBNEYsWUFBakssTUFBcUs7QUFBQyxpQkFBRyxLQUFLVCxNQUFMLFlBQXVCcFAsTUFBdkIsSUFBK0IsS0FBS2dQLGFBQUwsS0FBcUIsS0FBdkQsRUFBNkQ7QUFBQyxzQkFBTyxLQUFLSSxNQUFMLENBQVlnQixxQkFBWixDQUFrQyxLQUFLZCxRQUF2QyxFQUFnRC9pQixDQUFoRCxDQUFQO0FBQTBELGNBQXhILE1BQTRIO0FBQUMsbUJBQUdrVCxLQUFLdFgsTUFBTCxDQUFZc25CLEtBQVosS0FBb0J4cUIsU0FBcEIsSUFBK0IsS0FBS21xQixNQUFMLFlBQXVCM1AsS0FBS3RYLE1BQUwsQ0FBWXNuQixLQUFyRSxFQUEyRTtBQUFDLHdCQUFPLEtBQUtMLE1BQUwsQ0FBWWdCLHFCQUFaLENBQWtDLEtBQUtkLFFBQXZDLEVBQWdEL2lCLENBQWhELENBQVA7QUFBMEQsZ0JBQXRJLE1BQTBJO0FBQUMscUJBQUdrVCxLQUFLdFgsTUFBTCxDQUFZNG5CLEdBQVosS0FBa0I5cUIsU0FBbEIsSUFBNkIsS0FBS21xQixNQUFMLFlBQXVCM1AsS0FBS3RYLE1BQUwsQ0FBWTRuQixHQUFuRSxFQUF1RTtBQUFDLDBCQUFPLEtBQUtYLE1BQUwsQ0FBWWdCLHFCQUFaLENBQWtDLEtBQUtkLFFBQXZDLEVBQWdEL2lCLENBQWhELENBQVA7QUFBMEQsa0JBQWxJLE1BQXNJO0FBQUMseUJBQUssNENBQTBDLEtBQUt5aUIsYUFBcEQ7QUFBa0U7QUFBQztBQUFDO0FBQUM7QUFBQztBQUFDLFFBQTUyQjtBQUE2MkI7QUFBQyxJQUF4aEYsQ0FBeWhGLEtBQUtqbEIsSUFBTCxHQUFVLFVBQVNhLENBQVQsRUFBV0YsQ0FBWCxFQUFhO0FBQUMsV0FBSyxxREFBbUQsS0FBSzJsQixXQUE3RDtBQUF5RSxJQUFqRyxDQUFrRyxLQUFLOUMsWUFBTCxHQUFrQixVQUFTM2lCLENBQVQsRUFBVztBQUFDLFdBQUssdURBQXFELEtBQUt5bEIsV0FBL0Q7QUFBMkUsSUFBekcsQ0FBMEcsS0FBSzdDLFNBQUwsR0FBZSxVQUFTNWlCLENBQVQsRUFBVztBQUFDLFdBQUssb0RBQWtELEtBQUt5bEIsV0FBNUQ7QUFBd0UsSUFBbkcsQ0FBb0csS0FBS2hCLElBQUwsR0FBVSxZQUFVO0FBQUMsV0FBSyw0Q0FBMEMsS0FBS2dCLFdBQXBEO0FBQWdFLElBQXJGLENBQXNGLEtBQUtMLFVBQUwsR0FBZ0IsVUFBU3BsQixDQUFULEVBQVc7QUFBQyxXQUFLLHVEQUFxRCxLQUFLeWxCLFdBQS9EO0FBQTJFLElBQXZHLENBQXdHLEtBQUtWLE9BQUwsR0FBYSxVQUFTL2tCLENBQVQsRUFBVztBQUFDLFdBQUssb0RBQWtELEtBQUt5bEIsV0FBNUQ7QUFBd0UsSUFBakcsQ0FBa0csS0FBS25vQixNQUFMLEdBQVksVUFBUzBDLENBQVQsRUFBVztBQUFDLFdBQUsscURBQW1ELEtBQUt5bEIsV0FBN0Q7QUFBeUUsSUFBakcsQ0FBa0csS0FBS0MsVUFBTCxHQUFnQjFtQixDQUFoQixDQUFrQixJQUFHQSxNQUFJM0UsU0FBUCxFQUFpQjtBQUFDLFNBQUcyRSxFQUFFeEcsR0FBRixLQUFRNkIsU0FBWCxFQUFxQjtBQUFDLFlBQUs2b0IsT0FBTCxHQUFhbGtCLEVBQUV4RyxHQUFmLENBQW1CLElBQUd3RyxFQUFFK2lCLElBQUYsS0FBUzFuQixTQUFaLEVBQXNCO0FBQUMsY0FBSzhvQixRQUFMLEdBQWN0TyxLQUFLdFgsTUFBTCxDQUFZQyxJQUFaLENBQWlCOGhCLGVBQWpCLENBQWlDLEtBQUs0RCxPQUF0QyxDQUFkO0FBQTZELFFBQXBGLE1BQXdGO0FBQUMsY0FBS0MsUUFBTCxHQUFjbmtCLEVBQUUraUIsSUFBaEI7QUFBcUIsYUFBSzBELFdBQUwsR0FBaUIsS0FBS3ZDLE9BQUwsR0FBYSxHQUFiLEdBQWlCLEtBQUtDLFFBQXZDLENBQWdELEtBQUtWLGlCQUFMLENBQXVCLEtBQUtTLE9BQTVCLEVBQW9DLEtBQUtDLFFBQXpDLEVBQW1ELEtBQUtlLFlBQUw7QUFBb0IsVUFBR2xsQixFQUFFMm1CLFVBQUYsS0FBZXRyQixTQUFsQixFQUE0QjtBQUFDLFlBQUs0cUIsVUFBTCxHQUFnQmptQixFQUFFMm1CLFVBQWxCO0FBQTZCLFVBQUczbUIsRUFBRTRtQixTQUFGLEtBQWN2ckIsU0FBakIsRUFBMkI7QUFBQyxXQUFHMkUsRUFBRTZtQixTQUFGLEtBQWN4ckIsU0FBakIsRUFBMkI7QUFBQyxlQUFLLHVEQUFMO0FBQTZELFFBQXpGLE1BQTZGO0FBQUMsYUFBRztBQUFDLGVBQUkwRixJQUFFdWtCLFFBQVFsb0IsTUFBUixDQUFlNEMsRUFBRTRtQixTQUFqQixDQUFOLENBQWtDLEtBQUt6bUIsSUFBTCxDQUFVWSxDQUFWO0FBQWEsVUFBbkQsQ0FBbUQsT0FBTVEsQ0FBTixFQUFRO0FBQUMsaUJBQUssMENBQXdDQSxDQUE3QztBQUErQztBQUFDO0FBQUM7QUFBQztBQUFDLEVBQXh2SSxDQUF5dklzVSxLQUFLdFgsTUFBTCxDQUFZdW9CLE1BQVosR0FBbUIsVUFBU25uQixDQUFULEVBQVcsQ0FBRSxDQUFoQyxDQUFpQ2tXLEtBQUt0WCxNQUFMLENBQVl1b0IsTUFBWixDQUFtQjlQLE9BQW5CLEdBQTJCLFVBQVM1YSxDQUFULEVBQVc0QyxDQUFYLEVBQWFDLENBQWIsRUFBZTtBQUFDLE9BQUdELGFBQWFvWCxNQUFiLElBQXFCcFgsRUFBRXlYLFFBQTFCLEVBQW1DO0FBQUMsU0FBSW5YLElBQUV1VyxLQUFLdFgsTUFBTCxDQUFZdW9CLE1BQVosQ0FBbUJDLGtCQUFuQixDQUFzQy9uQixDQUF0QyxFQUF3Q0MsQ0FBeEMsQ0FBTixDQUFpRCxJQUFHSyxNQUFJLEtBQVAsRUFBYTtBQUFDLGNBQU9OLEVBQUVnWSxPQUFGLENBQVU1YSxDQUFWLENBQVA7QUFBb0IsVUFBR2tELE1BQUksU0FBUCxFQUFpQjtBQUFDLGNBQU9OLEVBQUVpWSxXQUFGLENBQWM3YSxDQUFkLEVBQWdCLE1BQWhCLENBQVA7QUFBK0IsVUFBSWlELElBQUVDLEVBQUV3YSxLQUFGLENBQVEsZ0JBQVIsQ0FBTixDQUFnQyxJQUFHemEsTUFBSSxJQUFQLEVBQVk7QUFBQyxjQUFPTCxFQUFFaVksV0FBRixDQUFjN2EsQ0FBZCxFQUFnQixRQUFNaUQsRUFBRSxDQUFGLENBQXRCLENBQVA7QUFBbUMsWUFBSyx1REFBcURKLENBQTFEO0FBQTRELElBQXBULE1BQXdUO0FBQUMsV0FBSyw4Q0FBTDtBQUFvRDtBQUFDLEVBQXpaLENBQTBaNFcsS0FBS3RYLE1BQUwsQ0FBWXVvQixNQUFaLENBQW1CRSxPQUFuQixHQUEyQixVQUFTNXFCLENBQVQsRUFBVzRDLENBQVgsRUFBYUMsQ0FBYixFQUFlO0FBQUMsT0FBR0QsYUFBYW9YLE1BQWIsSUFBcUJwWCxFQUFFMFgsU0FBMUIsRUFBb0M7QUFBQyxTQUFJcFgsSUFBRXVXLEtBQUt0WCxNQUFMLENBQVl1b0IsTUFBWixDQUFtQkMsa0JBQW5CLENBQXNDL25CLENBQXRDLEVBQXdDQyxDQUF4QyxDQUFOLENBQWlELElBQUdLLE1BQUksS0FBUCxFQUFhO0FBQUMsY0FBT04sRUFBRWdvQixPQUFGLENBQVU1cUIsQ0FBVixDQUFQO0FBQW9CLFVBQUdrRCxNQUFJLFNBQVAsRUFBaUI7QUFBQyxjQUFPTixFQUFFaW9CLFdBQUYsQ0FBYzdxQixDQUFkLEVBQWdCLE1BQWhCLENBQVA7QUFBK0IsVUFBSWlELElBQUVDLEVBQUV3YSxLQUFGLENBQVEsZ0JBQVIsQ0FBTixDQUFnQyxJQUFHemEsTUFBSSxJQUFQLEVBQVk7QUFBQyxjQUFPTCxFQUFFaW9CLFdBQUYsQ0FBYzdxQixDQUFkLEVBQWdCLFFBQU1pRCxFQUFFLENBQUYsQ0FBdEIsQ0FBUDtBQUFtQyxZQUFLLHVEQUFxREosQ0FBMUQ7QUFBNEQsSUFBclQsTUFBeVQ7QUFBQyxXQUFLLDhDQUFMO0FBQW9EO0FBQUMsRUFBMVosQ0FBMlo0VyxLQUFLdFgsTUFBTCxDQUFZdW9CLE1BQVosQ0FBbUJDLGtCQUFuQixHQUFzQyxVQUFTMW5CLENBQVQsRUFBV00sQ0FBWCxFQUFhO0FBQUMsT0FBR04sYUFBYStXLE1BQWhCLEVBQXVCO0FBQUMsU0FBRyw0REFBNERyaEIsT0FBNUQsQ0FBb0U0SyxDQUFwRSxLQUF3RSxDQUFDLENBQTVFLEVBQThFO0FBQUMsY0FBT0EsQ0FBUDtBQUFTLFVBQUdBLE1BQUksSUFBSixJQUFVQSxNQUFJdEUsU0FBakIsRUFBMkI7QUFBQyxjQUFNLEtBQU47QUFBWSxZQUFLLGtFQUFnRXNFLENBQXJFO0FBQXVFLFVBQUssdURBQXFEQSxDQUExRDtBQUE0RCxFQUEvVSxDQUFnVmtXLEtBQUt0WCxNQUFMLENBQVlrZCxHQUFaLEdBQWdCLElBQUksWUFBVTtBQUFDLFFBQUt5TCxXQUFMLEdBQWlCLEVBQUMsc0JBQXFCLGVBQXRCLEVBQXNDLGtCQUFpQixhQUF2RCxFQUFxRSxrQkFBaUIsS0FBdEYsRUFBNEYsb0JBQW1CLFdBQS9HLEVBQTJILGNBQWEsV0FBeEksRUFBb0osY0FBYSxXQUFqSyxFQUE2SyxjQUFhLFdBQTFMLEVBQXNNLGNBQWEsV0FBbk4sRUFBK04sY0FBYSxXQUE1TyxFQUF3UCxrQkFBaUIsYUFBelEsRUFBdVIsc0JBQXFCLGVBQTVTLEVBQTRULHNCQUFxQixlQUFqVixFQUFqQjtBQUFvWCxFQUFuWSxFQUFoQjtBQUMvNWMsS0FBRyxPQUFPclIsSUFBUCxJQUFhLFdBQWIsSUFBMEIsQ0FBQ0EsSUFBOUIsRUFBbUM7QUFBQ0EsVUFBSyxFQUFMO0FBQVEsTUFBRyxPQUFPQSxLQUFLdFgsTUFBWixJQUFvQixXQUFwQixJQUFpQyxDQUFDc1gsS0FBS3RYLE1BQTFDLEVBQWlEO0FBQUNzWCxRQUFLdFgsTUFBTCxHQUFZLEVBQVo7QUFBZSxPQUFLQSxNQUFMLENBQVlzbkIsS0FBWixHQUFrQixVQUFTOW1CLENBQVQsRUFBVztBQUFDLE9BQUkzQyxJQUFFLFdBQU4sQ0FBa0IsSUFBSTBDLElBQUUsSUFBTixDQUFXLElBQUlPLElBQUUsSUFBTixDQUFXLElBQUlMLElBQUUsSUFBTixDQUFXLElBQUlXLElBQUUsSUFBSTJWLFlBQUosRUFBTixDQUF5QixJQUFJclcsSUFBRSxJQUFOLENBQVcsS0FBS3JHLElBQUwsR0FBVSxJQUFWLENBQWUsS0FBSzhkLFNBQUwsR0FBZSxLQUFmLENBQXFCLEtBQUtELFFBQUwsR0FBYyxLQUFkLENBQW9CLFNBQVNuWCxDQUFULENBQVcwQixDQUFYLEVBQWFoQixDQUFiLEVBQWVrQixDQUFmLEVBQWlCaEUsQ0FBakIsRUFBbUI7QUFBQyxTQUFJc0MsSUFBRW9FLEtBQUtmLEdBQUwsQ0FBUzdDLEVBQUVrTixTQUFGLEVBQVQsRUFBdUJoUSxFQUFFZ1EsU0FBRixFQUF2QixDQUFOLENBQTRDLElBQUlwTSxJQUFFRSxFQUFFbW1CLEtBQUYsQ0FBUWptQixDQUFSLENBQU4sQ0FBaUIsSUFBSUgsSUFBRUMsRUFBRTZXLEtBQUYsQ0FBUVcsV0FBUixFQUFOLENBQTRCLEtBQUksSUFBSXpZLElBQUVQLElBQUUsQ0FBWixFQUFjTyxLQUFHLENBQWpCLEVBQW1CLEVBQUVBLENBQXJCLEVBQXVCO0FBQUNnQixXQUFFQSxFQUFFcW1CLE9BQUYsRUFBRixDQUFjcm1CLEVBQUVrRixDQUFGLEdBQUkwQixXQUFXbUQsR0FBZixDQUFtQixJQUFHOUssRUFBRW9PLE9BQUYsQ0FBVXJPLENBQVYsQ0FBSCxFQUFnQjtBQUFDLGFBQUc3QyxFQUFFa1IsT0FBRixDQUFVck8sQ0FBVixDQUFILEVBQWdCO0FBQUNnQixlQUFFQSxFQUFFb21CLEtBQUYsQ0FBUXJtQixDQUFSLENBQUY7QUFBYSxVQUE5QixNQUFrQztBQUFDQyxlQUFFQSxFQUFFb21CLEtBQUYsQ0FBUW5tQixDQUFSLENBQUY7QUFBYTtBQUFDLFFBQWxFLE1BQXNFO0FBQUMsYUFBRzlELEVBQUVrUixPQUFGLENBQVVyTyxDQUFWLENBQUgsRUFBZ0I7QUFBQ2dCLGVBQUVBLEVBQUVvbUIsS0FBRixDQUFRam1CLENBQVIsQ0FBRjtBQUFhO0FBQUM7QUFBQyxhQUFPSCxDQUFQO0FBQVMsU0FBS3NtQixZQUFMLEdBQWtCLFVBQVMzdUIsQ0FBVCxFQUFXO0FBQUMsWUFBTyxJQUFJaVAsVUFBSixDQUFlalAsRUFBRXdVLFNBQUYsRUFBZixFQUE2QnZOLENBQTdCLEVBQWdDMEwsR0FBaEMsQ0FBb0MzUyxFQUFFNFosUUFBRixDQUFXM0ssV0FBV21ELEdBQXRCLENBQXBDLEVBQWdFeUgsR0FBaEUsQ0FBb0U1SyxXQUFXbUQsR0FBL0UsQ0FBUDtBQUEyRixJQUF6SCxDQUEwSCxLQUFLd2MsYUFBTCxHQUFtQixVQUFTNXVCLENBQVQsRUFBVztBQUFDLFVBQUs2dUIsUUFBTCxHQUFjMVIsS0FBS3RYLE1BQUwsQ0FBWWlwQixhQUFaLENBQTBCQyxTQUExQixDQUFvQy91QixDQUFwQyxDQUFkLENBQXFELEtBQUtndkIsU0FBTCxHQUFlLElBQWYsQ0FBb0IsS0FBS0MsU0FBTCxHQUFlLElBQWYsQ0FBb0IsS0FBS0MsU0FBTCxHQUFlbHZCLENBQWY7QUFBaUIsSUFBN0ksQ0FBOEksS0FBS212QixnQkFBTCxHQUFzQixVQUFTbnZCLENBQVQsRUFBVztBQUFDLFVBQUtnZSxTQUFMLEdBQWUsSUFBZixDQUFvQixLQUFLZ1IsU0FBTCxHQUFlaHZCLENBQWY7QUFBaUIsSUFBdkUsQ0FBd0UsS0FBS292QixlQUFMLEdBQXFCLFVBQVNwdkIsQ0FBVCxFQUFXO0FBQUMsVUFBSytkLFFBQUwsR0FBYyxJQUFkLENBQW1CLEtBQUtrUixTQUFMLEdBQWVqdkIsQ0FBZjtBQUFpQixJQUFyRSxDQUFzRSxLQUFLcXZCLGlCQUFMLEdBQXVCLFlBQVU7QUFBQyxTQUFJcm9CLElBQUUsS0FBS2lvQixTQUFYLENBQXFCLElBQUdqb0IsRUFBRTFKLE1BQUYsQ0FBUyxDQUFULEVBQVcsQ0FBWCxNQUFnQixJQUFuQixFQUF3QjtBQUFDLGFBQUssbURBQUw7QUFBeUQsVUFBSXdKLElBQUUsS0FBSytuQixRQUFMLENBQWNTLE1BQWQsR0FBcUIsQ0FBM0IsQ0FBNkIsSUFBR3RvQixFQUFFMUssTUFBRixLQUFXLElBQUV3SyxJQUFFLENBQWxCLEVBQW9CO0FBQUMsYUFBSyxpQ0FBTDtBQUF1QyxVQUFJOUcsSUFBRSxFQUFOLENBQVNBLEVBQUVnRixDQUFGLEdBQUlnQyxFQUFFMUosTUFBRixDQUFTLENBQVQsRUFBV3dKLENBQVgsQ0FBSixDQUFrQjlHLEVBQUVpRixDQUFGLEdBQUkrQixFQUFFMUosTUFBRixDQUFTLElBQUV3SixDQUFYLENBQUosQ0FBa0IsT0FBTzlHLENBQVA7QUFBUyxJQUF4UixDQUF5UixLQUFLdXZCLHNCQUFMLEdBQTRCLFlBQVU7QUFBQyxTQUFJdnZCLElBQUUsS0FBS2t2QixTQUFYLENBQXFCLElBQUdsdkIsTUFBSSxXQUFKLElBQWlCQSxNQUFJLFlBQXJCLElBQW1DQSxNQUFJLE9BQXZDLElBQWdEQSxNQUFJLFlBQXZELEVBQW9FO0FBQUMsY0FBTSxPQUFOO0FBQWMsVUFBR0EsTUFBSSxXQUFKLElBQWlCQSxNQUFJLFlBQXJCLElBQW1DQSxNQUFJLE9BQTFDLEVBQWtEO0FBQUMsY0FBTSxPQUFOO0FBQWMsYUFBTyxJQUFQO0FBQVksSUFBNU4sQ0FBNk4sS0FBS3d2QixrQkFBTCxHQUF3QixZQUFVO0FBQUMsU0FBSXhvQixJQUFFLEtBQUs2bkIsUUFBTCxDQUFjcnFCLENBQXBCLENBQXNCLElBQUlBLElBQUUsS0FBS21xQixZQUFMLENBQWtCM25CLENBQWxCLENBQU4sQ0FBMkIsSUFBSUQsSUFBRSxLQUFLOG5CLFFBQUwsQ0FBY3hpQixDQUFkLENBQWdCOE8sUUFBaEIsQ0FBeUIzVyxDQUF6QixDQUFOLENBQWtDLElBQUk2RCxJQUFFdEIsRUFBRW1aLElBQUYsR0FBU3JCLFlBQVQsRUFBTixDQUE4QixJQUFJdlgsSUFBRVAsRUFBRW9aLElBQUYsR0FBU3RCLFlBQVQsRUFBTixDQUE4QixJQUFJN2UsSUFBRSxLQUFLNnVCLFFBQUwsQ0FBY1MsTUFBZCxHQUFxQixDQUEzQixDQUE2QixJQUFJem1CLElBQUUsQ0FBQyxlQUFhckUsRUFBRXFELFFBQUYsQ0FBVyxFQUFYLENBQWQsRUFBOEJjLEtBQTlCLENBQW9DLENBQUMzSSxDQUFyQyxDQUFOLENBQThDLElBQUl3SSxJQUFFLENBQUMsZUFBYUgsRUFBRVIsUUFBRixDQUFXLEVBQVgsQ0FBZCxFQUE4QmMsS0FBOUIsQ0FBb0MsQ0FBQzNJLENBQXJDLENBQU4sQ0FBOEMsSUFBSXFILElBQUUsQ0FBQyxlQUFhQyxFQUFFTyxRQUFGLENBQVcsRUFBWCxDQUFkLEVBQThCYyxLQUE5QixDQUFvQyxDQUFDM0ksQ0FBckMsQ0FBTixDQUE4QyxJQUFJOEcsSUFBRSxPQUFLMEIsQ0FBTCxHQUFPbkIsQ0FBYixDQUFlLEtBQUs4bkIsZ0JBQUwsQ0FBc0J0bUIsQ0FBdEIsRUFBeUIsS0FBS3VtQixlQUFMLENBQXFCdG9CLENBQXJCLEVBQXdCLE9BQU0sRUFBQ21tQixVQUFTcGtCLENBQVYsRUFBWThrQixVQUFTN21CLENBQXJCLEVBQU47QUFBOEIsSUFBdmIsQ0FBd2IsS0FBSzBtQixtQkFBTCxHQUF5QixVQUFTeHRCLENBQVQsRUFBVztBQUFDLFlBQU8sS0FBS3F0QixPQUFMLENBQWFydEIsQ0FBYixFQUFlLEtBQUtndkIsU0FBcEIsQ0FBUDtBQUFzQyxJQUEzRSxDQUE0RSxLQUFLM0IsT0FBTCxHQUFhLFVBQVMvbEIsQ0FBVCxFQUFXUixDQUFYLEVBQWE7QUFBQyxTQUFJc0IsSUFBRSxJQUFJNkcsVUFBSixDQUFlbkksQ0FBZixFQUFpQixFQUFqQixDQUFOLENBQTJCLElBQUlDLElBQUUsS0FBSzhuQixRQUFMLENBQWNycUIsQ0FBcEIsQ0FBc0IsSUFBSTZELElBQUUsSUFBSTRHLFVBQUosQ0FBZTNILENBQWYsRUFBaUIsRUFBakIsQ0FBTixDQUEyQixHQUFFO0FBQUMsV0FBSXVCLElBQUUsS0FBSzhsQixZQUFMLENBQWtCNW5CLENBQWxCLENBQU4sQ0FBMkIsSUFBSW1ELElBQUUsS0FBSzJrQixRQUFMLENBQWN4aUIsQ0FBcEIsQ0FBc0IsSUFBSWhGLElBQUU2QyxFQUFFaVIsUUFBRixDQUFXdFMsQ0FBWCxDQUFOLENBQW9CLElBQUk3SSxJQUFFcUgsRUFBRTZZLElBQUYsR0FBU3JCLFlBQVQsR0FBd0JsTSxHQUF4QixDQUE0QjVMLENBQTVCLENBQU47QUFBcUMsTUFBN0csUUFBbUgvRyxFQUFFbVMsU0FBRixDQUFZbEQsV0FBVzJCLElBQXZCLEtBQThCLENBQWpKLEVBQW9KLElBQUkzRyxJQUFFcEIsRUFBRXlTLFVBQUYsQ0FBYXZVLENBQWIsRUFBZ0JvVSxRQUFoQixDQUF5QjlTLEVBQUV3UixHQUFGLENBQU16UixFQUFFK1MsUUFBRixDQUFXbmIsQ0FBWCxDQUFOLENBQXpCLEVBQStDMlMsR0FBL0MsQ0FBbUQ1TCxDQUFuRCxDQUFOLENBQTRELE9BQU9vVyxLQUFLdFgsTUFBTCxDQUFZc25CLEtBQVosQ0FBa0JzQyxnQkFBbEIsQ0FBbUN6dkIsQ0FBbkMsRUFBcUNpSyxDQUFyQyxDQUFQO0FBQStDLElBQXRXLENBQXVXLEtBQUs4aUIsSUFBTCxHQUFVLFVBQVNsa0IsQ0FBVCxFQUFXcUIsQ0FBWCxFQUFhO0FBQUMsU0FBSTdCLElBQUU2QixDQUFOLENBQVEsSUFBSXBELElBQUUsS0FBSytuQixRQUFMLENBQWNycUIsQ0FBcEIsQ0FBc0IsSUFBSTZDLElBQUU0SCxXQUFXeWdCLHFCQUFYLENBQWlDN21CLENBQWpDLENBQU4sQ0FBMEMsR0FBRTtBQUFDLFdBQUk5QixJQUFFLEtBQUs0bkIsWUFBTCxDQUFrQjduQixDQUFsQixDQUFOLENBQTJCLElBQUlzQixJQUFFLEtBQUt5bUIsUUFBTCxDQUFjeGlCLENBQXBCLENBQXNCLElBQUkvRSxJQUFFYyxFQUFFK1MsUUFBRixDQUFXcFUsQ0FBWCxDQUFOLENBQW9CLElBQUkvRyxJQUFFc0gsRUFBRTRZLElBQUYsR0FBU3JCLFlBQVQsR0FBd0JsTSxHQUF4QixDQUE0QjdMLENBQTVCLENBQU47QUFBcUMsTUFBN0csUUFBbUg5RyxFQUFFbVMsU0FBRixDQUFZbEQsV0FBVzJCLElBQXZCLEtBQThCLENBQWpKLEVBQW9KLElBQUkzRyxJQUFFbEQsRUFBRXVVLFVBQUYsQ0FBYXhVLENBQWIsRUFBZ0JxVSxRQUFoQixDQUF5QjlULEVBQUV3UyxHQUFGLENBQU14UixFQUFFOFMsUUFBRixDQUFXbmIsQ0FBWCxDQUFOLENBQXpCLEVBQStDMlMsR0FBL0MsQ0FBbUQ3TCxDQUFuRCxDQUFOLENBQTRELE9BQU8sS0FBSzZvQixZQUFMLENBQWtCM3ZCLENBQWxCLEVBQW9CaUssQ0FBcEIsQ0FBUDtBQUE4QixJQUE5VSxDQUErVSxLQUFLNmpCLHFCQUFMLEdBQTJCLFVBQVNobkIsQ0FBVCxFQUFXOUcsQ0FBWCxFQUFhO0FBQUMsWUFBTyxLQUFLNHRCLFNBQUwsQ0FBZTltQixDQUFmLEVBQWlCOUcsQ0FBakIsRUFBbUIsS0FBS2l2QixTQUF4QixDQUFQO0FBQTBDLElBQW5GLENBQW9GLEtBQUtyQixTQUFMLEdBQWUsVUFBUy9rQixDQUFULEVBQVc3SSxDQUFYLEVBQWFxSCxDQUFiLEVBQWU7QUFBQyxTQUFJTixDQUFKLEVBQU1ELENBQU4sQ0FBUSxJQUFJUSxJQUFFNlYsS0FBS3RYLE1BQUwsQ0FBWXNuQixLQUFaLENBQWtCeUMsV0FBbEIsQ0FBOEI1dkIsQ0FBOUIsQ0FBTixDQUF1QytHLElBQUVPLEVBQUVrQixDQUFKLENBQU0xQixJQUFFUSxFQUFFZ0IsQ0FBSixDQUFNLElBQUl0QixDQUFKLENBQU1BLElBQUVrWSxVQUFVMlEsYUFBVixDQUF3QixLQUFLaEIsUUFBTCxDQUFjMVAsS0FBdEMsRUFBNEM5WCxDQUE1QyxDQUFGLENBQWlELElBQUk3QyxJQUFFLElBQUl5SyxVQUFKLENBQWVwRyxDQUFmLEVBQWlCLEVBQWpCLENBQU4sQ0FBMkIsT0FBTyxLQUFLaW5CLFNBQUwsQ0FBZXRyQixDQUFmLEVBQWlCdUMsQ0FBakIsRUFBbUJELENBQW5CLEVBQXFCRSxDQUFyQixDQUFQO0FBQStCLElBQTNNLENBQTRNLEtBQUtwQixNQUFMLEdBQVksVUFBUzBCLENBQVQsRUFBV0QsQ0FBWCxFQUFhUCxDQUFiLEVBQWU7QUFBQyxTQUFJQyxDQUFKLEVBQU0vRyxDQUFOLENBQVEsSUFBRyt2QixRQUFRanFCLElBQVIsQ0FBYS9GLE9BQWIsQ0FBcUJzSCxDQUFyQixDQUFILEVBQTJCO0FBQUMsV0FBSTdDLElBQUUsS0FBS3dyQixRQUFMLENBQWMzb0IsQ0FBZCxDQUFOLENBQXVCTixJQUFFdkMsRUFBRWdFLENBQUosQ0FBTXhJLElBQUV3RSxFQUFFOEQsQ0FBSjtBQUFNLE1BQS9ELE1BQW1FO0FBQUMsV0FBRyxxQkFBa0JqQixDQUFsQix5Q0FBa0JBLENBQWxCLE1BQXFCQSxFQUFFbUIsQ0FBdkIsSUFBMEJuQixFQUFFaUIsQ0FBL0IsRUFBaUM7QUFBQ3ZCLGFBQUVNLEVBQUVtQixDQUFKLENBQU14SSxJQUFFcUgsRUFBRWlCLENBQUo7QUFBTSxRQUE5QyxNQUFrRDtBQUFDLGVBQUssNkJBQUw7QUFBbUM7QUFBQyxVQUFJdEIsQ0FBSixDQUFNLElBQUdGLGFBQWFvWSxTQUFoQixFQUEwQjtBQUFDbFksV0FBRUYsQ0FBRjtBQUFJLE1BQS9CLE1BQW1DO0FBQUMsV0FBR2lwQixRQUFRanFCLElBQVIsQ0FBYS9GLE9BQWIsQ0FBcUIrRyxDQUFyQixDQUFILEVBQTJCO0FBQUNFLGFBQUVrWSxVQUFVK1EsVUFBVixDQUFxQixLQUFLcEIsUUFBTCxDQUFjMVAsS0FBbkMsRUFBeUNyWSxDQUF6QyxDQUFGO0FBQThDLFFBQTFFLE1BQThFO0FBQUMsZUFBSyxrRUFBTDtBQUF3RTtBQUFDLFVBQUkrQixJQUFFb0csV0FBV3lnQixxQkFBWCxDQUFpQ3BvQixDQUFqQyxDQUFOLENBQTBDLE9BQU8sS0FBS3dvQixTQUFMLENBQWVqbkIsQ0FBZixFQUFpQjlCLENBQWpCLEVBQW1CL0csQ0FBbkIsRUFBcUJnSCxDQUFyQixDQUFQO0FBQStCLElBQTFjLENBQTJjLEtBQUs4b0IsU0FBTCxHQUFlLFVBQVN4b0IsQ0FBVCxFQUFXdEgsQ0FBWCxFQUFhK0osQ0FBYixFQUFlbEIsQ0FBZixFQUFpQjtBQUFDLFNBQUk5QixJQUFFLEtBQUs4bkIsUUFBTCxDQUFjcnFCLENBQXBCLENBQXNCLElBQUkwRixJQUFFLEtBQUsya0IsUUFBTCxDQUFjeGlCLENBQXBCLENBQXNCLElBQUdyTSxFQUFFbVMsU0FBRixDQUFZbEQsV0FBV21ELEdBQXZCLElBQTRCLENBQTVCLElBQStCcFMsRUFBRW1TLFNBQUYsQ0FBWXBMLENBQVosS0FBZ0IsQ0FBbEQsRUFBb0Q7QUFBQyxjQUFPLEtBQVA7QUFBYSxVQUFHZ0QsRUFBRW9JLFNBQUYsQ0FBWWxELFdBQVdtRCxHQUF2QixJQUE0QixDQUE1QixJQUErQnJJLEVBQUVvSSxTQUFGLENBQVlwTCxDQUFaLEtBQWdCLENBQWxELEVBQW9EO0FBQUMsY0FBTyxLQUFQO0FBQWEsVUFBSU0sSUFBRTBDLEVBQUV1UixVQUFGLENBQWF2VSxDQUFiLENBQU4sQ0FBc0IsSUFBSUMsSUFBRU0sRUFBRTZULFFBQUYsQ0FBVzlULENBQVgsRUFBY3NMLEdBQWQsQ0FBa0I1TCxDQUFsQixDQUFOLENBQTJCLElBQUlELElBQUU5RyxFQUFFbWIsUUFBRixDQUFXOVQsQ0FBWCxFQUFjc0wsR0FBZCxDQUFrQjVMLENBQWxCLENBQU4sQ0FBMkIsSUFBSXNCLElBQUU2QixFQUFFaVIsUUFBRixDQUFXblUsQ0FBWCxFQUFjNlMsR0FBZCxDQUFrQmhSLEVBQUVzUyxRQUFGLENBQVdyVSxDQUFYLENBQWxCLENBQU4sQ0FBdUMsSUFBSXNCLElBQUVDLEVBQUU2WCxJQUFGLEdBQVNyQixZQUFULEdBQXdCbE0sR0FBeEIsQ0FBNEI1TCxDQUE1QixDQUFOLENBQXFDLE9BQU9xQixFQUFFcVMsTUFBRixDQUFTemEsQ0FBVCxDQUFQO0FBQW1CLElBQTVYLENBQTZYLEtBQUsydkIsWUFBTCxHQUFrQixVQUFTM29CLENBQVQsRUFBV0YsQ0FBWCxFQUFhO0FBQUMsU0FBSUMsSUFBRUMsRUFBRWtwQixpQkFBRixFQUFOLENBQTRCLElBQUlsd0IsSUFBRThHLEVBQUVvcEIsaUJBQUYsRUFBTixDQUE0QixJQUFJcm5CLElBQUUsRUFBTixDQUFTQSxFQUFFeEwsSUFBRixDQUFPLENBQVAsRUFBVXdMLEVBQUV4TCxJQUFGLENBQU8wSixFQUFFekssTUFBVCxFQUFpQnVNLElBQUVBLEVBQUVWLE1BQUYsQ0FBU3BCLENBQVQsQ0FBRixDQUFjOEIsRUFBRXhMLElBQUYsQ0FBTyxDQUFQLEVBQVV3TCxFQUFFeEwsSUFBRixDQUFPMkMsRUFBRTFELE1BQVQsRUFBaUJ1TSxJQUFFQSxFQUFFVixNQUFGLENBQVNuSSxDQUFULENBQUYsQ0FBYzZJLEVBQUV5WSxPQUFGLENBQVV6WSxFQUFFdk0sTUFBWixFQUFvQnVNLEVBQUV5WSxPQUFGLENBQVUsRUFBVixFQUFjLE9BQU96WSxDQUFQO0FBQVMsSUFBOU4sQ0FBK04sS0FBS21uQixRQUFMLEdBQWMsVUFBU3hyQixDQUFULEVBQVc7QUFBQyxTQUFJcUUsQ0FBSixDQUFNLElBQUdyRSxFQUFFLENBQUYsS0FBTSxFQUFULEVBQVk7QUFBQyxhQUFNLElBQUlwTyxLQUFKLENBQVUsbUNBQVYsQ0FBTjtBQUFxRCxVQUFFLENBQUYsQ0FBSSxJQUFHb08sRUFBRXFFLENBQUYsS0FBTSxDQUFULEVBQVc7QUFBQyxhQUFNLElBQUl6UyxLQUFKLENBQVUsaURBQVYsQ0FBTjtBQUFtRSxVQUFJMlEsSUFBRXZDLEVBQUVtRSxLQUFGLENBQVFFLElBQUUsQ0FBVixFQUFZQSxJQUFFLENBQUYsR0FBSXJFLEVBQUVxRSxJQUFFLENBQUosQ0FBaEIsQ0FBTixDQUE4QkEsS0FBRyxJQUFFckUsRUFBRXFFLElBQUUsQ0FBSixDQUFMLENBQVksSUFBR3JFLEVBQUVxRSxDQUFGLEtBQU0sQ0FBVCxFQUFXO0FBQUMsYUFBTSxJQUFJelMsS0FBSixDQUFVLGtEQUFWLENBQU47QUFBb0UsVUFBSTRKLElBQUV3RSxFQUFFbUUsS0FBRixDQUFRRSxJQUFFLENBQVYsRUFBWUEsSUFBRSxDQUFGLEdBQUlyRSxFQUFFcUUsSUFBRSxDQUFKLENBQWhCLENBQU4sQ0FBOEJBLEtBQUcsSUFBRXJFLEVBQUVxRSxJQUFFLENBQUosQ0FBTCxDQUFZLElBQUk3QixJQUFFaUksV0FBV3lnQixxQkFBWCxDQUFpQzNvQixDQUFqQyxDQUFOLENBQTBDLElBQUlELElBQUVtSSxXQUFXeWdCLHFCQUFYLENBQWlDMXZCLENBQWpDLENBQU4sQ0FBMEMsT0FBTSxFQUFDd0ksR0FBRXhCLENBQUgsRUFBS3NCLEdBQUV4QixDQUFQLEVBQU47QUFBZ0IsSUFBN2IsQ0FBOGIsS0FBS3FwQixlQUFMLEdBQXFCLFVBQVN0bkIsQ0FBVCxFQUFXO0FBQUMsU0FBR0EsRUFBRXZNLE1BQUYsS0FBVyxFQUFkLEVBQWlCO0FBQUMsYUFBSyxnQ0FBTDtBQUFzQyxVQUFJd0ssSUFBRStCLEVBQUUsQ0FBRixJQUFLLEVBQVgsQ0FBYyxJQUFHL0IsSUFBRSxDQUFGLElBQUtBLElBQUUsQ0FBVixFQUFZO0FBQUMsYUFBSyx3QkFBTDtBQUE4QixVQUFJUSxJQUFFLEtBQUt1bkIsUUFBTCxDQUFjcnFCLENBQXBCLENBQXNCLElBQUl1QyxJQUFFa0ksV0FBV3lnQixxQkFBWCxDQUFpQzdtQixFQUFFRixLQUFGLENBQVEsQ0FBUixFQUFVLEVBQVYsQ0FBakMsRUFBZ0RnSyxHQUFoRCxDQUFvRHJMLENBQXBELENBQU4sQ0FBNkQsSUFBSU4sSUFBRWlJLFdBQVd5Z0IscUJBQVgsQ0FBaUM3bUIsRUFBRUYsS0FBRixDQUFRLEVBQVIsRUFBVyxFQUFYLENBQWpDLEVBQWlEZ0ssR0FBakQsQ0FBcURyTCxDQUFyRCxDQUFOLENBQThELE9BQU0sRUFBQ2tCLEdBQUV6QixDQUFILEVBQUt1QixHQUFFdEIsQ0FBUCxFQUFTaEgsR0FBRThHLENBQVgsRUFBTjtBQUFvQixJQUF2VCxDQUF3VCxLQUFLc3BCLGtCQUFMLEdBQXdCLFVBQVNycEIsQ0FBVCxFQUFXO0FBQUMsU0FBSXZDLElBQUVnZCxPQUFOLENBQWMsSUFBSTNZLElBQUVzVSxLQUFLdFgsTUFBTCxDQUFZc25CLEtBQVosQ0FBa0JrRCxPQUF4QixDQUFnQyxJQUFJaHBCLElBQUU3QyxFQUFFNGQsVUFBUixDQUFtQixJQUFHNWQsRUFBRW1lLFNBQUYsQ0FBWTViLENBQVosTUFBaUIsS0FBcEIsRUFBMEI7QUFBQyxhQUFLLHNCQUFMO0FBQTRCLFVBQUkvRyxDQUFKLEVBQU1nSCxDQUFOLEVBQVFNLENBQVIsQ0FBVSxJQUFHO0FBQUN0SCxXQUFFcUgsRUFBRU4sQ0FBRixFQUFJLENBQUosRUFBTSxDQUFDLENBQUQsRUFBRyxDQUFILENBQU4sRUFBWSxJQUFaLENBQUYsQ0FBb0JDLElBQUVLLEVBQUVOLENBQUYsRUFBSSxDQUFKLEVBQU0sQ0FBQyxDQUFELENBQU4sRUFBVSxJQUFWLENBQUYsQ0FBa0IsSUFBRztBQUFDTyxhQUFFRCxFQUFFTixDQUFGLEVBQUksQ0FBSixFQUFNLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBTixFQUFZLElBQVosRUFBa0J6SixNQUFsQixDQUF5QixDQUF6QixDQUFGO0FBQThCLFFBQWxDLENBQWtDLE9BQU13SixDQUFOLEVBQVEsQ0FBRTtBQUFDLE1BQXZGLENBQXVGLE9BQU1BLENBQU4sRUFBUTtBQUFDLGFBQUssMENBQUw7QUFBZ0QsV0FBS29vQixTQUFMLEdBQWVybUIsRUFBRTdJLENBQUYsQ0FBZixDQUFvQixJQUFHLEtBQUtrdkIsU0FBTCxLQUFpQnZzQixTQUFwQixFQUE4QjtBQUFDLGFBQUssd0JBQUw7QUFBOEIsV0FBS2lzQixhQUFMLENBQW1CLEtBQUtNLFNBQXhCLEVBQW1DLEtBQUtFLGVBQUwsQ0FBcUI5bkIsQ0FBckIsRUFBd0IsS0FBSzZuQixnQkFBTCxDQUFzQm5vQixDQUF0QixFQUF5QixLQUFLK1csUUFBTCxHQUFjLEtBQWQ7QUFBb0IsSUFBL2UsQ0FBZ2YsS0FBS3VTLGtCQUFMLEdBQXdCLFVBQVN2cEIsQ0FBVCxFQUFXO0FBQUMsU0FBSXNCLElBQUVtWixPQUFOLENBQWMsSUFBSXhoQixJQUFFbWQsS0FBS3RYLE1BQUwsQ0FBWXNuQixLQUFaLENBQWtCa0QsT0FBeEIsQ0FBZ0MsSUFBSTdyQixJQUFFNkQsRUFBRStaLFVBQVIsQ0FBbUIsSUFBRy9aLEVBQUVzYSxTQUFGLENBQVk1YixDQUFaLE1BQWlCLEtBQXBCLEVBQTBCO0FBQUMsYUFBSyxzQkFBTDtBQUE0QixVQUFJRCxDQUFKLEVBQU1PLENBQU4sRUFBUXdCLENBQVIsRUFBVTdCLENBQVYsQ0FBWSxJQUFHO0FBQUNGLFdBQUV0QyxFQUFFdUMsQ0FBRixFQUFJLENBQUosRUFBTSxDQUFDLENBQUQsRUFBRyxDQUFILENBQU4sRUFBWSxJQUFaLENBQUYsQ0FBb0JNLElBQUU3QyxFQUFFdUMsQ0FBRixFQUFJLENBQUosRUFBTSxDQUFDLENBQUQsRUFBRyxDQUFILENBQU4sRUFBWSxJQUFaLENBQUYsQ0FBb0I4QixJQUFFckUsRUFBRXVDLENBQUYsRUFBSSxDQUFKLEVBQU0sQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FBTixFQUFjLElBQWQsQ0FBRixDQUFzQixJQUFHO0FBQUNDLGFBQUV4QyxFQUFFdUMsQ0FBRixFQUFJLENBQUosRUFBTSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsQ0FBTixFQUFnQixJQUFoQixFQUFzQnpKLE1BQXRCLENBQTZCLENBQTdCLENBQUY7QUFBa0MsUUFBdEMsQ0FBc0MsT0FBTWdLLENBQU4sRUFBUSxDQUFFO0FBQUMsTUFBbkgsQ0FBbUgsT0FBTUEsQ0FBTixFQUFRO0FBQUMsYUFBSyx3Q0FBTDtBQUE4QyxXQUFLNG5CLFNBQUwsR0FBZWx2QixFQUFFcUgsQ0FBRixDQUFmLENBQW9CLElBQUcsS0FBSzZuQixTQUFMLEtBQWlCdnNCLFNBQXBCLEVBQThCO0FBQUMsYUFBSyx3QkFBTDtBQUE4QixXQUFLaXNCLGFBQUwsQ0FBbUIsS0FBS00sU0FBeEIsRUFBbUMsS0FBS0UsZUFBTCxDQUFxQnBvQixDQUFyQixFQUF3QixLQUFLbW9CLGdCQUFMLENBQXNCdG1CLENBQXRCLEVBQXlCLEtBQUtrVixRQUFMLEdBQWMsS0FBZDtBQUFvQixJQUEzZ0IsQ0FBNGdCLEtBQUt3UyxrQkFBTCxHQUF3QixVQUFTeHBCLENBQVQsRUFBVztBQUFDLFNBQUl2QyxJQUFFZ2QsT0FBTixDQUFjLElBQUkzWSxJQUFFc1UsS0FBS3RYLE1BQUwsQ0FBWXNuQixLQUFaLENBQWtCa0QsT0FBeEIsQ0FBZ0MsSUFBSWhwQixJQUFFN0MsRUFBRTRkLFVBQVIsQ0FBbUIsSUFBRzVkLEVBQUVtZSxTQUFGLENBQVk1YixDQUFaLE1BQWlCLEtBQXBCLEVBQTBCO0FBQUMsYUFBSyxzQkFBTDtBQUE0QixVQUFJQyxDQUFKLEVBQU1oSCxDQUFOLEVBQVFzSCxDQUFSLENBQVUsSUFBRztBQUFDTixXQUFFSyxFQUFFTixDQUFGLEVBQUksQ0FBSixFQUFNLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBTixFQUFZLElBQVosQ0FBRixDQUFvQi9HLElBQUVxSCxFQUFFTixDQUFGLEVBQUksQ0FBSixFQUFNLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBTixFQUFZLElBQVosQ0FBRixDQUFvQk8sSUFBRUQsRUFBRU4sQ0FBRixFQUFJLENBQUosRUFBTSxDQUFDLENBQUQsQ0FBTixFQUFVLElBQVYsRUFBZ0J6SixNQUFoQixDQUF1QixDQUF2QixDQUFGO0FBQTRCLE1BQXhFLENBQXdFLE9BQU13SixDQUFOLEVBQVE7QUFBQyxhQUFLLGlDQUFMO0FBQXVDLFdBQUtvb0IsU0FBTCxHQUFlcm1CLEVBQUU3SSxDQUFGLENBQWYsQ0FBb0IsSUFBRyxLQUFLa3ZCLFNBQUwsS0FBaUIsSUFBcEIsRUFBeUI7QUFBQyxhQUFLLHdCQUFMO0FBQThCLFdBQUtOLGFBQUwsQ0FBbUIsS0FBS00sU0FBeEIsRUFBbUMsS0FBS0UsZUFBTCxDQUFxQjluQixDQUFyQjtBQUF3QixJQUFyYSxDQUFzYSxLQUFLa3BCLGlCQUFMLEdBQXVCLFVBQVN4cEIsQ0FBVCxFQUFXSyxDQUFYLEVBQWE7QUFBQyxTQUFHQSxNQUFJLENBQVAsRUFBUztBQUFDQSxXQUFFLENBQUY7QUFBSSxVQUFJd0IsSUFBRTJZLE9BQU4sQ0FBYyxJQUFJemEsSUFBRW9XLEtBQUt0WCxNQUFMLENBQVlzbkIsS0FBWixDQUFrQmtELE9BQXhCLENBQWdDLElBQUkvb0IsSUFBRXVCLEVBQUV1WixVQUFSLENBQW1CLElBQUd2WixFQUFFOFosU0FBRixDQUFZM2IsQ0FBWixNQUFpQixLQUFwQixFQUEwQjtBQUFDLGFBQUssc0JBQUw7QUFBNEIsVUFBSWhILENBQUosRUFBTXdFLENBQU4sQ0FBUSxJQUFHO0FBQUN4RSxXQUFFc0gsRUFBRU4sQ0FBRixFQUFJLENBQUosRUFBTSxDQUFDLENBQUQsRUFBR0ssQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLENBQU4sRUFBZ0IsSUFBaEIsQ0FBRixDQUF3QjdDLElBQUU4QyxFQUFFTixDQUFGLEVBQUksQ0FBSixFQUFNLENBQUMsQ0FBRCxFQUFHSyxDQUFILEVBQUssQ0FBTCxDQUFOLEVBQWMsSUFBZCxFQUFvQi9KLE1BQXBCLENBQTJCLENBQTNCLENBQUY7QUFBZ0MsTUFBNUQsQ0FBNEQsT0FBTXdKLENBQU4sRUFBUTtBQUFDLGFBQUssNENBQUw7QUFBa0QsV0FBS29vQixTQUFMLEdBQWVub0IsRUFBRS9HLENBQUYsQ0FBZixDQUFvQixJQUFHLEtBQUtrdkIsU0FBTCxLQUFpQixJQUFwQixFQUF5QjtBQUFDLGFBQUssd0JBQUw7QUFBOEIsV0FBS04sYUFBTCxDQUFtQixLQUFLTSxTQUF4QixFQUFtQyxLQUFLRSxlQUFMLENBQXFCNXFCLENBQXJCO0FBQXdCLElBQWpiLENBQWtiLElBQUc2QixNQUFJMUQsU0FBUCxFQUFpQjtBQUFDLFNBQUcwRCxFQUFFOFksS0FBRixLQUFVeGMsU0FBYixFQUF1QjtBQUFDLFlBQUt1c0IsU0FBTCxHQUFlN29CLEVBQUU4WSxLQUFqQjtBQUF1QjtBQUFDLFFBQUcsS0FBSytQLFNBQUwsS0FBaUJ2c0IsU0FBcEIsRUFBOEI7QUFBQyxVQUFLdXNCLFNBQUwsR0FBZXhyQixDQUFmO0FBQWlCLFNBQUtrckIsYUFBTCxDQUFtQixLQUFLTSxTQUF4QixFQUFtQyxJQUFHN29CLE1BQUkxRCxTQUFQLEVBQWlCO0FBQUMsU0FBRzBELEVBQUVvcUIsR0FBRixLQUFROXRCLFNBQVgsRUFBcUI7QUFBQyxZQUFLd3NCLGdCQUFMLENBQXNCOW9CLEVBQUVvcUIsR0FBeEI7QUFBNkIsVUFBR3BxQixFQUFFcXFCLEdBQUYsS0FBUS90QixTQUFYLEVBQXFCO0FBQUMsWUFBS3lzQixlQUFMLENBQXFCL29CLEVBQUVxcUIsR0FBdkI7QUFBNEI7QUFBQztBQUFDLEVBQXhxTixDQUF5cU52VCxLQUFLdFgsTUFBTCxDQUFZc25CLEtBQVosQ0FBa0J5QyxXQUFsQixHQUE4QixVQUFTM29CLENBQVQsRUFBVztBQUFDLE9BQUlOLElBQUV3VyxLQUFLdFgsTUFBTCxDQUFZc25CLEtBQVosQ0FBa0J3RCxrQkFBbEIsQ0FBcUMxcEIsQ0FBckMsQ0FBTixDQUE4QyxJQUFJVixJQUFFLElBQUkwSSxVQUFKLENBQWV0SSxFQUFFNkIsQ0FBakIsRUFBbUIsRUFBbkIsQ0FBTixDQUE2QixJQUFJNUIsSUFBRSxJQUFJcUksVUFBSixDQUFldEksRUFBRTJCLENBQWpCLEVBQW1CLEVBQW5CLENBQU4sQ0FBNkIsT0FBTSxFQUFDRSxHQUFFakMsQ0FBSCxFQUFLK0IsR0FBRTFCLENBQVAsRUFBTjtBQUFnQixFQUFsSyxDQUFtS3VXLEtBQUt0WCxNQUFMLENBQVlzbkIsS0FBWixDQUFrQndELGtCQUFsQixHQUFxQyxVQUFTcnFCLENBQVQsRUFBVztBQUFDLE9BQUlRLElBQUUwYSxPQUFOLENBQWMsSUFBSXhoQixJQUFFOEcsRUFBRWtiLFdBQVIsQ0FBb0IsSUFBSTViLElBQUVVLEVBQUUrYSxJQUFSLENBQWEsSUFBR3ZiLEVBQUVoSixNQUFGLENBQVMsQ0FBVCxFQUFXLENBQVgsS0FBZSxJQUFsQixFQUF1QjtBQUFDLFdBQUssbUNBQUw7QUFBeUMsUUFBSStJLElBQUVyRyxFQUFFc0csQ0FBRixFQUFJLENBQUosQ0FBTixDQUFhLElBQUdELEVBQUUvSixNQUFGLElBQVUsQ0FBYixFQUFlO0FBQUMsV0FBSyx3REFBTDtBQUE4RCxRQUFJb0gsSUFBRTJDLEVBQUUsQ0FBRixDQUFOLENBQVcsSUFBSUUsSUFBRUYsRUFBRSxDQUFGLENBQU4sQ0FBVyxJQUFHQyxFQUFFaEosTUFBRixDQUFTb0csQ0FBVCxFQUFXLENBQVgsS0FBZSxJQUFsQixFQUF1QjtBQUFDLFdBQUssdURBQUw7QUFBNkQsUUFBRzRDLEVBQUVoSixNQUFGLENBQVNpSixDQUFULEVBQVcsQ0FBWCxLQUFlLElBQWxCLEVBQXVCO0FBQUMsV0FBSyx1REFBTDtBQUE2RCxRQUFJSyxJQUFFUixFQUFFRSxDQUFGLEVBQUk1QyxDQUFKLENBQU4sQ0FBYSxJQUFJaUQsSUFBRVAsRUFBRUUsQ0FBRixFQUFJQyxDQUFKLENBQU4sQ0FBYSxPQUFNLEVBQUNpQyxHQUFFNUIsQ0FBSCxFQUFLMEIsR0FBRTNCLENBQVAsRUFBTjtBQUFnQixFQUF0ZSxDQUF1ZXdXLEtBQUt0WCxNQUFMLENBQVlzbkIsS0FBWixDQUFrQnlELGtCQUFsQixHQUFxQyxVQUFTaHFCLENBQVQsRUFBVztBQUFDLE9BQUlMLElBQUU0VyxLQUFLdFgsTUFBTCxDQUFZc25CLEtBQVosQ0FBa0J3RCxrQkFBbEIsQ0FBcUMvcEIsQ0FBckMsQ0FBTixDQUE4QyxJQUFJRCxJQUFFSixFQUFFaUMsQ0FBUixDQUFVLElBQUl2QixJQUFFVixFQUFFK0IsQ0FBUixDQUFVLElBQUczQixFQUFFckosTUFBRixDQUFTLENBQVQsRUFBVyxDQUFYLEtBQWUsSUFBZixJQUFzQnFKLEVBQUVySyxNQUFGLEdBQVMsRUFBVixJQUFlLENBQXZDLEVBQXlDO0FBQUNxSyxTQUFFQSxFQUFFckosTUFBRixDQUFTLENBQVQsQ0FBRjtBQUFjLFFBQUcySixFQUFFM0osTUFBRixDQUFTLENBQVQsRUFBVyxDQUFYLEtBQWUsSUFBZixJQUFzQjJKLEVBQUUzSyxNQUFGLEdBQVMsRUFBVixJQUFlLENBQXZDLEVBQXlDO0FBQUMySyxTQUFFQSxFQUFFM0osTUFBRixDQUFTLENBQVQsQ0FBRjtBQUFjLFFBQUlxSixFQUFFckssTUFBRixHQUFTLEVBQVYsSUFBZSxFQUFsQixFQUFxQjtBQUFDcUssU0FBRSxPQUFLQSxDQUFQO0FBQVMsUUFBSU0sRUFBRTNLLE1BQUYsR0FBUyxFQUFWLElBQWUsRUFBbEIsRUFBcUI7QUFBQzJLLFNBQUUsT0FBS0EsQ0FBUDtBQUFTLFFBQUdOLEVBQUVySyxNQUFGLEdBQVMsRUFBVCxJQUFhLENBQWhCLEVBQWtCO0FBQUMsV0FBSyxrQ0FBTDtBQUF3QyxRQUFHMkssRUFBRTNLLE1BQUYsR0FBUyxFQUFULElBQWEsQ0FBaEIsRUFBa0I7QUFBQyxXQUFLLGtDQUFMO0FBQXdDLFdBQU9xSyxJQUFFTSxDQUFUO0FBQVcsRUFBbGEsQ0FBbWFrVyxLQUFLdFgsTUFBTCxDQUFZc25CLEtBQVosQ0FBa0IwRCxrQkFBbEIsR0FBcUMsVUFBUzVwQixDQUFULEVBQVc7QUFBQyxPQUFNQSxFQUFFM0ssTUFBRixHQUFTLENBQVYsR0FBYSxDQUFkLElBQWtCLEtBQUcsQ0FBckIsQ0FBRCxJQUEyQixDQUE5QixFQUFnQztBQUFDLFdBQUssa0RBQUw7QUFBd0QsUUFBSXNLLElBQUVLLEVBQUUzSixNQUFGLENBQVMsQ0FBVCxFQUFXMkosRUFBRTNLLE1BQUYsR0FBUyxDQUFwQixDQUFOLENBQTZCLElBQUlxSyxJQUFFTSxFQUFFM0osTUFBRixDQUFTMkosRUFBRTNLLE1BQUYsR0FBUyxDQUFsQixDQUFOLENBQTJCLE9BQU82Z0IsS0FBS3RYLE1BQUwsQ0FBWXNuQixLQUFaLENBQWtCMkQsaUJBQWxCLENBQW9DbHFCLENBQXBDLEVBQXNDRCxDQUF0QyxDQUFQO0FBQWdELEVBQWxQLENBQW1Qd1csS0FBS3RYLE1BQUwsQ0FBWXNuQixLQUFaLENBQWtCMkQsaUJBQWxCLEdBQW9DLFVBQVNucUIsQ0FBVCxFQUFXTSxDQUFYLEVBQWE7QUFBQyxPQUFJVixJQUFFLElBQUkwSSxVQUFKLENBQWV0SSxDQUFmLEVBQWlCLEVBQWpCLENBQU4sQ0FBMkIsSUFBSUMsSUFBRSxJQUFJcUksVUFBSixDQUFlaEksQ0FBZixFQUFpQixFQUFqQixDQUFOLENBQTJCLE9BQU9rVyxLQUFLdFgsTUFBTCxDQUFZc25CLEtBQVosQ0FBa0JzQyxnQkFBbEIsQ0FBbUNscEIsQ0FBbkMsRUFBcUNLLENBQXJDLENBQVA7QUFBK0MsRUFBdkosQ0FBd0p1VyxLQUFLdFgsTUFBTCxDQUFZc25CLEtBQVosQ0FBa0JzQyxnQkFBbEIsR0FBbUMsVUFBU25wQixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLE9BQUlLLElBQUV1VyxLQUFLb0YsSUFBWCxDQUFnQixJQUFJNWIsSUFBRSxJQUFJQyxFQUFFbXFCLFVBQU4sQ0FBaUIsRUFBQ0MsUUFBTzFxQixDQUFSLEVBQWpCLENBQU4sQ0FBbUMsSUFBSVcsSUFBRSxJQUFJTCxFQUFFbXFCLFVBQU4sQ0FBaUIsRUFBQ0MsUUFBT3pxQixDQUFSLEVBQWpCLENBQU4sQ0FBbUMsSUFBSTdDLElBQUUsSUFBSWtELEVBQUVxcUIsV0FBTixDQUFrQixFQUFDQyxPQUFNLENBQUN2cUIsQ0FBRCxFQUFHTSxDQUFILENBQVAsRUFBbEIsQ0FBTixDQUF1QyxPQUFPdkQsRUFBRStlLGFBQUYsRUFBUDtBQUF5QixFQUF2TSxDQUF3TXRGLEtBQUt0WCxNQUFMLENBQVlzbkIsS0FBWixDQUFrQmtELE9BQWxCLEdBQTBCLFVBQVNwcEIsQ0FBVCxFQUFXO0FBQUMsT0FBR0EsTUFBSSxrQkFBUCxFQUEwQjtBQUFDLFlBQU0sV0FBTjtBQUFrQixRQUFHQSxNQUFJLFlBQVAsRUFBb0I7QUFBQyxZQUFNLFdBQU47QUFBa0IsUUFBR0EsTUFBSSxZQUFQLEVBQW9CO0FBQUMsWUFBTSxXQUFOO0FBQWtCLFFBQUcsMENBQTBDNUssT0FBMUMsQ0FBa0Q0SyxDQUFsRCxNQUF1RCxDQUFDLENBQTNELEVBQTZEO0FBQUMsWUFBTSxXQUFOO0FBQWtCLFFBQUcsY0FBYzVLLE9BQWQsQ0FBc0I0SyxDQUF0QixNQUEyQixDQUFDLENBQS9CLEVBQWlDO0FBQUMsWUFBTSxXQUFOO0FBQWtCLFFBQUcsK0JBQStCNUssT0FBL0IsQ0FBdUM0SyxDQUF2QyxNQUE0QyxDQUFDLENBQWhELEVBQWtEO0FBQUMsWUFBTSxXQUFOO0FBQWtCLFdBQU8sSUFBUDtBQUFZLEVBQXRYO0FBQ3Q1USxLQUFHLE9BQU9rVyxJQUFQLElBQWEsV0FBYixJQUEwQixDQUFDQSxJQUE5QixFQUFtQztBQUFDQSxVQUFLLEVBQUw7QUFBUSxNQUFHLE9BQU9BLEtBQUt0WCxNQUFaLElBQW9CLFdBQXBCLElBQWlDLENBQUNzWCxLQUFLdFgsTUFBMUMsRUFBaUQ7QUFBQ3NYLFFBQUt0WCxNQUFMLEdBQVksRUFBWjtBQUFlLE9BQUtBLE1BQUwsQ0FBWWlwQixhQUFaLEdBQTBCLElBQUksWUFBVTtBQUFDLE9BQUlub0IsSUFBRSxFQUFOLENBQVMsSUFBSUMsSUFBRSxFQUFOLENBQVMsU0FBU0ssQ0FBVCxDQUFXVixDQUFYLEVBQWE7QUFBQyxZQUFPLElBQUkwSSxVQUFKLENBQWUxSSxDQUFmLEVBQWlCLEVBQWpCLENBQVA7QUFBNEIsU0FBS3dvQixTQUFMLEdBQWUsVUFBU3JyQixDQUFULEVBQVc7QUFBQyxTQUFJNkMsSUFBRTdDLENBQU4sQ0FBUSxJQUFHLE9BQU9rRCxFQUFFTCxDQUFGLENBQVAsSUFBYSxXQUFoQixFQUE0QjtBQUFDQSxXQUFFSyxFQUFFbEQsQ0FBRixDQUFGO0FBQU8sVUFBRyxPQUFPaUQsRUFBRUosQ0FBRixDQUFQLElBQWEsV0FBaEIsRUFBNEI7QUFBQyxjQUFPSSxFQUFFSixDQUFGLENBQVA7QUFBWSxZQUFLLGlDQUErQkEsQ0FBcEM7QUFBc0MsSUFBdEosQ0FBdUosS0FBSzRxQixNQUFMLEdBQVksVUFBUzNqQixDQUFULEVBQVd6RyxDQUFYLEVBQWFPLENBQWIsRUFBZWxCLENBQWYsRUFBaUJ5QyxDQUFqQixFQUFtQm5GLENBQW5CLEVBQXFCb0QsQ0FBckIsRUFBdUJSLENBQXZCLEVBQXlCVSxDQUF6QixFQUEyQmtELENBQTNCLEVBQTZCM0QsQ0FBN0IsRUFBK0J2QixDQUEvQixFQUFpQztBQUFDMkIsT0FBRTZHLENBQUYsSUFBSyxFQUFMLENBQVEsSUFBSWxGLElBQUVyQixFQUFFSyxDQUFGLENBQU4sQ0FBVyxJQUFJaUcsSUFBRXRHLEVBQUViLENBQUYsQ0FBTixDQUFXLElBQUluQixJQUFFZ0MsRUFBRTRCLENBQUYsQ0FBTixDQUFXLElBQUlULElBQUVuQixFQUFFdkQsQ0FBRixDQUFOLENBQVcsSUFBSXFHLElBQUU5QyxFQUFFSCxDQUFGLENBQU4sQ0FBVyxJQUFJMEIsSUFBRSxJQUFJNlgsU0FBSixDQUFjL1gsQ0FBZCxFQUFnQmlGLENBQWhCLEVBQWtCdEksQ0FBbEIsQ0FBTixDQUEyQixJQUFJb0QsSUFBRUcsRUFBRXlZLGNBQUYsQ0FBaUIsT0FBSzNhLENBQUwsR0FBT1UsQ0FBeEIsQ0FBTixDQUFpQ0wsRUFBRTZHLENBQUYsRUFBSyxNQUFMLElBQWFBLENBQWIsQ0FBZTdHLEVBQUU2RyxDQUFGLEVBQUssUUFBTCxJQUFlekcsQ0FBZixDQUFpQkosRUFBRTZHLENBQUYsRUFBSyxPQUFMLElBQWNoRixDQUFkLENBQWdCN0IsRUFBRTZHLENBQUYsRUFBSyxHQUFMLElBQVVuRixDQUFWLENBQVkxQixFQUFFNkcsQ0FBRixFQUFLLEdBQUwsSUFBVXBGLENBQVYsQ0FBWXpCLEVBQUU2RyxDQUFGLEVBQUssR0FBTCxJQUFVekQsQ0FBVixDQUFZcEQsRUFBRTZHLENBQUYsRUFBSyxLQUFMLElBQVlqSCxDQUFaLENBQWNJLEVBQUU2RyxDQUFGLEVBQUssTUFBTCxJQUFheEksQ0FBYixDQUFlLEtBQUksSUFBSWlGLElBQUUsQ0FBVixFQUFZQSxJQUFFQyxFQUFFNU4sTUFBaEIsRUFBdUIyTixHQUF2QixFQUEyQjtBQUFDckQsU0FBRXNELEVBQUVELENBQUYsQ0FBRixJQUFRdUQsQ0FBUjtBQUFVO0FBQUMsSUFBalU7QUFBa1UsRUFBcGlCLEVBQTFCLENBQStqQjJQLEtBQUt0WCxNQUFMLENBQVlpcEIsYUFBWixDQUEwQnFDLE1BQTFCLENBQWlDLFdBQWpDLEVBQTZDLEdBQTdDLEVBQWlELGtDQUFqRCxFQUFvRixrQ0FBcEYsRUFBdUgsa0NBQXZILEVBQTBKLGtDQUExSixFQUE2TCxHQUE3TCxFQUFpTSxrQ0FBak0sRUFBb08sa0NBQXBPLEVBQXVRLEVBQXZRLEVBQTBRLEVBQTFRLEVBQTZRLG1EQUE3USxFQUFrVWhVLEtBQUt0WCxNQUFMLENBQVlpcEIsYUFBWixDQUEwQnFDLE1BQTFCLENBQWlDLFdBQWpDLEVBQTZDLEdBQTdDLEVBQWlELDBDQUFqRCxFQUE0RixHQUE1RixFQUFnRyxHQUFoRyxFQUFvRyw0Q0FBcEcsRUFBaUosR0FBakosRUFBcUosMENBQXJKLEVBQWdNLDBDQUFoTSxFQUEyTyxFQUEzTyxFQUE4TyxFQUE5TyxFQUFpUCxtREFBalAsRUFBc1NoVSxLQUFLdFgsTUFBTCxDQUFZaXBCLGFBQVosQ0FBMEJxQyxNQUExQixDQUFpQyxXQUFqQyxFQUE2QyxHQUE3QyxFQUFpRCwwQ0FBakQsRUFBNEYsMENBQTVGLEVBQXVJLDBDQUF2SSxFQUFrTCw0Q0FBbEwsRUFBK04sR0FBL04sRUFBbU8sMENBQW5PLEVBQThRLDBDQUE5USxFQUF5VCxFQUF6VCxFQUE0VCxFQUE1VCxFQUErVCxtREFBL1QsRUFBb1hoVSxLQUFLdFgsTUFBTCxDQUFZaXBCLGFBQVosQ0FBMEJxQyxNQUExQixDQUFpQyxXQUFqQyxFQUE2QyxHQUE3QyxFQUFpRCxrREFBakQsRUFBb0csR0FBcEcsRUFBd0csR0FBeEcsRUFBNEcsa0RBQTVHLEVBQStKLEdBQS9KLEVBQW1LLGtEQUFuSyxFQUFzTixrREFBdE4sRUFBeVEsRUFBelEsRUFBNlFoVSxLQUFLdFgsTUFBTCxDQUFZaXBCLGFBQVosQ0FBMEJxQyxNQUExQixDQUFpQyxXQUFqQyxFQUE2QyxHQUE3QyxFQUFpRCxrREFBakQsRUFBb0csa0RBQXBHLEVBQXVKLGtEQUF2SixFQUEwTSxrREFBMU0sRUFBNlAsR0FBN1AsRUFBaVEsa0RBQWpRLEVBQW9ULGtEQUFwVCxFQUF1VyxFQUF2VyxFQUEyV2hVLEtBQUt0WCxNQUFMLENBQVlpcEIsYUFBWixDQUEwQnFDLE1BQTFCLENBQWlDLFdBQWpDLEVBQTZDLEdBQTdDLEVBQWlELDBEQUFqRCxFQUE0RywwREFBNUcsRUFBdUssMERBQXZLLEVBQWtPLDBEQUFsTyxFQUE2UixHQUE3UixFQUFpUywwREFBalMsRUFBNFYsMERBQTVWLEVBQXVaLEVBQXZaLEVBQTJaaFUsS0FBS3RYLE1BQUwsQ0FBWWlwQixhQUFaLENBQTBCcUMsTUFBMUIsQ0FBaUMsV0FBakMsRUFBNkMsR0FBN0MsRUFBaUQsa0VBQWpELEVBQW9ILEdBQXBILEVBQXdILEdBQXhILEVBQTRILGtFQUE1SCxFQUErTCxHQUEvTCxFQUFtTSxrRUFBbk0sRUFBc1Esa0VBQXRRLEVBQXlVLEVBQXpVLEVBQTZVaFUsS0FBS3RYLE1BQUwsQ0FBWWlwQixhQUFaLENBQTBCcUMsTUFBMUIsQ0FBaUMsV0FBakMsRUFBNkMsR0FBN0MsRUFBaUQsa0VBQWpELEVBQW9ILGtFQUFwSCxFQUF1TCxrRUFBdkwsRUFBMFAsa0VBQTFQLEVBQTZULEdBQTdULEVBQWlVLGtFQUFqVSxFQUFvWSxrRUFBcFksRUFBdWMsQ0FBQyxZQUFELEVBQWMsT0FBZCxFQUFzQixZQUF0QixDQUF2YyxFQUE0ZWhVLEtBQUt0WCxNQUFMLENBQVlpcEIsYUFBWixDQUEwQnFDLE1BQTFCLENBQWlDLFdBQWpDLEVBQTZDLEdBQTdDLEVBQWlELGtHQUFqRCxFQUFvSixrR0FBcEosRUFBdVAsa0dBQXZQLEVBQTBWLGtHQUExVixFQUE2YixHQUE3YixFQUFpYyxrR0FBamMsRUFBb2lCLGtHQUFwaUIsRUFBdW9CLENBQUMsWUFBRCxFQUFjLE9BQWQsQ0FBdm9CLEVBQStwQmhVLEtBQUt0WCxNQUFMLENBQVlpcEIsYUFBWixDQUEwQnFDLE1BQTFCLENBQWlDLFdBQWpDLEVBQTZDLEdBQTdDLEVBQWlELHFJQUFqRCxFQUF1TCxxSUFBdkwsRUFBNlQscUlBQTdULEVBQW1jLHFJQUFuYyxFQUF5a0IsR0FBemtCLEVBQTZrQixvSUFBN2tCLEVBQWt0QixzSUFBbHRCLEVBQXkxQixDQUFDLFlBQUQsRUFBYyxPQUFkLENBQXoxQjtBQUNubkksS0FBSXZFLFVBQVEsWUFBVTtBQUFDLE9BQUlybUIsSUFBRSxTQUFGQSxDQUFFLENBQVNjLENBQVQsRUFBV21CLENBQVgsRUFBYUgsQ0FBYixFQUFlO0FBQUMsWUFBT3JCLEVBQUVFLFNBQVNrcUIsR0FBWCxFQUFlL3BCLENBQWYsRUFBaUJtQixDQUFqQixFQUFtQkgsQ0FBbkIsQ0FBUDtBQUE2QixJQUFuRCxDQUFvRCxJQUFJM0UsSUFBRSxTQUFGQSxDQUFFLENBQVMyRCxDQUFULEVBQVdtQixDQUFYLEVBQWFILENBQWIsRUFBZTtBQUFDLFlBQU9yQixFQUFFRSxTQUFTbXFCLFNBQVgsRUFBcUJocUIsQ0FBckIsRUFBdUJtQixDQUF2QixFQUF5QkgsQ0FBekIsQ0FBUDtBQUFtQyxJQUF6RCxDQUEwRCxJQUFJcEIsSUFBRSxTQUFGQSxDQUFFLENBQVNJLENBQVQsRUFBV21CLENBQVgsRUFBYUgsQ0FBYixFQUFlO0FBQUMsWUFBT3JCLEVBQUVFLFNBQVNvcUIsR0FBWCxFQUFlanFCLENBQWYsRUFBaUJtQixDQUFqQixFQUFtQkgsQ0FBbkIsQ0FBUDtBQUE2QixJQUFuRCxDQUFvRCxJQUFJckIsSUFBRSxTQUFGQSxDQUFFLENBQVNzQixDQUFULEVBQVd0RCxDQUFYLEVBQWFrRixDQUFiLEVBQWU3QixDQUFmLEVBQWlCO0FBQUMsU0FBSUcsSUFBRXRCLFNBQVM0QixHQUFULENBQWFDLEdBQWIsQ0FBaUJ2RixLQUFqQixDQUF1QndCLENBQXZCLENBQU4sQ0FBZ0MsSUFBSStFLElBQUU3QyxTQUFTNEIsR0FBVCxDQUFhQyxHQUFiLENBQWlCdkYsS0FBakIsQ0FBdUIwRyxDQUF2QixDQUFOLENBQWdDLElBQUk3QyxJQUFFSCxTQUFTNEIsR0FBVCxDQUFhQyxHQUFiLENBQWlCdkYsS0FBakIsQ0FBdUI2RSxDQUF2QixDQUFOLENBQWdDLElBQUlELElBQUUsRUFBTixDQUFTQSxFQUFFeEwsR0FBRixHQUFNbU4sQ0FBTixDQUFRM0IsRUFBRW1wQixFQUFGLEdBQUtscUIsQ0FBTCxDQUFPZSxFQUFFb3BCLFVBQUYsR0FBYWhwQixDQUFiLENBQWUsSUFBSXlCLElBQUUzQixFQUFFZ21CLE9BQUYsQ0FBVWxtQixDQUFWLEVBQVkyQixDQUFaLEVBQWMsRUFBQ3duQixJQUFHbHFCLENBQUosRUFBZCxDQUFOLENBQTRCLE9BQU9ILFNBQVM0QixHQUFULENBQWFDLEdBQWIsQ0FBaUJiLFNBQWpCLENBQTJCK0IsQ0FBM0IsQ0FBUDtBQUFxQyxJQUFoTyxDQUFpTyxJQUFJbEQsSUFBRSxTQUFGQSxDQUFFLENBQVNNLENBQVQsRUFBV21CLENBQVgsRUFBYUgsQ0FBYixFQUFlO0FBQUMsWUFBT2pDLEVBQUVjLFNBQVNrcUIsR0FBWCxFQUFlL3BCLENBQWYsRUFBaUJtQixDQUFqQixFQUFtQkgsQ0FBbkIsQ0FBUDtBQUE2QixJQUFuRCxDQUFvRCxJQUFJZixJQUFFLFNBQUZBLENBQUUsQ0FBU0QsQ0FBVCxFQUFXbUIsQ0FBWCxFQUFhSCxDQUFiLEVBQWU7QUFBQyxZQUFPakMsRUFBRWMsU0FBU21xQixTQUFYLEVBQXFCaHFCLENBQXJCLEVBQXVCbUIsQ0FBdkIsRUFBeUJILENBQXpCLENBQVA7QUFBbUMsSUFBekQsQ0FBMEQsSUFBSS9CLElBQUUsU0FBRkEsQ0FBRSxDQUFTZSxDQUFULEVBQVdtQixDQUFYLEVBQWFILENBQWIsRUFBZTtBQUFDLFlBQU9qQyxFQUFFYyxTQUFTb3FCLEdBQVgsRUFBZWpxQixDQUFmLEVBQWlCbUIsQ0FBakIsRUFBbUJILENBQW5CLENBQVA7QUFBNkIsSUFBbkQsQ0FBb0QsSUFBSWpDLElBQUUsU0FBRkEsQ0FBRSxDQUFTZ0MsQ0FBVCxFQUFXbkQsQ0FBWCxFQUFhZ0YsQ0FBYixFQUFlNUIsQ0FBZixFQUFpQjtBQUFDLFNBQUlDLElBQUVwQixTQUFTNEIsR0FBVCxDQUFhQyxHQUFiLENBQWlCdkYsS0FBakIsQ0FBdUJ5QixDQUF2QixDQUFOLENBQWdDLElBQUlELElBQUVrQyxTQUFTNEIsR0FBVCxDQUFhQyxHQUFiLENBQWlCdkYsS0FBakIsQ0FBdUJ5RyxDQUF2QixDQUFOLENBQWdDLElBQUk1QyxJQUFFSCxTQUFTNEIsR0FBVCxDQUFhQyxHQUFiLENBQWlCdkYsS0FBakIsQ0FBdUI2RSxDQUF2QixDQUFOLENBQWdDLElBQUkwQixJQUFFM0IsRUFBRWtXLE9BQUYsQ0FBVWhXLENBQVYsRUFBWXRELENBQVosRUFBYyxFQUFDdXNCLElBQUdscUIsQ0FBSixFQUFkLENBQU4sQ0FBNEIsSUFBSW1CLElBQUV0QixTQUFTNEIsR0FBVCxDQUFhQyxHQUFiLENBQWlCdkYsS0FBakIsQ0FBdUJ1RyxFQUFFbEMsUUFBRixFQUF2QixDQUFOLENBQTJDLElBQUlxQyxJQUFFaEQsU0FBUzRCLEdBQVQsQ0FBYTBDLE1BQWIsQ0FBb0J0RCxTQUFwQixDQUE4Qk0sQ0FBOUIsQ0FBTixDQUF1QyxPQUFPMEIsQ0FBUDtBQUFTLElBQS9PLENBQWdQLElBQUlsSyxJQUFFLEVBQUMsZUFBYyxFQUFDeXhCLE1BQUtsckIsQ0FBTixFQUFRbXJCLE9BQU0zcUIsQ0FBZCxFQUFnQnVvQixRQUFPLEVBQXZCLEVBQTBCcUMsT0FBTSxFQUFoQyxFQUFmLEVBQW1ELGVBQWMsRUFBQ0YsTUFBS2xyQixDQUFOLEVBQVFtckIsT0FBTTNxQixDQUFkLEVBQWdCdW9CLFFBQU8sRUFBdkIsRUFBMEJxQyxPQUFNLEVBQWhDLEVBQWpFLEVBQXFHLGVBQWMsRUFBQ0YsTUFBS2xyQixDQUFOLEVBQVFtckIsT0FBTTNxQixDQUFkLEVBQWdCdW9CLFFBQU8sRUFBdkIsRUFBMEJxQyxPQUFNLEVBQWhDLEVBQW5ILEVBQXVKLGdCQUFlLEVBQUNGLE1BQUsvdEIsQ0FBTixFQUFRZ3VCLE9BQU1wcUIsQ0FBZCxFQUFnQmdvQixRQUFPLEVBQXZCLEVBQTBCcUMsT0FBTSxDQUFoQyxFQUF0SyxFQUF5TSxXQUFVLEVBQUNGLE1BQUt4cUIsQ0FBTixFQUFReXFCLE9BQU1wckIsQ0FBZCxFQUFnQmdwQixRQUFPLENBQXZCLEVBQXlCcUMsT0FBTSxDQUEvQixFQUFuTixFQUFOLENBQTRQLElBQUkvcUIsSUFBRSxTQUFGQSxDQUFFLENBQVNTLENBQVQsRUFBVztBQUFDLFlBQU9ySCxFQUFFcUgsQ0FBRixFQUFLLE1BQUwsQ0FBUDtBQUFvQixJQUF0QyxDQUF1QyxJQUFJd0IsSUFBRSxTQUFGQSxDQUFFLENBQVN4QixDQUFULEVBQVc7QUFBQyxTQUFJbUIsSUFBRXRCLFNBQVNDLEdBQVQsQ0FBYVksU0FBYixDQUF1QmEsTUFBdkIsQ0FBOEJ2QixDQUE5QixDQUFOLENBQXVDLElBQUlnQixJQUFFbkIsU0FBUzRCLEdBQVQsQ0FBYUMsR0FBYixDQUFpQmIsU0FBakIsQ0FBMkJNLENBQTNCLENBQU4sQ0FBb0MsT0FBT0gsQ0FBUDtBQUFTLElBQXRHLENBQXVHLElBQUk3RCxJQUFFLFNBQUZBLENBQUUsQ0FBU3lGLENBQVQsRUFBVztBQUFDLFNBQUlGLElBQUUsRUFBTixDQUFTLElBQUkxQixJQUFFNEIsRUFBRW1YLEtBQUYsQ0FBUSxJQUFJRCxNQUFKLENBQVcsa0NBQVgsRUFBOEMsR0FBOUMsQ0FBUixDQUFOLENBQWtFLElBQUc5WSxDQUFILEVBQUs7QUFBQzBCLFNBQUU2bkIsTUFBRixHQUFTdnBCLEVBQUUsQ0FBRixDQUFULENBQWMwQixFQUFFOG5CLE1BQUYsR0FBU3hwQixFQUFFLENBQUYsQ0FBVDtBQUFjLFVBQUloQixJQUFFNEMsRUFBRW1YLEtBQUYsQ0FBUSxJQUFJRCxNQUFKLENBQVcsc0NBQVgsQ0FBUixDQUFOLENBQWtFLElBQUc5WixDQUFILEVBQUs7QUFBQzBDLFNBQUU3SixJQUFGLEdBQU9tSCxFQUFFLENBQUYsQ0FBUDtBQUFZLFVBQUk2QyxJQUFFLENBQUMsQ0FBUCxDQUFTLElBQUlsRixJQUFFLENBQU4sQ0FBUSxJQUFHaUYsRUFBRTVOLE9BQUYsQ0FBVSxVQUFWLEtBQXVCLENBQUMsQ0FBM0IsRUFBNkI7QUFBQzZOLFdBQUVELEVBQUU1TixPQUFGLENBQVUsVUFBVixDQUFGLENBQXdCMkksSUFBRSxDQUFGO0FBQUksVUFBR2lGLEVBQUU1TixPQUFGLENBQVUsTUFBVixLQUFtQixDQUFDLENBQXZCLEVBQXlCO0FBQUM2TixXQUFFRCxFQUFFNU4sT0FBRixDQUFVLE1BQVYsQ0FBRixDQUFvQjJJLElBQUUsQ0FBRjtBQUFJLFVBQUlvRCxJQUFFNkIsRUFBRTVOLE9BQUYsQ0FBVSxVQUFWLENBQU4sQ0FBNEIsSUFBRzZOLEtBQUcsQ0FBQyxDQUFKLElBQU85QixLQUFHLENBQUMsQ0FBZCxFQUFnQjtBQUFDLFdBQUlJLElBQUV5QixFQUFFeUUsU0FBRixDQUFZeEUsSUFBRWxGLElBQUUsQ0FBaEIsRUFBa0JvRCxJQUFFcEQsQ0FBcEIsQ0FBTixDQUE2QndELElBQUVBLEVBQUU2WSxPQUFGLENBQVUsTUFBVixFQUFpQixFQUFqQixDQUFGLENBQXVCdFgsRUFBRXBULElBQUYsR0FBTzZSLENBQVA7QUFBUyxhQUFPdUIsQ0FBUDtBQUFTLElBQW5jLENBQW9jLElBQUlqRCxJQUFFLFNBQUZBLENBQUUsQ0FBU3VCLENBQVQsRUFBV3BELENBQVgsRUFBYW9DLENBQWIsRUFBZTtBQUFDLFNBQUk0QyxJQUFFNUMsRUFBRXFILFNBQUYsQ0FBWSxDQUFaLEVBQWMsRUFBZCxDQUFOLENBQXdCLElBQUl0RyxJQUFFbEIsU0FBUzRCLEdBQVQsQ0FBYUMsR0FBYixDQUFpQnZGLEtBQWpCLENBQXVCeUcsQ0FBdkIsQ0FBTixDQUFnQyxJQUFJekIsSUFBRXRCLFNBQVM0QixHQUFULENBQWFPLElBQWIsQ0FBa0I3RixLQUFsQixDQUF3QnlCLENBQXhCLENBQU4sQ0FBaUMsSUFBSWlGLElBQUVsSyxFQUFFcUksQ0FBRixFQUFLLFFBQUwsSUFBZXJJLEVBQUVxSSxDQUFGLEVBQUssT0FBTCxDQUFyQixDQUFtQyxJQUFJckQsSUFBRSxFQUFOLENBQVMsSUFBSStFLElBQUUsSUFBTixDQUFXLFNBQU87QUFBQyxXQUFJekIsSUFBRXBCLFNBQVMrRCxJQUFULENBQWM0ZSxHQUFkLENBQWtCamlCLE1BQWxCLEVBQU4sQ0FBaUMsSUFBR21DLEtBQUcsSUFBTixFQUFXO0FBQUN6QixXQUFFcUMsTUFBRixDQUFTWixDQUFUO0FBQVksVUFBRVksTUFBRixDQUFTbkMsQ0FBVCxFQUFZRixFQUFFcUMsTUFBRixDQUFTdkMsQ0FBVCxFQUFZMkIsSUFBRXpCLEVBQUVzQyxRQUFGLEVBQUYsQ0FBZTVGLElBQUVBLElBQUVrQyxTQUFTNEIsR0FBVCxDQUFhQyxHQUFiLENBQWlCYixTQUFqQixDQUEyQjZCLENBQTNCLENBQUosQ0FBa0MsSUFBRy9FLEVBQUUxSSxNQUFGLElBQVU0TixJQUFFLENBQWYsRUFBaUI7QUFBQztBQUFNO0FBQUMsVUFBSXFELElBQUUsRUFBTixDQUFTQSxFQUFFdWtCLE1BQUYsR0FBUzlzQixFQUFFMUgsTUFBRixDQUFTLENBQVQsRUFBVzBDLEVBQUVxSSxDQUFGLEVBQUssUUFBTCxJQUFlLENBQTFCLENBQVQsQ0FBc0NrRixFQUFFd2tCLEtBQUYsR0FBUS9zQixFQUFFMUgsTUFBRixDQUFTMEMsRUFBRXFJLENBQUYsRUFBSyxRQUFMLElBQWUsQ0FBeEIsRUFBMEJySSxFQUFFcUksQ0FBRixFQUFLLE9BQUwsSUFBYyxDQUF4QyxDQUFSLENBQW1ELE9BQU9rRixDQUFQO0FBQVMsSUFBcGIsQ0FBcWIsSUFBSTVHLElBQUUsU0FBRkEsQ0FBRSxDQUFTVSxDQUFULEVBQVc0QyxDQUFYLEVBQWF6QixDQUFiLEVBQWV1QixDQUFmLEVBQWlCO0FBQUMsU0FBSXpCLElBQUVwQixTQUFTNEIsR0FBVCxDQUFhMEMsTUFBYixDQUFvQmhJLEtBQXBCLENBQTBCNkQsQ0FBMUIsQ0FBTixDQUFtQyxJQUFJZ0IsSUFBRW5CLFNBQVM0QixHQUFULENBQWFDLEdBQWIsQ0FBaUJiLFNBQWpCLENBQTJCSSxDQUEzQixDQUFOLENBQW9DLElBQUk0QixJQUFFbEssRUFBRWlLLENBQUYsRUFBSyxNQUFMLENBQU4sQ0FBbUIsSUFBSTdCLElBQUU4QixFQUFFN0IsQ0FBRixFQUFJRyxDQUFKLEVBQU11QixDQUFOLENBQU4sQ0FBZSxPQUFPM0IsQ0FBUDtBQUFTLElBQTFJLENBQTJJLElBQUkvQixJQUFFLFNBQUZBLENBQUUsQ0FBU2dCLENBQVQsRUFBV2lCLENBQVgsRUFBYUQsQ0FBYixFQUFlNkIsQ0FBZixFQUFpQjtBQUFDLFNBQUkxQixJQUFFeEksRUFBRXNJLENBQUYsRUFBSyxPQUFMLENBQU4sQ0FBb0IsSUFBSUYsSUFBRUksRUFBRW5CLENBQUYsRUFBSWdCLENBQUosRUFBTTZCLENBQU4sQ0FBTixDQUFlLE9BQU85QixDQUFQO0FBQVMsSUFBcEUsQ0FBcUUsT0FBTSxFQUFDNHBCLFNBQVEsT0FBVCxFQUFpQkMsZUFBYyx1QkFBUzVxQixDQUFULEVBQVc7QUFBQyxjQUFPN0MsRUFBRTZDLENBQUYsQ0FBUDtBQUFZLE1BQXZELEVBQXdENnFCLHNDQUFxQyw4Q0FBUzdwQixDQUFULEVBQVdoQixDQUFYLEVBQWFtQixDQUFiLEVBQWU7QUFBQyxjQUFPMUIsRUFBRXVCLENBQUYsRUFBSWhCLENBQUosRUFBTW1CLENBQU4sQ0FBUDtBQUFnQixNQUE3SCxFQUE4SDJwQixlQUFjLHVCQUFTOXFCLENBQVQsRUFBV21CLENBQVgsRUFBYUgsQ0FBYixFQUFlQyxDQUFmLEVBQWlCO0FBQUMsY0FBTzNCLEVBQUVVLENBQUYsRUFBSW1CLENBQUosRUFBTUgsQ0FBTixFQUFRQyxDQUFSLENBQVA7QUFBa0IsTUFBaEwsRUFBaUw4cEIsb0JBQW1CLDRCQUFTbnRCLENBQVQsRUFBV0QsQ0FBWCxFQUFhO0FBQUMsV0FBSXFELElBQUU3RCxFQUFFUyxDQUFGLENBQU4sQ0FBVyxJQUFJbUQsSUFBRUMsRUFBRW5JLElBQVIsQ0FBYSxJQUFJc0ksSUFBRUgsRUFBRXVwQixNQUFSLENBQWUsSUFBSXZxQixJQUFFZ0IsRUFBRXdwQixNQUFSLENBQWUsSUFBSXZwQixJQUFFRCxFQUFFMVIsSUFBUixDQUFhLElBQUlvVCxJQUFFakQsRUFBRTBCLENBQUYsRUFBSXhELENBQUosRUFBTXFDLENBQU4sQ0FBTixDQUFlLElBQUk0QyxJQUFFRixFQUFFK25CLE1BQVIsQ0FBZSxJQUFJNW5CLElBQUV2RCxFQUFFMkIsQ0FBRixFQUFJRSxDQUFKLEVBQU15QixDQUFOLEVBQVE1QyxDQUFSLENBQU4sQ0FBaUIsT0FBTzZDLENBQVA7QUFBUyxNQUE3VSxFQUE4VW1vQixtQ0FBa0MsMkNBQVNydEIsQ0FBVCxFQUFXc0QsQ0FBWCxFQUFha0YsQ0FBYixFQUFlcEYsQ0FBZixFQUFpQkksQ0FBakIsRUFBbUI7QUFBQyxXQUFJbkIsSUFBRSxFQUFOLENBQVMsSUFBRyxPQUFPZSxDQUFQLElBQVUsV0FBVixJQUF1QkEsS0FBRyxJQUE3QixFQUFrQztBQUFDQSxhQUFFLGFBQUY7QUFBZ0IsWUFBRyxPQUFPcEksRUFBRW9JLENBQUYsQ0FBUCxJQUFhLFdBQWhCLEVBQTRCO0FBQUMsZUFBSyxvQ0FBa0NBLENBQXZDO0FBQXlDLFlBQUcsT0FBT0ksQ0FBUCxJQUFVLFdBQVYsSUFBdUJBLEtBQUcsSUFBN0IsRUFBa0M7QUFBQyxhQUFJeUIsSUFBRWpLLEVBQUVvSSxDQUFGLEVBQUssT0FBTCxDQUFOLENBQW9CLElBQUk4QixJQUFFckIsRUFBRW9CLENBQUYsQ0FBTixDQUFXekIsSUFBRTBCLEVBQUVvb0IsV0FBRixFQUFGO0FBQWtCLFlBQUkva0IsSUFBRXpHLEVBQUVzQixDQUFGLEVBQUlvRixDQUFKLEVBQU1oRixDQUFOLENBQU4sQ0FBZSxJQUFJdkQsSUFBRXNJLEVBQUV1a0IsTUFBUixDQUFlLElBQUkvbkIsSUFBRTFELEVBQUVpQyxDQUFGLEVBQUlGLENBQUosRUFBTW5ELENBQU4sRUFBUXVELENBQVIsQ0FBTixDQUFpQixJQUFJSCxJQUFFMEIsRUFBRXNYLE9BQUYsQ0FBVSxVQUFWLEVBQXFCLFFBQXJCLENBQU4sQ0FBcUMsSUFBSWhhLElBQUUsZ0JBQWNyQyxDQUFkLEdBQWdCLHVCQUF0QixDQUE4Q3FDLEtBQUcsNEJBQUgsQ0FBZ0NBLEtBQUcsZUFBYWUsQ0FBYixHQUFlLEdBQWYsR0FBbUJJLENBQW5CLEdBQXFCLE1BQXhCLENBQStCbkIsS0FBRyxNQUFILENBQVVBLEtBQUdnQixDQUFILENBQUtoQixLQUFHLGtCQUFnQnJDLENBQWhCLEdBQWtCLHVCQUFyQixDQUE2QyxPQUFPcUMsQ0FBUDtBQUFTLE1BQWgyQixFQUFpMkJrckIsMEJBQXlCLGtDQUFTdHRCLENBQVQsRUFBVztBQUFDLFdBQUl5SSxJQUFFOFQsT0FBTixDQUFjLElBQUlqVSxJQUFFRyxFQUFFc1UsV0FBUixDQUFvQixJQUFJalksSUFBRTJELEVBQUVtVSxJQUFSLENBQWEsSUFBSXpaLElBQUUsRUFBTixDQUFTLElBQUlJLElBQUUrRSxFQUFFdEksQ0FBRixFQUFJLENBQUosQ0FBTixDQUFhLElBQUd1RCxFQUFFbE0sTUFBRixJQUFVLENBQWIsRUFBZTtBQUFDLGVBQUssK0NBQTZDa00sRUFBRWxNLE1BQXBEO0FBQTJELFVBQUVrMUIsVUFBRixHQUFhem5CLEVBQUU5RSxDQUFGLEVBQUl1RCxFQUFFLENBQUYsQ0FBSixDQUFiLENBQXVCLElBQUlnRixJQUFFRCxFQUFFdEksQ0FBRixFQUFJdUQsRUFBRSxDQUFGLENBQUosQ0FBTixDQUFnQixJQUFHZ0YsRUFBRWxSLE1BQUYsSUFBVSxDQUFiLEVBQWU7QUFBQyxlQUFLLGlEQUErQ2tSLEVBQUVsUixNQUF0RDtBQUE2RCxZQUFHeU4sRUFBRTlFLENBQUYsRUFBSXVJLEVBQUUsQ0FBRixDQUFKLEtBQVcsb0JBQWQsRUFBbUM7QUFBQyxlQUFLLCtCQUFMO0FBQXFDLFlBQUluRyxJQUFFa0csRUFBRXRJLENBQUYsRUFBSXVJLEVBQUUsQ0FBRixDQUFKLENBQU4sQ0FBZ0IsSUFBR0EsRUFBRWxSLE1BQUYsSUFBVSxDQUFiLEVBQWU7QUFBQyxlQUFLLG1EQUFpRCtLLEVBQUUvSyxNQUF4RDtBQUErRCxZQUFJK0wsSUFBRWtGLEVBQUV0SSxDQUFGLEVBQUlvQyxFQUFFLENBQUYsQ0FBSixDQUFOLENBQWdCLElBQUdnQixFQUFFL0wsTUFBRixJQUFVLENBQWIsRUFBZTtBQUFDLGVBQUsscURBQW1EK0wsRUFBRS9MLE1BQTFEO0FBQWlFLFlBQUd5TixFQUFFOUUsQ0FBRixFQUFJb0QsRUFBRSxDQUFGLENBQUosS0FBVyxrQkFBZCxFQUFpQztBQUFDLGVBQUssOEJBQUw7QUFBb0MsVUFBRW1xQixtQkFBRixHQUFzQixXQUF0QixDQUFrQ3BxQixFQUFFcXFCLGtCQUFGLEdBQXFCMW9CLEVBQUU5RSxDQUFGLEVBQUlvRCxFQUFFLENBQUYsQ0FBSixDQUFyQixDQUErQixJQUFJQyxJQUFFaUYsRUFBRXRJLENBQUYsRUFBSW9DLEVBQUUsQ0FBRixDQUFKLENBQU4sQ0FBZ0IsSUFBR2lCLEVBQUVoTSxNQUFGLElBQVUsQ0FBYixFQUFlO0FBQUMsZUFBSyxxREFBbURnTSxFQUFFaE0sTUFBMUQ7QUFBaUUsWUFBR3lOLEVBQUU5RSxDQUFGLEVBQUlxRCxFQUFFLENBQUYsQ0FBSixLQUFXLG9CQUFkLEVBQW1DO0FBQUMsZUFBSyxnQ0FBTDtBQUFzQyxZQUFJdEQsSUFBRXVJLEVBQUV0SSxDQUFGLEVBQUlxRCxFQUFFLENBQUYsQ0FBSixDQUFOLENBQWdCLElBQUd0RCxFQUFFMUksTUFBRixHQUFTLENBQVosRUFBYztBQUFDLGVBQUssc0RBQW9EMEksRUFBRTFJLE1BQTNEO0FBQWtFLFVBQUVvMkIsVUFBRixHQUFhM29CLEVBQUU5RSxDQUFGLEVBQUlELEVBQUUsQ0FBRixDQUFKLENBQWIsQ0FBdUIsSUFBSWtGLElBQUVILEVBQUU5RSxDQUFGLEVBQUlELEVBQUUsQ0FBRixDQUFKLENBQU4sQ0FBZ0IsSUFBRztBQUFDb0QsV0FBRXVxQixVQUFGLEdBQWFseEIsU0FBU3lJLENBQVQsRUFBVyxFQUFYLENBQWI7QUFBNEIsUUFBaEMsQ0FBZ0MsT0FBTUQsQ0FBTixFQUFRO0FBQUMsZUFBSyxrQ0FBZ0NDLENBQXJDO0FBQXVDLGVBQU85QixDQUFQO0FBQVMsTUFBdDZELEVBQXU2RHdxQiwwQkFBeUIsa0NBQVMxb0IsQ0FBVCxFQUFXN0MsQ0FBWCxFQUFhO0FBQUMsV0FBSWUsSUFBRWxCLFNBQVM0QixHQUFULENBQWFDLEdBQWIsQ0FBaUJ2RixLQUFqQixDQUF1QjBHLEVBQUV3b0IsVUFBekIsQ0FBTixDQUEyQyxJQUFJcnFCLElBQUU2QixFQUFFeW9CLFVBQVIsQ0FBbUIsSUFBSXJxQixJQUFFcEIsU0FBUzJyQixNQUFULENBQWdCeHJCLENBQWhCLEVBQWtCZSxDQUFsQixFQUFvQixFQUFDMHFCLFNBQVEsTUFBSSxFQUFiLEVBQWdCQyxZQUFXMXFCLENBQTNCLEVBQXBCLENBQU4sQ0FBeUQsSUFBSUcsSUFBRXRCLFNBQVM0QixHQUFULENBQWFDLEdBQWIsQ0FBaUJiLFNBQWpCLENBQTJCSSxDQUEzQixDQUFOLENBQW9DLE9BQU9FLENBQVA7QUFBUyxNQUFsbkUsRUFBbW5Fd3FCLHdDQUF1QyxnREFBU2h1QixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLFdBQUl1RCxJQUFFc2MsU0FBUzlmLENBQVQsRUFBVyx1QkFBWCxDQUFOLENBQTBDLElBQUlxQyxJQUFFLEtBQUtrckIsd0JBQUwsQ0FBOEIvcEIsQ0FBOUIsQ0FBTixDQUF1QyxJQUFJMEIsSUFBRTBpQixRQUFRZ0csd0JBQVIsQ0FBaUN2ckIsQ0FBakMsRUFBbUNwQyxDQUFuQyxDQUFOLENBQTRDLElBQUlnRixJQUFFLEVBQU4sQ0FBU0EsRUFBRXVuQixVQUFGLEdBQWF0cUIsU0FBUzRCLEdBQVQsQ0FBYUMsR0FBYixDQUFpQnZGLEtBQWpCLENBQXVCNkQsRUFBRW1xQixVQUF6QixDQUFiLENBQWtELElBQUlwcEIsSUFBRWxCLFNBQVM0QixHQUFULENBQWFDLEdBQWIsQ0FBaUJ2RixLQUFqQixDQUF1QjBHLENBQXZCLENBQU4sQ0FBZ0MsSUFBSTVCLElBQUVwQixTQUFTNEIsR0FBVCxDQUFhQyxHQUFiLENBQWlCdkYsS0FBakIsQ0FBdUI2RCxFQUFFb3JCLGtCQUF6QixDQUFOLENBQW1ELElBQUkxb0IsSUFBRTdDLFNBQVNtcUIsU0FBVCxDQUFtQi9DLE9BQW5CLENBQTJCcmtCLENBQTNCLEVBQTZCN0IsQ0FBN0IsRUFBK0IsRUFBQ21wQixJQUFHanBCLENBQUosRUFBL0IsQ0FBTixDQUE2QyxJQUFJRCxJQUFFbkIsU0FBUzRCLEdBQVQsQ0FBYUMsR0FBYixDQUFpQmIsU0FBakIsQ0FBMkI2QixDQUEzQixDQUFOLENBQW9DLE9BQU8xQixDQUFQO0FBQVMsTUFBN2dGLEVBQThnRjRxQiw2QkFBNEIscUNBQVMzcUIsQ0FBVCxFQUFXRCxDQUFYLEVBQWE7QUFBQyxXQUFJaEIsSUFBRSxLQUFLMnJCLHNDQUFMLENBQTRDMXFCLENBQTVDLEVBQThDRCxDQUE5QyxDQUFOLENBQXVELElBQUlHLElBQUUsS0FBSzBxQiw4QkFBTCxDQUFvQzdyQixDQUFwQyxDQUFOLENBQTZDLE9BQU9tQixDQUFQO0FBQVMsTUFBcnFGLEVBQXNxRjJxQiwyQkFBMEIsbUNBQVM3cUIsQ0FBVCxFQUFXO0FBQUMsV0FBSTJCLElBQUV1WCxPQUFOLENBQWMsSUFBSXRYLElBQUVELEVBQUUrWCxXQUFSLENBQW9CLElBQUk1WixJQUFFNkIsRUFBRTRYLElBQVIsQ0FBYSxJQUFJeFosSUFBRSxFQUFOLENBQVNBLEVBQUUrcUIsUUFBRixHQUFXLElBQVgsQ0FBZ0IsSUFBRzlxQixFQUFFaEwsTUFBRixDQUFTLENBQVQsRUFBVyxDQUFYLEtBQWUsSUFBbEIsRUFBdUI7QUFBQyxlQUFLLDZDQUFMO0FBQW1ELFlBQUlrTCxJQUFFMEIsRUFBRTVCLENBQUYsRUFBSSxDQUFKLENBQU4sQ0FBYSxJQUFHRSxFQUFFbE0sTUFBRixJQUFVLENBQWIsRUFBZTtBQUFDLGVBQUssNkNBQUw7QUFBbUQsWUFBR2dNLEVBQUVoTCxNQUFGLENBQVNrTCxFQUFFLENBQUYsQ0FBVCxFQUFjLENBQWQsS0FBa0IsSUFBckIsRUFBMEI7QUFBQyxlQUFLLHVDQUFMO0FBQTZDLFlBQUluQixJQUFFNkMsRUFBRTVCLENBQUYsRUFBSUUsRUFBRSxDQUFGLENBQUosQ0FBTixDQUFnQixJQUFHbkIsRUFBRS9LLE1BQUYsSUFBVSxDQUFiLEVBQWU7QUFBQyxlQUFLLHVDQUFMO0FBQTZDLFlBQUdnTSxFQUFFaEwsTUFBRixDQUFTK0osRUFBRSxDQUFGLENBQVQsRUFBYyxDQUFkLEtBQWtCLElBQXJCLEVBQTBCO0FBQUMsZUFBSyx1Q0FBTDtBQUE2QyxVQUFFZ3NCLE1BQUYsR0FBU2pyQixFQUFFRSxDQUFGLEVBQUlqQixFQUFFLENBQUYsQ0FBSixDQUFULENBQW1CLElBQUdpQixFQUFFaEwsTUFBRixDQUFTK0osRUFBRSxDQUFGLENBQVQsRUFBYyxDQUFkLEtBQWtCLElBQXJCLEVBQTBCO0FBQUNnQixXQUFFK3FCLFFBQUYsR0FBV2hyQixFQUFFRSxDQUFGLEVBQUlqQixFQUFFLENBQUYsQ0FBSixDQUFYO0FBQXFCLFlBQUdpQixFQUFFaEwsTUFBRixDQUFTa0wsRUFBRSxDQUFGLENBQVQsRUFBYyxDQUFkLEtBQWtCLElBQXJCLEVBQTBCO0FBQUMsZUFBSyx1Q0FBTDtBQUE2QyxVQUFFOHFCLE1BQUYsR0FBU3JwQixFQUFFMlgsT0FBRixDQUFVdFosQ0FBVixFQUFZRSxFQUFFLENBQUYsQ0FBWixDQUFULENBQTJCLE9BQU9ILENBQVA7QUFBUyxNQUEzekcsRUFBNHpHa3JCLGdDQUErQix3Q0FBU2xyQixDQUFULEVBQVc7QUFBQyxXQUFJaEIsSUFBRXlkLFNBQVN6YyxDQUFULEVBQVcsYUFBWCxDQUFOLENBQWdDLElBQUlHLElBQUUsS0FBSzBxQiw4QkFBTCxDQUFvQzdyQixDQUFwQyxDQUFOLENBQTZDLE9BQU9tQixDQUFQO0FBQVMsTUFBNzdHLEVBQTg3RzBxQixnQ0FBK0Isd0NBQVM3ckIsQ0FBVCxFQUFXO0FBQUMsV0FBSWdCLElBQUUsS0FBSzhxQix5QkFBTCxDQUErQjlyQixDQUEvQixDQUFOLENBQXdDLElBQUltQixDQUFKLENBQU0sSUFBR0gsRUFBRWdyQixNQUFGLElBQVUsb0JBQWIsRUFBa0M7QUFBQzdxQixhQUFFLElBQUlrVixNQUFKLEVBQUY7QUFBZSxRQUFsRCxNQUFzRDtBQUFDLGFBQUdyVixFQUFFZ3JCLE1BQUYsSUFBVSxnQkFBYixFQUE4QjtBQUFDN3FCLGVBQUUsSUFBSTJVLEtBQUt0WCxNQUFMLENBQVk0bkIsR0FBaEIsRUFBRjtBQUF3QixVQUF2RCxNQUEyRDtBQUFDLGVBQUdwbEIsRUFBRWdyQixNQUFGLElBQVUsZ0JBQWIsRUFBOEI7QUFBQzdxQixpQkFBRSxJQUFJMlUsS0FBS3RYLE1BQUwsQ0FBWXNuQixLQUFoQixFQUFGO0FBQTBCLFlBQXpELE1BQTZEO0FBQUMsbUJBQUssbUNBQUw7QUFBeUM7QUFBQztBQUFDLFVBQUVtRCxrQkFBRixDQUFxQmpwQixDQUFyQixFQUF3QixPQUFPbUIsQ0FBUDtBQUFTLE1BQXB4SCxFQUFxeEhnckIsMkJBQTBCLG1DQUFTbnJCLENBQVQsRUFBVztBQUFDLFdBQUloQixDQUFKLENBQU0sSUFBSW1CLElBQUVnWixRQUFRWSxVQUFSLENBQW1CL1osQ0FBbkIsRUFBcUIsQ0FBckIsRUFBdUIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUF2QixFQUE2QixJQUE3QixDQUFOLENBQXlDLElBQUdHLE1BQUksb0JBQVAsRUFBNEI7QUFBQ25CLGFBQUUsSUFBSXFXLE1BQUosRUFBRjtBQUFlLFFBQTVDLE1BQWdEO0FBQUMsYUFBR2xWLE1BQUksZ0JBQVAsRUFBd0I7QUFBQ25CLGVBQUUsSUFBSThWLEtBQUt0WCxNQUFMLENBQVk0bkIsR0FBaEIsRUFBRjtBQUF3QixVQUFqRCxNQUFxRDtBQUFDLGVBQUdqbEIsTUFBSSxnQkFBUCxFQUF3QjtBQUFDbkIsaUJBQUUsSUFBSThWLEtBQUt0WCxNQUFMLENBQVlzbkIsS0FBaEIsRUFBRjtBQUEwQixZQUFuRCxNQUF1RDtBQUFDLG1CQUFLLG1DQUFMO0FBQXlDO0FBQUM7QUFBQyxVQUFFb0Qsa0JBQUYsQ0FBcUJsb0IsQ0FBckIsRUFBd0IsT0FBT2hCLENBQVA7QUFBUyxNQUFybEksRUFBc2xJb3NCLHlCQUF3QixpQ0FBU2pyQixDQUFULEVBQVc7QUFBQyxXQUFJMEIsSUFBRXNYLE9BQU4sQ0FBYyxJQUFJcFosSUFBRThCLEVBQUU4WCxXQUFSLENBQW9CLElBQUkxWixJQUFFNEIsRUFBRTJYLElBQVIsQ0FBYSxJQUFJeGEsSUFBRSxFQUFOLENBQVMsSUFBR21CLEVBQUVsTCxNQUFGLENBQVMsQ0FBVCxFQUFXLENBQVgsS0FBZSxJQUFsQixFQUF1QjtBQUFDLGVBQUssNkJBQUw7QUFBbUMsWUFBSStLLElBQUVELEVBQUVJLENBQUYsRUFBSSxDQUFKLENBQU4sQ0FBYSxJQUFHSCxFQUFFL0wsTUFBRixJQUFVLENBQWIsRUFBZTtBQUFDLGVBQUssNkJBQUw7QUFBbUMsWUFBR2tNLEVBQUVsTCxNQUFGLENBQVMrSyxFQUFFLENBQUYsQ0FBVCxFQUFjLENBQWQsS0FBa0IsSUFBckIsRUFBMEI7QUFBQyxlQUFLLDZCQUFMO0FBQW1DLFVBQUU3RCxDQUFGLEdBQUk4RCxFQUFFRSxDQUFGLEVBQUlILEVBQUUsQ0FBRixDQUFKLENBQUosQ0FBYyxJQUFHRyxFQUFFbEwsTUFBRixDQUFTK0ssRUFBRSxDQUFGLENBQVQsRUFBYyxDQUFkLEtBQWtCLElBQXJCLEVBQTBCO0FBQUMsZUFBSyw2QkFBTDtBQUFtQyxVQUFFM0UsQ0FBRixHQUFJNEUsRUFBRUUsQ0FBRixFQUFJSCxFQUFFLENBQUYsQ0FBSixDQUFKLENBQWMsT0FBT2hCLENBQVA7QUFBUyxNQUE5OEksRUFBKzhJcXNCLHFCQUFvQiw2QkFBU3RyQixDQUFULEVBQVc7QUFBQyxXQUFJNkIsSUFBRXVYLE9BQU4sQ0FBYyxJQUFJdFgsSUFBRUQsRUFBRStYLFdBQVIsQ0FBb0IsSUFBSTFaLElBQUUyQixFQUFFNFgsSUFBUixDQUFhLElBQUl4WixJQUFFLEVBQU4sQ0FBU0EsRUFBRStxQixRQUFGLEdBQVcsSUFBWCxDQUFnQixJQUFJNXFCLElBQUUwQixFQUFFOUIsQ0FBRixFQUFJLENBQUosQ0FBTixDQUFhLElBQUdJLEVBQUVsTSxNQUFGLElBQVUsQ0FBYixFQUFlO0FBQUMsZUFBSyw4Q0FBNENrTSxFQUFFbE0sTUFBbkQ7QUFBMEQsWUFBSXlOLElBQUV2QixFQUFFLENBQUYsQ0FBTixDQUFXLElBQUdKLEVBQUU5SyxNQUFGLENBQVN5TSxDQUFULEVBQVcsQ0FBWCxLQUFlLElBQWxCLEVBQXVCO0FBQUMsZUFBSyxzQ0FBTDtBQUE0QyxZQUFJMUMsSUFBRTZDLEVBQUU5QixDQUFGLEVBQUkyQixDQUFKLENBQU4sQ0FBYSxJQUFHMUMsRUFBRS9LLE1BQUYsSUFBVSxDQUFiLEVBQWU7QUFBQyxlQUFLLHNDQUFMO0FBQTRDLFlBQUc4TCxFQUFFOUssTUFBRixDQUFTK0osRUFBRSxDQUFGLENBQVQsRUFBYyxDQUFkLEtBQWtCLElBQXJCLEVBQTBCO0FBQUMsZUFBSyxzQ0FBTDtBQUE0QyxVQUFFZ3NCLE1BQUYsR0FBUy9xQixFQUFFRixDQUFGLEVBQUlmLEVBQUUsQ0FBRixDQUFKLENBQVQsQ0FBbUIsSUFBR2UsRUFBRTlLLE1BQUYsQ0FBUytKLEVBQUUsQ0FBRixDQUFULEVBQWMsQ0FBZCxLQUFrQixJQUFyQixFQUEwQjtBQUFDZ0IsV0FBRStxQixRQUFGLEdBQVc5cUIsRUFBRUYsQ0FBRixFQUFJZixFQUFFLENBQUYsQ0FBSixDQUFYO0FBQXFCLFFBQWhELE1BQW9EO0FBQUMsYUFBR2UsRUFBRTlLLE1BQUYsQ0FBUytKLEVBQUUsQ0FBRixDQUFULEVBQWMsQ0FBZCxLQUFrQixJQUFyQixFQUEwQjtBQUFDZ0IsYUFBRStxQixRQUFGLEdBQVcsRUFBWCxDQUFjL3FCLEVBQUUrcUIsUUFBRixDQUFXL3JCLENBQVgsR0FBYTRDLEVBQUVtWSxVQUFGLENBQWFoYSxDQUFiLEVBQWVmLEVBQUUsQ0FBRixDQUFmLEVBQW9CLENBQUMsQ0FBRCxDQUFwQixFQUF3QixJQUF4QixDQUFiLENBQTJDZ0IsRUFBRStxQixRQUFGLENBQVcvcUIsQ0FBWCxHQUFhNEIsRUFBRW1ZLFVBQUYsQ0FBYWhhLENBQWIsRUFBZWYsRUFBRSxDQUFGLENBQWYsRUFBb0IsQ0FBQyxDQUFELENBQXBCLEVBQXdCLElBQXhCLENBQWIsQ0FBMkNnQixFQUFFK3FCLFFBQUYsQ0FBV2h0QixDQUFYLEdBQWE2RCxFQUFFbVksVUFBRixDQUFhaGEsQ0FBYixFQUFlZixFQUFFLENBQUYsQ0FBZixFQUFvQixDQUFDLENBQUQsQ0FBcEIsRUFBd0IsSUFBeEIsQ0FBYjtBQUEyQztBQUFDLFlBQUdlLEVBQUU5SyxNQUFGLENBQVNrTCxFQUFFLENBQUYsQ0FBVCxFQUFjLENBQWQsS0FBa0IsSUFBckIsRUFBMEI7QUFBQyxlQUFLLHNDQUFMO0FBQTRDLFVBQUU1TCxHQUFGLEdBQU0wTCxFQUFFRixDQUFGLEVBQUlJLEVBQUUsQ0FBRixDQUFKLEVBQVVsTCxNQUFWLENBQWlCLENBQWpCLENBQU4sQ0FBMEIsT0FBTytLLENBQVA7QUFBUyxNQUExc0ssRUFBTjtBQUFtdEssRUFBdDhPLEVBQVosQ0FBcTlPdWtCLFFBQVFsb0IsTUFBUixHQUFlLFVBQVNxQyxDQUFULEVBQVdDLENBQVgsRUFBYXhDLENBQWIsRUFBZTtBQUFDLE9BQUk2SCxJQUFFbVYsT0FBTjtBQUFBLE9BQWM1VSxJQUFFUCxFQUFFMlYsV0FBbEI7QUFBQSxPQUE4Qi9YLElBQUVvQyxFQUFFd1YsSUFBbEM7QUFBQSxPQUF1Q3RiLElBQUU4RixFQUFFK1YsVUFBM0M7QUFBQSxPQUFzRHhiLElBQUV1VyxLQUFLdFgsTUFBN0Q7QUFBQSxPQUFvRTdGLElBQUU0RyxFQUFFdW1CLEtBQXhFO0FBQUEsT0FBOEV2ZixJQUFFaEgsRUFBRTZtQixHQUFsRjtBQUFBLE9BQXNGMWpCLElBQUUyVCxNQUF4RjtBQUFBLE9BQStGNVEsSUFBRWdZLFFBQWpHO0FBQUEsT0FBMEcxWSxJQUFFd2dCLE9BQTVHLENBQW9ILElBQUcsT0FBTzdpQixDQUFQLElBQVUsV0FBVixJQUF1QmhELGFBQWFnRCxDQUF2QyxFQUF5QztBQUFDLFlBQU9oRCxDQUFQO0FBQVMsUUFBRyxPQUFPL0csQ0FBUCxJQUFVLFdBQVYsSUFBdUIrRyxhQUFhL0csQ0FBdkMsRUFBeUM7QUFBQyxZQUFPK0csQ0FBUDtBQUFTLFFBQUcsT0FBTzZHLENBQVAsSUFBVSxXQUFWLElBQXVCN0csYUFBYTZHLENBQXZDLEVBQXlDO0FBQUMsWUFBTzdHLENBQVA7QUFBUyxRQUFHQSxFQUFFb1ksS0FBRixLQUFVeGMsU0FBVixJQUFxQm9FLEVBQUU0c0IsRUFBRixLQUFPaHhCLFNBQTVCLElBQXVDb0UsRUFBRVIsQ0FBRixLQUFNNUQsU0FBaEQsRUFBMEQ7QUFBQyxZQUFPLElBQUkzQyxDQUFKLENBQU0sRUFBQzB3QixLQUFJM3BCLEVBQUU0c0IsRUFBUCxFQUFVeFUsT0FBTXBZLEVBQUVvWSxLQUFsQixFQUFOLENBQVA7QUFBdUMsUUFBR3BZLEVBQUVvWSxLQUFGLEtBQVV4YyxTQUFWLElBQXFCb0UsRUFBRVIsQ0FBRixLQUFNNUQsU0FBOUIsRUFBd0M7QUFBQyxZQUFPLElBQUkzQyxDQUFKLENBQU0sRUFBQ3l3QixLQUFJMXBCLEVBQUVSLENBQVAsRUFBUzRZLE9BQU1wWSxFQUFFb1ksS0FBakIsRUFBTixDQUFQO0FBQXNDLFFBQUdwWSxFQUFFM0YsR0FBRixLQUFRdUIsU0FBUixJQUFtQm9FLEVBQUV2QyxDQUFGLEtBQU03QixTQUF6QixJQUFvQ29FLEVBQUVyRCxDQUFGLEtBQU1mLFNBQTFDLElBQXFEb0UsRUFBRVIsQ0FBRixLQUFNNUQsU0FBOUQsRUFBd0U7QUFBQyxTQUFJeUssSUFBRSxJQUFJckQsQ0FBSixFQUFOLENBQWNxRCxFQUFFaVIsU0FBRixDQUFZdFgsRUFBRXZDLENBQWQsRUFBZ0J1QyxFQUFFckQsQ0FBbEIsRUFBcUIsT0FBTzBKLENBQVA7QUFBUyxRQUFHckcsRUFBRTNGLEdBQUYsS0FBUXVCLFNBQVIsSUFBbUJvRSxFQUFFdkMsQ0FBRixLQUFNN0IsU0FBekIsSUFBb0NvRSxFQUFFckQsQ0FBRixLQUFNZixTQUExQyxJQUFxRG9FLEVBQUVSLENBQUYsS0FBTTVELFNBQTNELElBQXNFb0UsRUFBRU0sQ0FBRixLQUFNMUUsU0FBNUUsSUFBdUZvRSxFQUFFc0IsQ0FBRixLQUFNMUYsU0FBN0YsSUFBd0dvRSxFQUFFNnNCLEVBQUYsS0FBT2p4QixTQUEvRyxJQUEwSG9FLEVBQUU4c0IsRUFBRixLQUFPbHhCLFNBQWpJLElBQTRJb0UsRUFBRStzQixFQUFGLEtBQU9ueEIsU0FBbkosSUFBOEpvRSxFQUFFZ3RCLEVBQUYsS0FBT3B4QixTQUF4SyxFQUFrTDtBQUFDLFNBQUl5SyxJQUFFLElBQUlyRCxDQUFKLEVBQU4sQ0FBY3FELEVBQUU0bUIsWUFBRixDQUFlanRCLEVBQUV2QyxDQUFqQixFQUFtQnVDLEVBQUVyRCxDQUFyQixFQUF1QnFELEVBQUVSLENBQXpCLEVBQTJCUSxFQUFFTSxDQUE3QixFQUErQk4sRUFBRXNCLENBQWpDLEVBQW1DdEIsRUFBRTZzQixFQUFyQyxFQUF3QzdzQixFQUFFOHNCLEVBQTFDLEVBQTZDOXNCLEVBQUUrc0IsRUFBL0MsRUFBbUQsT0FBTzFtQixDQUFQO0FBQVMsUUFBR3JHLEVBQUUzRixHQUFGLEtBQVF1QixTQUFSLElBQW1Cb0UsRUFBRXZDLENBQUYsS0FBTTdCLFNBQXpCLElBQW9Db0UsRUFBRXJELENBQUYsS0FBTWYsU0FBMUMsSUFBcURvRSxFQUFFUixDQUFGLEtBQU01RCxTQUEzRCxJQUFzRW9FLEVBQUVNLENBQUYsS0FBTTFFLFNBQS9FLEVBQXlGO0FBQUMsU0FBSXlLLElBQUUsSUFBSXJELENBQUosRUFBTixDQUFjcUQsRUFBRTZtQixVQUFGLENBQWFsdEIsRUFBRXZDLENBQWYsRUFBaUJ1QyxFQUFFckQsQ0FBbkIsRUFBcUJxRCxFQUFFUixDQUF2QixFQUEwQixPQUFPNkcsQ0FBUDtBQUFTLFFBQUdyRyxFQUFFTSxDQUFGLEtBQU0xRSxTQUFOLElBQWlCb0UsRUFBRXNCLENBQUYsS0FBTTFGLFNBQXZCLElBQWtDb0UsRUFBRVgsQ0FBRixLQUFNekQsU0FBeEMsSUFBbURvRSxFQUFFOUIsQ0FBRixLQUFNdEMsU0FBekQsSUFBb0VvRSxFQUFFL0IsQ0FBRixLQUFNckMsU0FBN0UsRUFBdUY7QUFBQyxTQUFJeUssSUFBRSxJQUFJUSxDQUFKLEVBQU4sQ0FBY1IsRUFBRWlSLFNBQUYsQ0FBWXRYLEVBQUVNLENBQWQsRUFBZ0JOLEVBQUVzQixDQUFsQixFQUFvQnRCLEVBQUVYLENBQXRCLEVBQXdCVyxFQUFFOUIsQ0FBMUIsRUFBNkIsT0FBT21JLENBQVA7QUFBUyxRQUFHckcsRUFBRU0sQ0FBRixLQUFNMUUsU0FBTixJQUFpQm9FLEVBQUVzQixDQUFGLEtBQU0xRixTQUF2QixJQUFrQ29FLEVBQUVYLENBQUYsS0FBTXpELFNBQXhDLElBQW1Eb0UsRUFBRTlCLENBQUYsS0FBTXRDLFNBQXpELElBQW9Fb0UsRUFBRS9CLENBQUYsS0FBTXJDLFNBQTdFLEVBQXVGO0FBQUMsU0FBSXlLLElBQUUsSUFBSVEsQ0FBSixFQUFOLENBQWNSLEVBQUU2bUIsVUFBRixDQUFhbHRCLEVBQUVNLENBQWYsRUFBaUJOLEVBQUVzQixDQUFuQixFQUFxQnRCLEVBQUVYLENBQXZCLEVBQXlCVyxFQUFFOUIsQ0FBM0IsRUFBNkI4QixFQUFFL0IsQ0FBL0IsRUFBa0MsT0FBT29JLENBQVA7QUFBUyxRQUFHckcsRUFBRTNGLEdBQUYsS0FBUSxLQUFSLElBQWUyRixFQUFFdkMsQ0FBRixLQUFNN0IsU0FBckIsSUFBZ0NvRSxFQUFFckQsQ0FBRixLQUFNZixTQUF0QyxJQUFpRG9FLEVBQUVSLENBQUYsS0FBTTVELFNBQTFELEVBQW9FO0FBQUMsU0FBSXlLLElBQUUsSUFBSXJELENBQUosRUFBTixDQUFjcUQsRUFBRWlSLFNBQUYsQ0FBWTJGLFVBQVVqZCxFQUFFdkMsQ0FBWixDQUFaLEVBQTJCd2YsVUFBVWpkLEVBQUVyRCxDQUFaLENBQTNCLEVBQTJDLE9BQU8wSixDQUFQO0FBQVMsUUFBR3JHLEVBQUUzRixHQUFGLEtBQVEsS0FBUixJQUFlMkYsRUFBRXZDLENBQUYsS0FBTTdCLFNBQXJCLElBQWdDb0UsRUFBRXJELENBQUYsS0FBTWYsU0FBdEMsSUFBaURvRSxFQUFFUixDQUFGLEtBQU01RCxTQUF2RCxJQUFrRW9FLEVBQUVNLENBQUYsS0FBTTFFLFNBQXhFLElBQW1Gb0UsRUFBRXNCLENBQUYsS0FBTTFGLFNBQXpGLElBQW9Hb0UsRUFBRTZzQixFQUFGLEtBQU9qeEIsU0FBM0csSUFBc0hvRSxFQUFFOHNCLEVBQUYsS0FBT2x4QixTQUE3SCxJQUF3SW9FLEVBQUVndEIsRUFBRixLQUFPcHhCLFNBQWxKLEVBQTRKO0FBQUMsU0FBSXlLLElBQUUsSUFBSXJELENBQUosRUFBTixDQUFjcUQsRUFBRTRtQixZQUFGLENBQWVoUSxVQUFVamQsRUFBRXZDLENBQVosQ0FBZixFQUE4QndmLFVBQVVqZCxFQUFFckQsQ0FBWixDQUE5QixFQUE2Q3NnQixVQUFVamQsRUFBRVIsQ0FBWixDQUE3QyxFQUE0RHlkLFVBQVVqZCxFQUFFTSxDQUFaLENBQTVELEVBQTJFMmMsVUFBVWpkLEVBQUVzQixDQUFaLENBQTNFLEVBQTBGMmIsVUFBVWpkLEVBQUU2c0IsRUFBWixDQUExRixFQUEwRzVQLFVBQVVqZCxFQUFFOHNCLEVBQVosQ0FBMUcsRUFBMEg3UCxVQUFVamQsRUFBRWd0QixFQUFaLENBQTFILEVBQTJJLE9BQU8zbUIsQ0FBUDtBQUFTLFFBQUdyRyxFQUFFM0YsR0FBRixLQUFRLEtBQVIsSUFBZTJGLEVBQUV2QyxDQUFGLEtBQU03QixTQUFyQixJQUFnQ29FLEVBQUVyRCxDQUFGLEtBQU1mLFNBQXRDLElBQWlEb0UsRUFBRVIsQ0FBRixLQUFNNUQsU0FBMUQsRUFBb0U7QUFBQyxTQUFJeUssSUFBRSxJQUFJckQsQ0FBSixFQUFOLENBQWNxRCxFQUFFNm1CLFVBQUYsQ0FBYWpRLFVBQVVqZCxFQUFFdkMsQ0FBWixDQUFiLEVBQTRCd2YsVUFBVWpkLEVBQUVyRCxDQUFaLENBQTVCLEVBQTJDc2dCLFVBQVVqZCxFQUFFUixDQUFaLENBQTNDLEVBQTJELE9BQU82RyxDQUFQO0FBQVMsUUFBR3JHLEVBQUUzRixHQUFGLEtBQVEsSUFBUixJQUFjMkYsRUFBRWhDLEdBQUYsS0FBUXBDLFNBQXRCLElBQWlDb0UsRUFBRS9CLENBQUYsS0FBTXJDLFNBQXZDLElBQWtEb0UsRUFBRTlCLENBQUYsS0FBTXRDLFNBQXhELElBQW1Fb0UsRUFBRVIsQ0FBRixLQUFNNUQsU0FBNUUsRUFBc0Y7QUFBQyxTQUFJbUUsSUFBRSxJQUFJOUcsQ0FBSixDQUFNLEVBQUNtZixPQUFNcFksRUFBRWhDLEdBQVQsRUFBTixDQUFOLENBQTJCLElBQUlxRCxJQUFFdEIsRUFBRStuQixRQUFGLENBQVdTLE1BQVgsR0FBa0IsQ0FBeEIsQ0FBMEIsSUFBSTVoQixJQUFFLENBQUMsZUFBYXNXLFVBQVVqZCxFQUFFL0IsQ0FBWixDQUFkLEVBQThCMkQsS0FBOUIsQ0FBb0MsQ0FBQ1AsQ0FBckMsQ0FBTixDQUE4QyxJQUFJbUYsSUFBRSxDQUFDLGVBQWF5VyxVQUFVamQsRUFBRTlCLENBQVosQ0FBZCxFQUE4QjBELEtBQTlCLENBQW9DLENBQUNQLENBQXJDLENBQU4sQ0FBOEMsSUFBSThCLElBQUUsT0FBS3dELENBQUwsR0FBT0gsQ0FBYixDQUFlekcsRUFBRXNvQixlQUFGLENBQWtCbGxCLENBQWxCLEVBQXFCLE9BQU9wRCxDQUFQO0FBQVMsUUFBR0MsRUFBRTNGLEdBQUYsS0FBUSxJQUFSLElBQWMyRixFQUFFaEMsR0FBRixLQUFRcEMsU0FBdEIsSUFBaUNvRSxFQUFFL0IsQ0FBRixLQUFNckMsU0FBdkMsSUFBa0RvRSxFQUFFOUIsQ0FBRixLQUFNdEMsU0FBeEQsSUFBbUVvRSxFQUFFUixDQUFGLEtBQU01RCxTQUE1RSxFQUFzRjtBQUFDLFNBQUltRSxJQUFFLElBQUk5RyxDQUFKLENBQU0sRUFBQ21mLE9BQU1wWSxFQUFFaEMsR0FBVCxFQUFOLENBQU4sQ0FBMkIsSUFBSXFELElBQUV0QixFQUFFK25CLFFBQUYsQ0FBV1MsTUFBWCxHQUFrQixDQUF4QixDQUEwQixJQUFJNWhCLElBQUUsQ0FBQyxlQUFhc1csVUFBVWpkLEVBQUUvQixDQUFaLENBQWQsRUFBOEIyRCxLQUE5QixDQUFvQyxDQUFDUCxDQUFyQyxDQUFOLENBQThDLElBQUltRixJQUFFLENBQUMsZUFBYXlXLFVBQVVqZCxFQUFFOUIsQ0FBWixDQUFkLEVBQThCMEQsS0FBOUIsQ0FBb0MsQ0FBQ1AsQ0FBckMsQ0FBTixDQUE4QyxJQUFJOEIsSUFBRSxPQUFLd0QsQ0FBTCxHQUFPSCxDQUFiLENBQWUsSUFBSTVHLElBQUUsQ0FBQyxlQUFhcWQsVUFBVWpkLEVBQUVSLENBQVosQ0FBZCxFQUE4Qm9DLEtBQTlCLENBQW9DLENBQUNQLENBQXJDLENBQU4sQ0FBOEN0QixFQUFFc29CLGVBQUYsQ0FBa0JsbEIsQ0FBbEIsRUFBcUJwRCxFQUFFcW9CLGdCQUFGLENBQW1CeG9CLENBQW5CLEVBQXNCLE9BQU9HLENBQVA7QUFBUyxRQUFHdEMsTUFBSSxVQUFQLEVBQWtCO0FBQUMsU0FBSWdJLElBQUV6RixDQUFOO0FBQUEsU0FBUXNGLElBQUVtVixPQUFWO0FBQUEsU0FBa0J4VSxDQUFsQjtBQUFBLFNBQW9CSSxDQUFwQixDQUFzQkosSUFBRUosRUFBRUosQ0FBRixFQUFJLENBQUosQ0FBRixDQUFTLElBQUdRLEVBQUUxUSxNQUFGLEtBQVcsQ0FBZCxFQUFnQjtBQUFDOFEsV0FBRSxJQUFJckQsQ0FBSixFQUFGLENBQVVxRCxFQUFFZ2pCLGtCQUFGLENBQXFCNWpCLENBQXJCO0FBQXdCLE1BQW5ELE1BQXVEO0FBQUMsV0FBR1EsRUFBRTFRLE1BQUYsS0FBVyxDQUFkLEVBQWdCO0FBQUM4USxhQUFFLElBQUlRLENBQUosRUFBRixDQUFVUixFQUFFZ2pCLGtCQUFGLENBQXFCNWpCLENBQXJCO0FBQXdCLFFBQW5ELE1BQXVEO0FBQUMsYUFBR1EsRUFBRTFRLE1BQUYsR0FBUyxDQUFULElBQVlrUSxFQUFFbFAsTUFBRixDQUFTMFAsRUFBRSxDQUFGLENBQVQsRUFBYyxDQUFkLE1BQW1CLElBQWxDLEVBQXVDO0FBQUNJLGVBQUUsSUFBSXBOLENBQUosRUFBRixDQUFVb04sRUFBRWdqQixrQkFBRixDQUFxQjVqQixDQUFyQjtBQUF3QixVQUExRSxNQUE4RTtBQUFDLGlCQUFLLHNDQUFMO0FBQTRDO0FBQUM7QUFBQyxhQUFPWSxDQUFQO0FBQVMsUUFBRzVJLE1BQUksVUFBUCxFQUFrQjtBQUFDLFNBQUk0SSxJQUFFaEIsRUFBRThtQiw4QkFBRixDQUFpQ25zQixDQUFqQyxDQUFOLENBQTBDLE9BQU9xRyxDQUFQO0FBQVMsUUFBRzVJLE1BQUksVUFBUCxFQUFrQjtBQUFDLFlBQU80SCxFQUFFb25CLHlCQUFGLENBQTRCenNCLENBQTVCLENBQVA7QUFBc0MsUUFBR3ZDLE1BQUksU0FBUCxFQUFpQjtBQUFDLFlBQU9LLEtBQUtDLHVCQUFMLENBQTZCaUMsQ0FBN0IsQ0FBUDtBQUF1QyxRQUFHQSxFQUFFMUssT0FBRixDQUFVLG1CQUFWLEVBQThCLENBQTlCLEtBQWtDLENBQUMsQ0FBbkMsSUFBc0MwSyxFQUFFMUssT0FBRixDQUFVLHdCQUFWLEVBQW1DLENBQW5DLEtBQXVDLENBQUMsQ0FBOUUsSUFBaUYwSyxFQUFFMUssT0FBRixDQUFVLDJCQUFWLEVBQXNDLENBQXRDLEtBQTBDLENBQUMsQ0FBL0gsRUFBaUk7QUFBQyxZQUFPd0ksS0FBS3F2Qix1QkFBTCxDQUE2Qm50QixDQUE3QixDQUFQO0FBQXVDLFFBQUdBLEVBQUUxSyxPQUFGLENBQVUsa0JBQVYsS0FBK0IsQ0FBQyxDQUFuQyxFQUFxQztBQUFDLFNBQUk2USxJQUFFNFgsU0FBUy9kLENBQVQsRUFBVyxZQUFYLENBQU4sQ0FBK0IsT0FBT3FGLEVBQUVvbkIseUJBQUYsQ0FBNEJ0bUIsQ0FBNUIsQ0FBUDtBQUFzQyxRQUFHbkcsRUFBRTFLLE9BQUYsQ0FBVSx1QkFBVixLQUFvQyxDQUFDLENBQXJDLElBQXdDMEssRUFBRTFLLE9BQUYsQ0FBVSxhQUFWLEtBQTBCLENBQUMsQ0FBdEUsRUFBd0U7QUFBQyxTQUFJd00sSUFBRWlFLEVBQUUvRixDQUFGLEVBQUksaUJBQUosQ0FBTixDQUE2QixPQUFPcUYsRUFBRTFILE1BQUYsQ0FBU21FLENBQVQsRUFBVyxJQUFYLEVBQWdCLFVBQWhCLENBQVA7QUFBbUMsUUFBRzlCLEVBQUUxSyxPQUFGLENBQVUsdUJBQVYsS0FBb0MsQ0FBQyxDQUFyQyxJQUF3QzBLLEVBQUUxSyxPQUFGLENBQVUsYUFBVixLQUEwQixDQUFDLENBQXRFLEVBQXdFO0FBQUMsU0FBSWtRLElBQUVPLEVBQUUvRixDQUFGLEVBQUksaUJBQUosQ0FBTixDQUE2QixJQUFJaUgsSUFBRXpILEVBQUVnRyxDQUFGLEVBQUksQ0FBSixFQUFNLENBQUMsQ0FBRCxDQUFOLEVBQVUsSUFBVixDQUFOLENBQXNCLElBQUl1QixJQUFFdkgsRUFBRWdHLENBQUYsRUFBSSxDQUFKLEVBQU0sQ0FBQyxDQUFELENBQU4sRUFBVSxJQUFWLENBQU4sQ0FBc0IsSUFBSUcsSUFBRW5HLEVBQUVnRyxDQUFGLEVBQUksQ0FBSixFQUFNLENBQUMsQ0FBRCxDQUFOLEVBQVUsSUFBVixDQUFOLENBQXNCLElBQUkvRCxJQUFFakMsRUFBRWdHLENBQUYsRUFBSSxDQUFKLEVBQU0sQ0FBQyxDQUFELENBQU4sRUFBVSxJQUFWLENBQU4sQ0FBc0IsSUFBSWpFLElBQUUvQixFQUFFZ0csQ0FBRixFQUFJLENBQUosRUFBTSxDQUFDLENBQUQsQ0FBTixFQUFVLElBQVYsQ0FBTixDQUFzQixJQUFJYSxJQUFFLElBQUlRLENBQUosRUFBTixDQUFjUixFQUFFNm1CLFVBQUYsQ0FBYSxJQUFJaGxCLFVBQUosQ0FBZWpCLENBQWYsRUFBaUIsRUFBakIsQ0FBYixFQUFrQyxJQUFJaUIsVUFBSixDQUFlbkIsQ0FBZixFQUFpQixFQUFqQixDQUFsQyxFQUF1RCxJQUFJbUIsVUFBSixDQUFldkMsQ0FBZixFQUFpQixFQUFqQixDQUF2RCxFQUE0RSxJQUFJdUMsVUFBSixDQUFlekcsQ0FBZixFQUFpQixFQUFqQixDQUE1RSxFQUFpRyxJQUFJeUcsVUFBSixDQUFlM0csQ0FBZixFQUFpQixFQUFqQixDQUFqRyxFQUF1SCxPQUFPOEUsQ0FBUDtBQUFTLFFBQUdyRyxFQUFFMUssT0FBRixDQUFVLG1CQUFWLEtBQWdDLENBQUMsQ0FBcEMsRUFBc0M7QUFBQyxZQUFPK1AsRUFBRW1uQiw4QkFBRixDQUFpQ3hzQixDQUFqQyxDQUFQO0FBQTJDLFFBQUdBLEVBQUUxSyxPQUFGLENBQVUsdUJBQVYsS0FBb0MsQ0FBQyxDQUFyQyxJQUF3QzBLLEVBQUUxSyxPQUFGLENBQVUsYUFBVixLQUEwQixDQUFDLENBQXRFLEVBQXdFO0FBQUMsU0FBSWlMLElBQUU4RSxFQUFFZ21CLGtCQUFGLENBQXFCcnJCLENBQXJCLEVBQXVCQyxDQUF2QixDQUFOLENBQWdDLElBQUlzRixJQUFFLElBQUlvUixNQUFKLEVBQU4sQ0FBbUJwUixFQUFFOGpCLGtCQUFGLENBQXFCOW9CLENBQXJCLEVBQXdCLE9BQU9nRixDQUFQO0FBQVMsUUFBR3ZGLEVBQUUxSyxPQUFGLENBQVUsc0JBQVYsS0FBbUMsQ0FBQyxDQUFwQyxJQUF1QzBLLEVBQUUxSyxPQUFGLENBQVUsYUFBVixLQUEwQixDQUFDLENBQXJFLEVBQXVFO0FBQUMsU0FBSWtRLElBQUVILEVBQUVnbUIsa0JBQUYsQ0FBcUJyckIsQ0FBckIsRUFBdUJDLENBQXZCLENBQU4sQ0FBZ0MsSUFBSW9HLElBQUU3RyxFQUFFZ0csQ0FBRixFQUFJLENBQUosRUFBTSxDQUFDLENBQUQsQ0FBTixFQUFVLElBQVYsQ0FBTixDQUFzQixJQUFJakcsSUFBRUMsRUFBRWdHLENBQUYsRUFBSSxDQUFKLEVBQU0sQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFOLEVBQVksSUFBWixDQUFOLENBQXdCLElBQUlpQixJQUFFakgsRUFBRWdHLENBQUYsRUFBSSxDQUFKLEVBQU0sQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFOLEVBQVksSUFBWixFQUFrQmpQLE1BQWxCLENBQXlCLENBQXpCLENBQU4sQ0FBa0MsSUFBSW9HLElBQUUsRUFBTixDQUFTLElBQUd5WixLQUFLdFgsTUFBTCxDQUFZa2QsR0FBWixDQUFnQnlMLFdBQWhCLENBQTRCbG9CLENBQTVCLE1BQWlDM0QsU0FBcEMsRUFBOEM7QUFBQ2UsV0FBRXlaLEtBQUt0WCxNQUFMLENBQVlrZCxHQUFaLENBQWdCeUwsV0FBaEIsQ0FBNEJsb0IsQ0FBNUIsQ0FBRjtBQUFpQyxNQUFoRixNQUFvRjtBQUFDLGFBQUssNENBQTBDQSxDQUEvQztBQUFpRCxVQUFJUSxJQUFFLElBQUk5RyxDQUFKLENBQU0sRUFBQ21mLE9BQU16YixDQUFQLEVBQU4sQ0FBTixDQUF1Qm9ELEVBQUVzb0IsZUFBRixDQUFrQjVoQixDQUFsQixFQUFxQjFHLEVBQUVxb0IsZ0JBQUYsQ0FBbUIvaEIsQ0FBbkIsRUFBc0J0RyxFQUFFaVgsUUFBRixHQUFXLEtBQVgsQ0FBaUIsT0FBT2pYLENBQVA7QUFBUyxRQUFHQyxFQUFFMUssT0FBRixDQUFVLHVCQUFWLEtBQW9DLENBQUMsQ0FBckMsSUFBd0MwSyxFQUFFMUssT0FBRixDQUFVLGFBQVYsS0FBMEIsQ0FBQyxDQUF0RSxFQUF3RTtBQUFDLFNBQUlrUSxJQUFFSCxFQUFFZ21CLGtCQUFGLENBQXFCcnJCLENBQXJCLEVBQXVCQyxDQUF2QixDQUFOLENBQWdDLElBQUlnSCxJQUFFekgsRUFBRWdHLENBQUYsRUFBSSxDQUFKLEVBQU0sQ0FBQyxDQUFELENBQU4sRUFBVSxJQUFWLENBQU4sQ0FBc0IsSUFBSXVCLElBQUV2SCxFQUFFZ0csQ0FBRixFQUFJLENBQUosRUFBTSxDQUFDLENBQUQsQ0FBTixFQUFVLElBQVYsQ0FBTixDQUFzQixJQUFJRyxJQUFFbkcsRUFBRWdHLENBQUYsRUFBSSxDQUFKLEVBQU0sQ0FBQyxDQUFELENBQU4sRUFBVSxJQUFWLENBQU4sQ0FBc0IsSUFBSS9ELElBQUVqQyxFQUFFZ0csQ0FBRixFQUFJLENBQUosRUFBTSxDQUFDLENBQUQsQ0FBTixFQUFVLElBQVYsQ0FBTixDQUFzQixJQUFJakUsSUFBRS9CLEVBQUVnRyxDQUFGLEVBQUksQ0FBSixFQUFNLENBQUMsQ0FBRCxDQUFOLEVBQVUsSUFBVixDQUFOLENBQXNCLElBQUlhLElBQUUsSUFBSVEsQ0FBSixFQUFOLENBQWNSLEVBQUU2bUIsVUFBRixDQUFhLElBQUlobEIsVUFBSixDQUFlakIsQ0FBZixFQUFpQixFQUFqQixDQUFiLEVBQWtDLElBQUlpQixVQUFKLENBQWVuQixDQUFmLEVBQWlCLEVBQWpCLENBQWxDLEVBQXVELElBQUltQixVQUFKLENBQWV2QyxDQUFmLEVBQWlCLEVBQWpCLENBQXZELEVBQTRFLElBQUl1QyxVQUFKLENBQWV6RyxDQUFmLEVBQWlCLEVBQWpCLENBQTVFLEVBQWlHLElBQUl5RyxVQUFKLENBQWUzRyxDQUFmLEVBQWlCLEVBQWpCLENBQWpHLEVBQXVILE9BQU84RSxDQUFQO0FBQVMsUUFBR3JHLEVBQUUxSyxPQUFGLENBQVUsNkJBQVYsS0FBMEMsQ0FBQyxDQUE5QyxFQUFnRDtBQUFDLFlBQU8rUCxFQUFFNm1CLDJCQUFGLENBQThCbHNCLENBQTlCLEVBQWdDQyxDQUFoQyxDQUFQO0FBQTBDLFVBQUssd0JBQUw7QUFBOEIsRUFBanhKLENBQWt4SjRsQixRQUFRdUgsZUFBUixHQUF3QixVQUFTbHRCLENBQVQsRUFBV0wsQ0FBWCxFQUFhO0FBQUMsT0FBR0ssS0FBRyxLQUFOLEVBQVk7QUFBQyxTQUFJTixJQUFFQyxDQUFOLENBQVEsSUFBSVAsSUFBRSxJQUFJcVgsTUFBSixFQUFOLENBQW1CclgsRUFBRSt0QixRQUFGLENBQVd6dEIsQ0FBWCxFQUFhLE9BQWIsRUFBc0JOLEVBQUUyWCxTQUFGLEdBQVksSUFBWixDQUFpQjNYLEVBQUUwWCxRQUFGLEdBQVcsSUFBWCxDQUFnQixJQUFJelgsSUFBRSxJQUFJb1gsTUFBSixFQUFOLENBQW1CLElBQUloYSxJQUFFMkMsRUFBRTdCLENBQUYsQ0FBSXFELFFBQUosQ0FBYSxFQUFiLENBQU4sQ0FBdUIsSUFBSTdILElBQUVxRyxFQUFFM0MsQ0FBRixDQUFJbUUsUUFBSixDQUFhLEVBQWIsQ0FBTixDQUF1QnZCLEVBQUUrWCxTQUFGLENBQVkzYSxDQUFaLEVBQWMxRCxDQUFkLEVBQWlCc0csRUFBRTBYLFNBQUYsR0FBWSxLQUFaLENBQWtCMVgsRUFBRXlYLFFBQUYsR0FBVyxJQUFYLENBQWdCLElBQUkvVyxJQUFFLEVBQU4sQ0FBU0EsRUFBRXF0QixTQUFGLEdBQVlodUIsQ0FBWixDQUFjVyxFQUFFc3RCLFNBQUYsR0FBWWh1QixDQUFaLENBQWMsT0FBT1UsQ0FBUDtBQUFTLElBQWpRLE1BQXFRO0FBQUMsU0FBR0MsS0FBRyxJQUFOLEVBQVc7QUFBQyxXQUFJVixJQUFFSyxDQUFOLENBQVEsSUFBSVIsSUFBRSxJQUFJK1csS0FBS3RYLE1BQUwsQ0FBWXNuQixLQUFoQixDQUFzQixFQUFDaE8sT0FBTTVZLENBQVAsRUFBdEIsQ0FBTixDQUF1QyxJQUFJTyxJQUFFVixFQUFFb3BCLGtCQUFGLEVBQU4sQ0FBNkIsSUFBSW5wQixJQUFFLElBQUk4VyxLQUFLdFgsTUFBTCxDQUFZc25CLEtBQWhCLENBQXNCLEVBQUNoTyxPQUFNNVksQ0FBUCxFQUF0QixDQUFOLENBQXVDRixFQUFFK29CLGVBQUYsQ0FBa0J0b0IsRUFBRTZtQixRQUFwQixFQUE4QnRuQixFQUFFOG9CLGdCQUFGLENBQW1Ccm9CLEVBQUVtbUIsUUFBckIsRUFBK0I1bUIsRUFBRTJYLFNBQUYsR0FBWSxJQUFaLENBQWlCM1gsRUFBRTBYLFFBQUYsR0FBVyxLQUFYLENBQWlCLElBQUl6WCxJQUFFLElBQUk2VyxLQUFLdFgsTUFBTCxDQUFZc25CLEtBQWhCLENBQXNCLEVBQUNoTyxPQUFNNVksQ0FBUCxFQUF0QixDQUFOLENBQXVDRCxFQUFFOG9CLGVBQUYsQ0FBa0J0b0IsRUFBRTZtQixRQUFwQixFQUE4QnJuQixFQUFFMFgsU0FBRixHQUFZLEtBQVosQ0FBa0IxWCxFQUFFeVgsUUFBRixHQUFXLElBQVgsQ0FBZ0IsSUFBSS9XLElBQUUsRUFBTixDQUFTQSxFQUFFcXRCLFNBQUYsR0FBWWh1QixDQUFaLENBQWNXLEVBQUVzdEIsU0FBRixHQUFZaHVCLENBQVosQ0FBYyxPQUFPVSxDQUFQO0FBQVMsTUFBblgsTUFBdVg7QUFBQyxhQUFLLHdCQUFzQkMsQ0FBM0I7QUFBNkI7QUFBQztBQUFDLEVBQW5zQixDQUFvc0IybEIsUUFBUTJILE1BQVIsR0FBZSxVQUFTNXRCLENBQVQsRUFBV21ILENBQVgsRUFBYTdJLENBQWIsRUFBZTRELENBQWYsRUFBaUJSLENBQWpCLEVBQW1CdkIsQ0FBbkIsRUFBcUI7QUFBQyxPQUFJc0YsSUFBRStRLElBQU47QUFBQSxPQUFXblcsSUFBRW9GLEVBQUVtVyxJQUFmO0FBQUEsT0FBb0JoVixJQUFFdkcsRUFBRXd0QixtQkFBeEI7QUFBQSxPQUE0Q2x1QixJQUFFVSxFQUFFK3BCLFVBQWhEO0FBQUEsT0FBMkRocUIsSUFBRUMsRUFBRTRiLFFBQUYsQ0FBVzZSLFNBQXhFO0FBQUEsT0FBa0Z4dEIsSUFBRUQsRUFBRThiLElBQXRGO0FBQUEsT0FBMkZsVixJQUFFM0csRUFBRXl0QixvQkFBL0Y7QUFBQSxPQUFvSGh4QixJQUFFMEksRUFBRXZHLE1BQXhIO0FBQUEsT0FBK0hxRSxJQUFFeEcsRUFBRStwQixHQUFuSTtBQUFBLE9BQXVJamxCLElBQUU5RSxFQUFFeXBCLEtBQTNJO0FBQUEsT0FBaUozb0IsSUFBRWtaLE1BQW5KLENBQTBKLFNBQVNsUSxDQUFULENBQVdsRixDQUFYLEVBQWE7QUFBQyxTQUFJK0QsSUFBRXRGLEVBQUUsRUFBQzR0QixLQUFJLENBQUMsRUFBQyxPQUFNLENBQVAsRUFBRCxFQUFXLEVBQUMsT0FBTSxFQUFDM0QsUUFBTzFvQixFQUFFOUQsQ0FBVixFQUFQLEVBQVgsRUFBZ0MsRUFBQyxPQUFNOEQsRUFBRTVFLENBQVQsRUFBaEMsRUFBNEMsRUFBQyxPQUFNLEVBQUNzdEIsUUFBTzFvQixFQUFFL0IsQ0FBVixFQUFQLEVBQTVDLEVBQWlFLEVBQUMsT0FBTSxFQUFDeXFCLFFBQU8xb0IsRUFBRWpCLENBQVYsRUFBUCxFQUFqRSxFQUFzRixFQUFDLE9BQU0sRUFBQzJwQixRQUFPMW9CLEVBQUVELENBQVYsRUFBUCxFQUF0RixFQUEyRyxFQUFDLE9BQU0sRUFBQzJvQixRQUFPMW9CLEVBQUVxVixJQUFWLEVBQVAsRUFBM0csRUFBbUksRUFBQyxPQUFNLEVBQUNxVCxRQUFPMW9CLEVBQUVzVixJQUFWLEVBQVAsRUFBbkksRUFBMkosRUFBQyxPQUFNLEVBQUNvVCxRQUFPMW9CLEVBQUV1VixLQUFWLEVBQVAsRUFBM0osQ0FBTCxFQUFGLENBQU4sQ0FBb00sT0FBT3hSLENBQVA7QUFBUyxhQUFTcUIsQ0FBVCxDQUFXckIsQ0FBWCxFQUFhO0FBQUMsU0FBSS9ELElBQUV2QixFQUFFLEVBQUM0dEIsS0FBSSxDQUFDLEVBQUMsT0FBTSxDQUFQLEVBQUQsRUFBVyxFQUFDQyxRQUFPLEVBQUNod0IsS0FBSXlILEVBQUUyaUIsU0FBUCxFQUFSLEVBQVgsRUFBc0MsRUFBQzZGLEtBQUksQ0FBQyxJQUFELEVBQU0sSUFBTixFQUFXLEVBQUNDLEtBQUksRUFBQ2oxQixNQUFLd00sRUFBRTZpQixTQUFSLEVBQUwsRUFBWCxDQUFMLEVBQXRDLEVBQWlGLEVBQUMyRixLQUFJLENBQUMsSUFBRCxFQUFNLElBQU4sRUFBVyxFQUFDRSxRQUFPLEVBQUNud0IsS0FBSSxPQUFLeUgsRUFBRTRpQixTQUFaLEVBQVIsRUFBWCxDQUFMLEVBQWpGLENBQUwsRUFBRixDQUFOLENBQW1KLE9BQU8zbUIsQ0FBUDtBQUFTLGFBQVN0RCxDQUFULENBQVdzRCxDQUFYLEVBQWE7QUFBQyxTQUFJK0QsSUFBRXRGLEVBQUUsRUFBQzR0QixLQUFJLENBQUMsRUFBQyxPQUFNLENBQVAsRUFBRCxFQUFXLEVBQUMsT0FBTSxFQUFDM0QsUUFBTzFvQixFQUFFakIsQ0FBVixFQUFQLEVBQVgsRUFBZ0MsRUFBQyxPQUFNLEVBQUMycEIsUUFBTzFvQixFQUFFRCxDQUFWLEVBQVAsRUFBaEMsRUFBcUQsRUFBQyxPQUFNLEVBQUMyb0IsUUFBTzFvQixFQUFFbEMsQ0FBVixFQUFQLEVBQXJELEVBQTBFLEVBQUMsT0FBTSxFQUFDNHFCLFFBQU8xb0IsRUFBRXJELENBQVYsRUFBUCxFQUExRSxFQUErRixFQUFDLE9BQU0sRUFBQytyQixRQUFPMW9CLEVBQUV0RCxDQUFWLEVBQVAsRUFBL0YsQ0FBTCxFQUFGLENBQU4sQ0FBb0ksT0FBT3FILENBQVA7QUFBUyxRQUFHLENBQUU3SCxNQUFJN0IsU0FBSixJQUFlZ0UsYUFBYW5DLENBQTdCLElBQWtDMEYsTUFBSXZILFNBQUosSUFBZWdFLGFBQWF1RCxDQUE5RCxJQUFtRTFCLE1BQUk3RixTQUFKLElBQWVnRSxhQUFhNkIsQ0FBaEcsS0FBcUc3QixFQUFFb1gsUUFBRixJQUFZLElBQWpILEtBQXdIalEsTUFBSW5MLFNBQUosSUFBZW1MLEtBQUcsVUFBMUksQ0FBSCxFQUF5SjtBQUFDLFNBQUlFLElBQUUsSUFBSUosQ0FBSixDQUFNakgsQ0FBTixDQUFOLENBQWUsSUFBSW9ELElBQUVpRSxFQUFFeVUsYUFBRixFQUFOLENBQXdCLE9BQU9vQyxTQUFTOWEsQ0FBVCxFQUFXLFlBQVgsQ0FBUDtBQUFnQyxRQUFHK0QsS0FBRyxVQUFILElBQWV0SixNQUFJN0IsU0FBbkIsSUFBOEJnRSxhQUFhbkMsQ0FBM0MsS0FBK0NTLE1BQUl0QyxTQUFKLElBQWVzQyxLQUFHLElBQWpFLEtBQXdFMEIsRUFBRXFYLFNBQUYsSUFBYSxJQUF4RixFQUE2RjtBQUFDLFNBQUloUSxJQUFFUixFQUFFN0csQ0FBRixDQUFOLENBQVcsSUFBSW9ELElBQUVpRSxFQUFFeVUsYUFBRixFQUFOLENBQXdCLE9BQU9vQyxTQUFTOWEsQ0FBVCxFQUFXLGlCQUFYLENBQVA7QUFBcUMsUUFBRytELEtBQUcsVUFBSCxJQUFldEYsTUFBSTdGLFNBQW5CLElBQThCZ0UsYUFBYTZCLENBQTNDLEtBQStDdkQsTUFBSXRDLFNBQUosSUFBZXNDLEtBQUcsSUFBakUsS0FBd0UwQixFQUFFcVgsU0FBRixJQUFhLElBQXhGLEVBQTZGO0FBQUMsU0FBSWhlLElBQUUsSUFBSXVOLENBQUosQ0FBTSxFQUFDMU4sTUFBSzhHLEVBQUV1b0IsU0FBUixFQUFOLENBQU4sQ0FBZ0MsSUFBSWpsQixJQUFFakssRUFBRXlpQixhQUFGLEVBQU4sQ0FBd0IsSUFBSXBjLElBQUVxSCxFQUFFL0csQ0FBRixDQUFOLENBQVcsSUFBSXlCLElBQUUvQixFQUFFb2MsYUFBRixFQUFOLENBQXdCLElBQUlwYixJQUFFLEVBQU4sQ0FBU0EsS0FBR3dkLFNBQVM1YSxDQUFULEVBQVcsZUFBWCxDQUFILENBQStCNUMsS0FBR3dkLFNBQVN6YyxDQUFULEVBQVcsZ0JBQVgsQ0FBSCxDQUFnQyxPQUFPZixDQUFQO0FBQVMsUUFBR3lHLEtBQUcsVUFBSCxJQUFlNUQsTUFBSXZILFNBQW5CLElBQThCZ0UsYUFBYXVELENBQTNDLEtBQStDakYsTUFBSXRDLFNBQUosSUFBZXNDLEtBQUcsSUFBakUsS0FBd0UwQixFQUFFcVgsU0FBRixJQUFhLElBQXhGLEVBQTZGO0FBQUMsU0FBSWhRLElBQUVoSixFQUFFMkIsQ0FBRixDQUFOLENBQVcsSUFBSW9ELElBQUVpRSxFQUFFeVUsYUFBRixFQUFOLENBQXdCLE9BQU9vQyxTQUFTOWEsQ0FBVCxFQUFXLGlCQUFYLENBQVA7QUFBcUMsUUFBRytELEtBQUcsVUFBSCxJQUFldEosTUFBSTdCLFNBQW5CLElBQThCZ0UsYUFBYW5DLENBQTNDLElBQStDUyxNQUFJdEMsU0FBSixJQUFlc0MsS0FBRyxJQUFqRSxJQUF3RTBCLEVBQUVxWCxTQUFGLElBQWEsSUFBeEYsRUFBNkY7QUFBQyxTQUFJaFEsSUFBRVIsRUFBRTdHLENBQUYsQ0FBTixDQUFXLElBQUlvRCxJQUFFaUUsRUFBRXlVLGFBQUYsRUFBTixDQUF3QixJQUFHNVosTUFBSWxHLFNBQVAsRUFBaUI7QUFBQ2tHLFdBQUUsY0FBRjtBQUFpQixhQUFPLEtBQUt3cEIsaUNBQUwsQ0FBdUMsS0FBdkMsRUFBNkN0b0IsQ0FBN0MsRUFBK0M5RSxDQUEvQyxFQUFpRDRELENBQWpELEVBQW1EL0IsQ0FBbkQsQ0FBUDtBQUE2RCxRQUFHZ0gsS0FBRyxVQUFILElBQWV0RixNQUFJN0YsU0FBbkIsSUFBOEJnRSxhQUFhNkIsQ0FBM0MsSUFBK0N2RCxNQUFJdEMsU0FBSixJQUFlc0MsS0FBRyxJQUFqRSxJQUF3RTBCLEVBQUVxWCxTQUFGLElBQWEsSUFBeEYsRUFBNkY7QUFBQyxTQUFJaFEsSUFBRU4sRUFBRS9HLENBQUYsQ0FBTixDQUFXLElBQUlvRCxJQUFFaUUsRUFBRXlVLGFBQUYsRUFBTixDQUF3QixJQUFHNVosTUFBSWxHLFNBQVAsRUFBaUI7QUFBQ2tHLFdBQUUsY0FBRjtBQUFpQixhQUFPLEtBQUt3cEIsaUNBQUwsQ0FBdUMsSUFBdkMsRUFBNEN0b0IsQ0FBNUMsRUFBOEM5RSxDQUE5QyxFQUFnRDRELENBQWhELEVBQWtEL0IsQ0FBbEQsQ0FBUDtBQUE0RCxRQUFHZ0gsS0FBRyxVQUFILElBQWU1RCxNQUFJdkgsU0FBbkIsSUFBOEJnRSxhQUFhdUQsQ0FBM0MsSUFBK0NqRixNQUFJdEMsU0FBSixJQUFlc0MsS0FBRyxJQUFqRSxJQUF3RTBCLEVBQUVxWCxTQUFGLElBQWEsSUFBeEYsRUFBNkY7QUFBQyxTQUFJaFEsSUFBRWhKLEVBQUUyQixDQUFGLENBQU4sQ0FBVyxJQUFJb0QsSUFBRWlFLEVBQUV5VSxhQUFGLEVBQU4sQ0FBd0IsSUFBRzVaLE1BQUlsRyxTQUFQLEVBQWlCO0FBQUNrRyxXQUFFLGNBQUY7QUFBaUIsYUFBTyxLQUFLd3BCLGlDQUFMLENBQXVDLEtBQXZDLEVBQTZDdG9CLENBQTdDLEVBQStDOUUsQ0FBL0MsRUFBaUQ0RCxDQUFqRCxFQUFtRC9CLENBQW5ELENBQVA7QUFBNkQsUUFBSVEsSUFBRSxTQUFGQSxDQUFFLENBQVMrRSxDQUFULEVBQVcvRCxDQUFYLEVBQWE7QUFBQyxTQUFJaUUsSUFBRTNGLEVBQUV5RixDQUFGLEVBQUkvRCxDQUFKLENBQU4sQ0FBYSxJQUFJZ0UsSUFBRSxJQUFJdkYsQ0FBSixDQUFNLEVBQUM0dEIsS0FBSSxDQUFDLEVBQUNBLEtBQUksQ0FBQyxFQUFDRyxLQUFJLEVBQUNqMUIsTUFBSyxZQUFOLEVBQUwsRUFBRCxFQUEyQixFQUFDODBCLEtBQUksQ0FBQyxFQUFDQSxLQUFJLENBQUMsRUFBQ0csS0FBSSxFQUFDajFCLE1BQUssYUFBTixFQUFMLEVBQUQsRUFBNEIsRUFBQzgwQixLQUFJLENBQUMsRUFBQ0MsUUFBTyxFQUFDaHdCLEtBQUkySCxFQUFFbW1CLFVBQVAsRUFBUixFQUFELEVBQTZCLEVBQUMsT0FBTW5tQixFQUFFb21CLFVBQVQsRUFBN0IsQ0FBTCxFQUE1QixDQUFMLEVBQUQsRUFBNkYsRUFBQ2dDLEtBQUksQ0FBQyxFQUFDRyxLQUFJLEVBQUNqMUIsTUFBSyxjQUFOLEVBQUwsRUFBRCxFQUE2QixFQUFDKzBCLFFBQU8sRUFBQ2h3QixLQUFJMkgsRUFBRWttQixrQkFBUCxFQUFSLEVBQTdCLENBQUwsRUFBN0YsQ0FBTCxFQUEzQixDQUFMLEVBQUQsRUFBK00sRUFBQ21DLFFBQU8sRUFBQ2h3QixLQUFJMkgsRUFBRWlsQixVQUFQLEVBQVIsRUFBL00sQ0FBTCxFQUFOLENBQU4sQ0FBK1AsT0FBT2xsQixFQUFFbVcsYUFBRixFQUFQO0FBQXlCLElBQXpULENBQTBULElBQUk3YixJQUFFLFNBQUZBLENBQUUsQ0FBU29HLENBQVQsRUFBV0UsQ0FBWCxFQUFhO0FBQUMsU0FBSVosSUFBRSxHQUFOLENBQVUsSUFBSVEsSUFBRTVGLFNBQVNDLEdBQVQsQ0FBYVksU0FBYixDQUF1QmEsTUFBdkIsQ0FBOEIsQ0FBOUIsQ0FBTixDQUF1QyxJQUFJZ0UsSUFBRSxjQUFOLENBQXFCLElBQUl0RSxJQUFFcEIsU0FBU0MsR0FBVCxDQUFhWSxTQUFiLENBQXVCYSxNQUF2QixDQUE4QixDQUE5QixDQUFOLENBQXVDLElBQUkyRCxJQUFFckYsU0FBUzJyQixNQUFULENBQWdCM2xCLENBQWhCLEVBQWtCSixDQUFsQixFQUFvQixFQUFDZ21CLFNBQVEsTUFBSSxFQUFiLEVBQWdCQyxZQUFXem1CLENBQTNCLEVBQXBCLENBQU4sQ0FBeUQsSUFBSUUsSUFBRXRGLFNBQVM0QixHQUFULENBQWFDLEdBQWIsQ0FBaUJ2RixLQUFqQixDQUF1QndKLENBQXZCLENBQU4sQ0FBZ0MsSUFBSU4sSUFBRXhGLFNBQVNtcUIsU0FBVCxDQUFtQi9TLE9BQW5CLENBQTJCOVIsQ0FBM0IsRUFBNkJELENBQTdCLEVBQStCLEVBQUNnbEIsSUFBR2pwQixDQUFKLEVBQS9CLElBQXVDLEVBQTdDLENBQWdELElBQUkrRCxJQUFFLEVBQU4sQ0FBU0EsRUFBRW1sQixVQUFGLEdBQWE5a0IsQ0FBYixDQUFlTCxFQUFFcW1CLFVBQUYsR0FBYXhyQixTQUFTNEIsR0FBVCxDQUFhQyxHQUFiLENBQWlCYixTQUFqQixDQUEyQjRFLENBQTNCLENBQWIsQ0FBMkNULEVBQUVzbUIsVUFBRixHQUFhcm1CLENBQWIsQ0FBZUQsRUFBRW1tQixtQkFBRixHQUFzQjVsQixDQUF0QixDQUF3QlAsRUFBRW9tQixrQkFBRixHQUFxQnZyQixTQUFTNEIsR0FBVCxDQUFhQyxHQUFiLENBQWlCYixTQUFqQixDQUEyQkksQ0FBM0IsQ0FBckIsQ0FBbUQsT0FBTytELENBQVA7QUFBUyxJQUFoYixDQUFpYixJQUFHeUIsS0FBRyxVQUFILElBQWV0SixLQUFHN0IsU0FBbEIsSUFBNkJnRSxhQUFhbkMsQ0FBMUMsSUFBNkNtQyxFQUFFcVgsU0FBRixJQUFhLElBQTdELEVBQWtFO0FBQUMsU0FBSTVYLElBQUVvSCxFQUFFN0csQ0FBRixDQUFOLENBQVcsSUFBSUosSUFBRUgsRUFBRXFjLGFBQUYsRUFBTixDQUF3QixJQUFJelUsSUFBRWpILEVBQUUsRUFBQzR0QixLQUFJLENBQUMsRUFBQyxPQUFNLENBQVAsRUFBRCxFQUFXLEVBQUNBLEtBQUksQ0FBQyxFQUFDRyxLQUFJLEVBQUNqMUIsTUFBSyxlQUFOLEVBQUwsRUFBRCxFQUE4QixFQUFDLFFBQU8sSUFBUixFQUE5QixDQUFMLEVBQVgsRUFBOEQsRUFBQyswQixRQUFPLEVBQUNod0IsS0FBSTJCLENBQUwsRUFBUixFQUE5RCxDQUFMLEVBQUYsQ0FBTixDQUErRixJQUFJd0QsSUFBRWlFLEVBQUV5VSxhQUFGLEVBQU4sQ0FBd0IsSUFBR3hkLE1BQUl0QyxTQUFKLElBQWVzQyxLQUFHLElBQXJCLEVBQTBCO0FBQUMsY0FBTzRmLFNBQVM5YSxDQUFULEVBQVcsYUFBWCxDQUFQO0FBQWlDLE1BQTVELE1BQWdFO0FBQUMsV0FBSTNCLElBQUVkLEVBQUV5QyxDQUFGLEVBQUk5RSxDQUFKLENBQU4sQ0FBYSxPQUFPNGYsU0FBU3pjLENBQVQsRUFBVyx1QkFBWCxDQUFQO0FBQTJDO0FBQUMsUUFBRzBGLEtBQUcsVUFBSCxJQUFldEYsTUFBSTdGLFNBQW5CLElBQThCZ0UsYUFBYTZCLENBQTNDLElBQThDN0IsRUFBRXFYLFNBQUYsSUFBYSxJQUE5RCxFQUFtRTtBQUFDLFNBQUk1WCxJQUFFLElBQUlXLENBQUosQ0FBTSxFQUFDNHRCLEtBQUksQ0FBQyxFQUFDLE9BQU0sQ0FBUCxFQUFELEVBQVcsRUFBQ0MsUUFBTyxFQUFDaHdCLEtBQUkrQixFQUFFcW9CLFNBQVAsRUFBUixFQUFYLEVBQXNDLEVBQUM2RixLQUFJLENBQUMsSUFBRCxFQUFNLElBQU4sRUFBVyxFQUFDRSxRQUFPLEVBQUNud0IsS0FBSSxPQUFLK0IsRUFBRXNvQixTQUFaLEVBQVIsRUFBWCxDQUFMLEVBQXRDLENBQUwsRUFBTixDQUFOLENBQTRHLElBQUkxb0IsSUFBRUgsRUFBRXFjLGFBQUYsRUFBTixDQUF3QixJQUFJelUsSUFBRWpILEVBQUUsRUFBQzR0QixLQUFJLENBQUMsRUFBQyxPQUFNLENBQVAsRUFBRCxFQUFXLEVBQUNBLEtBQUksQ0FBQyxFQUFDRyxLQUFJLEVBQUNqMUIsTUFBSyxhQUFOLEVBQUwsRUFBRCxFQUE0QixFQUFDaTFCLEtBQUksRUFBQ2oxQixNQUFLOEcsRUFBRXVvQixTQUFSLEVBQUwsRUFBNUIsQ0FBTCxFQUFYLEVBQXVFLEVBQUMwRixRQUFPLEVBQUNod0IsS0FBSTJCLENBQUwsRUFBUixFQUF2RSxDQUFMLEVBQUYsQ0FBTixDQUF3RyxJQUFJd0QsSUFBRWlFLEVBQUV5VSxhQUFGLEVBQU4sQ0FBd0IsSUFBR3hkLE1BQUl0QyxTQUFKLElBQWVzQyxLQUFHLElBQXJCLEVBQTBCO0FBQUMsY0FBTzRmLFNBQVM5YSxDQUFULEVBQVcsYUFBWCxDQUFQO0FBQWlDLE1BQTVELE1BQWdFO0FBQUMsV0FBSTNCLElBQUVkLEVBQUV5QyxDQUFGLEVBQUk5RSxDQUFKLENBQU4sQ0FBYSxPQUFPNGYsU0FBU3pjLENBQVQsRUFBVyx1QkFBWCxDQUFQO0FBQTJDO0FBQUMsUUFBRzBGLEtBQUcsVUFBSCxJQUFlNUQsTUFBSXZILFNBQW5CLElBQThCZ0UsYUFBYXVELENBQTNDLElBQThDdkQsRUFBRXFYLFNBQUYsSUFBYSxJQUE5RCxFQUFtRTtBQUFDLFNBQUk1WCxJQUFFLElBQUlFLENBQUosQ0FBTSxFQUFDMHFCLFFBQU9ycUIsRUFBRTNCLENBQVYsRUFBTixDQUFOLENBQTBCLElBQUl1QixJQUFFSCxFQUFFcWMsYUFBRixFQUFOLENBQXdCLElBQUl6VSxJQUFFakgsRUFBRSxFQUFDNHRCLEtBQUksQ0FBQyxFQUFDLE9BQU0sQ0FBUCxFQUFELEVBQVcsRUFBQ0EsS0FBSSxDQUFDLEVBQUNHLEtBQUksRUFBQ2oxQixNQUFLLEtBQU4sRUFBTCxFQUFELEVBQW9CLEVBQUM4MEIsS0FBSSxDQUFDLEVBQUMsT0FBTSxFQUFDM0QsUUFBT3JxQixFQUFFVSxDQUFWLEVBQVAsRUFBRCxFQUFzQixFQUFDLE9BQU0sRUFBQzJwQixRQUFPcnFCLEVBQUUwQixDQUFWLEVBQVAsRUFBdEIsRUFBMkMsRUFBQyxPQUFNLEVBQUMyb0IsUUFBT3JxQixFQUFFUCxDQUFWLEVBQVAsRUFBM0MsQ0FBTCxFQUFwQixDQUFMLEVBQVgsRUFBNkcsRUFBQ3d1QixRQUFPLEVBQUNod0IsS0FBSTJCLENBQUwsRUFBUixFQUE3RyxDQUFMLEVBQUYsQ0FBTixDQUE4SSxJQUFJd0QsSUFBRWlFLEVBQUV5VSxhQUFGLEVBQU4sQ0FBd0IsSUFBR3hkLE1BQUl0QyxTQUFKLElBQWVzQyxLQUFHLElBQXJCLEVBQTBCO0FBQUMsY0FBTzRmLFNBQVM5YSxDQUFULEVBQVcsYUFBWCxDQUFQO0FBQWlDLE1BQTVELE1BQWdFO0FBQUMsV0FBSTNCLElBQUVkLEVBQUV5QyxDQUFGLEVBQUk5RSxDQUFKLENBQU4sQ0FBYSxPQUFPNGYsU0FBU3pjLENBQVQsRUFBVyx1QkFBWCxDQUFQO0FBQTJDO0FBQUMsVUFBSywrQkFBTDtBQUFxQyxFQUF2bkksQ0FBd25Jd2tCLFFBQVFvSSxnQkFBUixHQUF5QixVQUFTcnVCLENBQVQsRUFBVztBQUFDLE9BQUlNLElBQUU2ZCxTQUFTbmUsQ0FBVCxFQUFXLHFCQUFYLENBQU4sQ0FBd0MsSUFBSUMsSUFBRWdtQixRQUFRcUksZ0JBQVIsQ0FBeUJodUIsQ0FBekIsQ0FBTixDQUFrQyxPQUFPTCxDQUFQO0FBQVMsRUFBeEgsQ0FBeUhnbUIsUUFBUXFJLGdCQUFSLEdBQXlCLFVBQVNodUIsQ0FBVCxFQUFXO0FBQUMsT0FBSUwsSUFBRWdtQixRQUFRc0ksV0FBUixDQUFvQmp1QixDQUFwQixDQUFOLENBQTZCLElBQUlOLElBQUVpbUIsUUFBUWxvQixNQUFSLENBQWVrQyxFQUFFdXVCLFdBQWpCLEVBQTZCLElBQTdCLEVBQWtDLFVBQWxDLENBQU4sQ0FBb0QsT0FBT3h1QixDQUFQO0FBQVMsRUFBL0gsQ0FBZ0lpbUIsUUFBUXNJLFdBQVIsR0FBb0IsVUFBUzN1QixDQUFULEVBQVc7QUFBQyxPQUFJdkcsSUFBRXdoQixPQUFOLENBQWMsSUFBSWxiLElBQUV0RyxFQUFFZ2lCLFdBQVIsQ0FBb0IsSUFBSXBiLElBQUU1RyxFQUFFOGhCLE1BQVIsQ0FBZSxJQUFJbmIsSUFBRSxFQUFOLENBQVMsSUFBSVAsSUFBRUcsQ0FBTixDQUFRLElBQUdILEVBQUU5SSxNQUFGLENBQVMsQ0FBVCxFQUFXLENBQVgsS0FBZSxJQUFsQixFQUF1QjtBQUFDLFdBQUsseUJBQUw7QUFBK0IsUUFBSW9HLElBQUU0QyxFQUFFRixDQUFGLEVBQUksQ0FBSixDQUFOLENBQWEsSUFBRzFDLEVBQUVwSCxNQUFGLEdBQVMsQ0FBWixFQUFjO0FBQUMsV0FBSyx5QkFBTDtBQUErQixRQUFHOEosRUFBRTlJLE1BQUYsQ0FBU29HLEVBQUUsQ0FBRixDQUFULEVBQWMsQ0FBZCxLQUFrQixJQUFyQixFQUEwQjtBQUFDLFdBQUsseUJBQUw7QUFBK0IsUUFBSXVELElBQUVYLEVBQUVGLENBQUYsRUFBSTFDLEVBQUUsQ0FBRixDQUFKLENBQU4sQ0FBZ0IsSUFBR3VELEVBQUUzSyxNQUFGLEdBQVMsQ0FBWixFQUFjO0FBQUMsV0FBSyx5QkFBTDtBQUErQixNQUFFNjRCLFdBQUYsR0FBY3Z1QixFQUFFUixDQUFGLEVBQUlhLEVBQUUsQ0FBRixDQUFKLENBQWQsQ0FBd0IsT0FBT04sQ0FBUDtBQUFTLEVBQTdXLENBQThXaW1CLFFBQVF3SSxhQUFSLEdBQXNCLFVBQVM3dUIsQ0FBVCxFQUFXO0FBQUMsT0FBSUksSUFBRSxFQUFOLENBQVMsSUFBR0osYUFBYW1YLE1BQWIsSUFBcUJuWCxFQUFFeVgsU0FBMUIsRUFBb0M7QUFBQ3JYLE9BQUV2RixHQUFGLEdBQU0sS0FBTixDQUFZdUYsRUFBRW5DLENBQUYsR0FBSXVmLFVBQVV4ZCxFQUFFL0IsQ0FBRixDQUFJcUQsUUFBSixDQUFhLEVBQWIsQ0FBVixDQUFKLENBQWdDbEIsRUFBRWpELENBQUYsR0FBSXFnQixVQUFVeGQsRUFBRTdDLENBQUYsQ0FBSW1FLFFBQUosQ0FBYSxFQUFiLENBQVYsQ0FBSixDQUFnQ2xCLEVBQUVKLENBQUYsR0FBSXdkLFVBQVV4ZCxFQUFFQSxDQUFGLENBQUlzQixRQUFKLENBQWEsRUFBYixDQUFWLENBQUosQ0FBZ0NsQixFQUFFVSxDQUFGLEdBQUkwYyxVQUFVeGQsRUFBRWMsQ0FBRixDQUFJUSxRQUFKLENBQWEsRUFBYixDQUFWLENBQUosQ0FBZ0NsQixFQUFFMEIsQ0FBRixHQUFJMGIsVUFBVXhkLEVBQUU4QixDQUFGLENBQUlSLFFBQUosQ0FBYSxFQUFiLENBQVYsQ0FBSixDQUFnQ2xCLEVBQUVpdEIsRUFBRixHQUFLN1AsVUFBVXhkLEVBQUVvWCxJQUFGLENBQU85VixRQUFQLENBQWdCLEVBQWhCLENBQVYsQ0FBTCxDQUFvQ2xCLEVBQUVrdEIsRUFBRixHQUFLOVAsVUFBVXhkLEVBQUVxWCxJQUFGLENBQU8vVixRQUFQLENBQWdCLEVBQWhCLENBQVYsQ0FBTCxDQUFvQ2xCLEVBQUVvdEIsRUFBRixHQUFLaFEsVUFBVXhkLEVBQUVzWCxLQUFGLENBQVFoVyxRQUFSLENBQWlCLEVBQWpCLENBQVYsQ0FBTCxDQUFxQyxPQUFPbEIsQ0FBUDtBQUFTLElBQXZVLE1BQTJVO0FBQUMsU0FBR0osYUFBYW1YLE1BQWIsSUFBcUJuWCxFQUFFd1gsUUFBMUIsRUFBbUM7QUFBQ3BYLFNBQUV2RixHQUFGLEdBQU0sS0FBTixDQUFZdUYsRUFBRW5DLENBQUYsR0FBSXVmLFVBQVV4ZCxFQUFFL0IsQ0FBRixDQUFJcUQsUUFBSixDQUFhLEVBQWIsQ0FBVixDQUFKLENBQWdDbEIsRUFBRWpELENBQUYsR0FBSXFnQixVQUFVeGQsRUFBRTdDLENBQUYsQ0FBSW1FLFFBQUosQ0FBYSxFQUFiLENBQVYsQ0FBSixDQUFnQyxPQUFPbEIsQ0FBUDtBQUFTLE1BQXpILE1BQTZIO0FBQUMsV0FBR0osYUFBYTRXLEtBQUt0WCxNQUFMLENBQVlzbkIsS0FBekIsSUFBZ0M1bUIsRUFBRXlYLFNBQXJDLEVBQStDO0FBQUMsYUFBSS9XLElBQUVWLEVBQUVncEIsc0JBQUYsRUFBTixDQUFpQyxJQUFHdG9CLE1BQUksT0FBSixJQUFhQSxNQUFJLE9BQXBCLEVBQTRCO0FBQUMsaUJBQUsscUNBQW1DQSxDQUF4QztBQUEwQyxjQUFJTCxJQUFFTCxFQUFFOG9CLGlCQUFGLEVBQU4sQ0FBNEIxb0IsRUFBRXZGLEdBQUYsR0FBTSxJQUFOLENBQVd1RixFQUFFNUIsR0FBRixHQUFNa0MsQ0FBTixDQUFRTixFQUFFM0IsQ0FBRixHQUFJK2UsVUFBVW5kLEVBQUU1QixDQUFaLENBQUosQ0FBbUIyQixFQUFFMUIsQ0FBRixHQUFJOGUsVUFBVW5kLEVBQUUzQixDQUFaLENBQUosQ0FBbUIwQixFQUFFSixDQUFGLEdBQUl3ZCxVQUFVeGQsRUFBRXlvQixTQUFaLENBQUosQ0FBMkIsT0FBT3JvQixDQUFQO0FBQVMsUUFBalIsTUFBcVI7QUFBQyxhQUFHSixhQUFhNFcsS0FBS3RYLE1BQUwsQ0FBWXNuQixLQUF6QixJQUFnQzVtQixFQUFFd1gsUUFBckMsRUFBOEM7QUFBQyxlQUFJOVcsSUFBRVYsRUFBRWdwQixzQkFBRixFQUFOLENBQWlDLElBQUd0b0IsTUFBSSxPQUFKLElBQWFBLE1BQUksT0FBcEIsRUFBNEI7QUFBQyxtQkFBSyxxQ0FBbUNBLENBQXhDO0FBQTBDLGdCQUFJTCxJQUFFTCxFQUFFOG9CLGlCQUFGLEVBQU4sQ0FBNEIxb0IsRUFBRXZGLEdBQUYsR0FBTSxJQUFOLENBQVd1RixFQUFFNUIsR0FBRixHQUFNa0MsQ0FBTixDQUFRTixFQUFFM0IsQ0FBRixHQUFJK2UsVUFBVW5kLEVBQUU1QixDQUFaLENBQUosQ0FBbUIyQixFQUFFMUIsQ0FBRixHQUFJOGUsVUFBVW5kLEVBQUUzQixDQUFaLENBQUosQ0FBbUIsT0FBTzBCLENBQVA7QUFBUztBQUFDO0FBQUM7QUFBQyxVQUFLLDBCQUFMO0FBQWdDLEVBQW5pQztBQUMxb2pCK1csUUFBTzJYLDRCQUFQLEdBQW9DLFVBQVNwdUIsQ0FBVCxFQUFXO0FBQUMsVUFBT3VhLFFBQVFRLFdBQVIsQ0FBb0IvYSxDQUFwQixFQUFzQixDQUF0QixDQUFQO0FBQWdDLEVBQWhGLENBQWlGeVcsT0FBTzRYLGlDQUFQLEdBQXlDLFVBQVNodkIsQ0FBVCxFQUFXO0FBQUMsT0FBSTlCLElBQUVnZCxPQUFOLENBQWMsSUFBSXhoQixJQUFFd0UsRUFBRXFkLElBQVIsQ0FBYSxJQUFJN2EsSUFBRTBXLE9BQU8yWCw0QkFBUCxDQUFvQy91QixDQUFwQyxDQUFOLENBQTZDLElBQUk1QyxJQUFFMUQsRUFBRXNHLENBQUYsRUFBSVUsRUFBRSxDQUFGLENBQUosQ0FBTixDQUFnQixJQUFJRixJQUFFOUcsRUFBRXNHLENBQUYsRUFBSVUsRUFBRSxDQUFGLENBQUosQ0FBTixDQUFnQixJQUFJTCxJQUFFM0csRUFBRXNHLENBQUYsRUFBSVUsRUFBRSxDQUFGLENBQUosQ0FBTixDQUFnQixJQUFJSixJQUFFNUcsRUFBRXNHLENBQUYsRUFBSVUsRUFBRSxDQUFGLENBQUosQ0FBTixDQUFnQixJQUFJWCxJQUFFckcsRUFBRXNHLENBQUYsRUFBSVUsRUFBRSxDQUFGLENBQUosQ0FBTixDQUFnQixJQUFJWixJQUFFcEcsRUFBRXNHLENBQUYsRUFBSVUsRUFBRSxDQUFGLENBQUosQ0FBTixDQUFnQixJQUFJNkIsSUFBRTdJLEVBQUVzRyxDQUFGLEVBQUlVLEVBQUUsQ0FBRixDQUFKLENBQU4sQ0FBZ0IsSUFBSUQsSUFBRS9HLEVBQUVzRyxDQUFGLEVBQUlVLEVBQUUsQ0FBRixDQUFKLENBQU4sQ0FBZ0IsSUFBSVQsSUFBRXZHLEVBQUVzRyxDQUFGLEVBQUlVLEVBQUUsQ0FBRixDQUFKLENBQU4sQ0FBZ0IsSUFBSUEsSUFBRSxJQUFJL1EsS0FBSixFQUFOLENBQWtCK1EsRUFBRTNKLElBQUYsQ0FBT3FHLENBQVAsRUFBU29ELENBQVQsRUFBV0gsQ0FBWCxFQUFhQyxDQUFiLEVBQWVQLENBQWYsRUFBaUJELENBQWpCLEVBQW1CeUMsQ0FBbkIsRUFBcUI5QixDQUFyQixFQUF1QlIsQ0FBdkIsRUFBMEIsT0FBT1MsQ0FBUDtBQUFTLEVBQWxVLENBQW1VMFcsT0FBT2xYLFNBQVAsQ0FBaUIrdUIsMkJBQWpCLEdBQTZDLFVBQVNodkIsQ0FBVCxFQUFXO0FBQUMsT0FBSUssSUFBRWtlLFNBQVN2ZSxDQUFULENBQU4sQ0FBa0IsSUFBSUksSUFBRStXLE9BQU80WCxpQ0FBUCxDQUF5QzF1QixDQUF6QyxDQUFOLENBQWtELEtBQUtvdEIsWUFBTCxDQUFrQnJ0QixFQUFFLENBQUYsQ0FBbEIsRUFBdUJBLEVBQUUsQ0FBRixDQUF2QixFQUE0QkEsRUFBRSxDQUFGLENBQTVCLEVBQWlDQSxFQUFFLENBQUYsQ0FBakMsRUFBc0NBLEVBQUUsQ0FBRixDQUF0QyxFQUEyQ0EsRUFBRSxDQUFGLENBQTNDLEVBQWdEQSxFQUFFLENBQUYsQ0FBaEQsRUFBcURBLEVBQUUsQ0FBRixDQUFyRDtBQUEyRCxFQUF4TCxDQUF5TCtXLE9BQU9sWCxTQUFQLENBQWlCNHBCLGtCQUFqQixHQUFvQyxVQUFTeHBCLENBQVQsRUFBVztBQUFDLE9BQUlELElBQUUrVyxPQUFPNFgsaUNBQVAsQ0FBeUMxdUIsQ0FBekMsQ0FBTixDQUFrRCxLQUFLb3RCLFlBQUwsQ0FBa0JydEIsRUFBRSxDQUFGLENBQWxCLEVBQXVCQSxFQUFFLENBQUYsQ0FBdkIsRUFBNEJBLEVBQUUsQ0FBRixDQUE1QixFQUFpQ0EsRUFBRSxDQUFGLENBQWpDLEVBQXNDQSxFQUFFLENBQUYsQ0FBdEMsRUFBMkNBLEVBQUUsQ0FBRixDQUEzQyxFQUFnREEsRUFBRSxDQUFGLENBQWhELEVBQXFEQSxFQUFFLENBQUYsQ0FBckQ7QUFBMkQsRUFBN0osQ0FBOEorVyxPQUFPbFgsU0FBUCxDQUFpQjhwQixrQkFBakIsR0FBb0MsVUFBUzVzQixDQUFULEVBQVc7QUFBQyxPQUFJa0QsQ0FBSixFQUFNRSxDQUFOLEVBQVFDLENBQVIsRUFBVUosQ0FBVixFQUFZTSxDQUFaLEVBQWNYLENBQWQsRUFBZ0JDLENBQWhCLEVBQWtCUyxDQUFsQixDQUFvQixJQUFJNkIsSUFBRTJZLE9BQU4sQ0FBYyxJQUFJcGIsSUFBRXlDLEVBQUV1WixVQUFSLENBQW1CLElBQUd2WixFQUFFOFosU0FBRixDQUFZamYsQ0FBWixNQUFpQixLQUFwQixFQUEwQjtBQUFDLFdBQUssc0JBQUw7QUFBNEIsUUFBRztBQUFDa0QsU0FBRVIsRUFBRTFDLENBQUYsRUFBSSxDQUFKLEVBQU0sQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FBTixFQUFjLElBQWQsQ0FBRixDQUFzQm9ELElBQUVWLEVBQUUxQyxDQUFGLEVBQUksQ0FBSixFQUFNLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLENBQU4sRUFBYyxJQUFkLENBQUYsQ0FBc0JxRCxJQUFFWCxFQUFFMUMsQ0FBRixFQUFJLENBQUosRUFBTSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxDQUFOLEVBQWMsSUFBZCxDQUFGLENBQXNCaUQsSUFBRVAsRUFBRTFDLENBQUYsRUFBSSxDQUFKLEVBQU0sQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FBTixFQUFjLElBQWQsQ0FBRixDQUFzQnVELElBQUViLEVBQUUxQyxDQUFGLEVBQUksQ0FBSixFQUFNLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLENBQU4sRUFBYyxJQUFkLENBQUYsQ0FBc0I0QyxJQUFFRixFQUFFMUMsQ0FBRixFQUFJLENBQUosRUFBTSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxDQUFOLEVBQWMsSUFBZCxDQUFGLENBQXNCNkMsSUFBRUgsRUFBRTFDLENBQUYsRUFBSSxDQUFKLEVBQU0sQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FBTixFQUFjLElBQWQsQ0FBRixDQUFzQnNELElBQUVaLEVBQUUxQyxDQUFGLEVBQUksQ0FBSixFQUFNLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLENBQU4sRUFBYyxJQUFkLENBQUY7QUFBc0IsSUFBcEwsQ0FBb0wsT0FBTTFELENBQU4sRUFBUTtBQUFDLFdBQUssd0NBQUw7QUFBOEMsU0FBS2cwQixZQUFMLENBQWtCcHRCLENBQWxCLEVBQW9CRSxDQUFwQixFQUFzQkMsQ0FBdEIsRUFBd0JKLENBQXhCLEVBQTBCTSxDQUExQixFQUE0QlgsQ0FBNUIsRUFBOEJDLENBQTlCLEVBQWdDUyxDQUFoQztBQUFtQyxFQUExYSxDQUEyYTBXLE9BQU9sWCxTQUFQLENBQWlCZ3ZCLGtCQUFqQixHQUFvQyxVQUFTNXVCLENBQVQsRUFBVztBQUFDLE9BQUlsRCxJQUFFOGQsT0FBTixDQUFjLElBQUk3YSxJQUFFakQsRUFBRW1lLElBQVIsQ0FBYSxJQUFHbmUsRUFBRWlmLFNBQUYsQ0FBWS9iLENBQVosTUFBaUIsS0FBcEIsRUFBMEI7QUFBQyxXQUFLLGdDQUFMO0FBQXNDLFFBQUlLLElBQUV2RCxFQUFFc2UsV0FBRixDQUFjcGIsQ0FBZCxFQUFnQixDQUFoQixDQUFOLENBQXlCLElBQUdLLEVBQUUzSyxNQUFGLEtBQVcsQ0FBWCxJQUFjc0ssRUFBRXRKLE1BQUYsQ0FBUzJKLEVBQUUsQ0FBRixDQUFULEVBQWMsQ0FBZCxNQUFtQixJQUFqQyxJQUF1Q0wsRUFBRXRKLE1BQUYsQ0FBUzJKLEVBQUUsQ0FBRixDQUFULEVBQWMsQ0FBZCxNQUFtQixJQUE3RCxFQUFrRTtBQUFDLFdBQUssaUNBQUw7QUFBdUMsUUFBSVgsSUFBRUssRUFBRUMsQ0FBRixFQUFJSyxFQUFFLENBQUYsQ0FBSixDQUFOLENBQWdCLElBQUlWLElBQUVJLEVBQUVDLENBQUYsRUFBSUssRUFBRSxDQUFGLENBQUosQ0FBTixDQUFnQixLQUFLb1gsU0FBTCxDQUFlL1gsQ0FBZixFQUFpQkMsQ0FBakI7QUFBb0IsRUFBblUsQ0FBb1VtWCxPQUFPbFgsU0FBUCxDQUFpQitwQixrQkFBakIsR0FBb0MsVUFBUzVwQixDQUFULEVBQVc7QUFBQyxPQUFJQyxJQUFFNGEsT0FBTixDQUFjLElBQUc1YSxFQUFFK2IsU0FBRixDQUFZaGMsQ0FBWixNQUFpQixLQUFwQixFQUEwQjtBQUFDLFdBQUssc0JBQUw7QUFBNEIsUUFBR0MsRUFBRXViLFlBQUYsQ0FBZXhiLENBQWYsRUFBaUIsQ0FBakIsRUFBbUIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFuQixNQUE0Qix3QkFBL0IsRUFBd0Q7QUFBQyxXQUFLLDBCQUFMO0FBQWdDLFFBQUlNLElBQUVMLEVBQUV1YixZQUFGLENBQWV4YixDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBbkIsQ0FBTixDQUFnQyxLQUFLNnVCLGtCQUFMLENBQXdCdnVCLENBQXhCO0FBQTJCLEVBQXpRLENBQTBReVcsT0FBT2xYLFNBQVAsQ0FBaUJncUIsaUJBQWpCLEdBQW1DLFVBQVM3cEIsQ0FBVCxFQUFXSixDQUFYLEVBQWE7QUFBQyxPQUFJVSxDQUFKLEVBQU1MLENBQU4sQ0FBUUssSUFBRSxJQUFJcEMsSUFBSixFQUFGLENBQWFvQyxFQUFFd3VCLFdBQUYsQ0FBYzl1QixDQUFkLEVBQWlCQyxJQUFFSyxFQUFFeXVCLGVBQUYsRUFBRixDQUFzQixLQUFLbkYsa0JBQUwsQ0FBd0IzcEIsQ0FBeEI7QUFBMkIsRUFBeEk7QUFDcHVELEtBQUkrdUIsaUJBQWUsSUFBSXhVLE1BQUosQ0FBVyxFQUFYLENBQW5CLENBQWtDd1UsZUFBZUMsT0FBZixDQUF1QixXQUF2QixFQUFtQyxJQUFuQyxFQUF5QyxTQUFTQyx3Q0FBVCxDQUFrRHR2QixDQUFsRCxFQUFvRDdDLENBQXBELEVBQXNEdUQsQ0FBdEQsRUFBd0Q7QUFBQyxPQUFJTixJQUFFLFNBQUZBLENBQUUsQ0FBU0wsQ0FBVCxFQUFXO0FBQUMsWUFBTzZXLEtBQUt0WCxNQUFMLENBQVlDLElBQVosQ0FBaUJsRSxVQUFqQixDQUE0QjBFLENBQTVCLEVBQThCVyxDQUE5QixDQUFQO0FBQXdDLElBQTFELENBQTJELElBQUlMLElBQUVELEVBQUVKLENBQUYsQ0FBTixDQUFXLE9BQU80VyxLQUFLdFgsTUFBTCxDQUFZQyxJQUFaLENBQWlCb2tCLHNCQUFqQixDQUF3Q3RqQixDQUF4QyxFQUEwQ0ssQ0FBMUMsRUFBNEN2RCxDQUE1QyxDQUFQO0FBQXNELFdBQVNpcEIsdUJBQVQsQ0FBaUNqcEIsQ0FBakMsRUFBbUM2QyxDQUFuQyxFQUFxQztBQUFDLE9BQUlLLElBQUUsRUFBTixDQUFTLElBQUlLLElBQUVWLElBQUUsQ0FBRixHQUFJN0MsRUFBRXBILE1BQVosQ0FBbUIsS0FBSSxJQUFJcUssSUFBRSxDQUFWLEVBQVlBLElBQUVNLENBQWQsRUFBZ0JOLEdBQWhCLEVBQW9CO0FBQUNDLFNBQUVBLElBQUUsR0FBSjtBQUFRLFdBQU9BLElBQUVsRCxDQUFUO0FBQVcsU0FBTzhDLFNBQVAsQ0FBaUJ1bUIsSUFBakIsR0FBc0IsVUFBU3htQixDQUFULEVBQVdVLENBQVgsRUFBYTtBQUFDLE9BQUlOLElBQUUsU0FBRkEsQ0FBRSxDQUFTakQsQ0FBVCxFQUFXO0FBQUMsWUFBT3laLEtBQUt0WCxNQUFMLENBQVlDLElBQVosQ0FBaUJsRSxVQUFqQixDQUE0QjhCLENBQTVCLEVBQThCdUQsQ0FBOUIsQ0FBUDtBQUF3QyxJQUExRCxDQUEyRCxJQUFJTCxJQUFFRCxFQUFFSixDQUFGLENBQU4sQ0FBVyxPQUFPLEtBQUtpbkIsbUJBQUwsQ0FBeUI1bUIsQ0FBekIsRUFBMkJLLENBQTNCLENBQVA7QUFBcUMsRUFBL0ksQ0FBZ0p5VyxPQUFPbFgsU0FBUCxDQUFpQmduQixtQkFBakIsR0FBcUMsVUFBUzlwQixDQUFULEVBQVdrRCxDQUFYLEVBQWE7QUFBQyxPQUFJTixJQUFFNlcsS0FBS3RYLE1BQUwsQ0FBWUMsSUFBWixDQUFpQm9rQixzQkFBakIsQ0FBd0N4bUIsQ0FBeEMsRUFBMENrRCxDQUExQyxFQUE0QyxLQUFLcEMsQ0FBTCxDQUFPZ1EsU0FBUCxFQUE1QyxDQUFOLENBQXNFLElBQUk3TixJQUFFa1csWUFBWXZXLENBQVosRUFBYyxFQUFkLENBQU4sQ0FBd0IsSUFBSUMsSUFBRSxLQUFLdXZCLFNBQUwsQ0FBZW52QixDQUFmLENBQU4sQ0FBd0IsSUFBSU0sSUFBRVYsRUFBRXNCLFFBQUYsQ0FBVyxFQUFYLENBQU4sQ0FBcUIsT0FBTzhrQix3QkFBd0IxbEIsQ0FBeEIsRUFBMEIsS0FBS3pDLENBQUwsQ0FBT2dRLFNBQVAsRUFBMUIsQ0FBUDtBQUFxRCxFQUFuUCxDQUFvUCxTQUFTdWhCLFlBQVQsQ0FBc0JudkIsQ0FBdEIsRUFBd0JLLENBQXhCLEVBQTBCdkQsQ0FBMUIsRUFBNEI7QUFBQyxPQUFJaUQsSUFBRSxFQUFOO0FBQUEsT0FBU0osSUFBRSxDQUFYLENBQWEsT0FBTUksRUFBRXJLLE1BQUYsR0FBUzJLLENBQWYsRUFBaUI7QUFBQ04sVUFBRzRXLFVBQVU3WixFQUFFK1osVUFBVTdXLElBQUVzQyxPQUFPQyxZQUFQLENBQW9CblQsS0FBcEIsQ0FBMEJrVCxNQUExQixFQUFpQyxDQUFDLENBQUMzQyxJQUFFLFVBQUgsS0FBZ0IsRUFBakIsRUFBb0IsQ0FBQ0EsSUFBRSxRQUFILEtBQWMsRUFBbEMsRUFBcUMsQ0FBQ0EsSUFBRSxLQUFILEtBQVcsQ0FBaEQsRUFBa0RBLElBQUUsR0FBcEQsQ0FBakMsQ0FBWixDQUFGLENBQVYsQ0FBSCxDQUF5SEEsS0FBRyxDQUFIO0FBQUssV0FBT0ksQ0FBUDtBQUFTLFNBQU9ILFNBQVAsQ0FBaUJ3dkIsT0FBakIsR0FBeUIsVUFBU3R5QixDQUFULEVBQVd1RCxDQUFYLEVBQWFWLENBQWIsRUFBZTtBQUFDLE9BQUlLLElBQUUsU0FBRkEsQ0FBRSxDQUFTTixDQUFULEVBQVc7QUFBQyxZQUFPNlcsS0FBS3RYLE1BQUwsQ0FBWUMsSUFBWixDQUFpQjBYLE9BQWpCLENBQXlCbFgsQ0FBekIsRUFBMkJXLENBQTNCLENBQVA7QUFBcUMsSUFBdkQsQ0FBd0QsSUFBSU4sSUFBRUMsRUFBRTZXLFVBQVUvWixDQUFWLENBQUYsQ0FBTixDQUFzQixJQUFHNkMsTUFBSTVELFNBQVAsRUFBaUI7QUFBQzRELFNBQUUsQ0FBQyxDQUFIO0FBQUssV0FBTyxLQUFLK21CLHNCQUFMLENBQTRCM21CLENBQTVCLEVBQThCTSxDQUE5QixFQUFnQ1YsQ0FBaEMsQ0FBUDtBQUEwQyxFQUF4TCxDQUF5TG1YLE9BQU9sWCxTQUFQLENBQWlCOG1CLHNCQUFqQixHQUF3QyxVQUFTdm1CLENBQVQsRUFBV0UsQ0FBWCxFQUFhRCxDQUFiLEVBQWU7QUFBQyxPQUFJTCxJQUFFNFcsVUFBVXhXLENBQVYsQ0FBTixDQUFtQixJQUFJWCxJQUFFTyxFQUFFckssTUFBUixDQUFlLElBQUl1TSxJQUFFLEtBQUtyRSxDQUFMLENBQU9nUSxTQUFQLEtBQW1CLENBQXpCLENBQTJCLElBQUk1TixJQUFFc0UsS0FBS3pDLElBQUwsQ0FBVUksSUFBRSxDQUFaLENBQU4sQ0FBcUIsSUFBSXRDLENBQUosQ0FBTSxJQUFJZSxJQUFFLFNBQUZBLENBQUUsQ0FBU3RILENBQVQsRUFBVztBQUFDLFlBQU9tZCxLQUFLdFgsTUFBTCxDQUFZQyxJQUFaLENBQWlCMFgsT0FBakIsQ0FBeUJ4ZCxDQUF6QixFQUEyQmlILENBQTNCLENBQVA7QUFBcUMsSUFBdkQsQ0FBd0QsSUFBR0QsTUFBSSxDQUFDLENBQUwsSUFBUUEsTUFBSXJFLFNBQWYsRUFBeUI7QUFBQ3FFLFNBQUVaLENBQUY7QUFBSSxJQUE5QixNQUFrQztBQUFDLFNBQUdZLE1BQUksQ0FBQyxDQUFSLEVBQVU7QUFBQ0EsV0FBRUosSUFBRVIsQ0FBRixHQUFJLENBQU47QUFBUSxNQUFuQixNQUF1QjtBQUFDLFdBQUdZLElBQUUsQ0FBQyxDQUFOLEVBQVE7QUFBQyxlQUFLLHFCQUFMO0FBQTJCO0FBQUM7QUFBQyxRQUFHSixJQUFHUixJQUFFWSxDQUFGLEdBQUksQ0FBVixFQUFhO0FBQUMsV0FBSyxlQUFMO0FBQXFCLFFBQUlWLElBQUUsRUFBTixDQUFTLElBQUdVLElBQUUsQ0FBTCxFQUFPO0FBQUNWLFNBQUUsSUFBSXJRLEtBQUosQ0FBVStRLENBQVYsQ0FBRixDQUFlLElBQUk0VixZQUFKLEdBQW1CN0csU0FBbkIsQ0FBNkJ6UCxDQUE3QixFQUFnQ0EsSUFBRTRDLE9BQU9DLFlBQVAsQ0FBb0JuVCxLQUFwQixDQUEwQmtULE1BQTFCLEVBQWlDNUMsQ0FBakMsQ0FBRjtBQUFzQyxRQUFJOUIsSUFBRStZLFVBQVVqVyxFQUFFbVcsVUFBVSxxQ0FBbUM5VyxDQUFuQyxHQUFxQ0wsQ0FBL0MsQ0FBRixDQUFWLENBQU4sQ0FBc0UsSUFBSVEsSUFBRSxFQUFOLENBQVMsS0FBSVAsSUFBRSxDQUFOLEVBQVFBLElBQUVLLElBQUVJLENBQUYsR0FBSVosQ0FBSixHQUFNLENBQWhCLEVBQWtCRyxLQUFHLENBQXJCLEVBQXVCO0FBQUNPLE9BQUVQLENBQUYsSUFBSyxDQUFMO0FBQU8sUUFBSTdDLElBQUV3RixPQUFPQyxZQUFQLENBQW9CblQsS0FBcEIsQ0FBMEJrVCxNQUExQixFQUFpQ3BDLENBQWpDLElBQW9DLE1BQXBDLEdBQTJDUixDQUFqRCxDQUFtRCxJQUFJRCxJQUFFMHZCLGFBQWF2eEIsQ0FBYixFQUFlZCxFQUFFcEgsTUFBakIsRUFBd0JnTCxDQUF4QixDQUFOLENBQWlDLElBQUllLElBQUUsRUFBTixDQUFTLEtBQUk5QixJQUFFLENBQU4sRUFBUUEsSUFBRTdDLEVBQUVwSCxNQUFaLEVBQW1CaUssS0FBRyxDQUF0QixFQUF3QjtBQUFDOEIsT0FBRTlCLENBQUYsSUFBSzdDLEVBQUUwRixVQUFGLENBQWE3QyxDQUFiLElBQWdCRixFQUFFK0MsVUFBRixDQUFhN0MsQ0FBYixDQUFyQjtBQUFxQyxRQUFJYyxJQUFHLFNBQVEsSUFBRVQsQ0FBRixHQUFJaUMsQ0FBYixHQUFpQixHQUF2QixDQUEyQlIsRUFBRSxDQUFGLEtBQU0sQ0FBQ2hCLENBQVAsQ0FBUyxLQUFJZCxJQUFFLENBQU4sRUFBUUEsSUFBRUgsQ0FBVixFQUFZRyxHQUFaLEVBQWdCO0FBQUM4QixPQUFFaEwsSUFBRixDQUFPbUgsRUFBRTRFLFVBQUYsQ0FBYTdDLENBQWIsQ0FBUDtBQUF3QixNQUFFbEosSUFBRixDQUFPLEdBQVAsRUFBWSxPQUFPc3ZCLHdCQUF3QixLQUFLbUosU0FBTCxDQUFlLElBQUk3bUIsVUFBSixDQUFlNUcsQ0FBZixDQUFmLEVBQWtDUixRQUFsQyxDQUEyQyxFQUEzQyxDQUF4QixFQUF1RSxLQUFLckQsQ0FBTCxDQUFPZ1EsU0FBUCxFQUF2RSxDQUFQO0FBQWtHLEVBQXQzQixDQUF1M0IsU0FBU3loQiw4QkFBVCxDQUF3Q2h2QixDQUF4QyxFQUEwQ1YsQ0FBMUMsRUFBNENLLENBQTVDLEVBQThDO0FBQUMsT0FBSUQsSUFBRSxJQUFJK1csTUFBSixFQUFOLENBQW1CL1csRUFBRTBYLFNBQUYsQ0FBWTlYLENBQVosRUFBY0ssQ0FBZCxFQUFpQixJQUFJbEQsSUFBRWlELEVBQUV3WCxRQUFGLENBQVdsWCxDQUFYLENBQU4sQ0FBb0IsT0FBT3ZELENBQVA7QUFBUyxXQUFTd3lCLGdDQUFULENBQTBDanZCLENBQTFDLEVBQTRDTCxDQUE1QyxFQUE4Q0QsQ0FBOUMsRUFBZ0Q7QUFBQyxPQUFJakQsSUFBRXV5QiwrQkFBK0JodkIsQ0FBL0IsRUFBaUNMLENBQWpDLEVBQW1DRCxDQUFuQyxDQUFOLENBQTRDLElBQUlKLElBQUU3QyxFQUFFbUUsUUFBRixDQUFXLEVBQVgsRUFBZXdaLE9BQWYsQ0FBdUIsUUFBdkIsRUFBZ0MsRUFBaEMsQ0FBTixDQUEwQyxPQUFPOWEsQ0FBUDtBQUFTLFdBQVM0dkIsNENBQVQsQ0FBc0Q3dkIsQ0FBdEQsRUFBd0Q7QUFBQyxRQUFJLElBQUk1QyxDQUFSLElBQWF5WixLQUFLdFgsTUFBTCxDQUFZQyxJQUFaLENBQWlCcWhCLGNBQTlCLEVBQTZDO0FBQUMsU0FBSTVnQixJQUFFNFcsS0FBS3RYLE1BQUwsQ0FBWUMsSUFBWixDQUFpQnFoQixjQUFqQixDQUFnQ3pqQixDQUFoQyxDQUFOLENBQXlDLElBQUlpRCxJQUFFSixFQUFFakssTUFBUixDQUFlLElBQUdnSyxFQUFFb0ksU0FBRixDQUFZLENBQVosRUFBYy9ILENBQWQsS0FBa0JKLENBQXJCLEVBQXVCO0FBQUMsV0FBSUssSUFBRSxDQUFDbEQsQ0FBRCxFQUFHNEMsRUFBRW9JLFNBQUYsQ0FBWS9ILENBQVosQ0FBSCxDQUFOLENBQXlCLE9BQU9DLENBQVA7QUFBUztBQUFDLFdBQU0sRUFBTjtBQUFTLFNBQU9KLFNBQVAsQ0FBaUJaLE1BQWpCLEdBQXdCLFVBQVNVLENBQVQsRUFBV1EsQ0FBWCxFQUFhO0FBQUNBLE9BQUVBLEVBQUV1YSxPQUFGLENBQVVzVSxjQUFWLEVBQXlCLEVBQXpCLENBQUYsQ0FBK0I3dUIsSUFBRUEsRUFBRXVhLE9BQUYsQ0FBVSxTQUFWLEVBQW9CLEVBQXBCLENBQUYsQ0FBMEIsSUFBSTFhLElBQUVrVyxZQUFZL1YsQ0FBWixFQUFjLEVBQWQsQ0FBTixDQUF3QixJQUFHSCxFQUFFNk4sU0FBRixLQUFjLEtBQUtoUSxDQUFMLENBQU9nUSxTQUFQLEVBQWpCLEVBQW9DO0FBQUMsWUFBTyxDQUFQO0FBQVMsUUFBSXhVLElBQUUsS0FBS21lLFFBQUwsQ0FBY3hYLENBQWQsQ0FBTixDQUF1QixJQUFJakQsSUFBRTFELEVBQUU2SCxRQUFGLENBQVcsRUFBWCxFQUFld1osT0FBZixDQUF1QixRQUF2QixFQUFnQyxFQUFoQyxDQUFOLENBQTBDLElBQUlqYixJQUFFK3ZCLDZDQUE2Q3p5QixDQUE3QyxDQUFOLENBQXNELElBQUcwQyxFQUFFOUosTUFBRixJQUFVLENBQWIsRUFBZTtBQUFDLFlBQU8sS0FBUDtBQUFhLFFBQUlpSyxJQUFFSCxFQUFFLENBQUYsQ0FBTixDQUFXLElBQUlDLElBQUVELEVBQUUsQ0FBRixDQUFOLENBQVcsSUFBSWEsSUFBRSxTQUFGQSxDQUFFLENBQVNELENBQVQsRUFBVztBQUFDLFlBQU9tVyxLQUFLdFgsTUFBTCxDQUFZQyxJQUFaLENBQWlCbEUsVUFBakIsQ0FBNEJvRixDQUE1QixFQUE4QlQsQ0FBOUIsQ0FBUDtBQUF3QyxJQUExRCxDQUEyRCxJQUFJSyxJQUFFSyxFQUFFWCxDQUFGLENBQU4sQ0FBVyxPQUFPRCxLQUFHTyxDQUFWO0FBQWEsRUFBbGEsQ0FBbWE4VyxPQUFPbFgsU0FBUCxDQUFpQnNuQixxQkFBakIsR0FBdUMsVUFBU3BxQixDQUFULEVBQVd1RCxDQUFYLEVBQWE7QUFBQ0EsT0FBRUEsRUFBRW9hLE9BQUYsQ0FBVXNVLGNBQVYsRUFBeUIsRUFBekIsQ0FBRixDQUErQjF1QixJQUFFQSxFQUFFb2EsT0FBRixDQUFVLFNBQVYsRUFBb0IsRUFBcEIsQ0FBRixDQUEwQixJQUFJMWEsSUFBRWtXLFlBQVk1VixDQUFaLEVBQWMsRUFBZCxDQUFOLENBQXdCLElBQUdOLEVBQUU2TixTQUFGLEtBQWMsS0FBS2hRLENBQUwsQ0FBT2dRLFNBQVAsRUFBakIsRUFBb0M7QUFBQyxZQUFPLENBQVA7QUFBUyxRQUFJbk8sSUFBRSxLQUFLOFgsUUFBTCxDQUFjeFgsQ0FBZCxDQUFOLENBQXVCLElBQUlQLElBQUVDLEVBQUV3QixRQUFGLENBQVcsRUFBWCxFQUFld1osT0FBZixDQUF1QixRQUF2QixFQUFnQyxFQUFoQyxDQUFOLENBQTBDLElBQUl6YSxJQUFFdXZCLDZDQUE2Qy92QixDQUE3QyxDQUFOLENBQXNELElBQUdRLEVBQUV0SyxNQUFGLElBQVUsQ0FBYixFQUFlO0FBQUMsWUFBTyxLQUFQO0FBQWEsUUFBSWlLLElBQUVLLEVBQUUsQ0FBRixDQUFOLENBQVcsSUFBSU4sSUFBRU0sRUFBRSxDQUFGLENBQU4sQ0FBVyxPQUFPTixLQUFHNUMsQ0FBVjtBQUFhLEVBQTNXLENBQTRXZ2EsT0FBT2xYLFNBQVAsQ0FBaUI0dkIsU0FBakIsR0FBMkIsVUFBU3h2QixDQUFULEVBQVdELENBQVgsRUFBYU0sQ0FBYixFQUFlWCxDQUFmLEVBQWlCO0FBQUMsT0FBSTVDLElBQUUsU0FBRkEsQ0FBRSxDQUFTMEMsQ0FBVCxFQUFXO0FBQUMsWUFBTytXLEtBQUt0WCxNQUFMLENBQVlDLElBQVosQ0FBaUIwWCxPQUFqQixDQUF5QnBYLENBQXpCLEVBQTJCYSxDQUEzQixDQUFQO0FBQXFDLElBQXZELENBQXdELElBQUlWLElBQUU3QyxFQUFFK1osVUFBVTdXLENBQVYsQ0FBRixDQUFOLENBQXNCLElBQUdOLE1BQUkzRCxTQUFQLEVBQWlCO0FBQUMyRCxTQUFFLENBQUMsQ0FBSDtBQUFLLFdBQU8sS0FBS3VuQix3QkFBTCxDQUE4QnRuQixDQUE5QixFQUFnQ0ksQ0FBaEMsRUFBa0NNLENBQWxDLEVBQW9DWCxDQUFwQyxDQUFQO0FBQThDLEVBQWhNLENBQWlNb1gsT0FBT2xYLFNBQVAsQ0FBaUJxbkIsd0JBQWpCLEdBQTBDLFVBQVN2bkIsQ0FBVCxFQUFXZ0MsQ0FBWCxFQUFhdkIsQ0FBYixFQUFlSCxDQUFmLEVBQWlCO0FBQUMsT0FBSUksSUFBRSxJQUFJaUksVUFBSixDQUFlM0csQ0FBZixFQUFpQixFQUFqQixDQUFOLENBQTJCLElBQUd0QixFQUFFd04sU0FBRixLQUFjLEtBQUtoUSxDQUFMLENBQU9nUSxTQUFQLEVBQWpCLEVBQW9DO0FBQUMsWUFBTyxLQUFQO0FBQWEsUUFBSWhNLElBQUUsU0FBRkEsQ0FBRSxDQUFTeEksQ0FBVCxFQUFXO0FBQUMsWUFBT21kLEtBQUt0WCxNQUFMLENBQVlDLElBQVosQ0FBaUIwWCxPQUFqQixDQUF5QnhkLENBQXpCLEVBQTJCK0csQ0FBM0IsQ0FBUDtBQUFxQyxJQUF2RCxDQUF3RCxJQUFJRCxJQUFFeVcsVUFBVWpYLENBQVYsQ0FBTixDQUFtQixJQUFJRCxJQUFFUyxFQUFFeEssTUFBUixDQUFlLElBQUk4SixJQUFFLEtBQUs1QixDQUFMLENBQU9nUSxTQUFQLEtBQW1CLENBQXpCLENBQTJCLElBQUkzTCxJQUFFcUMsS0FBS3pDLElBQUwsQ0FBVXJDLElBQUUsQ0FBWixDQUFOLENBQXFCLElBQUlpQyxDQUFKLENBQU0sSUFBR3pCLE1BQUksQ0FBQyxDQUFMLElBQVFBLE1BQUlqRSxTQUFmLEVBQXlCO0FBQUNpRSxTQUFFUCxDQUFGO0FBQUksSUFBOUIsTUFBa0M7QUFBQyxTQUFHTyxNQUFJLENBQUMsQ0FBUixFQUFVO0FBQUNBLFdBQUVpQyxJQUFFeEMsQ0FBRixHQUFJLENBQU47QUFBUSxNQUFuQixNQUF1QjtBQUFDLFdBQUdPLElBQUUsQ0FBQyxDQUFOLEVBQVE7QUFBQyxlQUFLLHFCQUFMO0FBQTJCO0FBQUM7QUFBQyxRQUFHaUMsSUFBR3hDLElBQUVPLENBQUYsR0FBSSxDQUFWLEVBQWE7QUFBQyxXQUFLLGVBQUw7QUFBcUIsUUFBSUssSUFBRSxLQUFLa1gsUUFBTCxDQUFjblgsQ0FBZCxFQUFpQndULFdBQWpCLEVBQU4sQ0FBcUMsS0FBSW5TLElBQUUsQ0FBTixFQUFRQSxJQUFFcEIsRUFBRTNLLE1BQVosRUFBbUIrTCxLQUFHLENBQXRCLEVBQXdCO0FBQUNwQixPQUFFb0IsQ0FBRixLQUFNLEdBQU47QUFBVSxXQUFNcEIsRUFBRTNLLE1BQUYsR0FBU3VNLENBQWYsRUFBaUI7QUFBQzVCLE9BQUVxYSxPQUFGLENBQVUsQ0FBVjtBQUFhLFFBQUdyYSxFQUFFNEIsSUFBRSxDQUFKLE1BQVMsR0FBWixFQUFnQjtBQUFDLFdBQUssc0NBQUw7QUFBNEMsUUFBRUssT0FBT0MsWUFBUCxDQUFvQm5ULEtBQXBCLENBQTBCa1QsTUFBMUIsRUFBaUNqQyxDQUFqQyxDQUFGLENBQXNDLElBQUlWLElBQUVVLEVBQUUzSixNQUFGLENBQVMsQ0FBVCxFQUFXdUwsSUFBRXhDLENBQUYsR0FBSSxDQUFmLENBQU4sQ0FBd0IsSUFBSTNDLElBQUV1RCxFQUFFM0osTUFBRixDQUFTaUosRUFBRWpLLE1BQVgsRUFBa0IrSixDQUFsQixDQUFOLENBQTJCLElBQUlnQixJQUFHLFNBQVEsSUFBRXdCLENBQUYsR0FBSXpDLENBQWIsR0FBaUIsR0FBdkIsQ0FBMkIsSUFBRyxDQUFDRyxFQUFFNkMsVUFBRixDQUFhLENBQWIsSUFBZ0IvQixDQUFqQixNQUFzQixDQUF6QixFQUEyQjtBQUFDLFdBQUssOEJBQUw7QUFBb0MsUUFBSTdDLElBQUV1eEIsYUFBYXJ5QixDQUFiLEVBQWU2QyxFQUFFakssTUFBakIsRUFBd0JrTSxDQUF4QixDQUFOLENBQWlDLElBQUlsQixJQUFFLEVBQU4sQ0FBUyxLQUFJZSxJQUFFLENBQU4sRUFBUUEsSUFBRTlCLEVBQUVqSyxNQUFaLEVBQW1CK0wsS0FBRyxDQUF0QixFQUF3QjtBQUFDZixPQUFFZSxDQUFGLElBQUs5QixFQUFFNkMsVUFBRixDQUFhZixDQUFiLElBQWdCN0QsRUFBRTRFLFVBQUYsQ0FBYWYsQ0FBYixDQUFyQjtBQUFxQyxNQUFFLENBQUYsS0FBTSxDQUFDaEIsQ0FBUCxDQUFTLElBQUlWLElBQUVrQyxJQUFFeEMsQ0FBRixHQUFJTyxDQUFKLEdBQU0sQ0FBWixDQUFjLEtBQUl5QixJQUFFLENBQU4sRUFBUUEsSUFBRTFCLENBQVYsRUFBWTBCLEtBQUcsQ0FBZixFQUFpQjtBQUFDLFNBQUdmLEVBQUVlLENBQUYsTUFBTyxDQUFWLEVBQVk7QUFBQyxhQUFLLDBCQUFMO0FBQWdDO0FBQUMsUUFBR2YsRUFBRVgsQ0FBRixNQUFPLENBQVYsRUFBWTtBQUFDLFdBQUssdUJBQUw7QUFBNkIsV0FBT2pELE1BQUk2WixVQUFVL1UsRUFBRWlWLFVBQVUscUNBQW1DM1csQ0FBbkMsR0FBcUNvQyxPQUFPQyxZQUFQLENBQW9CblQsS0FBcEIsQ0FBMEJrVCxNQUExQixFQUFpQzVCLEVBQUVxQixLQUFGLENBQVEsQ0FBQy9CLENBQVQsQ0FBakMsQ0FBL0MsQ0FBRixDQUFWLENBQVg7QUFBdUgsRUFBcmxDLENBQXNsQzhXLE9BQU8yWSxhQUFQLEdBQXFCLENBQUMsQ0FBdEIsQ0FBd0IzWSxPQUFPNFksWUFBUCxHQUFvQixDQUFDLENBQXJCLENBQXVCNVksT0FBTzZZLGdCQUFQLEdBQXdCLENBQUMsQ0FBekI7QUFDemhKLFVBQVMxeEIsSUFBVCxHQUFlO0FBQUMsT0FBSW1DLElBQUV3YSxPQUFOO0FBQUEsT0FBYzFhLElBQUVFLEVBQUVnYixXQUFsQjtBQUFBLE9BQThCM2IsSUFBRVcsRUFBRTZhLElBQWxDO0FBQUEsT0FBdUNsYixJQUFFSyxFQUFFOGEsTUFBM0M7QUFBQSxPQUFrRHhiLElBQUVVLEVBQUVvYixVQUF0RDtBQUFBLE9BQWlFeGIsSUFBRUksRUFBRW1iLFlBQXJFO0FBQUEsT0FBa0YvYixJQUFFWSxFQUFFa2IsWUFBdEY7QUFBQSxPQUFtRzNiLElBQUVTLEVBQUU0YSxPQUF2RztBQUFBLE9BQStHNWhCLElBQUVnSCxFQUFFa2MsT0FBbkg7QUFBQSxPQUEySGpjLElBQUVwQyxJQUE3SDtBQUFBLE9BQWtJbkIsSUFBRW9oQixRQUFwSSxDQUE2SSxLQUFLbGdCLEdBQUwsR0FBUyxJQUFULENBQWMsS0FBS290QixPQUFMLEdBQWEsQ0FBYixDQUFlLEtBQUt3RSxPQUFMLEdBQWEsQ0FBYixDQUFlLEtBQUtDLFFBQUwsR0FBYyxJQUFkLENBQW1CLEtBQUtDLFVBQUwsR0FBZ0IsWUFBVTtBQUFDLFNBQUcsS0FBSzl4QixHQUFMLEtBQVcsSUFBWCxJQUFpQixLQUFLb3RCLE9BQUwsS0FBZSxDQUFuQyxFQUFxQztBQUFDLGNBQU8sS0FBS0EsT0FBWjtBQUFvQixVQUFHcHJCLEVBQUUsS0FBS2hDLEdBQVAsRUFBVyxDQUFYLEVBQWEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFiLE1BQXNCLFlBQXpCLEVBQXNDO0FBQUMsWUFBS290QixPQUFMLEdBQWEsQ0FBYixDQUFlLEtBQUt3RSxPQUFMLEdBQWEsQ0FBQyxDQUFkLENBQWdCLE9BQU8sQ0FBUDtBQUFTLFdBQUt4RSxPQUFMLEdBQWEsQ0FBYixDQUFlLE9BQU8sQ0FBUDtBQUFTLElBQTVMLENBQTZMLEtBQUsyRSxrQkFBTCxHQUF3QixZQUFVO0FBQUMsWUFBT3J3QixFQUFFLEtBQUsxQixHQUFQLEVBQVcsQ0FBWCxFQUFhLENBQUMsQ0FBRCxFQUFHLElBQUUsS0FBSzR4QixPQUFWLENBQWIsRUFBZ0MsSUFBaEMsQ0FBUDtBQUE2QyxJQUFoRixDQUFpRixLQUFLSSwwQkFBTCxHQUFnQyxZQUFVO0FBQUMsWUFBTzUyQixFQUFFc0csRUFBRSxLQUFLMUIsR0FBUCxFQUFXLENBQVgsRUFBYSxDQUFDLENBQUQsRUFBRyxJQUFFLEtBQUs0eEIsT0FBVixFQUFrQixDQUFsQixDQUFiLEVBQWtDLElBQWxDLENBQUYsQ0FBUDtBQUFrRCxJQUE3RixDQUE4RixLQUFLSyxZQUFMLEdBQWtCLFlBQVU7QUFBQyxZQUFPandCLEVBQUUsS0FBS2hDLEdBQVAsRUFBVyxDQUFYLEVBQWEsQ0FBQyxDQUFELEVBQUcsSUFBRSxLQUFLNHhCLE9BQVYsQ0FBYixFQUFnQyxJQUFoQyxDQUFQO0FBQTZDLElBQTFFLENBQTJFLEtBQUtNLGVBQUwsR0FBcUIsWUFBVTtBQUFDLFlBQU83dkIsRUFBRTh2QixNQUFGLENBQVMsS0FBS0YsWUFBTCxFQUFULENBQVA7QUFBcUMsSUFBckUsQ0FBc0UsS0FBS0csYUFBTCxHQUFtQixZQUFVO0FBQUMsWUFBT3B3QixFQUFFLEtBQUtoQyxHQUFQLEVBQVcsQ0FBWCxFQUFhLENBQUMsQ0FBRCxFQUFHLElBQUUsS0FBSzR4QixPQUFWLENBQWIsRUFBZ0MsSUFBaEMsQ0FBUDtBQUE2QyxJQUEzRSxDQUE0RSxLQUFLUyxnQkFBTCxHQUFzQixZQUFVO0FBQUMsWUFBT2h3QixFQUFFOHZCLE1BQUYsQ0FBUyxLQUFLQyxhQUFMLEVBQVQsQ0FBUDtBQUFzQyxJQUF2RSxDQUF3RSxLQUFLRSxZQUFMLEdBQWtCLFlBQVU7QUFBQyxTQUFJbndCLElBQUVULEVBQUUsS0FBSzFCLEdBQVAsRUFBVyxDQUFYLEVBQWEsQ0FBQyxDQUFELEVBQUcsSUFBRSxLQUFLNHhCLE9BQVYsRUFBa0IsQ0FBbEIsQ0FBYixDQUFOLENBQXlDenZCLElBQUVBLEVBQUVzYSxPQUFGLENBQVUsT0FBVixFQUFrQixLQUFsQixDQUFGLENBQTJCdGEsSUFBRXVDLG1CQUFtQnZDLENBQW5CLENBQUYsQ0FBd0IsT0FBT0EsQ0FBUDtBQUFTLElBQWxJLENBQW1JLEtBQUtvd0IsV0FBTCxHQUFpQixZQUFVO0FBQUMsU0FBSXB3QixJQUFFVCxFQUFFLEtBQUsxQixHQUFQLEVBQVcsQ0FBWCxFQUFhLENBQUMsQ0FBRCxFQUFHLElBQUUsS0FBSzR4QixPQUFWLEVBQWtCLENBQWxCLENBQWIsQ0FBTixDQUF5Q3p2QixJQUFFQSxFQUFFc2EsT0FBRixDQUFVLE9BQVYsRUFBa0IsS0FBbEIsQ0FBRixDQUEyQnRhLElBQUV1QyxtQkFBbUJ2QyxDQUFuQixDQUFGLENBQXdCLE9BQU9BLENBQVA7QUFBUyxJQUFqSSxDQUFrSSxLQUFLMnVCLGVBQUwsR0FBcUIsWUFBVTtBQUFDLFlBQU8xdUIsRUFBRW1iLFlBQUYsQ0FBZSxLQUFLdmQsR0FBcEIsRUFBd0IsQ0FBeEIsRUFBMEIsQ0FBQyxDQUFELEVBQUcsSUFBRSxLQUFLNHhCLE9BQVYsQ0FBMUIsRUFBNkMsSUFBN0MsQ0FBUDtBQUEwRCxJQUExRixDQUEyRixLQUFLWSxlQUFMLEdBQXFCLFlBQVU7QUFBQyxZQUFPaHhCLEVBQUUsS0FBS3hCLEdBQVAsRUFBVyxDQUFYLEVBQWEsQ0FBQyxDQUFELEVBQUcsSUFBRSxLQUFLNHhCLE9BQVYsQ0FBYixFQUFnQyxJQUFoQyxDQUFQO0FBQTZDLElBQTdFLENBQThFLEtBQUthLHNCQUFMLEdBQTRCLFlBQVU7QUFBQyxTQUFJdHdCLElBQUUsS0FBS3F3QixlQUFMLEVBQU4sQ0FBNkIsT0FBT2h4QixFQUFFLEtBQUt4QixHQUFQLEVBQVdtQyxDQUFYLEVBQWEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFiLEVBQW1CLElBQW5CLENBQVA7QUFBZ0MsSUFBcEcsQ0FBcUcsS0FBS3V3QixZQUFMLEdBQWtCLFlBQVU7QUFBQyxZQUFPMUssUUFBUWxvQixNQUFSLENBQWUsS0FBS2d4QixlQUFMLEVBQWYsRUFBc0MsSUFBdEMsRUFBMkMsVUFBM0MsQ0FBUDtBQUE4RCxJQUEzRixDQUE0RixLQUFLNkIseUJBQUwsR0FBK0IsWUFBVTtBQUFDLFlBQU92M0IsRUFBRXNHLEVBQUUsS0FBSzFCLEdBQVAsRUFBVyxDQUFYLEVBQWEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFiLEVBQW1CLElBQW5CLENBQUYsQ0FBUDtBQUFtQyxJQUE3RSxDQUE4RSxLQUFLNHlCLG9CQUFMLEdBQTBCLFlBQVU7QUFBQyxZQUFPbHhCLEVBQUUsS0FBSzFCLEdBQVAsRUFBVyxDQUFYLEVBQWEsQ0FBQyxDQUFELENBQWIsRUFBaUIsSUFBakIsRUFBc0IsSUFBdEIsQ0FBUDtBQUFtQyxJQUF4RSxDQUF5RSxLQUFLNnlCLGVBQUwsR0FBcUIsVUFBU2p6QixDQUFULEVBQVc7QUFBQyxTQUFJOEMsSUFBRSxLQUFLaXdCLHlCQUFMLEVBQU4sQ0FBdUMsSUFBSXh3QixJQUFFLEtBQUt5d0Isb0JBQUwsRUFBTixDQUFrQyxJQUFJM3VCLElBQUVqQyxFQUFFLEtBQUtoQyxHQUFQLEVBQVcsQ0FBWCxFQUFhLENBQUMsQ0FBRCxDQUFiLEVBQWlCLElBQWpCLENBQU4sQ0FBNkIsSUFBSXlDLElBQUUsSUFBSThWLEtBQUt0WCxNQUFMLENBQVkwbUIsU0FBaEIsQ0FBMEIsRUFBQ3pyQixLQUFJd0csQ0FBTCxFQUExQixDQUFOLENBQXlDRCxFQUFFSSxJQUFGLENBQU9qRCxDQUFQLEVBQVU2QyxFQUFFNmpCLFNBQUYsQ0FBWXJpQixDQUFaLEVBQWUsT0FBT3hCLEVBQUV6QixNQUFGLENBQVNtQixDQUFULENBQVA7QUFBbUIsSUFBNU4sQ0FBNk4sS0FBSzJ3QixRQUFMLEdBQWMsWUFBVTtBQUFDLFNBQUcsS0FBSzFGLE9BQUwsS0FBZSxDQUFsQixFQUFvQjtBQUFDLGNBQU8sQ0FBQyxDQUFSO0FBQVUsVUFBSTNxQixJQUFFakIsRUFBRSxLQUFLeEIsR0FBUCxFQUFXLENBQVgsRUFBYSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxDQUFiLEVBQXFCLElBQXJCLENBQU4sQ0FBaUMsSUFBSWlFLElBQUUvQixFQUFFLEtBQUtsQyxHQUFQLEVBQVd5QyxDQUFYLENBQU4sQ0FBb0IsS0FBS292QixRQUFMLEdBQWMsSUFBSXhnQyxLQUFKLEVBQWQsQ0FBMEIsS0FBSSxJQUFJdU8sSUFBRSxDQUFWLEVBQVlBLElBQUVxRSxFQUFFdk0sTUFBaEIsRUFBdUJrSSxHQUF2QixFQUEyQjtBQUFDLFdBQUk2RCxJQUFFLEVBQU4sQ0FBU0EsRUFBRXN2QixRQUFGLEdBQVcsS0FBWCxDQUFpQixJQUFJNXdCLElBQUVELEVBQUUsS0FBS2xDLEdBQVAsRUFBV2lFLEVBQUVyRSxDQUFGLENBQVgsQ0FBTixDQUF1QixJQUFJZ0UsSUFBRSxDQUFOLENBQVEsSUFBR3pCLEVBQUV6SyxNQUFGLEtBQVcsQ0FBZCxFQUFnQjtBQUFDK0wsV0FBRXN2QixRQUFGLEdBQVcsSUFBWCxDQUFnQm52QixJQUFFLENBQUY7QUFBSSxVQUFFc3NCLEdBQUYsR0FBTTl0QixFQUFFcWIsV0FBRixDQUFjL2IsRUFBRSxLQUFLMUIsR0FBUCxFQUFXaUUsRUFBRXJFLENBQUYsQ0FBWCxFQUFnQixDQUFDLENBQUQsQ0FBaEIsRUFBb0IsSUFBcEIsQ0FBZCxDQUFOLENBQStDLElBQUk4QyxJQUFFbEIsRUFBRSxLQUFLeEIsR0FBUCxFQUFXaUUsRUFBRXJFLENBQUYsQ0FBWCxFQUFnQixDQUFDLElBQUVnRSxDQUFILENBQWhCLENBQU4sQ0FBNkJILEVBQUV1dkIsSUFBRixHQUFPcnhCLEVBQUUsS0FBSzNCLEdBQVAsRUFBVzBDLENBQVgsQ0FBUCxDQUFxQixLQUFLbXZCLFFBQUwsQ0FBY3A1QixJQUFkLENBQW1CZ0wsQ0FBbkI7QUFBc0I7QUFBQyxJQUF6WCxDQUEwWCxLQUFLd3ZCLFVBQUwsR0FBZ0IsVUFBU3J6QixDQUFULEVBQVc7QUFBQyxTQUFJdUMsSUFBRSxLQUFLMHZCLFFBQVgsQ0FBb0IsSUFBSW52QixJQUFFOUMsQ0FBTixDQUFRLElBQUcsQ0FBQ0EsRUFBRTRjLEtBQUYsQ0FBUSxXQUFSLENBQUosRUFBeUI7QUFBQzlaLFdBQUU2VixLQUFLb0YsSUFBTCxDQUFVTyxJQUFWLENBQWVDLEdBQWYsQ0FBbUIrVSxRQUFuQixDQUE0QnR6QixDQUE1QixDQUFGO0FBQWlDLFVBQUc4QyxNQUFJLEVBQVAsRUFBVTtBQUFDLGNBQU8zRSxTQUFQO0FBQWlCLFdBQUksSUFBSWtHLElBQUUsQ0FBVixFQUFZQSxJQUFFOUIsRUFBRXpLLE1BQWhCLEVBQXVCdU0sR0FBdkIsRUFBMkI7QUFBQyxXQUFHOUIsRUFBRThCLENBQUYsRUFBS2lzQixHQUFMLEtBQVd4dEIsQ0FBZCxFQUFnQjtBQUFDLGdCQUFPUCxFQUFFOEIsQ0FBRixDQUFQO0FBQVk7QUFBQyxhQUFPbEcsU0FBUDtBQUFpQixJQUExTixDQUEyTixLQUFLbzFCLHNCQUFMLEdBQTRCLFlBQVU7QUFBQyxTQUFJdnpCLElBQUUsS0FBS3F6QixVQUFMLENBQWdCLGtCQUFoQixDQUFOLENBQTBDLElBQUdyekIsTUFBSTdCLFNBQVAsRUFBaUI7QUFBQyxjQUFPNkIsQ0FBUDtBQUFTLFVBQUl1QyxJQUFFVixFQUFFLEtBQUt6QixHQUFQLEVBQVdKLEVBQUVvekIsSUFBYixDQUFOLENBQXlCLElBQUc3d0IsTUFBSSxFQUFQLEVBQVU7QUFBQyxjQUFNLEVBQU47QUFBUyxVQUFHQSxNQUFJLFFBQVAsRUFBZ0I7QUFBQyxjQUFNLEVBQUNpeEIsSUFBRyxJQUFKLEVBQU47QUFBZ0IsVUFBR2p4QixFQUFFekosTUFBRixDQUFTLENBQVQsRUFBVyxDQUFYLE1BQWdCLFVBQW5CLEVBQThCO0FBQUMsV0FBSWdLLElBQUVqQixFQUFFVSxDQUFGLEVBQUksQ0FBSixDQUFOLENBQWEsSUFBSThCLElBQUVwSCxTQUFTNkYsQ0FBVCxFQUFXLEVBQVgsQ0FBTixDQUFxQixPQUFNLEVBQUMwd0IsSUFBRyxJQUFKLEVBQVNDLFNBQVFwdkIsQ0FBakIsRUFBTjtBQUEwQixZQUFLLDhCQUFMO0FBQW9DLElBQXpULENBQTBULEtBQUtxdkIsaUJBQUwsR0FBdUIsWUFBVTtBQUFDLFNBQUk1d0IsSUFBRSxLQUFLdXdCLFVBQUwsQ0FBZ0IsVUFBaEIsQ0FBTixDQUFrQyxJQUFHdndCLE1BQUkzRSxTQUFQLEVBQWlCO0FBQUMsY0FBTSxFQUFOO0FBQVMsVUFBSWtHLElBQUV4QyxFQUFFLEtBQUt6QixHQUFQLEVBQVcwQyxFQUFFc3dCLElBQWIsQ0FBTixDQUF5QixJQUFHL3VCLEVBQUV2TSxNQUFGLEdBQVMsQ0FBVCxJQUFZLENBQVosSUFBZXVNLEVBQUV2TSxNQUFGLElBQVUsQ0FBNUIsRUFBOEI7QUFBQyxhQUFLLDJCQUFMO0FBQWlDLFVBQUl5SyxJQUFFdEYsU0FBU29ILEVBQUV2TCxNQUFGLENBQVMsQ0FBVCxFQUFXLENBQVgsQ0FBVCxDQUFOLENBQThCLElBQUlrSCxJQUFFL0MsU0FBU29ILEVBQUV2TCxNQUFGLENBQVMsQ0FBVCxDQUFULEVBQXFCLEVBQXJCLEVBQXlCdUssUUFBekIsQ0FBa0MsQ0FBbEMsQ0FBTixDQUEyQyxPQUFPckQsRUFBRWxILE1BQUYsQ0FBUyxDQUFULEVBQVdrSCxFQUFFbEksTUFBRixHQUFTeUssQ0FBcEIsQ0FBUDtBQUE4QixJQUEvUixDQUFnUyxLQUFLb3hCLG9CQUFMLEdBQTBCLFlBQVU7QUFBQyxTQUFJM3pCLElBQUUsS0FBSzB6QixpQkFBTCxFQUFOLENBQStCLElBQUlueEIsSUFBRSxJQUFJOVEsS0FBSixFQUFOLENBQWtCLEtBQUksSUFBSTRTLElBQUUsQ0FBVixFQUFZQSxJQUFFckUsRUFBRWxJLE1BQWhCLEVBQXVCdU0sR0FBdkIsRUFBMkI7QUFBQyxXQUFHckUsRUFBRWxILE1BQUYsQ0FBU3VMLENBQVQsRUFBVyxDQUFYLEtBQWUsR0FBbEIsRUFBc0I7QUFBQzlCLFdBQUUxSixJQUFGLENBQU93SCxLQUFLdXpCLGFBQUwsQ0FBbUJ2dkIsQ0FBbkIsQ0FBUDtBQUE4QjtBQUFDLGFBQU85QixFQUFFaUMsSUFBRixDQUFPLEdBQVAsQ0FBUDtBQUFtQixJQUEzTCxDQUE0TCxLQUFLcXZCLDBCQUFMLEdBQWdDLFlBQVU7QUFBQyxTQUFJdHhCLElBQUUsS0FBSzh3QixVQUFMLENBQWdCLHNCQUFoQixDQUFOLENBQThDLElBQUc5d0IsTUFBSXBFLFNBQVAsRUFBaUI7QUFBQyxjQUFPb0UsQ0FBUDtBQUFTLGFBQU9WLEVBQUUsS0FBS3pCLEdBQVAsRUFBV21DLEVBQUU2d0IsSUFBYixDQUFQO0FBQTBCLElBQTlJLENBQStJLEtBQUtVLDRCQUFMLEdBQWtDLFlBQVU7QUFBQyxTQUFJanhCLElBQUUsS0FBS3d3QixVQUFMLENBQWdCLHdCQUFoQixDQUFOLENBQWdELElBQUd4d0IsTUFBSTFFLFNBQVAsRUFBaUI7QUFBQyxjQUFPMEUsQ0FBUDtBQUFTLFVBQUlOLElBQUUsRUFBTixDQUFTLElBQUlPLElBQUVYLEVBQUUsS0FBSy9CLEdBQVAsRUFBV3lDLEVBQUV1d0IsSUFBYixDQUFOLENBQXlCLElBQUkvdUIsSUFBRS9CLEVBQUVRLENBQUYsRUFBSSxDQUFKLENBQU4sQ0FBYSxLQUFJLElBQUk5QyxJQUFFLENBQVYsRUFBWUEsSUFBRXFFLEVBQUV2TSxNQUFoQixFQUF1QmtJLEdBQXZCLEVBQTJCO0FBQUMsV0FBRzhDLEVBQUVoSyxNQUFGLENBQVN1TCxFQUFFckUsQ0FBRixDQUFULEVBQWMsQ0FBZCxNQUFtQixJQUF0QixFQUEyQjtBQUFDdUMsV0FBRXJHLEdBQUYsR0FBTTJGLEVBQUVpQixDQUFGLEVBQUl1QixFQUFFckUsQ0FBRixDQUFKLENBQU47QUFBZ0I7QUFBQyxhQUFPdUMsQ0FBUDtBQUFTLElBQXpQLENBQTBQLEtBQUt3eEIscUJBQUwsR0FBMkIsWUFBVTtBQUFDLFNBQUlseEIsSUFBRSxLQUFLd3dCLFVBQUwsQ0FBZ0IsYUFBaEIsQ0FBTixDQUFxQyxJQUFHeHdCLE1BQUkxRSxTQUFQLEVBQWlCO0FBQUMsY0FBTzBFLENBQVA7QUFBUyxVQUFJTixJQUFFLElBQUk5USxLQUFKLEVBQU4sQ0FBa0IsSUFBSXFSLElBQUVYLEVBQUUsS0FBSy9CLEdBQVAsRUFBV3lDLEVBQUV1d0IsSUFBYixDQUFOLENBQXlCLElBQUd0d0IsTUFBSSxFQUFQLEVBQVU7QUFBQyxjQUFPUCxDQUFQO0FBQVMsVUFBSThCLElBQUUvQixFQUFFUSxDQUFGLEVBQUksQ0FBSixDQUFOLENBQWEsS0FBSSxJQUFJOUMsSUFBRSxDQUFWLEVBQVlBLElBQUVxRSxFQUFFdk0sTUFBaEIsRUFBdUJrSSxHQUF2QixFQUEyQjtBQUFDdUMsU0FBRTFKLElBQUYsQ0FBTzJDLEVBQUVxRyxFQUFFaUIsQ0FBRixFQUFJdUIsRUFBRXJFLENBQUYsQ0FBSixDQUFGLENBQVA7QUFBcUIsYUFBT3VDLENBQVA7QUFBUyxJQUE1TyxDQUE2TyxLQUFLeXhCLG9CQUFMLEdBQTBCLFlBQVU7QUFBQyxTQUFJM3ZCLElBQUUsS0FBSzR2QixxQkFBTCxFQUFOLENBQW1DLElBQUkxeEIsSUFBRSxJQUFJOVEsS0FBSixFQUFOLENBQWtCLEtBQUksSUFBSXVPLElBQUUsQ0FBVixFQUFZQSxJQUFFcUUsRUFBRXZNLE1BQWhCLEVBQXVCa0ksR0FBdkIsRUFBMkI7QUFBQyxXQUFHcUUsRUFBRXJFLENBQUYsRUFBSyxDQUFMLE1BQVUsS0FBYixFQUFtQjtBQUFDdUMsV0FBRTFKLElBQUYsQ0FBT3dMLEVBQUVyRSxDQUFGLEVBQUssQ0FBTCxDQUFQO0FBQWdCO0FBQUMsYUFBT3VDLENBQVA7QUFBUyxJQUFwSyxDQUFxSyxLQUFLMHhCLHFCQUFMLEdBQTJCLFlBQVU7QUFBQyxTQUFJcHhCLENBQUosRUFBTWlCLENBQU4sRUFBUUUsQ0FBUixDQUFVLElBQUlILElBQUUsS0FBS3d2QixVQUFMLENBQWdCLGdCQUFoQixDQUFOLENBQXdDLElBQUd4dkIsTUFBSTFGLFNBQVAsRUFBaUI7QUFBQyxjQUFPMEYsQ0FBUDtBQUFTLFVBQUl0QixJQUFFLElBQUk5USxLQUFKLEVBQU4sQ0FBa0IsSUFBSXFSLElBQUVYLEVBQUUsS0FBSy9CLEdBQVAsRUFBV3lELEVBQUV1dkIsSUFBYixDQUFOLENBQXlCLElBQUkvdUIsSUFBRS9CLEVBQUVRLENBQUYsRUFBSSxDQUFKLENBQU4sQ0FBYSxLQUFJLElBQUk5QyxJQUFFLENBQVYsRUFBWUEsSUFBRXFFLEVBQUV2TSxNQUFoQixFQUF1QmtJLEdBQXZCLEVBQTJCO0FBQUNnRSxXQUFFbEIsRUFBRWhLLE1BQUYsQ0FBU3VMLEVBQUVyRSxDQUFGLENBQVQsRUFBYyxDQUFkLENBQUYsQ0FBbUI2QyxJQUFFaEIsRUFBRWlCLENBQUYsRUFBSXVCLEVBQUVyRSxDQUFGLENBQUosQ0FBRixDQUFZLElBQUdnRSxNQUFJLElBQVAsRUFBWTtBQUFDRixhQUFFMmEsVUFBVTViLENBQVYsQ0FBRixDQUFlTixFQUFFMUosSUFBRixDQUFPLENBQUMsTUFBRCxFQUFRaUwsQ0FBUixDQUFQO0FBQW1CLFlBQUdFLE1BQUksSUFBUCxFQUFZO0FBQUNGLGFBQUUyYSxVQUFVNWIsQ0FBVixDQUFGLENBQWVOLEVBQUUxSixJQUFGLENBQU8sQ0FBQyxLQUFELEVBQU9pTCxDQUFQLENBQVA7QUFBa0IsWUFBR0UsTUFBSSxJQUFQLEVBQVk7QUFBQ0YsYUFBRXpELEtBQUtreUIsTUFBTCxDQUFZMXZCLENBQVosRUFBYyxDQUFkLENBQUYsQ0FBbUJOLEVBQUUxSixJQUFGLENBQU8sQ0FBQyxJQUFELEVBQU1pTCxDQUFOLENBQVA7QUFBaUIsWUFBR0UsTUFBSSxJQUFQLEVBQVk7QUFBQ0YsYUFBRTJhLFVBQVU1YixDQUFWLENBQUYsQ0FBZU4sRUFBRTFKLElBQUYsQ0FBTyxDQUFDLEtBQUQsRUFBT2lMLENBQVAsQ0FBUDtBQUFrQixZQUFHRSxNQUFJLElBQVAsRUFBWTtBQUFDRixhQUFFaWUsUUFBUWxmLENBQVIsQ0FBRixDQUFhTixFQUFFMUosSUFBRixDQUFPLENBQUMsSUFBRCxFQUFNaUwsQ0FBTixDQUFQO0FBQWlCO0FBQUMsYUFBT3ZCLENBQVA7QUFBUyxJQUF2ZCxDQUF3ZCxLQUFLMnhCLDhCQUFMLEdBQW9DLFlBQVU7QUFBQyxTQUFJcndCLElBQUUsS0FBS3d2QixVQUFMLENBQWdCLHVCQUFoQixDQUFOLENBQStDLElBQUd4dkIsTUFBSTFGLFNBQVAsRUFBaUI7QUFBQyxjQUFPMEYsQ0FBUDtBQUFTLFVBQUl0QixJQUFFLElBQUk5USxLQUFKLEVBQU4sQ0FBa0IsSUFBSTRTLElBQUUvQixFQUFFLEtBQUtsQyxHQUFQLEVBQVd5RCxFQUFFdXZCLElBQWIsQ0FBTixDQUF5QixLQUFJLElBQUl0d0IsSUFBRSxDQUFWLEVBQVlBLElBQUV1QixFQUFFdk0sTUFBaEIsRUFBdUJnTCxHQUF2QixFQUEyQjtBQUFDLFdBQUc7QUFBQyxhQUFJa0IsSUFBRWxDLEVBQUUsS0FBSzFCLEdBQVAsRUFBV2lFLEVBQUV2QixDQUFGLENBQVgsRUFBZ0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FBaEIsRUFBd0IsSUFBeEIsQ0FBTixDQUFvQyxJQUFJRCxJQUFFNGIsVUFBVXphLENBQVYsQ0FBTixDQUFtQnpCLEVBQUUxSixJQUFGLENBQU9nSyxDQUFQO0FBQVUsUUFBckUsQ0FBcUUsT0FBTTdDLENBQU4sRUFBUSxDQUFFO0FBQUMsYUFBT3VDLENBQVA7QUFBUyxJQUF6UixDQUEwUixLQUFLNHhCLGFBQUwsR0FBbUIsWUFBVTtBQUFDLFNBQUl0eEIsSUFBRSxLQUFLd3dCLFVBQUwsQ0FBZ0IscUJBQWhCLENBQU4sQ0FBNkMsSUFBR3h3QixNQUFJMUUsU0FBUCxFQUFpQjtBQUFDLGNBQU8wRSxDQUFQO0FBQVMsVUFBSU4sSUFBRSxFQUFDNnhCLE1BQUssRUFBTixFQUFTQyxVQUFTLEVBQWxCLEVBQU4sQ0FBNEIsSUFBSWh3QixJQUFFL0IsRUFBRSxLQUFLbEMsR0FBUCxFQUFXeUMsRUFBRXV3QixJQUFiLENBQU4sQ0FBeUIsS0FBSSxJQUFJcHpCLElBQUUsQ0FBVixFQUFZQSxJQUFFcUUsRUFBRXZNLE1BQWhCLEVBQXVCa0ksR0FBdkIsRUFBMkI7QUFBQyxXQUFJNkQsSUFBRS9CLEVBQUUsS0FBSzFCLEdBQVAsRUFBV2lFLEVBQUVyRSxDQUFGLENBQVgsRUFBZ0IsQ0FBQyxDQUFELENBQWhCLEVBQW9CLElBQXBCLENBQU4sQ0FBZ0MsSUFBSThDLElBQUVoQixFQUFFLEtBQUsxQixHQUFQLEVBQVdpRSxFQUFFckUsQ0FBRixDQUFYLEVBQWdCLENBQUMsQ0FBRCxDQUFoQixFQUFvQixJQUFwQixDQUFOLENBQWdDLElBQUc2RCxNQUFJLGtCQUFQLEVBQTBCO0FBQUN0QixXQUFFNnhCLElBQUYsQ0FBT3Y3QixJQUFQLENBQVk0bEIsVUFBVTNiLENBQVYsQ0FBWjtBQUEwQixZQUFHZSxNQUFJLGtCQUFQLEVBQTBCO0FBQUN0QixXQUFFOHhCLFFBQUYsQ0FBV3g3QixJQUFYLENBQWdCNGxCLFVBQVUzYixDQUFWLENBQWhCO0FBQThCO0FBQUMsYUFBT1AsQ0FBUDtBQUFTLElBQS9XLENBQWdYLEtBQUsreEIseUJBQUwsR0FBK0IsWUFBVTtBQUFDLFNBQUl4eEIsSUFBRSxLQUFLdXdCLFVBQUwsQ0FBZ0IscUJBQWhCLENBQU4sQ0FBNkMsSUFBR3Z3QixNQUFJM0UsU0FBUCxFQUFpQjtBQUFDLGNBQU8yRSxDQUFQO0FBQVMsVUFBSVAsSUFBRUosRUFBRSxLQUFLL0IsR0FBUCxFQUFXMEMsRUFBRXN3QixJQUFiLENBQU4sQ0FBeUIsSUFBSTF0QixJQUFFLEVBQU4sQ0FBUyxJQUFJNUIsSUFBRXhCLEVBQUVDLENBQUYsRUFBSSxDQUFKLENBQU4sQ0FBYSxLQUFJLElBQUl5QixJQUFFLENBQVYsRUFBWUEsSUFBRUYsRUFBRWhNLE1BQWhCLEVBQXVCa00sR0FBdkIsRUFBMkI7QUFBQyxXQUFJSixJQUFFLEVBQU4sQ0FBUyxJQUFJNUQsSUFBRXNDLEVBQUVDLENBQUYsRUFBSXVCLEVBQUVFLENBQUYsQ0FBSixDQUFOLENBQWdCSixFQUFFaFEsRUFBRixHQUFLNEgsRUFBRXFHLEVBQUVVLENBQUYsRUFBSXZDLEVBQUUsQ0FBRixDQUFKLENBQUYsQ0FBTCxDQUFrQixJQUFHQSxFQUFFbEksTUFBRixLQUFXLENBQWQsRUFBZ0I7QUFBQyxhQUFJdU0sSUFBRS9CLEVBQUVDLENBQUYsRUFBSXZDLEVBQUUsQ0FBRixDQUFKLENBQU4sQ0FBZ0IsS0FBSSxJQUFJNkQsSUFBRSxDQUFWLEVBQVlBLElBQUVRLEVBQUV2TSxNQUFoQixFQUF1QitMLEdBQXZCLEVBQTJCO0FBQUMsZUFBSWhCLElBQUVmLEVBQUVTLENBQUYsRUFBSThCLEVBQUVSLENBQUYsQ0FBSixFQUFTLENBQUMsQ0FBRCxDQUFULEVBQWEsSUFBYixDQUFOLENBQXlCLElBQUdoQixNQUFJLGtCQUFQLEVBQTBCO0FBQUNlLGVBQUUyd0IsR0FBRixHQUFNOVYsVUFBVTNjLEVBQUVTLENBQUYsRUFBSThCLEVBQUVSLENBQUYsQ0FBSixFQUFTLENBQUMsQ0FBRCxDQUFULENBQVYsQ0FBTjtBQUErQixZQUExRCxNQUE4RDtBQUFDLGlCQUFHaEIsTUFBSSxrQkFBUCxFQUEwQjtBQUFDZSxpQkFBRTR3QixPQUFGLEdBQVUvVixVQUFVM2MsRUFBRVMsQ0FBRixFQUFJOEIsRUFBRVIsQ0FBRixDQUFKLEVBQVMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFULENBQVYsQ0FBVjtBQUFxQztBQUFDO0FBQUM7QUFBQyxVQUFFaEwsSUFBRixDQUFPK0ssQ0FBUDtBQUFVLGFBQU84QixDQUFQO0FBQVMsSUFBbmQsQ0FBb2QsS0FBSyt1QixXQUFMLEdBQWlCLFVBQVNseUIsQ0FBVCxFQUFXO0FBQUMsVUFBSzB1QixXQUFMLENBQWlCL3hCLEVBQUVxRCxDQUFGLENBQWpCO0FBQXVCLElBQXBELENBQXFELEtBQUswdUIsV0FBTCxHQUFpQixVQUFTMXVCLENBQVQsRUFBVztBQUFDLFVBQUtuQyxHQUFMLEdBQVNtQyxDQUFULENBQVcsS0FBSzJ2QixVQUFMLEdBQWtCLElBQUc7QUFBQ3R3QixTQUFFLEtBQUt4QixHQUFQLEVBQVcsQ0FBWCxFQUFhLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBYixFQUFtQixJQUFuQixFQUF5QixLQUFLOHlCLFFBQUw7QUFBZ0IsTUFBN0MsQ0FBNkMsT0FBTTd1QixDQUFOLEVBQVEsQ0FBRTtBQUFDLElBQWxILENBQW1ILEtBQUtxd0IsT0FBTCxHQUFhLFlBQVU7QUFBQyxTQUFJcndCLElBQUVoRSxJQUFOLENBQVcsSUFBSTZJLENBQUosRUFBTXhELENBQU4sRUFBUXFELENBQVIsQ0FBVUcsSUFBRSxnQkFBRixDQUFtQkEsS0FBRyxzQkFBb0IsS0FBS2lwQixrQkFBTCxFQUFwQixHQUE4QyxJQUFqRCxDQUFzRGpwQixLQUFHLDRCQUEwQixLQUFLa3BCLDBCQUFMLEVBQTFCLEdBQTRELElBQS9ELENBQW9FbHBCLEtBQUcsZUFBYSxLQUFLb3BCLGVBQUwsRUFBYixHQUFvQyxJQUF2QyxDQUE0Q3BwQixLQUFHLGtCQUFnQixLQUFLd3BCLFlBQUwsRUFBaEIsR0FBb0MsSUFBdkMsQ0FBNEN4cEIsS0FBRyxpQkFBZSxLQUFLeXBCLFdBQUwsRUFBZixHQUFrQyxJQUFyQyxDQUEwQ3pwQixLQUFHLGdCQUFjLEtBQUt1cEIsZ0JBQUwsRUFBZCxHQUFzQyxJQUF6QyxDQUE4Q3ZwQixLQUFHLCtCQUFILENBQW1DeEQsSUFBRSxLQUFLb3RCLFlBQUwsRUFBRixDQUFzQjVwQixLQUFHLHdCQUFzQnhELEVBQUVoSyxJQUF4QixHQUE2QixJQUFoQyxDQUFxQyxJQUFHZ0ssRUFBRWhLLElBQUYsS0FBUyxLQUFaLEVBQWtCO0FBQUN3TixZQUFHLFdBQVNxWixZQUFZN2MsRUFBRTFGLENBQUYsQ0FBSXFELFFBQUosQ0FBYSxFQUFiLENBQVosRUFBOEJ2SyxNQUE5QixDQUFxQyxDQUFyQyxFQUF1QyxFQUF2QyxDQUFULEdBQW9ELE9BQXZELENBQStEb1EsS0FBRyxXQUFTcVosWUFBWTdjLEVBQUV4RyxDQUFGLENBQUltRSxRQUFKLENBQWEsRUFBYixDQUFaLENBQVQsR0FBdUMsSUFBMUM7QUFBK0MsVUFBRSxLQUFLNHVCLFFBQVAsQ0FBZ0IsSUFBR2xwQixNQUFJNUssU0FBSixJQUFlNEssTUFBSSxJQUF0QixFQUEyQjtBQUFDRyxZQUFHLHNCQUFILENBQTBCLEtBQUksSUFBSWxGLElBQUUsQ0FBVixFQUFZQSxJQUFFK0UsRUFBRWpSLE1BQWhCLEVBQXVCa00sR0FBdkIsRUFBMkI7QUFBQyxhQUFJaEUsSUFBRStJLEVBQUUvRSxDQUFGLENBQU4sQ0FBVyxJQUFJZ0YsSUFBRTJQLEtBQUtvRixJQUFMLENBQVVPLElBQVYsQ0FBZUMsR0FBZixDQUFtQkMsUUFBbkIsQ0FBNEJ4ZSxFQUFFc3dCLEdBQTlCLENBQU4sQ0FBeUMsSUFBR3RuQixNQUFJLEVBQVAsRUFBVTtBQUFDQSxlQUFFaEosRUFBRXN3QixHQUFKO0FBQVEsY0FBSTl2QixJQUFFLEVBQU4sQ0FBUyxJQUFHUixFQUFFbXpCLFFBQUYsS0FBYSxJQUFoQixFQUFxQjtBQUFDM3lCLGVBQUUsVUFBRjtBQUFhLGVBQUcsT0FBS3dJLENBQUwsR0FBTyxHQUFQLEdBQVd4SSxDQUFYLEdBQWEsS0FBaEIsQ0FBc0IsSUFBR3dJLE1BQUksa0JBQVAsRUFBMEI7QUFBQyxlQUFJdkQsSUFBRSxLQUFLOHRCLHNCQUFMLEVBQU4sQ0FBb0MsSUFBRzl0QixFQUFFK3RCLEVBQUYsS0FBT3IxQixTQUFWLEVBQW9CO0FBQUMrSyxrQkFBRyxVQUFIO0FBQWMsWUFBbkMsTUFBdUM7QUFBQ0Esa0JBQUcsYUFBSCxDQUFpQixJQUFHekQsRUFBRWd1QixPQUFGLEtBQVl0MUIsU0FBZixFQUF5QjtBQUFDK0ssb0JBQUcsZUFBYXpELEVBQUVndUIsT0FBbEI7QUFBMEIsbUJBQUcsSUFBSDtBQUFRO0FBQUMsVUFBckwsTUFBeUw7QUFBQyxlQUFHenFCLE1BQUksVUFBUCxFQUFrQjtBQUFDRSxrQkFBRyxTQUFPLEtBQUt5cUIsb0JBQUwsRUFBUCxHQUFtQyxJQUF0QztBQUEyQyxZQUE5RCxNQUFrRTtBQUFDLGlCQUFHM3FCLE1BQUksc0JBQVAsRUFBOEI7QUFBQ0Usb0JBQUcsU0FBTyxLQUFLMnFCLDBCQUFMLEVBQVAsR0FBeUMsSUFBNUM7QUFBaUQsY0FBaEYsTUFBb0Y7QUFBQyxtQkFBRzdxQixNQUFJLHdCQUFQLEVBQWdDO0FBQUMscUJBQUl6RyxJQUFFLEtBQUt1eEIsNEJBQUwsRUFBTixDQUEwQyxJQUFHdnhCLEVBQUVyRyxHQUFGLEtBQVFpQyxTQUFYLEVBQXFCO0FBQUMrSyx3QkFBRyxhQUFXM0csRUFBRXJHLEdBQWIsR0FBaUIsSUFBcEI7QUFBeUI7QUFBQyxnQkFBM0gsTUFBK0g7QUFBQyxxQkFBRzhNLE1BQUksYUFBUCxFQUFxQjtBQUFDLHVCQUFJekQsSUFBRSxLQUFLd3VCLHFCQUFMLEVBQU4sQ0FBbUM3cUIsS0FBRyxTQUFPM0QsRUFBRWYsSUFBRixDQUFPLElBQVAsQ0FBUCxHQUFvQixJQUF2QjtBQUE0QixrQkFBckYsTUFBeUY7QUFBQyx1QkFBR3dFLE1BQUksZ0JBQVAsRUFBd0I7QUFBQyx5QkFBSXBGLElBQUUsS0FBS3F3QixxQkFBTCxFQUFOLENBQW1DL3FCLEtBQUcsU0FBT3RGLENBQVAsR0FBUyxJQUFaO0FBQWlCLG9CQUE3RSxNQUFpRjtBQUFDLHlCQUFHb0YsTUFBSSx1QkFBUCxFQUErQjtBQUFDLDJCQUFJdkksSUFBRSxLQUFLeXpCLDhCQUFMLEVBQU4sQ0FBNENockIsS0FBRyxTQUFPekksQ0FBUCxHQUFTLElBQVo7QUFBaUIsc0JBQTdGLE1BQWlHO0FBQUMsMkJBQUd1SSxNQUFJLHFCQUFQLEVBQTZCO0FBQUMsNkJBQUluRyxJQUFFLEtBQUtzeEIsYUFBTCxFQUFOLENBQTJCLElBQUd0eEIsRUFBRXV4QixJQUFGLEtBQVNqMkIsU0FBWixFQUFzQjtBQUFDK0ssZ0NBQUcsZUFBYXJHLEVBQUV1eEIsSUFBRixDQUFPNXZCLElBQVAsQ0FBWSxHQUFaLENBQWIsR0FBOEIsSUFBakM7QUFBc0MsOEJBQUczQixFQUFFd3hCLFFBQUYsS0FBYWwyQixTQUFoQixFQUEwQjtBQUFDK0ssZ0NBQUcsbUJBQWlCckcsRUFBRXd4QixRQUFGLENBQVc3dkIsSUFBWCxDQUFnQixHQUFoQixDQUFqQixHQUFzQyxJQUF6QztBQUE4QztBQUFDLHdCQUFoTSxNQUFvTTtBQUFDLDZCQUFHd0UsTUFBSSxxQkFBUCxFQUE2QjtBQUFDLCtCQUFJbEcsSUFBRSxLQUFLd3hCLHlCQUFMLEVBQU4sQ0FBdUMsS0FBSSxJQUFJendCLElBQUUsQ0FBVixFQUFZQSxJQUFFZixFQUFFaEwsTUFBaEIsRUFBdUIrTCxHQUF2QixFQUEyQjtBQUFDLGlDQUFHZixFQUFFZSxDQUFGLEVBQUtqUSxFQUFMLEtBQVV1SyxTQUFiLEVBQXVCO0FBQUMrSyxvQ0FBRyxxQkFBbUJwRyxFQUFFZSxDQUFGLEVBQUtqUSxFQUF4QixHQUEyQixJQUE5QjtBQUFtQyxrQ0FBR2tQLEVBQUVlLENBQUYsRUFBSzB3QixHQUFMLEtBQVdwMkIsU0FBZCxFQUF3QjtBQUFDK0ssb0NBQUcsY0FBWXBHLEVBQUVlLENBQUYsRUFBSzB3QixHQUFqQixHQUFxQixJQUF4QjtBQUE2QjtBQUFDO0FBQUM7QUFBQztBQUFDO0FBQUM7QUFBQztBQUFDO0FBQUM7QUFBQztBQUFDO0FBQUM7QUFBQyxXQUFHLDBCQUF3QixLQUFLeEIseUJBQUwsRUFBeEIsR0FBeUQsSUFBNUQsQ0FBaUU3cEIsS0FBRyxnQkFBYyxLQUFLOHBCLG9CQUFMLEdBQTRCbDZCLE1BQTVCLENBQW1DLENBQW5DLEVBQXFDLEVBQXJDLENBQWQsR0FBdUQsT0FBMUQsQ0FBa0UsT0FBT29RLENBQVA7QUFBUyxJQUFua0U7QUFBb2tFLE9BQUtxcEIsTUFBTCxHQUFZLFVBQVN6d0IsQ0FBVCxFQUFXSyxDQUFYLEVBQWE7QUFBQyxPQUFHQSxNQUFJaEUsU0FBUCxFQUFpQjtBQUFDZ0UsU0FBRSxDQUFGO0FBQUksUUFBR0wsRUFBRWhKLE1BQUYsQ0FBU3FKLENBQVQsRUFBVyxDQUFYLE1BQWdCLElBQW5CLEVBQXdCO0FBQUMsV0FBSyxjQUFMO0FBQW9CLFFBQUlDLElBQUUsSUFBSTNRLEtBQUosRUFBTixDQUFrQixJQUFJc1EsSUFBRWliLFFBQVFRLFdBQVIsQ0FBb0IxYixDQUFwQixFQUFzQkssQ0FBdEIsQ0FBTixDQUErQixLQUFJLElBQUlqRCxJQUFFLENBQVYsRUFBWUEsSUFBRTZDLEVBQUVqSyxNQUFoQixFQUF1Qm9ILEdBQXZCLEVBQTJCO0FBQUNrRCxPQUFFdkosSUFBRixDQUFPd0gsS0FBS3MwQixPQUFMLENBQWE3eUIsQ0FBYixFQUFlQyxFQUFFN0MsQ0FBRixDQUFmLENBQVA7QUFBNkIsUUFBRWtELEVBQUVxZ0IsR0FBRixDQUFNLFVBQVNoZ0IsQ0FBVCxFQUFXO0FBQUMsWUFBT0EsRUFBRW9hLE9BQUYsQ0FBVSxHQUFWLEVBQWMsS0FBZCxDQUFQO0FBQTRCLElBQTlDLENBQUYsQ0FBa0QsT0FBTSxNQUFJemEsRUFBRW9DLElBQUYsQ0FBTyxHQUFQLENBQVY7QUFBc0IsRUFBL1EsQ0FBZ1JuRSxLQUFLczBCLE9BQUwsR0FBYSxVQUFTN3lCLENBQVQsRUFBV0ssQ0FBWCxFQUFhO0FBQUMsT0FBR0EsTUFBSWhFLFNBQVAsRUFBaUI7QUFBQ2dFLFNBQUUsQ0FBRjtBQUFJLFFBQUdMLEVBQUVoSixNQUFGLENBQVNxSixDQUFULEVBQVcsQ0FBWCxNQUFnQixJQUFuQixFQUF3QjtBQUFDLFdBQUssZUFBTDtBQUFxQixRQUFJQyxJQUFFLElBQUkzUSxLQUFKLEVBQU4sQ0FBa0IsSUFBSXNRLElBQUVpYixRQUFRUSxXQUFSLENBQW9CMWIsQ0FBcEIsRUFBc0JLLENBQXRCLENBQU4sQ0FBK0IsS0FBSSxJQUFJakQsSUFBRSxDQUFWLEVBQVlBLElBQUU2QyxFQUFFakssTUFBaEIsRUFBdUJvSCxHQUF2QixFQUEyQjtBQUFDa0QsT0FBRXZKLElBQUYsQ0FBT3dILEtBQUt1MEIsaUJBQUwsQ0FBdUI5eUIsQ0FBdkIsRUFBeUJDLEVBQUU3QyxDQUFGLENBQXpCLENBQVA7QUFBdUMsUUFBRWtELEVBQUVxZ0IsR0FBRixDQUFNLFVBQVNoZ0IsQ0FBVCxFQUFXO0FBQUMsWUFBT0EsRUFBRW9hLE9BQUYsQ0FBVSxHQUFWLEVBQWMsS0FBZCxDQUFQO0FBQTRCLElBQTlDLENBQUYsQ0FBa0QsT0FBT3phLEVBQUVvQyxJQUFGLENBQU8sR0FBUCxDQUFQO0FBQW1CLEVBQXhSLENBQXlSbkUsS0FBS3UwQixpQkFBTCxHQUF1QixVQUFTN3lCLENBQVQsRUFBV3ZHLENBQVgsRUFBYTtBQUFDLE9BQUk4RyxJQUFFMGEsT0FBTixDQUFjLElBQUluYixJQUFFUyxFQUFFK2EsSUFBUixDQUFhLElBQUc3aEIsTUFBSTJDLFNBQVAsRUFBaUI7QUFBQzNDLFNBQUUsQ0FBRjtBQUFJLFFBQUd1RyxFQUFFakosTUFBRixDQUFTMEMsQ0FBVCxFQUFXLENBQVgsTUFBZ0IsSUFBbkIsRUFBd0I7QUFBQyxXQUFLLG9DQUFMO0FBQTBDLFFBQUlvRyxJQUFFVSxFQUFFa2IsV0FBRixDQUFjemIsQ0FBZCxFQUFnQnZHLENBQWhCLENBQU4sQ0FBeUIsSUFBR29HLEVBQUU5SixNQUFGLEtBQVcsQ0FBWCxJQUFjaUssRUFBRWpKLE1BQUYsQ0FBUzhJLEVBQUUsQ0FBRixDQUFULEVBQWMsQ0FBZCxNQUFtQixJQUFwQyxFQUF5QztBQUFDO0FBQXFDLFFBQUlPLElBQUVOLEVBQUVFLENBQUYsRUFBSUgsRUFBRSxDQUFGLENBQUosQ0FBTixDQUFnQixJQUFJRSxJQUFFNlcsS0FBS29GLElBQUwsQ0FBVUssUUFBVixDQUFtQkMsV0FBbkIsQ0FBK0JsYyxDQUEvQixDQUFOLENBQXdDLElBQUlqRCxJQUFFeVosS0FBS29GLElBQUwsQ0FBVU8sSUFBVixDQUFlQyxHQUFmLENBQW1Cc1csU0FBbkIsQ0FBNkIveUIsQ0FBN0IsQ0FBTixDQUFzQyxJQUFJVyxJQUFFWixFQUFFRSxDQUFGLEVBQUlILEVBQUUsQ0FBRixDQUFKLENBQU4sQ0FBZ0IsSUFBSVEsSUFBRTJXLFVBQVV0VyxDQUFWLENBQU4sQ0FBbUIsT0FBT3ZELElBQUUsR0FBRixHQUFNa0QsQ0FBYjtBQUFlLEVBQWpaLENBQWtaL0IsS0FBS0MsdUJBQUwsR0FBNkIsVUFBUzZCLENBQVQsRUFBVztBQUFDLE9BQUlNLElBQUUsSUFBSXBDLElBQUosRUFBTixDQUFpQm9DLEVBQUV3dUIsV0FBRixDQUFjOXVCLENBQWQsRUFBaUIsT0FBT00sRUFBRXF3QixZQUFGLEVBQVA7QUFBd0IsRUFBbkcsQ0FBb0d6eUIsS0FBS3F2Qix1QkFBTCxHQUE2QixVQUFTdnRCLENBQVQsRUFBVztBQUFDLE9BQUlNLElBQUUsSUFBSXBDLElBQUosRUFBTixDQUFpQm9DLEVBQUVneUIsV0FBRixDQUFjdHlCLENBQWQsRUFBaUIsT0FBT00sRUFBRXF3QixZQUFGLEVBQVA7QUFBd0IsRUFBbkcsQ0FBb0d6eUIsS0FBS3kwQiw2QkFBTCxHQUFtQyxVQUFTMXlCLENBQVQsRUFBVztBQUFDLE9BQUlsRCxJQUFFOGQsT0FBTixDQUFjLElBQUlwYixJQUFFMUMsRUFBRTBlLFVBQVIsQ0FBbUIsSUFBSXpiLElBQUUsRUFBTixDQUFTLElBQUlNLENBQUosRUFBTVgsQ0FBTixFQUFRQyxDQUFSLENBQVVJLEVBQUV5c0IsUUFBRixHQUFXLElBQVgsQ0FBZ0Juc0IsSUFBRSxJQUFJcEMsSUFBSixFQUFGLENBQWFvQyxFQUFFZ3lCLFdBQUYsQ0FBY3J5QixDQUFkLEVBQWlCTixJQUFFVyxFQUFFeXVCLGVBQUYsRUFBRixDQUFzQi91QixFQUFFbXJCLE1BQUYsR0FBUzFyQixFQUFFRSxDQUFGLEVBQUksQ0FBSixFQUFNLENBQUMsQ0FBRCxDQUFOLEVBQVUsSUFBVixFQUFnQmhKLE1BQWhCLENBQXVCLENBQXZCLENBQVQsQ0FBbUNxSixFQUFFMHNCLE1BQUYsR0FBU2p0QixFQUFFRSxDQUFGLEVBQUksQ0FBSixFQUFNLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBTixFQUFZLElBQVosQ0FBVCxDQUEyQixJQUFHSyxFQUFFMHNCLE1BQUYsS0FBVyxnQkFBZCxFQUErQjtBQUFDMXNCLE9BQUV5c0IsUUFBRixHQUFXaHRCLEVBQUVFLENBQUYsRUFBSSxDQUFKLEVBQU0sQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFOLEVBQVksSUFBWixDQUFYO0FBQTZCLFdBQU9LLENBQVA7QUFBUyxFQUEzUyxDQUE0UzlCLEtBQUt1ekIsYUFBTCxHQUFtQixDQUFDLGtCQUFELEVBQW9CLGdCQUFwQixFQUFxQyxpQkFBckMsRUFBdUQsa0JBQXZELEVBQTBFLGNBQTFFLEVBQXlGLGFBQXpGLEVBQXVHLFNBQXZHLEVBQWlILGNBQWpILEVBQWdJLGNBQWhJLENBQW5CO0FBQ3ZxUyxLQUFHLE9BQU9qYixJQUFQLElBQWEsV0FBYixJQUEwQixDQUFDQSxJQUE5QixFQUFtQztBQUFDQSxVQUFLLEVBQUw7QUFBUSxNQUFHLE9BQU9BLEtBQUtoWixHQUFaLElBQWlCLFdBQWpCLElBQThCLENBQUNnWixLQUFLaFosR0FBdkMsRUFBMkM7QUFBQ2daLFFBQUtoWixHQUFMLEdBQVMsRUFBVDtBQUFZLE9BQUtBLEdBQUwsQ0FBU0MsR0FBVCxHQUFhLFlBQVU7QUFBQyxPQUFJdUMsSUFBRXdXLElBQU47QUFBQSxPQUFXbFcsSUFBRU4sRUFBRXhDLEdBQUYsQ0FBTUMsR0FBbkI7QUFBQSxPQUF1QndDLElBQUVLLEVBQUVzeUIsZ0JBQTNCLENBQTRDLEtBQUtDLFFBQUwsR0FBYyxVQUFTcHpCLENBQVQsRUFBV1UsQ0FBWCxFQUFhO0FBQUMsU0FBSSxLQUFLMnlCLFNBQUwsS0FBaUI5MkIsU0FBbEIsS0FBK0JtRSxLQUFJLEtBQUsyeUIsU0FBTCxDQUFlQyxPQUFmLEtBQXlCLzJCLFNBQTVELENBQUgsRUFBMkU7QUFBQztBQUFPLFVBQUkzQyxJQUFFb0csRUFBRWdiLEtBQUYsQ0FBUSw2QkFBUixDQUFOLENBQTZDLElBQUdwaEIsS0FBRyxJQUFOLEVBQVc7QUFBQyxhQUFLLHlEQUFMO0FBQStELFVBQUlnSCxJQUFFaEgsRUFBRSxDQUFGLENBQU4sQ0FBVyxJQUFJMEQsSUFBRTFELEVBQUUsQ0FBRixDQUFOLENBQVcsSUFBSStHLElBQUUvRyxFQUFFLENBQUYsQ0FBTixDQUFXLElBQUl3RSxJQUFFd0MsSUFBRSxHQUFGLEdBQU10RCxDQUFaLENBQWMsS0FBSysxQixTQUFMLEdBQWUsRUFBZixDQUFrQixLQUFLQSxTQUFMLENBQWVFLFFBQWYsR0FBd0IzeUIsQ0FBeEIsQ0FBMEIsS0FBS3l5QixTQUFMLENBQWVHLFdBQWYsR0FBMkJsMkIsQ0FBM0IsQ0FBNkIsS0FBSysxQixTQUFMLENBQWVJLFVBQWYsR0FBMEI5eUIsQ0FBMUIsQ0FBNEIsS0FBSzB5QixTQUFMLENBQWVLLEVBQWYsR0FBa0J0MUIsQ0FBbEIsQ0FBb0IsSUFBRyxDQUFDc0MsQ0FBSixFQUFNO0FBQUMsV0FBSVQsSUFBRTJkLFVBQVVqZCxDQUFWLENBQU4sQ0FBbUIsSUFBSVQsSUFBRXVXLFlBQVl4VyxDQUFaLEVBQWMsRUFBZCxDQUFOLENBQXdCLEtBQUtvekIsU0FBTCxDQUFlQyxPQUFmLEdBQXVCcnpCLENBQXZCLENBQXlCLEtBQUtvekIsU0FBTCxDQUFlTSxRQUFmLEdBQXdCenpCLENBQXhCO0FBQTBCLFVBQUlDLElBQUUyZCxXQUFXbGQsQ0FBWCxDQUFOLENBQW9CLElBQUk2QixJQUFFcWIsV0FBV3hnQixDQUFYLENBQU4sQ0FBb0IsS0FBSysxQixTQUFMLENBQWVPLEtBQWYsR0FBcUJ6ekIsQ0FBckIsQ0FBdUIsS0FBS2t6QixTQUFMLENBQWVRLFFBQWYsR0FBd0JweEIsQ0FBeEIsQ0FBMEIsSUFBRyxDQUFDakMsRUFBRUwsQ0FBRixFQUFJLEtBQUtrekIsU0FBVCxFQUFtQixPQUFuQixDQUFKLEVBQWdDO0FBQUMsYUFBSyx5Q0FBdUNsekIsQ0FBNUM7QUFBOEM7QUFBQyxJQUE3cEI7QUFBOHBCLEVBQWx1QixDQUFtdUI0VyxLQUFLaFosR0FBTCxDQUFTQyxHQUFULENBQWEyb0IsSUFBYixHQUFrQixVQUFTL3NCLENBQVQsRUFBV2lLLENBQVgsRUFBYWhGLENBQWIsRUFBZXNJLENBQWYsRUFBaUJ0RyxDQUFqQixFQUFtQjtBQUFDLE9BQUk4QyxJQUFFb1QsSUFBTjtBQUFBLE9BQVd0VSxJQUFFa0IsRUFBRTVGLEdBQWY7QUFBQSxPQUFtQmtFLElBQUVRLEVBQUV6RSxHQUF2QjtBQUFBLE9BQTJCZ0MsSUFBRWlDLEVBQUU2eEIsa0JBQS9CO0FBQUEsT0FBa0Q3eUIsSUFBRWdCLEVBQUVreEIsZ0JBQXREO0FBQUEsT0FBdUVoekIsSUFBRXdELEVBQUVsRSxNQUEzRTtBQUFBLE9BQWtGbUIsSUFBRVQsRUFBRTRtQixLQUF0RjtBQUFBLE9BQTRGN2xCLElBQUVmLEVBQUVvbEIsR0FBaEc7QUFBQSxPQUFvRy9rQixJQUFFTCxFQUFFZ21CLFNBQXhHO0FBQUEsT0FBa0hua0IsSUFBRTdFLElBQXBILENBQXlILElBQUkrRSxDQUFKLEVBQU14QixDQUFOLEVBQVF0QyxDQUFSLENBQVUsSUFBRyxPQUFPeUYsQ0FBUCxJQUFVLFFBQVYsSUFBb0IsUUFBT0EsQ0FBUCx5Q0FBT0EsQ0FBUCxNQUFVLFFBQWpDLEVBQTBDO0FBQUMsV0FBSyw2Q0FBMkNBLENBQWhEO0FBQWtELFFBQUcsUUFBT0EsQ0FBUCx5Q0FBT0EsQ0FBUCxNQUFVLFFBQWIsRUFBc0I7QUFBQ25ELFNBQUVtRCxDQUFGLENBQUkzQixJQUFFRixFQUFFRixTQUFGLENBQVlwQixDQUFaLENBQUY7QUFBaUIsUUFBRyxPQUFPbUQsQ0FBUCxJQUFVLFFBQWIsRUFBc0I7QUFBQzNCLFNBQUUyQixDQUFGLENBQUksSUFBRyxDQUFDNUMsRUFBRWlCLENBQUYsQ0FBSixFQUFTO0FBQUMsYUFBSyx1Q0FBcUNBLENBQTFDO0FBQTRDLFVBQUVsQyxFQUFFa0MsQ0FBRixDQUFGO0FBQU8sUUFBRXJELENBQUYsQ0FBSSxJQUFHLFFBQU9BLENBQVAseUNBQU9BLENBQVAsTUFBVSxRQUFiLEVBQXNCO0FBQUNULFNBQUU0RCxFQUFFRixTQUFGLENBQVlqRCxDQUFaLENBQUY7QUFBaUIsUUFBRyxDQUFDakYsS0FBRyxFQUFILElBQU9BLEtBQUcsSUFBWCxLQUFrQjhHLEVBQUVoRyxHQUFGLEtBQVE2QixTQUE3QixFQUF1QztBQUFDM0MsU0FBRThHLEVBQUVoRyxHQUFKO0FBQVEsUUFBSWQsS0FBRyxFQUFILElBQU9BLEtBQUcsSUFBWCxJQUFrQjhHLEVBQUVoRyxHQUFGLEtBQVE2QixTQUE3QixFQUF1QztBQUFDbUUsT0FBRWhHLEdBQUYsR0FBTWQsQ0FBTixDQUFRc0ksSUFBRUYsRUFBRUYsU0FBRixDQUFZcEIsQ0FBWixDQUFGO0FBQWlCLFFBQUc5RyxNQUFJOEcsRUFBRWhHLEdBQVQsRUFBYTtBQUFDLFdBQUssd0NBQXNDZCxDQUF0QyxHQUF3QyxJQUF4QyxHQUE2QzhHLEVBQUVoRyxHQUFwRDtBQUF3RCxRQUFJMEgsSUFBRSxJQUFOLENBQVcsSUFBR0gsRUFBRTh4QixhQUFGLENBQWdCbjZCLENBQWhCLE1BQXFCMkMsU0FBeEIsRUFBa0M7QUFBQyxXQUFLLDJCQUF5QjNDLENBQTlCO0FBQWdDLElBQW5FLE1BQXVFO0FBQUN3SSxTQUFFSCxFQUFFOHhCLGFBQUYsQ0FBZ0JuNkIsQ0FBaEIsQ0FBRjtBQUFxQixRQUFJMEQsSUFBRXVnQixXQUFXM2IsQ0FBWCxDQUFOLENBQW9CLElBQUl2QixJQUFFa2QsV0FBV3pmLENBQVgsQ0FBTixDQUFvQixJQUFJbUMsSUFBRWpELElBQUUsR0FBRixHQUFNcUQsQ0FBWixDQUFjLElBQUkvQixJQUFFLEVBQU4sQ0FBUyxJQUFHd0QsRUFBRWxMLE1BQUYsQ0FBUyxDQUFULEVBQVcsQ0FBWCxLQUFlLE1BQWxCLEVBQXlCO0FBQUMsU0FBR2lRLE1BQUk1SyxTQUFQLEVBQWlCO0FBQUMsYUFBSyx3Q0FBTDtBQUE4QyxVQUFJMEQsSUFBRSxJQUFJaUIsQ0FBSixDQUFNLEVBQUN4RyxLQUFJMEgsQ0FBTCxFQUFPNmhCLE1BQUssVUFBWixFQUF1QnlCLE1BQUt2ZSxDQUE1QixFQUFOLENBQU4sQ0FBNENsSCxFQUFFNGtCLFlBQUYsQ0FBZXRrQixDQUFmLEVBQWtCM0IsSUFBRXFCLEVBQUUwbEIsT0FBRixFQUFGO0FBQWMsSUFBdEssTUFBMEs7QUFBQyxTQUFHdmpCLEVBQUVuTSxPQUFGLENBQVUsV0FBVixLQUF3QixDQUFDLENBQTVCLEVBQThCO0FBQUMsV0FBSWlLLElBQUUsSUFBSU0sQ0FBSixDQUFNLEVBQUM5RixLQUFJMEgsQ0FBTCxFQUFOLENBQU4sQ0FBcUJsQyxFQUFFbUIsSUFBRixDQUFPOEYsQ0FBUCxFQUFTdEcsQ0FBVCxFQUFZWCxFQUFFMmtCLFlBQUYsQ0FBZXRrQixDQUFmLEVBQWtCeXpCLFdBQVM5ekIsRUFBRXltQixJQUFGLEVBQVQsQ0FBa0IvbkIsSUFBRW1ZLEtBQUt0WCxNQUFMLENBQVlzbkIsS0FBWixDQUFrQnlELGtCQUFsQixDQUFxQ3dKLFFBQXJDLENBQUY7QUFBaUQsTUFBckosTUFBeUo7QUFBQyxXQUFHNXhCLEtBQUcsTUFBTixFQUFhO0FBQUMsYUFBSWxDLElBQUUsSUFBSU0sQ0FBSixDQUFNLEVBQUM5RixLQUFJMEgsQ0FBTCxFQUFOLENBQU4sQ0FBcUJsQyxFQUFFbUIsSUFBRixDQUFPOEYsQ0FBUCxFQUFTdEcsQ0FBVCxFQUFZWCxFQUFFMmtCLFlBQUYsQ0FBZXRrQixDQUFmLEVBQWtCM0IsSUFBRXNCLEVBQUV5bUIsSUFBRixFQUFGO0FBQVc7QUFBQztBQUFDLFFBQUk3aUIsSUFBRTZaLFVBQVUvZSxDQUFWLENBQU4sQ0FBbUIsT0FBTzJCLElBQUUsR0FBRixHQUFNdUQsQ0FBYjtBQUFlLEVBQXpzQyxDQUEwc0NpVCxLQUFLaFosR0FBTCxDQUFTQyxHQUFULENBQWF3QixNQUFiLEdBQW9CLFVBQVNtRSxDQUFULEVBQVcyRCxDQUFYLEVBQWFsSixDQUFiLEVBQWU7QUFBQyxPQUFJUSxJQUFFbVksSUFBTjtBQUFBLE9BQVc5VSxJQUFFckQsRUFBRWIsR0FBZjtBQUFBLE9BQW1CaUUsSUFBRUMsRUFBRWpFLEdBQXZCO0FBQUEsT0FBMkJwRSxJQUFFb0ksRUFBRTh4QixrQkFBL0I7QUFBQSxPQUFrRHgyQixJQUFFc0IsRUFBRWEsTUFBdEQ7QUFBQSxPQUE2RHdCLElBQUUzRCxFQUFFeXBCLEtBQWpFO0FBQUEsT0FBdUU3a0IsSUFBRTVFLEVBQUVpb0IsR0FBM0U7QUFBQSxPQUErRXBsQixJQUFFN0MsRUFBRTZvQixTQUFuRjtBQUFBLE9BQTZGMWpCLENBQTdGLENBQStGLElBQUcsUUFBTzZVLE1BQVAseUNBQU9BLE1BQVAsT0FBZ0IvYSxTQUFuQixFQUE2QjtBQUFDa0csU0FBRTZVLE1BQUY7QUFBUyxRQUFJelksSUFBRThFLEVBQUVxYyxLQUFGLENBQVEsR0FBUixDQUFOLENBQW1CLElBQUduaEIsRUFBRTNJLE1BQUYsS0FBVyxDQUFkLEVBQWdCO0FBQUMsWUFBTyxLQUFQO0FBQWEsUUFBSWdLLElBQUVyQixFQUFFLENBQUYsQ0FBTixDQUFXLElBQUl1RCxJQUFFdkQsRUFBRSxDQUFGLENBQU4sQ0FBVyxJQUFJMkIsSUFBRU4sSUFBRSxHQUFGLEdBQU1rQyxDQUFaLENBQWMsSUFBSWdGLElBQUV3VyxVQUFVL2UsRUFBRSxDQUFGLENBQVYsQ0FBTixDQUFzQixJQUFJOEIsSUFBRS9HLEVBQUVra0IsV0FBV2pmLEVBQUUsQ0FBRixDQUFYLENBQUYsQ0FBTixDQUEwQixJQUFJK0IsSUFBRSxJQUFOLENBQVcsSUFBSXVHLElBQUUsSUFBTixDQUFXLElBQUd4RyxFQUFFakcsR0FBRixLQUFRNkIsU0FBWCxFQUFxQjtBQUFDLFdBQUssbUNBQUw7QUFBeUMsSUFBL0QsTUFBbUU7QUFBQ3FFLFNBQUVELEVBQUVqRyxHQUFKLENBQVF5TSxJQUFFdkcsRUFBRTFKLE1BQUYsQ0FBUyxDQUFULEVBQVcsQ0FBWCxDQUFGO0FBQWdCLFFBQUdrSCxLQUFHLElBQUgsSUFBUzdFLE9BQU82RyxTQUFQLENBQWlCcUIsUUFBakIsQ0FBMEJhLElBQTFCLENBQStCbEUsQ0FBL0IsTUFBb0MsZ0JBQTdDLElBQStEQSxFQUFFbEksTUFBRixHQUFTLENBQTNFLEVBQTZFO0FBQUMsU0FBSXFLLElBQUUsTUFBSW5DLEVBQUV3RSxJQUFGLENBQU8sR0FBUCxDQUFKLEdBQWdCLEdBQXRCLENBQTBCLElBQUdyQyxFQUFFdEssT0FBRixDQUFVLE1BQUkySyxDQUFKLEdBQU0sR0FBaEIsS0FBc0IsQ0FBQyxDQUExQixFQUE0QjtBQUFDLGFBQUssZ0JBQWNBLENBQWQsR0FBZ0IsNEJBQXJCO0FBQWtEO0FBQUMsUUFBR0EsS0FBRyxNQUFILElBQVcwRyxNQUFJLElBQWxCLEVBQXVCO0FBQUMsV0FBSyxtQ0FBTDtBQUF5QyxRQUFHLE9BQU9BLENBQVAsSUFBVSxRQUFWLElBQW9CQSxFQUFFclIsT0FBRixDQUFVLGFBQVYsS0FBMEIsQ0FBQyxDQUFsRCxFQUFvRDtBQUFDcVIsU0FBRWtmLFFBQVFsb0IsTUFBUixDQUFlZ0osQ0FBZixDQUFGO0FBQW9CLFFBQUdILEtBQUcsSUFBSCxJQUFTQSxLQUFHLElBQWYsRUFBb0I7QUFBQyxTQUFHLEVBQUVHLGFBQWE3RSxDQUFmLENBQUgsRUFBcUI7QUFBQyxhQUFLLGdEQUFMO0FBQXNEO0FBQUMsUUFBRzBFLEtBQUcsSUFBTixFQUFXO0FBQUMsU0FBRyxFQUFFRyxhQUFhckcsQ0FBZixDQUFILEVBQXFCO0FBQUMsYUFBSyx1Q0FBTDtBQUE2QztBQUFDLFFBQUdMLEtBQUcsTUFBTixFQUFhLENBQUUsS0FBSWtELElBQUUsSUFBTixDQUFXLElBQUc5QixFQUFFK3hCLGFBQUYsQ0FBZ0JwekIsRUFBRWpHLEdBQWxCLE1BQXlCNkIsU0FBNUIsRUFBc0M7QUFBQyxXQUFLLDJCQUF5QnFFLENBQTlCO0FBQWdDLElBQXZFLE1BQTJFO0FBQUNrRCxTQUFFOUIsRUFBRSt4QixhQUFGLENBQWdCbnpCLENBQWhCLENBQUY7QUFBcUIsUUFBR2tELEtBQUcsTUFBTixFQUFhO0FBQUMsV0FBSyxlQUFMO0FBQXFCLElBQW5DLE1BQXVDO0FBQUMsU0FBR0EsRUFBRTVNLE1BQUYsQ0FBUyxDQUFULEVBQVcsQ0FBWCxLQUFlLE1BQWxCLEVBQXlCO0FBQUMsV0FBSWdLLElBQUUsSUFBTixDQUFXLElBQUdvRyxNQUFJL0ssU0FBUCxFQUFpQjtBQUFDLGVBQUssNkNBQUw7QUFBbUQsWUFBSW1FLElBQUUsSUFBSXdCLENBQUosQ0FBTSxFQUFDeEgsS0FBSW9KLENBQUwsRUFBTzRoQixNQUFLcGUsQ0FBWixFQUFOLENBQU4sQ0FBNEI1RyxFQUFFbWtCLFlBQUYsQ0FBZXJrQixDQUFmLEVBQWtCVSxJQUFFUixFQUFFaWxCLE9BQUYsRUFBRixDQUFjLE9BQU92ZSxLQUFHbEcsQ0FBVjtBQUFZLE1BQWxMLE1BQXNMO0FBQUMsV0FBRzRDLEVBQUU3TixPQUFGLENBQVUsV0FBVixLQUF3QixDQUFDLENBQTVCLEVBQThCO0FBQUMsYUFBSWdLLElBQUUsSUFBTixDQUFXLElBQUc7QUFBQ0EsZUFBRWdCLEVBQUV3cEIsa0JBQUYsQ0FBcUJyakIsQ0FBckIsQ0FBRjtBQUEwQixVQUE5QixDQUE4QixPQUFNdkQsQ0FBTixFQUFRO0FBQUMsa0JBQU8sS0FBUDtBQUFhLGNBQUk3RCxJQUFFLElBQUlHLENBQUosQ0FBTSxFQUFDekYsS0FBSW9KLENBQUwsRUFBTixDQUFOLENBQXFCOUQsRUFBRXFCLElBQUYsQ0FBT2lHLENBQVAsRUFBVXRILEVBQUU2a0IsWUFBRixDQUFlcmtCLENBQWYsRUFBa0IsT0FBT1IsRUFBRVIsTUFBRixDQUFTUyxDQUFULENBQVA7QUFBbUIsUUFBbEssTUFBc0s7QUFBQyxhQUFJRCxJQUFFLElBQUlHLENBQUosQ0FBTSxFQUFDekYsS0FBSW9KLENBQUwsRUFBTixDQUFOLENBQXFCOUQsRUFBRXFCLElBQUYsQ0FBT2lHLENBQVAsRUFBVXRILEVBQUU2a0IsWUFBRixDQUFlcmtCLENBQWYsRUFBa0IsT0FBT1IsRUFBRVIsTUFBRixDQUFTNEgsQ0FBVCxDQUFQO0FBQW1CO0FBQUM7QUFBQztBQUFDLEVBQTc5QyxDQUE4OUMyUCxLQUFLaFosR0FBTCxDQUFTQyxHQUFULENBQWFaLEtBQWIsR0FBbUIsVUFBUzRDLENBQVQsRUFBVztBQUFDLE9BQUlRLElBQUVSLEVBQUVnZ0IsS0FBRixDQUFRLEdBQVIsQ0FBTixDQUFtQixJQUFJemYsSUFBRSxFQUFOLENBQVMsSUFBSUwsQ0FBSixFQUFNNUMsQ0FBTixFQUFRNkMsQ0FBUixDQUFVLElBQUdLLEVBQUV0SyxNQUFGLElBQVUsQ0FBVixJQUFhc0ssRUFBRXRLLE1BQUYsSUFBVSxDQUExQixFQUE0QjtBQUFDLFdBQUssdURBQUw7QUFBNkQsUUFBRXNLLEVBQUUsQ0FBRixDQUFGLENBQU9sRCxJQUFFa0QsRUFBRSxDQUFGLENBQUYsQ0FBTyxJQUFHQSxFQUFFdEssTUFBRixJQUFVLENBQWIsRUFBZTtBQUFDaUssU0FBRUssRUFBRSxDQUFGLENBQUY7QUFBTyxNQUFFdkMsU0FBRixHQUFZOFksS0FBS2haLEdBQUwsQ0FBU0MsR0FBVCxDQUFhODFCLGtCQUFiLENBQWdDaFcsV0FBVzVkLENBQVgsQ0FBaEMsQ0FBWixDQUEyREssRUFBRXJDLFVBQUYsR0FBYTZZLEtBQUtoWixHQUFMLENBQVNDLEdBQVQsQ0FBYTgxQixrQkFBYixDQUFnQ2hXLFdBQVd4Z0IsQ0FBWCxDQUFoQyxDQUFiLENBQTREaUQsRUFBRTB6QixRQUFGLEdBQVc5MkIsS0FBSzJFLFNBQUwsQ0FBZXZCLEVBQUV0QyxTQUFqQixFQUEyQixJQUEzQixFQUFnQyxJQUFoQyxDQUFYLENBQWlELElBQUdzQyxFQUFFckMsVUFBRixJQUFjLElBQWpCLEVBQXNCO0FBQUNxQyxPQUFFMnpCLFNBQUYsR0FBWXBXLFdBQVd4Z0IsQ0FBWCxDQUFaO0FBQTBCLElBQWpELE1BQXFEO0FBQUNpRCxPQUFFMnpCLFNBQUYsR0FBWS8yQixLQUFLMkUsU0FBTCxDQUFldkIsRUFBRXJDLFVBQWpCLEVBQTRCLElBQTVCLEVBQWlDLElBQWpDLENBQVo7QUFBbUQsUUFBR2lDLE1BQUk1RCxTQUFQLEVBQWlCO0FBQUNnRSxPQUFFNHpCLE1BQUYsR0FBU3ZXLFVBQVV6ZCxDQUFWLENBQVQ7QUFBc0IsV0FBT0ksQ0FBUDtBQUFTLEVBQXRnQixDQUF1Z0J3VyxLQUFLaFosR0FBTCxDQUFTQyxHQUFULENBQWFvMkIsU0FBYixHQUF1QixVQUFTOTJCLENBQVQsRUFBV3FELENBQVgsRUFBYXlCLENBQWIsRUFBZTtBQUFDLE9BQUlqQyxJQUFFNFcsSUFBTjtBQUFBLE9BQVdyVyxJQUFFUCxFQUFFcEMsR0FBZjtBQUFBLE9BQW1CbUQsSUFBRVIsRUFBRTFDLEdBQXZCO0FBQUEsT0FBMkJJLElBQUU4QyxFQUFFNHlCLGtCQUEvQjtBQUFBLE9BQWtEN3lCLElBQUVDLEVBQUVtekIsT0FBdEQ7QUFBQSxPQUE4RG4wQixJQUFFZ0IsRUFBRW96QixhQUFsRSxDQUFnRixJQUFJMXpCLElBQUV0RCxFQUFFMGlCLEtBQUYsQ0FBUSxHQUFSLENBQU4sQ0FBbUIsSUFBSXhmLElBQUVJLEVBQUUsQ0FBRixDQUFOLENBQVcsSUFBSWhILElBQUVnSCxFQUFFLENBQUYsQ0FBTixDQUFXLElBQUlxQixJQUFFekIsSUFBRSxHQUFGLEdBQU01RyxDQUFaLENBQWMsSUFBSTZJLElBQUVtYixVQUFVaGQsRUFBRSxDQUFGLENBQVYsQ0FBTixDQUFzQixJQUFJWCxJQUFFN0IsRUFBRTBmLFdBQVd0ZCxDQUFYLENBQUYsQ0FBTixDQUF1QixJQUFJUixJQUFFNUIsRUFBRTBmLFdBQVdsa0IsQ0FBWCxDQUFGLENBQU4sQ0FBdUIsSUFBR3FHLEVBQUV2RixHQUFGLEtBQVE2QixTQUFYLEVBQXFCO0FBQUMsWUFBTyxLQUFQO0FBQWEsUUFBRzZGLEVBQUUxSCxHQUFGLEtBQVE2QixTQUFYLEVBQXFCO0FBQUMsV0FBSyxvQ0FBTDtBQUEwQyxRQUFHLENBQUMwRSxFQUFFaEIsRUFBRXZGLEdBQUosRUFBUTBILEVBQUUxSCxHQUFWLENBQUosRUFBbUI7QUFBQyxZQUFPLEtBQVA7QUFBYSxRQUFHc0YsRUFBRWhCLEdBQUYsS0FBUXpDLFNBQVIsSUFBbUIsUUFBTzZGLEVBQUVwRCxHQUFULE1BQWUsUUFBckMsRUFBOEM7QUFBQyxTQUFHLENBQUNpQyxFQUFFakIsRUFBRWhCLEdBQUosRUFBUW9ELEVBQUVwRCxHQUFWLENBQUosRUFBbUI7QUFBQyxjQUFPLEtBQVA7QUFBYTtBQUFDLFFBQUdnQixFQUFFOUcsR0FBRixLQUFRcUQsU0FBUixJQUFtQixRQUFPNkYsRUFBRWxKLEdBQVQsTUFBZSxRQUFyQyxFQUE4QztBQUFDLFNBQUcsQ0FBQytILEVBQUVqQixFQUFFOUcsR0FBSixFQUFRa0osRUFBRWxKLEdBQVYsQ0FBSixFQUFtQjtBQUFDLGNBQU8sS0FBUDtBQUFhO0FBQUMsUUFBRzhHLEVBQUVmLEdBQUYsS0FBUTFDLFNBQVIsSUFBbUIsUUFBTzZGLEVBQUVuRCxHQUFULE1BQWUsUUFBckMsRUFBOEM7QUFBQyxTQUFHLE9BQU9lLEVBQUVmLEdBQVQsSUFBYyxRQUFqQixFQUEwQjtBQUFDLFdBQUcsQ0FBQ2dDLEVBQUVqQixFQUFFZixHQUFKLEVBQVFtRCxFQUFFbkQsR0FBVixDQUFKLEVBQW1CO0FBQUMsZ0JBQU8sS0FBUDtBQUFhO0FBQUMsTUFBN0QsTUFBaUU7QUFBQyxXQUFHLFFBQU9lLEVBQUVmLEdBQVQsS0FBYyxRQUFqQixFQUEwQjtBQUFDLGFBQUcsQ0FBQ2lCLEVBQUVGLEVBQUVmLEdBQUosRUFBUW1ELEVBQUVuRCxHQUFWLENBQUosRUFBbUI7QUFBQyxrQkFBTyxLQUFQO0FBQWE7QUFBQztBQUFDO0FBQUMsUUFBSXNCLElBQUVHLEVBQUU2ekIsT0FBRixDQUFVQyxNQUFWLEVBQU4sQ0FBeUIsSUFBR3B5QixFQUFFcXlCLFFBQUYsS0FBYWw0QixTQUFiLElBQXdCLE9BQU82RixFQUFFcXlCLFFBQVQsS0FBb0IsUUFBL0MsRUFBd0Q7QUFBQ2wwQixTQUFFNkIsRUFBRXF5QixRQUFKO0FBQWEsUUFBR3J5QixFQUFFc3lCLFdBQUYsS0FBZ0JuNEIsU0FBaEIsSUFBMkIsT0FBTzZGLEVBQUVzeUIsV0FBVCxLQUF1QixRQUFyRCxFQUE4RDtBQUFDdHlCLE9BQUVzeUIsV0FBRixHQUFjLENBQWQ7QUFBZ0IsUUFBRzEwQixFQUFFVCxHQUFGLEtBQVFoRCxTQUFSLElBQW1CLE9BQU95RCxFQUFFVCxHQUFULElBQWMsUUFBcEMsRUFBNkM7QUFBQyxTQUFHUyxFQUFFVCxHQUFGLEdBQU02QyxFQUFFc3lCLFdBQVIsR0FBb0JuMEIsQ0FBdkIsRUFBeUI7QUFBQyxjQUFPLEtBQVA7QUFBYTtBQUFDLFFBQUdQLEVBQUVWLEdBQUYsS0FBUS9DLFNBQVIsSUFBbUIsT0FBT3lELEVBQUVWLEdBQVQsSUFBYyxRQUFwQyxFQUE2QztBQUFDLFNBQUdpQixJQUFFUCxFQUFFVixHQUFGLEdBQU04QyxFQUFFc3lCLFdBQWIsRUFBeUI7QUFBQyxjQUFPLEtBQVA7QUFBYTtBQUFDLFFBQUcxMEIsRUFBRVgsR0FBRixLQUFROUMsU0FBUixJQUFtQixPQUFPeUQsRUFBRVgsR0FBVCxJQUFjLFFBQXBDLEVBQTZDO0FBQUMsU0FBR2tCLElBQUVQLEVBQUVYLEdBQUYsR0FBTStDLEVBQUVzeUIsV0FBYixFQUF5QjtBQUFDLGNBQU8sS0FBUDtBQUFhO0FBQUMsUUFBRzEwQixFQUFFMjBCLEdBQUYsS0FBUXA0QixTQUFSLElBQW1CNkYsRUFBRXV5QixHQUFGLEtBQVFwNEIsU0FBOUIsRUFBd0M7QUFBQyxTQUFHeUQsRUFBRTIwQixHQUFGLEtBQVF2eUIsRUFBRXV5QixHQUFiLEVBQWlCO0FBQUMsY0FBTyxLQUFQO0FBQWE7QUFBQyxRQUFHLENBQUN6ekIsRUFBRTFCLE1BQUYsQ0FBU2xDLENBQVQsRUFBV3FELENBQVgsRUFBYXlCLEVBQUUxSCxHQUFmLENBQUosRUFBd0I7QUFBQyxZQUFPLEtBQVA7QUFBYSxXQUFPLElBQVA7QUFBWSxFQUFudkMsQ0FBb3ZDcWMsS0FBS2haLEdBQUwsQ0FBU0MsR0FBVCxDQUFhczJCLGFBQWIsR0FBMkIsVUFBUy96QixDQUFULEVBQVdNLENBQVgsRUFBYTtBQUFDLE9BQUlMLElBQUV1VyxLQUFLaFosR0FBTCxDQUFTQyxHQUFULENBQWFxMkIsT0FBbkIsQ0FBMkIsSUFBRzl6QixNQUFJLElBQVAsRUFBWTtBQUFDLFlBQU8sS0FBUDtBQUFhLFFBQUcsUUFBT0EsQ0FBUCx5Q0FBT0EsQ0FBUCxPQUFXLFFBQWQsRUFBdUI7QUFBQyxZQUFPLEtBQVA7QUFBYSxRQUFHLE9BQU9BLEVBQUVySyxNQUFULEtBQWtCLFFBQXJCLEVBQThCO0FBQUMsWUFBTyxLQUFQO0FBQWEsU0FBSSxJQUFJaUssSUFBRSxDQUFWLEVBQVlBLElBQUVJLEVBQUVySyxNQUFoQixFQUF1QmlLLEdBQXZCLEVBQTJCO0FBQUMsU0FBRyxDQUFDSyxFQUFFRCxFQUFFSixDQUFGLENBQUYsRUFBT1UsQ0FBUCxDQUFKLEVBQWM7QUFBQyxjQUFPLEtBQVA7QUFBYTtBQUFDLFdBQU8sSUFBUDtBQUFZLEVBQXBQLENBQXFQa1csS0FBS2haLEdBQUwsQ0FBU0MsR0FBVCxDQUFhcTJCLE9BQWIsR0FBcUIsVUFBU2wwQixDQUFULEVBQVdJLENBQVgsRUFBYTtBQUFDLE9BQUdBLE1BQUksSUFBUCxFQUFZO0FBQUMsWUFBTyxLQUFQO0FBQWEsUUFBRyxRQUFPQSxDQUFQLHlDQUFPQSxDQUFQLE9BQVcsUUFBZCxFQUF1QjtBQUFDLFlBQU8sS0FBUDtBQUFhLFFBQUcsT0FBT0EsRUFBRXJLLE1BQVQsS0FBa0IsUUFBckIsRUFBOEI7QUFBQyxZQUFPLEtBQVA7QUFBYSxTQUFJLElBQUlzSyxJQUFFLENBQVYsRUFBWUEsSUFBRUQsRUFBRXJLLE1BQWhCLEVBQXVCc0ssR0FBdkIsRUFBMkI7QUFBQyxTQUFHRCxFQUFFQyxDQUFGLEtBQU1MLENBQVQsRUFBVztBQUFDLGNBQU8sSUFBUDtBQUFZO0FBQUMsV0FBTyxLQUFQO0FBQWEsRUFBaE4sQ0FBaU40VyxLQUFLaFosR0FBTCxDQUFTQyxHQUFULENBQWErMUIsYUFBYixHQUEyQixFQUFDYSxPQUFNLFlBQVAsRUFBb0JDLE9BQU0sWUFBMUIsRUFBdUNDLE9BQU0sWUFBN0MsRUFBMERDLE9BQU0sZUFBaEUsRUFBZ0ZDLE9BQU0sZUFBdEYsRUFBc0dDLE9BQU0sZUFBNUcsRUFBNEhDLE9BQU0saUJBQWxJLEVBQW9KQyxPQUFNLGlCQUExSixFQUE0S0MsT0FBTSxzQkFBbEwsRUFBeU1DLE9BQU0sc0JBQS9NLEVBQXNPQyxPQUFNLHNCQUE1TyxFQUFtUUMsTUFBSyxNQUF4USxFQUEzQixDQUE0U3hlLEtBQUtoWixHQUFMLENBQVNDLEdBQVQsQ0FBYW0xQixnQkFBYixHQUE4QixVQUFTM3lCLENBQVQsRUFBV0QsQ0FBWCxFQUFhSixDQUFiLEVBQWU7QUFBQyxPQUFJN0MsSUFBRSxJQUFOLENBQVcsSUFBRztBQUFDQSxTQUFFd2QsVUFBVXRhLENBQVYsQ0FBRixDQUFlLElBQUcsUUFBT2xELENBQVAseUNBQU9BLENBQVAsTUFBVSxRQUFiLEVBQXNCO0FBQUMsY0FBTyxDQUFQO0FBQVMsVUFBR0EsRUFBRStDLFdBQUYsS0FBZ0J4USxLQUFuQixFQUF5QjtBQUFDLGNBQU8sQ0FBUDtBQUFTLFVBQUcwUSxDQUFILEVBQUs7QUFBQ0EsU0FBRUosQ0FBRixJQUFLN0MsQ0FBTDtBQUFPLGFBQU8sQ0FBUDtBQUFTLElBQTVHLENBQTRHLE9BQU11RCxDQUFOLEVBQVE7QUFBQyxZQUFPLENBQVA7QUFBUztBQUFDLEVBQXhMLENBQXlMa1csS0FBS2haLEdBQUwsQ0FBU0MsR0FBVCxDQUFhODFCLGtCQUFiLEdBQWdDLFVBQVN2ekIsQ0FBVCxFQUFXO0FBQUMsT0FBSUMsSUFBRSxJQUFOLENBQVcsSUFBRztBQUFDQSxTQUFFc2EsVUFBVXZhLENBQVYsQ0FBRixDQUFlLElBQUcsUUFBT0MsQ0FBUCx5Q0FBT0EsQ0FBUCxNQUFVLFFBQWIsRUFBc0I7QUFBQyxjQUFPLElBQVA7QUFBWSxVQUFHQSxFQUFFSCxXQUFGLEtBQWdCeFEsS0FBbkIsRUFBeUI7QUFBQyxjQUFPLElBQVA7QUFBWSxhQUFPMlEsQ0FBUDtBQUFTLElBQXJHLENBQXFHLE9BQU1LLENBQU4sRUFBUTtBQUFDLFlBQU8sSUFBUDtBQUFZO0FBQUMsRUFBbEwsQ0FBbUxrVyxLQUFLaFosR0FBTCxDQUFTQyxHQUFULENBQWF3M0IsK0JBQWIsR0FBNkMsVUFBU2oxQixDQUFULEVBQVc7QUFBQyxPQUFJTSxJQUFFTixFQUFFeWEsS0FBRixDQUFRLHlCQUFSLENBQU4sQ0FBeUMsSUFBR25hLEtBQUcsSUFBTixFQUFXO0FBQUMsV0FBSyx5REFBTDtBQUErRCxXQUFPQSxFQUFFLENBQUYsQ0FBUDtBQUFZLEVBQXpMLENBQTBMa1csS0FBS2haLEdBQUwsQ0FBU0MsR0FBVCxDQUFheTNCLGdCQUFiLEdBQThCLFVBQVN0MUIsQ0FBVCxFQUFXO0FBQUMsT0FBR0EsRUFBRW5GLEdBQUYsS0FBUSxLQUFSLElBQWVtRixFQUFFbkYsR0FBRixLQUFRLElBQXZCLElBQTZCbUYsRUFBRW5GLEdBQUYsS0FBUSxLQUF4QyxFQUE4QztBQUFDLFdBQUsseUNBQUw7QUFBK0MsUUFBSTZGLElBQUUsR0FBTixDQUFVLElBQUdWLEVBQUVuRixHQUFGLEtBQVEsS0FBWCxFQUFpQjtBQUFDLFNBQUcsT0FBT21GLEVBQUUvQixDQUFULElBQVksUUFBWixJQUFzQixPQUFPK0IsRUFBRTdDLENBQVQsSUFBWSxRQUFyQyxFQUE4QztBQUFDLGFBQUssaUNBQUw7QUFBdUMsV0FBRyxVQUFRNkMsRUFBRTdDLENBQVYsR0FBWSxJQUFmLENBQW9CdUQsS0FBRyxZQUFVVixFQUFFbkYsR0FBWixHQUFnQixJQUFuQixDQUF3QjZGLEtBQUcsVUFBUVYsRUFBRS9CLENBQVYsR0FBWSxJQUFmO0FBQW9CLElBQXhLLE1BQTRLO0FBQUMsU0FBRytCLEVBQUVuRixHQUFGLEtBQVEsSUFBWCxFQUFnQjtBQUFDLFdBQUcsT0FBT21GLEVBQUV4QixHQUFULElBQWMsUUFBZCxJQUF3QixPQUFPd0IsRUFBRXZCLENBQVQsSUFBWSxRQUFwQyxJQUE4QyxPQUFPdUIsRUFBRXRCLENBQVQsSUFBWSxRQUE3RCxFQUFzRTtBQUFDLGVBQUsscUNBQUw7QUFBMkMsYUFBRyxZQUFVc0IsRUFBRXhCLEdBQVosR0FBZ0IsSUFBbkIsQ0FBd0JrQyxLQUFHLFlBQVVWLEVBQUVuRixHQUFaLEdBQWdCLElBQW5CLENBQXdCNkYsS0FBRyxVQUFRVixFQUFFdkIsQ0FBVixHQUFZLElBQWYsQ0FBb0JpQyxLQUFHLFVBQVFWLEVBQUV0QixDQUFWLEdBQVksSUFBZjtBQUFvQixNQUEzTixNQUErTjtBQUFDLFdBQUdzQixFQUFFbkYsR0FBRixLQUFRLEtBQVgsRUFBaUI7QUFBQyxhQUFHLE9BQU9tRixFQUFFUyxDQUFULElBQVksUUFBZixFQUF3QjtBQUFDLGlCQUFLLHNDQUFMO0FBQTRDLGVBQUcsWUFBVVQsRUFBRW5GLEdBQVosR0FBZ0IsSUFBbkIsQ0FBd0I2RixLQUFHLFVBQVFWLEVBQUVTLENBQVYsR0FBWSxJQUFmO0FBQW9CO0FBQUM7QUFBQyxRQUFJTCxJQUFFOFcsVUFBVXhXLENBQVYsQ0FBTixDQUFtQixJQUFJTCxJQUFFdVcsS0FBS3RYLE1BQUwsQ0FBWUMsSUFBWixDQUFpQjBYLE9BQWpCLENBQXlCN1csQ0FBekIsRUFBMkIsUUFBM0IsQ0FBTixDQUEyQyxJQUFJakQsSUFBRXFnQixVQUFVbmQsQ0FBVixDQUFOLENBQW1CLE9BQU9sRCxDQUFQO0FBQVMsRUFBOXZCLENBQSt2QnlaLEtBQUtoWixHQUFMLENBQVN3MkIsT0FBVCxHQUFpQixFQUFqQixDQUFvQnhkLEtBQUtoWixHQUFMLENBQVN3MkIsT0FBVCxDQUFpQjc5QixHQUFqQixHQUFxQixVQUFTOEosQ0FBVCxFQUFXO0FBQUMsT0FBSUQsSUFBRXdXLEtBQUtoWixHQUFMLENBQVN3MkIsT0FBZjtBQUFBLE9BQXVCcDBCLElBQUVJLEVBQUVpMEIsTUFBM0I7QUFBQSxPQUFrQzN6QixJQUFFTixFQUFFbTFCLE9BQXRDLENBQThDLElBQUdsMUIsS0FBRyxLQUFOLEVBQVk7QUFBQyxZQUFPTCxHQUFQO0FBQVcsSUFBeEIsTUFBNEI7QUFBQyxTQUFHSyxLQUFHLGFBQU4sRUFBb0I7QUFBQyxjQUFPTCxNQUFJLEtBQUcsRUFBZDtBQUFpQixNQUF0QyxNQUEwQztBQUFDLFdBQUdLLEtBQUcsWUFBTixFQUFtQjtBQUFDLGdCQUFPTCxNQUFJLEtBQUcsRUFBSCxHQUFNLEVBQWpCO0FBQW9CLFFBQXhDLE1BQTRDO0FBQUMsYUFBR0ssS0FBRyxjQUFOLEVBQXFCO0FBQUMsa0JBQU9MLE1BQUksS0FBRyxFQUFILEdBQU0sRUFBTixHQUFTLEVBQXBCO0FBQXVCLFVBQTdDLE1BQWlEO0FBQUMsZUFBR0ssS0FBRyxhQUFOLEVBQW9CO0FBQUMsb0JBQU9MLE1BQUksS0FBRyxFQUFILEdBQU0sRUFBTixHQUFTLEdBQXBCO0FBQXdCLFlBQTdDLE1BQWlEO0FBQUMsaUJBQUdLLEVBQUV3YSxLQUFGLENBQVEsSUFBUixDQUFILEVBQWlCO0FBQUMsc0JBQU9uYSxFQUFFTCxDQUFGLENBQVA7QUFBWSxjQUE5QixNQUFrQztBQUFDLG1CQUFHQSxFQUFFd2EsS0FBRixDQUFRLFVBQVIsQ0FBSCxFQUF1QjtBQUFDLHdCQUFPM2YsU0FBU21GLENBQVQsQ0FBUDtBQUFtQjtBQUFDO0FBQUM7QUFBQztBQUFDO0FBQUM7QUFBQyxVQUFLLHlCQUF1QkEsQ0FBNUI7QUFBOEIsRUFBMVosQ0FBMlp1VyxLQUFLaFosR0FBTCxDQUFTdzJCLE9BQVQsQ0FBaUJtQixPQUFqQixHQUF5QixVQUFTNzBCLENBQVQsRUFBVztBQUFDLFVBQU91ZSxVQUFVdmUsQ0FBVixDQUFQO0FBQW9CLEVBQXpELENBQTBEa1csS0FBS2haLEdBQUwsQ0FBU3cyQixPQUFULENBQWlCQyxNQUFqQixHQUF3QixZQUFVO0FBQUMsT0FBSTN6QixJQUFFLENBQUMsRUFBRSxJQUFJOUIsSUFBSixLQUFXLElBQWIsQ0FBUCxDQUEwQixPQUFPOEIsQ0FBUDtBQUFTLEVBQXRFLENBQXVFa1csS0FBS2haLEdBQUwsQ0FBU3cyQixPQUFULENBQWlCb0IsaUJBQWpCLEdBQW1DLFVBQVM5MEIsQ0FBVCxFQUFXO0FBQUMsT0FBSU4sSUFBRSxJQUFJeEIsSUFBSixDQUFTOEIsSUFBRSxJQUFYLENBQU4sQ0FBdUIsT0FBT04sRUFBRXExQixXQUFGLEVBQVA7QUFBdUIsRUFBN0YsQ0FBOEY3ZSxLQUFLaFosR0FBTCxDQUFTdzJCLE9BQVQsQ0FBaUJzQixZQUFqQixHQUE4QixVQUFTdjRCLENBQVQsRUFBVztBQUFDLE9BQUkxRCxJQUFFLElBQUltRixJQUFKLENBQVN6QixJQUFFLElBQVgsQ0FBTjtBQUFBLE9BQXVCMkMsSUFBRSxDQUFDLFNBQU9yRyxFQUFFMmxCLGNBQUYsRUFBUixFQUE0QmhkLEtBQTVCLENBQWtDLENBQUMsQ0FBbkMsQ0FBekI7QUFBQSxPQUErRHZDLElBQUUsQ0FBQyxRQUFNcEcsRUFBRTRsQixXQUFGLEtBQWdCLENBQXRCLENBQUQsRUFBMkJqZCxLQUEzQixDQUFpQyxDQUFDLENBQWxDLENBQWpFO0FBQUEsT0FBc0doQyxJQUFFLENBQUMsT0FBSzNHLEVBQUU2bEIsVUFBRixFQUFOLEVBQXNCbGQsS0FBdEIsQ0FBNEIsQ0FBQyxDQUE3QixDQUF4RztBQUFBLE9BQXdJMUIsSUFBRSxDQUFDLE9BQUtqSCxFQUFFOGxCLFdBQUYsRUFBTixFQUF1Qm5kLEtBQXZCLENBQTZCLENBQUMsQ0FBOUIsQ0FBMUk7QUFBQSxPQUEySy9CLElBQUUsQ0FBQyxPQUFLNUcsRUFBRStsQixhQUFGLEVBQU4sRUFBeUJwZCxLQUF6QixDQUErQixDQUFDLENBQWhDLENBQTdLO0FBQUEsT0FBZ05yQyxJQUFFLENBQUMsT0FBS3RHLEVBQUVnbUIsYUFBRixFQUFOLEVBQXlCcmQsS0FBekIsQ0FBK0IsQ0FBQyxDQUFoQyxDQUFsTixDQUFxUCxPQUFPdEMsSUFBRUQsQ0FBRixHQUFJTyxDQUFKLEdBQU1NLENBQU4sR0FBUUwsQ0FBUixHQUFVTixDQUFWLEdBQVksR0FBbkI7QUFBdUIsRUFBdFQ7QUFDLzRQNDFCLFNBQVF0ZixZQUFSLEdBQXVCQSxZQUF2QjtBQUNBc2YsU0FBUS9mLGFBQVIsR0FBd0JBLGFBQXhCOztBQUVBK2YsU0FBUWp0QixVQUFSLEdBQXFCQSxVQUFyQjtBQUNBaXRCLFNBQVF4ZSxNQUFSLEdBQWlCQSxNQUFqQjtBQUNBd2UsU0FBUS9PLEtBQVIsR0FBZ0JoUSxLQUFLdFgsTUFBTCxDQUFZc25CLEtBQTVCO0FBQ0ErTyxTQUFRek8sR0FBUixHQUFjdFEsS0FBS3RYLE1BQUwsQ0FBWTRuQixHQUExQjtBQUNBeU8sU0FBUTNQLFNBQVIsR0FBb0JwUCxLQUFLdFgsTUFBTCxDQUFZMG1CLFNBQWhDO0FBQ0EyUCxTQUFROWUsYUFBUixHQUF3QkQsS0FBS3RYLE1BQUwsQ0FBWXVYLGFBQXBDO0FBQ0E4ZSxTQUFRdlEsR0FBUixHQUFjeE8sS0FBS3RYLE1BQUwsQ0FBWThsQixHQUExQjtBQUNBdVEsU0FBUTlOLE1BQVIsR0FBaUJqUixLQUFLdFgsTUFBTCxDQUFZdW9CLE1BQTdCO0FBQ0E4TixTQUFRdFAsT0FBUixHQUFrQkEsT0FBbEI7QUFDQXNQLFNBQVExYSxPQUFSLEdBQWtCQSxPQUFsQjtBQUNBMGEsU0FBUXIzQixJQUFSLEdBQWVBLElBQWY7QUFDQXEzQixTQUFRaDFCLFFBQVIsR0FBbUJBLFFBQW5COztBQUVBO0FBQ0FnMUIsU0FBUXZ0QixRQUFSLEdBQW1CQSxRQUFuQjtBQUNBdXRCLFNBQVFydEIsT0FBUixHQUFrQkEsT0FBbEI7O0FBRUE7QUFDQXF0QixTQUFRNVksS0FBUixHQUFnQkEsS0FBaEI7QUFDQTRZLFNBQVEzWSxLQUFSLEdBQWdCQSxLQUFoQjtBQUNBMlksU0FBUTFZLE9BQVIsR0FBa0JBLE9BQWxCO0FBQ0EwWSxTQUFRelksTUFBUixHQUFpQkEsTUFBakI7QUFDQXlZLFNBQVF4WSxNQUFSLEdBQWlCQSxNQUFqQjtBQUNBd1ksU0FBUXZZLE9BQVIsR0FBa0JBLE9BQWxCO0FBQ0F1WSxTQUFRclksT0FBUixHQUFrQkEsT0FBbEI7QUFDQXFZLFNBQVF0WSxTQUFSLEdBQW9CQSxTQUFwQjtBQUNBc1ksU0FBUXBZLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0FvWSxTQUFRenRCLE9BQVIsR0FBa0JBLE9BQWxCO0FBQ0F5dEIsU0FBUW5ZLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0FtWSxTQUFRbFksU0FBUixHQUFvQkEsU0FBcEI7QUFDQWtZLFNBQVFqWSxVQUFSLEdBQXFCQSxVQUFyQjtBQUNBaVksU0FBUWhZLFVBQVIsR0FBcUJBLFVBQXJCO0FBQ0FnWSxTQUFRM1gsU0FBUixHQUFvQkEsU0FBcEI7QUFDQTJYLFNBQVExWCxTQUFSLEdBQW9CQSxTQUFwQjtBQUNBMFgsU0FBUXpYLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0F5WCxTQUFRalosU0FBUixHQUFvQkEsU0FBcEI7QUFDQWlaLFNBQVEzZSxTQUFSLEdBQW9CQSxTQUFwQjtBQUNBMmUsU0FBUXplLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0F5ZSxTQUFReFgsUUFBUixHQUFtQkEsUUFBbkI7QUFDQXdYLFNBQVF2WCxVQUFSLEdBQXFCQSxVQUFyQjtBQUNBdVgsU0FBUXRYLFVBQVIsR0FBcUJBLFVBQXJCO0FBQ0FzWCxTQUFRclgsUUFBUixHQUFtQkEsUUFBbkI7QUFDQXFYLFNBQVFwWCxRQUFSLEdBQW1CQSxRQUFuQjtBQUNBb1gsU0FBUW5YLGdCQUFSLEdBQTJCQSxnQkFBM0I7QUFDQW1YLFNBQVEvVyxnQkFBUixHQUEyQkEsZ0JBQTNCO0FBQ0ErVyxTQUFRNVcsVUFBUixHQUFxQkEsVUFBckI7QUFDQTRXLFNBQVExVyxTQUFSLEdBQW9CQSxTQUFwQjtBQUNBMFcsU0FBUXpXLFVBQVIsR0FBcUJBLFVBQXJCO0FBQ0F5VyxTQUFReFcsVUFBUixHQUFxQkEsVUFBckI7QUFDQXdXLFNBQVE5WCxXQUFSLEdBQXNCQSxXQUF0QjtBQUNBOFgsU0FBUTVYLFdBQVIsR0FBc0JBLFdBQXRCO0FBQ0E0WCxTQUFRaFcsU0FBUixHQUFvQkEsU0FBcEI7QUFDQWdXLFNBQVE1VixTQUFSLEdBQW9CQSxTQUFwQjtBQUNBNFYsU0FBUTNWLE9BQVIsR0FBa0JBLE9BQWxCO0FBQ0EyVixTQUFRMVYsT0FBUixHQUFrQkEsT0FBbEI7QUFDQTBWLFNBQVE3WCxxQkFBUixHQUFnQ0EscUJBQWhDO0FBQ0E2WCxTQUFRelYsY0FBUixHQUF5QkEsY0FBekI7QUFDQXlWLFNBQVF4VixhQUFSLEdBQXdCQSxhQUF4QjtBQUNBd1YsU0FBUW5WLFdBQVIsR0FBc0JBLFdBQXRCO0FBQ0FtVixTQUFRbFYsY0FBUixHQUF5QkEsY0FBekI7QUFDQWtWLFNBQVFoVixVQUFSLEdBQXFCQSxVQUFyQjs7QUFFQTtBQUNBZ1YsU0FBUS9lLElBQVIsR0FBZUEsSUFBZjtBQUNBK2UsU0FBUXIyQixNQUFSLEdBQWlCc1gsS0FBS3RYLE1BQXRCO0FBQ0FxMkIsU0FBUTNaLElBQVIsR0FBZXBGLEtBQUtvRixJQUFwQjtBQUNBMlosU0FBUS8zQixHQUFSLEdBQWNnWixLQUFLaFosR0FBbkI7QUFDQSszQixTQUFRaDJCLElBQVIsR0FBZWlYLEtBQUtqWCxJQUFwQixDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xMQTs7QUFDQTs7QUFDQTs7MkpBTEE7QUFDQTs7S0FNYWxPLGEsV0FBQUEsYTtBQUNULGtDQU1HO0FBQUEsYUFKQ0YsR0FJRCxRQUpDQSxHQUlEO0FBQUEsYUFKTUwsU0FJTixRQUpNQSxTQUlOO0FBQUEsYUFKaUJmLFlBSWpCLFFBSmlCQSxZQUlqQjtBQUFBLGFBSitCRixhQUkvQixRQUorQkEsYUFJL0I7QUFBQSxhQUo4Q0MsS0FJOUMsUUFKOENBLEtBSTlDO0FBQUEsYUFKcURpQixTQUlyRCxRQUpxREEsU0FJckQ7QUFBQSxhQUZDZixJQUVELFFBRkNBLElBRUQ7QUFBQSxhQUZPRSxNQUVQLFFBRk9BLE1BRVA7QUFBQSxhQUZlQyxPQUVmLFFBRmVBLE9BRWY7QUFBQSxhQUZ3QkMsT0FFeEIsUUFGd0JBLE9BRXhCO0FBQUEsYUFGaUNDLFVBRWpDLFFBRmlDQSxVQUVqQztBQUFBLGFBRjZDQyxhQUU3QyxRQUY2Q0EsYUFFN0M7QUFBQSxhQUY0REMsVUFFNUQsUUFGNERBLFVBRTVEO0FBQUEsYUFGd0VDLFVBRXhFLFFBRndFQSxVQUV4RTtBQUFBLGFBRm9GQyxRQUVwRixRQUZvRkEsUUFFcEY7QUFBQSxhQURDQyxPQUNELFFBRENBLE9BQ0Q7QUFBQSxhQURVQyxXQUNWLFFBRFVBLFdBQ1Y7QUFBQSxhQUR1QkMsZ0JBQ3ZCLFFBRHVCQSxnQkFDdkI7O0FBQUE7O0FBQ0MsYUFBSSxDQUFDTyxHQUFMLEVBQVU7QUFDTjNELHNCQUFJbUIsS0FBSixDQUFVLG1DQUFWO0FBQ0EsbUJBQU0sSUFBSWMsS0FBSixDQUFVLEtBQVYsQ0FBTjtBQUNIO0FBQ0QsYUFBSSxDQUFDcUIsU0FBTCxFQUFnQjtBQUNadEQsc0JBQUltQixLQUFKLENBQVUseUNBQVY7QUFDQSxtQkFBTSxJQUFJYyxLQUFKLENBQVUsV0FBVixDQUFOO0FBQ0g7QUFDRCxhQUFJLENBQUNNLFlBQUwsRUFBbUI7QUFDZnZDLHNCQUFJbUIsS0FBSixDQUFVLDRDQUFWO0FBQ0EsbUJBQU0sSUFBSWMsS0FBSixDQUFVLGNBQVYsQ0FBTjtBQUNIO0FBQ0QsYUFBSSxDQUFDSSxhQUFMLEVBQW9CO0FBQ2hCckMsc0JBQUltQixLQUFKLENBQVUsNkNBQVY7QUFDQSxtQkFBTSxJQUFJYyxLQUFKLENBQVUsZUFBVixDQUFOO0FBQ0g7QUFDRCxhQUFJLENBQUNLLEtBQUwsRUFBWTtBQUNSdEMsc0JBQUltQixLQUFKLENBQVUscUNBQVY7QUFDQSxtQkFBTSxJQUFJYyxLQUFKLENBQVUsT0FBVixDQUFOO0FBQ0g7QUFDRCxhQUFJLENBQUNzQixTQUFMLEVBQWdCO0FBQ1p2RCxzQkFBSW1CLEtBQUosQ0FBVSx5Q0FBVjtBQUNBLG1CQUFNLElBQUljLEtBQUosQ0FBVSxXQUFWLENBQU47QUFDSDs7QUFFRCxhQUFJK2xDLE9BQU9ua0MsY0FBY29rQyxNQUFkLENBQXFCNWxDLGFBQXJCLENBQVg7QUFDQSxjQUFLSSxLQUFMLEdBQWEsSUFBSWlDLHdCQUFKLENBQWdCLEVBQUVrRyxPQUFPbzlCLElBQVQsRUFBZXhsQyxVQUFmLEVBQXFCYyxvQkFBckIsRUFBZ0NDLG9CQUFoQyxFQUFoQixDQUFiOztBQUVBSSxlQUFNdWtDLHVCQUFXQyxhQUFYLENBQXlCeGtDLEdBQXpCLEVBQThCLFdBQTlCLEVBQTJDTCxTQUEzQyxDQUFOO0FBQ0FLLGVBQU11a0MsdUJBQVdDLGFBQVgsQ0FBeUJ4a0MsR0FBekIsRUFBOEIsY0FBOUIsRUFBOENwQixZQUE5QyxDQUFOO0FBQ0FvQixlQUFNdWtDLHVCQUFXQyxhQUFYLENBQXlCeGtDLEdBQXpCLEVBQThCLGVBQTlCLEVBQStDdEIsYUFBL0MsQ0FBTjtBQUNBc0IsZUFBTXVrQyx1QkFBV0MsYUFBWCxDQUF5QnhrQyxHQUF6QixFQUE4QixPQUE5QixFQUF1Q3JCLEtBQXZDLENBQU47O0FBRUFxQixlQUFNdWtDLHVCQUFXQyxhQUFYLENBQXlCeGtDLEdBQXpCLEVBQThCLE9BQTlCLEVBQXVDLEtBQUtsQixLQUFMLENBQVd3QixFQUFsRCxDQUFOO0FBQ0EsYUFBSStqQyxJQUFKLEVBQVU7QUFDTnJrQyxtQkFBTXVrQyx1QkFBV0MsYUFBWCxDQUF5QnhrQyxHQUF6QixFQUE4QixPQUE5QixFQUF1QyxLQUFLbEIsS0FBTCxDQUFXbUksS0FBbEQsQ0FBTjtBQUNIOztBQUVELGFBQUkyRCxXQUFXLEVBQUU3TCxjQUFGLEVBQVVDLGdCQUFWLEVBQW1CQyxnQkFBbkIsRUFBNEJDLHNCQUE1QixFQUF3Q0MsNEJBQXhDLEVBQXVEQyxzQkFBdkQsRUFBbUVDLHNCQUFuRSxFQUErRUMsa0JBQS9FLEVBQXlGQyxnQkFBekYsRUFBa0dDLHdCQUFsRyxFQUFmO0FBQ0EsY0FBSSxJQUFJc0YsR0FBUixJQUFlOEYsUUFBZixFQUF3QjtBQUNwQixpQkFBSUEsU0FBUzlGLEdBQVQsQ0FBSixFQUFtQjtBQUNmOUUsdUJBQU11a0MsdUJBQVdDLGFBQVgsQ0FBeUJ4a0MsR0FBekIsRUFBOEI4RSxHQUE5QixFQUFtQzhGLFNBQVM5RixHQUFULENBQW5DLENBQU47QUFDSDtBQUNKOztBQUVELGNBQUksSUFBSUEsSUFBUixJQUFlckYsZ0JBQWYsRUFBZ0M7QUFDNUJPLG1CQUFNdWtDLHVCQUFXQyxhQUFYLENBQXlCeGtDLEdBQXpCLEVBQThCOEUsSUFBOUIsRUFBbUNyRixpQkFBaUJxRixJQUFqQixDQUFuQyxDQUFOO0FBQ0g7O0FBRUQsY0FBSzlFLEdBQUwsR0FBV0EsR0FBWDtBQUNIOzttQkFFTXNrQyxNLG1CQUFPNWxDLGEsRUFBZTtBQUN6QixhQUFJa0osU0FBU2xKLGNBQWM0dkIsS0FBZCxDQUFvQixNQUFwQixFQUE0QnJsQixNQUE1QixDQUFtQyxVQUFTaEUsSUFBVCxFQUFlO0FBQzNELG9CQUFPQSxTQUFTLFVBQWhCO0FBQ0gsVUFGWSxDQUFiO0FBR0EsZ0JBQU8sQ0FBQyxDQUFFMkMsT0FBTyxDQUFQLENBQVY7QUFDSCxNOzttQkFFTTY4QixPLG9CQUFRL2xDLGEsRUFBZTtBQUMxQixhQUFJa0osU0FBU2xKLGNBQWM0dkIsS0FBZCxDQUFvQixNQUFwQixFQUE0QnJsQixNQUE1QixDQUFtQyxVQUFTaEUsSUFBVCxFQUFlO0FBQzNELG9CQUFPQSxTQUFTLE9BQWhCO0FBQ0gsVUFGWSxDQUFiO0FBR0EsZ0JBQU8sQ0FBQyxDQUFFMkMsT0FBTyxDQUFQLENBQVY7QUFDSCxNOzs7Ozs7Ozs7Ozs7Ozs7O0FDNUVMOztBQUNBOzsySkFKQTtBQUNBOztLQUthMjhCLFUsV0FBQUEsVTs7Ozs7Z0JBQ0ZDLGEsMEJBQWN4a0MsRyxFQUFLK0gsSSxFQUFNMUosSyxFQUFPO0FBQ25DLGFBQUkyQixJQUFJdUUsT0FBSixDQUFZLEdBQVosSUFBbUIsQ0FBdkIsRUFBMEI7QUFDdEJ2RSxvQkFBTyxHQUFQO0FBQ0g7O0FBRUQsYUFBSUEsSUFBSUEsSUFBSXdFLE1BQUosR0FBYSxDQUFqQixNQUF3QixHQUE1QixFQUFpQztBQUM3QnhFLG9CQUFPLEdBQVA7QUFDSDs7QUFFREEsZ0JBQU8yUixtQkFBbUI1SixJQUFuQixDQUFQO0FBQ0EvSCxnQkFBTyxHQUFQO0FBQ0FBLGdCQUFPMlIsbUJBQW1CdFQsS0FBbkIsQ0FBUDs7QUFFQSxnQkFBTzJCLEdBQVA7QUFDSCxNOztnQkFFTTBrQyxnQiw2QkFBaUJybUMsSyxFQUF5QztBQUFBLGFBQWxDc21DLFNBQWtDLHVFQUF0QixHQUFzQjtBQUFBLGFBQWpCQyxNQUFpQix1RUFBUjFuQyxjQUFROztBQUM3RCxhQUFJLE9BQU9tQixLQUFQLEtBQWlCLFFBQXJCLEVBQThCO0FBQzFCQSxxQkFBUXVtQyxPQUFPeitCLFFBQVAsQ0FBZ0IwK0IsSUFBeEI7QUFDSDs7QUFFRCxhQUFJQyxNQUFNem1DLE1BQU0wbUMsV0FBTixDQUFrQkosU0FBbEIsQ0FBVjtBQUNBLGFBQUlHLE9BQU8sQ0FBWCxFQUFjO0FBQ1Z6bUMscUJBQVFBLE1BQU1tSCxNQUFOLENBQWFzL0IsTUFBTSxDQUFuQixDQUFSO0FBQ0g7O0FBRUQsYUFBSUUsU0FBUyxFQUFiO0FBQUEsYUFDSUMsUUFBUSxtQkFEWjtBQUFBLGFBRUlsMEIsQ0FGSjs7QUFJQSxhQUFJbTBCLFVBQVUsQ0FBZDtBQUNBLGdCQUFPbjBCLElBQUlrMEIsTUFBTUUsSUFBTixDQUFXOW1DLEtBQVgsQ0FBWCxFQUE4QjtBQUMxQjJtQyxvQkFBT3h6QixtQkFBbUJULEVBQUUsQ0FBRixDQUFuQixDQUFQLElBQW1DUyxtQkFBbUJULEVBQUUsQ0FBRixDQUFuQixDQUFuQztBQUNBLGlCQUFJbTBCLFlBQVksRUFBaEIsRUFBb0I7QUFDaEI3b0MsMEJBQUltQixLQUFKLENBQVUsOEVBQVYsRUFBMEZhLEtBQTFGO0FBQ0Esd0JBQU87QUFDSGIsNEJBQU87QUFESixrQkFBUDtBQUdIO0FBQ0o7O0FBRUQsY0FBSyxJQUFJNG5DLElBQVQsSUFBaUJKLE1BQWpCLEVBQXlCO0FBQ3JCLG9CQUFPQSxNQUFQO0FBQ0g7O0FBRUQsZ0JBQU8sRUFBUDtBQUNILE07Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xETDs7QUFDQTs7QUFDQTs7Ozs7Ozs7OztnZkFMQTtBQUNBOztLQU1hamtDLFcsV0FBQUEsVzs7O0FBQ1QsNEJBQWdEO0FBQUEsd0ZBQUosRUFBSTtBQUFBLGFBQW5Da0csS0FBbUMsUUFBbkNBLEtBQW1DO0FBQUEsYUFBNUJySCxTQUE0QixRQUE1QkEsU0FBNEI7QUFBQSxhQUFqQkQsU0FBaUIsUUFBakJBLFNBQWlCOztBQUFBOztBQUFBLHNEQUM1QyxrQkFBTWtRLFVBQVUsQ0FBVixDQUFOLENBRDRDOztBQUc1QyxhQUFJNUksVUFBVSxJQUFkLEVBQW9CO0FBQ2hCLG1CQUFLbytCLE1BQUwsR0FBYyx1QkFBZDtBQUNILFVBRkQsTUFHSyxJQUFJcCtCLEtBQUosRUFBVztBQUNaLG1CQUFLbytCLE1BQUwsR0FBY3ArQixLQUFkO0FBQ0g7O0FBRUQsZUFBSy9ELFVBQUwsR0FBa0J0RCxTQUFsQjtBQUNBLGVBQUswRCxVQUFMLEdBQWtCM0QsU0FBbEI7QUFYNEM7QUFZL0M7OzJCQVlEWSxlLDhCQUFrQjtBQUNkbEUsa0JBQUlnQixLQUFKLENBQVUsNkJBQVY7QUFDQSxnQkFBT29PLEtBQUsyRSxTQUFMLENBQWU7QUFDbEI5UCxpQkFBSSxLQUFLQSxFQURTO0FBRWxCekIsbUJBQU0sS0FBS0EsSUFGTztBQUdsQnltQyxzQkFBUyxLQUFLQSxPQUhJO0FBSWxCcitCLG9CQUFPLEtBQUtBLEtBSk07QUFLbEJySCx3QkFBVyxLQUFLQSxTQUxFO0FBTWxCRCx3QkFBVyxLQUFLQTtBQU5FLFVBQWYsQ0FBUDtBQVFILE07O2lCQUVNcUIsaUIsOEJBQWtCdWtDLGEsRUFBZTtBQUNwQ2xwQyxrQkFBSWdCLEtBQUosQ0FBVSwrQkFBVjtBQUNBLGFBQUl3QixPQUFPNE0sS0FBS0MsS0FBTCxDQUFXNjVCLGFBQVgsQ0FBWDtBQUNBLGdCQUFPLElBQUl4a0MsV0FBSixDQUFnQmxDLElBQWhCLENBQVA7QUFDSCxNOzs7OzZCQTFCVztBQUNSLG9CQUFPLEtBQUt3bUMsTUFBWjtBQUNIOzs7NkJBQ2U7QUFDWixvQkFBTyxLQUFLbmlDLFVBQVo7QUFDSDs7OzZCQUNlO0FBQ1osb0JBQU8sS0FBS0ksVUFBWjtBQUNIOzs7O0dBdkI0QnpCLGE7Ozs7Ozs7Ozs7Ozs7c2pCQ1BqQztBQUNBOztBQUVBOztBQUNBOzs7Ozs7OztLQUVhQSxLLFdBQUFBLEs7QUFDVCxzQkFBc0M7QUFBQSx3RkFBSixFQUFJO0FBQUEsYUFBekJ2QixFQUF5QixRQUF6QkEsRUFBeUI7QUFBQSxhQUFyQnpCLElBQXFCLFFBQXJCQSxJQUFxQjtBQUFBLGFBQWZ5bUMsT0FBZSxRQUFmQSxPQUFlOztBQUFBOztBQUNsQyxjQUFLRSxHQUFMLEdBQVdsbEMsTUFBTSx1QkFBakI7QUFDQSxjQUFLdVIsS0FBTCxHQUFhaFQsSUFBYjs7QUFFQSxhQUFJLE9BQU95bUMsT0FBUCxLQUFtQixRQUFuQixJQUErQkEsVUFBVSxDQUE3QyxFQUFnRDtBQUM1QyxrQkFBS0csUUFBTCxHQUFnQkgsT0FBaEI7QUFDSCxVQUZELE1BR0s7QUFDRCxrQkFBS0csUUFBTCxHQUFnQjk3QixTQUFTMEQsS0FBS1osR0FBTCxLQUFhLElBQXRCLENBQWhCO0FBQ0g7QUFDSjs7cUJBWURsTSxlLDhCQUFrQjtBQUNkbEUsa0JBQUlnQixLQUFKLENBQVUsdUJBQVY7QUFDQSxnQkFBT29PLEtBQUsyRSxTQUFMLENBQWU7QUFDbEI5UCxpQkFBSSxLQUFLQSxFQURTO0FBRWxCekIsbUJBQU0sS0FBS0EsSUFGTztBQUdsQnltQyxzQkFBUyxLQUFLQTtBQUhJLFVBQWYsQ0FBUDtBQUtILE07O1dBRU10a0MsaUIsOEJBQWtCdWtDLGEsRUFBZTtBQUNwQ2xwQyxrQkFBSWdCLEtBQUosQ0FBVSx5QkFBVjtBQUNBLGdCQUFPLElBQUl3RSxLQUFKLENBQVU0SixLQUFLQyxLQUFMLENBQVc2NUIsYUFBWCxDQUFWLENBQVA7QUFDSCxNOztXQUVNeGpDLGUsNEJBQWdCMmpDLE8sRUFBU0MsRyxFQUFLOztBQUVqQyxhQUFJQyxTQUFTdjRCLEtBQUtaLEdBQUwsS0FBYSxJQUFiLEdBQW9CazVCLEdBQWpDOztBQUVBLGdCQUFPRCxRQUFRdGdDLFVBQVIsR0FBcUJyRixJQUFyQixDQUEwQixnQkFBUTtBQUNyQzFELHNCQUFJZ0IsS0FBSixDQUFVLGlDQUFWLEVBQTZDZ0ksSUFBN0M7O0FBRUEsaUJBQUl3Z0MsV0FBVyxFQUFmOztBQUhxQyx3Q0FJNUIzOUIsQ0FKNEI7QUFLakMscUJBQUlwRCxNQUFNTyxLQUFLNkMsQ0FBTCxDQUFWO0FBQ0lxSCxxQkFBSW0yQixRQUFRMWdDLEdBQVIsQ0FBWUYsR0FBWixFQUFpQi9FLElBQWpCLENBQXNCLGdCQUFRO0FBQ2xDLHlCQUFJYyxTQUFTLEtBQWI7O0FBRUEseUJBQUlvRSxJQUFKLEVBQVU7QUFDTiw2QkFBSTtBQUNBLGlDQUFJbkcsUUFBUStDLE1BQU1iLGlCQUFOLENBQXdCaUUsSUFBeEIsQ0FBWjs7QUFFQTVJLHNDQUFJZ0IsS0FBSixDQUFVLDRDQUFWLEVBQXdEeUgsR0FBeEQsRUFBNkRoRyxNQUFNd21DLE9BQW5FOztBQUVBLGlDQUFJeG1DLE1BQU13bUMsT0FBTixJQUFpQk0sTUFBckIsRUFBNkI7QUFDekIva0MsMENBQVMsSUFBVDtBQUNIO0FBQ0osMEJBUkQsQ0FTQSxPQUFPK0ssQ0FBUCxFQUFVO0FBQ052UCxzQ0FBSW1CLEtBQUosQ0FBVSxvREFBVixFQUFnRXNILEdBQWhFLEVBQXFFOEcsRUFBRUMsT0FBdkU7QUFDQWhMLHNDQUFTLElBQVQ7QUFDSDtBQUNKLHNCQWRELE1BZUs7QUFDRHhFLGtDQUFJZ0IsS0FBSixDQUFVLHFEQUFWLEVBQWlFeUgsR0FBakU7QUFDQWpFLGtDQUFTLElBQVQ7QUFDSDs7QUFFRCx5QkFBSUEsTUFBSixFQUFZO0FBQ1J4RSxrQ0FBSWdCLEtBQUosQ0FBVSwrQ0FBVixFQUEyRHlILEdBQTNEO0FBQ0EsZ0NBQU80Z0MsUUFBUTdrQyxNQUFSLENBQWVpRSxHQUFmLENBQVA7QUFDSDtBQUNKLGtCQTNCTyxDQU55Qjs7O0FBbUNqQytnQywwQkFBU3RnQyxJQUFULENBQWNnSyxDQUFkO0FBbkNpQzs7QUFJckMsa0JBQUssSUFBSXJILElBQUksQ0FBYixFQUFnQkEsSUFBSTdDLEtBQUtiLE1BQXpCLEVBQWlDMEQsR0FBakMsRUFBc0M7QUFBQSxxQkFFOUJxSCxDQUY4Qjs7QUFBQSx1QkFBN0JySCxDQUE2QjtBQWdDckM7O0FBRUQ3TCxzQkFBSWdCLEtBQUosQ0FBVSxrREFBVixFQUE4RHdvQyxTQUFTcmhDLE1BQXZFO0FBQ0Esb0JBQU83RCxRQUFRbWxDLEdBQVIsQ0FBWUQsUUFBWixDQUFQO0FBQ0gsVUF4Q00sQ0FBUDtBQXlDSCxNOzs7OzZCQXJFUTtBQUNMLG9CQUFPLEtBQUtMLEdBQVo7QUFDSDs7OzZCQUNVO0FBQ1Asb0JBQU8sS0FBSzN6QixLQUFaO0FBQ0g7Ozs2QkFDYTtBQUNWLG9CQUFPLEtBQUs0ekIsUUFBWjtBQUNIOzs7Ozs7Ozs7Ozs7Ozs7bUJDTm1CMzBCLE07QUFyQnhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWUsVUFBU0EsTUFBVCxHQUFrQjtBQUM3QixTQUFJaTFCLGFBQWEsa0NBQWpCO0FBQ0EsU0FBSWo1QixNQUFNLGtCQUFWO0FBQ0EsU0FBSTRELElBQUksQ0FBUjtBQUNBLFNBQUlzMUIsZUFBZSxFQUFuQjtBQUNBLFVBQUssSUFBSTk5QixJQUFJLENBQWIsRUFBZ0JBLElBQUk2OUIsV0FBV3ZoQyxNQUEvQixFQUF1QzBELEdBQXZDLEVBQTRDO0FBQ3hDLGFBQUk2OUIsV0FBVzc5QixDQUFYLE1BQWtCLEdBQWxCLElBQXlCNjlCLFdBQVc3OUIsQ0FBWCxNQUFrQixHQUEvQyxFQUFvRDtBQUNoRDtBQUNBd0ksaUJBQUkwQyxLQUFLdEMsTUFBTCxLQUFnQixFQUFoQixHQUFxQixDQUF6QjtBQUNIOztBQUVELGFBQUlpMUIsV0FBVzc5QixDQUFYLE1BQWtCLEdBQXRCLEVBQTJCO0FBQ3ZCODlCLDZCQUFnQmw1QixJQUFJNEQsQ0FBSixDQUFoQjtBQUNILFVBRkQsTUFFTyxJQUFJcTFCLFdBQVc3OUIsQ0FBWCxNQUFrQixHQUF0QixFQUEyQjtBQUM5QjtBQUNBd0ksa0JBQUssR0FBTCxDQUY4QixDQUVwQjtBQUNWQSxrQkFBSyxHQUFMLENBSDhCLENBR3BCO0FBQ1ZzMUIsNkJBQWdCbDVCLElBQUk0RCxDQUFKLENBQWhCO0FBQ0gsVUFMTSxNQUtBO0FBQ0hzMUIsNkJBQWdCRCxXQUFXNzlCLENBQVgsQ0FBaEI7QUFDSDtBQUNKO0FBQ0QsWUFBTzg5QixZQUFQO0FBQ0g7Ozs7Ozs7Ozs7Ozs7O3NqQkM1Q0Q7QUFDQTs7QUFFQTs7OztBQUVBLEtBQU1DLFlBQVksUUFBbEI7O0tBRWF2bEMsYyxXQUFBQSxjO0FBQ1QsNkJBQVlWLEdBQVosRUFBaUI7QUFBQTs7QUFFYixhQUFJZ0ksU0FBU3U4Qix1QkFBV0csZ0JBQVgsQ0FBNEIxa0MsR0FBNUIsRUFBaUMsR0FBakMsQ0FBYjs7QUFFQSxjQUFLeEMsS0FBTCxHQUFhd0ssT0FBT3hLLEtBQXBCO0FBQ0EsY0FBSzBPLGlCQUFMLEdBQXlCbEUsT0FBT2tFLGlCQUFoQztBQUNBLGNBQUtDLFNBQUwsR0FBaUJuRSxPQUFPbUUsU0FBeEI7O0FBRUEsY0FBS3JOLEtBQUwsR0FBYWtKLE9BQU9sSixLQUFwQjtBQUNBLGNBQUtvSSxRQUFMLEdBQWdCYyxPQUFPZCxRQUF2QjtBQUNBLGNBQUtnL0IsYUFBTCxHQUFxQmwrQixPQUFPaytCLGFBQTVCO0FBQ0EsY0FBSzcrQixZQUFMLEdBQW9CVyxPQUFPWCxZQUEzQjtBQUNBLGNBQUs4K0IsVUFBTCxHQUFrQm4rQixPQUFPbStCLFVBQXpCO0FBQ0EsY0FBS3huQyxLQUFMLEdBQWFxSixPQUFPckosS0FBcEI7QUFDQSxjQUFLeUksT0FBTCxHQUFleUQsU0FBZixDQWRhLENBY2E7O0FBRTFCLGFBQUl1N0IsYUFBYXo4QixTQUFTM0IsT0FBT28rQixVQUFoQixDQUFqQjtBQUNBLGFBQUksT0FBT0EsVUFBUCxLQUFzQixRQUF0QixJQUFrQ0EsYUFBYSxDQUFuRCxFQUFzRDtBQUNsRCxpQkFBSTM1QixNQUFNOUMsU0FBUzBELEtBQUtaLEdBQUwsS0FBYSxJQUF0QixDQUFWO0FBQ0Esa0JBQUs0NUIsVUFBTCxHQUFrQjU1QixNQUFNMjVCLFVBQXhCO0FBQ0g7QUFDSjs7Ozs2QkFFZ0I7QUFDYixpQkFBSSxLQUFLQyxVQUFULEVBQXFCO0FBQ2pCLHFCQUFJNTVCLE1BQU05QyxTQUFTMEQsS0FBS1osR0FBTCxLQUFhLElBQXRCLENBQVY7QUFDQSx3QkFBTyxLQUFLNDVCLFVBQUwsR0FBa0I1NUIsR0FBekI7QUFDSDtBQUNELG9CQUFPNUIsU0FBUDtBQUNIOzs7NkJBRWE7QUFDVixpQkFBSXU3QixhQUFhLEtBQUtBLFVBQXRCO0FBQ0EsaUJBQUlBLGVBQWV2N0IsU0FBbkIsRUFBOEI7QUFDMUIsd0JBQU91N0IsY0FBYyxDQUFyQjtBQUNIO0FBQ0Qsb0JBQU92N0IsU0FBUDtBQUNIOzs7NkJBRVk7QUFDVCxvQkFBTyxDQUFDLEtBQUtsTSxLQUFMLElBQWMsRUFBZixFQUFtQjJ2QixLQUFuQixDQUF5QixHQUF6QixDQUFQO0FBQ0g7Ozs2QkFFcUI7QUFDbEIsb0JBQU8sS0FBS2dZLE1BQUwsQ0FBWS9oQyxPQUFaLENBQW9CMGhDLFNBQXBCLEtBQWtDLENBQWxDLElBQXVDLENBQUMsQ0FBQyxLQUFLLytCLFFBQXJEO0FBQ0g7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbERMOztBQUNBOztBQUNBOzsySkFMQTtBQUNBOztLQU1hNUYsYyxXQUFBQSxjLEdBQ1QsOEJBQWtFO0FBQUEsU0FBckR0QixHQUFxRCxRQUFyREEsR0FBcUQ7QUFBQSxTQUFoRGIsYUFBZ0QsUUFBaERBLGFBQWdEO0FBQUEsU0FBakNpQyx3QkFBaUMsUUFBakNBLHdCQUFpQztBQUFBLFNBQVB2QyxJQUFPLFFBQVBBLElBQU87O0FBQUE7O0FBQzlELFNBQUksQ0FBQ21CLEdBQUwsRUFBVTtBQUNOM0Qsa0JBQUltQixLQUFKLENBQVUsb0NBQVY7QUFDQSxlQUFNLElBQUljLEtBQUosQ0FBVSxLQUFWLENBQU47QUFDSDs7QUFFRCxTQUFJYSxhQUFKLEVBQW1CO0FBQ2ZhLGVBQU11a0MsdUJBQVdDLGFBQVgsQ0FBeUJ4a0MsR0FBekIsRUFBOEIsZUFBOUIsRUFBK0NiLGFBQS9DLENBQU47QUFDSDs7QUFFRCxTQUFJaUMsd0JBQUosRUFBOEI7QUFDMUJwQixlQUFNdWtDLHVCQUFXQyxhQUFYLENBQXlCeGtDLEdBQXpCLEVBQThCLDBCQUE5QixFQUEwRG9CLHdCQUExRCxDQUFOOztBQUVBLGFBQUl2QyxJQUFKLEVBQVU7QUFDTixrQkFBS0MsS0FBTCxHQUFhLElBQUkrQyxZQUFKLENBQVUsRUFBRWhELFVBQUYsRUFBVixDQUFiOztBQUVBbUIsbUJBQU11a0MsdUJBQVdDLGFBQVgsQ0FBeUJ4a0MsR0FBekIsRUFBOEIsT0FBOUIsRUFBdUMsS0FBS2xCLEtBQUwsQ0FBV3dCLEVBQWxELENBQU47QUFDSDtBQUNKOztBQUVELFVBQUtOLEdBQUwsR0FBV0EsR0FBWDtBQUNILEU7Ozs7Ozs7Ozs7Ozs7QUMxQkw7OzJKQUhBO0FBQ0E7O0tBSWF5QixlLFdBQUFBLGUsR0FDVCx5QkFBWXpCLEdBQVosRUFBaUI7QUFBQTs7QUFFYixhQUFJZ0ksU0FBU3U4Qix1QkFBV0csZ0JBQVgsQ0FBNEIxa0MsR0FBNUIsRUFBaUMsR0FBakMsQ0FBYjs7QUFFQSxjQUFLeEMsS0FBTCxHQUFhd0ssT0FBT3hLLEtBQXBCO0FBQ0EsY0FBSzBPLGlCQUFMLEdBQXlCbEUsT0FBT2tFLGlCQUFoQztBQUNBLGNBQUtDLFNBQUwsR0FBaUJuRSxPQUFPbUUsU0FBeEI7O0FBRUEsY0FBS3JOLEtBQUwsR0FBYWtKLE9BQU9sSixLQUFwQjtBQUNILEU7Ozs7Ozs7Ozs7Ozs7c2pCQ2ZMO0FBQ0E7O0FBRUE7Ozs7S0FFYXJDLGtCLFdBQUFBLGtCO0FBQ1QsbUNBQWE7QUFBQTs7QUFDVCxjQUFLb1YsS0FBTCxHQUFhLEVBQWI7QUFDSDs7a0NBRUQzTSxPLG9CQUFRSixHLEVBQUs7QUFDVHpJLGtCQUFJZ0IsS0FBSixDQUFVLDRCQUFWLEVBQXdDeUgsR0FBeEM7QUFDQSxnQkFBTyxLQUFLK00sS0FBTCxDQUFXL00sR0FBWCxDQUFQO0FBQ0gsTTs7a0NBRURDLE8sb0JBQVFELEcsRUFBS3pHLEssRUFBTTtBQUNmaEMsa0JBQUlnQixLQUFKLENBQVUsNEJBQVYsRUFBd0N5SCxHQUF4QztBQUNBLGNBQUsrTSxLQUFMLENBQVcvTSxHQUFYLElBQWtCekcsS0FBbEI7QUFDSCxNOztrQ0FFRDhHLFUsdUJBQVdMLEcsRUFBSTtBQUNYekksa0JBQUlnQixLQUFKLENBQVUsK0JBQVYsRUFBMkN5SCxHQUEzQztBQUNBLGdCQUFPLEtBQUsrTSxLQUFMLENBQVcvTSxHQUFYLENBQVA7QUFDSCxNOztrQ0FNREEsRyxnQkFBSVEsSyxFQUFPO0FBQ1AsZ0JBQU91QyxPQUFPMCtCLG1CQUFQLENBQTJCLEtBQUsxMEIsS0FBaEMsRUFBdUN2TSxLQUF2QyxDQUFQO0FBQ0gsTTs7Ozs2QkFOWTtBQUNULG9CQUFPdUMsT0FBTzArQixtQkFBUCxDQUEyQixLQUFLMTBCLEtBQWhDLEVBQXVDck4sTUFBOUM7QUFDSDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hCTDs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7O2dmQVZBO0FBQ0E7O0tBV2E5SCxXLFdBQUFBLFc7OztBQUNULDRCQUlFO0FBQUEsYUFKVTZCLFFBSVYsdUVBSnFCLEVBSXJCO0FBQUEsYUFIRWlvQyxzQkFHRix1RUFIMkJDLHNDQUczQjtBQUFBLGFBRkVDLGtCQUVGLHVFQUZ1QnpwQyw4QkFFdkI7QUFBQSxhQURFMHBDLHlCQUNGLHVFQUQ4QjNwQyw0Q0FDOUI7O0FBQUE7O0FBRUUsYUFBSSxFQUFFdUIsb0JBQW9CcW9DLHdDQUF0QixDQUFKLEVBQWdEO0FBQzVDcm9DLHdCQUFXLElBQUlxb0Msd0NBQUosQ0FBd0Jyb0MsUUFBeEIsQ0FBWDtBQUNIOztBQUpILHNEQUtFLHVCQUFNQSxRQUFOLENBTEY7O0FBT0UsZUFBS3NvQyxPQUFMLEdBQWUsSUFBSUMsb0NBQUosQ0FBc0J2b0MsUUFBdEIsQ0FBZjtBQUNBLGVBQUt3b0MsbUJBQUwsR0FBMkIsSUFBSVAsc0JBQUosT0FBM0I7O0FBRUE7QUFDQSxhQUFJLE1BQUtqb0MsUUFBTCxDQUFjeW9DLG9CQUFsQixFQUF3QztBQUNwQzNxQyxzQkFBSWdCLEtBQUosQ0FBVSwrRUFBVjtBQUNBLG1CQUFLNHBDLGdCQUFMO0FBQ0g7O0FBRUQsYUFBSSxNQUFLMW9DLFFBQUwsQ0FBYzJvQyxjQUFsQixFQUFrQztBQUM5QjdxQyxzQkFBSWdCLEtBQUosQ0FBVSw0RUFBVjtBQUNBLG1CQUFLOHBDLGVBQUwsR0FBdUIsSUFBSVQsa0JBQUosT0FBdkI7QUFDSDs7QUFFRCxlQUFLVSxzQkFBTCxHQUE4QixJQUFJVCx5QkFBSixDQUE4QixNQUFLbm9DLFNBQW5DLENBQTlCO0FBckJGO0FBc0JEOzsyQkFtQkQ2b0MsTyxzQkFBVTtBQUFBOztBQUNOLGdCQUFPLEtBQUtDLFNBQUwsR0FBaUJ2bkMsSUFBakIsQ0FBc0IsZ0JBQVE7QUFDakMsaUJBQUl3bkMsSUFBSixFQUFVO0FBQ05sckMsMEJBQUlpQixJQUFKLENBQVMsa0NBQVQ7O0FBRUEsd0JBQUt1cEMsT0FBTCxDQUFhVyxJQUFiLENBQWtCRCxJQUFsQixFQUF3QixLQUF4Qjs7QUFFQSx3QkFBT0EsSUFBUDtBQUNILGNBTkQsTUFPSztBQUNEbHJDLDBCQUFJaUIsSUFBSixDQUFTLGdEQUFUO0FBQ0Esd0JBQU8sSUFBUDtBQUNIO0FBQ0osVUFaTSxDQUFQO0FBYUgsTTs7MkJBRURtcUMsVSx5QkFBYTtBQUFBOztBQUNULGdCQUFPLEtBQUtDLFNBQUwsQ0FBZSxJQUFmLEVBQXFCM25DLElBQXJCLENBQTBCLFlBQU07QUFDbkMxRCxzQkFBSWlCLElBQUosQ0FBUyxtREFBVDtBQUNBLG9CQUFLdXBDLE9BQUwsQ0FBYWMsTUFBYjtBQUNILFVBSE0sQ0FBUDtBQUlILE07OzJCQUVEQyxjLDJCQUFlM3BDLEksRUFBTTtBQUNqQixnQkFBTyxLQUFLNHBDLFlBQUwsQ0FBa0I1cEMsSUFBbEIsRUFBd0IsS0FBSzZwQyxrQkFBN0IsRUFBaUQvbkMsSUFBakQsQ0FBc0QsWUFBSTtBQUM3RDFELHNCQUFJaUIsSUFBSixDQUFTLHdDQUFUO0FBQ0gsVUFGTSxDQUFQO0FBR0gsTTs7MkJBQ0R5cUMsc0IsbUNBQXVCL25DLEcsRUFBSztBQUN4QixnQkFBTyxLQUFLZ29DLFVBQUwsQ0FBZ0Job0MsT0FBTyxLQUFLOG5DLGtCQUFMLENBQXdCOW5DLEdBQS9DLEVBQW9ERCxJQUFwRCxDQUF5RCxnQkFBUTtBQUNwRSxpQkFBSXduQyxJQUFKLEVBQVU7QUFDTixxQkFBSUEsS0FBS25nQyxPQUFMLElBQWdCbWdDLEtBQUtuZ0MsT0FBTCxDQUFhSSxHQUFqQyxFQUFzQztBQUNsQ25MLDhCQUFJaUIsSUFBSixDQUFTLGlFQUFULEVBQTRFaXFDLEtBQUtuZ0MsT0FBTCxDQUFhSSxHQUF6RjtBQUNILGtCQUZELE1BR0s7QUFDRG5MLDhCQUFJaUIsSUFBSixDQUFTLDRDQUFUO0FBQ0g7QUFDSjs7QUFFRCxvQkFBT2lxQyxJQUFQO0FBQ0gsVUFYTSxDQUFQO0FBWUgsTTs7MkJBRURVLFcsMEJBQXVCO0FBQUEsYUFBWGhxQyxJQUFXLHVFQUFKLEVBQUk7O0FBQ25CLGFBQUkrQixNQUFNL0IsS0FBS1csWUFBTCxJQUFxQixLQUFLTCxRQUFMLENBQWMycEMsa0JBQW5DLElBQXlELEtBQUszcEMsUUFBTCxDQUFjSyxZQUFqRjtBQUNBLGFBQUksQ0FBQ29CLEdBQUwsRUFBVTtBQUNOM0Qsc0JBQUltQixLQUFKLENBQVUsMkVBQVY7QUFDQSxvQkFBT21ELFFBQVFDLE1BQVIsQ0FBZSxJQUFJdEMsS0FBSixDQUFVLGtEQUFWLENBQWYsQ0FBUDtBQUNIOztBQUVETCxjQUFLVyxZQUFMLEdBQW9Cb0IsR0FBcEI7QUFDQS9CLGNBQUtlLE9BQUwsR0FBZSxPQUFmOztBQUVBLGdCQUFPLEtBQUttcEMsT0FBTCxDQUFhbHFDLElBQWIsRUFBbUIsS0FBS21xQyxlQUF4QixFQUF5QztBQUM1Q0MsdUJBQVVyb0MsR0FEa0M7QUFFNUNzb0Msa0NBQXFCcnFDLEtBQUtxcUMsbUJBQUwsSUFBNEIsS0FBSy9wQyxRQUFMLENBQWMrcEMsbUJBRm5CO0FBRzVDQyxnQ0FBbUJ0cUMsS0FBS3NxQyxpQkFBTCxJQUEwQixLQUFLaHFDLFFBQUwsQ0FBY2dxQztBQUhmLFVBQXpDLEVBSUp4b0MsSUFKSSxDQUlDLGdCQUFRO0FBQ1osaUJBQUl3bkMsSUFBSixFQUFVO0FBQ04scUJBQUlBLEtBQUtuZ0MsT0FBTCxJQUFnQm1nQyxLQUFLbmdDLE9BQUwsQ0FBYUksR0FBakMsRUFBc0M7QUFDbENuTCw4QkFBSWlCLElBQUosQ0FBUyxrRUFBVCxFQUE2RWlxQyxLQUFLbmdDLE9BQUwsQ0FBYUksR0FBMUY7QUFDSCxrQkFGRCxNQUdLO0FBQ0RuTCw4QkFBSWlCLElBQUosQ0FBUyxpQ0FBVDtBQUNIO0FBQ0o7O0FBRUQsb0JBQU9pcUMsSUFBUDtBQUNILFVBZk0sQ0FBUDtBQWdCSCxNOzsyQkFDRGlCLG1CLGdDQUFvQnhvQyxHLEVBQUs7QUFDckIsZ0JBQU8sS0FBS3lvQyxlQUFMLENBQXFCem9DLEdBQXJCLEVBQTBCLEtBQUtvb0MsZUFBL0IsRUFBZ0Ryb0MsSUFBaEQsQ0FBcUQsZ0JBQVE7QUFDaEUsaUJBQUl3bkMsSUFBSixFQUFVO0FBQ04scUJBQUlBLEtBQUtuZ0MsT0FBTCxJQUFnQm1nQyxLQUFLbmdDLE9BQUwsQ0FBYUksR0FBakMsRUFBc0M7QUFDbENuTCw4QkFBSWlCLElBQUosQ0FBUyw4REFBVCxFQUF5RWlxQyxLQUFLbmdDLE9BQUwsQ0FBYUksR0FBdEY7QUFDSCxrQkFGRCxNQUdLO0FBQ0RuTCw4QkFBSWlCLElBQUosQ0FBUyx5Q0FBVDtBQUNIO0FBQ0o7O0FBRUQsb0JBQU9pcUMsSUFBUDtBQUNILFVBWE0sRUFXSm1CLEtBWEksQ0FXRSxlQUFLO0FBQ1Zyc0Msc0JBQUltQixLQUFKLENBQVUsNENBQTRDbXJDLEdBQTVDLElBQW1EQSxJQUFJOThCLE9BQWpFO0FBRUgsVUFkTSxDQUFQO0FBZUgsTTs7MkJBRUQrOEIsWSwyQkFBd0I7QUFBQTs7QUFBQSxhQUFYM3FDLElBQVcsdUVBQUosRUFBSTs7QUFDcEIsYUFBSStCLE1BQU0vQixLQUFLVyxZQUFMLElBQXFCLEtBQUtMLFFBQUwsQ0FBY3NxQyxtQkFBN0M7QUFDQSxhQUFJLENBQUM3b0MsR0FBTCxFQUFVO0FBQ04zRCxzQkFBSW1CLEtBQUosQ0FBVSw2REFBVjtBQUNBLG9CQUFPbUQsUUFBUUMsTUFBUixDQUFlLElBQUl0QyxLQUFKLENBQVUsbUNBQVYsQ0FBZixDQUFQO0FBQ0g7O0FBRURMLGNBQUtXLFlBQUwsR0FBb0JvQixHQUFwQjtBQUNBL0IsY0FBS2MsTUFBTCxHQUFjLE1BQWQ7O0FBRUEsYUFBSStwQyxtQkFBSjtBQUNBLGFBQUk3cUMsS0FBS2tCLGFBQUwsSUFBc0IsQ0FBQyxLQUFLWixRQUFMLENBQWN3cUMsMkJBQXpDLEVBQXNFO0FBQ2xFRCwwQkFBYW5vQyxRQUFRZ0IsT0FBUixFQUFiO0FBQ0gsVUFGRCxNQUdLO0FBQ0RtbkMsMEJBQWEsS0FBS3hCLFNBQUwsR0FBaUJ2bkMsSUFBakIsQ0FBc0IsZ0JBQVE7QUFDdkM5QixzQkFBS2tCLGFBQUwsR0FBcUJvb0MsUUFBUUEsS0FBS3JnQyxRQUFsQztBQUNILGNBRlksQ0FBYjtBQUdIOztBQUVELGdCQUFPNGhDLFdBQVcvb0MsSUFBWCxDQUFnQixZQUFNO0FBQ3pCLG9CQUFPLE9BQUtvb0MsT0FBTCxDQUFhbHFDLElBQWIsRUFBbUIsT0FBSytxQyxnQkFBeEIsRUFBMEM7QUFDN0NYLDJCQUFVcm9DLEdBRG1DO0FBRTdDaXBDLHVDQUFzQmhyQyxLQUFLZ3JDLG9CQUFMLElBQTZCLE9BQUsxcUMsUUFBTCxDQUFjMHFDO0FBRnBCLGNBQTFDLENBQVA7QUFJSCxVQUxNLEVBS0pscEMsSUFMSSxDQUtDLGdCQUFRO0FBQ1osaUJBQUl3bkMsSUFBSixFQUFVO0FBQ04scUJBQUlBLEtBQUtuZ0MsT0FBTCxJQUFnQm1nQyxLQUFLbmdDLE9BQUwsQ0FBYUksR0FBakMsRUFBc0M7QUFDbENuTCw4QkFBSWlCLElBQUosQ0FBUyx1REFBVCxFQUFrRWlxQyxLQUFLbmdDLE9BQUwsQ0FBYUksR0FBL0U7QUFDSCxrQkFGRCxNQUdLO0FBQ0RuTCw4QkFBSWlCLElBQUosQ0FBUyxrQ0FBVDtBQUNIO0FBQ0o7O0FBRUQsb0JBQU9pcUMsSUFBUDtBQUNILFVBaEJNLENBQVA7QUFpQkgsTTs7MkJBQ0QyQixvQixpQ0FBcUJscEMsRyxFQUFLO0FBQ3RCLGdCQUFPLEtBQUt5b0MsZUFBTCxDQUFxQnpvQyxHQUFyQixFQUEwQixLQUFLZ3BDLGdCQUEvQixFQUFpRGpwQyxJQUFqRCxDQUFzRCxnQkFBUTtBQUNqRSxpQkFBSXduQyxJQUFKLEVBQVU7QUFDTixxQkFBSUEsS0FBS25nQyxPQUFMLElBQWdCbWdDLEtBQUtuZ0MsT0FBTCxDQUFhSSxHQUFqQyxFQUFzQztBQUNsQ25MLDhCQUFJaUIsSUFBSixDQUFTLCtEQUFULEVBQTBFaXFDLEtBQUtuZ0MsT0FBTCxDQUFhSSxHQUF2RjtBQUNILGtCQUZELE1BR0s7QUFDRG5MLDhCQUFJaUIsSUFBSixDQUFTLDBDQUFUO0FBQ0g7QUFDSjs7QUFFRCxvQkFBT2lxQyxJQUFQO0FBQ0gsVUFYTSxDQUFQO0FBWUgsTTs7MkJBRUQ0QixrQixpQ0FBOEI7QUFBQTs7QUFBQSxhQUFYbHJDLElBQVcsdUVBQUosRUFBSTs7QUFDMUIsYUFBSStCLE1BQU0vQixLQUFLVyxZQUFMLElBQXFCLEtBQUtMLFFBQUwsQ0FBY3NxQyxtQkFBN0M7QUFDQSxhQUFJLENBQUM3b0MsR0FBTCxFQUFVO0FBQ04zRCxzQkFBSW1CLEtBQUosQ0FBVSxtRUFBVjtBQUNBLG9CQUFPbUQsUUFBUUMsTUFBUixDQUFlLElBQUl0QyxLQUFKLENBQVUsbUNBQVYsQ0FBZixDQUFQO0FBQ0g7O0FBRURMLGNBQUtXLFlBQUwsR0FBb0JvQixHQUFwQjtBQUNBL0IsY0FBS2MsTUFBTCxHQUFjLE1BQWQ7QUFDQWQsY0FBS1MsYUFBTCxHQUFxQixVQUFyQjtBQUNBVCxjQUFLVSxLQUFMLEdBQWEsUUFBYjs7QUFFQSxnQkFBTyxLQUFLa3BDLFlBQUwsQ0FBa0I1cEMsSUFBbEIsRUFBd0IsS0FBSytxQyxnQkFBN0IsRUFBK0M7QUFDbERYLHVCQUFVcm9DLEdBRHdDO0FBRWxEaXBDLG1DQUFzQmhyQyxLQUFLZ3JDLG9CQUFMLElBQTZCLEtBQUsxcUMsUUFBTCxDQUFjMHFDO0FBRmYsVUFBL0MsRUFHSmxwQyxJQUhJLENBR0MsdUJBQWU7QUFDbkIsb0JBQU8sT0FBS1MscUJBQUwsQ0FBMkI0b0MsWUFBWXBwQyxHQUF2QyxFQUE0Q0QsSUFBNUMsQ0FBaUQsMEJBQWtCO0FBQ3RFMUQsMEJBQUlnQixLQUFKLENBQVUscURBQVY7O0FBRUEscUJBQUlnc0MsZUFBZW5ELGFBQWYsSUFBZ0NtRCxlQUFlamlDLE9BQWYsQ0FBdUJJLEdBQXZELElBQThENmhDLGVBQWVqaUMsT0FBZixDQUF1QmtpQyxHQUF6RixFQUE4RjtBQUMxRmp0Qyw4QkFBSWlCLElBQUosQ0FBUyxzRUFBVCxFQUFrRityQyxlQUFlamlDLE9BQWYsQ0FBdUJJLEdBQXpHO0FBQ0EsNEJBQU87QUFDSDArQix3Q0FBZW1ELGVBQWVuRCxhQUQzQjtBQUVIMStCLDhCQUFLNmhDLGVBQWVqaUMsT0FBZixDQUF1QkksR0FGekI7QUFHSDhoQyw4QkFBS0QsZUFBZWppQyxPQUFmLENBQXVCa2lDO0FBSHpCLHNCQUFQO0FBS0gsa0JBUEQsTUFRSztBQUNEanRDLDhCQUFJaUIsSUFBSixDQUFTLHVEQUFUO0FBQ0g7QUFDSixjQWRNLENBQVA7QUFlSCxVQW5CTSxDQUFQO0FBb0JILE07OzJCQUVENnFDLE8sb0JBQVFscUMsSSxFQUFNZ1EsUyxFQUFpQztBQUFBOztBQUFBLGFBQXRCczdCLGVBQXNCLHVFQUFKLEVBQUk7O0FBQzNDLGdCQUFPLEtBQUsxQixZQUFMLENBQWtCNXBDLElBQWxCLEVBQXdCZ1EsU0FBeEIsRUFBbUNzN0IsZUFBbkMsRUFBb0R4cEMsSUFBcEQsQ0FBeUQsdUJBQWU7QUFDM0Usb0JBQU8sT0FBS2lvQyxVQUFMLENBQWdCb0IsWUFBWXBwQyxHQUE1QixDQUFQO0FBQ0gsVUFGTSxDQUFQO0FBR0gsTTs7MkJBQ0Q2bkMsWSx5QkFBYTVwQyxJLEVBQU1nUSxTLEVBQWlDO0FBQUE7O0FBQUEsYUFBdEJzN0IsZUFBc0IsdUVBQUosRUFBSTs7O0FBRWhELGdCQUFPdDdCLFVBQVV1N0IsT0FBVixDQUFrQkQsZUFBbEIsRUFBbUN4cEMsSUFBbkMsQ0FBd0Msa0JBQVU7QUFDckQxRCxzQkFBSWdCLEtBQUosQ0FBVSx1REFBVjs7QUFFQSxvQkFBTyxPQUFLb0IsbUJBQUwsQ0FBeUJSLElBQXpCLEVBQStCOEIsSUFBL0IsQ0FBb0MseUJBQWlCO0FBQ3hEMUQsMEJBQUlnQixLQUFKLENBQVUsOENBQVY7O0FBRUFrc0MsaUNBQWdCdnBDLEdBQWhCLEdBQXNCQyxjQUFjRCxHQUFwQztBQUNBdXBDLGlDQUFnQmpwQyxFQUFoQixHQUFxQkwsY0FBY25CLEtBQWQsQ0FBb0J3QixFQUF6Qzs7QUFFQSx3QkFBT3dGLE9BQU8yakMsUUFBUCxDQUFnQkYsZUFBaEIsQ0FBUDtBQUNILGNBUE0sRUFPSmIsS0FQSSxDQU9FLGVBQU87QUFDWixxQkFBSTVpQyxPQUFPNGpDLEtBQVgsRUFBa0I7QUFDZHJ0Qyw4QkFBSWdCLEtBQUosQ0FBVSxxRkFBVjtBQUNBeUksNEJBQU80akMsS0FBUDtBQUNIO0FBQ0QsdUJBQU1mLEdBQU47QUFDSCxjQWJNLENBQVA7QUFjSCxVQWpCTSxDQUFQO0FBa0JILE07OzJCQUNEWCxVLHVCQUFXaG9DLEcsRUFBSztBQUFBOztBQUNaLGdCQUFPLEtBQUtRLHFCQUFMLENBQTJCUixHQUEzQixFQUFnQ0QsSUFBaEMsQ0FBcUMsMEJBQWtCO0FBQzFEMUQsc0JBQUlnQixLQUFKLENBQVUsNkNBQVY7O0FBRUEsaUJBQUlrcUMsT0FBTyxJQUFJcHFDLFVBQUosQ0FBU2tzQyxjQUFULENBQVg7O0FBRUEsb0JBQU8sT0FBSzNCLFNBQUwsQ0FBZUgsSUFBZixFQUFxQnhuQyxJQUFyQixDQUEwQixZQUFNO0FBQ25DMUQsMEJBQUlnQixLQUFKLENBQVUscUNBQVY7O0FBRUEsd0JBQUt3cEMsT0FBTCxDQUFhVyxJQUFiLENBQWtCRCxJQUFsQjs7QUFFQSx3QkFBT0EsSUFBUDtBQUNILGNBTk0sQ0FBUDtBQU9ILFVBWk0sQ0FBUDtBQWFILE07OzJCQUNEa0IsZSw0QkFBZ0J6b0MsRyxFQUFLaU8sUyxFQUFXO0FBQzVCNVIsa0JBQUlnQixLQUFKLENBQVUsNkJBQVY7QUFDQSxnQkFBTzRRLFVBQVUwN0IsUUFBVixDQUFtQjNwQyxHQUFuQixDQUFQO0FBQ0gsTTs7MkJBRUQ0cEMsZSw4QkFBMkI7QUFBQSxhQUFYM3JDLElBQVcsdUVBQUosRUFBSTs7QUFDdkIsYUFBSTRyQyx3QkFBd0I1ckMsS0FBS21ELHdCQUFMLElBQWlDLEtBQUs3QyxRQUFMLENBQWM2Qyx3QkFBM0U7QUFDQSxhQUFJeW9DLHFCQUFKLEVBQTBCO0FBQ3RCNXJDLGtCQUFLbUQsd0JBQUwsR0FBZ0N5b0MscUJBQWhDO0FBQ0g7QUFDRCxnQkFBTyxLQUFLQyxhQUFMLENBQW1CN3JDLElBQW5CLEVBQXlCLEtBQUs2cEMsa0JBQTlCLEVBQWtEL25DLElBQWxELENBQXVELFlBQUk7QUFDOUQxRCxzQkFBSWlCLElBQUosQ0FBUyx5Q0FBVDtBQUNILFVBRk0sQ0FBUDtBQUdILE07OzJCQUNEeXNDLHVCLG9DQUF3Qi9wQyxHLEVBQUs7QUFDekIsZ0JBQU8sS0FBS2dxQyxXQUFMLENBQWlCaHFDLE9BQU8sS0FBSzhuQyxrQkFBTCxDQUF3QjluQyxHQUFoRCxFQUFxREQsSUFBckQsQ0FBMEQsb0JBQVU7QUFDdkUxRCxzQkFBSWlCLElBQUosQ0FBUyxpREFBVDtBQUNBLG9CQUFPbUQsUUFBUDtBQUNILFVBSE0sQ0FBUDtBQUlILE07OzJCQUVEd3BDLFksMkJBQXdCO0FBQUEsYUFBWGhzQyxJQUFXLHVFQUFKLEVBQUk7O0FBQ3BCLGFBQUkrQixNQUFNL0IsS0FBS21ELHdCQUFMLElBQWlDLEtBQUs3QyxRQUFMLENBQWMyckMsOEJBQS9DLElBQWlGLEtBQUszckMsUUFBTCxDQUFjNkMsd0JBQXpHO0FBQ0FuRCxjQUFLbUQsd0JBQUwsR0FBZ0NwQixHQUFoQztBQUNBL0IsY0FBS2UsT0FBTCxHQUFlLE9BQWY7QUFDQSxhQUFJZixLQUFLbUQsd0JBQVQsRUFBa0M7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBbkQsa0JBQUthLEtBQUwsR0FBYWIsS0FBS2EsS0FBTCxJQUFjLEVBQTNCO0FBQ0g7O0FBRUQsZ0JBQU8sS0FBS3FyQyxRQUFMLENBQWNsc0MsSUFBZCxFQUFvQixLQUFLbXFDLGVBQXpCLEVBQTBDO0FBQzdDQyx1QkFBVXJvQyxHQURtQztBQUU3Q3NvQyxrQ0FBcUJycUMsS0FBS3FxQyxtQkFBTCxJQUE0QixLQUFLL3BDLFFBQUwsQ0FBYytwQyxtQkFGbEI7QUFHN0NDLGdDQUFtQnRxQyxLQUFLc3FDLGlCQUFMLElBQTBCLEtBQUtocUMsUUFBTCxDQUFjZ3FDO0FBSGQsVUFBMUMsRUFJSnhvQyxJQUpJLENBSUMsWUFBTTtBQUNWMUQsc0JBQUlpQixJQUFKLENBQVMscUNBQVQ7QUFDSCxVQU5NLENBQVA7QUFPSCxNOzsyQkFDRDhzQyxvQixpQ0FBcUJwcUMsRyxFQUFLcXFDLFEsRUFBVTtBQUNoQyxhQUFJLE9BQU9BLFFBQVAsS0FBcUIsV0FBckIsSUFBb0MsT0FBT3JxQyxHQUFQLEtBQWdCLFNBQXhELEVBQW1FO0FBQy9EQSxtQkFBTSxJQUFOO0FBQ0FxcUMsd0JBQVcsSUFBWDtBQUNIOztBQUVELGFBQUkxRixZQUFZLEdBQWhCO0FBQ0EsZ0JBQU8sS0FBS3lELGVBQUwsQ0FBcUJ1QixRQUFyQixDQUE4QjNwQyxHQUE5QixFQUFtQ3FxQyxRQUFuQyxFQUE2QzFGLFNBQTdDLEVBQXdENWtDLElBQXhELENBQTZELFlBQU07QUFDdEUxRCxzQkFBSWlCLElBQUosQ0FBUyw4Q0FBVDtBQUNILFVBRk0sQ0FBUDtBQUdILE07OzJCQUVENnNDLFEscUJBQVNsc0MsSSxFQUFNZ1EsUyxFQUFpQztBQUFBOztBQUFBLGFBQXRCczdCLGVBQXNCLHVFQUFKLEVBQUk7O0FBQzVDLGdCQUFPLEtBQUtPLGFBQUwsQ0FBbUI3ckMsSUFBbkIsRUFBeUJnUSxTQUF6QixFQUFvQ3M3QixlQUFwQyxFQUFxRHhwQyxJQUFyRCxDQUEwRCx1QkFBZTtBQUM1RSxvQkFBTyxPQUFLaXFDLFdBQUwsQ0FBaUJaLFlBQVlwcEMsR0FBN0IsQ0FBUDtBQUNILFVBRk0sQ0FBUDtBQUdILE07OzJCQUNEOHBDLGEsNEJBQTBEO0FBQUEsYUFBNUM3ckMsSUFBNEMsdUVBQXJDLEVBQXFDOztBQUFBOztBQUFBLGFBQWpDZ1EsU0FBaUM7QUFBQSxhQUF0QnM3QixlQUFzQix1RUFBSixFQUFJOztBQUN0RCxnQkFBT3Q3QixVQUFVdTdCLE9BQVYsQ0FBa0JELGVBQWxCLEVBQW1DeHBDLElBQW5DLENBQXdDLGtCQUFVO0FBQ3JEMUQsc0JBQUlnQixLQUFKLENBQVUsd0RBQVY7O0FBRUEsb0JBQU8sUUFBS2lxQyxTQUFMLEdBQWlCdm5DLElBQWpCLENBQXNCLGdCQUFRO0FBQ2pDMUQsMEJBQUlnQixLQUFKLENBQVUsNkRBQVY7O0FBRUEscUJBQUlpdEMsZ0JBQWdCLFFBQUs5ckMsU0FBTCxDQUFlK3JDLDBCQUFmLEdBQTRDLFFBQUtDLGVBQUwsQ0FBcUJqRCxJQUFyQixDQUE1QyxHQUF5RTVtQyxRQUFRZ0IsT0FBUixFQUE3RjtBQUNBLHdCQUFPMm9DLGNBQWN2cUMsSUFBZCxDQUFtQixZQUFNOztBQUU1Qix5QkFBSW1ILFdBQVdqSixLQUFLa0IsYUFBTCxJQUFzQm9vQyxRQUFRQSxLQUFLcmdDLFFBQWxEO0FBQ0EseUJBQUlBLFFBQUosRUFBYztBQUNWN0ssa0NBQUlnQixLQUFKLENBQVUsa0VBQVY7QUFDQVksOEJBQUtrQixhQUFMLEdBQXFCK0gsUUFBckI7QUFDSDs7QUFFRCw0QkFBTyxRQUFLdWdDLFVBQUwsR0FBa0IxbkMsSUFBbEIsQ0FBdUIsWUFBTTtBQUNoQzFELGtDQUFJZ0IsS0FBSixDQUFVLG1FQUFWOztBQUVBLGdDQUFPLFFBQUs4RCxvQkFBTCxDQUEwQmxELElBQTFCLEVBQWdDOEIsSUFBaEMsQ0FBcUMsMEJBQWtCO0FBQzFEMUQsc0NBQUlnQixLQUFKLENBQVUsZ0RBQVY7O0FBRUFrc0MsNkNBQWdCdnBDLEdBQWhCLEdBQXNCeXFDLGVBQWV6cUMsR0FBckM7QUFDQSxpQ0FBSXlxQyxlQUFlM3JDLEtBQW5CLEVBQTBCO0FBQ3RCeXFDLGlEQUFnQmpwQyxFQUFoQixHQUFxQm1xQyxlQUFlM3JDLEtBQWYsQ0FBcUJ3QixFQUExQztBQUNIO0FBQ0Qsb0NBQU93RixPQUFPMmpDLFFBQVAsQ0FBZ0JGLGVBQWhCLENBQVA7QUFDSCwwQkFSTSxDQUFQO0FBU0gsc0JBWk0sQ0FBUDtBQWFILGtCQXJCTSxDQUFQO0FBc0JILGNBMUJNLEVBMEJKYixLQTFCSSxDQTBCRSxlQUFPO0FBQ1oscUJBQUk1aUMsT0FBTzRqQyxLQUFYLEVBQWtCO0FBQ2RydEMsOEJBQUlnQixLQUFKLENBQVUsc0ZBQVY7QUFDQXlJLDRCQUFPNGpDLEtBQVA7QUFDSDtBQUNELHVCQUFNZixHQUFOO0FBQ0gsY0FoQ00sQ0FBUDtBQWlDSCxVQXBDTSxDQUFQO0FBcUNILE07OzJCQUNEcUIsVyx3QkFBWWhxQyxHLEVBQUs7QUFDYixnQkFBTyxLQUFLd0Isc0JBQUwsQ0FBNEJ4QixHQUE1QixFQUFpQ0QsSUFBakMsQ0FBc0MsMkJBQW1CO0FBQzVEMUQsc0JBQUlnQixLQUFKLENBQVUsK0NBQVY7O0FBRUEsb0JBQU9xdEMsZUFBUDtBQUNILFVBSk0sQ0FBUDtBQUtILE07OzJCQUVEQyxpQixnQ0FBb0I7QUFBQTs7QUFDaEIsZ0JBQU8sS0FBS3JELFNBQUwsR0FBaUJ2bkMsSUFBakIsQ0FBc0IsZ0JBQVE7QUFDakMsb0JBQU8sUUFBS3lxQyxlQUFMLENBQXFCakQsSUFBckIsRUFBMkIsSUFBM0IsRUFBaUN4bkMsSUFBakMsQ0FBc0MsbUJBQVc7QUFDcEQscUJBQUk2cUMsT0FBSixFQUFhO0FBQ1R2dUMsOEJBQUlnQixLQUFKLENBQVUsbUZBQVY7O0FBRUFrcUMsMEJBQUtsZ0MsWUFBTCxHQUFvQixJQUFwQjtBQUNBa2dDLDBCQUFLbEIsVUFBTCxHQUFrQixJQUFsQjtBQUNBa0IsMEJBQUtwQixVQUFMLEdBQWtCLElBQWxCOztBQUVBLDRCQUFPLFFBQUt1QixTQUFMLENBQWVILElBQWYsRUFBcUJ4bkMsSUFBckIsQ0FBMEIsWUFBTTtBQUNuQzFELGtDQUFJZ0IsS0FBSixDQUFVLDRDQUFWO0FBQ0EsaUNBQUt3cEMsT0FBTCxDQUFhVyxJQUFiLENBQWtCRCxJQUFsQjtBQUNILHNCQUhNLENBQVA7QUFJSDtBQUNKLGNBYk0sQ0FBUDtBQWNILFVBZk0sRUFlSnhuQyxJQWZJLENBZUMsWUFBSTtBQUNSMUQsc0JBQUlpQixJQUFKLENBQVMsa0VBQVQ7QUFDSCxVQWpCTSxDQUFQO0FBa0JILE07OzJCQUVEa3RDLGUsNEJBQWdCakQsSSxFQUFNc0QsUSxFQUFVO0FBQzVCLGFBQUl4akMsZUFBZWtnQyxRQUFRQSxLQUFLbGdDLFlBQWhDOztBQUVBO0FBQ0EsYUFBSSxDQUFDQSxZQUFELElBQWlCQSxhQUFhOUMsT0FBYixDQUFxQixHQUFyQixLQUE2QixDQUFsRCxFQUFxRDtBQUNqRGxJLHNCQUFJZ0IsS0FBSixDQUFVLHVGQUFWO0FBQ0Esb0JBQU9zRCxRQUFRZ0IsT0FBUixDQUFnQixLQUFoQixDQUFQO0FBQ0g7O0FBRUQsZ0JBQU8sS0FBS3lsQyxzQkFBTCxDQUE0QjBELE1BQTVCLENBQW1DempDLFlBQW5DLEVBQWlEd2pDLFFBQWpELEVBQTJEOXFDLElBQTNELENBQWdFO0FBQUEsb0JBQU0sSUFBTjtBQUFBLFVBQWhFLENBQVA7QUFDSCxNOzsyQkFFRGtuQyxnQiwrQkFBbUI7QUFDZixjQUFLRixtQkFBTCxDQUF5QmdFLEtBQXpCO0FBQ0gsTTs7MkJBRURDLGUsOEJBQWtCO0FBQ2QsY0FBS2pFLG1CQUFMLENBQXlCa0UsSUFBekI7QUFDSCxNOzsyQkFNRDNELFMsd0JBQVk7QUFDUixnQkFBTyxLQUFLNEQsVUFBTCxDQUFnQmxtQyxHQUFoQixDQUFvQixLQUFLbW1DLGFBQXpCLEVBQXdDcHJDLElBQXhDLENBQTZDLHlCQUFpQjtBQUNqRSxpQkFBSXdsQyxhQUFKLEVBQW1CO0FBQ2ZscEMsMEJBQUlnQixLQUFKLENBQVUsa0RBQVY7QUFDQSx3QkFBT0YsV0FBSzZELGlCQUFMLENBQXVCdWtDLGFBQXZCLENBQVA7QUFDSDs7QUFFRGxwQyxzQkFBSWdCLEtBQUosQ0FBVSw4Q0FBVjtBQUNBLG9CQUFPLElBQVA7QUFDSCxVQVJNLENBQVA7QUFTSCxNOzsyQkFFRHFxQyxTLHNCQUFVSCxJLEVBQU07QUFDWixhQUFJQSxJQUFKLEVBQVU7QUFDTmxyQyxzQkFBSWdCLEtBQUosQ0FBVSxxQ0FBVjs7QUFFQSxpQkFBSWtvQyxnQkFBZ0JnQyxLQUFLaG5DLGVBQUwsRUFBcEI7QUFDQSxvQkFBTyxLQUFLMnFDLFVBQUwsQ0FBZ0I3cUMsR0FBaEIsQ0FBb0IsS0FBSzhxQyxhQUF6QixFQUF3QzVGLGFBQXhDLENBQVA7QUFDSCxVQUxELE1BTUs7QUFDRGxwQyxzQkFBSWdCLEtBQUosQ0FBVSxvQ0FBVjtBQUNBLG9CQUFPLEtBQUs2dEMsVUFBTCxDQUFnQnJxQyxNQUFoQixDQUF1QixLQUFLc3FDLGFBQTVCLENBQVA7QUFDSDtBQUNKLE07Ozs7NkJBdlp3QjtBQUNyQixvQkFBTyxLQUFLNXNDLFFBQUwsQ0FBYzZzQyxpQkFBckI7QUFDSDs7OzZCQUNxQjtBQUNsQixvQkFBTyxLQUFLN3NDLFFBQUwsQ0FBYzhzQyxjQUFyQjtBQUNIOzs7NkJBQ3NCO0FBQ25CLG9CQUFPLEtBQUs5c0MsUUFBTCxDQUFjK3NDLGVBQXJCO0FBQ0g7Ozs2QkFDZ0I7QUFDYixvQkFBTyxLQUFLL3NDLFFBQUwsQ0FBY2d0QyxTQUFyQjtBQUNIOzs7NkJBRVk7QUFDVCxvQkFBTyxLQUFLMUUsT0FBWjtBQUNIOzs7NkJBNldtQjtBQUNoQiw4QkFBZSxLQUFLdG9DLFFBQUwsQ0FBY3FCLFNBQTdCLFNBQTBDLEtBQUtyQixRQUFMLENBQWNvQixTQUF4RDtBQUNIOzs7O0dBM1o0QnJELHVCOzs7Ozs7Ozs7Ozs7Ozs7QUNUakM7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztnZkFUQTtBQUNBOztBQVVBLEtBQU1rdkMsNkNBQTZDLEVBQW5EO0FBQ0EsS0FBTUMsOEJBQThCLElBQXBDOztLQUVhN0UsbUIsV0FBQUEsbUI7OztBQUNULG9DQWtCUTtBQUFBLHdGQUFKLEVBQUk7QUFBQSxhQWpCSnNCLGtCQWlCSSxRQWpCSkEsa0JBaUJJO0FBQUEsYUFoQkpnQyw4QkFnQkksUUFoQkpBLDhCQWdCSTtBQUFBLGFBZko1QixtQkFlSSxRQWZKQSxtQkFlSTtBQUFBLGFBZEpDLGlCQWNJLFFBZEpBLGlCQWNJO0FBQUEsYUFiSk0sbUJBYUksUUFiSkEsbUJBYUk7QUFBQSxhQVpKSSxvQkFZSSxRQVpKQSxvQkFZSTtBQUFBLDBDQVhKakMsb0JBV0k7QUFBQSxhQVhKQSxvQkFXSSx5Q0FYbUIsS0FXbkI7QUFBQSwwQ0FWSitCLDJCQVVJO0FBQUEsYUFWSkEsMkJBVUkseUNBVjBCLElBVTFCO0FBQUEsd0NBVEo3QixjQVNJO0FBQUEsYUFUSkEsY0FTSSx1Q0FUYSxJQVNiO0FBQUEsMENBUkp3RSxvQkFRSTtBQUFBLGFBUkpBLG9CQVFJLHlDQVJtQkQsMkJBUW5CO0FBQUEsMENBUEpFLHVCQU9JO0FBQUEsYUFQSkEsdUJBT0kseUNBUHNCLElBT3RCO0FBQUEsMENBTkpwQiwwQkFNSTtBQUFBLGFBTkpBLDBCQU1JLHlDQU55QixLQU16QjtBQUFBLDBDQUxKcUIsbUNBS0k7QUFBQSxhQUxKQSxtQ0FLSSx5Q0FMa0NKLDBDQUtsQztBQUFBLDBDQUpKSixpQkFJSTtBQUFBLGFBSkpBLGlCQUlJLHlDQUpnQixJQUFJUyxvQ0FBSixFQUloQjtBQUFBLHdDQUhKUixjQUdJO0FBQUEsYUFISkEsY0FHSSx1Q0FIYSxJQUFJUyw4QkFBSixFQUdiO0FBQUEseUNBRkpSLGVBRUk7QUFBQSxhQUZKQSxlQUVJLHdDQUZjLElBQUlTLGdDQUFKLEVBRWQ7QUFBQSxtQ0FESlIsU0FDSTtBQUFBLGFBREpBLFNBQ0ksa0NBRFEsSUFBSS91QywwQ0FBSixDQUF5QixFQUFFa0ksT0FBT3hILGVBQU9tSixjQUFoQixFQUF6QixDQUNSOztBQUFBOztBQUFBLHNEQUNKLCtCQUFNd0osVUFBVSxDQUFWLENBQU4sQ0FESTs7QUFHSixlQUFLbThCLG1CQUFMLEdBQTJCOUQsa0JBQTNCO0FBQ0EsZUFBSytELCtCQUFMLEdBQXVDL0IsOEJBQXZDO0FBQ0EsZUFBS2dDLG9CQUFMLEdBQTRCNUQsbUJBQTVCO0FBQ0EsZUFBSzZELGtCQUFMLEdBQTBCNUQsaUJBQTFCOztBQUVBLGVBQUs2RCxvQkFBTCxHQUE0QnZELG1CQUE1QjtBQUNBLGVBQUt3RCxxQkFBTCxHQUE2QnBELG9CQUE3QjtBQUNBLGVBQUtxRCxxQkFBTCxHQUE2QixDQUFDLENBQUN0RixvQkFBL0I7QUFDQSxlQUFLdUYsNEJBQUwsR0FBb0N4RCwyQkFBcEM7QUFDQSxlQUFLeUQsb0NBQUwsR0FBNENaLG1DQUE1Qzs7QUFFQSxlQUFLYSxlQUFMLEdBQXVCdkYsY0FBdkI7QUFDQSxlQUFLd0YscUJBQUwsR0FBNkJoQixvQkFBN0I7QUFDQSxlQUFLaUIsd0JBQUwsR0FBZ0NoQix1QkFBaEM7QUFDQSxlQUFLaUIsMkJBQUwsR0FBbUNyQywwQkFBbkM7O0FBRUEsZUFBS3pDLGtCQUFMLEdBQTBCc0QsaUJBQTFCO0FBQ0EsZUFBS2hELGVBQUwsR0FBdUJpRCxjQUF2QjtBQUNBLGVBQUtyQyxnQkFBTCxHQUF3QnNDLGVBQXhCOztBQUVBLGVBQUtKLFVBQUwsR0FBa0JLLFNBQWxCO0FBdkJJO0FBd0JQOzs7OzZCQUV3QjtBQUNyQixvQkFBTyxLQUFLUyxtQkFBWjtBQUNIOzs7NkJBQ29DO0FBQ2pDLG9CQUFPLEtBQUtDLCtCQUFaO0FBQ0g7Ozs2QkFDeUI7QUFDdEIsb0JBQU8sS0FBS0Msb0JBQVo7QUFDSDs7OzZCQUN1QjtBQUNwQixvQkFBTyxLQUFLQyxrQkFBWjtBQUNIOzs7NkJBRXlCO0FBQ3RCLG9CQUFPLEtBQUtDLG9CQUFaO0FBQ0g7Ozs2QkFDMkI7QUFDeEIsb0JBQU8sS0FBS0MscUJBQVo7QUFDSDs7OzZCQUMwQjtBQUN2QixvQkFBTyxDQUFDLEVBQUUsS0FBS3hELG1CQUFMLElBQTRCLEtBQUt5RCxxQkFBbkMsQ0FBUjtBQUNIOzs7NkJBQ2lDO0FBQzlCLG9CQUFPLEtBQUtDLDRCQUFaO0FBQ0g7Ozs2QkFDeUM7QUFDdEMsb0JBQU8sS0FBS0Msb0NBQVo7QUFDSDs7OzZCQUVvQjtBQUNqQixvQkFBTyxLQUFLQyxlQUFaO0FBQ0g7Ozs2QkFDMEI7QUFDdkIsb0JBQU8sS0FBS0MscUJBQVo7QUFDSDs7OzZCQUM0QjtBQUN6QixvQkFBTyxLQUFLQyx3QkFBWjtBQUNIOzs7NkJBQ2dDO0FBQzdCLG9CQUFPLEtBQUtDLDJCQUFaO0FBQ0g7Ozs2QkFFdUI7QUFDcEIsb0JBQU8sS0FBSzlFLGtCQUFaO0FBQ0g7Ozs2QkFDb0I7QUFDakIsb0JBQU8sS0FBS00sZUFBWjtBQUNIOzs7NkJBQ3FCO0FBQ2xCLG9CQUFPLEtBQUtZLGdCQUFaO0FBQ0g7Ozs2QkFFZTtBQUNaLG9CQUFPLEtBQUtrQyxVQUFaO0FBQ0g7Ozs7R0FuR29DM3VDLHVDOzs7Ozs7Ozs7Ozs7O3NqQkNkekM7QUFDQTs7QUFFQTs7OztLQUVhc3ZDLGlCLFdBQUFBLGlCOzs7OztpQ0FFVHJDLE8sc0JBQVU7QUFDTixnQkFBTzdvQyxRQUFRZ0IsT0FBUixDQUFnQixJQUFoQixDQUFQO0FBQ0gsTTs7aUNBRUQ4bkMsUSxxQkFBU3pFLE0sRUFBUTtBQUNiLGFBQUksQ0FBQ0EsTUFBRCxJQUFXLENBQUNBLE9BQU9obEMsR0FBdkIsRUFBNEI7QUFDeEIzRCxzQkFBSW1CLEtBQUosQ0FBVSw2Q0FBVjtBQUNBLG9CQUFPbUQsUUFBUUMsTUFBUixDQUFlLElBQUl0QyxLQUFKLENBQVUsaUJBQVYsQ0FBZixDQUFQO0FBQ0g7O0FBRUQ4SCxnQkFBT0QsUUFBUCxHQUFrQjYrQixPQUFPaGxDLEdBQXpCOztBQUVBLGdCQUFPVyxRQUFRZ0IsT0FBUixFQUFQO0FBQ0gsTTs7Ozs2QkFFUztBQUNOLG9CQUFPeUUsT0FBT0QsUUFBUCxDQUFnQjArQixJQUF2QjtBQUNIOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3JCTDs7QUFDQTs7MkpBSkE7QUFDQTs7S0FLYWlILGMsV0FBQUEsYzs7Ozs7OEJBRVR0QyxPLG9CQUFReEUsTSxFQUFRO0FBQ1osYUFBSTZILFFBQVEsSUFBSUMsd0JBQUosQ0FBZ0I5SCxNQUFoQixDQUFaO0FBQ0EsZ0JBQU9ya0MsUUFBUWdCLE9BQVIsQ0FBZ0JrckMsS0FBaEIsQ0FBUDtBQUNILE07OzhCQUVEbEQsUSxxQkFBUzNwQyxHLEVBQUtxcUMsUSxFQUFVMUYsUyxFQUFXO0FBQy9CdG9DLGtCQUFJZ0IsS0FBSixDQUFVLHlCQUFWOztBQUVBLGFBQUk7QUFDQXl2QyxzQ0FBWUMsWUFBWixDQUF5Qi9zQyxHQUF6QixFQUE4QnFxQyxRQUE5QixFQUF3QzFGLFNBQXhDO0FBQ0Esb0JBQU9oa0MsUUFBUWdCLE9BQVIsRUFBUDtBQUNILFVBSEQsQ0FJQSxPQUFPaUssQ0FBUCxFQUFVO0FBQ04sb0JBQU9qTCxRQUFRQyxNQUFSLENBQWVnTCxDQUFmLENBQVA7QUFDSDtBQUNKLE07Ozs7Ozs7Ozs7Ozs7Ozs7c2pCQ3ZCTDtBQUNBOztBQUVBOztBQUNBOzs7O0FBRUEsS0FBTW9oQyw4QkFBOEIsR0FBcEM7QUFDQSxLQUFNQyx1QkFBdUIsK0RBQTdCO0FBQ0E7O0FBRUEsS0FBTUMscUJBQXFCLFFBQTNCOztLQUVhSixXLFdBQUFBLFc7QUFFVCwwQkFBWTlILE1BQVosRUFBb0I7QUFBQTs7QUFBQTs7QUFDaEIsY0FBS21JLFFBQUwsR0FBZ0IsSUFBSXhzQyxPQUFKLENBQVksVUFBQ2dCLE9BQUQsRUFBVWYsTUFBVixFQUFxQjtBQUM3QyxtQkFBS3dzQyxRQUFMLEdBQWdCenJDLE9BQWhCO0FBQ0EsbUJBQUswckMsT0FBTCxHQUFlenNDLE1BQWY7QUFDSCxVQUhlLENBQWhCOztBQUtBLGFBQUkwc0MsU0FBU3RJLE9BQU91RCxpQkFBUCxJQUE0QjJFLGtCQUF6QztBQUNBLGFBQUlLLFdBQVd2SSxPQUFPc0QsbUJBQVAsSUFBOEIyRSxvQkFBN0M7O0FBRUEsY0FBS08sTUFBTCxHQUFjcG5DLE9BQU9nRixJQUFQLENBQVksRUFBWixFQUFnQmtpQyxNQUFoQixFQUF3QkMsUUFBeEIsQ0FBZDtBQUNBLGFBQUksS0FBS0MsTUFBVCxFQUFpQjtBQUNibnhDLHNCQUFJZ0IsS0FBSixDQUFVLDhDQUFWO0FBQ0Esa0JBQUtvd0MseUJBQUwsR0FBaUNybkMsT0FBT1YsV0FBUCxDQUFtQixLQUFLZ29DLG9CQUFMLENBQTBCQyxJQUExQixDQUErQixJQUEvQixDQUFuQixFQUF5RFgsMkJBQXpELENBQWpDO0FBQ0g7QUFDSjs7MkJBTUR2RCxRLHFCQUFTekUsTSxFQUFRO0FBQ2IsYUFBSSxDQUFDLEtBQUt3SSxNQUFWLEVBQWtCO0FBQ2Qsa0JBQUtJLE1BQUwsQ0FBWSxrREFBWjtBQUNILFVBRkQsTUFHSyxJQUFJLENBQUM1SSxNQUFELElBQVcsQ0FBQ0EsT0FBT2hsQyxHQUF2QixFQUE0QjtBQUM3QixrQkFBSzR0QyxNQUFMLENBQVksdUNBQVo7QUFDQSxrQkFBS0EsTUFBTCxDQUFZLGlCQUFaO0FBQ0gsVUFISSxNQUlBO0FBQ0R2eEMsc0JBQUlnQixLQUFKLENBQVUsNENBQVY7O0FBRUEsa0JBQUttb0MsR0FBTCxHQUFXUixPQUFPMWtDLEVBQWxCO0FBQ0EsaUJBQUksS0FBS2tsQyxHQUFULEVBQWM7QUFDVnAvQix3QkFBTyxtQkFBbUI0K0IsT0FBTzFrQyxFQUFqQyxJQUF1QyxLQUFLdXRDLFNBQUwsQ0FBZUYsSUFBZixDQUFvQixJQUFwQixDQUF2QztBQUNIOztBQUVELGtCQUFLSCxNQUFMLENBQVlNLEtBQVo7QUFDQSxrQkFBS04sTUFBTCxDQUFZcG5DLE1BQVosQ0FBbUJELFFBQW5CLEdBQThCNitCLE9BQU9obEMsR0FBckM7QUFDSDs7QUFFRCxnQkFBTyxLQUFLK3RDLE9BQVo7QUFDSCxNOzsyQkFFREMsUSxxQkFBU252QyxJLEVBQU07QUFDWHhDLGtCQUFJZ0IsS0FBSixDQUFVLDZEQUFWOztBQUVBLGNBQUs0d0MsUUFBTDtBQUNBLGNBQUtiLFFBQUwsQ0FBY3Z1QyxJQUFkO0FBQ0gsTTs7MkJBQ0QrdUMsTSxtQkFBTy9oQyxPLEVBQVM7QUFDWnhQLGtCQUFJbUIsS0FBSixDQUFVLHFCQUFWLEVBQWlDcU8sT0FBakM7O0FBRUEsY0FBS29pQyxRQUFMO0FBQ0EsY0FBS1osT0FBTCxDQUFhLElBQUkvdUMsS0FBSixDQUFVdU4sT0FBVixDQUFiO0FBQ0gsTTs7MkJBRUQ2OUIsSyxvQkFBUTtBQUNKLGNBQUt1RSxRQUFMLENBQWMsS0FBZDtBQUNILE07OzJCQUVEQSxRLHFCQUFTNUQsUSxFQUFVO0FBQ2ZodUMsa0JBQUlnQixLQUFKLENBQVUscUJBQVY7O0FBRUErSSxnQkFBT1AsYUFBUCxDQUFxQixLQUFLNG5DLHlCQUExQjtBQUNBLGNBQUtBLHlCQUFMLEdBQWlDLElBQWpDOztBQUVBLGdCQUFPcm5DLE9BQU8sbUJBQW1CLEtBQUtvL0IsR0FBL0IsQ0FBUDs7QUFFQSxhQUFJLEtBQUtnSSxNQUFMLElBQWUsQ0FBQ25ELFFBQXBCLEVBQThCO0FBQzFCLGtCQUFLbUQsTUFBTCxDQUFZOUQsS0FBWjtBQUNIO0FBQ0QsY0FBSzhELE1BQUwsR0FBYyxJQUFkO0FBQ0gsTTs7MkJBRURFLG9CLG1DQUF1QjtBQUNuQixhQUFJLENBQUMsS0FBS0YsTUFBTixJQUFnQixLQUFLQSxNQUFMLENBQVlVLE1BQWhDLEVBQXdDO0FBQ3BDLGtCQUFLTixNQUFMLENBQVkscUJBQVo7QUFDSDtBQUNKLE07OzJCQUVEQyxTLHNCQUFVN3RDLEcsRUFBS3FxQyxRLEVBQVU7QUFDckIsY0FBSzRELFFBQUwsQ0FBYzVELFFBQWQ7O0FBRUEsYUFBSXJxQyxHQUFKLEVBQVM7QUFDTDNELHNCQUFJZ0IsS0FBSixDQUFVLDhCQUFWO0FBQ0Esa0JBQUsyd0MsUUFBTCxDQUFjLEVBQUVodUMsS0FBS0EsR0FBUCxFQUFkO0FBQ0gsVUFIRCxNQUlLO0FBQ0QzRCxzQkFBSWdCLEtBQUosQ0FBVSxtREFBVjtBQUNBLGtCQUFLdXdDLE1BQUwsQ0FBWSw2QkFBWjtBQUNIO0FBQ0osTTs7aUJBRU1iLFkseUJBQWEvc0MsRyxFQUFLcXFDLFEsRUFBVTFGLFMsRUFBVztBQUMxQyxhQUFJditCLE9BQU8rbkMsTUFBWCxFQUFtQjtBQUNmbnVDLG1CQUFNQSxPQUFPb0csT0FBT0QsUUFBUCxDQUFnQjArQixJQUE3QjtBQUNBLGlCQUFJN2tDLEdBQUosRUFBUztBQUNMLHFCQUFJbkIsT0FBTzBsQyx1QkFBV0csZ0JBQVgsQ0FBNEIxa0MsR0FBNUIsRUFBaUMya0MsU0FBakMsQ0FBWDs7QUFFQSxxQkFBSTlsQyxLQUFLQyxLQUFULEVBQWdCO0FBQ1oseUJBQUlpSixPQUFPLG1CQUFtQmxKLEtBQUtDLEtBQW5DO0FBQ0EseUJBQUk2cUMsV0FBV3ZqQyxPQUFPK25DLE1BQVAsQ0FBY3BtQyxJQUFkLENBQWY7QUFDQSx5QkFBSTRoQyxRQUFKLEVBQWM7QUFDVnR0QyxrQ0FBSWdCLEtBQUosQ0FBVSx5REFBVjtBQUNBc3NDLGtDQUFTM3BDLEdBQVQsRUFBY3FxQyxRQUFkO0FBQ0gsc0JBSEQsTUFJSztBQUNEaHVDLGtDQUFJa0IsSUFBSixDQUFTLGdFQUFUO0FBQ0g7QUFDSixrQkFWRCxNQVdLO0FBQ0RsQiw4QkFBSWtCLElBQUosQ0FBUywwREFBVDtBQUNIO0FBQ0o7QUFDSixVQXBCRCxNQXFCSztBQUNEbEIsc0JBQUlrQixJQUFKLENBQVMsMEVBQVQ7QUFDSDtBQUNKLE07Ozs7NkJBdEdhO0FBQ1Ysb0JBQU8sS0FBSzR2QyxRQUFaO0FBQ0g7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0JMOztBQUNBOzsySkFKQTtBQUNBOztLQUthcEIsZSxXQUFBQSxlOzs7OzsrQkFFVHZDLE8sb0JBQVF4RSxNLEVBQVE7QUFDWixhQUFJb0osUUFBUSxJQUFJQywwQkFBSixDQUFpQnJKLE1BQWpCLENBQVo7QUFDQSxnQkFBT3JrQyxRQUFRZ0IsT0FBUixDQUFnQnlzQyxLQUFoQixDQUFQO0FBQ0gsTTs7K0JBRUR6RSxRLHFCQUFTM3BDLEcsRUFBSztBQUNWM0Qsa0JBQUlnQixLQUFKLENBQVUsMEJBQVY7O0FBRUEsYUFBSTtBQUNBZ3hDLHdDQUFhQyxZQUFiLENBQTBCdHVDLEdBQTFCO0FBQ0Esb0JBQU9XLFFBQVFnQixPQUFSLEVBQVA7QUFDSCxVQUhELENBSUEsT0FBT2lLLENBQVAsRUFBVTtBQUNOLG9CQUFPakwsUUFBUUMsTUFBUixDQUFlZ0wsQ0FBZixDQUFQO0FBQ0g7QUFDSixNOzs7Ozs7Ozs7Ozs7Ozs7O3NqQkN2Qkw7QUFDQTs7QUFFQTs7OztBQUVBLEtBQU0yaUMsaUJBQWlCLEtBQXZCOztLQUVhRixZLFdBQUFBLFk7QUFFVCwyQkFBWXJKLE1BQVosRUFBb0I7QUFBQTs7QUFBQTs7QUFDaEIsY0FBS21JLFFBQUwsR0FBZ0IsSUFBSXhzQyxPQUFKLENBQVksVUFBQ2dCLE9BQUQsRUFBVWYsTUFBVixFQUFxQjtBQUM3QyxtQkFBS3dzQyxRQUFMLEdBQWdCenJDLE9BQWhCO0FBQ0EsbUJBQUswckMsT0FBTCxHQUFlenNDLE1BQWY7QUFDSCxVQUhlLENBQWhCOztBQUtBLGNBQUs0dEMsa0JBQUwsR0FBMEIsS0FBS0MsUUFBTCxDQUFjZCxJQUFkLENBQW1CLElBQW5CLENBQTFCO0FBQ0F2bkMsZ0JBQU9zb0MsZ0JBQVAsQ0FBd0IsU0FBeEIsRUFBbUMsS0FBS0Ysa0JBQXhDLEVBQTRELEtBQTVEOztBQUVBLGNBQUtHLE1BQUwsR0FBY3ZvQyxPQUFPd29DLFFBQVAsQ0FBZ0JDLGFBQWhCLENBQThCLFFBQTlCLENBQWQ7O0FBRUE7QUFDQSxjQUFLRixNQUFMLENBQVlHLEtBQVosQ0FBa0JDLFVBQWxCLEdBQStCLFFBQS9CO0FBQ0EsY0FBS0osTUFBTCxDQUFZRyxLQUFaLENBQWtCRSxRQUFsQixHQUE2QixVQUE3QjtBQUNBLGNBQUtMLE1BQUwsQ0FBWUcsS0FBWixDQUFrQjl2QyxPQUFsQixHQUE0QixNQUE1QjtBQUNBLGNBQUsydkMsTUFBTCxDQUFZRyxLQUFaLENBQWtCRyxLQUFsQixHQUEwQixDQUExQjtBQUNBLGNBQUtOLE1BQUwsQ0FBWUcsS0FBWixDQUFrQkksTUFBbEIsR0FBMkIsQ0FBM0I7O0FBRUE5b0MsZ0JBQU93b0MsUUFBUCxDQUFnQk8sSUFBaEIsQ0FBcUJDLFdBQXJCLENBQWlDLEtBQUtULE1BQXRDO0FBQ0g7OzRCQUVEbEYsUSxxQkFBU3pFLE0sRUFBUTtBQUNiLGFBQUksQ0FBQ0EsTUFBRCxJQUFXLENBQUNBLE9BQU9obEMsR0FBdkIsRUFBNEI7QUFDeEIsa0JBQUs0dEMsTUFBTCxDQUFZLGlCQUFaO0FBQ0gsVUFGRCxNQUdLO0FBQ0QsaUJBQUl5QixVQUFVckssT0FBT2lFLG9CQUFQLElBQStCc0YsY0FBN0M7QUFDQWx5QyxzQkFBSWdCLEtBQUosQ0FBVSwwQ0FBVixFQUFzRGd5QyxPQUF0RDtBQUNBLGtCQUFLQyxNQUFMLEdBQWNscEMsT0FBT21wQyxVQUFQLENBQWtCLEtBQUtDLFFBQUwsQ0FBYzdCLElBQWQsQ0FBbUIsSUFBbkIsQ0FBbEIsRUFBNEMwQixPQUE1QyxDQUFkO0FBQ0Esa0JBQUtWLE1BQUwsQ0FBWWMsR0FBWixHQUFrQnpLLE9BQU9obEMsR0FBekI7QUFDSDs7QUFFRCxnQkFBTyxLQUFLK3RDLE9BQVo7QUFDSCxNOzs0QkFNREMsUSxxQkFBU252QyxJLEVBQU07QUFDWCxjQUFLb3ZDLFFBQUw7O0FBRUE1eEMsa0JBQUlnQixLQUFKLENBQVUscURBQVY7QUFDQSxjQUFLK3ZDLFFBQUwsQ0FBY3Z1QyxJQUFkO0FBQ0gsTTs7NEJBQ0QrdUMsTSxtQkFBTy9oQyxPLEVBQVM7QUFDWixjQUFLb2lDLFFBQUw7O0FBRUE1eEMsa0JBQUltQixLQUFKLENBQVVxTyxPQUFWO0FBQ0EsY0FBS3doQyxPQUFMLENBQWEsSUFBSS91QyxLQUFKLENBQVV1TixPQUFWLENBQWI7QUFDSCxNOzs0QkFFRDY5QixLLG9CQUFRO0FBQ0osY0FBS3VFLFFBQUw7QUFDSCxNOzs0QkFFREEsUSx1QkFBVztBQUNQLGFBQUksS0FBS1UsTUFBVCxFQUFpQjtBQUNidHlDLHNCQUFJZ0IsS0FBSixDQUFVLHVCQUFWOztBQUVBK0ksb0JBQU9zcEMsbUJBQVAsQ0FBMkIsU0FBM0IsRUFBc0MsS0FBS2xCLGtCQUEzQyxFQUErRCxLQUEvRDtBQUNBcG9DLG9CQUFPdXBDLFlBQVAsQ0FBb0IsS0FBS0wsTUFBekI7QUFDQWxwQyxvQkFBT3dvQyxRQUFQLENBQWdCTyxJQUFoQixDQUFxQlMsV0FBckIsQ0FBaUMsS0FBS2pCLE1BQXRDOztBQUVBLGtCQUFLVyxNQUFMLEdBQWMsSUFBZDtBQUNBLGtCQUFLWCxNQUFMLEdBQWMsSUFBZDtBQUNBLGtCQUFLSCxrQkFBTCxHQUEwQixJQUExQjtBQUNIO0FBQ0osTTs7NEJBRURnQixRLHVCQUFXO0FBQ1BuekMsa0JBQUlnQixLQUFKLENBQVUsc0JBQVY7QUFDQSxjQUFLdXdDLE1BQUwsQ0FBWSx3QkFBWjtBQUNILE07OzRCQUVEYSxRLHFCQUFTN2lDLEMsRUFBRztBQUNSdlAsa0JBQUlnQixLQUFKLENBQVUsc0JBQVY7O0FBRUEsYUFBSSxLQUFLaXlDLE1BQUwsSUFDQTFqQyxFQUFFaWtDLE1BQUYsS0FBYSxLQUFLQyxPQURsQixJQUVBbGtDLEVBQUVta0MsTUFBRixLQUFhLEtBQUtwQixNQUFMLENBQVlxQixhQUY3QixFQUdFO0FBQ0UsaUJBQUlod0MsTUFBTTRMLEVBQUUvTSxJQUFaO0FBQ0EsaUJBQUltQixHQUFKLEVBQVM7QUFDTCxzQkFBS2d1QyxRQUFMLENBQWMsRUFBRWh1QyxLQUFLQSxHQUFQLEVBQWQ7QUFDSCxjQUZELE1BR0s7QUFDRCxzQkFBSzR0QyxNQUFMLENBQVksNkJBQVo7QUFDSDtBQUNKO0FBQ0osTTs7a0JBTU1VLFkseUJBQWF0dUMsRyxFQUFLO0FBQ3JCM0Qsa0JBQUlnQixLQUFKLENBQVUsMkJBQVY7O0FBRUEsYUFBSStJLE9BQU82cEMsTUFBUCxJQUFpQjdwQyxXQUFXQSxPQUFPNnBDLE1BQXZDLEVBQStDO0FBQzNDandDLG1CQUFNQSxPQUFPb0csT0FBT0QsUUFBUCxDQUFnQjArQixJQUE3QjtBQUNBLGlCQUFJN2tDLEdBQUosRUFBUztBQUNMM0QsMEJBQUlnQixLQUFKLENBQVUsMERBQVY7QUFDQStJLHdCQUFPNnBDLE1BQVAsQ0FBY0MsV0FBZCxDQUEwQmx3QyxHQUExQixFQUErQm1HLFNBQVNncUMsUUFBVCxHQUFvQixJQUFwQixHQUEyQmhxQyxTQUFTaXFDLElBQW5FO0FBQ0g7QUFDSjtBQUNKLE07Ozs7NkJBdkVhO0FBQ1Ysb0JBQU8sS0FBS2pELFFBQVo7QUFDSDs7OzZCQXVEYTtBQUNWLG9CQUFPaG5DLFNBQVNncUMsUUFBVCxHQUFvQixJQUFwQixHQUEyQmhxQyxTQUFTaXFDLElBQTNDO0FBQ0g7Ozs7Ozs7Ozs7Ozs7Ozs7O3NqQkN2R0w7QUFDQTs7QUFFQTs7OztLQUVhanpDLEksV0FBQUEsSTtBQUNULHlCQUFvRztBQUFBLGFBQXZGK0osUUFBdUYsUUFBdkZBLFFBQXVGO0FBQUEsYUFBN0VnL0IsYUFBNkUsUUFBN0VBLGFBQTZFO0FBQUEsYUFBOUQ3K0IsWUFBOEQsUUFBOURBLFlBQThEO0FBQUEsYUFBaEQ4K0IsVUFBZ0QsUUFBaERBLFVBQWdEO0FBQUEsYUFBcEN4bkMsS0FBb0MsUUFBcENBLEtBQW9DO0FBQUEsYUFBN0J5SSxPQUE2QixRQUE3QkEsT0FBNkI7QUFBQSxhQUFwQmkvQixVQUFvQixRQUFwQkEsVUFBb0I7QUFBQSxhQUFSdm5DLEtBQVEsUUFBUkEsS0FBUTs7QUFBQTs7QUFDaEcsY0FBS29JLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsY0FBS2cvQixhQUFMLEdBQXFCQSxhQUFyQjtBQUNBLGNBQUs3K0IsWUFBTCxHQUFvQkEsWUFBcEI7QUFDQSxjQUFLOCtCLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsY0FBS3huQyxLQUFMLEdBQWFBLEtBQWI7QUFDQSxjQUFLeUksT0FBTCxHQUFlQSxPQUFmO0FBQ0EsY0FBS2kvQixVQUFMLEdBQWtCQSxVQUFsQjtBQUNBLGNBQUt2bkMsS0FBTCxHQUFhQSxLQUFiO0FBQ0g7O29CQXNCRHlCLGUsOEJBQWtCO0FBQ2RsRSxrQkFBSWdCLEtBQUosQ0FBVSxzQkFBVjtBQUNBLGdCQUFPb08sS0FBSzJFLFNBQUwsQ0FBZTtBQUNsQmxKLHVCQUFVLEtBQUtBLFFBREc7QUFFbEJnL0IsNEJBQWUsS0FBS0EsYUFGRjtBQUdsQjcrQiwyQkFBYyxLQUFLQSxZQUhEO0FBSWxCOCtCLHlCQUFZLEtBQUtBLFVBSkM7QUFLbEJ4bkMsb0JBQU8sS0FBS0EsS0FMTTtBQU1sQnlJLHNCQUFTLEtBQUtBLE9BTkk7QUFPbEJpL0IseUJBQVksS0FBS0E7QUFQQyxVQUFmLENBQVA7QUFTSCxNOztVQUVNcmxDLGlCLDhCQUFrQnVrQyxhLEVBQWU7QUFDcENscEMsa0JBQUlnQixLQUFKLENBQVUsd0JBQVY7QUFDQSxnQkFBTyxJQUFJRixJQUFKLENBQVNzTyxLQUFLQyxLQUFMLENBQVc2NUIsYUFBWCxDQUFULENBQVA7QUFDSCxNOzs7OzZCQXBDZ0I7QUFDYixpQkFBSSxLQUFLYyxVQUFULEVBQXFCO0FBQ2pCLHFCQUFJNTVCLE1BQU05QyxTQUFTMEQsS0FBS1osR0FBTCxLQUFhLElBQXRCLENBQVY7QUFDQSx3QkFBTyxLQUFLNDVCLFVBQUwsR0FBa0I1NUIsR0FBekI7QUFDSDtBQUNELG9CQUFPNUIsU0FBUDtBQUNIOzs7NkJBRWE7QUFDVixpQkFBSXU3QixhQUFhLEtBQUtBLFVBQXRCO0FBQ0EsaUJBQUlBLGVBQWV2N0IsU0FBbkIsRUFBOEI7QUFDMUIsd0JBQU91N0IsY0FBYyxDQUFyQjtBQUNIO0FBQ0Qsb0JBQU92N0IsU0FBUDtBQUNIOzs7NkJBRVk7QUFDVCxvQkFBTyxDQUFDLEtBQUtsTSxLQUFMLElBQWMsRUFBZixFQUFtQjJ2QixLQUFuQixDQUF5QixHQUF6QixDQUFQO0FBQ0g7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDaENMOztBQUNBOztBQUNBOzs7Ozs7Z2ZBTEE7QUFDQTs7S0FNYXdZLGlCLFdBQUFBLGlCOzs7QUFFVCxnQ0FBWXZvQyxRQUFaLEVBQXNCO0FBQUE7O0FBQUEsc0RBQ2xCLDhCQUFNQSxRQUFOLENBRGtCOztBQUVsQixlQUFLOHhDLFdBQUwsR0FBbUIsSUFBSUMsWUFBSixDQUFVLGFBQVYsQ0FBbkI7QUFDQSxlQUFLQyxhQUFMLEdBQXFCLElBQUlELFlBQUosQ0FBVSxlQUFWLENBQXJCO0FBQ0EsZUFBS0UsaUJBQUwsR0FBeUIsSUFBSUYsWUFBSixDQUFVLG9CQUFWLENBQXpCO0FBQ0EsZUFBS0csY0FBTCxHQUFzQixJQUFJSCxZQUFKLENBQVUsaUJBQVYsQ0FBdEI7QUFDQSxlQUFLSSxtQkFBTCxHQUEyQixJQUFJSixZQUFKLENBQVUsc0JBQVYsQ0FBM0I7QUFOa0I7QUFPckI7O2lDQUVEOUksSSxpQkFBS0QsSSxFQUF1QjtBQUFBLGFBQWpCb0osVUFBaUIsdUVBQU4sSUFBTTs7QUFDeEJ0MEMsa0JBQUlnQixLQUFKLENBQVUsd0JBQVY7QUFDQSxzQ0FBTW1xQyxJQUFOLFlBQVdELElBQVg7QUFDQSxhQUFJb0osVUFBSixFQUFnQjtBQUNaLGtCQUFLTixXQUFMLENBQWlCTyxLQUFqQixDQUF1QnJKLElBQXZCO0FBQ0g7QUFDSixNOztpQ0FDREksTSxxQkFBUztBQUNMdHJDLGtCQUFJZ0IsS0FBSixDQUFVLDBCQUFWO0FBQ0Esc0NBQU1zcUMsTUFBTjtBQUNBLGNBQUs0SSxhQUFMLENBQW1CSyxLQUFuQjtBQUNILE07O2lDQUVEQyxhLDBCQUFjbHJDLEUsRUFBSTtBQUNkLGNBQUswcUMsV0FBTCxDQUFpQlMsVUFBakIsQ0FBNEJuckMsRUFBNUI7QUFDSCxNOztpQ0FDRG9yQyxnQiw2QkFBaUJwckMsRSxFQUFJO0FBQ2pCLGNBQUswcUMsV0FBTCxDQUFpQlcsYUFBakIsQ0FBK0JyckMsRUFBL0I7QUFDSCxNOztpQ0FFRHNyQyxlLDRCQUFnQnRyQyxFLEVBQUk7QUFDaEIsY0FBSzRxQyxhQUFMLENBQW1CTyxVQUFuQixDQUE4Qm5yQyxFQUE5QjtBQUNILE07O2lDQUNEdXJDLGtCLCtCQUFtQnZyQyxFLEVBQUk7QUFDbkIsY0FBSzRxQyxhQUFMLENBQW1CUyxhQUFuQixDQUFpQ3JyQyxFQUFqQztBQUNILE07O2lDQUVEd3JDLG1CLGdDQUFvQnhyQyxFLEVBQUk7QUFDcEIsY0FBSzZxQyxpQkFBTCxDQUF1Qk0sVUFBdkIsQ0FBa0NuckMsRUFBbEM7QUFDSCxNOztpQ0FDRHlyQyxzQixtQ0FBdUJ6ckMsRSxFQUFJO0FBQ3ZCLGNBQUs2cUMsaUJBQUwsQ0FBdUJRLGFBQXZCLENBQXFDcnJDLEVBQXJDO0FBQ0gsTTs7aUNBQ0QwckMsc0IsbUNBQXVCemxDLEMsRUFBRztBQUN0QnZQLGtCQUFJZ0IsS0FBSixDQUFVLDBDQUFWLEVBQXNEdU8sRUFBRUMsT0FBeEQ7QUFDQSxjQUFLMmtDLGlCQUFMLENBQXVCSSxLQUF2QixDQUE2QmhsQyxDQUE3QjtBQUNILE07O2lDQUVEMGxDLGdCLDZCQUFpQjNyQyxFLEVBQUk7QUFDakIsY0FBSzhxQyxjQUFMLENBQW9CSyxVQUFwQixDQUErQm5yQyxFQUEvQjtBQUNILE07O2lDQUNENHJDLG1CLGdDQUFvQjVyQyxFLEVBQUk7QUFDcEIsY0FBSzhxQyxjQUFMLENBQW9CTyxhQUFwQixDQUFrQ3JyQyxFQUFsQztBQUNILE07O2lDQUNENnJDLG1CLGdDQUFvQjVsQyxDLEVBQUc7QUFDbkJ2UCxrQkFBSWdCLEtBQUosQ0FBVSx1Q0FBVjtBQUNBLGNBQUtvekMsY0FBTCxDQUFvQkcsS0FBcEIsQ0FBMEJobEMsQ0FBMUI7QUFDSCxNOztpQ0FFRDZsQyxxQixrQ0FBc0I5ckMsRSxFQUFJO0FBQ3RCLGNBQUsrcUMsbUJBQUwsQ0FBeUJJLFVBQXpCLENBQW9DbnJDLEVBQXBDO0FBQ0gsTTs7aUNBQ0QrckMsd0IscUNBQXlCL3JDLEUsRUFBSTtBQUN6QixjQUFLK3FDLG1CQUFMLENBQXlCTSxhQUF6QixDQUF1Q3JyQyxFQUF2QztBQUNILE07O2lDQUNEZ3NDLHdCLHFDQUF5Qi9sQyxDLEVBQUc7QUFDeEJ2UCxrQkFBSWdCLEtBQUosQ0FBVSw0Q0FBVjtBQUNBLGNBQUtxekMsbUJBQUwsQ0FBeUJFLEtBQXpCLENBQStCaGxDLENBQS9CO0FBQ0gsTTs7O0dBckVrQ2pQLHFDOzs7Ozs7Ozs7Ozs7O0FDSnZDOztBQUNBOzsySkFKQTtBQUNBOztBQUtBLEtBQU02dUMsNkNBQTZDLEVBQW5ELEMsQ0FBdUQ7O0tBRTFDN3VDLGlCLFdBQUFBLGlCO0FBRVQsa0NBSVE7QUFBQSx3RkFBSixFQUFJO0FBQUEsMENBSEppdkMsbUNBR0k7QUFBQSxhQUhKQSxtQ0FHSSx5Q0FIa0NKLDBDQUdsQztBQUFBLDJDQUZKb0csd0JBRUk7QUFBQSxhQUZKQSx3QkFFSSwwQ0FGdUIsSUFBSUMsWUFBSixDQUFVLHVCQUFWLENBRXZCO0FBQUEsMkNBREpDLHVCQUNJO0FBQUEsYUFESkEsdUJBQ0ksMENBRHNCLElBQUlELFlBQUosQ0FBVSxzQkFBVixDQUN0Qjs7QUFBQTs7QUFDSixjQUFLckYsb0NBQUwsR0FBNENaLG1DQUE1Qzs7QUFFQSxjQUFLbUcsb0JBQUwsR0FBNEJILHdCQUE1QjtBQUNBLGNBQUtJLG1CQUFMLEdBQTJCRix1QkFBM0I7QUFDSDs7aUNBRUR0SyxJLGlCQUFLeUssUyxFQUFXO0FBQ1o7QUFDQSxhQUFJQSxVQUFVNXFDLFlBQVYsSUFBMEI0cUMsVUFBVTdMLFVBQVYsS0FBeUJ2N0IsU0FBdkQsRUFBa0U7QUFDOUQsaUJBQUlqRixXQUFXcXNDLFVBQVU3TCxVQUF6QjtBQUNBL3BDLHNCQUFJZ0IsS0FBSixDQUFVLG1FQUFWLEVBQStFdUksUUFBL0U7O0FBRUEsaUJBQUlBLFdBQVcsQ0FBZixFQUFrQjtBQUNkO0FBQ0EscUJBQUlzc0MsV0FBV3RzQyxXQUFXLEtBQUs0bUMsb0NBQS9CO0FBQ0EscUJBQUkwRixZQUFZLENBQWhCLEVBQWtCO0FBQ2RBLGdDQUFXLENBQVg7QUFDSDs7QUFFRDcxQywwQkFBSWdCLEtBQUosQ0FBVSx3REFBVixFQUFvRTYwQyxRQUFwRTtBQUNBLHNCQUFLSCxvQkFBTCxDQUEwQnBpQyxJQUExQixDQUErQnVpQyxRQUEvQjtBQUNILGNBVEQsTUFVSztBQUNENzFDLDBCQUFJZ0IsS0FBSixDQUFVLHlGQUFWO0FBQ0Esc0JBQUswMEMsb0JBQUwsQ0FBMEJJLE1BQTFCO0FBQ0g7O0FBRUQ7QUFDQSxpQkFBSUMsVUFBVXhzQyxXQUFXLENBQXpCO0FBQ0F2SixzQkFBSWdCLEtBQUosQ0FBVSx1REFBVixFQUFtRSswQyxPQUFuRTtBQUNBLGtCQUFLSixtQkFBTCxDQUF5QnJpQyxJQUF6QixDQUE4QnlpQyxPQUE5QjtBQUNILFVBdkJELE1Bd0JLO0FBQ0Qsa0JBQUtMLG9CQUFMLENBQTBCSSxNQUExQjtBQUNBLGtCQUFLSCxtQkFBTCxDQUF5QkcsTUFBekI7QUFDSDtBQUNKLE07O2lDQUVEeEssTSxxQkFBUztBQUNMdHJDLGtCQUFJZ0IsS0FBSixDQUFVLGtFQUFWO0FBQ0EsY0FBSzAwQyxvQkFBTCxDQUEwQkksTUFBMUI7QUFDQSxjQUFLSCxtQkFBTCxDQUF5QkcsTUFBekI7QUFDSCxNOztpQ0FFREUsc0IsbUNBQXVCMXNDLEUsRUFBSTtBQUN2QixjQUFLb3NDLG9CQUFMLENBQTBCakIsVUFBMUIsQ0FBcUNuckMsRUFBckM7QUFDSCxNOztpQ0FDRDJzQyx5QixzQ0FBMEIzc0MsRSxFQUFJO0FBQzFCLGNBQUtvc0Msb0JBQUwsQ0FBMEJmLGFBQTFCLENBQXdDcnJDLEVBQXhDO0FBQ0gsTTs7aUNBRUQ0c0MscUIsa0NBQXNCNXNDLEUsRUFBSTtBQUN0QixjQUFLcXNDLG1CQUFMLENBQXlCbEIsVUFBekIsQ0FBb0NuckMsRUFBcEM7QUFDSCxNOztpQ0FDRDZzQyx3QixxQ0FBeUI3c0MsRSxFQUFJO0FBQ3pCLGNBQUtxc0MsbUJBQUwsQ0FBeUJoQixhQUF6QixDQUF1Q3JyQyxFQUF2QztBQUNILE07Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BFTDs7QUFDQTs7QUFDQTs7Ozs7O2dmQUxBO0FBQ0E7O0FBTUEsS0FBTThzQyxnQkFBZ0IsQ0FBdEIsQyxDQUF5Qjs7S0FFWlosSyxXQUFBQSxLOzs7QUFFVCxvQkFBWTlwQyxJQUFaLEVBQTZEO0FBQUEsYUFBM0N0QyxLQUEyQyx1RUFBbkN2SSxlQUFPdUksS0FBNEI7QUFBQSxhQUFyQml0QyxPQUFxQix1RUFBWDduQyxTQUFXOztBQUFBOztBQUFBLHNEQUN6RCxrQkFBTTlDLElBQU4sQ0FEeUQ7O0FBRXpELGVBQUt1bkMsTUFBTCxHQUFjN3BDLEtBQWQ7O0FBRUEsYUFBSWl0QyxPQUFKLEVBQWE7QUFDVCxtQkFBS0MsUUFBTCxHQUFnQkQsT0FBaEI7QUFDSCxVQUZELE1BR0s7QUFDRCxtQkFBS0MsUUFBTCxHQUFnQjtBQUFBLHdCQUFNdGxDLEtBQUtaLEdBQUwsS0FBYSxJQUFuQjtBQUFBLGNBQWhCO0FBQ0g7QUFUd0Q7QUFVNUQ7O3FCQU1Ea0QsSSxpQkFBSy9KLFEsRUFBVTtBQUNYLGFBQUlBLFlBQVksQ0FBaEIsRUFBbUI7QUFDZkEsd0JBQVcsQ0FBWDtBQUNIO0FBQ0RBLG9CQUFXK0QsU0FBUy9ELFFBQVQsQ0FBWDs7QUFFQSxhQUFJZ3RDLGFBQWEsS0FBS25tQyxHQUFMLEdBQVc3RyxRQUE1QjtBQUNBLGFBQUksS0FBS2d0QyxVQUFMLEtBQW9CQSxVQUFwQixJQUFrQyxLQUFLQyxZQUEzQyxFQUF5RDtBQUNyRDtBQUNBeDJDLHNCQUFJZ0IsS0FBSixDQUFVLHNCQUFzQixLQUFLeTFDLEtBQTNCLEdBQW1DLG9FQUE3QyxFQUFtSCxLQUFLRixVQUF4SDtBQUNBO0FBQ0g7O0FBRUQsY0FBS1QsTUFBTDs7QUFFQTkxQyxrQkFBSWdCLEtBQUosQ0FBVSxzQkFBc0IsS0FBS3kxQyxLQUEzQixHQUFtQyxnQkFBN0MsRUFBK0RsdEMsUUFBL0Q7QUFDQSxjQUFLbXRDLFdBQUwsR0FBbUJILFVBQW5COztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQUlJLGdCQUFnQlAsYUFBcEI7QUFDQSxhQUFJN3NDLFdBQVdvdEMsYUFBZixFQUE4QjtBQUMxQkEsNkJBQWdCcHRDLFFBQWhCO0FBQ0g7QUFDRCxjQUFLaXRDLFlBQUwsR0FBb0IsS0FBS3ZELE1BQUwsQ0FBWTVwQyxXQUFaLENBQXdCLEtBQUttb0MsU0FBTCxDQUFlRixJQUFmLENBQW9CLElBQXBCLENBQXhCLEVBQW1EcUYsZ0JBQWdCLElBQW5FLENBQXBCO0FBQ0gsTTs7cUJBTURiLE0scUJBQVM7QUFDTCxhQUFJLEtBQUtVLFlBQVQsRUFBdUI7QUFDbkJ4MkMsc0JBQUlnQixLQUFKLENBQVUsZ0JBQVYsRUFBNEIsS0FBS3kxQyxLQUFqQztBQUNBLGtCQUFLeEQsTUFBTCxDQUFZenBDLGFBQVosQ0FBMEIsS0FBS2d0QyxZQUEvQjtBQUNBLGtCQUFLQSxZQUFMLEdBQW9CLElBQXBCO0FBQ0g7QUFDSixNOztxQkFFRGhGLFMsd0JBQVk7QUFDUixhQUFJb0YsT0FBTyxLQUFLRixXQUFMLEdBQW1CLEtBQUt0bUMsR0FBbkM7QUFDQXBRLGtCQUFJZ0IsS0FBSixDQUFVLHFCQUFxQixLQUFLeTFDLEtBQTFCLEdBQWtDLG9CQUE1QyxFQUFrRUcsSUFBbEU7O0FBRUEsYUFBSSxLQUFLRixXQUFMLElBQW9CLEtBQUt0bUMsR0FBN0IsRUFBa0M7QUFDOUIsa0JBQUswbEMsTUFBTDtBQUNBLDhCQUFNdkIsS0FBTjtBQUNIO0FBQ0osTTs7Ozs2QkFwRFM7QUFDTixvQkFBT2puQyxTQUFTLEtBQUtncEMsUUFBTCxFQUFULENBQVA7QUFDSDs7OzZCQThCZ0I7QUFDYixvQkFBTyxLQUFLSSxXQUFaO0FBQ0g7Ozs7R0FoRHNCekMsYTs7Ozs7Ozs7Ozs7OztBQ04zQjs7MkpBSEE7QUFDQTs7S0FJYUEsSyxXQUFBQSxLO0FBRVQsb0JBQVl2b0MsSUFBWixFQUFrQjtBQUFBOztBQUNkLGNBQUsrcUMsS0FBTCxHQUFhL3FDLElBQWI7QUFDQSxjQUFLbXJDLFVBQUwsR0FBa0IsRUFBbEI7QUFDSDs7cUJBRURwQyxVLHVCQUFXbnJDLEUsRUFBSTtBQUNYLGNBQUt1dEMsVUFBTCxDQUFnQjN0QyxJQUFoQixDQUFxQkksRUFBckI7QUFDSCxNOztxQkFFRHFyQyxhLDBCQUFjcnJDLEUsRUFBSTtBQUNkLGFBQUltL0IsTUFBTSxLQUFLb08sVUFBTCxDQUFnQkMsU0FBaEIsQ0FBMEI7QUFBQSxvQkFBUWx1QyxTQUFTVSxFQUFqQjtBQUFBLFVBQTFCLENBQVY7QUFDQSxhQUFJbS9CLE9BQU8sQ0FBWCxFQUFjO0FBQ1Ysa0JBQUtvTyxVQUFMLENBQWdCemdDLE1BQWhCLENBQXVCcXlCLEdBQXZCLEVBQTRCLENBQTVCO0FBQ0g7QUFDSixNOztxQkFFRDhMLEssb0JBQWlCO0FBQ2J2MEMsa0JBQUlnQixLQUFKLENBQVUsMkJBQTJCLEtBQUt5MUMsS0FBMUM7QUFDQSxjQUFLLElBQUk1cUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLEtBQUtnckMsVUFBTCxDQUFnQjF1QyxNQUFwQyxFQUE0QzBELEdBQTVDLEVBQWlEO0FBQUE7O0FBQzdDLGdDQUFLZ3JDLFVBQUwsRUFBZ0JockMsQ0FBaEI7QUFDSDtBQUNKLE07Ozs7Ozs7Ozs7Ozs7Ozs7QUN6Qkw7OzJKQUhBO0FBQ0E7O0tBSWF1K0Isa0IsV0FBQUEsa0I7QUFFVCxpQ0FBWTJNLFdBQVosRUFBeUI7QUFBQTs7QUFDckIsY0FBS0MsWUFBTCxHQUFvQkQsV0FBcEI7QUFDSDs7a0NBRURySSxLLG9CQUFRO0FBQ0osYUFBSSxDQUFDLEtBQUs4QyxTQUFWLEVBQXFCO0FBQ2pCLGtCQUFLQSxTQUFMLEdBQWlCLEtBQUt5RixjQUFMLENBQW9CM0YsSUFBcEIsQ0FBeUIsSUFBekIsQ0FBakI7QUFDQSxrQkFBSzBGLFlBQUwsQ0FBa0JFLE1BQWxCLENBQXlCbEIsc0JBQXpCLENBQWdELEtBQUt4RSxTQUFyRDs7QUFFQTtBQUNBLGtCQUFLd0YsWUFBTCxDQUFrQmhNLE9BQWxCLEdBQTRCdG5DLElBQTVCLENBQWlDLGdCQUFNO0FBQ25DO0FBQ0gsY0FGRCxFQUVHMm9DLEtBRkgsQ0FFUyxlQUFLO0FBQ1Y7QUFDQXJzQywwQkFBSW1CLEtBQUosQ0FBVSwrQ0FBVixFQUEyRG1yQyxJQUFJOThCLE9BQS9EO0FBQ0gsY0FMRDtBQU1IO0FBQ0osTTs7a0NBRURvL0IsSSxtQkFBTztBQUNILGFBQUksS0FBSzRDLFNBQVQsRUFBb0I7QUFDaEIsa0JBQUt3RixZQUFMLENBQWtCRSxNQUFsQixDQUF5QmpCLHlCQUF6QixDQUFtRCxLQUFLekUsU0FBeEQ7QUFDQSxvQkFBTyxLQUFLQSxTQUFaO0FBQ0g7QUFDSixNOztrQ0FFRHlGLGMsNkJBQWlCO0FBQUE7O0FBQ2IsY0FBS0QsWUFBTCxDQUFrQnpLLFlBQWxCLEdBQWlDN29DLElBQWpDLENBQXNDLGdCQUFRO0FBQzFDMUQsc0JBQUlnQixLQUFKLENBQVUsb0VBQVY7QUFDSCxVQUZELEVBRUcsZUFBTztBQUNOaEIsc0JBQUltQixLQUFKLENBQVUsNkRBQVYsRUFBeUVtckMsSUFBSTk4QixPQUE3RTtBQUNBLG1CQUFLd25DLFlBQUwsQ0FBa0JFLE1BQWxCLENBQXlCbEMsc0JBQXpCLENBQWdEMUksR0FBaEQ7QUFDSCxVQUxEO0FBTUgsTTs7Ozs7Ozs7Ozs7Ozs7OztzakJDeENMO0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7S0FFYTFyQyxjLFdBQUFBLGM7QUFFVCw2QkFBWW0yQyxXQUFaLEVBQXNFO0FBQUE7O0FBQUEsYUFBN0NJLHNCQUE2Qyx1RUFBcEJ6MkMsc0NBQW9COztBQUFBOztBQUNsRSxhQUFJLENBQUNxMkMsV0FBTCxFQUFrQjtBQUNkLzJDLHNCQUFJbUIsS0FBSixDQUFVLCtEQUFWO0FBQ0EsbUJBQU0sSUFBSWMsS0FBSixDQUFVLGFBQVYsQ0FBTjtBQUNIOztBQUVELGNBQUsrMEMsWUFBTCxHQUFvQkQsV0FBcEI7QUFDQSxjQUFLSyx1QkFBTCxHQUErQkQsc0JBQS9COztBQUVBLGNBQUtILFlBQUwsQ0FBa0JFLE1BQWxCLENBQXlCMUMsYUFBekIsQ0FBdUMsS0FBSzZDLE1BQUwsQ0FBWS9GLElBQVosQ0FBaUIsSUFBakIsQ0FBdkM7QUFDQSxjQUFLMEYsWUFBTCxDQUFrQkUsTUFBbEIsQ0FBeUJ0QyxlQUF6QixDQUF5QyxLQUFLMEMsS0FBTCxDQUFXaEcsSUFBWCxDQUFnQixJQUFoQixDQUF6Qzs7QUFFQSxjQUFLMEYsWUFBTCxDQUFrQmhNLE9BQWxCLEdBQTRCdG5DLElBQTVCLENBQWlDLGdCQUFRO0FBQ3JDO0FBQ0E7QUFDQSxpQkFBSXduQyxJQUFKLEVBQVU7QUFDTix1QkFBS21NLE1BQUwsQ0FBWW5NLElBQVo7QUFDSDtBQUNKLFVBTkQsRUFNR21CLEtBTkgsQ0FNUyxlQUFPO0FBQ1o7QUFDQXJzQyxzQkFBSW1CLEtBQUosQ0FBVSwwQ0FBVixFQUFzRG1yQyxJQUFJOThCLE9BQTFEO0FBQ0gsVUFURDtBQVVIOzs4QkFrQkQ2bkMsTSxtQkFBT25NLEksRUFBTTtBQUFBOztBQUNULGFBQUlyQixnQkFBZ0JxQixLQUFLckIsYUFBekI7O0FBRUEsYUFBSUEsYUFBSixFQUFtQjtBQUNmLGtCQUFLME4sSUFBTCxHQUFZck0sS0FBS25nQyxPQUFMLENBQWFJLEdBQXpCO0FBQ0Esa0JBQUtxc0MsSUFBTCxHQUFZdE0sS0FBS25nQyxPQUFMLENBQWFraUMsR0FBekI7QUFDQWp0QyxzQkFBSWdCLEtBQUosQ0FBVSx1Q0FBVixFQUFtRDZvQyxhQUFuRCxFQUFrRSxRQUFsRSxFQUE0RSxLQUFLME4sSUFBakY7O0FBRUEsaUJBQUksQ0FBQyxLQUFLRSxtQkFBVixFQUErQjtBQUMzQixzQkFBS2owQyxnQkFBTCxDQUFzQjZLLHFCQUF0QixHQUE4QzNLLElBQTlDLENBQW1ELGVBQU87QUFDdEQseUJBQUlDLEdBQUosRUFBUztBQUNMM0Qsa0NBQUlnQixLQUFKLENBQVUsMERBQVY7O0FBRUEsNkJBQUlzQyxZQUFZLE9BQUsyRCxVQUFyQjtBQUNBLDZCQUFJeXdDLFdBQVcsT0FBS3JILHFCQUFwQjtBQUNBLDZCQUFJc0gsY0FBYyxPQUFLckgsd0JBQXZCOztBQUVBLGdDQUFLbUgsbUJBQUwsR0FBMkIsSUFBSSxPQUFLTCx1QkFBVCxDQUFpQyxPQUFLNUYsU0FBTCxDQUFlRixJQUFmLENBQW9CLE1BQXBCLENBQWpDLEVBQTREaHVDLFNBQTVELEVBQXVFSyxHQUF2RSxFQUE0RSt6QyxRQUE1RSxFQUFzRkMsV0FBdEYsQ0FBM0I7QUFDQSxnQ0FBS0YsbUJBQUwsQ0FBeUJ0TSxJQUF6QixHQUFnQ3puQyxJQUFoQyxDQUFxQyxZQUFNO0FBQ3ZDLG9DQUFLK3pDLG1CQUFMLENBQXlCL0ksS0FBekIsQ0FBK0I3RSxhQUEvQjtBQUNILDBCQUZEO0FBR0gsc0JBWEQsTUFZSztBQUNEN3BDLGtDQUFJa0IsSUFBSixDQUFTLHNFQUFUO0FBQ0g7QUFDSixrQkFoQkQsRUFnQkdtckMsS0FoQkgsQ0FnQlMsZUFBTztBQUNaO0FBQ0Fyc0MsOEJBQUltQixLQUFKLENBQVUsMERBQVYsRUFBc0VtckMsSUFBSTk4QixPQUExRTtBQUNILGtCQW5CRDtBQW9CSCxjQXJCRCxNQXNCSztBQUNELHNCQUFLaW9DLG1CQUFMLENBQXlCL0ksS0FBekIsQ0FBK0I3RSxhQUEvQjtBQUNIO0FBQ0o7QUFDSixNOzs4QkFFRHlOLEssb0JBQVE7QUFDSixjQUFLQyxJQUFMLEdBQVksSUFBWjtBQUNBLGNBQUtDLElBQUwsR0FBWSxJQUFaOztBQUVBLGFBQUksS0FBS0MsbUJBQVQsRUFBOEI7QUFDMUJ6M0Msc0JBQUlnQixLQUFKLENBQVUsc0JBQVY7QUFDQSxrQkFBS3kyQyxtQkFBTCxDQUF5QjdJLElBQXpCO0FBQ0g7QUFDSixNOzs4QkFFRDRDLFMsd0JBQVk7QUFBQTs7QUFDUixjQUFLd0YsWUFBTCxDQUFrQmxLLGtCQUFsQixHQUF1Q3BwQyxJQUF2QyxDQUE0QyxtQkFBVztBQUNuRCxpQkFBSWswQywwQkFBMEIsSUFBOUI7O0FBRUEsaUJBQUlDLE9BQUosRUFBYTtBQUNULHFCQUFJQSxRQUFRMXNDLEdBQVIsS0FBZ0IsT0FBS29zQyxJQUF6QixFQUErQjtBQUMzQkssK0NBQTBCLEtBQTFCO0FBQ0EsNEJBQUtILG1CQUFMLENBQXlCL0ksS0FBekIsQ0FBK0JtSixRQUFRaE8sYUFBdkM7O0FBRUEseUJBQUlnTyxRQUFRNUssR0FBUixLQUFnQixPQUFLdUssSUFBekIsRUFBK0I7QUFDM0J4M0Msa0NBQUlnQixLQUFKLENBQVUsMkdBQVYsRUFBdUg2MkMsUUFBUWhPLGFBQS9IO0FBQ0gsc0JBRkQsTUFHSztBQUNEN3BDLGtDQUFJZ0IsS0FBSixDQUFVLHNJQUFWLEVBQWtKNjJDLFFBQVFoTyxhQUExSjtBQUNBLGdDQUFLbU4sWUFBTCxDQUFrQkUsTUFBbEIsQ0FBeUI1Qix3QkFBekI7QUFDSDtBQUNKLGtCQVhELE1BWUs7QUFDRHQxQyw4QkFBSWdCLEtBQUosQ0FBVSw2REFBVixFQUF5RTYyQyxRQUFRMXNDLEdBQWpGO0FBQ0g7QUFDSixjQWhCRCxNQWlCSztBQUNEbkwsMEJBQUlnQixLQUFKLENBQVUsNERBQVY7QUFDSDs7QUFFRCxpQkFBSTQyQyx1QkFBSixFQUE2QjtBQUN6QjUzQywwQkFBSWdCLEtBQUosQ0FBVSw4RUFBVjtBQUNBLHdCQUFLZzJDLFlBQUwsQ0FBa0JFLE1BQWxCLENBQXlCL0IsbUJBQXpCO0FBQ0g7QUFDSixVQTVCRCxFQTRCRzlJLEtBNUJILENBNEJTLGVBQU87QUFDWnJzQyxzQkFBSWdCLEtBQUosQ0FBVSw2RkFBVixFQUF5R3NyQyxJQUFJOThCLE9BQTdHO0FBQ0Esb0JBQUt3bkMsWUFBTCxDQUFrQkUsTUFBbEIsQ0FBeUIvQixtQkFBekI7QUFDSCxVQS9CRDtBQWdDSCxNOzs7OzZCQS9GZTtBQUNaLG9CQUFPLEtBQUs2QixZQUFMLENBQWtCOTBDLFFBQXpCO0FBQ0g7Ozs2QkFDc0I7QUFDbkIsb0JBQU8sS0FBSzgwQyxZQUFMLENBQWtCbnhDLGVBQXpCO0FBQ0g7Ozs2QkFDZ0I7QUFDYixvQkFBTyxLQUFLMUQsU0FBTCxDQUFlbUIsU0FBdEI7QUFDSDs7OzZCQUMyQjtBQUN4QixvQkFBTyxLQUFLbkIsU0FBTCxDQUFla3RDLG9CQUF0QjtBQUNIOzs7NkJBQzhCO0FBQzNCLG9CQUFPLEtBQUtsdEMsU0FBTCxDQUFlbXRDLHVCQUF0QjtBQUNIOzs7Ozs7Ozs7Ozs7Ozs7OztBQzNDTDs7MkpBSEE7QUFDQTs7QUFJQSxLQUFNd0ksa0JBQWtCLElBQXhCOztLQUVhcDNDLGtCLFdBQUFBLGtCO0FBQ1QsaUNBQVk0c0MsUUFBWixFQUFzQmhxQyxTQUF0QixFQUFpQ0ssR0FBakMsRUFBc0MrekMsUUFBdEMsRUFBb0U7QUFBQSxhQUFwQkMsV0FBb0IsdUVBQU4sSUFBTTs7QUFBQTs7QUFDaEUsY0FBS25HLFNBQUwsR0FBaUJsRSxRQUFqQjtBQUNBLGNBQUtybUMsVUFBTCxHQUFrQjNELFNBQWxCO0FBQ0EsY0FBS3kwQyxJQUFMLEdBQVlwMEMsR0FBWjtBQUNBLGNBQUtxMEMsU0FBTCxHQUFpQk4sWUFBWUksZUFBN0I7QUFDQSxjQUFLRyxZQUFMLEdBQW9CTixXQUFwQjs7QUFFQSxhQUFJbFAsTUFBTTlrQyxJQUFJdUUsT0FBSixDQUFZLEdBQVosRUFBaUJ2RSxJQUFJdUUsT0FBSixDQUFZLElBQVosSUFBb0IsQ0FBckMsQ0FBVjtBQUNBLGNBQUtnd0MsYUFBTCxHQUFxQnYwQyxJQUFJd0YsTUFBSixDQUFXLENBQVgsRUFBY3MvQixHQUFkLENBQXJCOztBQUVBLGNBQUs2SixNQUFMLEdBQWN2b0MsT0FBT3dvQyxRQUFQLENBQWdCQyxhQUFoQixDQUE4QixRQUE5QixDQUFkOztBQUVBO0FBQ0EsY0FBS0YsTUFBTCxDQUFZRyxLQUFaLENBQWtCQyxVQUFsQixHQUErQixRQUEvQjtBQUNBLGNBQUtKLE1BQUwsQ0FBWUcsS0FBWixDQUFrQkUsUUFBbEIsR0FBNkIsVUFBN0I7QUFDQSxjQUFLTCxNQUFMLENBQVlHLEtBQVosQ0FBa0I5dkMsT0FBbEIsR0FBNEIsTUFBNUI7QUFDQSxjQUFLMnZDLE1BQUwsQ0FBWUcsS0FBWixDQUFrQkcsS0FBbEIsR0FBMEIsQ0FBMUI7QUFDQSxjQUFLTixNQUFMLENBQVlHLEtBQVosQ0FBa0JJLE1BQWxCLEdBQTJCLENBQTNCOztBQUVBLGNBQUtQLE1BQUwsQ0FBWWMsR0FBWixHQUFrQnp2QyxHQUFsQjtBQUNIOztrQ0FDRHduQyxJLG1CQUFPO0FBQUE7O0FBQ0gsZ0JBQU8sSUFBSTdtQyxPQUFKLENBQVksVUFBQ2dCLE9BQUQsRUFBYTtBQUM1QixtQkFBS2d0QyxNQUFMLENBQVl0akMsTUFBWixHQUFxQixZQUFNO0FBQ3ZCMUo7QUFDSCxjQUZEOztBQUlBeUUsb0JBQU93b0MsUUFBUCxDQUFnQk8sSUFBaEIsQ0FBcUJDLFdBQXJCLENBQWlDLE1BQUtULE1BQXRDO0FBQ0EsbUJBQUtILGtCQUFMLEdBQTBCLE1BQUtDLFFBQUwsQ0FBY2QsSUFBZCxDQUFtQixLQUFuQixDQUExQjtBQUNBdm5DLG9CQUFPc29DLGdCQUFQLENBQXdCLFNBQXhCLEVBQW1DLE1BQUtGLGtCQUF4QyxFQUE0RCxLQUE1RDtBQUNILFVBUk0sQ0FBUDtBQVNILE07O2tDQUNEQyxRLHFCQUFTN2lDLEMsRUFBRztBQUNSLGFBQUlBLEVBQUVpa0MsTUFBRixLQUFhLEtBQUswRSxhQUFsQixJQUNBM29DLEVBQUVta0MsTUFBRixLQUFhLEtBQUtwQixNQUFMLENBQVlxQixhQUQ3QixFQUVFO0FBQ0UsaUJBQUlwa0MsRUFBRS9NLElBQUYsS0FBVyxPQUFmLEVBQXdCO0FBQ3BCeEMsMEJBQUltQixLQUFKLENBQVUsZ0VBQVY7QUFDQSxxQkFBSSxLQUFLODJDLFlBQVQsRUFBdUI7QUFDbkIsMEJBQUtySixJQUFMO0FBQ0g7QUFDSixjQUxELE1BTUssSUFBSXIvQixFQUFFL00sSUFBRixLQUFXLFNBQWYsRUFBMEI7QUFDM0J4QywwQkFBSWdCLEtBQUosQ0FBVSxrRUFBVjtBQUNBLHNCQUFLNHRDLElBQUw7QUFDQSxzQkFBSzRDLFNBQUw7QUFDSCxjQUpJLE1BS0E7QUFDRHh4QywwQkFBSWdCLEtBQUosQ0FBVSx5QkFBeUJ1TyxFQUFFL00sSUFBM0IsR0FBa0MsdUNBQTVDO0FBQ0g7QUFDSjtBQUNKLE07O2tDQUNEa3NDLEssa0JBQU03RSxhLEVBQWU7QUFBQTs7QUFDakIsYUFBSSxLQUFLc08sY0FBTCxLQUF3QnRPLGFBQTVCLEVBQTJDO0FBQ3ZDN3BDLHNCQUFJZ0IsS0FBSixDQUFVLDBCQUFWOztBQUVBLGtCQUFLNHRDLElBQUw7O0FBRUEsa0JBQUt1SixjQUFMLEdBQXNCdE8sYUFBdEI7O0FBRUEsaUJBQUlqNkIsT0FBTyxTQUFQQSxJQUFPLEdBQU07QUFDYix3QkFBSzBpQyxNQUFMLENBQVlxQixhQUFaLENBQTBCRSxXQUExQixDQUFzQyxPQUFLNXNDLFVBQUwsR0FBa0IsR0FBbEIsR0FBd0IsT0FBS2t4QyxjQUFuRSxFQUFtRixPQUFLRCxhQUF4RjtBQUNILGNBRkQ7O0FBSUE7QUFDQXRvQzs7QUFFQTtBQUNBLGtCQUFLcWpDLE1BQUwsR0FBY2xwQyxPQUFPVixXQUFQLENBQW1CdUcsSUFBbkIsRUFBeUIsS0FBS29vQyxTQUE5QixDQUFkO0FBQ0g7QUFDSixNOztrQ0FFRHBKLEksbUJBQU87QUFDSCxjQUFLdUosY0FBTCxHQUFzQixJQUF0Qjs7QUFFQSxhQUFJLEtBQUtsRixNQUFULEVBQWlCO0FBQ2JqekMsc0JBQUlnQixLQUFKLENBQVUseUJBQVY7O0FBRUErSSxvQkFBT1AsYUFBUCxDQUFxQixLQUFLeXBDLE1BQTFCO0FBQ0Esa0JBQUtBLE1BQUwsR0FBYyxJQUFkO0FBQ0g7QUFDSixNOzs7Ozs7Ozs7Ozs7Ozs7O0FDdEZMOztBQUNBOztBQUNBOzsySkFMQTtBQUNBOztBQU1BLEtBQU1tRixzQkFBc0IsY0FBNUI7O0tBRWF6M0MscUIsV0FBQUEscUI7QUFDVCxvQ0FBWXVCLFFBQVosRUFBeUc7QUFBQSxhQUFuRnlNLGtCQUFtRix1RUFBOUQ5TixlQUFPb0osY0FBdUQ7QUFBQSxhQUF2Q3JELG1CQUF1Qyx1RUFBakJyRyxnQ0FBaUI7O0FBQUE7O0FBQ3JHLGFBQUksQ0FBQzJCLFFBQUwsRUFBZTtBQUNYbEMsc0JBQUltQixLQUFKLENBQVUsa0RBQVY7QUFDQSxtQkFBTSxJQUFJYyxLQUFKLENBQVUsdUJBQVYsQ0FBTjtBQUNIOztBQUVELGNBQUtFLFNBQUwsR0FBaUJELFFBQWpCO0FBQ0EsY0FBS20yQyxtQkFBTCxHQUEyQjFwQyxrQkFBM0I7QUFDQSxjQUFLbkwsZ0JBQUwsR0FBd0IsSUFBSW9ELG1CQUFKLENBQXdCLEtBQUt6RSxTQUE3QixDQUF4QjtBQUNIOztxQ0FFRHNzQyxNLG1CQUFPNkosVyxFQUFhOUosUSxFQUFVO0FBQUE7O0FBQzFCLGFBQUksQ0FBQzhKLFdBQUwsRUFBa0I7QUFDZHQ0QyxzQkFBSW1CLEtBQUosQ0FBVSx1REFBVjtBQUNBLG1CQUFNLElBQUljLEtBQUosQ0FBVSwwQkFBVixDQUFOO0FBQ0g7O0FBRUQsZ0JBQU8sS0FBS3VCLGdCQUFMLENBQXNCOEsscUJBQXRCLEdBQThDNUssSUFBOUMsQ0FBbUQsZUFBTztBQUM3RCxpQkFBSSxDQUFDQyxHQUFMLEVBQVU7QUFDTixxQkFBSTZxQyxRQUFKLEVBQWM7QUFDVnh1Qyw4QkFBSW1CLEtBQUosQ0FBVSx3REFBVjtBQUNBLDJCQUFNLElBQUljLEtBQUosQ0FBVSwwQkFBVixDQUFOO0FBQ0g7O0FBRUQ7QUFDQTtBQUNIOztBQUVEakMsc0JBQUltQixLQUFKLENBQVUscURBQVY7QUFDQSxpQkFBSW1DLFlBQVksTUFBS25CLFNBQUwsQ0FBZW1CLFNBQS9CO0FBQ0EsaUJBQUlnRCxnQkFBZ0IsTUFBS25FLFNBQUwsQ0FBZW1FLGFBQW5DO0FBQ0Esb0JBQU8sTUFBS2l5QyxPQUFMLENBQWE1MEMsR0FBYixFQUFrQkwsU0FBbEIsRUFBNkJnRCxhQUE3QixFQUE0Q2d5QyxXQUE1QyxDQUFQO0FBQ0gsVUFmTSxDQUFQO0FBZ0JILE07O3FDQUVEQyxPLG9CQUFRNTBDLEcsRUFBS0wsUyxFQUFXZ0QsYSxFQUFlZ3lDLFcsRUFBYTtBQUFBOztBQUVoRCxnQkFBTyxJQUFJaDBDLE9BQUosQ0FBWSxVQUFDZ0IsT0FBRCxFQUFVZixNQUFWLEVBQXFCOztBQUVwQyxpQkFBSWkwQyxNQUFNLElBQUksT0FBS0gsbUJBQVQsRUFBVjtBQUNBRyxpQkFBSXpwQyxJQUFKLENBQVMsTUFBVCxFQUFpQnBMLEdBQWpCOztBQUVBNjBDLGlCQUFJeHBDLE1BQUosR0FBYSxZQUFNO0FBQ2ZoUCwwQkFBSWdCLEtBQUosQ0FBVSw4REFBVixFQUEwRXczQyxJQUFJdnBDLE1BQTlFOztBQUVBLHFCQUFJdXBDLElBQUl2cEMsTUFBSixLQUFlLEdBQW5CLEVBQXdCO0FBQ3BCM0o7QUFDSCxrQkFGRCxNQUdLO0FBQ0RmLDRCQUFPdEMsTUFBTXUyQyxJQUFJL29DLFVBQUosR0FBaUIsSUFBakIsR0FBd0Irb0MsSUFBSXZwQyxNQUE1QixHQUFxQyxHQUEzQyxDQUFQO0FBQ0g7QUFDSixjQVREOztBQVdBLGlCQUFJNmpDLE9BQU8sZUFBZXg5QixtQkFBbUJoUyxTQUFuQixDQUExQjtBQUNBLGlCQUFJZ0QsYUFBSixFQUFtQjtBQUNmd3NDLHlCQUFRLG9CQUFvQng5QixtQkFBbUJoUCxhQUFuQixDQUE1QjtBQUNIO0FBQ0R3c0MscUJBQVEsc0JBQXNCeDlCLG1CQUFtQjhpQyxtQkFBbkIsQ0FBOUI7QUFDQXRGLHFCQUFRLFlBQVl4OUIsbUJBQW1CZ2pDLFdBQW5CLENBQXBCOztBQUVBRSxpQkFBSTdvQyxnQkFBSixDQUFxQixjQUFyQixFQUFxQyxtQ0FBckM7QUFDQTZvQyxpQkFBSTVvQyxJQUFKLENBQVNrakMsSUFBVDtBQUNILFVBekJNLENBQVA7QUEwQkgsTTs7Ozs7Ozs7Ozs7Ozs7OztBQ3RFTDs7MkpBSEE7QUFDQTs7S0FJYXR5QyxxQixXQUFBQSxxQjs7Ozs7cUNBRVQyc0MsTyxvQkFBUXhFLE0sRUFBUTtBQUNaLGFBQUk2SCxRQUFRLElBQUlpSSxzQ0FBSixDQUF1QjlQLE1BQXZCLENBQVo7QUFDQSxnQkFBT3JrQyxRQUFRZ0IsT0FBUixDQUFnQmtyQyxLQUFoQixDQUFQO0FBQ0gsTTs7Ozs7Ozs7Ozs7Ozs7OztzakJDVkw7QUFDQTs7QUFFQTs7OztBQUVBLEtBQU1JLHVCQUF1QixnQ0FBN0I7QUFDQSxLQUFNQyxxQkFBcUIsUUFBM0I7O0tBRWE0SCxrQixXQUFBQSxrQjtBQUVULGlDQUFZOVAsTUFBWixFQUFvQjtBQUFBOztBQUFBOztBQUNoQixjQUFLbUksUUFBTCxHQUFnQixJQUFJeHNDLE9BQUosQ0FBWSxVQUFDZ0IsT0FBRCxFQUFVZixNQUFWLEVBQXFCO0FBQzdDLG1CQUFLd3NDLFFBQUwsR0FBZ0J6ckMsT0FBaEI7QUFDQSxtQkFBSzByQyxPQUFMLEdBQWV6c0MsTUFBZjtBQUNILFVBSGUsQ0FBaEI7O0FBS0EsY0FBSzJzQyxRQUFMLEdBQWdCdkksT0FBT3NELG1CQUFQLElBQThCMkUsb0JBQTlDO0FBQ0EsY0FBS0ssTUFBTCxHQUFjdEksT0FBT3VELGlCQUFQLElBQTRCMkUsa0JBQTFDOztBQUVBLGNBQUt0dUMsWUFBTCxHQUFvQm9tQyxPQUFPcUQsUUFBM0I7QUFDQWhzQyxrQkFBSWdCLEtBQUosQ0FBVSw0Q0FBNEMsS0FBS3VCLFlBQTNEO0FBQ0g7O2tDQUVEbTJDLHdCLHFDQUF5QkMsZSxFQUFpQjtBQUN0QyxnQkFBTyxDQUFDLDZCQUFELEVBQWdDLDBDQUFoQyxFQUE0RSxpQ0FBNUUsRUFBK0dDLElBQS9HLENBQW9ILFVBQVVsdEMsSUFBVixFQUFnQjtBQUN2SSxvQkFBT2l0QyxnQkFBZ0J0bEMsY0FBaEIsQ0FBK0IzSCxJQUEvQixDQUFQO0FBQ0gsVUFGTSxDQUFQO0FBR0gsTTs7a0NBRUQwaEMsUSxxQkFBU3pFLE0sRUFBUTtBQUNiLGFBQUksQ0FBQ0EsTUFBRCxJQUFXLENBQUNBLE9BQU9obEMsR0FBdkIsRUFBNEI7QUFDeEIsa0JBQUs0dEMsTUFBTCxDQUFZLGlCQUFaO0FBQ0gsVUFGRCxNQUVPO0FBQ0gsaUJBQUksQ0FBQ3huQyxPQUFPOHVDLE9BQVosRUFBcUI7QUFDakIsd0JBQU8sS0FBS3RILE1BQUwsQ0FBWSxzQkFBWixDQUFQO0FBQ0g7O0FBRUQsaUJBQUlvSCxrQkFBa0I1dUMsT0FBTzh1QyxPQUFQLENBQWVDLE9BQWYsQ0FBdUIscUJBQXZCLEVBQThDMXlDLFFBQXBFO0FBQ0EsaUJBQUksS0FBS3N5Qyx3QkFBTCxDQUE4QkMsZUFBOUIsTUFBbUQsS0FBdkQsRUFBOEQ7QUFDMUQsd0JBQU8sS0FBS3BILE1BQUwsQ0FBWSwrQkFBWixDQUFQO0FBQ0g7QUFDRCxrQkFBS0osTUFBTCxHQUFjMEgsUUFBUUUsWUFBUixDQUFxQmhxQyxJQUFyQixDQUEwQjQ1QixPQUFPaGxDLEdBQWpDLEVBQXNDLEtBQUtzdEMsTUFBM0MsRUFBbUQsS0FBS0MsUUFBeEQsQ0FBZDtBQUNBLGlCQUFJLEtBQUtDLE1BQVQsRUFBaUI7QUFDYm54QywwQkFBSWdCLEtBQUosQ0FBVSx5REFBVjs7QUFFQSxzQkFBS2c0QyxrQkFBTCxHQUEwQixLQUFLQyxhQUFMLENBQW1CM0gsSUFBbkIsQ0FBd0IsSUFBeEIsQ0FBMUI7QUFDQSxzQkFBSzRILHVCQUFMLEdBQStCLEtBQUtDLGtCQUFMLENBQXdCN0gsSUFBeEIsQ0FBNkIsSUFBN0IsQ0FBL0I7O0FBRUEsc0JBQUtILE1BQUwsQ0FBWWtCLGdCQUFaLENBQTZCLE1BQTdCLEVBQXFDLEtBQUsyRyxrQkFBMUMsRUFBOEQsS0FBOUQ7QUFDQSxzQkFBSzdILE1BQUwsQ0FBWWtCLGdCQUFaLENBQTZCLFdBQTdCLEVBQTBDLEtBQUs2Ryx1QkFBL0MsRUFBd0UsS0FBeEU7QUFDSCxjQVJELE1BUU87QUFDSCxzQkFBSzNILE1BQUwsQ0FBWSw0QkFBWjtBQUNIO0FBQ0o7QUFDRCxnQkFBTyxLQUFLRyxPQUFaO0FBQ0gsTTs7a0NBTUR5SCxrQiwrQkFBbUJDLEssRUFBTztBQUN0QixhQUFJQSxNQUFNejFDLEdBQU4sQ0FBVXVFLE9BQVYsQ0FBa0IsS0FBSzNGLFlBQXZCLE1BQXlDLENBQTdDLEVBQWdEO0FBQzVDLGtCQUFLb3ZDLFFBQUwsQ0FBYyxFQUFFaHVDLEtBQUt5MUMsTUFBTXoxQyxHQUFiLEVBQWQ7QUFDSDtBQUNKLE07O2tDQUNEczFDLGEsMEJBQWN6cEMsTyxFQUFTO0FBQ25CLGNBQUsraEMsTUFBTCxDQUFZL2hDLE9BQVo7QUFDSCxNOztrQ0FFRG1pQyxRLHFCQUFTbnZDLEksRUFBTTtBQUNYLGNBQUtvdkMsUUFBTDs7QUFFQTV4QyxrQkFBSWdCLEtBQUosQ0FBVSxtRUFBVjtBQUNBLGNBQUsrdkMsUUFBTCxDQUFjdnVDLElBQWQ7QUFDSCxNOztrQ0FDRCt1QyxNLG1CQUFPL2hDLE8sRUFBUztBQUNaLGNBQUtvaUMsUUFBTDs7QUFFQTV4QyxrQkFBSW1CLEtBQUosQ0FBVXFPLE9BQVY7QUFDQSxjQUFLd2hDLE9BQUwsQ0FBYSxJQUFJL3VDLEtBQUosQ0FBVXVOLE9BQVYsQ0FBYjtBQUNILE07O2tDQUVENjlCLEssb0JBQVE7QUFDSixjQUFLdUUsUUFBTDtBQUNILE07O2tDQUVEQSxRLHVCQUFXO0FBQ1AsYUFBSSxLQUFLVCxNQUFULEVBQWdCO0FBQ1pueEMsc0JBQUlnQixLQUFKLENBQVUsdUNBQVY7QUFDQSxrQkFBS213QyxNQUFMLENBQVlrQyxtQkFBWixDQUFnQyxNQUFoQyxFQUF3QyxLQUFLMkYsa0JBQTdDLEVBQWlFLEtBQWpFO0FBQ0Esa0JBQUs3SCxNQUFMLENBQVlrQyxtQkFBWixDQUFnQyxXQUFoQyxFQUE2QyxLQUFLNkYsdUJBQWxELEVBQTJFLEtBQTNFO0FBQ0Esa0JBQUsvSCxNQUFMLENBQVk5RCxLQUFaO0FBQ0g7QUFDRCxjQUFLOEQsTUFBTCxHQUFjLElBQWQ7QUFDSCxNOzs7OzZCQXRDYTtBQUNWLG9CQUFPLEtBQUtMLFFBQVo7QUFDSDs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN4REw7OzJKQUhBO0FBQ0E7O0tBSWFyd0Msc0IsV0FBQUEsc0I7Ozs7O3NDQUVUMHNDLE8sb0JBQVF4RSxNLEVBQVE7QUFDWkEsZ0JBQU9zRCxtQkFBUCxHQUE2QixZQUE3QjtBQUNBLGFBQUl1RSxRQUFRLElBQUlpSSxzQ0FBSixDQUF1QjlQLE1BQXZCLENBQVo7QUFDQSxnQkFBT3JrQyxRQUFRZ0IsT0FBUixDQUFnQmtyQyxLQUFoQixDQUFQO0FBQ0gsTSIsImZpbGUiOiJvaWRjLWNsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgZDQ4MDY3YWZjNDRiNGEyYjhiOWMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5leHBvcnQgeyBMb2cgfSBmcm9tICcuL3NyYy9Mb2cnO1xyXG5leHBvcnQgeyBPaWRjQ2xpZW50IH0gZnJvbSAnLi9zcmMvT2lkY0NsaWVudCc7XHJcbmV4cG9ydCB7IE9pZGNDbGllbnRTZXR0aW5ncyB9IGZyb20gJy4vc3JjL09pZGNDbGllbnRTZXR0aW5ncyc7XHJcbmV4cG9ydCB7IFdlYlN0b3JhZ2VTdGF0ZVN0b3JlIH0gZnJvbSAnLi9zcmMvV2ViU3RvcmFnZVN0YXRlU3RvcmUnO1xyXG5leHBvcnQgeyBJbk1lbW9yeVdlYlN0b3JhZ2UgfSBmcm9tICcuL3NyYy9Jbk1lbW9yeVdlYlN0b3JhZ2UnO1xyXG5leHBvcnQgeyBVc2VyTWFuYWdlciB9IGZyb20gJy4vc3JjL1VzZXJNYW5hZ2VyJztcclxuZXhwb3J0IHsgQWNjZXNzVG9rZW5FdmVudHMgfSBmcm9tICcuL3NyYy9BY2Nlc3NUb2tlbkV2ZW50cyc7XHJcbmV4cG9ydCB7IE1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4vc3JjL01ldGFkYXRhU2VydmljZSc7XHJcbmV4cG9ydCB7IENvcmRvdmFQb3B1cE5hdmlnYXRvciB9IGZyb20gJy4vc3JjL0NvcmRvdmFQb3B1cE5hdmlnYXRvcic7XHJcbmV4cG9ydCB7IENvcmRvdmFJRnJhbWVOYXZpZ2F0b3IgfSBmcm9tICcuL3NyYy9Db3Jkb3ZhSUZyYW1lTmF2aWdhdG9yJztcclxuZXhwb3J0IHsgQ2hlY2tTZXNzaW9uSUZyYW1lIH0gZnJvbSAnLi9zcmMvQ2hlY2tTZXNzaW9uSUZyYW1lJztcclxuZXhwb3J0IHsgVG9rZW5SZXZvY2F0aW9uQ2xpZW50IH0gZnJvbSAnLi9zcmMvVG9rZW5SZXZvY2F0aW9uQ2xpZW50JztcclxuZXhwb3J0IHsgU2Vzc2lvbk1vbml0b3IgfSBmcm9tICcuL3NyYy9TZXNzaW9uTW9uaXRvcic7XHJcbmV4cG9ydCB7IEdsb2JhbCB9IGZyb20gJy4vc3JjL0dsb2JhbCc7XHJcbmV4cG9ydCB7IFVzZXIgfSBmcm9tICcuL3NyYy9Vc2VyJztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vaW5kZXguanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5sZXQgbm9wTG9nZ2VyID0ge1xyXG4gICAgZGVidWcoKXt9LFxyXG4gICAgaW5mbygpe30sXHJcbiAgICB3YXJuKCl7fSxcclxuICAgIGVycm9yKCl7fVxyXG59O1xyXG5cclxuY29uc3QgTk9ORSA9IDA7XHJcbmNvbnN0IEVSUk9SID0gMTtcclxuY29uc3QgV0FSTiA9IDI7XHJcbmNvbnN0IElORk8gPSAzO1xyXG5jb25zdCBERUJVRyA9IDQ7XHJcblxyXG5sZXQgbG9nZ2VyO1xyXG5sZXQgbGV2ZWw7XHJcblxyXG5leHBvcnQgY2xhc3MgTG9nIHtcclxuICAgIHN0YXRpYyBnZXQgTk9ORSgpIHtyZXR1cm4gTk9ORX07XHJcbiAgICBzdGF0aWMgZ2V0IEVSUk9SKCkge3JldHVybiBFUlJPUn07XHJcbiAgICBzdGF0aWMgZ2V0IFdBUk4oKSB7cmV0dXJuIFdBUk59O1xyXG4gICAgc3RhdGljIGdldCBJTkZPKCkge3JldHVybiBJTkZPfTtcclxuICAgIHN0YXRpYyBnZXQgREVCVUcoKSB7cmV0dXJuIERFQlVHfTtcclxuICAgIFxyXG4gICAgc3RhdGljIHJlc2V0KCl7XHJcbiAgICAgICAgbGV2ZWwgPSBJTkZPO1xyXG4gICAgICAgIGxvZ2dlciA9IG5vcExvZ2dlcjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RhdGljIGdldCBsZXZlbCgpe1xyXG4gICAgICAgIHJldHVybiBsZXZlbDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBzZXQgbGV2ZWwodmFsdWUpe1xyXG4gICAgICAgIGlmIChOT05FIDw9IHZhbHVlICYmIHZhbHVlIDw9IERFQlVHKXtcclxuICAgICAgICAgICAgbGV2ZWwgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9nIGxldmVsXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RhdGljIGdldCBsb2dnZXIoKXtcclxuICAgICAgICByZXR1cm4gbG9nZ2VyO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIHNldCBsb2dnZXIodmFsdWUpe1xyXG4gICAgICAgIGlmICghdmFsdWUuZGVidWcgJiYgdmFsdWUuaW5mbykge1xyXG4gICAgICAgICAgICAvLyBqdXN0IHRvIHN0YXkgYmFja3dhcmRzIGNvbXBhdC4gY2FuIHJlbW92ZSBpbiAyLjBcclxuICAgICAgICAgICAgdmFsdWUuZGVidWcgPSB2YWx1ZS5pbmZvO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbHVlLmRlYnVnICYmIHZhbHVlLmluZm8gJiYgdmFsdWUud2FybiAmJiB2YWx1ZS5lcnJvcil7XHJcbiAgICAgICAgICAgIGxvZ2dlciA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBsb2dnZXJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzdGF0aWMgZGVidWcoLi4uYXJncyl7XHJcbiAgICAgICAgaWYgKGxldmVsID49IERFQlVHKXtcclxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnLmFwcGx5KGxvZ2dlciwgQXJyYXkuZnJvbShhcmdzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGluZm8oLi4uYXJncyl7XHJcbiAgICAgICAgaWYgKGxldmVsID49IElORk8pe1xyXG4gICAgICAgICAgICBsb2dnZXIuaW5mby5hcHBseShsb2dnZXIsIEFycmF5LmZyb20oYXJncykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyB3YXJuKC4uLmFyZ3Mpe1xyXG4gICAgICAgIGlmIChsZXZlbCA+PSBXQVJOKXtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4uYXBwbHkobG9nZ2VyLCBBcnJheS5mcm9tKGFyZ3MpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZXJyb3IoLi4uYXJncyl7XHJcbiAgICAgICAgaWYgKGxldmVsID49IEVSUk9SKXtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yLmFwcGx5KGxvZ2dlciwgQXJyYXkuZnJvbShhcmdzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5Mb2cucmVzZXQoKTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0xvZy5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgT2lkY0NsaWVudFNldHRpbmdzIH0gZnJvbSAnLi9PaWRjQ2xpZW50U2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBFcnJvclJlc3BvbnNlIH0gZnJvbSAnLi9FcnJvclJlc3BvbnNlJztcclxuaW1wb3J0IHsgU2lnbmluUmVxdWVzdCB9IGZyb20gJy4vU2lnbmluUmVxdWVzdCc7XHJcbmltcG9ydCB7IFNpZ25pblJlc3BvbnNlIH0gZnJvbSAnLi9TaWduaW5SZXNwb25zZSc7XHJcbmltcG9ydCB7IFNpZ25vdXRSZXF1ZXN0IH0gZnJvbSAnLi9TaWdub3V0UmVxdWVzdCc7XHJcbmltcG9ydCB7IFNpZ25vdXRSZXNwb25zZSB9IGZyb20gJy4vU2lnbm91dFJlc3BvbnNlJztcclxuaW1wb3J0IHsgU2lnbmluU3RhdGUgfSBmcm9tICcuL1NpZ25pblN0YXRlJztcclxuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL1N0YXRlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBPaWRjQ2xpZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzID0ge30pIHtcclxuICAgICAgICBpZiAoc2V0dGluZ3MgaW5zdGFuY2VvZiBPaWRjQ2xpZW50U2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldHRpbmdzID0gbmV3IE9pZGNDbGllbnRTZXR0aW5ncyhzZXR0aW5ncyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBfc3RhdGVTdG9yZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5zdGF0ZVN0b3JlO1xyXG4gICAgfVxyXG4gICAgZ2V0IF92YWxpZGF0b3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MudmFsaWRhdG9yO1xyXG4gICAgfVxyXG4gICAgZ2V0IF9tZXRhZGF0YVNlcnZpY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MubWV0YWRhdGFTZXJ2aWNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzZXR0aW5ncygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3M7XHJcbiAgICB9XHJcbiAgICBnZXQgbWV0YWRhdGFTZXJ2aWNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2U7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlU2lnbmluUmVxdWVzdCh7XHJcbiAgICAgICAgcmVzcG9uc2VfdHlwZSwgc2NvcGUsIHJlZGlyZWN0X3VyaSxcclxuICAgICAgICAvLyBkYXRhIHdhcyBtZWFudCB0byBiZSB0aGUgcGxhY2UgYSBjYWxsZXIgY291bGQgaW5kaWNhdGUgdGhlIGRhdGEgdG9cclxuICAgICAgICAvLyBoYXZlIHJvdW5kIHRyaXBwZWQsIGJ1dCBwZW9wbGUgd2VyZSBnZXR0aW5nIGNvbmZ1c2VkLCBzbyBpIGFkZGVkIHN0YXRlIChzaW5jZSB0aGF0IG1hdGNoZXMgdGhlIHNwZWMpXHJcbiAgICAgICAgLy8gYW5kIHNvIG5vdyBpZiBkYXRhIGlzIG5vdCBwYXNzZWQsIGJ1dCBzdGF0ZSBpcyB0aGVuIHN0YXRlIHdpbGwgYmUgdXNlZFxyXG4gICAgICAgIGRhdGEsIHN0YXRlLCBwcm9tcHQsIGRpc3BsYXksIG1heF9hZ2UsIHVpX2xvY2FsZXMsIGlkX3Rva2VuX2hpbnQsIGxvZ2luX2hpbnQsIGFjcl92YWx1ZXMsXHJcbiAgICAgICAgcmVzb3VyY2UsIHJlcXVlc3QsIHJlcXVlc3RfdXJpLCBleHRyYVF1ZXJ5UGFyYW1zIH0gPSB7fSxcclxuICAgICAgICBzdGF0ZVN0b3JlXHJcbiAgICApIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJPaWRjQ2xpZW50LmNyZWF0ZVNpZ25pblJlcXVlc3RcIik7XHJcblxyXG4gICAgICAgIGxldCBjbGllbnRfaWQgPSB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQ7XHJcbiAgICAgICAgcmVzcG9uc2VfdHlwZSA9IHJlc3BvbnNlX3R5cGUgfHwgdGhpcy5fc2V0dGluZ3MucmVzcG9uc2VfdHlwZTtcclxuICAgICAgICBzY29wZSA9IHNjb3BlIHx8IHRoaXMuX3NldHRpbmdzLnNjb3BlO1xyXG4gICAgICAgIHJlZGlyZWN0X3VyaSA9IHJlZGlyZWN0X3VyaSB8fCB0aGlzLl9zZXR0aW5ncy5yZWRpcmVjdF91cmk7XHJcblxyXG4gICAgICAgIC8vIGlkX3Rva2VuX2hpbnQsIGxvZ2luX2hpbnQgYXJlbid0IGFsbG93ZWQgb24gX3NldHRpbmdzXHJcbiAgICAgICAgcHJvbXB0ID0gcHJvbXB0IHx8IHRoaXMuX3NldHRpbmdzLnByb21wdDtcclxuICAgICAgICBkaXNwbGF5ID0gZGlzcGxheSB8fCB0aGlzLl9zZXR0aW5ncy5kaXNwbGF5O1xyXG4gICAgICAgIG1heF9hZ2UgPSBtYXhfYWdlIHx8IHRoaXMuX3NldHRpbmdzLm1heF9hZ2U7XHJcbiAgICAgICAgdWlfbG9jYWxlcyA9IHVpX2xvY2FsZXMgfHwgdGhpcy5fc2V0dGluZ3MudWlfbG9jYWxlcztcclxuICAgICAgICBhY3JfdmFsdWVzID0gYWNyX3ZhbHVlcyB8fCB0aGlzLl9zZXR0aW5ncy5hY3JfdmFsdWVzO1xyXG4gICAgICAgIHJlc291cmNlID0gcmVzb3VyY2UgfHwgdGhpcy5fc2V0dGluZ3MucmVzb3VyY2U7XHJcbiAgICAgICAgZXh0cmFRdWVyeVBhcmFtcyA9IGV4dHJhUXVlcnlQYXJhbXMgfHwgdGhpcy5fc2V0dGluZ3MuZXh0cmFRdWVyeVBhcmFtcztcclxuXHJcbiAgICAgICAgbGV0IGF1dGhvcml0eSA9IHRoaXMuX3NldHRpbmdzLmF1dGhvcml0eTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRBdXRob3JpemF0aW9uRW5kcG9pbnQoKS50aGVuKHVybCA9PiB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQuY3JlYXRlU2lnbmluUmVxdWVzdDogUmVjZWl2ZWQgYXV0aG9yaXphdGlvbiBlbmRwb2ludFwiLCB1cmwpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHNpZ25pblJlcXVlc3QgPSBuZXcgU2lnbmluUmVxdWVzdCh7XHJcbiAgICAgICAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICAgICAgICBjbGllbnRfaWQsXHJcbiAgICAgICAgICAgICAgICByZWRpcmVjdF91cmksXHJcbiAgICAgICAgICAgICAgICByZXNwb25zZV90eXBlLFxyXG4gICAgICAgICAgICAgICAgc2NvcGUsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhIHx8IHN0YXRlLFxyXG4gICAgICAgICAgICAgICAgYXV0aG9yaXR5LFxyXG4gICAgICAgICAgICAgICAgcHJvbXB0LCBkaXNwbGF5LCBtYXhfYWdlLCB1aV9sb2NhbGVzLCBpZF90b2tlbl9oaW50LCBsb2dpbl9oaW50LCBhY3JfdmFsdWVzLFxyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2UsIHJlcXVlc3QsIHJlcXVlc3RfdXJpLCBleHRyYVF1ZXJ5UGFyYW1zLFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzaWduaW5TdGF0ZSA9IHNpZ25pblJlcXVlc3Quc3RhdGU7XHJcbiAgICAgICAgICAgIHN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlIHx8IHRoaXMuX3N0YXRlU3RvcmU7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGVTdG9yZS5zZXQoc2lnbmluU3RhdGUuaWQsIHNpZ25pblN0YXRlLnRvU3RvcmFnZVN0cmluZygpKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzaWduaW5SZXF1ZXN0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm9jZXNzU2lnbmluUmVzcG9uc2UodXJsLCBzdGF0ZVN0b3JlKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5wcm9jZXNzU2lnbmluUmVzcG9uc2VcIik7XHJcblxyXG4gICAgICAgIHZhciByZXNwb25zZSA9IG5ldyBTaWduaW5SZXNwb25zZSh1cmwpO1xyXG5cclxuICAgICAgICBpZiAoIXJlc3BvbnNlLnN0YXRlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25pblJlc3BvbnNlOiBObyBzdGF0ZSBpbiByZXNwb25zZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHN0YXRlIGluIHJlc3BvbnNlXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlIHx8IHRoaXMuX3N0YXRlU3RvcmU7XHJcblxyXG4gICAgICAgIHJldHVybiBzdGF0ZVN0b3JlLnJlbW92ZShyZXNwb25zZS5zdGF0ZSkudGhlbihzdG9yZWRTdGF0ZVN0cmluZyA9PiB7XHJcbiAgICAgICAgICAgIGlmICghc3RvcmVkU3RhdGVTdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25pblJlc3BvbnNlOiBObyBtYXRjaGluZyBzdGF0ZSBmb3VuZCBpbiBzdG9yYWdlXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gbWF0Y2hpbmcgc3RhdGUgZm91bmQgaW4gc3RvcmFnZVwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IHN0YXRlID0gU2lnbmluU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmVkU3RhdGVTdHJpbmcpO1xyXG5cclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5wcm9jZXNzU2lnbmluUmVzcG9uc2U6IFJlY2VpdmVkIHN0YXRlIGZyb20gc3RvcmFnZTsgdmFsaWRhdGluZyByZXNwb25zZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRvci52YWxpZGF0ZVNpZ25pblJlc3BvbnNlKHN0YXRlLCByZXNwb25zZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlU2lnbm91dFJlcXVlc3Qoe2lkX3Rva2VuX2hpbnQsIGRhdGEsIHN0YXRlLCBwb3N0X2xvZ291dF9yZWRpcmVjdF91cml9ID0ge30sXHJcbiAgICAgICAgc3RhdGVTdG9yZVxyXG4gICAgKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5jcmVhdGVTaWdub3V0UmVxdWVzdFwiKTtcclxuXHJcbiAgICAgICAgcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpID0gcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpIHx8IHRoaXMuX3NldHRpbmdzLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRFbmRTZXNzaW9uRW5kcG9pbnQoKS50aGVuKHVybCA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdXJsKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJPaWRjQ2xpZW50LmNyZWF0ZVNpZ25vdXRSZXF1ZXN0OiBObyBlbmQgc2Vzc2lvbiBlbmRwb2ludCB1cmwgcmV0dXJuZWRcIik7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJubyBlbmQgc2Vzc2lvbiBlbmRwb2ludFwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5jcmVhdGVTaWdub3V0UmVxdWVzdDogUmVjZWl2ZWQgZW5kIHNlc3Npb24gZW5kcG9pbnRcIiwgdXJsKTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZXF1ZXN0ID0gbmV3IFNpZ25vdXRSZXF1ZXN0KHtcclxuICAgICAgICAgICAgICAgIHVybCxcclxuICAgICAgICAgICAgICAgIGlkX3Rva2VuX2hpbnQsXHJcbiAgICAgICAgICAgICAgICBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhIHx8IHN0YXRlXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNpZ25vdXRTdGF0ZSA9IHJlcXVlc3Quc3RhdGU7XHJcbiAgICAgICAgICAgIGlmIChzaWdub3V0U3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQuY3JlYXRlU2lnbm91dFJlcXVlc3Q6IFNpZ25vdXQgcmVxdWVzdCBoYXMgc3RhdGUgdG8gcGVyc2lzdFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzdGF0ZVN0b3JlID0gc3RhdGVTdG9yZSB8fCB0aGlzLl9zdGF0ZVN0b3JlO1xyXG4gICAgICAgICAgICAgICAgc3RhdGVTdG9yZS5zZXQoc2lnbm91dFN0YXRlLmlkLCBzaWdub3V0U3RhdGUudG9TdG9yYWdlU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm9jZXNzU2lnbm91dFJlc3BvbnNlKHVybCwgc3RhdGVTdG9yZSkge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25vdXRSZXNwb25zZVwiKTtcclxuXHJcbiAgICAgICAgdmFyIHJlc3BvbnNlID0gbmV3IFNpZ25vdXRSZXNwb25zZSh1cmwpO1xyXG4gICAgICAgIGlmICghcmVzcG9uc2Uuc3RhdGUpIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5wcm9jZXNzU2lnbm91dFJlc3BvbnNlOiBObyBzdGF0ZSBpbiByZXNwb25zZVwiKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgTG9nLndhcm4oXCJPaWRjQ2xpZW50LnByb2Nlc3NTaWdub3V0UmVzcG9uc2U6IFJlc3BvbnNlIHdhcyBlcnJvcjogXCIsIHJlc3BvbnNlLmVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3JSZXNwb25zZShyZXNwb25zZSkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzdGF0ZUtleSA9IHJlc3BvbnNlLnN0YXRlO1xyXG5cclxuICAgICAgICBzdGF0ZVN0b3JlID0gc3RhdGVTdG9yZSB8fCB0aGlzLl9zdGF0ZVN0b3JlO1xyXG5cclxuICAgICAgICByZXR1cm4gc3RhdGVTdG9yZS5yZW1vdmUoc3RhdGVLZXkpLnRoZW4oc3RvcmVkU3RhdGVTdHJpbmcgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXN0b3JlZFN0YXRlU3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJPaWRjQ2xpZW50LnByb2Nlc3NTaWdub3V0UmVzcG9uc2U6IE5vIG1hdGNoaW5nIHN0YXRlIGZvdW5kIGluIHN0b3JhZ2VcIik7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBtYXRjaGluZyBzdGF0ZSBmb3VuZCBpbiBzdG9yYWdlXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgc3RhdGUgPSBTdGF0ZS5mcm9tU3RvcmFnZVN0cmluZyhzdG9yZWRTdGF0ZVN0cmluZyk7XHJcblxyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJPaWRjQ2xpZW50LnByb2Nlc3NTaWdub3V0UmVzcG9uc2U6IFJlY2VpdmVkIHN0YXRlIGZyb20gc3RvcmFnZTsgdmFsaWRhdGluZyByZXNwb25zZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRvci52YWxpZGF0ZVNpZ25vdXRSZXNwb25zZShzdGF0ZSwgcmVzcG9uc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyU3RhbGVTdGF0ZShzdGF0ZVN0b3JlKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5jbGVhclN0YWxlU3RhdGVcIik7XHJcblxyXG4gICAgICAgIHN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlIHx8IHRoaXMuX3N0YXRlU3RvcmU7XHJcblxyXG4gICAgICAgIHJldHVybiBTdGF0ZS5jbGVhclN0YWxlU3RhdGUoc3RhdGVTdG9yZSwgdGhpcy5zZXR0aW5ncy5zdGFsZVN0YXRlQWdlKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvT2lkY0NsaWVudC5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgV2ViU3RvcmFnZVN0YXRlU3RvcmUgfSBmcm9tICcuL1dlYlN0b3JhZ2VTdGF0ZVN0b3JlJztcclxuaW1wb3J0IHsgUmVzcG9uc2VWYWxpZGF0b3IgfSBmcm9tICcuL1Jlc3BvbnNlVmFsaWRhdG9yJztcclxuaW1wb3J0IHsgTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9NZXRhZGF0YVNlcnZpY2UnO1xyXG5cclxuY29uc3QgT2lkY01ldGFkYXRhVXJsUGF0aCA9ICcud2VsbC1rbm93bi9vcGVuaWQtY29uZmlndXJhdGlvbic7XHJcblxyXG5jb25zdCBEZWZhdWx0UmVzcG9uc2VUeXBlID0gXCJpZF90b2tlblwiO1xyXG5jb25zdCBEZWZhdWx0U2NvcGUgPSBcIm9wZW5pZFwiO1xyXG5jb25zdCBEZWZhdWx0U3RhbGVTdGF0ZUFnZSA9IDYwICogMTU7IC8vIHNlY29uZHNcclxuY29uc3QgRGVmYXVsdENsb2NrU2tld0luU2Vjb25kcyA9IDYwICogNTtcclxuXHJcbmV4cG9ydCBjbGFzcyBPaWRjQ2xpZW50U2V0dGluZ3Mge1xyXG4gICAgY29uc3RydWN0b3Ioe1xyXG4gICAgICAgIC8vIG1ldGFkYXRhIHJlbGF0ZWRcclxuICAgICAgICBhdXRob3JpdHksIG1ldGFkYXRhVXJsLCBtZXRhZGF0YSwgc2lnbmluZ0tleXMsXHJcbiAgICAgICAgLy8gY2xpZW50IHJlbGF0ZWRcclxuICAgICAgICBjbGllbnRfaWQsIGNsaWVudF9zZWNyZXQsIHJlc3BvbnNlX3R5cGUgPSBEZWZhdWx0UmVzcG9uc2VUeXBlLCBzY29wZSA9IERlZmF1bHRTY29wZSxcclxuICAgICAgICByZWRpcmVjdF91cmksIHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSxcclxuICAgICAgICAvLyBvcHRpb25hbCBwcm90b2NvbFxyXG4gICAgICAgIHByb21wdCwgZGlzcGxheSwgbWF4X2FnZSwgdWlfbG9jYWxlcywgYWNyX3ZhbHVlcywgcmVzb3VyY2UsXHJcbiAgICAgICAgLy8gYmVoYXZpb3IgZmxhZ3NcclxuICAgICAgICBmaWx0ZXJQcm90b2NvbENsYWltcyA9IHRydWUsIGxvYWRVc2VySW5mbyA9IHRydWUsXHJcbiAgICAgICAgc3RhbGVTdGF0ZUFnZSA9IERlZmF1bHRTdGFsZVN0YXRlQWdlLCBjbG9ja1NrZXcgPSBEZWZhdWx0Q2xvY2tTa2V3SW5TZWNvbmRzLFxyXG4gICAgICAgIC8vIG90aGVyIGJlaGF2aW9yXHJcbiAgICAgICAgc3RhdGVTdG9yZSA9IG5ldyBXZWJTdG9yYWdlU3RhdGVTdG9yZSgpLFxyXG4gICAgICAgIFJlc3BvbnNlVmFsaWRhdG9yQ3RvciA9IFJlc3BvbnNlVmFsaWRhdG9yLFxyXG4gICAgICAgIE1ldGFkYXRhU2VydmljZUN0b3IgPSBNZXRhZGF0YVNlcnZpY2UsXHJcbiAgICAgICAgLy8gZXh0cmEgcXVlcnkgcGFyYW1zXHJcbiAgICAgICAgZXh0cmFRdWVyeVBhcmFtcyA9IHt9XHJcbiAgICB9ID0ge30pIHtcclxuXHJcbiAgICAgICAgdGhpcy5fYXV0aG9yaXR5ID0gYXV0aG9yaXR5O1xyXG4gICAgICAgIHRoaXMuX21ldGFkYXRhVXJsID0gbWV0YWRhdGFVcmw7XHJcbiAgICAgICAgdGhpcy5fbWV0YWRhdGEgPSBtZXRhZGF0YTtcclxuICAgICAgICB0aGlzLl9zaWduaW5nS2V5cyA9IHNpZ25pbmdLZXlzO1xyXG5cclxuICAgICAgICB0aGlzLl9jbGllbnRfaWQgPSBjbGllbnRfaWQ7XHJcbiAgICAgICAgdGhpcy5fY2xpZW50X3NlY3JldCA9IGNsaWVudF9zZWNyZXQ7XHJcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VfdHlwZSA9IHJlc3BvbnNlX3R5cGU7XHJcbiAgICAgICAgdGhpcy5fc2NvcGUgPSBzY29wZTtcclxuICAgICAgICB0aGlzLl9yZWRpcmVjdF91cmkgPSByZWRpcmVjdF91cmk7XHJcbiAgICAgICAgdGhpcy5fcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpID0gcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO1xyXG5cclxuICAgICAgICB0aGlzLl9wcm9tcHQgPSBwcm9tcHQ7XHJcbiAgICAgICAgdGhpcy5fZGlzcGxheSA9IGRpc3BsYXk7XHJcbiAgICAgICAgdGhpcy5fbWF4X2FnZSA9IG1heF9hZ2U7XHJcbiAgICAgICAgdGhpcy5fdWlfbG9jYWxlcyA9IHVpX2xvY2FsZXM7XHJcbiAgICAgICAgdGhpcy5fYWNyX3ZhbHVlcyA9IGFjcl92YWx1ZXM7XHJcbiAgICAgICAgdGhpcy5fcmVzb3VyY2UgPSByZXNvdXJjZTtcclxuXHJcbiAgICAgICAgdGhpcy5fZmlsdGVyUHJvdG9jb2xDbGFpbXMgPSAhIWZpbHRlclByb3RvY29sQ2xhaW1zO1xyXG4gICAgICAgIHRoaXMuX2xvYWRVc2VySW5mbyA9ICEhbG9hZFVzZXJJbmZvO1xyXG4gICAgICAgIHRoaXMuX3N0YWxlU3RhdGVBZ2UgPSBzdGFsZVN0YXRlQWdlO1xyXG4gICAgICAgIHRoaXMuX2Nsb2NrU2tldyA9IGNsb2NrU2tldztcclxuXHJcbiAgICAgICAgdGhpcy5fc3RhdGVTdG9yZSA9IHN0YXRlU3RvcmU7XHJcbiAgICAgICAgdGhpcy5fdmFsaWRhdG9yID0gbmV3IFJlc3BvbnNlVmFsaWRhdG9yQ3Rvcih0aGlzKTtcclxuICAgICAgICB0aGlzLl9tZXRhZGF0YVNlcnZpY2UgPSBuZXcgTWV0YWRhdGFTZXJ2aWNlQ3Rvcih0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZXh0cmFRdWVyeVBhcmFtcyA9IHR5cGVvZiBleHRyYVF1ZXJ5UGFyYW1zID09PSAnb2JqZWN0JyA/IGV4dHJhUXVlcnlQYXJhbXMgOiB7fTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjbGllbnQgY29uZmlnXHJcbiAgICBnZXQgY2xpZW50X2lkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRfaWQ7XHJcbiAgICB9XHJcbiAgICBzZXQgY2xpZW50X2lkKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9jbGllbnRfaWQpIHtcclxuICAgICAgICAgICAgLy8gb25lLXRpbWUgc2V0IG9ubHlcclxuICAgICAgICAgICAgdGhpcy5fY2xpZW50X2lkID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJPaWRjQ2xpZW50U2V0dGluZ3Muc2V0X2NsaWVudF9pZDogY2xpZW50X2lkIGhhcyBhbHJlYWR5IGJlZW4gYXNzaWduZWQuXCIpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNsaWVudF9pZCBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLlwiKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBjbGllbnRfc2VjcmV0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRfc2VjcmV0O1xyXG4gICAgfVxyXG4gICAgZ2V0IHJlc3BvbnNlX3R5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlX3R5cGU7XHJcbiAgICB9XHJcbiAgICBnZXQgc2NvcGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Njb3BlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHJlZGlyZWN0X3VyaSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVkaXJlY3RfdXJpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBvcHRpb25hbCBwcm90b2NvbCBwYXJhbXNcclxuICAgIGdldCBwcm9tcHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb21wdDtcclxuICAgIH1cclxuICAgIGdldCBkaXNwbGF5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwbGF5O1xyXG4gICAgfVxyXG4gICAgZ2V0IG1heF9hZ2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heF9hZ2U7XHJcbiAgICB9XHJcbiAgICBnZXQgdWlfbG9jYWxlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdWlfbG9jYWxlcztcclxuICAgIH1cclxuICAgIGdldCBhY3JfdmFsdWVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hY3JfdmFsdWVzO1xyXG4gICAgfVxyXG4gICAgZ2V0IHJlc291cmNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvdXJjZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gbWV0YWRhdGFcclxuICAgIGdldCBhdXRob3JpdHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dGhvcml0eTtcclxuICAgIH1cclxuICAgIHNldCBhdXRob3JpdHkodmFsdWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2F1dGhvcml0eSkge1xyXG4gICAgICAgICAgICAvLyBvbmUtdGltZSBzZXQgb25seVxyXG4gICAgICAgICAgICB0aGlzLl9hdXRob3JpdHkgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnRTZXR0aW5ncy5zZXRfYXV0aG9yaXR5OiBhdXRob3JpdHkgaGFzIGFscmVhZHkgYmVlbiBhc3NpZ25lZC5cIilcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXV0aG9yaXR5IGhhcyBhbHJlYWR5IGJlZW4gYXNzaWduZWQuXCIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IG1ldGFkYXRhVXJsKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fbWV0YWRhdGFVcmwpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFVcmwgPSB0aGlzLmF1dGhvcml0eTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9tZXRhZGF0YVVybCAmJiB0aGlzLl9tZXRhZGF0YVVybC5pbmRleE9mKE9pZGNNZXRhZGF0YVVybFBhdGgpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21ldGFkYXRhVXJsW3RoaXMuX21ldGFkYXRhVXJsLmxlbmd0aCAtIDFdICE9PSAnLycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCArPSAnLyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCArPSBPaWRjTWV0YWRhdGFVcmxQYXRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFVcmw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc2V0dGFibGUvY2FjaGFibGUgbWV0YWRhdGEgdmFsdWVzXHJcbiAgICBnZXQgbWV0YWRhdGEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhO1xyXG4gICAgfVxyXG4gICAgc2V0IG1ldGFkYXRhKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fbWV0YWRhdGEgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2lnbmluZ0tleXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pbmdLZXlzO1xyXG4gICAgfVxyXG4gICAgc2V0IHNpZ25pbmdLZXlzKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fc2lnbmluZ0tleXMgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBiZWhhdmlvciBmbGFnc1xyXG4gICAgZ2V0IGZpbHRlclByb3RvY29sQ2xhaW1zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJQcm90b2NvbENsYWltcztcclxuICAgIH1cclxuICAgIGdldCBsb2FkVXNlckluZm8oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRVc2VySW5mbztcclxuICAgIH1cclxuICAgIGdldCBzdGFsZVN0YXRlQWdlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFsZVN0YXRlQWdlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNsb2NrU2tldygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xvY2tTa2V3O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzdGF0ZVN0b3JlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZVN0b3JlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHZhbGlkYXRvcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdG9yO1xyXG4gICAgfVxyXG4gICAgZ2V0IG1ldGFkYXRhU2VydmljZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGV4dHJhIHF1ZXJ5IHBhcmFtc1xyXG4gICAgZ2V0IGV4dHJhUXVlcnlQYXJhbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4dHJhUXVlcnlQYXJhbXM7XHJcbiAgICB9XHJcbiAgICBzZXQgZXh0cmFRdWVyeVBhcmFtcyh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKXtcclxuICAgICAgICAgICAgdGhpcy5fZXh0cmFRdWVyeVBhcmFtcyA9IHZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2V4dHJhUXVlcnlQYXJhbXMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL09pZGNDbGllbnRTZXR0aW5ncy5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9HbG9iYWwnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFdlYlN0b3JhZ2VTdGF0ZVN0b3JlIHtcclxuICAgIGNvbnN0cnVjdG9yKHtwcmVmaXggPSBcIm9pZGMuXCIsIHN0b3JlID0gR2xvYmFsLmxvY2FsU3RvcmFnZX0gPSB7fSkge1xyXG4gICAgICAgIHRoaXMuX3N0b3JlID0gc3RvcmU7XHJcbiAgICAgICAgdGhpcy5fcHJlZml4ID0gcHJlZml4O1xyXG4gICAgfVxyXG5cclxuICAgIHNldChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUuc2V0XCIsIGtleSk7XHJcblxyXG4gICAgICAgIGtleSA9IHRoaXMuX3ByZWZpeCArIGtleTtcclxuXHJcbiAgICAgICAgdGhpcy5fc3RvcmUuc2V0SXRlbShrZXksIHZhbHVlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldChrZXkpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJXZWJTdG9yYWdlU3RhdGVTdG9yZS5nZXRcIiwga2V5KTtcclxuXHJcbiAgICAgICAga2V5ID0gdGhpcy5fcHJlZml4ICsga2V5O1xyXG5cclxuICAgICAgICBsZXQgaXRlbSA9IHRoaXMuX3N0b3JlLmdldEl0ZW0oa2V5KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShpdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmUoa2V5KSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUucmVtb3ZlXCIsIGtleSk7XHJcblxyXG4gICAgICAgIGtleSA9IHRoaXMuX3ByZWZpeCArIGtleTtcclxuXHJcbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLl9zdG9yZS5nZXRJdGVtKGtleSk7XHJcbiAgICAgICAgdGhpcy5fc3RvcmUucmVtb3ZlSXRlbShrZXkpO1xyXG5cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFsbEtleXMoKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUuZ2V0QWxsS2V5c1wiKTtcclxuXHJcbiAgICAgICAgdmFyIGtleXMgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX3N0b3JlLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICBsZXQga2V5ID0gdGhpcy5fc3RvcmUua2V5KGluZGV4KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZih0aGlzLl9wcmVmaXgpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5LnN1YnN0cih0aGlzLl9wcmVmaXgubGVuZ3RoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoa2V5cyk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1dlYlN0b3JhZ2VTdGF0ZVN0b3JlLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuY29uc3QgdGltZXIgPSB7XHJcbiAgICBzZXRJbnRlcnZhbDogZnVuY3Rpb24gKGNiLCBkdXJhdGlvbikge1xyXG4gICAgICAgIHJldHVybiBzZXRJbnRlcnZhbChjYiwgZHVyYXRpb24pO1xyXG4gICAgfSxcclxuICAgIGNsZWFySW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGUpIHtcclxuICAgICAgICByZXR1cm4gY2xlYXJJbnRlcnZhbChoYW5kbGUpO1xyXG4gICAgfVxyXG59O1xyXG5cclxubGV0IHRlc3RpbmcgPSBmYWxzZTtcclxubGV0IHJlcXVlc3QgPSBudWxsO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdsb2JhbCB7XHJcblxyXG4gICAgc3RhdGljIF90ZXN0aW5nKCkge1xyXG4gICAgICAgIHRlc3RpbmcgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXQgbG9jYXRpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0ZXN0aW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldCBsb2NhbFN0b3JhZ2UoKSB7XHJcbiAgICAgICAgaWYgKCF0ZXN0aW5nICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXQgc2Vzc2lvblN0b3JhZ2UoKSB7XHJcbiAgICAgICAgaWYgKCF0ZXN0aW5nICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHNldFhNTEh0dHBSZXF1ZXN0KG5ld1JlcXVlc3QpIHtcclxuICAgICAgICByZXF1ZXN0ID0gbmV3UmVxdWVzdDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0IFhNTEh0dHBSZXF1ZXN0KCkge1xyXG4gICAgICAgIGlmICghdGVzdGluZyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdCB8fCBYTUxIdHRwUmVxdWVzdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldCB0aW1lcigpIHtcclxuICAgICAgICBpZiAoIXRlc3RpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRpbWVyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvR2xvYmFsLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgeyBNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICcuL01ldGFkYXRhU2VydmljZSc7XHJcbmltcG9ydCB7IFVzZXJJbmZvU2VydmljZSB9IGZyb20gJy4vVXNlckluZm9TZXJ2aWNlJztcclxuaW1wb3J0IHsgRXJyb3JSZXNwb25zZSB9IGZyb20gJy4vRXJyb3JSZXNwb25zZSc7XHJcbmltcG9ydCB7IEpvc2VVdGlsIH0gZnJvbSAnLi9Kb3NlVXRpbCc7XHJcblxyXG5jb25zdCBQcm90b2NvbENsYWltcyA9IFtcIm5vbmNlXCIsIFwiYXRfaGFzaFwiLCBcImlhdFwiLCBcIm5iZlwiLCBcImV4cFwiLCBcImF1ZFwiLCBcImlzc1wiLCBcImNfaGFzaFwiXTtcclxuXHJcbmV4cG9ydCBjbGFzcyBSZXNwb25zZVZhbGlkYXRvciB7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIE1ldGFkYXRhU2VydmljZUN0b3IgPSBNZXRhZGF0YVNlcnZpY2UsIFVzZXJJbmZvU2VydmljZUN0b3IgPSBVc2VySW5mb1NlcnZpY2UsIGpvc2VVdGlsID0gSm9zZVV0aWwpIHtcclxuICAgICAgICBpZiAoIXNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLmN0b3I6IE5vIHNldHRpbmdzIHBhc3NlZCB0byBSZXNwb25zZVZhbGlkYXRvclwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2V0dGluZ3NcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuX21ldGFkYXRhU2VydmljZSA9IG5ldyBNZXRhZGF0YVNlcnZpY2VDdG9yKHRoaXMuX3NldHRpbmdzKTtcclxuICAgICAgICB0aGlzLl91c2VySW5mb1NlcnZpY2UgPSBuZXcgVXNlckluZm9TZXJ2aWNlQ3Rvcih0aGlzLl9zZXR0aW5ncyk7XHJcbiAgICAgICAgdGhpcy5fam9zZVV0aWwgPSBqb3NlVXRpbDtcclxuICAgIH1cclxuXHJcbiAgICB2YWxpZGF0ZVNpZ25pblJlc3BvbnNlKHN0YXRlLCByZXNwb25zZSkge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2VcIik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9jZXNzU2lnbmluUGFyYW1zKHN0YXRlLCByZXNwb25zZSkudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2U6IHN0YXRlIHByb2Nlc3NlZFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlVG9rZW5zKHN0YXRlLCByZXNwb25zZSkudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci52YWxpZGF0ZVNpZ25pblJlc3BvbnNlOiB0b2tlbnMgdmFsaWRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3NDbGFpbXMocmVzcG9uc2UpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2U6IGNsYWltcyBwcm9jZXNzZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRlU2lnbm91dFJlc3BvbnNlKHN0YXRlLCByZXNwb25zZSkge1xyXG4gICAgICAgIGlmIChzdGF0ZS5pZCAhPT0gcmVzcG9uc2Uuc3RhdGUpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IudmFsaWRhdGVTaWdub3V0UmVzcG9uc2U6IFN0YXRlIGRvZXMgbm90IG1hdGNoXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiU3RhdGUgZG9lcyBub3QgbWF0Y2hcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbm93IHRoYXQgd2Uga25vdyB0aGUgc3RhdGUgbWF0Y2hlcywgdGFrZSB0aGUgc3RvcmVkIGRhdGFcclxuICAgICAgICAvLyBhbmQgc2V0IGl0IGludG8gdGhlIHJlc3BvbnNlIHNvIGNhbGxlcnMgY2FuIGdldCB0aGVpciBzdGF0ZVxyXG4gICAgICAgIC8vIHRoaXMgaXMgaW1wb3J0YW50IGZvciBib3RoIHN1Y2Nlc3MgJiBlcnJvciBvdXRjb21lc1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbm91dFJlc3BvbnNlOiBzdGF0ZSB2YWxpZGF0ZWRcIik7XHJcbiAgICAgICAgcmVzcG9uc2Uuc3RhdGUgPSBzdGF0ZS5kYXRhO1xyXG5cclxuICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcclxuICAgICAgICAgICAgTG9nLndhcm4oXCJSZXNwb25zZVZhbGlkYXRvci52YWxpZGF0ZVNpZ25vdXRSZXNwb25zZTogUmVzcG9uc2Ugd2FzIGVycm9yXCIsIHJlc3BvbnNlLmVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvclJlc3BvbnNlKHJlc3BvbnNlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBfcHJvY2Vzc1NpZ25pblBhcmFtcyhzdGF0ZSwgcmVzcG9uc2UpIHtcclxuICAgICAgICBpZiAoc3RhdGUuaWQgIT09IHJlc3BvbnNlLnN0YXRlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBTdGF0ZSBkb2VzIG5vdCBtYXRjaFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlN0YXRlIGRvZXMgbm90IG1hdGNoXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghc3RhdGUuY2xpZW50X2lkKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBObyBjbGllbnRfaWQgb24gc3RhdGVcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBjbGllbnRfaWQgb24gc3RhdGVcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFzdGF0ZS5hdXRob3JpdHkpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NTaWduaW5QYXJhbXM6IE5vIGF1dGhvcml0eSBvbiBzdGF0ZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGF1dGhvcml0eSBvbiBzdGF0ZVwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0aGlzIGFsbG93cyB0aGUgYXV0aG9yaXR5IHRvIGJlIGxvYWRlZCBmcm9tIHRoZSBzaWduaW4gc3RhdGVcclxuICAgICAgICBpZiAoIXRoaXMuX3NldHRpbmdzLmF1dGhvcml0eSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXR0aW5ncy5hdXRob3JpdHkgPSBzdGF0ZS5hdXRob3JpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGVuc3VyZSB3ZSdyZSB1c2luZyB0aGUgY29ycmVjdCBhdXRob3JpdHkgaWYgdGhlIGF1dGhvcml0eSBpcyBub3QgbG9hZGVkIGZyb20gc2lnbmluIHN0YXRlXHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc2V0dGluZ3MuYXV0aG9yaXR5ICYmIHRoaXMuX3NldHRpbmdzLmF1dGhvcml0eSAhPT0gc3RhdGUuYXV0aG9yaXR5KSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBhdXRob3JpdHkgbWlzbWF0Y2ggb24gc2V0dGluZ3MgdnMuIHNpZ25pbiBzdGF0ZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImF1dGhvcml0eSBtaXNtYXRjaCBvbiBzZXR0aW5ncyB2cy4gc2lnbmluIHN0YXRlXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdGhpcyBhbGxvd3MgdGhlIGNsaWVudF9pZCB0byBiZSBsb2FkZWQgZnJvbSB0aGUgc2lnbmluIHN0YXRlXHJcbiAgICAgICAgaWYgKCF0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkID0gc3RhdGUuY2xpZW50X2lkO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBlbnN1cmUgd2UncmUgdXNpbmcgdGhlIGNvcnJlY3QgY2xpZW50X2lkIGlmIHRoZSBjbGllbnRfaWQgaXMgbm90IGxvYWRlZCBmcm9tIHNpZ25pbiBzdGF0ZVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZCAmJiB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQgIT09IHN0YXRlLmNsaWVudF9pZCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogY2xpZW50X2lkIG1pc21hdGNoIG9uIHNldHRpbmdzIHZzLiBzaWduaW4gc3RhdGVcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJjbGllbnRfaWQgbWlzbWF0Y2ggb24gc2V0dGluZ3MgdnMuIHNpZ25pbiBzdGF0ZVwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBub3cgdGhhdCB3ZSBrbm93IHRoZSBzdGF0ZSBtYXRjaGVzLCB0YWtlIHRoZSBzdG9yZWQgZGF0YVxyXG4gICAgICAgIC8vIGFuZCBzZXQgaXQgaW50byB0aGUgcmVzcG9uc2Ugc28gY2FsbGVycyBjYW4gZ2V0IHRoZWlyIHN0YXRlXHJcbiAgICAgICAgLy8gdGhpcyBpcyBpbXBvcnRhbnQgZm9yIGJvdGggc3VjY2VzcyAmIGVycm9yIG91dGNvbWVzXHJcbiAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NTaWduaW5QYXJhbXM6IHN0YXRlIHZhbGlkYXRlZFwiKTtcclxuICAgICAgICByZXNwb25zZS5zdGF0ZSA9IHN0YXRlLmRhdGE7XHJcblxyXG4gICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xyXG4gICAgICAgICAgICBMb2cud2FybihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBSZXNwb25zZSB3YXMgZXJyb3JcIiwgcmVzcG9uc2UuZXJyb3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yUmVzcG9uc2UocmVzcG9uc2UpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzdGF0ZS5ub25jZSAmJiAhcmVzcG9uc2UuaWRfdG9rZW4pIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NTaWduaW5QYXJhbXM6IEV4cGVjdGluZyBpZF90b2tlbiBpbiByZXNwb25zZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGlkX3Rva2VuIGluIHJlc3BvbnNlXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghc3RhdGUubm9uY2UgJiYgcmVzcG9uc2UuaWRfdG9rZW4pIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NTaWduaW5QYXJhbXM6IE5vdCBleHBlY3RpbmcgaWRfdG9rZW4gaW4gcmVzcG9uc2VcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGlkX3Rva2VuIGluIHJlc3BvbnNlXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIF9wcm9jZXNzQ2xhaW1zKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLmlzT3BlbklkQ29ubmVjdCkge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc0NsYWltczogcmVzcG9uc2UgaXMgT0lEQywgcHJvY2Vzc2luZyBjbGFpbXNcIik7XHJcblxyXG4gICAgICAgICAgICByZXNwb25zZS5wcm9maWxlID0gdGhpcy5fZmlsdGVyUHJvdG9jb2xDbGFpbXMocmVzcG9uc2UucHJvZmlsZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MubG9hZFVzZXJJbmZvICYmIHJlc3BvbnNlLmFjY2Vzc190b2tlbikge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDbGFpbXM6IGxvYWRpbmcgdXNlciBpbmZvXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl91c2VySW5mb1NlcnZpY2UuZ2V0Q2xhaW1zKHJlc3BvbnNlLmFjY2Vzc190b2tlbikudGhlbihjbGFpbXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiB1c2VyIGluZm8gY2xhaW1zIHJlY2VpdmVkIGZyb20gdXNlciBpbmZvIGVuZHBvaW50XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhaW1zLnN1YiAhPT0gcmVzcG9uc2UucHJvZmlsZS5zdWIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDbGFpbXM6IHN1YiBmcm9tIHVzZXIgaW5mbyBlbmRwb2ludCBkb2VzIG5vdCBtYXRjaCBzdWIgaW4gYWNjZXNzX3Rva2VuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwic3ViIGZyb20gdXNlciBpbmZvIGVuZHBvaW50IGRvZXMgbm90IG1hdGNoIHN1YiBpbiBhY2Nlc3NfdG9rZW5cIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucHJvZmlsZSA9IHRoaXMuX21lcmdlQ2xhaW1zKHJlc3BvbnNlLnByb2ZpbGUsIGNsYWltcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDbGFpbXM6IHVzZXIgaW5mbyBjbGFpbXMgcmVjZWl2ZWQsIHVwZGF0ZWQgcHJvZmlsZTpcIiwgcmVzcG9uc2UucHJvZmlsZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDbGFpbXM6IG5vdCBsb2FkaW5nIHVzZXIgaW5mb1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDbGFpbXM6IHJlc3BvbnNlIGlzIG5vdCBPSURDLCBub3QgcHJvY2Vzc2luZyBjbGFpbXNcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBfbWVyZ2VDbGFpbXMoY2xhaW1zMSwgY2xhaW1zMikge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBjbGFpbXMxKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgbmFtZSBpbiBjbGFpbXMyKSB7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBjbGFpbXMyW25hbWVdO1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWVzID0gW3ZhbHVlc107XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB2YWx1ZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdFtuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHRbbmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdFtuYW1lXS5pbmRleE9mKHZhbHVlKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W25hbWVdLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdFtuYW1lXSAhPT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbbmFtZV0gPSBbcmVzdWx0W25hbWVdLCB2YWx1ZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgX2ZpbHRlclByb3RvY29sQ2xhaW1zKGNsYWltcykge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9maWx0ZXJQcm90b2NvbENsYWltcywgaW5jb21pbmcgY2xhaW1zOlwiLCBjbGFpbXMpO1xyXG5cclxuICAgICAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbih7fSwgY2xhaW1zKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLl9maWx0ZXJQcm90b2NvbENsYWltcykge1xyXG4gICAgICAgICAgICBQcm90b2NvbENsYWltcy5mb3JFYWNoKHR5cGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdFt0eXBlXTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fZmlsdGVyUHJvdG9jb2xDbGFpbXM6IHByb3RvY29sIGNsYWltcyBmaWx0ZXJlZFwiLCByZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX2ZpbHRlclByb3RvY29sQ2xhaW1zOiBwcm90b2NvbCBjbGFpbXMgbm90IGZpbHRlcmVkXCIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIF92YWxpZGF0ZVRva2VucyhzdGF0ZSwgcmVzcG9uc2UpIHtcclxuICAgICAgICBpZiAocmVzcG9uc2UuaWRfdG9rZW4pIHtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmFjY2Vzc190b2tlbikge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlVG9rZW5zOiBWYWxpZGF0aW5nIGlkX3Rva2VuIGFuZCBhY2Nlc3NfdG9rZW5cIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW4oc3RhdGUsIHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlVG9rZW5zOiBWYWxpZGF0aW5nIGlkX3Rva2VuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGVJZFRva2VuKHN0YXRlLCByZXNwb25zZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVUb2tlbnM6IE5vIGlkX3Rva2VuIHRvIHZhbGlkYXRlXCIpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIF92YWxpZGF0ZUlkVG9rZW5BbmRBY2Nlc3NUb2tlbihzdGF0ZSwgcmVzcG9uc2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGVJZFRva2VuKHN0YXRlLCByZXNwb25zZSkudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0ZUFjY2Vzc1Rva2VuKHJlc3BvbnNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBfdmFsaWRhdGVJZFRva2VuKHN0YXRlLCByZXNwb25zZSkge1xyXG4gICAgICAgIGlmICghc3RhdGUubm9uY2UpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbjogTm8gbm9uY2Ugb24gc3RhdGVcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBub25jZSBvbiBzdGF0ZVwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgand0ID0gdGhpcy5fam9zZVV0aWwucGFyc2VKd3QocmVzcG9uc2UuaWRfdG9rZW4pO1xyXG4gICAgICAgIGlmICghand0IHx8ICFqd3QuaGVhZGVyIHx8ICFqd3QucGF5bG9hZCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIiwgand0KTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBpZF90b2tlblwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3RhdGUubm9uY2UgIT09IGp3dC5wYXlsb2FkLm5vbmNlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IEludmFsaWQgbm9uY2UgaW4gaWRfdG9rZW5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIG5vbmNlIGluIGlkX3Rva2VuXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBraWQgPSBqd3QuaGVhZGVyLmtpZDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRJc3N1ZXIoKS50aGVuKGlzc3VlciA9PiB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IFJlY2VpdmVkIGlzc3VlclwiKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0U2lnbmluZ0tleXMoKS50aGVuKGtleXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFrZXlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbjogTm8gc2lnbmluZyBrZXlzIGZyb20gbWV0YWRhdGFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHNpZ25pbmcga2V5cyBmcm9tIG1ldGFkYXRhXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBSZWNlaXZlZCBzaWduaW5nIGtleXNcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQga2V5O1xyXG4gICAgICAgICAgICAgICAgaWYgKCFraWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXlzID0gdGhpcy5fZmlsdGVyQnlBbGcoa2V5cywgand0LmhlYWRlci5hbGcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IE5vIGtpZCBmb3VuZCBpbiBpZF90b2tlbiBhbmQgbW9yZSB0aGFuIG9uZSBrZXkgZm91bmQgaW4gbWV0YWRhdGFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBraWQgZm91bmQgaW4gaWRfdG9rZW4gYW5kIG1vcmUgdGhhbiBvbmUga2V5IGZvdW5kIGluIG1ldGFkYXRhXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpZCBpcyBtYW5kYXRvcnkgb25seSB3aGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBrZXlzIGluIHRoZSByZWZlcmVuY2VkIEpXSyBTZXQgZG9jdW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VlIGh0dHA6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjU2lnbmluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBrZXlzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGtleXMuZmlsdGVyKGtleSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXkua2lkID09PSBraWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlbMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBObyBrZXkgbWF0Y2hpbmcga2lkIG9yIGFsZyBmb3VuZCBpbiBzaWduaW5nIGtleXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGtleSBtYXRjaGluZyBraWQgb3IgYWxnIGZvdW5kIGluIHNpZ25pbmcga2V5c1wiKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGF1ZGllbmNlID0gc3RhdGUuY2xpZW50X2lkO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjbG9ja1NrZXdJblNlY29uZHMgPSB0aGlzLl9zZXR0aW5ncy5jbG9ja1NrZXc7XHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBWYWxpZGFpbmcgSldUOyB1c2luZyBjbG9jayBza2V3IChpbiBzZWNvbmRzKSBvZjogXCIsIGNsb2NrU2tld0luU2Vjb25kcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pvc2VVdGlsLnZhbGlkYXRlSnd0KHJlc3BvbnNlLmlkX3Rva2VuLCBrZXksIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tld0luU2Vjb25kcykudGhlbigoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IEpXVCB2YWxpZGF0aW9uIHN1Y2Nlc3NmdWxcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghand0LnBheWxvYWQuc3ViKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IE5vIHN1YiBwcmVzZW50IGluIGlkX3Rva2VuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gc3ViIHByZXNlbnQgaW4gaWRfdG9rZW5cIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucHJvZmlsZSA9IGp3dC5wYXlsb2FkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2ZpbHRlckJ5QWxnKGtleXMsIGFsZyl7XHJcbiAgICAgICAgdmFyIGt0eSA9IG51bGw7XHJcbiAgICAgICAgaWYgKGFsZy5zdGFydHNXaXRoKFwiUlNcIikpIHtcclxuICAgICAgICAgICAga3R5ID0gXCJSU0FcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYWxnLnN0YXJ0c1dpdGgoXCJQU1wiKSkge1xyXG4gICAgICAgICAgICBrdHkgPSBcIlBTXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFsZy5zdGFydHNXaXRoKFwiRVNcIikpIHtcclxuICAgICAgICAgICAga3R5ID0gXCJFQ1wiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX2ZpbHRlckJ5QWxnOiBhbGcgbm90IHN1cHBvcnRlZDogXCIsIGFsZyk7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9maWx0ZXJCeUFsZzogTG9va2luZyBmb3Iga2V5cyB0aGF0IG1hdGNoIGt0eTogXCIsIGt0eSk7XHJcblxyXG4gICAgICAgIGtleXMgPSBrZXlzLmZpbHRlcihrZXkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4ga2V5Lmt0eSA9PT0ga3R5O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fZmlsdGVyQnlBbGc6IE51bWJlciBvZiBrZXlzIHRoYXQgbWF0Y2gga3R5OiBcIiwga3R5LCBrZXlzLmxlbmd0aCk7XHJcblxyXG4gICAgICAgIHJldHVybiBrZXlzO1xyXG4gICAgfVxyXG5cclxuICAgIF92YWxpZGF0ZUFjY2Vzc1Rva2VuKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgaWYgKCFyZXNwb25zZS5wcm9maWxlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBObyBwcm9maWxlIGxvYWRlZCBmcm9tIGlkX3Rva2VuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gcHJvZmlsZSBsb2FkZWQgZnJvbSBpZF90b2tlblwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXJlc3BvbnNlLnByb2ZpbGUuYXRfaGFzaCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogTm8gYXRfaGFzaCBpbiBpZF90b2tlblwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGF0X2hhc2ggaW4gaWRfdG9rZW5cIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFyZXNwb25zZS5pZF90b2tlbikge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogTm8gaWRfdG9rZW5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBpZF90b2tlblwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgand0ID0gdGhpcy5fam9zZVV0aWwucGFyc2VKd3QocmVzcG9uc2UuaWRfdG9rZW4pO1xyXG4gICAgICAgIGlmICghand0IHx8ICFqd3QuaGVhZGVyKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIiwgand0KTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBpZF90b2tlblwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaGFzaEFsZyA9IGp3dC5oZWFkZXIuYWxnO1xyXG4gICAgICAgIGlmICghaGFzaEFsZyB8fCBoYXNoQWxnLmxlbmd0aCAhPT0gNSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogVW5zdXBwb3J0ZWQgYWxnOlwiLCBoYXNoQWxnKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGFsZzogXCIgKyBoYXNoQWxnKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaGFzaEJpdHMgPSBoYXNoQWxnLnN1YnN0cigyLCAzKTtcclxuICAgICAgICBpZiAoIWhhc2hCaXRzKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBVbnN1cHBvcnRlZCBhbGc6XCIsIGhhc2hBbGcsIGhhc2hCaXRzKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGFsZzogXCIgKyBoYXNoQWxnKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBoYXNoQml0cyA9IHBhcnNlSW50KGhhc2hCaXRzKTtcclxuICAgICAgICBpZiAoaGFzaEJpdHMgIT09IDI1NiAmJiBoYXNoQml0cyAhPT0gMzg0ICYmIGhhc2hCaXRzICE9PSA1MTIpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IFVuc3VwcG9ydGVkIGFsZzpcIiwgaGFzaEFsZywgaGFzaEJpdHMpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgYWxnOiBcIiArIGhhc2hBbGcpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzaGEgPSBcInNoYVwiICsgaGFzaEJpdHM7XHJcbiAgICAgICAgdmFyIGhhc2ggPSB0aGlzLl9qb3NlVXRpbC5oYXNoU3RyaW5nKHJlc3BvbnNlLmFjY2Vzc190b2tlbiwgc2hhKTtcclxuICAgICAgICBpZiAoIWhhc2gpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IGFjY2Vzc190b2tlbiBoYXNoIGZhaWxlZDpcIiwgc2hhKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byB2YWxpZGF0ZSBhdF9oYXNoXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBsZWZ0ID0gaGFzaC5zdWJzdHIoMCwgaGFzaC5sZW5ndGggLyAyKTtcclxuICAgICAgICB2YXIgbGVmdF9iNjR1ID0gdGhpcy5fam9zZVV0aWwuaGV4VG9CYXNlNjRVcmwobGVmdCk7XHJcbiAgICAgICAgaWYgKGxlZnRfYjY0dSAhPT0gcmVzcG9uc2UucHJvZmlsZS5hdF9oYXNoKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBGYWlsZWQgdG8gdmFsaWRhdGUgYXRfaGFzaFwiLCBsZWZ0X2I2NHUsIHJlc3BvbnNlLnByb2ZpbGUuYXRfaGFzaCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gdmFsaWRhdGUgYXRfaGFzaFwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogc3VjY2Vzc1wiKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1Jlc3BvbnNlVmFsaWRhdG9yLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgeyBKc29uU2VydmljZSB9IGZyb20gJy4vSnNvblNlcnZpY2UnO1xyXG5cclxuY29uc3QgT2lkY01ldGFkYXRhVXJsUGF0aCA9ICcud2VsbC1rbm93bi9vcGVuaWQtY29uZmlndXJhdGlvbic7XHJcblxyXG5leHBvcnQgY2xhc3MgTWV0YWRhdGFTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBKc29uU2VydmljZUN0b3IgPSBKc29uU2VydmljZSkge1xyXG4gICAgICAgIGlmICghc2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiTWV0YWRhdGFTZXJ2aWNlOiBObyBzZXR0aW5ncyBwYXNzZWQgdG8gTWV0YWRhdGFTZXJ2aWNlXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXR0aW5nc1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5fanNvblNlcnZpY2UgPSBuZXcgSnNvblNlcnZpY2VDdG9yKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1ldGFkYXRhVXJsKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fbWV0YWRhdGFVcmwpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhVXJsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCA9IHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhVXJsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFVcmwgPSB0aGlzLl9zZXR0aW5ncy5hdXRob3JpdHk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21ldGFkYXRhVXJsICYmIHRoaXMuX21ldGFkYXRhVXJsLmluZGV4T2YoT2lkY01ldGFkYXRhVXJsUGF0aCkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX21ldGFkYXRhVXJsW3RoaXMuX21ldGFkYXRhVXJsLmxlbmd0aCAtIDFdICE9PSAnLycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFVcmwgKz0gJy8nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCArPSBPaWRjTWV0YWRhdGFVcmxQYXRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFVcmw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TWV0YWRhdGEoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YTogUmV0dXJuaW5nIG1ldGFkYXRhIGZyb20gc2V0dGluZ3NcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fc2V0dGluZ3MubWV0YWRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLm1ldGFkYXRhVXJsKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YTogTm8gYXV0aG9yaXR5IG9yIG1ldGFkYXRhVXJsIGNvbmZpZ3VyZWQgb24gc2V0dGluZ3NcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBhdXRob3JpdHkgb3IgbWV0YWRhdGFVcmwgY29uZmlndXJlZCBvbiBzZXR0aW5nc1wiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBMb2cuZGVidWcoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0TWV0YWRhdGE6IGdldHRpbmcgbWV0YWRhdGEgZnJvbVwiLCB0aGlzLm1ldGFkYXRhVXJsKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2pzb25TZXJ2aWNlLmdldEpzb24odGhpcy5tZXRhZGF0YVVybClcclxuICAgICAgICAgICAgLnRoZW4obWV0YWRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhOiBqc29uIHJlY2VpdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3MubWV0YWRhdGEgPSBtZXRhZGF0YTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtZXRhZGF0YTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SXNzdWVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiaXNzdWVyXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEF1dGhvcml6YXRpb25FbmRwb2ludCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcImF1dGhvcml6YXRpb25fZW5kcG9pbnRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXNlckluZm9FbmRwb2ludCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcInVzZXJpbmZvX2VuZHBvaW50XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRva2VuRW5kcG9pbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJ0b2tlbl9lbmRwb2ludFwiLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDaGVja1Nlc3Npb25JZnJhbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJjaGVja19zZXNzaW9uX2lmcmFtZVwiLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFbmRTZXNzaW9uRW5kcG9pbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJlbmRfc2Vzc2lvbl9lbmRwb2ludFwiLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSZXZvY2F0aW9uRW5kcG9pbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJyZXZvY2F0aW9uX2VuZHBvaW50XCIsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRNZXRhZGF0YVByb3BlcnR5KG5hbWUsIG9wdGlvbmFsPWZhbHNlKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhUHJvcGVydHkgZm9yOiBcIiArIG5hbWUpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRNZXRhZGF0YSgpLnRoZW4obWV0YWRhdGEgPT4ge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0TWV0YWRhdGFQcm9wZXJ0eTogbWV0YWRhdGEgcmVjaWV2ZWRcIik7XHJcblxyXG4gICAgICAgICAgICBpZiAobWV0YWRhdGFbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy53YXJuKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhUHJvcGVydHk6IE1ldGFkYXRhIGRvZXMgbm90IGNvbnRhaW4gb3B0aW9uYWwgcHJvcGVydHkgXCIgKyBuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhUHJvcGVydHk6IE1ldGFkYXRhIGRvZXMgbm90IGNvbnRhaW4gcHJvcGVydHkgXCIgKyBuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRhZGF0YSBkb2VzIG5vdCBjb250YWluIHByb3BlcnR5IFwiICsgbmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBtZXRhZGF0YVtuYW1lXTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTaWduaW5nS2V5cygpIHtcclxuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3Muc2lnbmluZ0tleXMpIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiTWV0YWRhdGFTZXJ2aWNlLmdldFNpZ25pbmdLZXlzOiBSZXR1cm5pbmcgc2lnbmluZ0tleXMgZnJvbSBzZXR0aW5nc1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9zZXR0aW5ncy5zaWduaW5nS2V5cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcImp3a3NfdXJpXCIpLnRoZW4oandrc191cmkgPT4ge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0U2lnbmluZ0tleXM6IGp3a3NfdXJpIHJlY2VpdmVkXCIsIGp3a3NfdXJpKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uU2VydmljZS5nZXRKc29uKGp3a3NfdXJpKS50aGVuKGtleVNldCA9PiB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0U2lnbmluZ0tleXM6IGtleSBzZXQgcmVjZWl2ZWRcIiwga2V5U2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWtleVNldC5rZXlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiTWV0YWRhdGFTZXJ2aWNlLmdldFNpZ25pbmdLZXlzOiBNaXNzaW5nIGtleXMgb24ga2V5c2V0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcga2V5cyBvbiBrZXlzZXRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3Muc2lnbmluZ0tleXMgPSBrZXlTZXQua2V5cztcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5zaWduaW5nS2V5cztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL01ldGFkYXRhU2VydmljZS5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9HbG9iYWwnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEpzb25TZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKFhNTEh0dHBSZXF1ZXN0Q3RvciA9IEdsb2JhbC5YTUxIdHRwUmVxdWVzdCkge1xyXG4gICAgICAgIHRoaXMuX1hNTEh0dHBSZXF1ZXN0ID0gWE1MSHR0cFJlcXVlc3RDdG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEpzb24odXJsLCB0b2tlbikge1xyXG4gICAgICAgIGlmICghdXJsKXtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiSnNvblNlcnZpY2UuZ2V0SnNvbjogTm8gdXJsIHBhc3NlZFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXJsXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgTG9nLmRlYnVnKFwiSnNvblNlcnZpY2UuZ2V0SnNvbiwgdXJsOiBcIiwgdXJsKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHZhciByZXEgPSBuZXcgdGhpcy5fWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICAgICAgcmVxLm9wZW4oJ0dFVCcsIHVybCk7XHJcblxyXG4gICAgICAgICAgICByZXEub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJKc29uU2VydmljZS5nZXRKc29uOiBIVFRQIHJlc3BvbnNlIHJlY2VpdmVkLCBzdGF0dXNcIiwgcmVxLnN0YXR1cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJlcS5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50VHlwZSA9IHJlcS5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudFR5cGUgJiYgY29udGVudFR5cGUuc3RhcnRzV2l0aChcImFwcGxpY2F0aW9uL2pzb25cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShyZXEucmVzcG9uc2VUZXh0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpzb25TZXJ2aWNlLmdldEpzb246IEVycm9yIHBhcnNpbmcgSlNPTiByZXNwb25zZVwiLCBlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoRXJyb3IoXCJJbnZhbGlkIHJlc3BvbnNlIENvbnRlbnQtVHlwZTogXCIgKyBjb250ZW50VHlwZSArIFwiLCBmcm9tIFVSTDogXCIgKyB1cmwpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoRXJyb3IocmVxLnN0YXR1c1RleHQgKyBcIiAoXCIgKyByZXEuc3RhdHVzICsgXCIpXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKc29uU2VydmljZS5nZXRKc29uOiBuZXR3b3JrIGVycm9yXCIpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KEVycm9yKFwiTmV0d29yayBFcnJvclwiKSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkpzb25TZXJ2aWNlLmdldEpzb246IHRva2VuIHBhc3NlZCwgc2V0dGluZyBBdXRob3JpemF0aW9uIGhlYWRlclwiKTtcclxuICAgICAgICAgICAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKFwiQXV0aG9yaXphdGlvblwiLCBcIkJlYXJlciBcIiArIHRva2VuKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVxLnNlbmQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvSnNvblNlcnZpY2UuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBKc29uU2VydmljZSB9IGZyb20gJy4vSnNvblNlcnZpY2UnO1xyXG5pbXBvcnQgeyBNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICcuL01ldGFkYXRhU2VydmljZSc7XHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuXHJcbmV4cG9ydCBjbGFzcyBVc2VySW5mb1NlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIEpzb25TZXJ2aWNlQ3RvciA9IEpzb25TZXJ2aWNlLCBNZXRhZGF0YVNlcnZpY2VDdG9yID0gTWV0YWRhdGFTZXJ2aWNlKSB7XHJcbiAgICAgICAgaWYgKCFzZXR0aW5ncykge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VySW5mb1NlcnZpY2UuY3RvcjogTm8gc2V0dGluZ3MgcGFzc2VkXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXR0aW5nc1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5fanNvblNlcnZpY2UgPSBuZXcgSnNvblNlcnZpY2VDdG9yKCk7XHJcbiAgICAgICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlID0gbmV3IE1ldGFkYXRhU2VydmljZUN0b3IodGhpcy5fc2V0dGluZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENsYWltcyh0b2tlbikge1xyXG4gICAgICAgIGlmICghdG9rZW4pIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlckluZm9TZXJ2aWNlLmdldENsYWltczogTm8gdG9rZW4gcGFzc2VkXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQSB0b2tlbiBpcyByZXF1aXJlZFwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFVzZXJJbmZvRW5kcG9pbnQoKS50aGVuKHVybCA9PiB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5nZXRDbGFpbXM6IHJlY2VpdmVkIHVzZXJpbmZvIHVybFwiLCB1cmwpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb25TZXJ2aWNlLmdldEpzb24odXJsLCB0b2tlbikudGhlbihjbGFpbXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlckluZm9TZXJ2aWNlLmdldENsYWltczogY2xhaW1zIHJlY2VpdmVkXCIsIGNsYWltcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xhaW1zO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvVXNlckluZm9TZXJ2aWNlLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEVycm9yUmVzcG9uc2UgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7ZXJyb3IsIGVycm9yX2Rlc2NyaXB0aW9uLCBlcnJvcl91cmksIHN0YXRlfT17fVxyXG4gICAgKSB7XHJcbiAgICAgICAgIGlmICghZXJyb3Ipe1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJObyBlcnJvciBwYXNzZWQgdG8gRXJyb3JSZXNwb25zZVwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZXJyb3JcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdXBlcihlcnJvcl9kZXNjcmlwdGlvbiB8fCBlcnJvcik7XHJcblxyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiRXJyb3JSZXNwb25zZVwiO1xyXG5cclxuICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XHJcbiAgICAgICAgdGhpcy5lcnJvcl9kZXNjcmlwdGlvbiA9IGVycm9yX2Rlc2NyaXB0aW9uO1xyXG4gICAgICAgIHRoaXMuZXJyb3JfdXJpID0gZXJyb3JfdXJpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0Vycm9yUmVzcG9uc2UuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBqd3MsIEtFWVVUSUwgYXMgS2V5VXRpbCwgWDUwOSwgY3J5cHRvLCBoZXh0b2I2NHUsIGI2NHRvaGV4IH0gZnJvbSAnLi4vanNyc2FzaWduL2Rpc3QvanNyc2FzaWduLmpzJztcclxuLy9pbXBvcnQgeyBqd3MsIEtFWVVUSUwgYXMgS2V5VXRpbCwgWDUwOSwgY3J5cHRvLCBoZXh0b2I2NHUsIGI2NHRvaGV4IH0gZnJvbSAnanNyc2FzaWduJztcclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5cclxuY29uc3QgQWxsb3dlZFNpZ25pbmdBbGdzID0gWydSUzI1NicsICdSUzM4NCcsICdSUzUxMicsICdQUzI1NicsICdQUzM4NCcsICdQUzUxMicsICdFUzI1NicsICdFUzM4NCcsICdFUzUxMiddO1xyXG5cclxuZXhwb3J0IGNsYXNzIEpvc2VVdGlsIHtcclxuXHJcbiAgICBzdGF0aWMgcGFyc2VKd3Qoand0KSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiSm9zZVV0aWwucGFyc2VKd3RcIik7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIHRva2VuID0gandzLkpXUy5wYXJzZShqd3QpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiB0b2tlbi5oZWFkZXJPYmosXHJcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiB0b2tlbi5wYXlsb2FkT2JqXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdmFsaWRhdGVKd3Qoand0LCBrZXksIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tldywgbm93KSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiSm9zZVV0aWwudmFsaWRhdGVKd3RcIik7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkua3R5ID09PSBcIlJTQVwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5LmUgJiYga2V5Lm4pIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXkgPSBLZXlVdGlsLmdldEtleShrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoa2V5Lng1YyAmJiBrZXkueDVjLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoZXggPSBiNjR0b2hleChrZXkueDVjWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBrZXkgPSBYNTA5LmdldFB1YmxpY0tleUZyb21DZXJ0SGV4KGhleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC52YWxpZGF0ZUp3dDogUlNBIGtleSBtaXNzaW5nIGtleSBtYXRlcmlhbFwiLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJSU0Ega2V5IG1pc3Npbmcga2V5IG1hdGVyaWFsXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChrZXkua3R5ID09PSBcIkVDXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChrZXkuY3J2ICYmIGtleS54ICYmIGtleS55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gS2V5VXRpbC5nZXRLZXkoa2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLnZhbGlkYXRlSnd0OiBFQyBrZXkgbWlzc2luZyBrZXkgbWF0ZXJpYWxcIiwga2V5KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiRUMga2V5IG1pc3Npbmcga2V5IG1hdGVyaWFsXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLnZhbGlkYXRlSnd0OiBVbnN1cHBvcnRlZCBrZXkgdHlwZVwiLCBrZXkgJiYga2V5Lmt0eSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQga2V5IHR5cGU6IFwiICsga2V5ICYmIGtleS5rdHkpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIEpvc2VVdGlsLl92YWxpZGF0ZUp3dChqd3QsIGtleSwgaXNzdWVyLCBhdWRpZW5jZSwgY2xvY2tTa2V3LCBub3cpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoZSAmJiBlLm1lc3NhZ2UgfHwgZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcIkpXVCB2YWxpZGF0aW9uIGZhaWxlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIF92YWxpZGF0ZUp3dChqd3QsIGtleSwgaXNzdWVyLCBhdWRpZW5jZSwgY2xvY2tTa2V3LCBub3cpIHtcclxuICAgICAgICBpZiAoIWNsb2NrU2tldykge1xyXG4gICAgICAgICAgICBjbG9ja1NrZXcgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFub3cpIHtcclxuICAgICAgICAgICAgbm93ID0gcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHBheWxvYWQgPSBKb3NlVXRpbC5wYXJzZUp3dChqd3QpLnBheWxvYWQ7XHJcblxyXG4gICAgICAgIGlmICghcGF5bG9hZC5pc3MpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBpc3N1ZXIgd2FzIG5vdCBwcm92aWRlZFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImlzc3VlciB3YXMgbm90IHByb3ZpZGVkXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBheWxvYWQuaXNzICE9PSBpc3N1ZXIpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBJbnZhbGlkIGlzc3VlciBpbiB0b2tlblwiLCBwYXlsb2FkLmlzcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIGlzc3VlciBpbiB0b2tlbjogXCIgKyBwYXlsb2FkLmlzcykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFwYXlsb2FkLmF1ZCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3Q6IGF1ZCB3YXMgbm90IHByb3ZpZGVkXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiYXVkIHdhcyBub3QgcHJvdmlkZWRcIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmFsaWRBdWRpZW5jZSA9IHBheWxvYWQuYXVkID09PSBhdWRpZW5jZSB8fCAoQXJyYXkuaXNBcnJheShwYXlsb2FkLmF1ZCkgJiYgcGF5bG9hZC5hdWQuaW5kZXhPZihhdWRpZW5jZSkgPj0gMCk7XHJcbiAgICAgICAgaWYgKCF2YWxpZEF1ZGllbmNlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogSW52YWxpZCBhdWRpZW5jZSBpbiB0b2tlblwiLCBwYXlsb2FkLmF1ZCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIGF1ZGllbmNlIGluIHRva2VuOiBcIiArIHBheWxvYWQuYXVkKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbG93ZXJOb3cgPSBub3cgKyBjbG9ja1NrZXc7XHJcbiAgICAgICAgdmFyIHVwcGVyTm93ID0gbm93IC0gY2xvY2tTa2V3O1xyXG5cclxuICAgICAgICBpZiAoIXBheWxvYWQuaWF0KSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogaWF0IHdhcyBub3QgcHJvdmlkZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpYXQgd2FzIG5vdCBwcm92aWRlZFwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsb3dlck5vdyA8IHBheWxvYWQuaWF0KSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogaWF0IGlzIGluIHRoZSBmdXR1cmVcIiwgcGF5bG9hZC5pYXQpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiaWF0IGlzIGluIHRoZSBmdXR1cmU6IFwiICsgcGF5bG9hZC5pYXQpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYXlsb2FkLm5iZiAmJiBsb3dlck5vdyA8IHBheWxvYWQubmJmKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogbmJmIGlzIGluIHRoZSBmdXR1cmVcIiwgcGF5bG9hZC5uYmYpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwibmJmIGlzIGluIHRoZSBmdXR1cmU6IFwiICsgcGF5bG9hZC5uYmYpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghcGF5bG9hZC5leHApIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBleHAgd2FzIG5vdCBwcm92aWRlZFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImV4cCB3YXMgbm90IHByb3ZpZGVkXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBheWxvYWQuZXhwIDwgdXBwZXJOb3cpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBleHAgaXMgaW4gdGhlIHBhc3RcIiwgcGF5bG9hZC5leHApO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiZXhwIGlzIGluIHRoZSBwYXN0OlwiICsgcGF5bG9hZC5leHApKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghandzLkpXUy52ZXJpZnkoand0LCBrZXksIEFsbG93ZWRTaWduaW5nQWxncykpIHtcclxuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogc2lnbmF0dXJlIHZhbGlkYXRpb24gZmFpbGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInNpZ25hdHVyZSB2YWxpZGF0aW9uIGZhaWxlZFwiKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKGUgJiYgZS5tZXNzYWdlIHx8IGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwic2lnbmF0dXJlIHZhbGlkYXRpb24gZmFpbGVkXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaGFzaFN0cmluZyh2YWx1ZSwgYWxnKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyeXB0by5VdGlsLmhhc2hTdHJpbmcodmFsdWUsIGFsZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGhleFRvQmFzZTY0VXJsKHZhbHVlKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIGhleHRvYjY0dSh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0pvc2VVdGlsLmpzIiwiLypcclxuICoganNyc2FzaWduKGFsbCkgOC4wLjEyICgyMDE4LTA0LTIyKSAoYykgMjAxMC0yMDE4IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXHJcbiAqL1xyXG5cclxudmFyIG5hdmlnYXRvciA9IHt9O1xyXG5uYXZpZ2F0b3IudXNlckFnZW50ID0gZmFsc2U7XHJcblxyXG52YXIgd2luZG93ID0ge307XHJcblxuLyohXHJcbkNvcHlyaWdodCAoYykgMjAxMSwgWWFob28hIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuQ29kZSBsaWNlbnNlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2U6XHJcbmh0dHA6Ly9kZXZlbG9wZXIueWFob28uY29tL3l1aS9saWNlbnNlLmh0bWxcclxudmVyc2lvbjogMi45LjBcclxuKi9cclxuaWYoWUFIT089PT11bmRlZmluZWQpe3ZhciBZQUhPTz17fX1ZQUhPTy5sYW5nPXtleHRlbmQ6ZnVuY3Rpb24oZyxoLGYpe2lmKCFofHwhZyl7dGhyb3cgbmV3IEVycm9yKFwiWUFIT08ubGFuZy5leHRlbmQgZmFpbGVkLCBwbGVhc2UgY2hlY2sgdGhhdCBhbGwgZGVwZW5kZW5jaWVzIGFyZSBpbmNsdWRlZC5cIil9dmFyIGQ9ZnVuY3Rpb24oKXt9O2QucHJvdG90eXBlPWgucHJvdG90eXBlO2cucHJvdG90eXBlPW5ldyBkKCk7Zy5wcm90b3R5cGUuY29uc3RydWN0b3I9ZztnLnN1cGVyY2xhc3M9aC5wcm90b3R5cGU7aWYoaC5wcm90b3R5cGUuY29uc3RydWN0b3I9PU9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3Ipe2gucHJvdG90eXBlLmNvbnN0cnVjdG9yPWh9aWYoZil7dmFyIGI7Zm9yKGIgaW4gZil7Zy5wcm90b3R5cGVbYl09ZltiXX12YXIgZT1mdW5jdGlvbigpe30sYz1bXCJ0b1N0cmluZ1wiLFwidmFsdWVPZlwiXTt0cnl7aWYoL01TSUUvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpe2U9ZnVuY3Rpb24oaixpKXtmb3IoYj0wO2I8Yy5sZW5ndGg7Yj1iKzEpe3ZhciBsPWNbYl0saz1pW2xdO2lmKHR5cGVvZiBrPT09XCJmdW5jdGlvblwiJiZrIT1PYmplY3QucHJvdG90eXBlW2xdKXtqW2xdPWt9fX19fWNhdGNoKGEpe31lKGcucHJvdG90eXBlLGYpfX19O1xuLyohIENyeXB0b0pTIHYzLjEuMiBjb3JlLWZpeC5qc1xyXG4gKiBjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcclxuICogKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcclxuICogVEhJUyBJUyBGSVggb2YgJ2NvcmUuanMnIHRvIGZpeCBIbWFjIGlzc3VlLlxyXG4gKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy9pc3N1ZXMvZGV0YWlsP2lkPTg0XHJcbiAqIGh0dHBzOi8vY3J5cHRvLWpzLmdvb2dsZWNvZGUuY29tL3N2bi1oaXN0b3J5L3I2NjcvYnJhbmNoZXMvMy54L3NyYy9jb3JlLmpzXHJcbiAqL1xyXG52YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fChmdW5jdGlvbihlLGcpe3ZhciBhPXt9O3ZhciBiPWEubGliPXt9O3ZhciBqPWIuQmFzZT0oZnVuY3Rpb24oKXtmdW5jdGlvbiBuKCl7fXJldHVybntleHRlbmQ6ZnVuY3Rpb24ocCl7bi5wcm90b3R5cGU9dGhpczt2YXIgbz1uZXcgbigpO2lmKHApe28ubWl4SW4ocCl9aWYoIW8uaGFzT3duUHJvcGVydHkoXCJpbml0XCIpKXtvLmluaXQ9ZnVuY3Rpb24oKXtvLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19by5pbml0LnByb3RvdHlwZT1vO28uJHN1cGVyPXRoaXM7cmV0dXJuIG99LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBvPXRoaXMuZXh0ZW5kKCk7by5pbml0LmFwcGx5KG8sYXJndW1lbnRzKTtyZXR1cm4gb30saW5pdDpmdW5jdGlvbigpe30sbWl4SW46ZnVuY3Rpb24ocCl7Zm9yKHZhciBvIGluIHApe2lmKHAuaGFzT3duUHJvcGVydHkobykpe3RoaXNbb109cFtvXX19aWYocC5oYXNPd25Qcm9wZXJ0eShcInRvU3RyaW5nXCIpKXt0aGlzLnRvU3RyaW5nPXAudG9TdHJpbmd9fSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19fSgpKTt2YXIgbD1iLldvcmRBcnJheT1qLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihvLG4pe289dGhpcy53b3Jkcz1vfHxbXTtpZihuIT1nKXt0aGlzLnNpZ0J5dGVzPW59ZWxzZXt0aGlzLnNpZ0J5dGVzPW8ubGVuZ3RoKjR9fSx0b1N0cmluZzpmdW5jdGlvbihuKXtyZXR1cm4obnx8aCkuc3RyaW5naWZ5KHRoaXMpfSxjb25jYXQ6ZnVuY3Rpb24odCl7dmFyIHE9dGhpcy53b3Jkczt2YXIgcD10LndvcmRzO3ZhciBuPXRoaXMuc2lnQnl0ZXM7dmFyIHM9dC5zaWdCeXRlczt0aGlzLmNsYW1wKCk7aWYobiU0KXtmb3IodmFyIHI9MDtyPHM7cisrKXt2YXIgbz0ocFtyPj4+Ml0+Pj4oMjQtKHIlNCkqOCkpJjI1NTtxWyhuK3IpPj4+Ml18PW88PCgyNC0oKG4rciklNCkqOCl9fWVsc2V7Zm9yKHZhciByPTA7cjxzO3IrPTQpe3FbKG4rcik+Pj4yXT1wW3I+Pj4yXX19dGhpcy5zaWdCeXRlcys9cztyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgbz10aGlzLndvcmRzO3ZhciBuPXRoaXMuc2lnQnl0ZXM7b1tuPj4+Ml0mPTQyOTQ5NjcyOTU8PCgzMi0obiU0KSo4KTtvLmxlbmd0aD1lLmNlaWwobi80KX0sY2xvbmU6ZnVuY3Rpb24oKXt2YXIgbj1qLmNsb25lLmNhbGwodGhpcyk7bi53b3Jkcz10aGlzLndvcmRzLnNsaWNlKDApO3JldHVybiBufSxyYW5kb206ZnVuY3Rpb24ocCl7dmFyIG89W107Zm9yKHZhciBuPTA7bjxwO24rPTQpe28ucHVzaCgoZS5yYW5kb20oKSo0Mjk0OTY3Mjk2KXwwKX1yZXR1cm4gbmV3IGwuaW5pdChvLHApfX0pO3ZhciBtPWEuZW5jPXt9O3ZhciBoPW0uSGV4PXtzdHJpbmdpZnk6ZnVuY3Rpb24ocCl7dmFyIHI9cC53b3Jkczt2YXIgbz1wLnNpZ0J5dGVzO3ZhciBxPVtdO2Zvcih2YXIgbj0wO248bztuKyspe3ZhciBzPShyW24+Pj4yXT4+PigyNC0obiU0KSo4KSkmMjU1O3EucHVzaCgocz4+PjQpLnRvU3RyaW5nKDE2KSk7cS5wdXNoKChzJjE1KS50b1N0cmluZygxNikpfXJldHVybiBxLmpvaW4oXCJcIil9LHBhcnNlOmZ1bmN0aW9uKHApe3ZhciBuPXAubGVuZ3RoO3ZhciBxPVtdO2Zvcih2YXIgbz0wO288bjtvKz0yKXtxW28+Pj4zXXw9cGFyc2VJbnQocC5zdWJzdHIobywyKSwxNik8PCgyNC0obyU4KSo0KX1yZXR1cm4gbmV3IGwuaW5pdChxLG4vMil9fTt2YXIgZD1tLkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKHEpe3ZhciByPXEud29yZHM7dmFyIHA9cS5zaWdCeXRlczt2YXIgbj1bXTtmb3IodmFyIG89MDtvPHA7bysrKXt2YXIgcz0ocltvPj4+Ml0+Pj4oMjQtKG8lNCkqOCkpJjI1NTtuLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShzKSl9cmV0dXJuIG4uam9pbihcIlwiKX0scGFyc2U6ZnVuY3Rpb24ocCl7dmFyIG49cC5sZW5ndGg7dmFyIHE9W107Zm9yKHZhciBvPTA7bzxuO28rKyl7cVtvPj4+Ml18PShwLmNoYXJDb2RlQXQobykmMjU1KTw8KDI0LShvJTQpKjgpfXJldHVybiBuZXcgbC5pbml0KHEsbil9fTt2YXIgYz1tLlV0Zjg9e3N0cmluZ2lmeTpmdW5jdGlvbihuKXt0cnl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoZC5zdHJpbmdpZnkobikpKX1jYXRjaChvKXt0aHJvdyBuZXcgRXJyb3IoXCJNYWxmb3JtZWQgVVRGLTggZGF0YVwiKX19LHBhcnNlOmZ1bmN0aW9uKG4pe3JldHVybiBkLnBhcnNlKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChuKSkpfX07dmFyIGk9Yi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtPWouZXh0ZW5kKHtyZXNldDpmdW5jdGlvbigpe3RoaXMuX2RhdGE9bmV3IGwuaW5pdCgpO3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihuKXtpZih0eXBlb2Ygbj09XCJzdHJpbmdcIil7bj1jLnBhcnNlKG4pfXRoaXMuX2RhdGEuY29uY2F0KG4pO3RoaXMuX25EYXRhQnl0ZXMrPW4uc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKHcpe3ZhciBxPXRoaXMuX2RhdGE7dmFyIHg9cS53b3Jkczt2YXIgbj1xLnNpZ0J5dGVzO3ZhciB0PXRoaXMuYmxvY2tTaXplO3ZhciB2PXQqNDt2YXIgdT1uL3Y7aWYodyl7dT1lLmNlaWwodSl9ZWxzZXt1PWUubWF4KCh1fDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCl9dmFyIHM9dSp0O3ZhciByPWUubWluKHMqNCxuKTtpZihzKXtmb3IodmFyIHA9MDtwPHM7cCs9dCl7dGhpcy5fZG9Qcm9jZXNzQmxvY2soeCxwKX12YXIgbz14LnNwbGljZSgwLHMpO3Euc2lnQnl0ZXMtPXJ9cmV0dXJuIG5ldyBsLmluaXQobyxyKX0sY2xvbmU6ZnVuY3Rpb24oKXt2YXIgbj1qLmNsb25lLmNhbGwodGhpcyk7bi5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIG59LF9taW5CdWZmZXJTaXplOjB9KTt2YXIgZj1iLkhhc2hlcj1pLmV4dGVuZCh7Y2ZnOmouZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihuKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQobik7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe2kucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihuKXt0aGlzLl9hcHBlbmQobik7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihuKXtpZihuKXt0aGlzLl9hcHBlbmQobil9dmFyIG89dGhpcy5fZG9GaW5hbGl6ZSgpO3JldHVybiBvfSxibG9ja1NpemU6NTEyLzMyLF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKHAsbyl7cmV0dXJuIG5ldyBuLmluaXQobykuZmluYWxpemUocCl9fSxfY3JlYXRlSG1hY0hlbHBlcjpmdW5jdGlvbihuKXtyZXR1cm4gZnVuY3Rpb24ocCxvKXtyZXR1cm4gbmV3IGsuSE1BQy5pbml0KG4sbykuZmluYWxpemUocCl9fX0pO3ZhciBrPWEuYWxnbz17fTtyZXR1cm4gYX0oTWF0aCkpO1xuLypcclxuQ3J5cHRvSlMgdjMuMS4yIHg2NC1jb3JlLW1pbi5qc1xyXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcclxuKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcclxuKi9cclxuKGZ1bmN0aW9uKGcpe3ZhciBhPUNyeXB0b0pTLGY9YS5saWIsZT1mLkJhc2UsaD1mLldvcmRBcnJheSxhPWEueDY0PXt9O2EuV29yZD1lLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihiLGMpe3RoaXMuaGlnaD1iO3RoaXMubG93PWN9fSk7YS5Xb3JkQXJyYXk9ZS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oYixjKXtiPXRoaXMud29yZHM9Ynx8W107dGhpcy5zaWdCeXRlcz1jIT1nP2M6OCpiLmxlbmd0aH0sdG9YMzI6ZnVuY3Rpb24oKXtmb3IodmFyIGI9dGhpcy53b3JkcyxjPWIubGVuZ3RoLGE9W10sZD0wO2Q8YztkKyspe3ZhciBlPWJbZF07YS5wdXNoKGUuaGlnaCk7YS5wdXNoKGUubG93KX1yZXR1cm4gaC5jcmVhdGUoYSx0aGlzLnNpZ0J5dGVzKX0sY2xvbmU6ZnVuY3Rpb24oKXtmb3IodmFyIGI9ZS5jbG9uZS5jYWxsKHRoaXMpLGM9Yi53b3Jkcz10aGlzLndvcmRzLnNsaWNlKDApLGE9Yy5sZW5ndGgsZD0wO2Q8YTtkKyspY1tkXT1jW2RdLmNsb25lKCk7cmV0dXJuIGJ9fSl9KSgpO1xyXG5cbi8qXHJcbkNyeXB0b0pTIHYzLjEuMiBlbmMtYmFzZTY0LmpzXHJcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xyXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxyXG4qL1xyXG4oZnVuY3Rpb24oKXt2YXIgaD1DcnlwdG9KUyxqPWgubGliLldvcmRBcnJheTtoLmVuYy5CYXNlNjQ9e3N0cmluZ2lmeTpmdW5jdGlvbihiKXt2YXIgZT1iLndvcmRzLGY9Yi5zaWdCeXRlcyxjPXRoaXMuX21hcDtiLmNsYW1wKCk7Yj1bXTtmb3IodmFyIGE9MDthPGY7YSs9Mylmb3IodmFyIGQ9KGVbYT4+PjJdPj4+MjQtOCooYSU0KSYyNTUpPDwxNnwoZVthKzE+Pj4yXT4+PjI0LTgqKChhKzEpJTQpJjI1NSk8PDh8ZVthKzI+Pj4yXT4+PjI0LTgqKChhKzIpJTQpJjI1NSxnPTA7ND5nJiZhKzAuNzUqZzxmO2crKyliLnB1c2goYy5jaGFyQXQoZD4+PjYqKDMtZykmNjMpKTtpZihlPWMuY2hhckF0KDY0KSlmb3IoO2IubGVuZ3RoJTQ7KWIucHVzaChlKTtyZXR1cm4gYi5qb2luKFwiXCIpfSxwYXJzZTpmdW5jdGlvbihiKXt2YXIgZT1iLmxlbmd0aCxmPXRoaXMuX21hcCxjPWYuY2hhckF0KDY0KTtjJiYoYz1iLmluZGV4T2YoYyksLTEhPWMmJihlPWMpKTtmb3IodmFyIGM9W10sYT0wLGQ9MDtkPFxyXG5lO2QrKylpZihkJTQpe3ZhciBnPWYuaW5kZXhPZihiLmNoYXJBdChkLTEpKTw8MiooZCU0KSxoPWYuaW5kZXhPZihiLmNoYXJBdChkKSk+Pj42LTIqKGQlNCk7Y1thPj4+Ml18PShnfGgpPDwyNC04KihhJTQpO2ErK31yZXR1cm4gai5jcmVhdGUoYyxhKX0sX21hcDpcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCJ9fSkoKTtcclxuXG4vKlxyXG5DcnlwdG9KUyB2My4xLjIgc2hhMjU2LW1pbi5qc1xyXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcclxuKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcclxuKi9cclxuKGZ1bmN0aW9uKGspe2Zvcih2YXIgZz1DcnlwdG9KUyxoPWcubGliLHY9aC5Xb3JkQXJyYXksaj1oLkhhc2hlcixoPWcuYWxnbyxzPVtdLHQ9W10sdT1mdW5jdGlvbihxKXtyZXR1cm4gNDI5NDk2NzI5NioocS0ocXwwKSl8MH0sbD0yLGI9MDs2ND5iOyl7dmFyIGQ7YTp7ZD1sO2Zvcih2YXIgdz1rLnNxcnQoZCkscj0yO3I8PXc7cisrKWlmKCEoZCVyKSl7ZD0hMTticmVhayBhfWQ9ITB9ZCYmKDg+YiYmKHNbYl09dShrLnBvdyhsLDAuNSkpKSx0W2JdPXUoay5wb3cobCwxLzMpKSxiKyspO2wrK312YXIgbj1bXSxoPWguU0hBMjU2PWouZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IHYuaW5pdChzLnNsaWNlKDApKX0sX2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKHEsaCl7Zm9yKHZhciBhPXRoaXMuX2hhc2gud29yZHMsYz1hWzBdLGQ9YVsxXSxiPWFbMl0saz1hWzNdLGY9YVs0XSxnPWFbNV0saj1hWzZdLGw9YVs3XSxlPTA7NjQ+ZTtlKyspe2lmKDE2PmUpbltlXT1cclxucVtoK2VdfDA7ZWxzZXt2YXIgbT1uW2UtMTVdLHA9bltlLTJdO25bZV09KChtPDwyNXxtPj4+NyleKG08PDE0fG0+Pj4xOClebT4+PjMpK25bZS03XSsoKHA8PDE1fHA+Pj4xNyleKHA8PDEzfHA+Pj4xOSlecD4+PjEwKStuW2UtMTZdfW09bCsoKGY8PDI2fGY+Pj42KV4oZjw8MjF8Zj4+PjExKV4oZjw8N3xmPj4+MjUpKSsoZiZnXn5mJmopK3RbZV0rbltlXTtwPSgoYzw8MzB8Yz4+PjIpXihjPDwxOXxjPj4+MTMpXihjPDwxMHxjPj4+MjIpKSsoYyZkXmMmYl5kJmIpO2w9ajtqPWc7Zz1mO2Y9ayttfDA7az1iO2I9ZDtkPWM7Yz1tK3B8MH1hWzBdPWFbMF0rY3wwO2FbMV09YVsxXStkfDA7YVsyXT1hWzJdK2J8MDthWzNdPWFbM10ra3wwO2FbNF09YVs0XStmfDA7YVs1XT1hWzVdK2d8MDthWzZdPWFbNl0ranwwO2FbN109YVs3XStsfDB9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGQ9dGhpcy5fZGF0YSxiPWQud29yZHMsYT04KnRoaXMuX25EYXRhQnl0ZXMsYz04KmQuc2lnQnl0ZXM7XHJcbmJbYz4+PjVdfD0xMjg8PDI0LWMlMzI7YlsoYys2ND4+Pjk8PDQpKzE0XT1rLmZsb29yKGEvNDI5NDk2NzI5Nik7YlsoYys2ND4+Pjk8PDQpKzE1XT1hO2Quc2lnQnl0ZXM9NCpiLmxlbmd0aDt0aGlzLl9wcm9jZXNzKCk7cmV0dXJuIHRoaXMuX2hhc2h9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGI9ai5jbG9uZS5jYWxsKHRoaXMpO2IuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBifX0pO2cuU0hBMjU2PWouX2NyZWF0ZUhlbHBlcihoKTtnLkhtYWNTSEEyNTY9ai5fY3JlYXRlSG1hY0hlbHBlcihoKX0pKE1hdGgpO1xyXG5cbi8qXHJcbkNyeXB0b0pTIHYzLjEuMiBzaGE1MTItbWluLmpzXHJcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xyXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxyXG4qL1xyXG4oZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7cmV0dXJuIGQuY3JlYXRlLmFwcGx5KGQsYXJndW1lbnRzKX1mb3IodmFyIG49Q3J5cHRvSlMscj1uLmxpYi5IYXNoZXIsZT1uLng2NCxkPWUuV29yZCxUPWUuV29yZEFycmF5LGU9bi5hbGdvLGVhPVthKDExMTYzNTI0MDgsMzYwOTc2NzQ1OCksYSgxODk5NDQ3NDQxLDYwMjg5MTcyNSksYSgzMDQ5MzIzNDcxLDM5NjQ0ODQzOTkpLGEoMzkyMTAwOTU3MywyMTczMjk1NTQ4KSxhKDk2MTk4NzE2Myw0MDgxNjI4NDcyKSxhKDE1MDg5NzA5OTMsMzA1MzgzNDI2NSksYSgyNDUzNjM1NzQ4LDI5Mzc2NzE1NzkpLGEoMjg3MDc2MzIyMSwzNjY0NjA5NTYwKSxhKDM2MjQzODEwODAsMjczNDg4MzM5NCksYSgzMTA1OTg0MDEsMTE2NDk5NjU0MiksYSg2MDcyMjUyNzgsMTMyMzYxMDc2NCksYSgxNDI2ODgxOTg3LDM1OTAzMDQ5OTQpLGEoMTkyNTA3ODM4OCw0MDY4MTgyMzgzKSxhKDIxNjIwNzgyMDYsOTkxMzM2MTEzKSxhKDI2MTQ4ODgxMDMsNjMzODAzMzE3KSxcclxuYSgzMjQ4MjIyNTgwLDM0Nzk3NzQ4NjgpLGEoMzgzNTM5MDQwMSwyNjY2NjEzNDU4KSxhKDQwMjIyMjQ3NzQsOTQ0NzExMTM5KSxhKDI2NDM0NzA3OCwyMzQxMjYyNzczKSxhKDYwNDgwNzYyOCwyMDA3ODAwOTMzKSxhKDc3MDI1NTk4MywxNDk1OTkwOTAxKSxhKDEyNDkxNTAxMjIsMTg1NjQzMTIzNSksYSgxNTU1MDgxNjkyLDMxNzUyMTgxMzIpLGEoMTk5NjA2NDk4NiwyMTk4OTUwODM3KSxhKDI1NTQyMjA4ODIsMzk5OTcxOTMzOSksYSgyODIxODM0MzQ5LDc2Njc4NDAxNiksYSgyOTUyOTk2ODA4LDI1NjY1OTQ4NzkpLGEoMzIxMDMxMzY3MSwzMjAzMzM3OTU2KSxhKDMzMzY1NzE4OTEsMTAzNDQ1NzAyNiksYSgzNTg0NTI4NzExLDI0NjY5NDg5MDEpLGEoMTEzOTI2OTkzLDM3NTgzMjYzODMpLGEoMzM4MjQxODk1LDE2ODcxNzkzNiksYSg2NjYzMDcyMDUsMTE4ODE3OTk2NCksYSg3NzM1Mjk5MTIsMTU0NjA0NTczNCksYSgxMjk0NzU3MzcyLDE1MjI4MDU0ODUpLGEoMTM5NjE4MjI5MSxcclxuMjY0MzgzMzgyMyksYSgxNjk1MTgzNzAwLDIzNDM1MjczOTApLGEoMTk4NjY2MTA1MSwxMDE0NDc3NDgwKSxhKDIxNzcwMjYzNTAsMTIwNjc1OTE0MiksYSgyNDU2OTU2MDM3LDM0NDA3NzYyNyksYSgyNzMwNDg1OTIxLDEyOTA4NjM0NjApLGEoMjgyMDMwMjQxMSwzMTU4NDU0MjczKSxhKDMyNTk3MzA4MDAsMzUwNTk1MjY1NyksYSgzMzQ1NzY0NzcxLDEwNjIxNzAwOCksYSgzNTE2MDY1ODE3LDM2MDYwMDgzNDQpLGEoMzYwMDM1MjgwNCwxNDMyNzI1Nzc2KSxhKDQwOTQ1NzE5MDksMTQ2NzAzMTU5NCksYSgyNzU0MjMzNDQsODUxMTY5NzIwKSxhKDQzMDIyNzczNCwzMTAwODIzNzUyKSxhKDUwNjk0ODYxNiwxMzYzMjU4MTk1KSxhKDY1OTA2MDU1NiwzNzUwNjg1NTkzKSxhKDg4Mzk5Nzg3NywzNzg1MDUwMjgwKSxhKDk1ODEzOTU3MSwzMzE4MzA3NDI3KSxhKDEzMjI4MjIyMTgsMzgxMjcyMzQwMyksYSgxNTM3MDAyMDYzLDIwMDMwMzQ5OTUpLGEoMTc0Nzg3Mzc3OSwzNjAyMDM2ODk5KSxcclxuYSgxOTU1NTYyMjIyLDE1NzU5OTAwMTIpLGEoMjAyNDEwNDgxNSwxMTI1NTkyOTI4KSxhKDIyMjc3MzA0NTIsMjcxNjkwNDMwNiksYSgyMzYxODUyNDI0LDQ0Mjc3NjA0NCksYSgyNDI4NDM2NDc0LDU5MzY5ODM0NCksYSgyNzU2NzM0MTg3LDM3MzMxMTAyNDkpLGEoMzIwNDAzMTQ3OSwyOTk5MzUxNTczKSxhKDMzMjkzMjUyOTgsMzgxNTkyMDQyNyksYSgzMzkxNTY5NjE0LDM5MjgzODM5MDApLGEoMzUxNTI2NzI3MSw1NjYyODA3MTEpLGEoMzk0MDE4NzYwNiwzNDU0MDY5NTM0KSxhKDQxMTg2MzAyNzEsNDAwMDIzOTk5MiksYSgxMTY0MTg0NzQsMTkxNDEzODU1NCksYSgxNzQyOTI0MjEsMjczMTA1NTI3MCksYSgyODkzODAzNTYsMzIwMzk5MzAwNiksYSg0NjAzOTMyNjksMzIwNjIwMzE1KSxhKDY4NTQ3MTczMyw1ODc0OTY4MzYpLGEoODUyMTQyOTcxLDEwODY3OTI4NTEpLGEoMTAxNzAzNjI5OCwzNjU1NDMxMDApLGEoMTEyNjAwMDU4MCwyNjE4Mjk3Njc2KSxhKDEyODgwMzM0NzAsXHJcbjM0MDk4NTUxNTgpLGEoMTUwMTUwNTk0OCw0MjM0NTA5ODY2KSxhKDE2MDcxNjc5MTUsOTg3MTY3NDY4KSxhKDE4MTY0MDIzMTYsMTI0NjE4OTU5MSldLHY9W10sdz0wOzgwPnc7dysrKXZbd109YSgpO2U9ZS5TSEE1MTI9ci5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgVC5pbml0KFtuZXcgZC5pbml0KDE3NzkwMzM3MDMsNDA4OTIzNTcyMCksbmV3IGQuaW5pdCgzMTQ0MTM0Mjc3LDIyMjc4NzM1OTUpLG5ldyBkLmluaXQoMTAxMzkwNDI0Miw0MjcxMTc1NzIzKSxuZXcgZC5pbml0KDI3NzM0ODA3NjIsMTU5NTc1MDEyOSksbmV3IGQuaW5pdCgxMzU5ODkzMTE5LDI5MTc1NjUxMzcpLG5ldyBkLmluaXQoMjYwMDgyMjkyNCw3MjU1MTExOTkpLG5ldyBkLmluaXQoNTI4NzM0NjM1LDQyMTUzODk1NDcpLG5ldyBkLmluaXQoMTU0MTQ1OTIyNSwzMjcwMzMyMDkpXSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGQpe2Zvcih2YXIgZj10aGlzLl9oYXNoLndvcmRzLFxyXG5GPWZbMF0sZT1mWzFdLG49ZlsyXSxyPWZbM10sRz1mWzRdLEg9Zls1XSxJPWZbNl0sZj1mWzddLHc9Ri5oaWdoLEo9Ri5sb3csWD1lLmhpZ2gsSz1lLmxvdyxZPW4uaGlnaCxMPW4ubG93LFo9ci5oaWdoLE09ci5sb3csJD1HLmhpZ2gsTj1HLmxvdyxhYT1ILmhpZ2gsTz1ILmxvdyxiYT1JLmhpZ2gsUD1JLmxvdyxjYT1mLmhpZ2gsUT1mLmxvdyxrPXcsZz1KLHo9WCx4PUssQT1ZLHk9TCxVPVosQj1NLGw9JCxoPU4sUj1hYSxDPU8sUz1iYSxEPVAsVj1jYSxFPVEsbT0wOzgwPm07bSsrKXt2YXIgcz12W21dO2lmKDE2Pm0pdmFyIGo9cy5oaWdoPWFbZCsyKm1dfDAsYj1zLmxvdz1hW2QrMiptKzFdfDA7ZWxzZXt2YXIgaj12W20tMTVdLGI9ai5oaWdoLHA9ai5sb3csaj0oYj4+PjF8cDw8MzEpXihiPj4+OHxwPDwyNCleYj4+PjcscD0ocD4+PjF8Yjw8MzEpXihwPj4+OHxiPDwyNCleKHA+Pj43fGI8PDI1KSx1PXZbbS0yXSxiPXUuaGlnaCxjPXUubG93LHU9KGI+Pj4xOXxjPDwxMyleKGI8PFxyXG4zfGM+Pj4yOSleYj4+PjYsYz0oYz4+PjE5fGI8PDEzKV4oYzw8M3xiPj4+MjkpXihjPj4+NnxiPDwyNiksYj12W20tN10sVz1iLmhpZ2gsdD12W20tMTZdLHE9dC5oaWdoLHQ9dC5sb3csYj1wK2IubG93LGo9aitXKyhiPj4+MDxwPj4+MD8xOjApLGI9YitjLGo9ait1KyhiPj4+MDxjPj4+MD8xOjApLGI9Yit0LGo9aitxKyhiPj4+MDx0Pj4+MD8xOjApO3MuaGlnaD1qO3MubG93PWJ9dmFyIFc9bCZSXn5sJlMsdD1oJkNefmgmRCxzPWsmel5rJkFeeiZBLFQ9ZyZ4XmcmeV54JnkscD0oaz4+PjI4fGc8PDQpXihrPDwzMHxnPj4+MileKGs8PDI1fGc+Pj43KSx1PShnPj4+Mjh8azw8NCleKGc8PDMwfGs+Pj4yKV4oZzw8MjV8az4+PjcpLGM9ZWFbbV0sZmE9Yy5oaWdoLGRhPWMubG93LGM9RSsoKGg+Pj4xNHxsPDwxOCleKGg+Pj4xOHxsPDwxNCleKGg8PDIzfGw+Pj45KSkscT1WKygobD4+PjE0fGg8PDE4KV4obD4+PjE4fGg8PDE0KV4obDw8MjN8aD4+PjkpKSsoYz4+PjA8RT4+PjA/MTpcclxuMCksYz1jK3QscT1xK1crKGM+Pj4wPHQ+Pj4wPzE6MCksYz1jK2RhLHE9cStmYSsoYz4+PjA8ZGE+Pj4wPzE6MCksYz1jK2IscT1xK2orKGM+Pj4wPGI+Pj4wPzE6MCksYj11K1Qscz1wK3MrKGI+Pj4wPHU+Pj4wPzE6MCksVj1TLEU9RCxTPVIsRD1DLFI9bCxDPWgsaD1CK2N8MCxsPVUrcSsoaD4+PjA8Qj4+PjA/MTowKXwwLFU9QSxCPXksQT16LHk9eCx6PWsseD1nLGc9YytifDAsaz1xK3MrKGc+Pj4wPGM+Pj4wPzE6MCl8MH1KPUYubG93PUorZztGLmhpZ2g9dytrKyhKPj4+MDxnPj4+MD8xOjApO0s9ZS5sb3c9Syt4O2UuaGlnaD1YK3orKEs+Pj4wPHg+Pj4wPzE6MCk7TD1uLmxvdz1MK3k7bi5oaWdoPVkrQSsoTD4+PjA8eT4+PjA/MTowKTtNPXIubG93PU0rQjtyLmhpZ2g9WitVKyhNPj4+MDxCPj4+MD8xOjApO049Ry5sb3c9TitoO0cuaGlnaD0kK2wrKE4+Pj4wPGg+Pj4wPzE6MCk7Tz1ILmxvdz1PK0M7SC5oaWdoPWFhK1IrKE8+Pj4wPEM+Pj4wPzE6MCk7UD1JLmxvdz1QK0Q7XHJcbkkuaGlnaD1iYStTKyhQPj4+MDxEPj4+MD8xOjApO1E9Zi5sb3c9UStFO2YuaGlnaD1jYStWKyhRPj4+MDxFPj4+MD8xOjApfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX2RhdGEsZD1hLndvcmRzLGY9OCp0aGlzLl9uRGF0YUJ5dGVzLGU9OCphLnNpZ0J5dGVzO2RbZT4+PjVdfD0xMjg8PDI0LWUlMzI7ZFsoZSsxMjg+Pj4xMDw8NSkrMzBdPU1hdGguZmxvb3IoZi80Mjk0OTY3Mjk2KTtkWyhlKzEyOD4+PjEwPDw1KSszMV09ZjthLnNpZ0J5dGVzPTQqZC5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNoLnRvWDMyKCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9ci5jbG9uZS5jYWxsKHRoaXMpO2EuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBhfSxibG9ja1NpemU6MzJ9KTtuLlNIQTUxMj1yLl9jcmVhdGVIZWxwZXIoZSk7bi5IbWFjU0hBNTEyPXIuX2NyZWF0ZUhtYWNIZWxwZXIoZSl9KSgpO1xyXG5cbi8qXHJcbkNyeXB0b0pTIHYzLjEuMiBzaGEzODQtbWluLmpzXHJcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xyXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxyXG4qL1xyXG4oZnVuY3Rpb24oKXt2YXIgYz1DcnlwdG9KUyxhPWMueDY0LGI9YS5Xb3JkLGU9YS5Xb3JkQXJyYXksYT1jLmFsZ28sZD1hLlNIQTUxMixhPWEuU0hBMzg0PWQuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGUuaW5pdChbbmV3IGIuaW5pdCgzNDE4MDcwMzY1LDMyMzgzNzEwMzIpLG5ldyBiLmluaXQoMTY1NDI3MDI1MCw5MTQxNTA2NjMpLG5ldyBiLmluaXQoMjQzODUyOTM3MCw4MTI3MDI5OTkpLG5ldyBiLmluaXQoMzU1NDYyMzYwLDQxNDQ5MTI2OTcpLG5ldyBiLmluaXQoMTczMTQwNTQxNSw0MjkwNzc1ODU3KSxuZXcgYi5pbml0KDIzOTQxODAyMzEsMTc1MDYwMzAyNSksbmV3IGIuaW5pdCgzNjc1MDA4NTI1LDE2OTQwNzY4MzkpLG5ldyBiLmluaXQoMTIwMzA2MjgxMywzMjA0MDc1NDI4KV0pfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPWQuX2RvRmluYWxpemUuY2FsbCh0aGlzKTthLnNpZ0J5dGVzLT0xNjtyZXR1cm4gYX19KTtjLlNIQTM4ND1cclxuZC5fY3JlYXRlSGVscGVyKGEpO2MuSG1hY1NIQTM4ND1kLl9jcmVhdGVIbWFjSGVscGVyKGEpfSkoKTtcclxuXG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cclxuICovXHJcbnZhciBiNjRtYXA9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7dmFyIGI2NHBhZD1cIj1cIjtmdW5jdGlvbiBoZXgyYjY0KGQpe3ZhciBiO3ZhciBlO3ZhciBhPVwiXCI7Zm9yKGI9MDtiKzM8PWQubGVuZ3RoO2IrPTMpe2U9cGFyc2VJbnQoZC5zdWJzdHJpbmcoYixiKzMpLDE2KTthKz1iNjRtYXAuY2hhckF0KGU+PjYpK2I2NG1hcC5jaGFyQXQoZSY2Myl9aWYoYisxPT1kLmxlbmd0aCl7ZT1wYXJzZUludChkLnN1YnN0cmluZyhiLGIrMSksMTYpO2ErPWI2NG1hcC5jaGFyQXQoZTw8Mil9ZWxzZXtpZihiKzI9PWQubGVuZ3RoKXtlPXBhcnNlSW50KGQuc3Vic3RyaW5nKGIsYisyKSwxNik7YSs9YjY0bWFwLmNoYXJBdChlPj4yKStiNjRtYXAuY2hhckF0KChlJjMpPDw0KX19aWYoYjY0cGFkKXt3aGlsZSgoYS5sZW5ndGgmMyk+MCl7YSs9YjY0cGFkfX1yZXR1cm4gYX1mdW5jdGlvbiBiNjR0b2hleChmKXt2YXIgZD1cIlwiO3ZhciBlO3ZhciBiPTA7dmFyIGM7dmFyIGE7Zm9yKGU9MDtlPGYubGVuZ3RoOysrZSl7aWYoZi5jaGFyQXQoZSk9PWI2NHBhZCl7YnJlYWt9YT1iNjRtYXAuaW5kZXhPZihmLmNoYXJBdChlKSk7aWYoYTwwKXtjb250aW51ZX1pZihiPT0wKXtkKz1pbnQyY2hhcihhPj4yKTtjPWEmMztiPTF9ZWxzZXtpZihiPT0xKXtkKz1pbnQyY2hhcigoYzw8Mil8KGE+PjQpKTtjPWEmMTU7Yj0yfWVsc2V7aWYoYj09Mil7ZCs9aW50MmNoYXIoYyk7ZCs9aW50MmNoYXIoYT4+Mik7Yz1hJjM7Yj0zfWVsc2V7ZCs9aW50MmNoYXIoKGM8PDIpfChhPj40KSk7ZCs9aW50MmNoYXIoYSYxNSk7Yj0wfX19fWlmKGI9PTEpe2QrPWludDJjaGFyKGM8PDIpfXJldHVybiBkfWZ1bmN0aW9uIGI2NHRvQkEoZSl7dmFyIGQ9YjY0dG9oZXgoZSk7dmFyIGM7dmFyIGI9bmV3IEFycmF5KCk7Zm9yKGM9MDsyKmM8ZC5sZW5ndGg7KytjKXtiW2NdPXBhcnNlSW50KGQuc3Vic3RyaW5nKDIqYywyKmMrMiksMTYpfXJldHVybiBifTtcbi8qISAoYykgVG9tIFd1IHwgaHR0cDovL3d3dy1jcy1zdHVkZW50cy5zdGFuZm9yZC5lZHUvfnRqdy9qc2JuL1xyXG4gKi9cclxudmFyIGRiaXRzO3ZhciBjYW5hcnk9MjQ0ODM3ODE0MDk0NTkwO3ZhciBqX2xtPSgoY2FuYXJ5JjE2Nzc3MjE1KT09MTU3MTUwNzApO2Z1bmN0aW9uIEJpZ0ludGVnZXIoZSxkLGYpe2lmKGUhPW51bGwpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXt0aGlzLmZyb21OdW1iZXIoZSxkLGYpfWVsc2V7aWYoZD09bnVsbCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpe3RoaXMuZnJvbVN0cmluZyhlLDI1Nil9ZWxzZXt0aGlzLmZyb21TdHJpbmcoZSxkKX19fX1mdW5jdGlvbiBuYmkoKXtyZXR1cm4gbmV3IEJpZ0ludGVnZXIobnVsbCl9ZnVuY3Rpb24gYW0xKGYsYSxiLGUsaCxnKXt3aGlsZSgtLWc+PTApe3ZhciBkPWEqdGhpc1tmKytdK2JbZV0raDtoPU1hdGguZmxvb3IoZC82NzEwODg2NCk7YltlKytdPWQmNjcxMDg4NjN9cmV0dXJuIGh9ZnVuY3Rpb24gYW0yKGYscSxyLGUsbyxhKXt2YXIgaz1xJjMyNzY3LHA9cT4+MTU7d2hpbGUoLS1hPj0wKXt2YXIgZD10aGlzW2ZdJjMyNzY3O3ZhciBnPXRoaXNbZisrXT4+MTU7dmFyIGI9cCpkK2cqaztkPWsqZCsoKGImMzI3NjcpPDwxNSkrcltlXSsobyYxMDczNzQxODIzKTtvPShkPj4+MzApKyhiPj4+MTUpK3AqZysobz4+PjMwKTtyW2UrK109ZCYxMDczNzQxODIzfXJldHVybiBvfWZ1bmN0aW9uIGFtMyhmLHEscixlLG8sYSl7dmFyIGs9cSYxNjM4MyxwPXE+PjE0O3doaWxlKC0tYT49MCl7dmFyIGQ9dGhpc1tmXSYxNjM4Mzt2YXIgZz10aGlzW2YrK10+PjE0O3ZhciBiPXAqZCtnKms7ZD1rKmQrKChiJjE2MzgzKTw8MTQpK3JbZV0rbztvPShkPj4yOCkrKGI+PjE0KStwKmc7cltlKytdPWQmMjY4NDM1NDU1fXJldHVybiBvfWlmKGpfbG0mJihuYXZpZ2F0b3IuYXBwTmFtZT09XCJNaWNyb3NvZnQgSW50ZXJuZXQgRXhwbG9yZXJcIikpe0JpZ0ludGVnZXIucHJvdG90eXBlLmFtPWFtMjtkYml0cz0zMH1lbHNle2lmKGpfbG0mJihuYXZpZ2F0b3IuYXBwTmFtZSE9XCJOZXRzY2FwZVwiKSl7QmlnSW50ZWdlci5wcm90b3R5cGUuYW09YW0xO2RiaXRzPTI2fWVsc2V7QmlnSW50ZWdlci5wcm90b3R5cGUuYW09YW0zO2RiaXRzPTI4fX1CaWdJbnRlZ2VyLnByb3RvdHlwZS5EQj1kYml0cztCaWdJbnRlZ2VyLnByb3RvdHlwZS5ETT0oKDE8PGRiaXRzKS0xKTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5EVj0oMTw8ZGJpdHMpO3ZhciBCSV9GUD01MjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5GVj1NYXRoLnBvdygyLEJJX0ZQKTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5GMT1CSV9GUC1kYml0cztCaWdJbnRlZ2VyLnByb3RvdHlwZS5GMj0yKmRiaXRzLUJJX0ZQO3ZhciBCSV9STT1cIjAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiO3ZhciBCSV9SQz1uZXcgQXJyYXkoKTt2YXIgcnIsdnY7cnI9XCIwXCIuY2hhckNvZGVBdCgwKTtmb3IodnY9MDt2djw9OTsrK3Z2KXtCSV9SQ1tycisrXT12dn1ycj1cImFcIi5jaGFyQ29kZUF0KDApO2Zvcih2dj0xMDt2djwzNjsrK3Z2KXtCSV9SQ1tycisrXT12dn1ycj1cIkFcIi5jaGFyQ29kZUF0KDApO2Zvcih2dj0xMDt2djwzNjsrK3Z2KXtCSV9SQ1tycisrXT12dn1mdW5jdGlvbiBpbnQyY2hhcihhKXtyZXR1cm4gQklfUk0uY2hhckF0KGEpfWZ1bmN0aW9uIGludEF0KGIsYSl7dmFyIGQ9QklfUkNbYi5jaGFyQ29kZUF0KGEpXTtyZXR1cm4oZD09bnVsbCk/LTE6ZH1mdW5jdGlvbiBibnBDb3B5VG8oYil7Zm9yKHZhciBhPXRoaXMudC0xO2E+PTA7LS1hKXtiW2FdPXRoaXNbYV19Yi50PXRoaXMudDtiLnM9dGhpcy5zfWZ1bmN0aW9uIGJucEZyb21JbnQoYSl7dGhpcy50PTE7dGhpcy5zPShhPDApPy0xOjA7aWYoYT4wKXt0aGlzWzBdPWF9ZWxzZXtpZihhPC0xKXt0aGlzWzBdPWErdGhpcy5EVn1lbHNle3RoaXMudD0wfX19ZnVuY3Rpb24gbmJ2KGEpe3ZhciBiPW5iaSgpO2IuZnJvbUludChhKTtyZXR1cm4gYn1mdW5jdGlvbiBibnBGcm9tU3RyaW5nKGgsYyl7dmFyIGU7aWYoYz09MTYpe2U9NH1lbHNle2lmKGM9PTgpe2U9M31lbHNle2lmKGM9PTI1Nil7ZT04fWVsc2V7aWYoYz09Mil7ZT0xfWVsc2V7aWYoYz09MzIpe2U9NX1lbHNle2lmKGM9PTQpe2U9Mn1lbHNle3RoaXMuZnJvbVJhZGl4KGgsYyk7cmV0dXJufX19fX19dGhpcy50PTA7dGhpcy5zPTA7dmFyIGc9aC5sZW5ndGgsZD1mYWxzZSxmPTA7d2hpbGUoLS1nPj0wKXt2YXIgYT0oZT09OCk/aFtnXSYyNTU6aW50QXQoaCxnKTtpZihhPDApe2lmKGguY2hhckF0KGcpPT1cIi1cIil7ZD10cnVlfWNvbnRpbnVlfWQ9ZmFsc2U7aWYoZj09MCl7dGhpc1t0aGlzLnQrK109YX1lbHNle2lmKGYrZT50aGlzLkRCKXt0aGlzW3RoaXMudC0xXXw9KGEmKCgxPDwodGhpcy5EQi1mKSktMSkpPDxmO3RoaXNbdGhpcy50KytdPShhPj4odGhpcy5EQi1mKSl9ZWxzZXt0aGlzW3RoaXMudC0xXXw9YTw8Zn19Zis9ZTtpZihmPj10aGlzLkRCKXtmLT10aGlzLkRCfX1pZihlPT04JiYoaFswXSYxMjgpIT0wKXt0aGlzLnM9LTE7aWYoZj4wKXt0aGlzW3RoaXMudC0xXXw9KCgxPDwodGhpcy5EQi1mKSktMSk8PGZ9fXRoaXMuY2xhbXAoKTtpZihkKXtCaWdJbnRlZ2VyLlpFUk8uc3ViVG8odGhpcyx0aGlzKX19ZnVuY3Rpb24gYm5wQ2xhbXAoKXt2YXIgYT10aGlzLnMmdGhpcy5ETTt3aGlsZSh0aGlzLnQ+MCYmdGhpc1t0aGlzLnQtMV09PWEpey0tdGhpcy50fX1mdW5jdGlvbiBiblRvU3RyaW5nKGMpe2lmKHRoaXMuczwwKXtyZXR1cm5cIi1cIit0aGlzLm5lZ2F0ZSgpLnRvU3RyaW5nKGMpfXZhciBlO2lmKGM9PTE2KXtlPTR9ZWxzZXtpZihjPT04KXtlPTN9ZWxzZXtpZihjPT0yKXtlPTF9ZWxzZXtpZihjPT0zMil7ZT01fWVsc2V7aWYoYz09NCl7ZT0yfWVsc2V7cmV0dXJuIHRoaXMudG9SYWRpeChjKX19fX19dmFyIGc9KDE8PGUpLTEsbCxhPWZhbHNlLGg9XCJcIixmPXRoaXMudDt2YXIgaj10aGlzLkRCLShmKnRoaXMuREIpJWU7aWYoZi0tPjApe2lmKGo8dGhpcy5EQiYmKGw9dGhpc1tmXT4+aik+MCl7YT10cnVlO2g9aW50MmNoYXIobCl9d2hpbGUoZj49MCl7aWYoajxlKXtsPSh0aGlzW2ZdJigoMTw8aiktMSkpPDwoZS1qKTtsfD10aGlzWy0tZl0+PihqKz10aGlzLkRCLWUpfWVsc2V7bD0odGhpc1tmXT4+KGotPWUpKSZnO2lmKGo8PTApe2orPXRoaXMuREI7LS1mfX1pZihsPjApe2E9dHJ1ZX1pZihhKXtoKz1pbnQyY2hhcihsKX19fXJldHVybiBhP2g6XCIwXCJ9ZnVuY3Rpb24gYm5OZWdhdGUoKXt2YXIgYT1uYmkoKTtCaWdJbnRlZ2VyLlpFUk8uc3ViVG8odGhpcyxhKTtyZXR1cm4gYX1mdW5jdGlvbiBibkFicygpe3JldHVybih0aGlzLnM8MCk/dGhpcy5uZWdhdGUoKTp0aGlzfWZ1bmN0aW9uIGJuQ29tcGFyZVRvKGIpe3ZhciBkPXRoaXMucy1iLnM7aWYoZCE9MCl7cmV0dXJuIGR9dmFyIGM9dGhpcy50O2Q9Yy1iLnQ7aWYoZCE9MCl7cmV0dXJuKHRoaXMuczwwKT8tZDpkfXdoaWxlKC0tYz49MCl7aWYoKGQ9dGhpc1tjXS1iW2NdKSE9MCl7cmV0dXJuIGR9fXJldHVybiAwfWZ1bmN0aW9uIG5iaXRzKGEpe3ZhciBjPTEsYjtpZigoYj1hPj4+MTYpIT0wKXthPWI7Yys9MTZ9aWYoKGI9YT4+OCkhPTApe2E9YjtjKz04fWlmKChiPWE+PjQpIT0wKXthPWI7Yys9NH1pZigoYj1hPj4yKSE9MCl7YT1iO2MrPTJ9aWYoKGI9YT4+MSkhPTApe2E9YjtjKz0xfXJldHVybiBjfWZ1bmN0aW9uIGJuQml0TGVuZ3RoKCl7aWYodGhpcy50PD0wKXtyZXR1cm4gMH1yZXR1cm4gdGhpcy5EQioodGhpcy50LTEpK25iaXRzKHRoaXNbdGhpcy50LTFdXih0aGlzLnMmdGhpcy5ETSkpfWZ1bmN0aW9uIGJucERMU2hpZnRUbyhjLGIpe3ZhciBhO2ZvcihhPXRoaXMudC0xO2E+PTA7LS1hKXtiW2ErY109dGhpc1thXX1mb3IoYT1jLTE7YT49MDstLWEpe2JbYV09MH1iLnQ9dGhpcy50K2M7Yi5zPXRoaXMuc31mdW5jdGlvbiBibnBEUlNoaWZ0VG8oYyxiKXtmb3IodmFyIGE9YzthPHRoaXMudDsrK2Epe2JbYS1jXT10aGlzW2FdfWIudD1NYXRoLm1heCh0aGlzLnQtYywwKTtiLnM9dGhpcy5zfWZ1bmN0aW9uIGJucExTaGlmdFRvKGosZSl7dmFyIGI9aiV0aGlzLkRCO3ZhciBhPXRoaXMuREItYjt2YXIgZz0oMTw8YSktMTt2YXIgZj1NYXRoLmZsb29yKGovdGhpcy5EQiksaD0odGhpcy5zPDxiKSZ0aGlzLkRNLGQ7Zm9yKGQ9dGhpcy50LTE7ZD49MDstLWQpe2VbZCtmKzFdPSh0aGlzW2RdPj5hKXxoO2g9KHRoaXNbZF0mZyk8PGJ9Zm9yKGQ9Zi0xO2Q+PTA7LS1kKXtlW2RdPTB9ZVtmXT1oO2UudD10aGlzLnQrZisxO2Uucz10aGlzLnM7ZS5jbGFtcCgpfWZ1bmN0aW9uIGJucFJTaGlmdFRvKGcsZCl7ZC5zPXRoaXMuczt2YXIgZT1NYXRoLmZsb29yKGcvdGhpcy5EQik7aWYoZT49dGhpcy50KXtkLnQ9MDtyZXR1cm59dmFyIGI9ZyV0aGlzLkRCO3ZhciBhPXRoaXMuREItYjt2YXIgZj0oMTw8YiktMTtkWzBdPXRoaXNbZV0+PmI7Zm9yKHZhciBjPWUrMTtjPHRoaXMudDsrK2Mpe2RbYy1lLTFdfD0odGhpc1tjXSZmKTw8YTtkW2MtZV09dGhpc1tjXT4+Yn1pZihiPjApe2RbdGhpcy50LWUtMV18PSh0aGlzLnMmZik8PGF9ZC50PXRoaXMudC1lO2QuY2xhbXAoKX1mdW5jdGlvbiBibnBTdWJUbyhkLGYpe3ZhciBlPTAsZz0wLGI9TWF0aC5taW4oZC50LHRoaXMudCk7d2hpbGUoZTxiKXtnKz10aGlzW2VdLWRbZV07ZltlKytdPWcmdGhpcy5ETTtnPj49dGhpcy5EQn1pZihkLnQ8dGhpcy50KXtnLT1kLnM7d2hpbGUoZTx0aGlzLnQpe2crPXRoaXNbZV07ZltlKytdPWcmdGhpcy5ETTtnPj49dGhpcy5EQn1nKz10aGlzLnN9ZWxzZXtnKz10aGlzLnM7d2hpbGUoZTxkLnQpe2ctPWRbZV07ZltlKytdPWcmdGhpcy5ETTtnPj49dGhpcy5EQn1nLT1kLnN9Zi5zPShnPDApPy0xOjA7aWYoZzwtMSl7ZltlKytdPXRoaXMuRFYrZ31lbHNle2lmKGc+MCl7ZltlKytdPWd9fWYudD1lO2YuY2xhbXAoKX1mdW5jdGlvbiBibnBNdWx0aXBseVRvKGMsZSl7dmFyIGI9dGhpcy5hYnMoKSxmPWMuYWJzKCk7dmFyIGQ9Yi50O2UudD1kK2YudDt3aGlsZSgtLWQ+PTApe2VbZF09MH1mb3IoZD0wO2Q8Zi50OysrZCl7ZVtkK2IudF09Yi5hbSgwLGZbZF0sZSxkLDAsYi50KX1lLnM9MDtlLmNsYW1wKCk7aWYodGhpcy5zIT1jLnMpe0JpZ0ludGVnZXIuWkVSTy5zdWJUbyhlLGUpfX1mdW5jdGlvbiBibnBTcXVhcmVUbyhkKXt2YXIgYT10aGlzLmFicygpO3ZhciBiPWQudD0yKmEudDt3aGlsZSgtLWI+PTApe2RbYl09MH1mb3IoYj0wO2I8YS50LTE7KytiKXt2YXIgZT1hLmFtKGIsYVtiXSxkLDIqYiwwLDEpO2lmKChkW2IrYS50XSs9YS5hbShiKzEsMiphW2JdLGQsMipiKzEsZSxhLnQtYi0xKSk+PWEuRFYpe2RbYithLnRdLT1hLkRWO2RbYithLnQrMV09MX19aWYoZC50PjApe2RbZC50LTFdKz1hLmFtKGIsYVtiXSxkLDIqYiwwLDEpfWQucz0wO2QuY2xhbXAoKX1mdW5jdGlvbiBibnBEaXZSZW1UbyhuLGgsZyl7dmFyIHc9bi5hYnMoKTtpZih3LnQ8PTApe3JldHVybn12YXIgaz10aGlzLmFicygpO2lmKGsudDx3LnQpe2lmKGghPW51bGwpe2guZnJvbUludCgwKX1pZihnIT1udWxsKXt0aGlzLmNvcHlUbyhnKX1yZXR1cm59aWYoZz09bnVsbCl7Zz1uYmkoKX12YXIgZD1uYmkoKSxhPXRoaXMucyxsPW4uczt2YXIgdj10aGlzLkRCLW5iaXRzKHdbdy50LTFdKTtpZih2PjApe3cubFNoaWZ0VG8odixkKTtrLmxTaGlmdFRvKHYsZyl9ZWxzZXt3LmNvcHlUbyhkKTtrLmNvcHlUbyhnKX12YXIgcD1kLnQ7dmFyIGI9ZFtwLTFdO2lmKGI9PTApe3JldHVybn12YXIgbz1iKigxPDx0aGlzLkYxKSsoKHA+MSk/ZFtwLTJdPj50aGlzLkYyOjApO3ZhciBBPXRoaXMuRlYvbyx6PSgxPDx0aGlzLkYxKS9vLHg9MTw8dGhpcy5GMjt2YXIgdT1nLnQscz11LXAsZj0oaD09bnVsbCk/bmJpKCk6aDtkLmRsU2hpZnRUbyhzLGYpO2lmKGcuY29tcGFyZVRvKGYpPj0wKXtnW2cudCsrXT0xO2cuc3ViVG8oZixnKX1CaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8ocCxmKTtmLnN1YlRvKGQsZCk7d2hpbGUoZC50PHApe2RbZC50KytdPTB9d2hpbGUoLS1zPj0wKXt2YXIgYz0oZ1stLXVdPT1iKT90aGlzLkRNOk1hdGguZmxvb3IoZ1t1XSpBKyhnW3UtMV0reCkqeik7aWYoKGdbdV0rPWQuYW0oMCxjLGcscywwLHApKTxjKXtkLmRsU2hpZnRUbyhzLGYpO2cuc3ViVG8oZixnKTt3aGlsZShnW3VdPC0tYyl7Zy5zdWJUbyhmLGcpfX19aWYoaCE9bnVsbCl7Zy5kclNoaWZ0VG8ocCxoKTtpZihhIT1sKXtCaWdJbnRlZ2VyLlpFUk8uc3ViVG8oaCxoKX19Zy50PXA7Zy5jbGFtcCgpO2lmKHY+MCl7Zy5yU2hpZnRUbyh2LGcpfWlmKGE8MCl7QmlnSW50ZWdlci5aRVJPLnN1YlRvKGcsZyl9fWZ1bmN0aW9uIGJuTW9kKGIpe3ZhciBjPW5iaSgpO3RoaXMuYWJzKCkuZGl2UmVtVG8oYixudWxsLGMpO2lmKHRoaXMuczwwJiZjLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pPjApe2Iuc3ViVG8oYyxjKX1yZXR1cm4gY31mdW5jdGlvbiBDbGFzc2ljKGEpe3RoaXMubT1hfWZ1bmN0aW9uIGNDb252ZXJ0KGEpe2lmKGEuczwwfHxhLmNvbXBhcmVUbyh0aGlzLm0pPj0wKXtyZXR1cm4gYS5tb2QodGhpcy5tKX1lbHNle3JldHVybiBhfX1mdW5jdGlvbiBjUmV2ZXJ0KGEpe3JldHVybiBhfWZ1bmN0aW9uIGNSZWR1Y2UoYSl7YS5kaXZSZW1Ubyh0aGlzLm0sbnVsbCxhKX1mdW5jdGlvbiBjTXVsVG8oYSxjLGIpe2EubXVsdGlwbHlUbyhjLGIpO3RoaXMucmVkdWNlKGIpfWZ1bmN0aW9uIGNTcXJUbyhhLGIpe2Euc3F1YXJlVG8oYik7dGhpcy5yZWR1Y2UoYil9Q2xhc3NpYy5wcm90b3R5cGUuY29udmVydD1jQ29udmVydDtDbGFzc2ljLnByb3RvdHlwZS5yZXZlcnQ9Y1JldmVydDtDbGFzc2ljLnByb3RvdHlwZS5yZWR1Y2U9Y1JlZHVjZTtDbGFzc2ljLnByb3RvdHlwZS5tdWxUbz1jTXVsVG87Q2xhc3NpYy5wcm90b3R5cGUuc3FyVG89Y1NxclRvO2Z1bmN0aW9uIGJucEludkRpZ2l0KCl7aWYodGhpcy50PDEpe3JldHVybiAwfXZhciBhPXRoaXNbMF07aWYoKGEmMSk9PTApe3JldHVybiAwfXZhciBiPWEmMztiPShiKigyLShhJjE1KSpiKSkmMTU7Yj0oYiooMi0oYSYyNTUpKmIpKSYyNTU7Yj0oYiooMi0oKChhJjY1NTM1KSpiKSY2NTUzNSkpKSY2NTUzNTtiPShiKigyLWEqYiV0aGlzLkRWKSkldGhpcy5EVjtyZXR1cm4oYj4wKT90aGlzLkRWLWI6LWJ9ZnVuY3Rpb24gTW9udGdvbWVyeShhKXt0aGlzLm09YTt0aGlzLm1wPWEuaW52RGlnaXQoKTt0aGlzLm1wbD10aGlzLm1wJjMyNzY3O3RoaXMubXBoPXRoaXMubXA+PjE1O3RoaXMudW09KDE8PChhLkRCLTE1KSktMTt0aGlzLm10Mj0yKmEudH1mdW5jdGlvbiBtb250Q29udmVydChhKXt2YXIgYj1uYmkoKTthLmFicygpLmRsU2hpZnRUbyh0aGlzLm0udCxiKTtiLmRpdlJlbVRvKHRoaXMubSxudWxsLGIpO2lmKGEuczwwJiZiLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pPjApe3RoaXMubS5zdWJUbyhiLGIpfXJldHVybiBifWZ1bmN0aW9uIG1vbnRSZXZlcnQoYSl7dmFyIGI9bmJpKCk7YS5jb3B5VG8oYik7dGhpcy5yZWR1Y2UoYik7cmV0dXJuIGJ9ZnVuY3Rpb24gbW9udFJlZHVjZShhKXt3aGlsZShhLnQ8PXRoaXMubXQyKXthW2EudCsrXT0wfWZvcih2YXIgYz0wO2M8dGhpcy5tLnQ7KytjKXt2YXIgYj1hW2NdJjMyNzY3O3ZhciBkPShiKnRoaXMubXBsKygoKGIqdGhpcy5tcGgrKGFbY10+PjE1KSp0aGlzLm1wbCkmdGhpcy51bSk8PDE1KSkmYS5ETTtiPWMrdGhpcy5tLnQ7YVtiXSs9dGhpcy5tLmFtKDAsZCxhLGMsMCx0aGlzLm0udCk7d2hpbGUoYVtiXT49YS5EVil7YVtiXS09YS5EVjthWysrYl0rK319YS5jbGFtcCgpO2EuZHJTaGlmdFRvKHRoaXMubS50LGEpO2lmKGEuY29tcGFyZVRvKHRoaXMubSk+PTApe2Euc3ViVG8odGhpcy5tLGEpfX1mdW5jdGlvbiBtb250U3FyVG8oYSxiKXthLnNxdWFyZVRvKGIpO3RoaXMucmVkdWNlKGIpfWZ1bmN0aW9uIG1vbnRNdWxUbyhhLGMsYil7YS5tdWx0aXBseVRvKGMsYik7dGhpcy5yZWR1Y2UoYil9TW9udGdvbWVyeS5wcm90b3R5cGUuY29udmVydD1tb250Q29udmVydDtNb250Z29tZXJ5LnByb3RvdHlwZS5yZXZlcnQ9bW9udFJldmVydDtNb250Z29tZXJ5LnByb3RvdHlwZS5yZWR1Y2U9bW9udFJlZHVjZTtNb250Z29tZXJ5LnByb3RvdHlwZS5tdWxUbz1tb250TXVsVG87TW9udGdvbWVyeS5wcm90b3R5cGUuc3FyVG89bW9udFNxclRvO2Z1bmN0aW9uIGJucElzRXZlbigpe3JldHVybigodGhpcy50PjApPyh0aGlzWzBdJjEpOnRoaXMucyk9PTB9ZnVuY3Rpb24gYm5wRXhwKGgsail7aWYoaD40Mjk0OTY3Mjk1fHxoPDEpe3JldHVybiBCaWdJbnRlZ2VyLk9ORX12YXIgZj1uYmkoKSxhPW5iaSgpLGQ9ai5jb252ZXJ0KHRoaXMpLGM9bmJpdHMoaCktMTtkLmNvcHlUbyhmKTt3aGlsZSgtLWM+PTApe2ouc3FyVG8oZixhKTtpZigoaCYoMTw8YykpPjApe2oubXVsVG8oYSxkLGYpfWVsc2V7dmFyIGI9ZjtmPWE7YT1ifX1yZXR1cm4gai5yZXZlcnQoZil9ZnVuY3Rpb24gYm5Nb2RQb3dJbnQoYixhKXt2YXIgYztpZihiPDI1Nnx8YS5pc0V2ZW4oKSl7Yz1uZXcgQ2xhc3NpYyhhKX1lbHNle2M9bmV3IE1vbnRnb21lcnkoYSl9cmV0dXJuIHRoaXMuZXhwKGIsYyl9QmlnSW50ZWdlci5wcm90b3R5cGUuY29weVRvPWJucENvcHlUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tSW50PWJucEZyb21JbnQ7QmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbVN0cmluZz1ibnBGcm9tU3RyaW5nO0JpZ0ludGVnZXIucHJvdG90eXBlLmNsYW1wPWJucENsYW1wO0JpZ0ludGVnZXIucHJvdG90eXBlLmRsU2hpZnRUbz1ibnBETFNoaWZ0VG87QmlnSW50ZWdlci5wcm90b3R5cGUuZHJTaGlmdFRvPWJucERSU2hpZnRUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5sU2hpZnRUbz1ibnBMU2hpZnRUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5yU2hpZnRUbz1ibnBSU2hpZnRUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5zdWJUbz1ibnBTdWJUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseVRvPWJucE11bHRpcGx5VG87QmlnSW50ZWdlci5wcm90b3R5cGUuc3F1YXJlVG89Ym5wU3F1YXJlVG87QmlnSW50ZWdlci5wcm90b3R5cGUuZGl2UmVtVG89Ym5wRGl2UmVtVG87QmlnSW50ZWdlci5wcm90b3R5cGUuaW52RGlnaXQ9Ym5wSW52RGlnaXQ7QmlnSW50ZWdlci5wcm90b3R5cGUuaXNFdmVuPWJucElzRXZlbjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5leHA9Ym5wRXhwO0JpZ0ludGVnZXIucHJvdG90eXBlLnRvU3RyaW5nPWJuVG9TdHJpbmc7QmlnSW50ZWdlci5wcm90b3R5cGUubmVnYXRlPWJuTmVnYXRlO0JpZ0ludGVnZXIucHJvdG90eXBlLmFicz1ibkFicztCaWdJbnRlZ2VyLnByb3RvdHlwZS5jb21wYXJlVG89Ym5Db21wYXJlVG87QmlnSW50ZWdlci5wcm90b3R5cGUuYml0TGVuZ3RoPWJuQml0TGVuZ3RoO0JpZ0ludGVnZXIucHJvdG90eXBlLm1vZD1ibk1vZDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3dJbnQ9Ym5Nb2RQb3dJbnQ7QmlnSW50ZWdlci5aRVJPPW5idigwKTtCaWdJbnRlZ2VyLk9ORT1uYnYoMSk7XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cclxuICovXHJcbmZ1bmN0aW9uIGJuQ2xvbmUoKXt2YXIgYT1uYmkoKTt0aGlzLmNvcHlUbyhhKTtyZXR1cm4gYX1mdW5jdGlvbiBibkludFZhbHVlKCl7aWYodGhpcy5zPDApe2lmKHRoaXMudD09MSl7cmV0dXJuIHRoaXNbMF0tdGhpcy5EVn1lbHNle2lmKHRoaXMudD09MCl7cmV0dXJuIC0xfX19ZWxzZXtpZih0aGlzLnQ9PTEpe3JldHVybiB0aGlzWzBdfWVsc2V7aWYodGhpcy50PT0wKXtyZXR1cm4gMH19fXJldHVybigodGhpc1sxXSYoKDE8PCgzMi10aGlzLkRCKSktMSkpPDx0aGlzLkRCKXx0aGlzWzBdfWZ1bmN0aW9uIGJuQnl0ZVZhbHVlKCl7cmV0dXJuKHRoaXMudD09MCk/dGhpcy5zOih0aGlzWzBdPDwyNCk+PjI0fWZ1bmN0aW9uIGJuU2hvcnRWYWx1ZSgpe3JldHVybih0aGlzLnQ9PTApP3RoaXMuczoodGhpc1swXTw8MTYpPj4xNn1mdW5jdGlvbiBibnBDaHVua1NpemUoYSl7cmV0dXJuIE1hdGguZmxvb3IoTWF0aC5MTjIqdGhpcy5EQi9NYXRoLmxvZyhhKSl9ZnVuY3Rpb24gYm5TaWdOdW0oKXtpZih0aGlzLnM8MCl7cmV0dXJuIC0xfWVsc2V7aWYodGhpcy50PD0wfHwodGhpcy50PT0xJiZ0aGlzWzBdPD0wKSl7cmV0dXJuIDB9ZWxzZXtyZXR1cm4gMX19fWZ1bmN0aW9uIGJucFRvUmFkaXgoYyl7aWYoYz09bnVsbCl7Yz0xMH1pZih0aGlzLnNpZ251bSgpPT0wfHxjPDJ8fGM+MzYpe3JldHVyblwiMFwifXZhciBmPXRoaXMuY2h1bmtTaXplKGMpO3ZhciBlPU1hdGgucG93KGMsZik7dmFyIGk9bmJ2KGUpLGo9bmJpKCksaD1uYmkoKSxnPVwiXCI7dGhpcy5kaXZSZW1UbyhpLGosaCk7d2hpbGUoai5zaWdudW0oKT4wKXtnPShlK2guaW50VmFsdWUoKSkudG9TdHJpbmcoYykuc3Vic3RyKDEpK2c7ai5kaXZSZW1UbyhpLGosaCl9cmV0dXJuIGguaW50VmFsdWUoKS50b1N0cmluZyhjKStnfWZ1bmN0aW9uIGJucEZyb21SYWRpeChtLGgpe3RoaXMuZnJvbUludCgwKTtpZihoPT1udWxsKXtoPTEwfXZhciBmPXRoaXMuY2h1bmtTaXplKGgpO3ZhciBnPU1hdGgucG93KGgsZiksZT1mYWxzZSxhPTAsbD0wO2Zvcih2YXIgYz0wO2M8bS5sZW5ndGg7KytjKXt2YXIgaz1pbnRBdChtLGMpO2lmKGs8MCl7aWYobS5jaGFyQXQoYyk9PVwiLVwiJiZ0aGlzLnNpZ251bSgpPT0wKXtlPXRydWV9Y29udGludWV9bD1oKmwraztpZigrK2E+PWYpe3RoaXMuZE11bHRpcGx5KGcpO3RoaXMuZEFkZE9mZnNldChsLDApO2E9MDtsPTB9fWlmKGE+MCl7dGhpcy5kTXVsdGlwbHkoTWF0aC5wb3coaCxhKSk7dGhpcy5kQWRkT2Zmc2V0KGwsMCl9aWYoZSl7QmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsdGhpcyl9fWZ1bmN0aW9uIGJucEZyb21OdW1iZXIoZixlLGgpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXtpZihmPDIpe3RoaXMuZnJvbUludCgxKX1lbHNle3RoaXMuZnJvbU51bWJlcihmLGgpO2lmKCF0aGlzLnRlc3RCaXQoZi0xKSl7dGhpcy5iaXR3aXNlVG8oQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KGYtMSksb3Bfb3IsdGhpcyl9aWYodGhpcy5pc0V2ZW4oKSl7dGhpcy5kQWRkT2Zmc2V0KDEsMCl9d2hpbGUoIXRoaXMuaXNQcm9iYWJsZVByaW1lKGUpKXt0aGlzLmRBZGRPZmZzZXQoMiwwKTtpZih0aGlzLmJpdExlbmd0aCgpPmYpe3RoaXMuc3ViVG8oQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KGYtMSksdGhpcyl9fX19ZWxzZXt2YXIgZD1uZXcgQXJyYXkoKSxnPWYmNztkLmxlbmd0aD0oZj4+MykrMTtlLm5leHRCeXRlcyhkKTtpZihnPjApe2RbMF0mPSgoMTw8ZyktMSl9ZWxzZXtkWzBdPTB9dGhpcy5mcm9tU3RyaW5nKGQsMjU2KX19ZnVuY3Rpb24gYm5Ub0J5dGVBcnJheSgpe3ZhciBiPXRoaXMudCxjPW5ldyBBcnJheSgpO2NbMF09dGhpcy5zO3ZhciBlPXRoaXMuREItKGIqdGhpcy5EQiklOCxmLGE9MDtpZihiLS0+MCl7aWYoZTx0aGlzLkRCJiYoZj10aGlzW2JdPj5lKSE9KHRoaXMucyZ0aGlzLkRNKT4+ZSl7Y1thKytdPWZ8KHRoaXMuczw8KHRoaXMuREItZSkpfXdoaWxlKGI+PTApe2lmKGU8OCl7Zj0odGhpc1tiXSYoKDE8PGUpLTEpKTw8KDgtZSk7Znw9dGhpc1stLWJdPj4oZSs9dGhpcy5EQi04KX1lbHNle2Y9KHRoaXNbYl0+PihlLT04KSkmMjU1O2lmKGU8PTApe2UrPXRoaXMuREI7LS1ifX1pZigoZiYxMjgpIT0wKXtmfD0tMjU2fWlmKGE9PTAmJih0aGlzLnMmMTI4KSE9KGYmMTI4KSl7KythfWlmKGE+MHx8ZiE9dGhpcy5zKXtjW2ErK109Zn19fXJldHVybiBjfWZ1bmN0aW9uIGJuRXF1YWxzKGIpe3JldHVybih0aGlzLmNvbXBhcmVUbyhiKT09MCl9ZnVuY3Rpb24gYm5NaW4oYil7cmV0dXJuKHRoaXMuY29tcGFyZVRvKGIpPDApP3RoaXM6Yn1mdW5jdGlvbiBibk1heChiKXtyZXR1cm4odGhpcy5jb21wYXJlVG8oYik+MCk/dGhpczpifWZ1bmN0aW9uIGJucEJpdHdpc2VUbyhjLGgsZSl7dmFyIGQsZyxiPU1hdGgubWluKGMudCx0aGlzLnQpO2ZvcihkPTA7ZDxiOysrZCl7ZVtkXT1oKHRoaXNbZF0sY1tkXSl9aWYoYy50PHRoaXMudCl7Zz1jLnMmdGhpcy5ETTtmb3IoZD1iO2Q8dGhpcy50OysrZCl7ZVtkXT1oKHRoaXNbZF0sZyl9ZS50PXRoaXMudH1lbHNle2c9dGhpcy5zJnRoaXMuRE07Zm9yKGQ9YjtkPGMudDsrK2Qpe2VbZF09aChnLGNbZF0pfWUudD1jLnR9ZS5zPWgodGhpcy5zLGMucyk7ZS5jbGFtcCgpfWZ1bmN0aW9uIG9wX2FuZChhLGIpe3JldHVybiBhJmJ9ZnVuY3Rpb24gYm5BbmQoYil7dmFyIGM9bmJpKCk7dGhpcy5iaXR3aXNlVG8oYixvcF9hbmQsYyk7cmV0dXJuIGN9ZnVuY3Rpb24gb3Bfb3IoYSxiKXtyZXR1cm4gYXxifWZ1bmN0aW9uIGJuT3IoYil7dmFyIGM9bmJpKCk7dGhpcy5iaXR3aXNlVG8oYixvcF9vcixjKTtyZXR1cm4gY31mdW5jdGlvbiBvcF94b3IoYSxiKXtyZXR1cm4gYV5ifWZ1bmN0aW9uIGJuWG9yKGIpe3ZhciBjPW5iaSgpO3RoaXMuYml0d2lzZVRvKGIsb3BfeG9yLGMpO3JldHVybiBjfWZ1bmN0aW9uIG9wX2FuZG5vdChhLGIpe3JldHVybiBhJn5ifWZ1bmN0aW9uIGJuQW5kTm90KGIpe3ZhciBjPW5iaSgpO3RoaXMuYml0d2lzZVRvKGIsb3BfYW5kbm90LGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuTm90KCl7dmFyIGI9bmJpKCk7Zm9yKHZhciBhPTA7YTx0aGlzLnQ7KythKXtiW2FdPXRoaXMuRE0mfnRoaXNbYV19Yi50PXRoaXMudDtiLnM9fnRoaXMucztyZXR1cm4gYn1mdW5jdGlvbiBiblNoaWZ0TGVmdChiKXt2YXIgYT1uYmkoKTtpZihiPDApe3RoaXMuclNoaWZ0VG8oLWIsYSl9ZWxzZXt0aGlzLmxTaGlmdFRvKGIsYSl9cmV0dXJuIGF9ZnVuY3Rpb24gYm5TaGlmdFJpZ2h0KGIpe3ZhciBhPW5iaSgpO2lmKGI8MCl7dGhpcy5sU2hpZnRUbygtYixhKX1lbHNle3RoaXMuclNoaWZ0VG8oYixhKX1yZXR1cm4gYX1mdW5jdGlvbiBsYml0KGEpe2lmKGE9PTApe3JldHVybiAtMX12YXIgYj0wO2lmKChhJjY1NTM1KT09MCl7YT4+PTE2O2IrPTE2fWlmKChhJjI1NSk9PTApe2E+Pj04O2IrPTh9aWYoKGEmMTUpPT0wKXthPj49NDtiKz00fWlmKChhJjMpPT0wKXthPj49MjtiKz0yfWlmKChhJjEpPT0wKXsrK2J9cmV0dXJuIGJ9ZnVuY3Rpb24gYm5HZXRMb3dlc3RTZXRCaXQoKXtmb3IodmFyIGE9MDthPHRoaXMudDsrK2Epe2lmKHRoaXNbYV0hPTApe3JldHVybiBhKnRoaXMuREIrbGJpdCh0aGlzW2FdKX19aWYodGhpcy5zPDApe3JldHVybiB0aGlzLnQqdGhpcy5EQn1yZXR1cm4gLTF9ZnVuY3Rpb24gY2JpdChhKXt2YXIgYj0wO3doaWxlKGEhPTApe2EmPWEtMTsrK2J9cmV0dXJuIGJ9ZnVuY3Rpb24gYm5CaXRDb3VudCgpe3ZhciBjPTAsYT10aGlzLnMmdGhpcy5ETTtmb3IodmFyIGI9MDtiPHRoaXMudDsrK2Ipe2MrPWNiaXQodGhpc1tiXV5hKX1yZXR1cm4gY31mdW5jdGlvbiBiblRlc3RCaXQoYil7dmFyIGE9TWF0aC5mbG9vcihiL3RoaXMuREIpO2lmKGE+PXRoaXMudCl7cmV0dXJuKHRoaXMucyE9MCl9cmV0dXJuKCh0aGlzW2FdJigxPDwoYiV0aGlzLkRCKSkpIT0wKX1mdW5jdGlvbiBibnBDaGFuZ2VCaXQoYyxiKXt2YXIgYT1CaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYyk7dGhpcy5iaXR3aXNlVG8oYSxiLGEpO3JldHVybiBhfWZ1bmN0aW9uIGJuU2V0Qml0KGEpe3JldHVybiB0aGlzLmNoYW5nZUJpdChhLG9wX29yKX1mdW5jdGlvbiBibkNsZWFyQml0KGEpe3JldHVybiB0aGlzLmNoYW5nZUJpdChhLG9wX2FuZG5vdCl9ZnVuY3Rpb24gYm5GbGlwQml0KGEpe3JldHVybiB0aGlzLmNoYW5nZUJpdChhLG9wX3hvcil9ZnVuY3Rpb24gYm5wQWRkVG8oZCxmKXt2YXIgZT0wLGc9MCxiPU1hdGgubWluKGQudCx0aGlzLnQpO3doaWxlKGU8Yil7Zys9dGhpc1tlXStkW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9aWYoZC50PHRoaXMudCl7Zys9ZC5zO3doaWxlKGU8dGhpcy50KXtnKz10aGlzW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9Zys9dGhpcy5zfWVsc2V7Zys9dGhpcy5zO3doaWxlKGU8ZC50KXtnKz1kW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9Zys9ZC5zfWYucz0oZzwwKT8tMTowO2lmKGc+MCl7ZltlKytdPWd9ZWxzZXtpZihnPC0xKXtmW2UrK109dGhpcy5EVitnfX1mLnQ9ZTtmLmNsYW1wKCl9ZnVuY3Rpb24gYm5BZGQoYil7dmFyIGM9bmJpKCk7dGhpcy5hZGRUbyhiLGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuU3VidHJhY3QoYil7dmFyIGM9bmJpKCk7dGhpcy5zdWJUbyhiLGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuTXVsdGlwbHkoYil7dmFyIGM9bmJpKCk7dGhpcy5tdWx0aXBseVRvKGIsYyk7cmV0dXJuIGN9ZnVuY3Rpb24gYm5TcXVhcmUoKXt2YXIgYT1uYmkoKTt0aGlzLnNxdWFyZVRvKGEpO3JldHVybiBhfWZ1bmN0aW9uIGJuRGl2aWRlKGIpe3ZhciBjPW5iaSgpO3RoaXMuZGl2UmVtVG8oYixjLG51bGwpO3JldHVybiBjfWZ1bmN0aW9uIGJuUmVtYWluZGVyKGIpe3ZhciBjPW5iaSgpO3RoaXMuZGl2UmVtVG8oYixudWxsLGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuRGl2aWRlQW5kUmVtYWluZGVyKGIpe3ZhciBkPW5iaSgpLGM9bmJpKCk7dGhpcy5kaXZSZW1UbyhiLGQsYyk7cmV0dXJuIG5ldyBBcnJheShkLGMpfWZ1bmN0aW9uIGJucERNdWx0aXBseShhKXt0aGlzW3RoaXMudF09dGhpcy5hbSgwLGEtMSx0aGlzLDAsMCx0aGlzLnQpOysrdGhpcy50O3RoaXMuY2xhbXAoKX1mdW5jdGlvbiBibnBEQWRkT2Zmc2V0KGIsYSl7aWYoYj09MCl7cmV0dXJufXdoaWxlKHRoaXMudDw9YSl7dGhpc1t0aGlzLnQrK109MH10aGlzW2FdKz1iO3doaWxlKHRoaXNbYV0+PXRoaXMuRFYpe3RoaXNbYV0tPXRoaXMuRFY7aWYoKythPj10aGlzLnQpe3RoaXNbdGhpcy50KytdPTB9Kyt0aGlzW2FdfX1mdW5jdGlvbiBOdWxsRXhwKCl7fWZ1bmN0aW9uIG5Ob3AoYSl7cmV0dXJuIGF9ZnVuY3Rpb24gbk11bFRvKGEsYyxiKXthLm11bHRpcGx5VG8oYyxiKX1mdW5jdGlvbiBuU3FyVG8oYSxiKXthLnNxdWFyZVRvKGIpfU51bGxFeHAucHJvdG90eXBlLmNvbnZlcnQ9bk5vcDtOdWxsRXhwLnByb3RvdHlwZS5yZXZlcnQ9bk5vcDtOdWxsRXhwLnByb3RvdHlwZS5tdWxUbz1uTXVsVG87TnVsbEV4cC5wcm90b3R5cGUuc3FyVG89blNxclRvO2Z1bmN0aW9uIGJuUG93KGEpe3JldHVybiB0aGlzLmV4cChhLG5ldyBOdWxsRXhwKCkpfWZ1bmN0aW9uIGJucE11bHRpcGx5TG93ZXJUbyhiLGYsZSl7dmFyIGQ9TWF0aC5taW4odGhpcy50K2IudCxmKTtlLnM9MDtlLnQ9ZDt3aGlsZShkPjApe2VbLS1kXT0wfXZhciBjO2ZvcihjPWUudC10aGlzLnQ7ZDxjOysrZCl7ZVtkK3RoaXMudF09dGhpcy5hbSgwLGJbZF0sZSxkLDAsdGhpcy50KX1mb3IoYz1NYXRoLm1pbihiLnQsZik7ZDxjOysrZCl7dGhpcy5hbSgwLGJbZF0sZSxkLDAsZi1kKX1lLmNsYW1wKCl9ZnVuY3Rpb24gYm5wTXVsdGlwbHlVcHBlclRvKGIsZSxkKXstLWU7dmFyIGM9ZC50PXRoaXMudCtiLnQtZTtkLnM9MDt3aGlsZSgtLWM+PTApe2RbY109MH1mb3IoYz1NYXRoLm1heChlLXRoaXMudCwwKTtjPGIudDsrK2Mpe2RbdGhpcy50K2MtZV09dGhpcy5hbShlLWMsYltjXSxkLDAsMCx0aGlzLnQrYy1lKX1kLmNsYW1wKCk7ZC5kclNoaWZ0VG8oMSxkKX1mdW5jdGlvbiBCYXJyZXR0KGEpe3RoaXMucjI9bmJpKCk7dGhpcy5xMz1uYmkoKTtCaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8oMiphLnQsdGhpcy5yMik7dGhpcy5tdT10aGlzLnIyLmRpdmlkZShhKTt0aGlzLm09YX1mdW5jdGlvbiBiYXJyZXR0Q29udmVydChhKXtpZihhLnM8MHx8YS50PjIqdGhpcy5tLnQpe3JldHVybiBhLm1vZCh0aGlzLm0pfWVsc2V7aWYoYS5jb21wYXJlVG8odGhpcy5tKTwwKXtyZXR1cm4gYX1lbHNle3ZhciBiPW5iaSgpO2EuY29weVRvKGIpO3RoaXMucmVkdWNlKGIpO3JldHVybiBifX19ZnVuY3Rpb24gYmFycmV0dFJldmVydChhKXtyZXR1cm4gYX1mdW5jdGlvbiBiYXJyZXR0UmVkdWNlKGEpe2EuZHJTaGlmdFRvKHRoaXMubS50LTEsdGhpcy5yMik7aWYoYS50PnRoaXMubS50KzEpe2EudD10aGlzLm0udCsxO2EuY2xhbXAoKX10aGlzLm11Lm11bHRpcGx5VXBwZXJUbyh0aGlzLnIyLHRoaXMubS50KzEsdGhpcy5xMyk7dGhpcy5tLm11bHRpcGx5TG93ZXJUbyh0aGlzLnEzLHRoaXMubS50KzEsdGhpcy5yMik7d2hpbGUoYS5jb21wYXJlVG8odGhpcy5yMik8MCl7YS5kQWRkT2Zmc2V0KDEsdGhpcy5tLnQrMSl9YS5zdWJUbyh0aGlzLnIyLGEpO3doaWxlKGEuY29tcGFyZVRvKHRoaXMubSk+PTApe2Euc3ViVG8odGhpcy5tLGEpfX1mdW5jdGlvbiBiYXJyZXR0U3FyVG8oYSxiKXthLnNxdWFyZVRvKGIpO3RoaXMucmVkdWNlKGIpfWZ1bmN0aW9uIGJhcnJldHRNdWxUbyhhLGMsYil7YS5tdWx0aXBseVRvKGMsYik7dGhpcy5yZWR1Y2UoYil9QmFycmV0dC5wcm90b3R5cGUuY29udmVydD1iYXJyZXR0Q29udmVydDtCYXJyZXR0LnByb3RvdHlwZS5yZXZlcnQ9YmFycmV0dFJldmVydDtCYXJyZXR0LnByb3RvdHlwZS5yZWR1Y2U9YmFycmV0dFJlZHVjZTtCYXJyZXR0LnByb3RvdHlwZS5tdWxUbz1iYXJyZXR0TXVsVG87QmFycmV0dC5wcm90b3R5cGUuc3FyVG89YmFycmV0dFNxclRvO2Z1bmN0aW9uIGJuTW9kUG93KHEsZil7dmFyIG89cS5iaXRMZW5ndGgoKSxoLGI9bmJ2KDEpLHY7aWYobzw9MCl7cmV0dXJuIGJ9ZWxzZXtpZihvPDE4KXtoPTF9ZWxzZXtpZihvPDQ4KXtoPTN9ZWxzZXtpZihvPDE0NCl7aD00fWVsc2V7aWYobzw3Njgpe2g9NX1lbHNle2g9Nn19fX19aWYobzw4KXt2PW5ldyBDbGFzc2ljKGYpfWVsc2V7aWYoZi5pc0V2ZW4oKSl7dj1uZXcgQmFycmV0dChmKX1lbHNle3Y9bmV3IE1vbnRnb21lcnkoZil9fXZhciBwPW5ldyBBcnJheSgpLGQ9MyxzPWgtMSxhPSgxPDxoKS0xO3BbMV09di5jb252ZXJ0KHRoaXMpO2lmKGg+MSl7dmFyIEE9bmJpKCk7di5zcXJUbyhwWzFdLEEpO3doaWxlKGQ8PWEpe3BbZF09bmJpKCk7di5tdWxUbyhBLHBbZC0yXSxwW2RdKTtkKz0yfX12YXIgbD1xLnQtMSx4LHU9dHJ1ZSxjPW5iaSgpLHk7bz1uYml0cyhxW2xdKS0xO3doaWxlKGw+PTApe2lmKG8+PXMpe3g9KHFbbF0+PihvLXMpKSZhfWVsc2V7eD0ocVtsXSYoKDE8PChvKzEpKS0xKSk8PChzLW8pO2lmKGw+MCl7eHw9cVtsLTFdPj4odGhpcy5EQitvLXMpfX1kPWg7d2hpbGUoKHgmMSk9PTApe3g+Pj0xOy0tZH1pZigoby09ZCk8MCl7bys9dGhpcy5EQjstLWx9aWYodSl7cFt4XS5jb3B5VG8oYik7dT1mYWxzZX1lbHNle3doaWxlKGQ+MSl7di5zcXJUbyhiLGMpO3Yuc3FyVG8oYyxiKTtkLT0yfWlmKGQ+MCl7di5zcXJUbyhiLGMpfWVsc2V7eT1iO2I9YztjPXl9di5tdWxUbyhjLHBbeF0sYil9d2hpbGUobD49MCYmKHFbbF0mKDE8PG8pKT09MCl7di5zcXJUbyhiLGMpO3k9YjtiPWM7Yz15O2lmKC0tbzwwKXtvPXRoaXMuREItMTstLWx9fX1yZXR1cm4gdi5yZXZlcnQoYil9ZnVuY3Rpb24gYm5HQ0QoYyl7dmFyIGI9KHRoaXMuczwwKT90aGlzLm5lZ2F0ZSgpOnRoaXMuY2xvbmUoKTt2YXIgaD0oYy5zPDApP2MubmVnYXRlKCk6Yy5jbG9uZSgpO2lmKGIuY29tcGFyZVRvKGgpPDApe3ZhciBlPWI7Yj1oO2g9ZX12YXIgZD1iLmdldExvd2VzdFNldEJpdCgpLGY9aC5nZXRMb3dlc3RTZXRCaXQoKTtpZihmPDApe3JldHVybiBifWlmKGQ8Zil7Zj1kfWlmKGY+MCl7Yi5yU2hpZnRUbyhmLGIpO2guclNoaWZ0VG8oZixoKX13aGlsZShiLnNpZ251bSgpPjApe2lmKChkPWIuZ2V0TG93ZXN0U2V0Qml0KCkpPjApe2IuclNoaWZ0VG8oZCxiKX1pZigoZD1oLmdldExvd2VzdFNldEJpdCgpKT4wKXtoLnJTaGlmdFRvKGQsaCl9aWYoYi5jb21wYXJlVG8oaCk+PTApe2Iuc3ViVG8oaCxiKTtiLnJTaGlmdFRvKDEsYil9ZWxzZXtoLnN1YlRvKGIsaCk7aC5yU2hpZnRUbygxLGgpfX1pZihmPjApe2gubFNoaWZ0VG8oZixoKX1yZXR1cm4gaH1mdW5jdGlvbiBibnBNb2RJbnQoZSl7aWYoZTw9MCl7cmV0dXJuIDB9dmFyIGM9dGhpcy5EViVlLGI9KHRoaXMuczwwKT9lLTE6MDtpZih0aGlzLnQ+MCl7aWYoYz09MCl7Yj10aGlzWzBdJWV9ZWxzZXtmb3IodmFyIGE9dGhpcy50LTE7YT49MDstLWEpe2I9KGMqYit0aGlzW2FdKSVlfX19cmV0dXJuIGJ9ZnVuY3Rpb24gYm5Nb2RJbnZlcnNlKGYpe3ZhciBqPWYuaXNFdmVuKCk7aWYoKHRoaXMuaXNFdmVuKCkmJmopfHxmLnNpZ251bSgpPT0wKXtyZXR1cm4gQmlnSW50ZWdlci5aRVJPfXZhciBpPWYuY2xvbmUoKSxoPXRoaXMuY2xvbmUoKTt2YXIgZz1uYnYoMSksZT1uYnYoMCksbD1uYnYoMCksaz1uYnYoMSk7d2hpbGUoaS5zaWdudW0oKSE9MCl7d2hpbGUoaS5pc0V2ZW4oKSl7aS5yU2hpZnRUbygxLGkpO2lmKGope2lmKCFnLmlzRXZlbigpfHwhZS5pc0V2ZW4oKSl7Zy5hZGRUbyh0aGlzLGcpO2Uuc3ViVG8oZixlKX1nLnJTaGlmdFRvKDEsZyl9ZWxzZXtpZighZS5pc0V2ZW4oKSl7ZS5zdWJUbyhmLGUpfX1lLnJTaGlmdFRvKDEsZSl9d2hpbGUoaC5pc0V2ZW4oKSl7aC5yU2hpZnRUbygxLGgpO2lmKGope2lmKCFsLmlzRXZlbigpfHwhay5pc0V2ZW4oKSl7bC5hZGRUbyh0aGlzLGwpO2suc3ViVG8oZixrKX1sLnJTaGlmdFRvKDEsbCl9ZWxzZXtpZighay5pc0V2ZW4oKSl7ay5zdWJUbyhmLGspfX1rLnJTaGlmdFRvKDEsayl9aWYoaS5jb21wYXJlVG8oaCk+PTApe2kuc3ViVG8oaCxpKTtpZihqKXtnLnN1YlRvKGwsZyl9ZS5zdWJUbyhrLGUpfWVsc2V7aC5zdWJUbyhpLGgpO2lmKGope2wuc3ViVG8oZyxsKX1rLnN1YlRvKGUsayl9fWlmKGguY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKSE9MCl7cmV0dXJuIEJpZ0ludGVnZXIuWkVST31pZihrLmNvbXBhcmVUbyhmKT49MCl7cmV0dXJuIGsuc3VidHJhY3QoZil9aWYoay5zaWdudW0oKTwwKXtrLmFkZFRvKGYsayl9ZWxzZXtyZXR1cm4ga31pZihrLnNpZ251bSgpPDApe3JldHVybiBrLmFkZChmKX1lbHNle3JldHVybiBrfX12YXIgbG93cHJpbWVzPVsyLDMsNSw3LDExLDEzLDE3LDE5LDIzLDI5LDMxLDM3LDQxLDQzLDQ3LDUzLDU5LDYxLDY3LDcxLDczLDc5LDgzLDg5LDk3LDEwMSwxMDMsMTA3LDEwOSwxMTMsMTI3LDEzMSwxMzcsMTM5LDE0OSwxNTEsMTU3LDE2MywxNjcsMTczLDE3OSwxODEsMTkxLDE5MywxOTcsMTk5LDIxMSwyMjMsMjI3LDIyOSwyMzMsMjM5LDI0MSwyNTEsMjU3LDI2MywyNjksMjcxLDI3NywyODEsMjgzLDI5MywzMDcsMzExLDMxMywzMTcsMzMxLDMzNywzNDcsMzQ5LDM1MywzNTksMzY3LDM3MywzNzksMzgzLDM4OSwzOTcsNDAxLDQwOSw0MTksNDIxLDQzMSw0MzMsNDM5LDQ0Myw0NDksNDU3LDQ2MSw0NjMsNDY3LDQ3OSw0ODcsNDkxLDQ5OSw1MDMsNTA5LDUyMSw1MjMsNTQxLDU0Nyw1NTcsNTYzLDU2OSw1NzEsNTc3LDU4Nyw1OTMsNTk5LDYwMSw2MDcsNjEzLDYxNyw2MTksNjMxLDY0MSw2NDMsNjQ3LDY1Myw2NTksNjYxLDY3Myw2NzcsNjgzLDY5MSw3MDEsNzA5LDcxOSw3MjcsNzMzLDczOSw3NDMsNzUxLDc1Nyw3NjEsNzY5LDc3Myw3ODcsNzk3LDgwOSw4MTEsODIxLDgyMyw4MjcsODI5LDgzOSw4NTMsODU3LDg1OSw4NjMsODc3LDg4MSw4ODMsODg3LDkwNyw5MTEsOTE5LDkyOSw5MzcsOTQxLDk0Nyw5NTMsOTY3LDk3MSw5NzcsOTgzLDk5MSw5OTddO3ZhciBscGxpbT0oMTw8MjYpL2xvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoLTFdO2Z1bmN0aW9uIGJuSXNQcm9iYWJsZVByaW1lKGUpe3ZhciBkLGI9dGhpcy5hYnMoKTtpZihiLnQ9PTEmJmJbMF08PWxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoLTFdKXtmb3IoZD0wO2Q8bG93cHJpbWVzLmxlbmd0aDsrK2Qpe2lmKGJbMF09PWxvd3ByaW1lc1tkXSl7cmV0dXJuIHRydWV9fXJldHVybiBmYWxzZX1pZihiLmlzRXZlbigpKXtyZXR1cm4gZmFsc2V9ZD0xO3doaWxlKGQ8bG93cHJpbWVzLmxlbmd0aCl7dmFyIGE9bG93cHJpbWVzW2RdLGM9ZCsxO3doaWxlKGM8bG93cHJpbWVzLmxlbmd0aCYmYTxscGxpbSl7YSo9bG93cHJpbWVzW2MrK119YT1iLm1vZEludChhKTt3aGlsZShkPGMpe2lmKGElbG93cHJpbWVzW2QrK109PTApe3JldHVybiBmYWxzZX19fXJldHVybiBiLm1pbGxlclJhYmluKGUpfWZ1bmN0aW9uIGJucE1pbGxlclJhYmluKGYpe3ZhciBnPXRoaXMuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpO3ZhciBjPWcuZ2V0TG93ZXN0U2V0Qml0KCk7aWYoYzw9MCl7cmV0dXJuIGZhbHNlfXZhciBoPWcuc2hpZnRSaWdodChjKTtmPShmKzEpPj4xO2lmKGY+bG93cHJpbWVzLmxlbmd0aCl7Zj1sb3dwcmltZXMubGVuZ3RofXZhciBiPW5iaSgpO2Zvcih2YXIgZT0wO2U8ZjsrK2Upe2IuZnJvbUludChsb3dwcmltZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmxvd3ByaW1lcy5sZW5ndGgpXSk7dmFyIGw9Yi5tb2RQb3coaCx0aGlzKTtpZihsLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkhPTAmJmwuY29tcGFyZVRvKGcpIT0wKXt2YXIgZD0xO3doaWxlKGQrKzxjJiZsLmNvbXBhcmVUbyhnKSE9MCl7bD1sLm1vZFBvd0ludCgyLHRoaXMpO2lmKGwuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKT09MCl7cmV0dXJuIGZhbHNlfX1pZihsLmNvbXBhcmVUbyhnKSE9MCl7cmV0dXJuIGZhbHNlfX19cmV0dXJuIHRydWV9QmlnSW50ZWdlci5wcm90b3R5cGUuY2h1bmtTaXplPWJucENodW5rU2l6ZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS50b1JhZGl4PWJucFRvUmFkaXg7QmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbVJhZGl4PWJucEZyb21SYWRpeDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tTnVtYmVyPWJucEZyb21OdW1iZXI7QmlnSW50ZWdlci5wcm90b3R5cGUuYml0d2lzZVRvPWJucEJpdHdpc2VUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5jaGFuZ2VCaXQ9Ym5wQ2hhbmdlQml0O0JpZ0ludGVnZXIucHJvdG90eXBlLmFkZFRvPWJucEFkZFRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmRNdWx0aXBseT1ibnBETXVsdGlwbHk7QmlnSW50ZWdlci5wcm90b3R5cGUuZEFkZE9mZnNldD1ibnBEQWRkT2Zmc2V0O0JpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5TG93ZXJUbz1ibnBNdWx0aXBseUxvd2VyVG87QmlnSW50ZWdlci5wcm90b3R5cGUubXVsdGlwbHlVcHBlclRvPWJucE11bHRpcGx5VXBwZXJUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RJbnQ9Ym5wTW9kSW50O0JpZ0ludGVnZXIucHJvdG90eXBlLm1pbGxlclJhYmluPWJucE1pbGxlclJhYmluO0JpZ0ludGVnZXIucHJvdG90eXBlLmNsb25lPWJuQ2xvbmU7QmlnSW50ZWdlci5wcm90b3R5cGUuaW50VmFsdWU9Ym5JbnRWYWx1ZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5ieXRlVmFsdWU9Ym5CeXRlVmFsdWU7QmlnSW50ZWdlci5wcm90b3R5cGUuc2hvcnRWYWx1ZT1iblNob3J0VmFsdWU7QmlnSW50ZWdlci5wcm90b3R5cGUuc2lnbnVtPWJuU2lnTnVtO0JpZ0ludGVnZXIucHJvdG90eXBlLnRvQnl0ZUFycmF5PWJuVG9CeXRlQXJyYXk7QmlnSW50ZWdlci5wcm90b3R5cGUuZXF1YWxzPWJuRXF1YWxzO0JpZ0ludGVnZXIucHJvdG90eXBlLm1pbj1ibk1pbjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5tYXg9Ym5NYXg7QmlnSW50ZWdlci5wcm90b3R5cGUuYW5kPWJuQW5kO0JpZ0ludGVnZXIucHJvdG90eXBlLm9yPWJuT3I7QmlnSW50ZWdlci5wcm90b3R5cGUueG9yPWJuWG9yO0JpZ0ludGVnZXIucHJvdG90eXBlLmFuZE5vdD1ibkFuZE5vdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5ub3Q9Ym5Ob3Q7QmlnSW50ZWdlci5wcm90b3R5cGUuc2hpZnRMZWZ0PWJuU2hpZnRMZWZ0O0JpZ0ludGVnZXIucHJvdG90eXBlLnNoaWZ0UmlnaHQ9Ym5TaGlmdFJpZ2h0O0JpZ0ludGVnZXIucHJvdG90eXBlLmdldExvd2VzdFNldEJpdD1ibkdldExvd2VzdFNldEJpdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5iaXRDb3VudD1ibkJpdENvdW50O0JpZ0ludGVnZXIucHJvdG90eXBlLnRlc3RCaXQ9Ym5UZXN0Qml0O0JpZ0ludGVnZXIucHJvdG90eXBlLnNldEJpdD1iblNldEJpdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5jbGVhckJpdD1ibkNsZWFyQml0O0JpZ0ludGVnZXIucHJvdG90eXBlLmZsaXBCaXQ9Ym5GbGlwQml0O0JpZ0ludGVnZXIucHJvdG90eXBlLmFkZD1ibkFkZDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5zdWJ0cmFjdD1iblN1YnRyYWN0O0JpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5PWJuTXVsdGlwbHk7QmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlPWJuRGl2aWRlO0JpZ0ludGVnZXIucHJvdG90eXBlLnJlbWFpbmRlcj1iblJlbWFpbmRlcjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5kaXZpZGVBbmRSZW1haW5kZXI9Ym5EaXZpZGVBbmRSZW1haW5kZXI7QmlnSW50ZWdlci5wcm90b3R5cGUubW9kUG93PWJuTW9kUG93O0JpZ0ludGVnZXIucHJvdG90eXBlLm1vZEludmVyc2U9Ym5Nb2RJbnZlcnNlO0JpZ0ludGVnZXIucHJvdG90eXBlLnBvdz1iblBvdztCaWdJbnRlZ2VyLnByb3RvdHlwZS5nY2Q9Ym5HQ0Q7QmlnSW50ZWdlci5wcm90b3R5cGUuaXNQcm9iYWJsZVByaW1lPWJuSXNQcm9iYWJsZVByaW1lO0JpZ0ludGVnZXIucHJvdG90eXBlLnNxdWFyZT1iblNxdWFyZTtcbi8qISAoYykgVG9tIFd1IHwgaHR0cDovL3d3dy1jcy1zdHVkZW50cy5zdGFuZm9yZC5lZHUvfnRqdy9qc2JuL1xyXG4gKi9cclxuZnVuY3Rpb24gQXJjZm91cigpe3RoaXMuaT0wO3RoaXMuaj0wO3RoaXMuUz1uZXcgQXJyYXkoKX1mdW5jdGlvbiBBUkM0aW5pdChkKXt2YXIgYyxhLGI7Zm9yKGM9MDtjPDI1NjsrK2Mpe3RoaXMuU1tjXT1jfWE9MDtmb3IoYz0wO2M8MjU2OysrYyl7YT0oYSt0aGlzLlNbY10rZFtjJWQubGVuZ3RoXSkmMjU1O2I9dGhpcy5TW2NdO3RoaXMuU1tjXT10aGlzLlNbYV07dGhpcy5TW2FdPWJ9dGhpcy5pPTA7dGhpcy5qPTB9ZnVuY3Rpb24gQVJDNG5leHQoKXt2YXIgYTt0aGlzLmk9KHRoaXMuaSsxKSYyNTU7dGhpcy5qPSh0aGlzLmordGhpcy5TW3RoaXMuaV0pJjI1NTthPXRoaXMuU1t0aGlzLmldO3RoaXMuU1t0aGlzLmldPXRoaXMuU1t0aGlzLmpdO3RoaXMuU1t0aGlzLmpdPWE7cmV0dXJuIHRoaXMuU1soYSt0aGlzLlNbdGhpcy5pXSkmMjU1XX1BcmNmb3VyLnByb3RvdHlwZS5pbml0PUFSQzRpbml0O0FyY2ZvdXIucHJvdG90eXBlLm5leHQ9QVJDNG5leHQ7ZnVuY3Rpb24gcHJuZ19uZXdzdGF0ZSgpe3JldHVybiBuZXcgQXJjZm91cigpfXZhciBybmdfcHNpemU9MjU2O1xuLyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXHJcbiAqL1xyXG52YXIgcm5nX3N0YXRlO3ZhciBybmdfcG9vbDt2YXIgcm5nX3BwdHI7ZnVuY3Rpb24gcm5nX3NlZWRfaW50KGEpe3JuZ19wb29sW3JuZ19wcHRyKytdXj1hJjI1NTtybmdfcG9vbFtybmdfcHB0cisrXV49KGE+PjgpJjI1NTtybmdfcG9vbFtybmdfcHB0cisrXV49KGE+PjE2KSYyNTU7cm5nX3Bvb2xbcm5nX3BwdHIrK11ePShhPj4yNCkmMjU1O2lmKHJuZ19wcHRyPj1ybmdfcHNpemUpe3JuZ19wcHRyLT1ybmdfcHNpemV9fWZ1bmN0aW9uIHJuZ19zZWVkX3RpbWUoKXtybmdfc2VlZF9pbnQobmV3IERhdGUoKS5nZXRUaW1lKCkpfWlmKHJuZ19wb29sPT1udWxsKXtybmdfcG9vbD1uZXcgQXJyYXkoKTtybmdfcHB0cj0wO3ZhciB0O2lmKHdpbmRvdyE9PXVuZGVmaW5lZCYmKHdpbmRvdy5jcnlwdG8hPT11bmRlZmluZWR8fHdpbmRvdy5tc0NyeXB0byE9PXVuZGVmaW5lZCkpe3ZhciBjcnlwdG89d2luZG93LmNyeXB0b3x8d2luZG93Lm1zQ3J5cHRvO2lmKGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpe3ZhciB1YT1uZXcgVWludDhBcnJheSgzMik7Y3J5cHRvLmdldFJhbmRvbVZhbHVlcyh1YSk7Zm9yKHQ9MDt0PDMyOysrdCl7cm5nX3Bvb2xbcm5nX3BwdHIrK109dWFbdF19fWVsc2V7aWYobmF2aWdhdG9yLmFwcE5hbWU9PVwiTmV0c2NhcGVcIiYmbmF2aWdhdG9yLmFwcFZlcnNpb248XCI1XCIpe3ZhciB6PXdpbmRvdy5jcnlwdG8ucmFuZG9tKDMyKTtmb3IodD0wO3Q8ei5sZW5ndGg7Kyt0KXtybmdfcG9vbFtybmdfcHB0cisrXT16LmNoYXJDb2RlQXQodCkmMjU1fX19fXdoaWxlKHJuZ19wcHRyPHJuZ19wc2l6ZSl7dD1NYXRoLmZsb29yKDY1NTM2Kk1hdGgucmFuZG9tKCkpO3JuZ19wb29sW3JuZ19wcHRyKytdPXQ+Pj44O3JuZ19wb29sW3JuZ19wcHRyKytdPXQmMjU1fXJuZ19wcHRyPTA7cm5nX3NlZWRfdGltZSgpfWZ1bmN0aW9uIHJuZ19nZXRfYnl0ZSgpe2lmKHJuZ19zdGF0ZT09bnVsbCl7cm5nX3NlZWRfdGltZSgpO3JuZ19zdGF0ZT1wcm5nX25ld3N0YXRlKCk7cm5nX3N0YXRlLmluaXQocm5nX3Bvb2wpO2ZvcihybmdfcHB0cj0wO3JuZ19wcHRyPHJuZ19wb29sLmxlbmd0aDsrK3JuZ19wcHRyKXtybmdfcG9vbFtybmdfcHB0cl09MH1ybmdfcHB0cj0wfXJldHVybiBybmdfc3RhdGUubmV4dCgpfWZ1bmN0aW9uIHJuZ19nZXRfYnl0ZXMoYil7dmFyIGE7Zm9yKGE9MDthPGIubGVuZ3RoOysrYSl7YlthXT1ybmdfZ2V0X2J5dGUoKX19ZnVuY3Rpb24gU2VjdXJlUmFuZG9tKCl7fVNlY3VyZVJhbmRvbS5wcm90b3R5cGUubmV4dEJ5dGVzPXJuZ19nZXRfYnl0ZXM7XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cclxuICovXHJcbmZ1bmN0aW9uIHBhcnNlQmlnSW50KGIsYSl7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGIsYSl9ZnVuY3Rpb24gbGluZWJyayhjLGQpe3ZhciBhPVwiXCI7dmFyIGI9MDt3aGlsZShiK2Q8Yy5sZW5ndGgpe2ErPWMuc3Vic3RyaW5nKGIsYitkKStcIlxcblwiO2IrPWR9cmV0dXJuIGErYy5zdWJzdHJpbmcoYixjLmxlbmd0aCl9ZnVuY3Rpb24gYnl0ZTJIZXgoYSl7aWYoYTwxNil7cmV0dXJuXCIwXCIrYS50b1N0cmluZygxNil9ZWxzZXtyZXR1cm4gYS50b1N0cmluZygxNil9fWZ1bmN0aW9uIHBrY3MxcGFkMihlLGgpe2lmKGg8ZS5sZW5ndGgrMTEpe3Rocm93XCJNZXNzYWdlIHRvbyBsb25nIGZvciBSU0FcIjtyZXR1cm4gbnVsbH12YXIgZz1uZXcgQXJyYXkoKTt2YXIgZD1lLmxlbmd0aC0xO3doaWxlKGQ+PTAmJmg+MCl7dmFyIGY9ZS5jaGFyQ29kZUF0KGQtLSk7aWYoZjwxMjgpe2dbLS1oXT1mfWVsc2V7aWYoKGY+MTI3KSYmKGY8MjA0OCkpe2dbLS1oXT0oZiY2Myl8MTI4O2dbLS1oXT0oZj4+Nil8MTkyfWVsc2V7Z1stLWhdPShmJjYzKXwxMjg7Z1stLWhdPSgoZj4+NikmNjMpfDEyODtnWy0taF09KGY+PjEyKXwyMjR9fX1nWy0taF09MDt2YXIgYj1uZXcgU2VjdXJlUmFuZG9tKCk7dmFyIGE9bmV3IEFycmF5KCk7d2hpbGUoaD4yKXthWzBdPTA7d2hpbGUoYVswXT09MCl7Yi5uZXh0Qnl0ZXMoYSl9Z1stLWhdPWFbMF19Z1stLWhdPTI7Z1stLWhdPTA7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGcpfWZ1bmN0aW9uIG9hZXBfbWdmMV9hcnIoYyxhLGUpe3ZhciBiPVwiXCIsZD0wO3doaWxlKGIubGVuZ3RoPGEpe2IrPWUoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsYy5jb25jYXQoWyhkJjQyNzgxOTAwODApPj4yNCwoZCYxNjcxMTY4MCk+PjE2LChkJjY1MjgwKT4+OCxkJjI1NV0pKSk7ZCs9MX1yZXR1cm4gYn1mdW5jdGlvbiBvYWVwX3BhZChxLGEsZixsKXt2YXIgYz1LSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0O3ZhciBvPUtKVVIuY3J5cHRvLlV0aWw7dmFyIGI9bnVsbDtpZighZil7Zj1cInNoYTFcIn1pZih0eXBlb2YgZj09PVwic3RyaW5nXCIpe2I9Yy5nZXRDYW5vbmljYWxBbGdOYW1lKGYpO2w9Yy5nZXRIYXNoTGVuZ3RoKGIpO2Y9ZnVuY3Rpb24oaSl7cmV0dXJuIGhleHRvcnN0cihvLmhhc2hIZXgocnN0cnRvaGV4KGkpLGIpKX19aWYocS5sZW5ndGgrMipsKzI+YSl7dGhyb3dcIk1lc3NhZ2UgdG9vIGxvbmcgZm9yIFJTQVwifXZhciBrPVwiXCIsZTtmb3IoZT0wO2U8YS1xLmxlbmd0aC0yKmwtMjtlKz0xKXtrKz1cIlxceDAwXCJ9dmFyIGg9ZihcIlwiKStrK1wiXFx4MDFcIitxO3ZhciBnPW5ldyBBcnJheShsKTtuZXcgU2VjdXJlUmFuZG9tKCkubmV4dEJ5dGVzKGcpO3ZhciBqPW9hZXBfbWdmMV9hcnIoZyxoLmxlbmd0aCxmKTt2YXIgcD1bXTtmb3IoZT0wO2U8aC5sZW5ndGg7ZSs9MSl7cFtlXT1oLmNoYXJDb2RlQXQoZSleai5jaGFyQ29kZUF0KGUpfXZhciBtPW9hZXBfbWdmMV9hcnIocCxnLmxlbmd0aCxmKTt2YXIgZD1bMF07Zm9yKGU9MDtlPGcubGVuZ3RoO2UrPTEpe2RbZSsxXT1nW2VdXm0uY2hhckNvZGVBdChlKX1yZXR1cm4gbmV3IEJpZ0ludGVnZXIoZC5jb25jYXQocCkpfWZ1bmN0aW9uIFJTQUtleSgpe3RoaXMubj1udWxsO3RoaXMuZT0wO3RoaXMuZD1udWxsO3RoaXMucD1udWxsO3RoaXMucT1udWxsO3RoaXMuZG1wMT1udWxsO3RoaXMuZG1xMT1udWxsO3RoaXMuY29lZmY9bnVsbH1mdW5jdGlvbiBSU0FTZXRQdWJsaWMoYixhKXt0aGlzLmlzUHVibGljPXRydWU7dGhpcy5pc1ByaXZhdGU9ZmFsc2U7aWYodHlwZW9mIGIhPT1cInN0cmluZ1wiKXt0aGlzLm49Yjt0aGlzLmU9YX1lbHNle2lmKGIhPW51bGwmJmEhPW51bGwmJmIubGVuZ3RoPjAmJmEubGVuZ3RoPjApe3RoaXMubj1wYXJzZUJpZ0ludChiLDE2KTt0aGlzLmU9cGFyc2VJbnQoYSwxNil9ZWxzZXt0aHJvd1wiSW52YWxpZCBSU0EgcHVibGljIGtleVwifX19ZnVuY3Rpb24gUlNBRG9QdWJsaWMoYSl7cmV0dXJuIGEubW9kUG93SW50KHRoaXMuZSx0aGlzLm4pfWZ1bmN0aW9uIFJTQUVuY3J5cHQoZCl7dmFyIGE9cGtjczFwYWQyKGQsKHRoaXMubi5iaXRMZW5ndGgoKSs3KT4+Myk7aWYoYT09bnVsbCl7cmV0dXJuIG51bGx9dmFyIGU9dGhpcy5kb1B1YmxpYyhhKTtpZihlPT1udWxsKXtyZXR1cm4gbnVsbH12YXIgYj1lLnRvU3RyaW5nKDE2KTtpZigoYi5sZW5ndGgmMSk9PTApe3JldHVybiBifWVsc2V7cmV0dXJuXCIwXCIrYn19ZnVuY3Rpb24gUlNBRW5jcnlwdE9BRVAoZixlLGIpe3ZhciBhPW9hZXBfcGFkKGYsKHRoaXMubi5iaXRMZW5ndGgoKSs3KT4+MyxlLGIpO2lmKGE9PW51bGwpe3JldHVybiBudWxsfXZhciBnPXRoaXMuZG9QdWJsaWMoYSk7aWYoZz09bnVsbCl7cmV0dXJuIG51bGx9dmFyIGQ9Zy50b1N0cmluZygxNik7aWYoKGQubGVuZ3RoJjEpPT0wKXtyZXR1cm4gZH1lbHNle3JldHVyblwiMFwiK2R9fVJTQUtleS5wcm90b3R5cGUuZG9QdWJsaWM9UlNBRG9QdWJsaWM7UlNBS2V5LnByb3RvdHlwZS5zZXRQdWJsaWM9UlNBU2V0UHVibGljO1JTQUtleS5wcm90b3R5cGUuZW5jcnlwdD1SU0FFbmNyeXB0O1JTQUtleS5wcm90b3R5cGUuZW5jcnlwdE9BRVA9UlNBRW5jcnlwdE9BRVA7UlNBS2V5LnByb3RvdHlwZS50eXBlPVwiUlNBXCI7XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cclxuICovXHJcbmZ1bmN0aW9uIEVDRmllbGRFbGVtZW50RnAoYixhKXt0aGlzLng9YTt0aGlzLnE9Yn1mdW5jdGlvbiBmZUZwRXF1YWxzKGEpe2lmKGE9PXRoaXMpe3JldHVybiB0cnVlfXJldHVybih0aGlzLnEuZXF1YWxzKGEucSkmJnRoaXMueC5lcXVhbHMoYS54KSl9ZnVuY3Rpb24gZmVGcFRvQmlnSW50ZWdlcigpe3JldHVybiB0aGlzLnh9ZnVuY3Rpb24gZmVGcE5lZ2F0ZSgpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54Lm5lZ2F0ZSgpLm1vZCh0aGlzLnEpKX1mdW5jdGlvbiBmZUZwQWRkKGEpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54LmFkZChhLnRvQmlnSW50ZWdlcigpKS5tb2QodGhpcy5xKSl9ZnVuY3Rpb24gZmVGcFN1YnRyYWN0KGEpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54LnN1YnRyYWN0KGEudG9CaWdJbnRlZ2VyKCkpLm1vZCh0aGlzLnEpKX1mdW5jdGlvbiBmZUZwTXVsdGlwbHkoYSl7cmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSx0aGlzLngubXVsdGlwbHkoYS50b0JpZ0ludGVnZXIoKSkubW9kKHRoaXMucSkpfWZ1bmN0aW9uIGZlRnBTcXVhcmUoKXtyZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLHRoaXMueC5zcXVhcmUoKS5tb2QodGhpcy5xKSl9ZnVuY3Rpb24gZmVGcERpdmlkZShhKXtyZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLHRoaXMueC5tdWx0aXBseShhLnRvQmlnSW50ZWdlcigpLm1vZEludmVyc2UodGhpcy5xKSkubW9kKHRoaXMucSkpfUVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLmVxdWFscz1mZUZwRXF1YWxzO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnRvQmlnSW50ZWdlcj1mZUZwVG9CaWdJbnRlZ2VyO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLm5lZ2F0ZT1mZUZwTmVnYXRlO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLmFkZD1mZUZwQWRkO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnN1YnRyYWN0PWZlRnBTdWJ0cmFjdDtFQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5tdWx0aXBseT1mZUZwTXVsdGlwbHk7RUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuc3F1YXJlPWZlRnBTcXVhcmU7RUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuZGl2aWRlPWZlRnBEaXZpZGU7ZnVuY3Rpb24gRUNQb2ludEZwKGMsYSxkLGIpe3RoaXMuY3VydmU9Yzt0aGlzLng9YTt0aGlzLnk9ZDtpZihiPT1udWxsKXt0aGlzLno9QmlnSW50ZWdlci5PTkV9ZWxzZXt0aGlzLno9Yn10aGlzLnppbnY9bnVsbH1mdW5jdGlvbiBwb2ludEZwR2V0WCgpe2lmKHRoaXMuemludj09bnVsbCl7dGhpcy56aW52PXRoaXMuei5tb2RJbnZlcnNlKHRoaXMuY3VydmUucSl9cmV0dXJuIHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIodGhpcy54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMuemludikubW9kKHRoaXMuY3VydmUucSkpfWZ1bmN0aW9uIHBvaW50RnBHZXRZKCl7aWYodGhpcy56aW52PT1udWxsKXt0aGlzLnppbnY9dGhpcy56Lm1vZEludmVyc2UodGhpcy5jdXJ2ZS5xKX1yZXR1cm4gdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcih0aGlzLnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56aW52KS5tb2QodGhpcy5jdXJ2ZS5xKSl9ZnVuY3Rpb24gcG9pbnRGcEVxdWFscyhhKXtpZihhPT10aGlzKXtyZXR1cm4gdHJ1ZX1pZih0aGlzLmlzSW5maW5pdHkoKSl7cmV0dXJuIGEuaXNJbmZpbml0eSgpfWlmKGEuaXNJbmZpbml0eSgpKXtyZXR1cm4gdGhpcy5pc0luZmluaXR5KCl9dmFyIGMsYjtjPWEueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShhLnopKS5tb2QodGhpcy5jdXJ2ZS5xKTtpZighYy5lcXVhbHMoQmlnSW50ZWdlci5aRVJPKSl7cmV0dXJuIGZhbHNlfWI9YS54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KGEueikpLm1vZCh0aGlzLmN1cnZlLnEpO3JldHVybiBiLmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pfWZ1bmN0aW9uIHBvaW50RnBJc0luZmluaXR5KCl7aWYoKHRoaXMueD09bnVsbCkmJih0aGlzLnk9PW51bGwpKXtyZXR1cm4gdHJ1ZX1yZXR1cm4gdGhpcy56LmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pJiYhdGhpcy55LnRvQmlnSW50ZWdlcigpLmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pfWZ1bmN0aW9uIHBvaW50RnBOZWdhdGUoKXtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLHRoaXMueCx0aGlzLnkubmVnYXRlKCksdGhpcy56KX1mdW5jdGlvbiBwb2ludEZwQWRkKGwpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXtyZXR1cm4gbH1pZihsLmlzSW5maW5pdHkoKSl7cmV0dXJuIHRoaXN9dmFyIHA9bC55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KGwueikpLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBvPWwueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShsLnopKS5tb2QodGhpcy5jdXJ2ZS5xKTtpZihCaWdJbnRlZ2VyLlpFUk8uZXF1YWxzKG8pKXtpZihCaWdJbnRlZ2VyLlpFUk8uZXF1YWxzKHApKXtyZXR1cm4gdGhpcy50d2ljZSgpfXJldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGo9bmV3IEJpZ0ludGVnZXIoXCIzXCIpO3ZhciBlPXRoaXMueC50b0JpZ0ludGVnZXIoKTt2YXIgbj10aGlzLnkudG9CaWdJbnRlZ2VyKCk7dmFyIGM9bC54LnRvQmlnSW50ZWdlcigpO3ZhciBrPWwueS50b0JpZ0ludGVnZXIoKTt2YXIgbT1vLnNxdWFyZSgpO3ZhciBpPW0ubXVsdGlwbHkobyk7dmFyIGQ9ZS5tdWx0aXBseShtKTt2YXIgZz1wLnNxdWFyZSgpLm11bHRpcGx5KHRoaXMueik7dmFyIGE9Zy5zdWJ0cmFjdChkLnNoaWZ0TGVmdCgxKSkubXVsdGlwbHkobC56KS5zdWJ0cmFjdChpKS5tdWx0aXBseShvKS5tb2QodGhpcy5jdXJ2ZS5xKTt2YXIgaD1kLm11bHRpcGx5KGopLm11bHRpcGx5KHApLnN1YnRyYWN0KG4ubXVsdGlwbHkoaSkpLnN1YnRyYWN0KGcubXVsdGlwbHkocCkpLm11bHRpcGx5KGwueikuYWRkKHAubXVsdGlwbHkoaSkpLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBmPWkubXVsdGlwbHkodGhpcy56KS5tdWx0aXBseShsLnopLm1vZCh0aGlzLmN1cnZlLnEpO3JldHVybiBuZXcgRUNQb2ludEZwKHRoaXMuY3VydmUsdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihhKSx0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKGgpLGYpfWZ1bmN0aW9uIHBvaW50RnBUd2ljZSgpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXtyZXR1cm4gdGhpc31pZih0aGlzLnkudG9CaWdJbnRlZ2VyKCkuc2lnbnVtKCk9PTApe3JldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGc9bmV3IEJpZ0ludGVnZXIoXCIzXCIpO3ZhciBjPXRoaXMueC50b0JpZ0ludGVnZXIoKTt2YXIgaD10aGlzLnkudG9CaWdJbnRlZ2VyKCk7dmFyIGU9aC5tdWx0aXBseSh0aGlzLnopO3ZhciBqPWUubXVsdGlwbHkoaCkubW9kKHRoaXMuY3VydmUucSk7dmFyIGk9dGhpcy5jdXJ2ZS5hLnRvQmlnSW50ZWdlcigpO3ZhciBrPWMuc3F1YXJlKCkubXVsdGlwbHkoZyk7aWYoIUJpZ0ludGVnZXIuWkVSTy5lcXVhbHMoaSkpe2s9ay5hZGQodGhpcy56LnNxdWFyZSgpLm11bHRpcGx5KGkpKX1rPWsubW9kKHRoaXMuY3VydmUucSk7dmFyIGI9ay5zcXVhcmUoKS5zdWJ0cmFjdChjLnNoaWZ0TGVmdCgzKS5tdWx0aXBseShqKSkuc2hpZnRMZWZ0KDEpLm11bHRpcGx5KGUpLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBmPWsubXVsdGlwbHkoZykubXVsdGlwbHkoYykuc3VidHJhY3Qoai5zaGlmdExlZnQoMSkpLnNoaWZ0TGVmdCgyKS5tdWx0aXBseShqKS5zdWJ0cmFjdChrLnNxdWFyZSgpLm11bHRpcGx5KGspKS5tb2QodGhpcy5jdXJ2ZS5xKTt2YXIgZD1lLnNxdWFyZSgpLm11bHRpcGx5KGUpLnNoaWZ0TGVmdCgzKS5tb2QodGhpcy5jdXJ2ZS5xKTtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIoYiksdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihmKSxkKX1mdW5jdGlvbiBwb2ludEZwTXVsdGlwbHkoYil7aWYodGhpcy5pc0luZmluaXR5KCkpe3JldHVybiB0aGlzfWlmKGIuc2lnbnVtKCk9PTApe3JldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGc9Yjt2YXIgZj1nLm11bHRpcGx5KG5ldyBCaWdJbnRlZ2VyKFwiM1wiKSk7dmFyIGw9dGhpcy5uZWdhdGUoKTt2YXIgZD10aGlzO3ZhciBjO2ZvcihjPWYuYml0TGVuZ3RoKCktMjtjPjA7LS1jKXtkPWQudHdpY2UoKTt2YXIgYT1mLnRlc3RCaXQoYyk7dmFyIGo9Zy50ZXN0Qml0KGMpO2lmKGEhPWope2Q9ZC5hZGQoYT90aGlzOmwpfX1yZXR1cm4gZH1mdW5jdGlvbiBwb2ludEZwTXVsdGlwbHlUd28oYyxhLGIpe3ZhciBkO2lmKGMuYml0TGVuZ3RoKCk+Yi5iaXRMZW5ndGgoKSl7ZD1jLmJpdExlbmd0aCgpLTF9ZWxzZXtkPWIuYml0TGVuZ3RoKCktMX12YXIgZj10aGlzLmN1cnZlLmdldEluZmluaXR5KCk7dmFyIGU9dGhpcy5hZGQoYSk7d2hpbGUoZD49MCl7Zj1mLnR3aWNlKCk7aWYoYy50ZXN0Qml0KGQpKXtpZihiLnRlc3RCaXQoZCkpe2Y9Zi5hZGQoZSl9ZWxzZXtmPWYuYWRkKHRoaXMpfX1lbHNle2lmKGIudGVzdEJpdChkKSl7Zj1mLmFkZChhKX19LS1kfXJldHVybiBmfUVDUG9pbnRGcC5wcm90b3R5cGUuZ2V0WD1wb2ludEZwR2V0WDtFQ1BvaW50RnAucHJvdG90eXBlLmdldFk9cG9pbnRGcEdldFk7RUNQb2ludEZwLnByb3RvdHlwZS5lcXVhbHM9cG9pbnRGcEVxdWFscztFQ1BvaW50RnAucHJvdG90eXBlLmlzSW5maW5pdHk9cG9pbnRGcElzSW5maW5pdHk7RUNQb2ludEZwLnByb3RvdHlwZS5uZWdhdGU9cG9pbnRGcE5lZ2F0ZTtFQ1BvaW50RnAucHJvdG90eXBlLmFkZD1wb2ludEZwQWRkO0VDUG9pbnRGcC5wcm90b3R5cGUudHdpY2U9cG9pbnRGcFR3aWNlO0VDUG9pbnRGcC5wcm90b3R5cGUubXVsdGlwbHk9cG9pbnRGcE11bHRpcGx5O0VDUG9pbnRGcC5wcm90b3R5cGUubXVsdGlwbHlUd289cG9pbnRGcE11bHRpcGx5VHdvO2Z1bmN0aW9uIEVDQ3VydmVGcChlLGQsYyl7dGhpcy5xPWU7dGhpcy5hPXRoaXMuZnJvbUJpZ0ludGVnZXIoZCk7dGhpcy5iPXRoaXMuZnJvbUJpZ0ludGVnZXIoYyk7dGhpcy5pbmZpbml0eT1uZXcgRUNQb2ludEZwKHRoaXMsbnVsbCxudWxsKX1mdW5jdGlvbiBjdXJ2ZUZwR2V0USgpe3JldHVybiB0aGlzLnF9ZnVuY3Rpb24gY3VydmVGcEdldEEoKXtyZXR1cm4gdGhpcy5hfWZ1bmN0aW9uIGN1cnZlRnBHZXRCKCl7cmV0dXJuIHRoaXMuYn1mdW5jdGlvbiBjdXJ2ZUZwRXF1YWxzKGEpe2lmKGE9PXRoaXMpe3JldHVybiB0cnVlfXJldHVybih0aGlzLnEuZXF1YWxzKGEucSkmJnRoaXMuYS5lcXVhbHMoYS5hKSYmdGhpcy5iLmVxdWFscyhhLmIpKX1mdW5jdGlvbiBjdXJ2ZUZwR2V0SW5maW5pdHkoKXtyZXR1cm4gdGhpcy5pbmZpbml0eX1mdW5jdGlvbiBjdXJ2ZUZwRnJvbUJpZ0ludGVnZXIoYSl7cmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSxhKX1mdW5jdGlvbiBjdXJ2ZUZwRGVjb2RlUG9pbnRIZXgoZCl7c3dpdGNoKHBhcnNlSW50KGQuc3Vic3RyKDAsMiksMTYpKXtjYXNlIDA6cmV0dXJuIHRoaXMuaW5maW5pdHk7Y2FzZSAyOmNhc2UgMzpyZXR1cm4gbnVsbDtjYXNlIDQ6Y2FzZSA2OmNhc2UgNzp2YXIgYT0oZC5sZW5ndGgtMikvMjt2YXIgYz1kLnN1YnN0cigyLGEpO3ZhciBiPWQuc3Vic3RyKGErMixhKTtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLHRoaXMuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoYywxNikpLHRoaXMuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoYiwxNikpKTtkZWZhdWx0OnJldHVybiBudWxsfX1FQ0N1cnZlRnAucHJvdG90eXBlLmdldFE9Y3VydmVGcEdldFE7RUNDdXJ2ZUZwLnByb3RvdHlwZS5nZXRBPWN1cnZlRnBHZXRBO0VDQ3VydmVGcC5wcm90b3R5cGUuZ2V0Qj1jdXJ2ZUZwR2V0QjtFQ0N1cnZlRnAucHJvdG90eXBlLmVxdWFscz1jdXJ2ZUZwRXF1YWxzO0VDQ3VydmVGcC5wcm90b3R5cGUuZ2V0SW5maW5pdHk9Y3VydmVGcEdldEluZmluaXR5O0VDQ3VydmVGcC5wcm90b3R5cGUuZnJvbUJpZ0ludGVnZXI9Y3VydmVGcEZyb21CaWdJbnRlZ2VyO0VDQ3VydmVGcC5wcm90b3R5cGUuZGVjb2RlUG9pbnRIZXg9Y3VydmVGcERlY29kZVBvaW50SGV4O1xuLyohIE1pa2UgU2FtdWVsIChjKSAyMDA5IHwgY29kZS5nb29nbGUuY29tL3AvanNvbi1zYW5zLWV2YWxcclxuICovXHJcbnZhciBqc29uUGFyc2U9KGZ1bmN0aW9uKCl7dmFyIGU9XCIoPzotP1xcXFxiKD86MHxbMS05XVswLTldKikoPzpcXFxcLlswLTldKyk/KD86W2VFXVsrLV0/WzAtOV0rKT9cXFxcYilcIjt2YXIgaj0nKD86W15cXFxcMC1cXFxceDA4XFxcXHgwYS1cXFxceDFmXCJcXFxcXFxcXF18XFxcXFxcXFwoPzpbXCIvXFxcXFxcXFxiZm5ydF18dVswLTlBLUZhLWZdezR9KSknO3ZhciBpPScoPzpcIicraisnKlwiKSc7dmFyIGQ9bmV3IFJlZ0V4cChcIig/OmZhbHNlfHRydWV8bnVsbHxbXFxcXHtcXFxcfVxcXFxbXFxcXF1dfFwiK2UrXCJ8XCIraStcIilcIixcImdcIik7dmFyIGs9bmV3IFJlZ0V4cChcIlxcXFxcXFxcKD86KFtedV0pfHUoLns0fSkpXCIsXCJnXCIpO3ZhciBnPXsnXCInOidcIicsXCIvXCI6XCIvXCIsXCJcXFxcXCI6XCJcXFxcXCIsYjpcIlxcYlwiLGY6XCJcXGZcIixuOlwiXFxuXCIscjpcIlxcclwiLHQ6XCJcXHRcIn07ZnVuY3Rpb24gaChsLG0sbil7cmV0dXJuIG0/Z1ttXTpTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KG4sMTYpKX12YXIgYz1uZXcgU3RyaW5nKFwiXCIpO3ZhciBhPVwiXFxcXFwiO3ZhciBmPXtcIntcIjpPYmplY3QsXCJbXCI6QXJyYXl9O3ZhciBiPU9iamVjdC5oYXNPd25Qcm9wZXJ0eTtyZXR1cm4gZnVuY3Rpb24odSxxKXt2YXIgcD11Lm1hdGNoKGQpO3ZhciB4O3ZhciB2PXBbMF07dmFyIGw9ZmFsc2U7aWYoXCJ7XCI9PT12KXt4PXt9fWVsc2V7aWYoXCJbXCI9PT12KXt4PVtdfWVsc2V7eD1bXTtsPXRydWV9fXZhciB0O3ZhciByPVt4XTtmb3IodmFyIG89MS1sLG09cC5sZW5ndGg7bzxtOysrbyl7dj1wW29dO3ZhciB3O3N3aXRjaCh2LmNoYXJDb2RlQXQoMCkpe2RlZmF1bHQ6dz1yWzBdO3dbdHx8dy5sZW5ndGhdPSsodik7dD12b2lkIDA7YnJlYWs7Y2FzZSAzNDp2PXYuc3Vic3RyaW5nKDEsdi5sZW5ndGgtMSk7aWYodi5pbmRleE9mKGEpIT09LTEpe3Y9di5yZXBsYWNlKGssaCl9dz1yWzBdO2lmKCF0KXtpZih3IGluc3RhbmNlb2YgQXJyYXkpe3Q9dy5sZW5ndGh9ZWxzZXt0PXZ8fGM7YnJlYWt9fXdbdF09djt0PXZvaWQgMDticmVhaztjYXNlIDkxOnc9clswXTtyLnVuc2hpZnQod1t0fHx3Lmxlbmd0aF09W10pO3Q9dm9pZCAwO2JyZWFrO2Nhc2UgOTM6ci5zaGlmdCgpO2JyZWFrO2Nhc2UgMTAyOnc9clswXTt3W3R8fHcubGVuZ3RoXT1mYWxzZTt0PXZvaWQgMDticmVhaztjYXNlIDExMDp3PXJbMF07d1t0fHx3Lmxlbmd0aF09bnVsbDt0PXZvaWQgMDticmVhaztjYXNlIDExNjp3PXJbMF07d1t0fHx3Lmxlbmd0aF09dHJ1ZTt0PXZvaWQgMDticmVhaztjYXNlIDEyMzp3PXJbMF07ci51bnNoaWZ0KHdbdHx8dy5sZW5ndGhdPXt9KTt0PXZvaWQgMDticmVhaztjYXNlIDEyNTpyLnNoaWZ0KCk7YnJlYWt9fWlmKGwpe2lmKHIubGVuZ3RoIT09MSl7dGhyb3cgbmV3IEVycm9yKCl9eD14WzBdfWVsc2V7aWYoci5sZW5ndGgpe3Rocm93IG5ldyBFcnJvcigpfX1pZihxKXt2YXIgcz1mdW5jdGlvbihDLEIpe3ZhciBEPUNbQl07aWYoRCYmdHlwZW9mIEQ9PT1cIm9iamVjdFwiKXt2YXIgbj1udWxsO2Zvcih2YXIgeiBpbiBEKXtpZihiLmNhbGwoRCx6KSYmRCE9PUMpe3ZhciB5PXMoRCx6KTtpZih5IT09dm9pZCAwKXtEW3pdPXl9ZWxzZXtpZighbil7bj1bXX1uLnB1c2goeil9fX1pZihuKXtmb3IodmFyIEE9bi5sZW5ndGg7LS1BPj0wOyl7ZGVsZXRlIERbbltBXV19fX1yZXR1cm4gcS5jYWxsKEMsQixEKX07eD1zKHtcIlwiOnh9LFwiXCIpfXJldHVybiB4fX0pKCk7XG52YXIgQVNOMUhFWD1uZXcgZnVuY3Rpb24oKXt9O0FTTjFIRVguZ2V0TGJsZW49ZnVuY3Rpb24oYyxhKXtpZihjLnN1YnN0cihhKzIsMSkhPVwiOFwiKXtyZXR1cm4gMX12YXIgYj1wYXJzZUludChjLnN1YnN0cihhKzMsMSkpO2lmKGI9PTApe3JldHVybiAtMX1pZigwPGImJmI8MTApe3JldHVybiBiKzF9cmV0dXJuIC0yfTtBU04xSEVYLmdldEw9ZnVuY3Rpb24oYyxiKXt2YXIgYT1BU04xSEVYLmdldExibGVuKGMsYik7aWYoYTwxKXtyZXR1cm5cIlwifXJldHVybiBjLnN1YnN0cihiKzIsYSoyKX07QVNOMUhFWC5nZXRWYmxlbj1mdW5jdGlvbihkLGEpe3ZhciBjLGI7Yz1BU04xSEVYLmdldEwoZCxhKTtpZihjPT1cIlwiKXtyZXR1cm4gLTF9aWYoYy5zdWJzdHIoMCwxKT09PVwiOFwiKXtiPW5ldyBCaWdJbnRlZ2VyKGMuc3Vic3RyKDIpLDE2KX1lbHNle2I9bmV3IEJpZ0ludGVnZXIoYywxNil9cmV0dXJuIGIuaW50VmFsdWUoKX07QVNOMUhFWC5nZXRWaWR4PWZ1bmN0aW9uKGMsYil7dmFyIGE9QVNOMUhFWC5nZXRMYmxlbihjLGIpO2lmKGE8MCl7cmV0dXJuIGF9cmV0dXJuIGIrKGErMSkqMn07QVNOMUhFWC5nZXRWPWZ1bmN0aW9uKGQsYSl7dmFyIGM9QVNOMUhFWC5nZXRWaWR4KGQsYSk7dmFyIGI9QVNOMUhFWC5nZXRWYmxlbihkLGEpO3JldHVybiBkLnN1YnN0cihjLGIqMil9O0FTTjFIRVguZ2V0VExWPWZ1bmN0aW9uKGIsYSl7cmV0dXJuIGIuc3Vic3RyKGEsMikrQVNOMUhFWC5nZXRMKGIsYSkrQVNOMUhFWC5nZXRWKGIsYSl9O0FTTjFIRVguZ2V0TmV4dFNpYmxpbmdJZHg9ZnVuY3Rpb24oZCxhKXt2YXIgYz1BU04xSEVYLmdldFZpZHgoZCxhKTt2YXIgYj1BU04xSEVYLmdldFZibGVuKGQsYSk7cmV0dXJuIGMrYioyfTtBU04xSEVYLmdldENoaWxkSWR4PWZ1bmN0aW9uKGUsZil7dmFyIGo9QVNOMUhFWDt2YXIgZz1uZXcgQXJyYXkoKTt2YXIgaT1qLmdldFZpZHgoZSxmKTtpZihlLnN1YnN0cihmLDIpPT1cIjAzXCIpe2cucHVzaChpKzIpfWVsc2V7Zy5wdXNoKGkpfXZhciBsPWouZ2V0VmJsZW4oZSxmKTt2YXIgYz1pO3ZhciBkPTA7d2hpbGUoMSl7dmFyIGI9ai5nZXROZXh0U2libGluZ0lkeChlLGMpO2lmKGI9PW51bGx8fChiLWk+PShsKjIpKSl7YnJlYWt9aWYoZD49MjAwKXticmVha31nLnB1c2goYik7Yz1iO2QrK31yZXR1cm4gZ307QVNOMUhFWC5nZXROdGhDaGlsZElkeD1mdW5jdGlvbihkLGIsZSl7dmFyIGM9QVNOMUhFWC5nZXRDaGlsZElkeChkLGIpO3JldHVybiBjW2VdfTtBU04xSEVYLmdldElkeGJ5TGlzdD1mdW5jdGlvbihlLGQsYyxpKXt2YXIgZz1BU04xSEVYO3ZhciBmLGI7aWYoYy5sZW5ndGg9PTApe2lmKGkhPT11bmRlZmluZWQpe2lmKGUuc3Vic3RyKGQsMikhPT1pKXt0aHJvd1wiY2hlY2tpbmcgdGFnIGRvZXNuJ3QgbWF0Y2g6IFwiK2Uuc3Vic3RyKGQsMikrXCIhPVwiK2l9fXJldHVybiBkfWY9Yy5zaGlmdCgpO2I9Zy5nZXRDaGlsZElkeChlLGQpO3JldHVybiBnLmdldElkeGJ5TGlzdChlLGJbZl0sYyxpKX07QVNOMUhFWC5nZXRUTFZieUxpc3Q9ZnVuY3Rpb24oZCxjLGIsZil7dmFyIGU9QVNOMUhFWDt2YXIgYT1lLmdldElkeGJ5TGlzdChkLGMsYik7aWYoYT09PXVuZGVmaW5lZCl7dGhyb3dcImNhbid0IGZpbmQgbnRoTGlzdCBvYmplY3RcIn1pZihmIT09dW5kZWZpbmVkKXtpZihkLnN1YnN0cihhLDIpIT1mKXt0aHJvd1wiY2hlY2tpbmcgdGFnIGRvZXNuJ3QgbWF0Y2g6IFwiK2Quc3Vic3RyKGEsMikrXCIhPVwiK2Z9fXJldHVybiBlLmdldFRMVihkLGEpfTtBU04xSEVYLmdldFZieUxpc3Q9ZnVuY3Rpb24oZSxjLGIsZyxpKXt2YXIgZj1BU04xSEVYO3ZhciBhLGQ7YT1mLmdldElkeGJ5TGlzdChlLGMsYixnKTtpZihhPT09dW5kZWZpbmVkKXt0aHJvd1wiY2FuJ3QgZmluZCBudGhMaXN0IG9iamVjdFwifWQ9Zi5nZXRWKGUsYSk7aWYoaT09PXRydWUpe2Q9ZC5zdWJzdHIoMil9cmV0dXJuIGR9O0FTTjFIRVguaGV4dG9vaWRzdHI9ZnVuY3Rpb24oZSl7dmFyIGg9ZnVuY3Rpb24oYixhKXtpZihiLmxlbmd0aD49YSl7cmV0dXJuIGJ9cmV0dXJuIG5ldyBBcnJheShhLWIubGVuZ3RoKzEpLmpvaW4oXCIwXCIpK2J9O3ZhciBsPVtdO3ZhciBvPWUuc3Vic3RyKDAsMik7dmFyIGY9cGFyc2VJbnQobywxNik7bFswXT1uZXcgU3RyaW5nKE1hdGguZmxvb3IoZi80MCkpO2xbMV09bmV3IFN0cmluZyhmJTQwKTt2YXIgbT1lLnN1YnN0cigyKTt2YXIgaz1bXTtmb3IodmFyIGc9MDtnPG0ubGVuZ3RoLzI7ZysrKXtrLnB1c2gocGFyc2VJbnQobS5zdWJzdHIoZyoyLDIpLDE2KSl9dmFyIGo9W107dmFyIGQ9XCJcIjtmb3IodmFyIGc9MDtnPGsubGVuZ3RoO2crKyl7aWYoa1tnXSYxMjgpe2Q9ZCtoKChrW2ddJjEyNykudG9TdHJpbmcoMiksNyl9ZWxzZXtkPWQraCgoa1tnXSYxMjcpLnRvU3RyaW5nKDIpLDcpO2oucHVzaChuZXcgU3RyaW5nKHBhcnNlSW50KGQsMikpKTtkPVwiXCJ9fXZhciBuPWwuam9pbihcIi5cIik7aWYoai5sZW5ndGg+MCl7bj1uK1wiLlwiK2ouam9pbihcIi5cIil9cmV0dXJuIG59O0FTTjFIRVguZHVtcD1mdW5jdGlvbih0LGMsbCxnKXt2YXIgcD1BU04xSEVYO3ZhciBqPXAuZ2V0Vjt2YXIgeT1wLmR1bXA7dmFyIHc9cC5nZXRDaGlsZElkeDt2YXIgZT10O2lmKHQgaW5zdGFuY2VvZiBLSlVSLmFzbjEuQVNOMU9iamVjdCl7ZT10LmdldEVuY29kZWRIZXgoKX12YXIgcT1mdW5jdGlvbihBLGkpe2lmKEEubGVuZ3RoPD1pKjIpe3JldHVybiBBfWVsc2V7dmFyIHY9QS5zdWJzdHIoMCxpKStcIi4uKHRvdGFsIFwiK0EubGVuZ3RoLzIrXCJieXRlcykuLlwiK0Euc3Vic3RyKEEubGVuZ3RoLWksaSk7cmV0dXJuIHZ9fTtpZihjPT09dW5kZWZpbmVkKXtjPXtvbW1pdF9sb25nX29jdGV0OjMyfX1pZihsPT09dW5kZWZpbmVkKXtsPTB9aWYoZz09PXVuZGVmaW5lZCl7Zz1cIlwifXZhciB4PWMub21taXRfbG9uZ19vY3RldDtpZihlLnN1YnN0cihsLDIpPT1cIjAxXCIpe3ZhciBoPWooZSxsKTtpZihoPT1cIjAwXCIpe3JldHVybiBnK1wiQk9PTEVBTiBGQUxTRVxcblwifWVsc2V7cmV0dXJuIGcrXCJCT09MRUFOIFRSVUVcXG5cIn19aWYoZS5zdWJzdHIobCwyKT09XCIwMlwiKXt2YXIgaD1qKGUsbCk7cmV0dXJuIGcrXCJJTlRFR0VSIFwiK3EoaCx4KStcIlxcblwifWlmKGUuc3Vic3RyKGwsMik9PVwiMDNcIil7dmFyIGg9aihlLGwpO3JldHVybiBnK1wiQklUU1RSSU5HIFwiK3EoaCx4KStcIlxcblwifWlmKGUuc3Vic3RyKGwsMik9PVwiMDRcIil7dmFyIGg9aihlLGwpO2lmKHAuaXNBU04xSEVYKGgpKXt2YXIgaz1nK1wiT0NURVRTVFJJTkcsIGVuY2Fwc3VsYXRlc1xcblwiO2s9ayt5KGgsYywwLGcrXCIgIFwiKTtyZXR1cm4ga31lbHNle3JldHVybiBnK1wiT0NURVRTVFJJTkcgXCIrcShoLHgpK1wiXFxuXCJ9fWlmKGUuc3Vic3RyKGwsMik9PVwiMDVcIil7cmV0dXJuIGcrXCJOVUxMXFxuXCJ9aWYoZS5zdWJzdHIobCwyKT09XCIwNlwiKXt2YXIgbT1qKGUsbCk7dmFyIGE9S0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50KG0pO3ZhciBvPUtKVVIuYXNuMS54NTA5Lk9JRC5vaWQybmFtZShhKTt2YXIgYj1hLnJlcGxhY2UoL1xcLi9nLFwiIFwiKTtpZihvIT1cIlwiKXtyZXR1cm4gZytcIk9iamVjdElkZW50aWZpZXIgXCIrbytcIiAoXCIrYitcIilcXG5cIn1lbHNle3JldHVybiBnK1wiT2JqZWN0SWRlbnRpZmllciAoXCIrYitcIilcXG5cIn19aWYoZS5zdWJzdHIobCwyKT09XCIwY1wiKXtyZXR1cm4gZytcIlVURjhTdHJpbmcgJ1wiK2hleHRvdXRmOChqKGUsbCkpK1wiJ1xcblwifWlmKGUuc3Vic3RyKGwsMik9PVwiMTNcIil7cmV0dXJuIGcrXCJQcmludGFibGVTdHJpbmcgJ1wiK2hleHRvdXRmOChqKGUsbCkpK1wiJ1xcblwifWlmKGUuc3Vic3RyKGwsMik9PVwiMTRcIil7cmV0dXJuIGcrXCJUZWxldGV4U3RyaW5nICdcIitoZXh0b3V0ZjgoaihlLGwpKStcIidcXG5cIn1pZihlLnN1YnN0cihsLDIpPT1cIjE2XCIpe3JldHVybiBnK1wiSUE1U3RyaW5nICdcIitoZXh0b3V0ZjgoaihlLGwpKStcIidcXG5cIn1pZihlLnN1YnN0cihsLDIpPT1cIjE3XCIpe3JldHVybiBnK1wiVVRDVGltZSBcIitoZXh0b3V0ZjgoaihlLGwpKStcIlxcblwifWlmKGUuc3Vic3RyKGwsMik9PVwiMThcIil7cmV0dXJuIGcrXCJHZW5lcmFsaXplZFRpbWUgXCIraGV4dG91dGY4KGooZSxsKSkrXCJcXG5cIn1pZihlLnN1YnN0cihsLDIpPT1cIjMwXCIpe2lmKGUuc3Vic3RyKGwsNCk9PVwiMzAwMFwiKXtyZXR1cm4gZytcIlNFUVVFTkNFIHt9XFxuXCJ9dmFyIGs9ZytcIlNFUVVFTkNFXFxuXCI7dmFyIGQ9dyhlLGwpO3ZhciBmPWM7aWYoKGQubGVuZ3RoPT0yfHxkLmxlbmd0aD09MykmJmUuc3Vic3RyKGRbMF0sMik9PVwiMDZcIiYmZS5zdWJzdHIoZFtkLmxlbmd0aC0xXSwyKT09XCIwNFwiKXt2YXIgbz1wLm9pZG5hbWUoaihlLGRbMF0pKTt2YXIgcj1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGMpKTtyLng1MDlFeHROYW1lPW87Zj1yfWZvcih2YXIgdT0wO3U8ZC5sZW5ndGg7dSsrKXtrPWsreShlLGYsZFt1XSxnK1wiICBcIil9cmV0dXJuIGt9aWYoZS5zdWJzdHIobCwyKT09XCIzMVwiKXt2YXIgaz1nK1wiU0VUXFxuXCI7dmFyIGQ9dyhlLGwpO2Zvcih2YXIgdT0wO3U8ZC5sZW5ndGg7dSsrKXtrPWsreShlLGMsZFt1XSxnK1wiICBcIil9cmV0dXJuIGt9dmFyIHo9cGFyc2VJbnQoZS5zdWJzdHIobCwyKSwxNik7aWYoKHomMTI4KSE9MCl7dmFyIG49eiYzMTtpZigoeiYzMikhPTApe3ZhciBrPWcrXCJbXCIrbitcIl1cXG5cIjt2YXIgZD13KGUsbCk7Zm9yKHZhciB1PTA7dTxkLmxlbmd0aDt1Kyspe2s9ayt5KGUsYyxkW3VdLGcrXCIgIFwiKX1yZXR1cm4ga31lbHNle3ZhciBoPWooZSxsKTtpZihoLnN1YnN0cigwLDgpPT1cIjY4NzQ3NDcwXCIpe2g9aGV4dG91dGY4KGgpfWlmKGMueDUwOUV4dE5hbWU9PT1cInN1YmplY3RBbHROYW1lXCImJm49PTIpe2g9aGV4dG91dGY4KGgpfXZhciBrPWcrXCJbXCIrbitcIl0gXCIraCtcIlxcblwiO3JldHVybiBrfX1yZXR1cm4gZytcIlVOS05PV04oXCIrZS5zdWJzdHIobCwyKStcIikgXCIraihlLGwpK1wiXFxuXCJ9O0FTTjFIRVguaXNBU04xSEVYPWZ1bmN0aW9uKGUpe3ZhciBkPUFTTjFIRVg7aWYoZS5sZW5ndGglMj09MSl7cmV0dXJuIGZhbHNlfXZhciBjPWQuZ2V0VmJsZW4oZSwwKTt2YXIgYj1lLnN1YnN0cigwLDIpO3ZhciBmPWQuZ2V0TChlLDApO3ZhciBhPWUubGVuZ3RoLWIubGVuZ3RoLWYubGVuZ3RoO2lmKGE9PWMqMil7cmV0dXJuIHRydWV9cmV0dXJuIGZhbHNlfTtBU04xSEVYLm9pZG5hbWU9ZnVuY3Rpb24oYSl7dmFyIGM9S0pVUi5hc24xO2lmKEtKVVIubGFuZy5TdHJpbmcuaXNIZXgoYSkpe2E9Yy5BU04xVXRpbC5vaWRIZXhUb0ludChhKX12YXIgYj1jLng1MDkuT0lELm9pZDJuYW1lKGEpO2lmKGI9PT1cIlwiKXtiPWF9cmV0dXJuIGJ9O1xudmFyIEtKVVI7aWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmxhbmc9PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmxhbmcpe0tKVVIubGFuZz17fX1LSlVSLmxhbmcuU3RyaW5nPWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBCYXNlNjR4KCl7fWZ1bmN0aW9uIHN0b0JBKGQpe3ZhciBiPW5ldyBBcnJheSgpO2Zvcih2YXIgYz0wO2M8ZC5sZW5ndGg7YysrKXtiW2NdPWQuY2hhckNvZGVBdChjKX1yZXR1cm4gYn1mdW5jdGlvbiBCQXRvcyhiKXt2YXIgZD1cIlwiO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXtkPWQrU3RyaW5nLmZyb21DaGFyQ29kZShiW2NdKX1yZXR1cm4gZH1mdW5jdGlvbiBCQXRvaGV4KGIpe3ZhciBlPVwiXCI7Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBjPWJbZF0udG9TdHJpbmcoMTYpO2lmKGMubGVuZ3RoPT0xKXtjPVwiMFwiK2N9ZT1lK2N9cmV0dXJuIGV9ZnVuY3Rpb24gc3RvaGV4KGEpe3JldHVybiBCQXRvaGV4KHN0b0JBKGEpKX1mdW5jdGlvbiBzdG9iNjQoYSl7cmV0dXJuIGhleDJiNjQoc3RvaGV4KGEpKX1mdW5jdGlvbiBzdG9iNjR1KGEpe3JldHVybiBiNjR0b2I2NHUoaGV4MmI2NChzdG9oZXgoYSkpKX1mdW5jdGlvbiBiNjR1dG9zKGEpe3JldHVybiBCQXRvcyhiNjR0b0JBKGI2NHV0b2I2NChhKSkpfWZ1bmN0aW9uIGI2NHRvYjY0dShhKXthPWEucmVwbGFjZSgvXFw9L2csXCJcIik7YT1hLnJlcGxhY2UoL1xcKy9nLFwiLVwiKTthPWEucmVwbGFjZSgvXFwvL2csXCJfXCIpO3JldHVybiBhfWZ1bmN0aW9uIGI2NHV0b2I2NChhKXtpZihhLmxlbmd0aCU0PT0yKXthPWErXCI9PVwifWVsc2V7aWYoYS5sZW5ndGglND09Myl7YT1hK1wiPVwifX1hPWEucmVwbGFjZSgvLS9nLFwiK1wiKTthPWEucmVwbGFjZSgvXy9nLFwiL1wiKTtyZXR1cm4gYX1mdW5jdGlvbiBoZXh0b2I2NHUoYSl7aWYoYS5sZW5ndGglMj09MSl7YT1cIjBcIithfXJldHVybiBiNjR0b2I2NHUoaGV4MmI2NChhKSl9ZnVuY3Rpb24gYjY0dXRvaGV4KGEpe3JldHVybiBiNjR0b2hleChiNjR1dG9iNjQoYSkpfXZhciB1dGY4dG9iNjR1LGI2NHV0b3V0Zjg7aWYodHlwZW9mIEJ1ZmZlcj09PVwiZnVuY3Rpb25cIil7dXRmOHRvYjY0dT1mdW5jdGlvbihhKXtyZXR1cm4gYjY0dG9iNjR1KG5ldyBCdWZmZXIoYSxcInV0ZjhcIikudG9TdHJpbmcoXCJiYXNlNjRcIikpfTtiNjR1dG91dGY4PWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgQnVmZmVyKGI2NHV0b2I2NChhKSxcImJhc2U2NFwiKS50b1N0cmluZyhcInV0ZjhcIil9fWVsc2V7dXRmOHRvYjY0dT1mdW5jdGlvbihhKXtyZXR1cm4gaGV4dG9iNjR1KHVyaWNtcHRvaGV4KGVuY29kZVVSSUNvbXBvbmVudEFsbChhKSkpfTtiNjR1dG91dGY4PWZ1bmN0aW9uKGEpe3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoaGV4dG91cmljbXAoYjY0dXRvaGV4KGEpKSl9fWZ1bmN0aW9uIHV0Zjh0b2I2NChhKXtyZXR1cm4gaGV4MmI2NCh1cmljbXB0b2hleChlbmNvZGVVUklDb21wb25lbnRBbGwoYSkpKX1mdW5jdGlvbiBiNjR0b3V0ZjgoYSl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChoZXh0b3VyaWNtcChiNjR0b2hleChhKSkpfWZ1bmN0aW9uIHV0Zjh0b2hleChhKXtyZXR1cm4gdXJpY21wdG9oZXgoZW5jb2RlVVJJQ29tcG9uZW50QWxsKGEpKX1mdW5jdGlvbiBoZXh0b3V0ZjgoYSl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChoZXh0b3VyaWNtcChhKSl9ZnVuY3Rpb24gaGV4dG9yc3RyKGMpe3ZhciBiPVwiXCI7Zm9yKHZhciBhPTA7YTxjLmxlbmd0aC0xO2ErPTIpe2IrPVN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoYy5zdWJzdHIoYSwyKSwxNikpfXJldHVybiBifWZ1bmN0aW9uIHJzdHJ0b2hleChjKXt2YXIgYT1cIlwiO2Zvcih2YXIgYj0wO2I8Yy5sZW5ndGg7YisrKXthKz0oXCIwXCIrYy5jaGFyQ29kZUF0KGIpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpfXJldHVybiBhfWZ1bmN0aW9uIGhleHRvYjY0KGEpe3JldHVybiBoZXgyYjY0KGEpfWZ1bmN0aW9uIGhleHRvYjY0bmwoYil7dmFyIGE9aGV4dG9iNjQoYik7dmFyIGM9YS5yZXBsYWNlKC8oLns2NH0pL2csXCIkMVxcclxcblwiKTtjPWMucmVwbGFjZSgvXFxyXFxuJC8sXCJcIik7cmV0dXJuIGN9ZnVuY3Rpb24gYjY0bmx0b2hleChiKXt2YXIgYT1iLnJlcGxhY2UoL1teMC05QS1aYS16XFwvKz1dKi9nLFwiXCIpO3ZhciBjPWI2NHRvaGV4KGEpO3JldHVybiBjfWZ1bmN0aW9uIGhleHRvcGVtKGEsYil7dmFyIGM9aGV4dG9iNjRubChhKTtyZXR1cm5cIi0tLS0tQkVHSU4gXCIrYitcIi0tLS0tXFxyXFxuXCIrYytcIlxcclxcbi0tLS0tRU5EIFwiK2IrXCItLS0tLVxcclxcblwifWZ1bmN0aW9uIHBlbXRvaGV4KGEsYil7aWYoYS5pbmRleE9mKFwiLS0tLS1CRUdJTiBcIik9PS0xKXt0aHJvd1wiY2FuJ3QgZmluZCBQRU0gaGVhZGVyOiBcIitifWlmKGIhPT11bmRlZmluZWQpe2E9YS5yZXBsYWNlKFwiLS0tLS1CRUdJTiBcIitiK1wiLS0tLS1cIixcIlwiKTthPWEucmVwbGFjZShcIi0tLS0tRU5EIFwiK2IrXCItLS0tLVwiLFwiXCIpfWVsc2V7YT1hLnJlcGxhY2UoLy0tLS0tQkVHSU4gW14tXSstLS0tLS8sXCJcIik7YT1hLnJlcGxhY2UoLy0tLS0tRU5EIFteLV0rLS0tLS0vLFwiXCIpfXJldHVybiBiNjRubHRvaGV4KGEpfWZ1bmN0aW9uIGhleHRvQXJyYXlCdWZmZXIoZCl7aWYoZC5sZW5ndGglMiE9MCl7dGhyb3dcImlucHV0IGlzIG5vdCBldmVuIGxlbmd0aFwifWlmKGQubWF0Y2goL15bMC05QS1GYS1mXSskLyk9PW51bGwpe3Rocm93XCJpbnB1dCBpcyBub3QgaGV4YWRlY2ltYWxcIn12YXIgYj1uZXcgQXJyYXlCdWZmZXIoZC5sZW5ndGgvMik7dmFyIGE9bmV3IERhdGFWaWV3KGIpO2Zvcih2YXIgYz0wO2M8ZC5sZW5ndGgvMjtjKyspe2Euc2V0VWludDgoYyxwYXJzZUludChkLnN1YnN0cihjKjIsMiksMTYpKX1yZXR1cm4gYn1mdW5jdGlvbiBBcnJheUJ1ZmZlcnRvaGV4KGIpe3ZhciBkPVwiXCI7dmFyIGE9bmV3IERhdGFWaWV3KGIpO2Zvcih2YXIgYz0wO2M8Yi5ieXRlTGVuZ3RoO2MrKyl7ZCs9KFwiMDBcIithLmdldFVpbnQ4KGMpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpfXJldHVybiBkfWZ1bmN0aW9uIHp1bHV0b21zZWMobil7dmFyIGwsaixtLGUsZixpLGIsazt2YXIgYSxoLGcsYztjPW4ubWF0Y2goL14oXFxkezJ9fFxcZHs0fSkoXFxkXFxkKShcXGRcXGQpKFxcZFxcZCkoXFxkXFxkKShcXGRcXGQpKHxcXC5cXGQrKVokLyk7aWYoYyl7YT1jWzFdO2w9cGFyc2VJbnQoYSk7aWYoYS5sZW5ndGg9PT0yKXtpZig1MDw9bCYmbDwxMDApe2w9MTkwMCtsfWVsc2V7aWYoMDw9bCYmbDw1MCl7bD0yMDAwK2x9fX1qPXBhcnNlSW50KGNbMl0pLTE7bT1wYXJzZUludChjWzNdKTtlPXBhcnNlSW50KGNbNF0pO2Y9cGFyc2VJbnQoY1s1XSk7aT1wYXJzZUludChjWzZdKTtiPTA7aD1jWzddO2lmKGghPT1cIlwiKXtnPShoLnN1YnN0cigxKStcIjAwXCIpLnN1YnN0cigwLDMpO2I9cGFyc2VJbnQoZyl9cmV0dXJuIERhdGUuVVRDKGwsaixtLGUsZixpLGIpfXRocm93XCJ1bnN1cHBvcnRlZCB6dWx1IGZvcm1hdDogXCIrbn1mdW5jdGlvbiB6dWx1dG9zZWMoYSl7dmFyIGI9enVsdXRvbXNlYyhhKTtyZXR1cm4gfn4oYi8xMDAwKX1mdW5jdGlvbiB6dWx1dG9kYXRlKGEpe3JldHVybiBuZXcgRGF0ZSh6dWx1dG9tc2VjKGEpKX1mdW5jdGlvbiBkYXRldG96dWx1KGcsZSxmKXt2YXIgYjt2YXIgYT1nLmdldFVUQ0Z1bGxZZWFyKCk7aWYoZSl7aWYoYTwxOTUwfHwyMDQ5PGEpe3Rocm93XCJub3QgcHJvcGVyIHllYXIgZm9yIFVUQ1RpbWU6IFwiK2F9Yj0oXCJcIithKS5zbGljZSgtMil9ZWxzZXtiPShcIjAwMFwiK2EpLnNsaWNlKC00KX1iKz0oXCIwXCIrKGcuZ2V0VVRDTW9udGgoKSsxKSkuc2xpY2UoLTIpO2IrPShcIjBcIitnLmdldFVUQ0RhdGUoKSkuc2xpY2UoLTIpO2IrPShcIjBcIitnLmdldFVUQ0hvdXJzKCkpLnNsaWNlKC0yKTtiKz0oXCIwXCIrZy5nZXRVVENNaW51dGVzKCkpLnNsaWNlKC0yKTtiKz0oXCIwXCIrZy5nZXRVVENTZWNvbmRzKCkpLnNsaWNlKC0yKTtpZihmKXt2YXIgYz1nLmdldFVUQ01pbGxpc2Vjb25kcygpO2lmKGMhPT0wKXtjPShcIjAwXCIrYykuc2xpY2UoLTMpO2M9Yy5yZXBsYWNlKC8wKyQvZyxcIlwiKTtiKz1cIi5cIitjfX1iKz1cIlpcIjtyZXR1cm4gYn1mdW5jdGlvbiB1cmljbXB0b2hleChhKXtyZXR1cm4gYS5yZXBsYWNlKC8lL2csXCJcIil9ZnVuY3Rpb24gaGV4dG91cmljbXAoYSl7cmV0dXJuIGEucmVwbGFjZSgvKC4uKS9nLFwiJSQxXCIpfWZ1bmN0aW9uIGlwdjZ0b2hleChnKXt2YXIgYj1cIm1hbGZvcm1lZCBJUHY2IGFkZHJlc3NcIjtpZighZy5tYXRjaCgvXlswLTlBLUZhLWY6XSskLykpe3Rocm93IGJ9Zz1nLnRvTG93ZXJDYXNlKCk7dmFyIGQ9Zy5zcGxpdChcIjpcIikubGVuZ3RoLTE7aWYoZDwyKXt0aHJvdyBifXZhciBlPVwiOlwiLnJlcGVhdCg3LWQrMik7Zz1nLnJlcGxhY2UoXCI6OlwiLGUpO3ZhciBjPWcuc3BsaXQoXCI6XCIpO2lmKGMubGVuZ3RoIT04KXt0aHJvdyBifWZvcih2YXIgZj0wO2Y8ODtmKyspe2NbZl09KFwiMDAwMFwiK2NbZl0pLnNsaWNlKC00KX1yZXR1cm4gYy5qb2luKFwiXCIpfWZ1bmN0aW9uIGhleHRvaXB2NihlKXtpZighZS5tYXRjaCgvXlswLTlBLUZhLWZdezMyfSQvKSl7dGhyb3dcIm1hbGZvcm1lZCBJUHY2IGFkZHJlc3Mgb2N0ZXRcIn1lPWUudG9Mb3dlckNhc2UoKTt2YXIgYj1lLm1hdGNoKC8uezEsNH0vZyk7Zm9yKHZhciBkPTA7ZDw4O2QrKyl7YltkXT1iW2RdLnJlcGxhY2UoL14wKy8sXCJcIik7aWYoYltkXT09XCJcIil7YltkXT1cIjBcIn19ZT1cIjpcIitiLmpvaW4oXCI6XCIpK1wiOlwiO3ZhciBjPWUubWF0Y2goLzooMDopezIsfS9nKTtpZihjPT09bnVsbCl7cmV0dXJuIGUuc2xpY2UoMSwtMSl9dmFyIGY9XCJcIjtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7aWYoY1tkXS5sZW5ndGg+Zi5sZW5ndGgpe2Y9Y1tkXX19ZT1lLnJlcGxhY2UoZixcIjo6XCIpO3JldHVybiBlLnNsaWNlKDEsLTEpfWZ1bmN0aW9uIGhleHRvaXAoYil7dmFyIGQ9XCJtYWxmb3JtZWQgaGV4IHZhbHVlXCI7aWYoIWIubWF0Y2goL14oWzAtOUEtRmEtZl1bMC05QS1GYS1mXSl7MSx9JC8pKXt0aHJvdyBkfWlmKGIubGVuZ3RoPT04KXt2YXIgYzt0cnl7Yz1wYXJzZUludChiLnN1YnN0cigwLDIpLDE2KStcIi5cIitwYXJzZUludChiLnN1YnN0cigyLDIpLDE2KStcIi5cIitwYXJzZUludChiLnN1YnN0cig0LDIpLDE2KStcIi5cIitwYXJzZUludChiLnN1YnN0cig2LDIpLDE2KTtyZXR1cm4gY31jYXRjaChhKXt0aHJvdyBkfX1lbHNle2lmKGIubGVuZ3RoPT0zMil7cmV0dXJuIGhleHRvaXB2NihiKX1lbHNle3JldHVybiBifX19ZnVuY3Rpb24gaXB0b2hleChmKXt2YXIgaj1cIm1hbGZvcm1lZCBJUCBhZGRyZXNzXCI7Zj1mLnRvTG93ZXJDYXNlKGYpO2lmKGYubWF0Y2goL15bMC05Ll0rJC8pKXt2YXIgYj1mLnNwbGl0KFwiLlwiKTtpZihiLmxlbmd0aCE9PTQpe3Rocm93IGp9dmFyIGc9XCJcIjt0cnl7Zm9yKHZhciBlPTA7ZTw0O2UrKyl7dmFyIGg9cGFyc2VJbnQoYltlXSk7Zys9KFwiMFwiK2gudG9TdHJpbmcoMTYpKS5zbGljZSgtMil9cmV0dXJuIGd9Y2F0Y2goYyl7dGhyb3cgan19ZWxzZXtpZihmLm1hdGNoKC9eWzAtOWEtZjpdKyQvKSYmZi5pbmRleE9mKFwiOlwiKSE9PS0xKXtyZXR1cm4gaXB2NnRvaGV4KGYpfWVsc2V7dGhyb3cgan19fWZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudEFsbChhKXt2YXIgZD1lbmNvZGVVUklDb21wb25lbnQoYSk7dmFyIGI9XCJcIjtmb3IodmFyIGM9MDtjPGQubGVuZ3RoO2MrKyl7aWYoZFtjXT09XCIlXCIpe2I9YitkLnN1YnN0cihjLDMpO2M9YysyfWVsc2V7Yj1iK1wiJVwiK3N0b2hleChkW2NdKX19cmV0dXJuIGJ9ZnVuY3Rpb24gbmV3bGluZV90b1VuaXgoYSl7YT1hLnJlcGxhY2UoL1xcclxcbi9tZyxcIlxcblwiKTtyZXR1cm4gYX1mdW5jdGlvbiBuZXdsaW5lX3RvRG9zKGEpe2E9YS5yZXBsYWNlKC9cXHJcXG4vbWcsXCJcXG5cIik7YT1hLnJlcGxhY2UoL1xcbi9tZyxcIlxcclxcblwiKTtyZXR1cm4gYX1LSlVSLmxhbmcuU3RyaW5nLmlzSW50ZWdlcj1mdW5jdGlvbihhKXtpZihhLm1hdGNoKC9eWzAtOV0rJC8pKXtyZXR1cm4gdHJ1ZX1lbHNle2lmKGEubWF0Y2goL14tWzAtOV0rJC8pKXtyZXR1cm4gdHJ1ZX1lbHNle3JldHVybiBmYWxzZX19fTtLSlVSLmxhbmcuU3RyaW5nLmlzSGV4PWZ1bmN0aW9uKGEpe2lmKGEubGVuZ3RoJTI9PTAmJihhLm1hdGNoKC9eWzAtOWEtZl0rJC8pfHxhLm1hdGNoKC9eWzAtOUEtRl0rJC8pKSl7cmV0dXJuIHRydWV9ZWxzZXtyZXR1cm4gZmFsc2V9fTtLSlVSLmxhbmcuU3RyaW5nLmlzQmFzZTY0PWZ1bmN0aW9uKGEpe2E9YS5yZXBsYWNlKC9cXHMrL2csXCJcIik7aWYoYS5tYXRjaCgvXlswLTlBLVphLXorXFwvXSs9ezAsM30kLykmJmEubGVuZ3RoJTQ9PTApe3JldHVybiB0cnVlfWVsc2V7cmV0dXJuIGZhbHNlfX07S0pVUi5sYW5nLlN0cmluZy5pc0Jhc2U2NFVSTD1mdW5jdGlvbihhKXtpZihhLm1hdGNoKC9bKy89XS8pKXtyZXR1cm4gZmFsc2V9YT1iNjR1dG9iNjQoYSk7cmV0dXJuIEtKVVIubGFuZy5TdHJpbmcuaXNCYXNlNjQoYSl9O0tKVVIubGFuZy5TdHJpbmcuaXNJbnRlZ2VyQXJyYXk9ZnVuY3Rpb24oYSl7YT1hLnJlcGxhY2UoL1xccysvZyxcIlwiKTtpZihhLm1hdGNoKC9eXFxbWzAtOSxdK1xcXSQvKSl7cmV0dXJuIHRydWV9ZWxzZXtyZXR1cm4gZmFsc2V9fTtmdW5jdGlvbiBoZXh0b3Bvc2hleChhKXtpZihhLmxlbmd0aCUyPT0xKXtyZXR1cm5cIjBcIithfWlmKGEuc3Vic3RyKDAsMSk+XCI3XCIpe3JldHVyblwiMDBcIithfXJldHVybiBhfWZ1bmN0aW9uIGludGFyeXN0cnRvaGV4KGIpe2I9Yi5yZXBsYWNlKC9eXFxzKlxcW1xccyovLFwiXCIpO2I9Yi5yZXBsYWNlKC9cXHMqXFxdXFxzKiQvLFwiXCIpO2I9Yi5yZXBsYWNlKC9cXHMqL2csXCJcIik7dHJ5e3ZhciBjPWIuc3BsaXQoLywvKS5tYXAoZnVuY3Rpb24oZyxlLGgpe3ZhciBmPXBhcnNlSW50KGcpO2lmKGY8MHx8MjU1PGYpe3Rocm93XCJpbnRlZ2VyIG5vdCBpbiByYW5nZSAwLTI1NVwifXZhciBkPShcIjAwXCIrZi50b1N0cmluZygxNikpLnNsaWNlKC0yKTtyZXR1cm4gZH0pLmpvaW4oXCJcIik7cmV0dXJuIGN9Y2F0Y2goYSl7dGhyb3dcIm1hbGZvcm1lZCBpbnRlZ2VyIGFycmF5IHN0cmluZzogXCIrYX19dmFyIHN0cmRpZmZpZHg9ZnVuY3Rpb24oYyxhKXt2YXIgZD1jLmxlbmd0aDtpZihjLmxlbmd0aD5hLmxlbmd0aCl7ZD1hLmxlbmd0aH1mb3IodmFyIGI9MDtiPGQ7YisrKXtpZihjLmNoYXJDb2RlQXQoYikhPWEuY2hhckNvZGVBdChiKSl7cmV0dXJuIGJ9fWlmKGMubGVuZ3RoIT1hLmxlbmd0aCl7cmV0dXJuIGR9cmV0dXJuIC0xfTtcbmlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5jcnlwdG89PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmNyeXB0byl7S0pVUi5jcnlwdG89e319S0pVUi5jcnlwdG8uVXRpbD1uZXcgZnVuY3Rpb24oKXt0aGlzLkRJR0VTVElORk9IRUFEPXtzaGExOlwiMzAyMTMwMDkwNjA1MmIwZTAzMDIxYTA1MDAwNDE0XCIsc2hhMjI0OlwiMzAyZDMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjA0MDUwMDA0MWNcIixzaGEyNTY6XCIzMDMxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDEwNTAwMDQyMFwiLHNoYTM4NDpcIjMwNDEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMjA1MDAwNDMwXCIsc2hhNTEyOlwiMzA1MTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAzMDUwMDA0NDBcIixtZDI6XCIzMDIwMzAwYzA2MDgyYTg2NDg4NmY3MGQwMjAyMDUwMDA0MTBcIixtZDU6XCIzMDIwMzAwYzA2MDgyYTg2NDg4NmY3MGQwMjA1MDUwMDA0MTBcIixyaXBlbWQxNjA6XCIzMDIxMzAwOTA2MDUyYjI0MDMwMjAxMDUwMDA0MTRcIix9O3RoaXMuREVGQVVMVFBST1ZJREVSPXttZDU6XCJjcnlwdG9qc1wiLHNoYTE6XCJjcnlwdG9qc1wiLHNoYTIyNDpcImNyeXB0b2pzXCIsc2hhMjU2OlwiY3J5cHRvanNcIixzaGEzODQ6XCJjcnlwdG9qc1wiLHNoYTUxMjpcImNyeXB0b2pzXCIscmlwZW1kMTYwOlwiY3J5cHRvanNcIixobWFjbWQ1OlwiY3J5cHRvanNcIixobWFjc2hhMTpcImNyeXB0b2pzXCIsaG1hY3NoYTIyNDpcImNyeXB0b2pzXCIsaG1hY3NoYTI1NjpcImNyeXB0b2pzXCIsaG1hY3NoYTM4NDpcImNyeXB0b2pzXCIsaG1hY3NoYTUxMjpcImNyeXB0b2pzXCIsaG1hY3JpcGVtZDE2MDpcImNyeXB0b2pzXCIsTUQ1d2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMXdpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTIyNHdpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTI1NndpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTM4NHdpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTUxMndpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFJJUEVNRDE2MHdpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLE1ENXdpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMXdpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjI0d2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyNTZ3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTM4NHdpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBNTEyd2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixSSVBFTUQxNjB3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTF3aXRoRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyMjR3aXRoRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyNTZ3aXRoRFNBOlwiY3J5cHRvanMvanNyc2FcIixNRDV3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMXdpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIixTSEEyMjR3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjU2d2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTM4NHdpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIixTSEE1MTJ3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsUklQRU1EMTYwd2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLH07dGhpcy5DUllQVE9KU01FU1NBR0VESUdFU1ROQU1FPXttZDU6Q3J5cHRvSlMuYWxnby5NRDUsc2hhMTpDcnlwdG9KUy5hbGdvLlNIQTEsc2hhMjI0OkNyeXB0b0pTLmFsZ28uU0hBMjI0LHNoYTI1NjpDcnlwdG9KUy5hbGdvLlNIQTI1NixzaGEzODQ6Q3J5cHRvSlMuYWxnby5TSEEzODQsc2hhNTEyOkNyeXB0b0pTLmFsZ28uU0hBNTEyLHJpcGVtZDE2MDpDcnlwdG9KUy5hbGdvLlJJUEVNRDE2MH07dGhpcy5nZXREaWdlc3RJbmZvSGV4PWZ1bmN0aW9uKGEsYil7aWYodHlwZW9mIHRoaXMuRElHRVNUSU5GT0hFQURbYl09PVwidW5kZWZpbmVkXCIpe3Rocm93XCJhbGcgbm90IHN1cHBvcnRlZCBpbiBVdGlsLkRJR0VTVElORk9IRUFEOiBcIitifXJldHVybiB0aGlzLkRJR0VTVElORk9IRUFEW2JdK2F9O3RoaXMuZ2V0UGFkZGVkRGlnZXN0SW5mb0hleD1mdW5jdGlvbihoLGEsail7dmFyIGM9dGhpcy5nZXREaWdlc3RJbmZvSGV4KGgsYSk7dmFyIGQ9ai80O2lmKGMubGVuZ3RoKzIyPmQpe3Rocm93XCJrZXkgaXMgdG9vIHNob3J0IGZvciBTaWdBbGc6IGtleWxlbj1cIitqK1wiLFwiK2F9dmFyIGI9XCIwMDAxXCI7dmFyIGs9XCIwMFwiK2M7dmFyIGc9XCJcIjt2YXIgbD1kLWIubGVuZ3RoLWsubGVuZ3RoO2Zvcih2YXIgZj0wO2Y8bDtmKz0yKXtnKz1cImZmXCJ9dmFyIGU9YitnK2s7cmV0dXJuIGV9O3RoaXMuaGFzaFN0cmluZz1mdW5jdGlvbihhLGMpe3ZhciBiPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6Y30pO3JldHVybiBiLmRpZ2VzdFN0cmluZyhhKX07dGhpcy5oYXNoSGV4PWZ1bmN0aW9uKGIsYyl7dmFyIGE9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpjfSk7cmV0dXJuIGEuZGlnZXN0SGV4KGIpfTt0aGlzLnNoYTE9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpcInNoYTFcIixwcm92OlwiY3J5cHRvanNcIn0pO3JldHVybiBiLmRpZ2VzdFN0cmluZyhhKX07dGhpcy5zaGEyNTY9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpcInNoYTI1NlwiLHByb3Y6XCJjcnlwdG9qc1wifSk7cmV0dXJuIGIuZGlnZXN0U3RyaW5nKGEpfTt0aGlzLnNoYTI1NkhleD1mdW5jdGlvbihhKXt2YXIgYj1uZXcgS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOlwic2hhMjU2XCIscHJvdjpcImNyeXB0b2pzXCJ9KTtyZXR1cm4gYi5kaWdlc3RIZXgoYSl9O3RoaXMuc2hhNTEyPWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6XCJzaGE1MTJcIixwcm92OlwiY3J5cHRvanNcIn0pO3JldHVybiBiLmRpZ2VzdFN0cmluZyhhKX07dGhpcy5zaGE1MTJIZXg9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpcInNoYTUxMlwiLHByb3Y6XCJjcnlwdG9qc1wifSk7cmV0dXJuIGIuZGlnZXN0SGV4KGEpfX07S0pVUi5jcnlwdG8uVXRpbC5tZDU9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpcIm1kNVwiLHByb3Y6XCJjcnlwdG9qc1wifSk7cmV0dXJuIGIuZGlnZXN0U3RyaW5nKGEpfTtLSlVSLmNyeXB0by5VdGlsLnJpcGVtZDE2MD1mdW5jdGlvbihhKXt2YXIgYj1uZXcgS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOlwicmlwZW1kMTYwXCIscHJvdjpcImNyeXB0b2pzXCJ9KTtyZXR1cm4gYi5kaWdlc3RTdHJpbmcoYSl9O0tKVVIuY3J5cHRvLlV0aWwuU0VDVVJFUkFORE9NR0VOPW5ldyBTZWN1cmVSYW5kb20oKTtLSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUhleE9mTmJ5dGVzPWZ1bmN0aW9uKGIpe3ZhciBhPW5ldyBBcnJheShiKTtLSlVSLmNyeXB0by5VdGlsLlNFQ1VSRVJBTkRPTUdFTi5uZXh0Qnl0ZXMoYSk7cmV0dXJuIEJBdG9oZXgoYSl9O0tKVVIuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tQmlnSW50ZWdlck9mTmJ5dGVzPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgQmlnSW50ZWdlcihLSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUhleE9mTmJ5dGVzKGEpLDE2KX07S0pVUi5jcnlwdG8uVXRpbC5nZXRSYW5kb21IZXhPZk5iaXRzPWZ1bmN0aW9uKGQpe3ZhciBjPWQlODt2YXIgYT0oZC1jKS84O3ZhciBiPW5ldyBBcnJheShhKzEpO0tKVVIuY3J5cHRvLlV0aWwuU0VDVVJFUkFORE9NR0VOLm5leHRCeXRlcyhiKTtiWzBdPSgoKDI1NTw8YykmMjU1KV4yNTUpJmJbMF07cmV0dXJuIEJBdG9oZXgoYil9O0tKVVIuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tQmlnSW50ZWdlck9mTmJpdHM9ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKEtKVVIuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tSGV4T2ZOYml0cyhhKSwxNil9O0tKVVIuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tQmlnSW50ZWdlclplcm9Ub01heD1mdW5jdGlvbihiKXt2YXIgYT1iLmJpdExlbmd0aCgpO3doaWxlKDEpe3ZhciBjPUtKVVIuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tQmlnSW50ZWdlck9mTmJpdHMoYSk7aWYoYi5jb21wYXJlVG8oYykhPS0xKXtyZXR1cm4gY319fTtLSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUJpZ0ludGVnZXJNaW5Ub01heD1mdW5jdGlvbihlLGIpe3ZhciBjPWUuY29tcGFyZVRvKGIpO2lmKGM9PTEpe3Rocm93XCJiaU1pbiBpcyBncmVhdGVyIHRoYW4gYmlNYXhcIn1pZihjPT0wKXtyZXR1cm4gZX12YXIgYT1iLnN1YnRyYWN0KGUpO3ZhciBkPUtKVVIuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tQmlnSW50ZWdlclplcm9Ub01heChhKTtyZXR1cm4gZC5hZGQoZSl9O0tKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Q9ZnVuY3Rpb24oYyl7dmFyIGI9bnVsbDt2YXIgYT1udWxsO3ZhciBkPW51bGw7dGhpcy5zZXRBbGdBbmRQcm92aWRlcj1mdW5jdGlvbihnLGYpe2c9S0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdC5nZXRDYW5vbmljYWxBbGdOYW1lKGcpO2lmKGchPT1udWxsJiZmPT09dW5kZWZpbmVkKXtmPUtKVVIuY3J5cHRvLlV0aWwuREVGQVVMVFBST1ZJREVSW2ddfWlmKFwiOm1kNTpzaGExOnNoYTIyNDpzaGEyNTY6c2hhMzg0OnNoYTUxMjpyaXBlbWQxNjA6XCIuaW5kZXhPZihnKSE9LTEmJmY9PVwiY3J5cHRvanNcIil7dHJ5e3RoaXMubWQ9S0pVUi5jcnlwdG8uVXRpbC5DUllQVE9KU01FU1NBR0VESUdFU1ROQU1FW2ddLmNyZWF0ZSgpfWNhdGNoKGUpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciBoYXNoIGFsZyBzZXQgZmFpbCBhbGc9XCIrZytcIi9cIitlfXRoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGgpe3RoaXMubWQudXBkYXRlKGgpfTt0aGlzLnVwZGF0ZUhleD1mdW5jdGlvbihoKXt2YXIgaT1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKGgpO3RoaXMubWQudXBkYXRlKGkpfTt0aGlzLmRpZ2VzdD1mdW5jdGlvbigpe3ZhciBoPXRoaXMubWQuZmluYWxpemUoKTtyZXR1cm4gaC50b1N0cmluZyhDcnlwdG9KUy5lbmMuSGV4KX07dGhpcy5kaWdlc3RTdHJpbmc9ZnVuY3Rpb24oaCl7dGhpcy51cGRhdGVTdHJpbmcoaCk7cmV0dXJuIHRoaXMuZGlnZXN0KCl9O3RoaXMuZGlnZXN0SGV4PWZ1bmN0aW9uKGgpe3RoaXMudXBkYXRlSGV4KGgpO3JldHVybiB0aGlzLmRpZ2VzdCgpfX1pZihcIjpzaGEyNTY6XCIuaW5kZXhPZihnKSE9LTEmJmY9PVwic2pjbFwiKXt0cnl7dGhpcy5tZD1uZXcgc2pjbC5oYXNoLnNoYTI1NigpfWNhdGNoKGUpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciBoYXNoIGFsZyBzZXQgZmFpbCBhbGc9XCIrZytcIi9cIitlfXRoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGgpe3RoaXMubWQudXBkYXRlKGgpfTt0aGlzLnVwZGF0ZUhleD1mdW5jdGlvbihpKXt2YXIgaD1zamNsLmNvZGVjLmhleC50b0JpdHMoaSk7dGhpcy5tZC51cGRhdGUoaCl9O3RoaXMuZGlnZXN0PWZ1bmN0aW9uKCl7dmFyIGg9dGhpcy5tZC5maW5hbGl6ZSgpO3JldHVybiBzamNsLmNvZGVjLmhleC5mcm9tQml0cyhoKX07dGhpcy5kaWdlc3RTdHJpbmc9ZnVuY3Rpb24oaCl7dGhpcy51cGRhdGVTdHJpbmcoaCk7cmV0dXJuIHRoaXMuZGlnZXN0KCl9O3RoaXMuZGlnZXN0SGV4PWZ1bmN0aW9uKGgpe3RoaXMudXBkYXRlSGV4KGgpO3JldHVybiB0aGlzLmRpZ2VzdCgpfX19O3RoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGUpe3Rocm93XCJ1cGRhdGVTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ05hbWUrXCIvXCIrdGhpcy5wcm92TmFtZX07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24oZSl7dGhyb3dcInVwZGF0ZUhleChoZXgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnTmFtZStcIi9cIit0aGlzLnByb3ZOYW1lfTt0aGlzLmRpZ2VzdD1mdW5jdGlvbigpe3Rocm93XCJkaWdlc3QoKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ05hbWUrXCIvXCIrdGhpcy5wcm92TmFtZX07dGhpcy5kaWdlc3RTdHJpbmc9ZnVuY3Rpb24oZSl7dGhyb3dcImRpZ2VzdFN0cmluZyhzdHIpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnTmFtZStcIi9cIit0aGlzLnByb3ZOYW1lfTt0aGlzLmRpZ2VzdEhleD1mdW5jdGlvbihlKXt0aHJvd1wiZGlnZXN0SGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdOYW1lK1wiL1wiK3RoaXMucHJvdk5hbWV9O2lmKGMhPT11bmRlZmluZWQpe2lmKGMuYWxnIT09dW5kZWZpbmVkKXt0aGlzLmFsZ05hbWU9Yy5hbGc7aWYoYy5wcm92PT09dW5kZWZpbmVkKXt0aGlzLnByb3ZOYW1lPUtKVVIuY3J5cHRvLlV0aWwuREVGQVVMVFBST1ZJREVSW3RoaXMuYWxnTmFtZV19dGhpcy5zZXRBbGdBbmRQcm92aWRlcih0aGlzLmFsZ05hbWUsdGhpcy5wcm92TmFtZSl9fX07S0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdC5nZXRDYW5vbmljYWxBbGdOYW1lPWZ1bmN0aW9uKGEpe2lmKHR5cGVvZiBhPT09XCJzdHJpbmdcIil7YT1hLnRvTG93ZXJDYXNlKCk7YT1hLnJlcGxhY2UoLy0vLFwiXCIpfXJldHVybiBhfTtLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0LmdldEhhc2hMZW5ndGg9ZnVuY3Rpb24oYyl7dmFyIGI9S0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdDt2YXIgYT1iLmdldENhbm9uaWNhbEFsZ05hbWUoYyk7aWYoYi5IQVNITEVOR1RIW2FdPT09dW5kZWZpbmVkKXt0aHJvd1wibm90IHN1cHBvcnRlZCBhbGdvcml0aG06IFwiK2N9cmV0dXJuIGIuSEFTSExFTkdUSFthXX07S0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdC5IQVNITEVOR1RIPXttZDU6MTYsc2hhMToyMCxzaGEyMjQ6Mjgsc2hhMjU2OjMyLHNoYTM4NDo0OCxzaGE1MTI6NjQscmlwZW1kMTYwOjIwfTtLSlVSLmNyeXB0by5NYWM9ZnVuY3Rpb24oZCl7dmFyIGY9bnVsbDt2YXIgYz1udWxsO3ZhciBhPW51bGw7dmFyIGU9bnVsbDt2YXIgYj1udWxsO3RoaXMuc2V0QWxnQW5kUHJvdmlkZXI9ZnVuY3Rpb24oayxpKXtrPWsudG9Mb3dlckNhc2UoKTtpZihrPT1udWxsKXtrPVwiaG1hY3NoYTFcIn1rPWsudG9Mb3dlckNhc2UoKTtpZihrLnN1YnN0cigwLDQpIT1cImhtYWNcIil7dGhyb3dcInNldEFsZ0FuZFByb3ZpZGVyIHVuc3VwcG9ydGVkIEhNQUMgYWxnOiBcIitrfWlmKGk9PT11bmRlZmluZWQpe2k9S0pVUi5jcnlwdG8uVXRpbC5ERUZBVUxUUFJPVklERVJba119dGhpcy5hbGdQcm92PWsrXCIvXCIraTt2YXIgZz1rLnN1YnN0cig0KTtpZihcIjptZDU6c2hhMTpzaGEyMjQ6c2hhMjU2OnNoYTM4NDpzaGE1MTI6cmlwZW1kMTYwOlwiLmluZGV4T2YoZykhPS0xJiZpPT1cImNyeXB0b2pzXCIpe3RyeXt2YXIgaj1LSlVSLmNyeXB0by5VdGlsLkNSWVBUT0pTTUVTU0FHRURJR0VTVE5BTUVbZ107dGhpcy5tYWM9Q3J5cHRvSlMuYWxnby5ITUFDLmNyZWF0ZShqLHRoaXMucGFzcyl9Y2F0Y2goaCl7dGhyb3dcInNldEFsZ0FuZFByb3ZpZGVyIGhhc2ggYWxnIHNldCBmYWlsIGhhc2hBbGc9XCIrZytcIi9cIitofXRoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGwpe3RoaXMubWFjLnVwZGF0ZShsKX07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24obCl7dmFyIG09Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShsKTt0aGlzLm1hYy51cGRhdGUobSl9O3RoaXMuZG9GaW5hbD1mdW5jdGlvbigpe3ZhciBsPXRoaXMubWFjLmZpbmFsaXplKCk7cmV0dXJuIGwudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLkhleCl9O3RoaXMuZG9GaW5hbFN0cmluZz1mdW5jdGlvbihsKXt0aGlzLnVwZGF0ZVN0cmluZyhsKTtyZXR1cm4gdGhpcy5kb0ZpbmFsKCl9O3RoaXMuZG9GaW5hbEhleD1mdW5jdGlvbihsKXt0aGlzLnVwZGF0ZUhleChsKTtyZXR1cm4gdGhpcy5kb0ZpbmFsKCl9fX07dGhpcy51cGRhdGVTdHJpbmc9ZnVuY3Rpb24oZyl7dGhyb3dcInVwZGF0ZVN0cmluZyhzdHIpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnUHJvdn07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24oZyl7dGhyb3dcInVwZGF0ZUhleChoZXgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnUHJvdn07dGhpcy5kb0ZpbmFsPWZ1bmN0aW9uKCl7dGhyb3dcImRpZ2VzdCgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnUHJvdn07dGhpcy5kb0ZpbmFsU3RyaW5nPWZ1bmN0aW9uKGcpe3Rocm93XCJkaWdlc3RTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ1Byb3Z9O3RoaXMuZG9GaW5hbEhleD1mdW5jdGlvbihnKXt0aHJvd1wiZGlnZXN0SGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdQcm92fTt0aGlzLnNldFBhc3N3b3JkPWZ1bmN0aW9uKGgpe2lmKHR5cGVvZiBoPT1cInN0cmluZ1wiKXt2YXIgZz1oO2lmKGgubGVuZ3RoJTI9PTF8fCFoLm1hdGNoKC9eWzAtOUEtRmEtZl0rJC8pKXtnPXJzdHJ0b2hleChoKX10aGlzLnBhc3M9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShnKTtyZXR1cm59aWYodHlwZW9mIGghPVwib2JqZWN0XCIpe3Rocm93XCJLSlVSLmNyeXB0by5NYWMgdW5zdXBwb3J0ZWQgcGFzc3dvcmQgdHlwZTogXCIraH12YXIgZz1udWxsO2lmKGguaGV4IT09dW5kZWZpbmVkKXtpZihoLmhleC5sZW5ndGglMiE9MHx8IWguaGV4Lm1hdGNoKC9eWzAtOUEtRmEtZl0rJC8pKXt0aHJvd1wiTWFjOiB3cm9uZyBoZXggcGFzc3dvcmQ6IFwiK2guaGV4fWc9aC5oZXh9aWYoaC51dGY4IT09dW5kZWZpbmVkKXtnPXV0Zjh0b2hleChoLnV0ZjgpfWlmKGgucnN0ciE9PXVuZGVmaW5lZCl7Zz1yc3RydG9oZXgoaC5yc3RyKX1pZihoLmI2NCE9PXVuZGVmaW5lZCl7Zz1iNjR0b2hleChoLmI2NCl9aWYoaC5iNjR1IT09dW5kZWZpbmVkKXtnPWI2NHV0b2hleChoLmI2NHUpfWlmKGc9PW51bGwpe3Rocm93XCJLSlVSLmNyeXB0by5NYWMgdW5zdXBwb3J0ZWQgcGFzc3dvcmQgdHlwZTogXCIraH10aGlzLnBhc3M9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShnKX07aWYoZCE9PXVuZGVmaW5lZCl7aWYoZC5wYXNzIT09dW5kZWZpbmVkKXt0aGlzLnNldFBhc3N3b3JkKGQucGFzcyl9aWYoZC5hbGchPT11bmRlZmluZWQpe3RoaXMuYWxnTmFtZT1kLmFsZztpZihkLnByb3Y9PT11bmRlZmluZWQpe3RoaXMucHJvdk5hbWU9S0pVUi5jcnlwdG8uVXRpbC5ERUZBVUxUUFJPVklERVJbdGhpcy5hbGdOYW1lXX10aGlzLnNldEFsZ0FuZFByb3ZpZGVyKHRoaXMuYWxnTmFtZSx0aGlzLnByb3ZOYW1lKX19fTtLSlVSLmNyeXB0by5TaWduYXR1cmU9ZnVuY3Rpb24obyl7dmFyIHE9bnVsbDt2YXIgbj1udWxsO3ZhciByPW51bGw7dmFyIGM9bnVsbDt2YXIgbD1udWxsO3ZhciBkPW51bGw7dmFyIGs9bnVsbDt2YXIgaD1udWxsO3ZhciBwPW51bGw7dmFyIGU9bnVsbDt2YXIgYj0tMTt2YXIgZz1udWxsO3ZhciBqPW51bGw7dmFyIGE9bnVsbDt2YXIgaT1udWxsO3ZhciBmPW51bGw7dGhpcy5fc2V0QWxnTmFtZXM9ZnVuY3Rpb24oKXt2YXIgcz10aGlzLmFsZ05hbWUubWF0Y2goL14oLispd2l0aCguKykkLyk7aWYocyl7dGhpcy5tZEFsZ05hbWU9c1sxXS50b0xvd2VyQ2FzZSgpO3RoaXMucHVia2V5QWxnTmFtZT1zWzJdLnRvTG93ZXJDYXNlKCl9fTt0aGlzLl96ZXJvUGFkZGluZ09mU2lnbmF0dXJlPWZ1bmN0aW9uKHgsdyl7dmFyIHY9XCJcIjt2YXIgdD13LzQteC5sZW5ndGg7Zm9yKHZhciB1PTA7dTx0O3UrKyl7dj12K1wiMFwifXJldHVybiB2K3h9O3RoaXMuc2V0QWxnQW5kUHJvdmlkZXI9ZnVuY3Rpb24odSx0KXt0aGlzLl9zZXRBbGdOYW1lcygpO2lmKHQhPVwiY3J5cHRvanMvanNyc2FcIil7dGhyb3dcInByb3ZpZGVyIG5vdCBzdXBwb3J0ZWQ6IFwiK3R9aWYoXCI6bWQ1OnNoYTE6c2hhMjI0OnNoYTI1NjpzaGEzODQ6c2hhNTEyOnJpcGVtZDE2MDpcIi5pbmRleE9mKHRoaXMubWRBbGdOYW1lKSE9LTEpe3RyeXt0aGlzLm1kPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6dGhpcy5tZEFsZ05hbWV9KX1jYXRjaChzKXt0aHJvd1wic2V0QWxnQW5kUHJvdmlkZXIgaGFzaCBhbGcgc2V0IGZhaWwgYWxnPVwiK3RoaXMubWRBbGdOYW1lK1wiL1wiK3N9dGhpcy5pbml0PWZ1bmN0aW9uKHcseCl7dmFyIHk9bnVsbDt0cnl7aWYoeD09PXVuZGVmaW5lZCl7eT1LRVlVVElMLmdldEtleSh3KX1lbHNle3k9S0VZVVRJTC5nZXRLZXkodyx4KX19Y2F0Y2godil7dGhyb3dcImluaXQgZmFpbGVkOlwiK3Z9aWYoeS5pc1ByaXZhdGU9PT10cnVlKXt0aGlzLnBydktleT15O3RoaXMuc3RhdGU9XCJTSUdOXCJ9ZWxzZXtpZih5LmlzUHVibGljPT09dHJ1ZSl7dGhpcy5wdWJLZXk9eTt0aGlzLnN0YXRlPVwiVkVSSUZZXCJ9ZWxzZXt0aHJvd1wiaW5pdCBmYWlsZWQuOlwiK3l9fX07dGhpcy51cGRhdGVTdHJpbmc9ZnVuY3Rpb24odil7dGhpcy5tZC51cGRhdGVTdHJpbmcodil9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKHYpe3RoaXMubWQudXBkYXRlSGV4KHYpfTt0aGlzLnNpZ249ZnVuY3Rpb24oKXt0aGlzLnNIYXNoSGV4PXRoaXMubWQuZGlnZXN0KCk7aWYodHlwZW9mIHRoaXMuZWNwcnZoZXghPVwidW5kZWZpbmVkXCImJnR5cGVvZiB0aGlzLmVjY3VydmVuYW1lIT1cInVuZGVmaW5lZFwiKXt2YXIgdj1uZXcgS0pVUi5jcnlwdG8uRUNEU0Eoe2N1cnZlOnRoaXMuZWNjdXJ2ZW5hbWV9KTt0aGlzLmhTaWduPXYuc2lnbkhleCh0aGlzLnNIYXNoSGV4LHRoaXMuZWNwcnZoZXgpfWVsc2V7aWYodGhpcy5wcnZLZXkgaW5zdGFuY2VvZiBSU0FLZXkmJnRoaXMucHVia2V5QWxnTmFtZT09PVwicnNhYW5kbWdmMVwiKXt0aGlzLmhTaWduPXRoaXMucHJ2S2V5LnNpZ25XaXRoTWVzc2FnZUhhc2hQU1ModGhpcy5zSGFzaEhleCx0aGlzLm1kQWxnTmFtZSx0aGlzLnBzc1NhbHRMZW4pfWVsc2V7aWYodGhpcy5wcnZLZXkgaW5zdGFuY2VvZiBSU0FLZXkmJnRoaXMucHVia2V5QWxnTmFtZT09PVwicnNhXCIpe3RoaXMuaFNpZ249dGhpcy5wcnZLZXkuc2lnbldpdGhNZXNzYWdlSGFzaCh0aGlzLnNIYXNoSGV4LHRoaXMubWRBbGdOYW1lKX1lbHNle2lmKHRoaXMucHJ2S2V5IGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRUNEU0Epe3RoaXMuaFNpZ249dGhpcy5wcnZLZXkuc2lnbldpdGhNZXNzYWdlSGFzaCh0aGlzLnNIYXNoSGV4KX1lbHNle2lmKHRoaXMucHJ2S2V5IGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRFNBKXt0aGlzLmhTaWduPXRoaXMucHJ2S2V5LnNpZ25XaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCl9ZWxzZXt0aHJvd1wiU2lnbmF0dXJlOiB1bnN1cHBvcnRlZCBwcml2YXRlIGtleSBhbGc6IFwiK3RoaXMucHVia2V5QWxnTmFtZX19fX19cmV0dXJuIHRoaXMuaFNpZ259O3RoaXMuc2lnblN0cmluZz1mdW5jdGlvbih2KXt0aGlzLnVwZGF0ZVN0cmluZyh2KTtyZXR1cm4gdGhpcy5zaWduKCl9O3RoaXMuc2lnbkhleD1mdW5jdGlvbih2KXt0aGlzLnVwZGF0ZUhleCh2KTtyZXR1cm4gdGhpcy5zaWduKCl9O3RoaXMudmVyaWZ5PWZ1bmN0aW9uKHYpe3RoaXMuc0hhc2hIZXg9dGhpcy5tZC5kaWdlc3QoKTtpZih0eXBlb2YgdGhpcy5lY3B1YmhleCE9XCJ1bmRlZmluZWRcIiYmdHlwZW9mIHRoaXMuZWNjdXJ2ZW5hbWUhPVwidW5kZWZpbmVkXCIpe3ZhciB3PW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6dGhpcy5lY2N1cnZlbmFtZX0pO3JldHVybiB3LnZlcmlmeUhleCh0aGlzLnNIYXNoSGV4LHYsdGhpcy5lY3B1YmhleCl9ZWxzZXtpZih0aGlzLnB1YktleSBpbnN0YW5jZW9mIFJTQUtleSYmdGhpcy5wdWJrZXlBbGdOYW1lPT09XCJyc2FhbmRtZ2YxXCIpe3JldHVybiB0aGlzLnB1YktleS52ZXJpZnlXaXRoTWVzc2FnZUhhc2hQU1ModGhpcy5zSGFzaEhleCx2LHRoaXMubWRBbGdOYW1lLHRoaXMucHNzU2FsdExlbil9ZWxzZXtpZih0aGlzLnB1YktleSBpbnN0YW5jZW9mIFJTQUtleSYmdGhpcy5wdWJrZXlBbGdOYW1lPT09XCJyc2FcIil7cmV0dXJuIHRoaXMucHViS2V5LnZlcmlmeVdpdGhNZXNzYWdlSGFzaCh0aGlzLnNIYXNoSGV4LHYpfWVsc2V7aWYoS0pVUi5jcnlwdG8uRUNEU0EhPT11bmRlZmluZWQmJnRoaXMucHViS2V5IGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRUNEU0Epe3JldHVybiB0aGlzLnB1YktleS52ZXJpZnlXaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCx2KX1lbHNle2lmKEtKVVIuY3J5cHRvLkRTQSE9PXVuZGVmaW5lZCYmdGhpcy5wdWJLZXkgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5EU0Epe3JldHVybiB0aGlzLnB1YktleS52ZXJpZnlXaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCx2KX1lbHNle3Rocm93XCJTaWduYXR1cmU6IHVuc3VwcG9ydGVkIHB1YmxpYyBrZXkgYWxnOiBcIit0aGlzLnB1YmtleUFsZ05hbWV9fX19fX19fTt0aGlzLmluaXQ9ZnVuY3Rpb24ocyx0KXt0aHJvd1wiaW5pdChrZXksIHBhc3MpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX07dGhpcy51cGRhdGVTdHJpbmc9ZnVuY3Rpb24ocyl7dGhyb3dcInVwZGF0ZVN0cmluZyhzdHIpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24ocyl7dGhyb3dcInVwZGF0ZUhleChoZXgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX07dGhpcy5zaWduPWZ1bmN0aW9uKCl7dGhyb3dcInNpZ24oKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMuc2lnblN0cmluZz1mdW5jdGlvbihzKXt0aHJvd1wiZGlnZXN0U3RyaW5nKHN0cikgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLnNpZ25IZXg9ZnVuY3Rpb24ocyl7dGhyb3dcImRpZ2VzdEhleChoZXgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX07dGhpcy52ZXJpZnk9ZnVuY3Rpb24ocyl7dGhyb3dcInZlcmlmeShoU2lnVmFsKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMuaW5pdFBhcmFtcz1vO2lmKG8hPT11bmRlZmluZWQpe2lmKG8uYWxnIT09dW5kZWZpbmVkKXt0aGlzLmFsZ05hbWU9by5hbGc7aWYoby5wcm92PT09dW5kZWZpbmVkKXt0aGlzLnByb3ZOYW1lPUtKVVIuY3J5cHRvLlV0aWwuREVGQVVMVFBST1ZJREVSW3RoaXMuYWxnTmFtZV19ZWxzZXt0aGlzLnByb3ZOYW1lPW8ucHJvdn10aGlzLmFsZ1Byb3ZOYW1lPXRoaXMuYWxnTmFtZStcIjpcIit0aGlzLnByb3ZOYW1lO3RoaXMuc2V0QWxnQW5kUHJvdmlkZXIodGhpcy5hbGdOYW1lLHRoaXMucHJvdk5hbWUpO3RoaXMuX3NldEFsZ05hbWVzKCl9aWYoby5wc3NzYWx0bGVuIT09dW5kZWZpbmVkKXt0aGlzLnBzc1NhbHRMZW49by5wc3NzYWx0bGVufWlmKG8ucHJ2a2V5cGVtIT09dW5kZWZpbmVkKXtpZihvLnBydmtleXBhcyE9PXVuZGVmaW5lZCl7dGhyb3dcImJvdGggcHJ2a2V5cGVtIGFuZCBwcnZrZXlwYXMgcGFyYW1ldGVycyBub3Qgc3VwcG9ydGVkXCJ9ZWxzZXt0cnl7dmFyIHE9S0VZVVRJTC5nZXRLZXkoby5wcnZrZXlwZW0pO3RoaXMuaW5pdChxKX1jYXRjaChtKXt0aHJvd1wiZmF0YWwgZXJyb3IgdG8gbG9hZCBwZW0gcHJpdmF0ZSBrZXk6IFwiK219fX19fTtLSlVSLmNyeXB0by5DaXBoZXI9ZnVuY3Rpb24oYSl7fTtLSlVSLmNyeXB0by5DaXBoZXIuZW5jcnlwdD1mdW5jdGlvbihlLGYsZCl7aWYoZiBpbnN0YW5jZW9mIFJTQUtleSYmZi5pc1B1YmxpYyl7dmFyIGM9S0pVUi5jcnlwdG8uQ2lwaGVyLmdldEFsZ0J5S2V5QW5kTmFtZShmLGQpO2lmKGM9PT1cIlJTQVwiKXtyZXR1cm4gZi5lbmNyeXB0KGUpfWlmKGM9PT1cIlJTQU9BRVBcIil7cmV0dXJuIGYuZW5jcnlwdE9BRVAoZSxcInNoYTFcIil9dmFyIGI9Yy5tYXRjaCgvXlJTQU9BRVAoXFxkKykkLyk7aWYoYiE9PW51bGwpe3JldHVybiBmLmVuY3J5cHRPQUVQKGUsXCJzaGFcIitiWzFdKX10aHJvd1wiQ2lwaGVyLmVuY3J5cHQ6IHVuc3VwcG9ydGVkIGFsZ29yaXRobSBmb3IgUlNBS2V5OiBcIitkfWVsc2V7dGhyb3dcIkNpcGhlci5lbmNyeXB0OiB1bnN1cHBvcnRlZCBrZXkgb3IgYWxnb3JpdGhtXCJ9fTtLSlVSLmNyeXB0by5DaXBoZXIuZGVjcnlwdD1mdW5jdGlvbihlLGYsZCl7aWYoZiBpbnN0YW5jZW9mIFJTQUtleSYmZi5pc1ByaXZhdGUpe3ZhciBjPUtKVVIuY3J5cHRvLkNpcGhlci5nZXRBbGdCeUtleUFuZE5hbWUoZixkKTtpZihjPT09XCJSU0FcIil7cmV0dXJuIGYuZGVjcnlwdChlKX1pZihjPT09XCJSU0FPQUVQXCIpe3JldHVybiBmLmRlY3J5cHRPQUVQKGUsXCJzaGExXCIpfXZhciBiPWMubWF0Y2goL15SU0FPQUVQKFxcZCspJC8pO2lmKGIhPT1udWxsKXtyZXR1cm4gZi5kZWNyeXB0T0FFUChlLFwic2hhXCIrYlsxXSl9dGhyb3dcIkNpcGhlci5kZWNyeXB0OiB1bnN1cHBvcnRlZCBhbGdvcml0aG0gZm9yIFJTQUtleTogXCIrZH1lbHNle3Rocm93XCJDaXBoZXIuZGVjcnlwdDogdW5zdXBwb3J0ZWQga2V5IG9yIGFsZ29yaXRobVwifX07S0pVUi5jcnlwdG8uQ2lwaGVyLmdldEFsZ0J5S2V5QW5kTmFtZT1mdW5jdGlvbihiLGEpe2lmKGIgaW5zdGFuY2VvZiBSU0FLZXkpe2lmKFwiOlJTQTpSU0FPQUVQOlJTQU9BRVAyMjQ6UlNBT0FFUDI1NjpSU0FPQUVQMzg0OlJTQU9BRVA1MTI6XCIuaW5kZXhPZihhKSE9LTEpe3JldHVybiBhfWlmKGE9PT1udWxsfHxhPT09dW5kZWZpbmVkKXtyZXR1cm5cIlJTQVwifXRocm93XCJnZXRBbGdCeUtleUFuZE5hbWU6IG5vdCBzdXBwb3J0ZWQgYWxnb3JpdGhtIG5hbWUgZm9yIFJTQUtleTogXCIrYX10aHJvd1wiZ2V0QWxnQnlLZXlBbmROYW1lOiBub3Qgc3VwcG9ydGVkIGFsZ29yaXRobSBuYW1lOiBcIithfTtLSlVSLmNyeXB0by5PSUQ9bmV3IGZ1bmN0aW9uKCl7dGhpcy5vaWRoZXgybmFtZT17XCIyYTg2NDg4NmY3MGQwMTAxMDFcIjpcInJzYUVuY3J5cHRpb25cIixcIjJhODY0OGNlM2QwMjAxXCI6XCJlY1B1YmxpY0tleVwiLFwiMmE4NjQ4Y2UzODA0MDFcIjpcImRzYVwiLFwiMmE4NjQ4Y2UzZDAzMDEwN1wiOlwic2VjcDI1NnIxXCIsXCIyYjgxMDQwMDFmXCI6XCJzZWNwMTkyazFcIixcIjJiODEwNDAwMjFcIjpcInNlY3AyMjRyMVwiLFwiMmI4MTA0MDAwYVwiOlwic2VjcDI1NmsxXCIsXCIyYjgxMDQwMDIzXCI6XCJzZWNwNTIxcjFcIixcIjJiODEwNDAwMjJcIjpcInNlY3AzODRyMVwiLFwiMmE4NjQ4Y2UzODA0MDNcIjpcIlNIQTF3aXRoRFNBXCIsXCI2MDg2NDgwMTY1MDMwNDAzMDFcIjpcIlNIQTIyNHdpdGhEU0FcIixcIjYwODY0ODAxNjUwMzA0MDMwMlwiOlwiU0hBMjU2d2l0aERTQVwiLH19O1xuaWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmNyeXB0bz09XCJ1bmRlZmluZWRcInx8IUtKVVIuY3J5cHRvKXtLSlVSLmNyeXB0bz17fX1LSlVSLmNyeXB0by5FQ0RTQT1mdW5jdGlvbihoKXt2YXIgZT1cInNlY3AyNTZyMVwiO3ZhciBnPW51bGw7dmFyIGI9bnVsbDt2YXIgZj1udWxsO3ZhciBhPW5ldyBTZWN1cmVSYW5kb20oKTt2YXIgZD1udWxsO3RoaXMudHlwZT1cIkVDXCI7dGhpcy5pc1ByaXZhdGU9ZmFsc2U7dGhpcy5pc1B1YmxpYz1mYWxzZTtmdW5jdGlvbiBjKHMsbyxyLG4pe3ZhciBqPU1hdGgubWF4KG8uYml0TGVuZ3RoKCksbi5iaXRMZW5ndGgoKSk7dmFyIHQ9cy5hZGQyRChyKTt2YXIgcT1zLmN1cnZlLmdldEluZmluaXR5KCk7Zm9yKHZhciBwPWotMTtwPj0wOy0tcCl7cT1xLnR3aWNlMkQoKTtxLno9QmlnSW50ZWdlci5PTkU7aWYoby50ZXN0Qml0KHApKXtpZihuLnRlc3RCaXQocCkpe3E9cS5hZGQyRCh0KX1lbHNle3E9cS5hZGQyRChzKX19ZWxzZXtpZihuLnRlc3RCaXQocCkpe3E9cS5hZGQyRChyKX19fXJldHVybiBxfXRoaXMuZ2V0QmlnUmFuZG9tPWZ1bmN0aW9uKGkpe3JldHVybiBuZXcgQmlnSW50ZWdlcihpLmJpdExlbmd0aCgpLGEpLm1vZChpLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKSkuYWRkKEJpZ0ludGVnZXIuT05FKX07dGhpcy5zZXROYW1lZEN1cnZlPWZ1bmN0aW9uKGkpe3RoaXMuZWNwYXJhbXM9S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5nZXRCeU5hbWUoaSk7dGhpcy5wcnZLZXlIZXg9bnVsbDt0aGlzLnB1YktleUhleD1udWxsO3RoaXMuY3VydmVOYW1lPWl9O3RoaXMuc2V0UHJpdmF0ZUtleUhleD1mdW5jdGlvbihpKXt0aGlzLmlzUHJpdmF0ZT10cnVlO3RoaXMucHJ2S2V5SGV4PWl9O3RoaXMuc2V0UHVibGljS2V5SGV4PWZ1bmN0aW9uKGkpe3RoaXMuaXNQdWJsaWM9dHJ1ZTt0aGlzLnB1YktleUhleD1pfTt0aGlzLmdldFB1YmxpY0tleVhZSGV4PWZ1bmN0aW9uKCl7dmFyIGs9dGhpcy5wdWJLZXlIZXg7aWYoay5zdWJzdHIoMCwyKSE9PVwiMDRcIil7dGhyb3dcInRoaXMgbWV0aG9kIHN1cHBvcnRzIHVuY29tcHJlc3NlZCBmb3JtYXQoMDQpIG9ubHlcIn12YXIgaj10aGlzLmVjcGFyYW1zLmtleWxlbi80O2lmKGsubGVuZ3RoIT09MitqKjIpe3Rocm93XCJtYWxmb3JtZWQgcHVibGljIGtleSBoZXggbGVuZ3RoXCJ9dmFyIGk9e307aS54PWsuc3Vic3RyKDIsaik7aS55PWsuc3Vic3RyKDIraik7cmV0dXJuIGl9O3RoaXMuZ2V0U2hvcnROSVNUUEN1cnZlTmFtZT1mdW5jdGlvbigpe3ZhciBpPXRoaXMuY3VydmVOYW1lO2lmKGk9PT1cInNlY3AyNTZyMVwifHxpPT09XCJOSVNUIFAtMjU2XCJ8fGk9PT1cIlAtMjU2XCJ8fGk9PT1cInByaW1lMjU2djFcIil7cmV0dXJuXCJQLTI1NlwifWlmKGk9PT1cInNlY3AzODRyMVwifHxpPT09XCJOSVNUIFAtMzg0XCJ8fGk9PT1cIlAtMzg0XCIpe3JldHVyblwiUC0zODRcIn1yZXR1cm4gbnVsbH07dGhpcy5nZW5lcmF0ZUtleVBhaXJIZXg9ZnVuY3Rpb24oKXt2YXIgaz10aGlzLmVjcGFyYW1zLm47dmFyIG49dGhpcy5nZXRCaWdSYW5kb20oayk7dmFyIGw9dGhpcy5lY3BhcmFtcy5HLm11bHRpcGx5KG4pO3ZhciBxPWwuZ2V0WCgpLnRvQmlnSW50ZWdlcigpO3ZhciBvPWwuZ2V0WSgpLnRvQmlnSW50ZWdlcigpO3ZhciBpPXRoaXMuZWNwYXJhbXMua2V5bGVuLzQ7dmFyIG09KFwiMDAwMDAwMDAwMFwiK24udG9TdHJpbmcoMTYpKS5zbGljZSgtaSk7dmFyIHI9KFwiMDAwMDAwMDAwMFwiK3EudG9TdHJpbmcoMTYpKS5zbGljZSgtaSk7dmFyIHA9KFwiMDAwMDAwMDAwMFwiK28udG9TdHJpbmcoMTYpKS5zbGljZSgtaSk7dmFyIGo9XCIwNFwiK3IrcDt0aGlzLnNldFByaXZhdGVLZXlIZXgobSk7dGhpcy5zZXRQdWJsaWNLZXlIZXgoaik7cmV0dXJue2VjcHJ2aGV4Om0sZWNwdWJoZXg6an19O3RoaXMuc2lnbldpdGhNZXNzYWdlSGFzaD1mdW5jdGlvbihpKXtyZXR1cm4gdGhpcy5zaWduSGV4KGksdGhpcy5wcnZLZXlIZXgpfTt0aGlzLnNpZ25IZXg9ZnVuY3Rpb24obyxqKXt2YXIgdD1uZXcgQmlnSW50ZWdlcihqLDE2KTt2YXIgbD10aGlzLmVjcGFyYW1zLm47dmFyIHE9bmV3IEJpZ0ludGVnZXIobywxNik7ZG97dmFyIG09dGhpcy5nZXRCaWdSYW5kb20obCk7dmFyIHU9dGhpcy5lY3BhcmFtcy5HO3ZhciBwPXUubXVsdGlwbHkobSk7dmFyIGk9cC5nZXRYKCkudG9CaWdJbnRlZ2VyKCkubW9kKGwpfXdoaWxlKGkuY29tcGFyZVRvKEJpZ0ludGVnZXIuWkVSTyk8PTApO3ZhciB2PW0ubW9kSW52ZXJzZShsKS5tdWx0aXBseShxLmFkZCh0Lm11bHRpcGx5KGkpKSkubW9kKGwpO3JldHVybiBLSlVSLmNyeXB0by5FQ0RTQS5iaVJTU2lnVG9BU04xU2lnKGksdil9O3RoaXMuc2lnbj1mdW5jdGlvbihtLHUpe3ZhciBxPXU7dmFyIGo9dGhpcy5lY3BhcmFtcy5uO3ZhciBwPUJpZ0ludGVnZXIuZnJvbUJ5dGVBcnJheVVuc2lnbmVkKG0pO2Rve3ZhciBsPXRoaXMuZ2V0QmlnUmFuZG9tKGopO3ZhciB0PXRoaXMuZWNwYXJhbXMuRzt2YXIgbz10Lm11bHRpcGx5KGwpO3ZhciBpPW8uZ2V0WCgpLnRvQmlnSW50ZWdlcigpLm1vZChqKX13aGlsZShpLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pPD0wKTt2YXIgdj1sLm1vZEludmVyc2UoaikubXVsdGlwbHkocC5hZGQocS5tdWx0aXBseShpKSkpLm1vZChqKTtyZXR1cm4gdGhpcy5zZXJpYWxpemVTaWcoaSx2KX07dGhpcy52ZXJpZnlXaXRoTWVzc2FnZUhhc2g9ZnVuY3Rpb24oaixpKXtyZXR1cm4gdGhpcy52ZXJpZnlIZXgoaixpLHRoaXMucHViS2V5SGV4KX07dGhpcy52ZXJpZnlIZXg9ZnVuY3Rpb24obSxpLHApe3ZhciBsLGo7dmFyIG89S0pVUi5jcnlwdG8uRUNEU0EucGFyc2VTaWdIZXgoaSk7bD1vLnI7aj1vLnM7dmFyIGs7az1FQ1BvaW50RnAuZGVjb2RlRnJvbUhleCh0aGlzLmVjcGFyYW1zLmN1cnZlLHApO3ZhciBuPW5ldyBCaWdJbnRlZ2VyKG0sMTYpO3JldHVybiB0aGlzLnZlcmlmeVJhdyhuLGwsaixrKX07dGhpcy52ZXJpZnk9ZnVuY3Rpb24obyxwLGope3ZhciBsLGk7aWYoQml0Y29pbi5VdGlsLmlzQXJyYXkocCkpe3ZhciBuPXRoaXMucGFyc2VTaWcocCk7bD1uLnI7aT1uLnN9ZWxzZXtpZihcIm9iamVjdFwiPT09dHlwZW9mIHAmJnAuciYmcC5zKXtsPXAucjtpPXAuc31lbHNle3Rocm93XCJJbnZhbGlkIHZhbHVlIGZvciBzaWduYXR1cmVcIn19dmFyIGs7aWYoaiBpbnN0YW5jZW9mIEVDUG9pbnRGcCl7az1qfWVsc2V7aWYoQml0Y29pbi5VdGlsLmlzQXJyYXkoaikpe2s9RUNQb2ludEZwLmRlY29kZUZyb20odGhpcy5lY3BhcmFtcy5jdXJ2ZSxqKX1lbHNle3Rocm93XCJJbnZhbGlkIGZvcm1hdCBmb3IgcHVia2V5IHZhbHVlLCBtdXN0IGJlIGJ5dGUgYXJyYXkgb3IgRUNQb2ludEZwXCJ9fXZhciBtPUJpZ0ludGVnZXIuZnJvbUJ5dGVBcnJheVVuc2lnbmVkKG8pO3JldHVybiB0aGlzLnZlcmlmeVJhdyhtLGwsaSxrKX07dGhpcy52ZXJpZnlSYXc9ZnVuY3Rpb24obyxpLHcsbSl7dmFyIGw9dGhpcy5lY3BhcmFtcy5uO3ZhciB1PXRoaXMuZWNwYXJhbXMuRztpZihpLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSk8MHx8aS5jb21wYXJlVG8obCk+PTApe3JldHVybiBmYWxzZX1pZih3LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSk8MHx8dy5jb21wYXJlVG8obCk+PTApe3JldHVybiBmYWxzZX12YXIgcD13Lm1vZEludmVyc2UobCk7dmFyIGs9by5tdWx0aXBseShwKS5tb2QobCk7dmFyIGo9aS5tdWx0aXBseShwKS5tb2QobCk7dmFyIHE9dS5tdWx0aXBseShrKS5hZGQobS5tdWx0aXBseShqKSk7dmFyIHQ9cS5nZXRYKCkudG9CaWdJbnRlZ2VyKCkubW9kKGwpO3JldHVybiB0LmVxdWFscyhpKX07dGhpcy5zZXJpYWxpemVTaWc9ZnVuY3Rpb24oayxqKXt2YXIgbD1rLnRvQnl0ZUFycmF5U2lnbmVkKCk7dmFyIGk9ai50b0J5dGVBcnJheVNpZ25lZCgpO3ZhciBtPVtdO20ucHVzaCgyKTttLnB1c2gobC5sZW5ndGgpO209bS5jb25jYXQobCk7bS5wdXNoKDIpO20ucHVzaChpLmxlbmd0aCk7bT1tLmNvbmNhdChpKTttLnVuc2hpZnQobS5sZW5ndGgpO20udW5zaGlmdCg0OCk7cmV0dXJuIG19O3RoaXMucGFyc2VTaWc9ZnVuY3Rpb24obil7dmFyIG07aWYoblswXSE9NDgpe3Rocm93IG5ldyBFcnJvcihcIlNpZ25hdHVyZSBub3QgYSB2YWxpZCBERVJTZXF1ZW5jZVwiKX1tPTI7aWYoblttXSE9Mil7dGhyb3cgbmV3IEVycm9yKFwiRmlyc3QgZWxlbWVudCBpbiBzaWduYXR1cmUgbXVzdCBiZSBhIERFUkludGVnZXJcIil9dmFyIGw9bi5zbGljZShtKzIsbSsyK25bbSsxXSk7bSs9MituW20rMV07aWYoblttXSE9Mil7dGhyb3cgbmV3IEVycm9yKFwiU2Vjb25kIGVsZW1lbnQgaW4gc2lnbmF0dXJlIG11c3QgYmUgYSBERVJJbnRlZ2VyXCIpfXZhciBpPW4uc2xpY2UobSsyLG0rMituW20rMV0pO20rPTIrblttKzFdO3ZhciBrPUJpZ0ludGVnZXIuZnJvbUJ5dGVBcnJheVVuc2lnbmVkKGwpO3ZhciBqPUJpZ0ludGVnZXIuZnJvbUJ5dGVBcnJheVVuc2lnbmVkKGkpO3JldHVybntyOmssczpqfX07dGhpcy5wYXJzZVNpZ0NvbXBhY3Q9ZnVuY3Rpb24obSl7aWYobS5sZW5ndGghPT02NSl7dGhyb3dcIlNpZ25hdHVyZSBoYXMgdGhlIHdyb25nIGxlbmd0aFwifXZhciBqPW1bMF0tMjc7aWYoajwwfHxqPjcpe3Rocm93XCJJbnZhbGlkIHNpZ25hdHVyZSB0eXBlXCJ9dmFyIG89dGhpcy5lY3BhcmFtcy5uO3ZhciBsPUJpZ0ludGVnZXIuZnJvbUJ5dGVBcnJheVVuc2lnbmVkKG0uc2xpY2UoMSwzMykpLm1vZChvKTt2YXIgaz1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChtLnNsaWNlKDMzLDY1KSkubW9kKG8pO3JldHVybntyOmwsczprLGk6an19O3RoaXMucmVhZFBLQ1M1UHJ2S2V5SGV4PWZ1bmN0aW9uKGwpe3ZhciBuPUFTTjFIRVg7dmFyIG09S0pVUi5jcnlwdG8uRUNEU0EuZ2V0TmFtZTt2YXIgcD1uLmdldFZieUxpc3Q7aWYobi5pc0FTTjFIRVgobCk9PT1mYWxzZSl7dGhyb3dcIm5vdCBBU04uMSBoZXggc3RyaW5nXCJ9dmFyIGksayxvO3RyeXtpPXAobCwwLFsyLDBdLFwiMDZcIik7az1wKGwsMCxbMV0sXCIwNFwiKTt0cnl7bz1wKGwsMCxbMywwXSxcIjAzXCIpLnN1YnN0cigyKX1jYXRjaChqKXt9fWNhdGNoKGope3Rocm93XCJtYWxmb3JtZWQgUEtDUyMxLzUgcGxhaW4gRUNDIHByaXZhdGUga2V5XCJ9dGhpcy5jdXJ2ZU5hbWU9bShpKTtpZih0aGlzLmN1cnZlTmFtZT09PXVuZGVmaW5lZCl7dGhyb3dcInVuc3VwcG9ydGVkIGN1cnZlIG5hbWVcIn10aGlzLnNldE5hbWVkQ3VydmUodGhpcy5jdXJ2ZU5hbWUpO3RoaXMuc2V0UHVibGljS2V5SGV4KG8pO3RoaXMuc2V0UHJpdmF0ZUtleUhleChrKTt0aGlzLmlzUHVibGljPWZhbHNlfTt0aGlzLnJlYWRQS0NTOFBydktleUhleD1mdW5jdGlvbihsKXt2YXIgcT1BU04xSEVYO3ZhciBpPUtKVVIuY3J5cHRvLkVDRFNBLmdldE5hbWU7dmFyIG49cS5nZXRWYnlMaXN0O2lmKHEuaXNBU04xSEVYKGwpPT09ZmFsc2Upe3Rocm93XCJub3QgQVNOLjEgaGV4IHN0cmluZ1wifXZhciBqLHAsbSxrO3RyeXtqPW4obCwwLFsxLDBdLFwiMDZcIik7cD1uKGwsMCxbMSwxXSxcIjA2XCIpO209bihsLDAsWzIsMCwxXSxcIjA0XCIpO3RyeXtrPW4obCwwLFsyLDAsMiwwXSxcIjAzXCIpLnN1YnN0cigyKX1jYXRjaChvKXt9fWNhdGNoKG8pe3Rocm93XCJtYWxmb3JtZWQgUEtDUyM4IHBsYWluIEVDQyBwcml2YXRlIGtleVwifXRoaXMuY3VydmVOYW1lPWkocCk7aWYodGhpcy5jdXJ2ZU5hbWU9PT11bmRlZmluZWQpe3Rocm93XCJ1bnN1cHBvcnRlZCBjdXJ2ZSBuYW1lXCJ9dGhpcy5zZXROYW1lZEN1cnZlKHRoaXMuY3VydmVOYW1lKTt0aGlzLnNldFB1YmxpY0tleUhleChrKTt0aGlzLnNldFByaXZhdGVLZXlIZXgobSk7dGhpcy5pc1B1YmxpYz1mYWxzZX07dGhpcy5yZWFkUEtDUzhQdWJLZXlIZXg9ZnVuY3Rpb24obCl7dmFyIG49QVNOMUhFWDt2YXIgbT1LSlVSLmNyeXB0by5FQ0RTQS5nZXROYW1lO3ZhciBwPW4uZ2V0VmJ5TGlzdDtpZihuLmlzQVNOMUhFWChsKT09PWZhbHNlKXt0aHJvd1wibm90IEFTTi4xIGhleCBzdHJpbmdcIn12YXIgayxpLG87dHJ5e2s9cChsLDAsWzAsMF0sXCIwNlwiKTtpPXAobCwwLFswLDFdLFwiMDZcIik7bz1wKGwsMCxbMV0sXCIwM1wiKS5zdWJzdHIoMil9Y2F0Y2goail7dGhyb3dcIm1hbGZvcm1lZCBQS0NTIzggRUNDIHB1YmxpYyBrZXlcIn10aGlzLmN1cnZlTmFtZT1tKGkpO2lmKHRoaXMuY3VydmVOYW1lPT09bnVsbCl7dGhyb3dcInVuc3VwcG9ydGVkIGN1cnZlIG5hbWVcIn10aGlzLnNldE5hbWVkQ3VydmUodGhpcy5jdXJ2ZU5hbWUpO3RoaXMuc2V0UHVibGljS2V5SGV4KG8pfTt0aGlzLnJlYWRDZXJ0UHViS2V5SGV4PWZ1bmN0aW9uKGsscCl7aWYocCE9PTUpe3A9Nn12YXIgbT1BU04xSEVYO3ZhciBsPUtKVVIuY3J5cHRvLkVDRFNBLmdldE5hbWU7dmFyIG89bS5nZXRWYnlMaXN0O2lmKG0uaXNBU04xSEVYKGspPT09ZmFsc2Upe3Rocm93XCJub3QgQVNOLjEgaGV4IHN0cmluZ1wifXZhciBpLG47dHJ5e2k9byhrLDAsWzAscCwwLDFdLFwiMDZcIik7bj1vKGssMCxbMCxwLDFdLFwiMDNcIikuc3Vic3RyKDIpfWNhdGNoKGope3Rocm93XCJtYWxmb3JtZWQgWC41MDkgY2VydGlmaWNhdGUgRUNDIHB1YmxpYyBrZXlcIn10aGlzLmN1cnZlTmFtZT1sKGkpO2lmKHRoaXMuY3VydmVOYW1lPT09bnVsbCl7dGhyb3dcInVuc3VwcG9ydGVkIGN1cnZlIG5hbWVcIn10aGlzLnNldE5hbWVkQ3VydmUodGhpcy5jdXJ2ZU5hbWUpO3RoaXMuc2V0UHVibGljS2V5SGV4KG4pfTtpZihoIT09dW5kZWZpbmVkKXtpZihoLmN1cnZlIT09dW5kZWZpbmVkKXt0aGlzLmN1cnZlTmFtZT1oLmN1cnZlfX1pZih0aGlzLmN1cnZlTmFtZT09PXVuZGVmaW5lZCl7dGhpcy5jdXJ2ZU5hbWU9ZX10aGlzLnNldE5hbWVkQ3VydmUodGhpcy5jdXJ2ZU5hbWUpO2lmKGghPT11bmRlZmluZWQpe2lmKGgucHJ2IT09dW5kZWZpbmVkKXt0aGlzLnNldFByaXZhdGVLZXlIZXgoaC5wcnYpfWlmKGgucHViIT09dW5kZWZpbmVkKXt0aGlzLnNldFB1YmxpY0tleUhleChoLnB1Yil9fX07S0pVUi5jcnlwdG8uRUNEU0EucGFyc2VTaWdIZXg9ZnVuY3Rpb24oYSl7dmFyIGI9S0pVUi5jcnlwdG8uRUNEU0EucGFyc2VTaWdIZXhJbkhleFJTKGEpO3ZhciBkPW5ldyBCaWdJbnRlZ2VyKGIuciwxNik7dmFyIGM9bmV3IEJpZ0ludGVnZXIoYi5zLDE2KTtyZXR1cm57cjpkLHM6Y319O0tKVVIuY3J5cHRvLkVDRFNBLnBhcnNlU2lnSGV4SW5IZXhSUz1mdW5jdGlvbihmKXt2YXIgaj1BU04xSEVYO3ZhciBpPWouZ2V0Q2hpbGRJZHg7dmFyIGc9ai5nZXRWO2lmKGYuc3Vic3RyKDAsMikhPVwiMzBcIil7dGhyb3dcInNpZ25hdHVyZSBpcyBub3QgYSBBU04uMSBzZXF1ZW5jZVwifXZhciBoPWkoZiwwKTtpZihoLmxlbmd0aCE9Mil7dGhyb3dcIm51bWJlciBvZiBzaWduYXR1cmUgQVNOLjEgc2VxdWVuY2UgZWxlbWVudHMgc2VlbSB3cm9uZ1wifXZhciBlPWhbMF07dmFyIGQ9aFsxXTtpZihmLnN1YnN0cihlLDIpIT1cIjAyXCIpe3Rocm93XCIxc3QgaXRlbSBvZiBzZXF1ZW5lIG9mIHNpZ25hdHVyZSBpcyBub3QgQVNOLjEgaW50ZWdlclwifWlmKGYuc3Vic3RyKGQsMikhPVwiMDJcIil7dGhyb3dcIjJuZCBpdGVtIG9mIHNlcXVlbmUgb2Ygc2lnbmF0dXJlIGlzIG5vdCBBU04uMSBpbnRlZ2VyXCJ9dmFyIGM9ZyhmLGUpO3ZhciBiPWcoZixkKTtyZXR1cm57cjpjLHM6Yn19O0tKVVIuY3J5cHRvLkVDRFNBLmFzbjFTaWdUb0NvbmNhdFNpZz1mdW5jdGlvbihjKXt2YXIgZD1LSlVSLmNyeXB0by5FQ0RTQS5wYXJzZVNpZ0hleEluSGV4UlMoYyk7dmFyIGI9ZC5yO3ZhciBhPWQucztpZihiLnN1YnN0cigwLDIpPT1cIjAwXCImJihiLmxlbmd0aCUzMik9PTIpe2I9Yi5zdWJzdHIoMil9aWYoYS5zdWJzdHIoMCwyKT09XCIwMFwiJiYoYS5sZW5ndGglMzIpPT0yKXthPWEuc3Vic3RyKDIpfWlmKChiLmxlbmd0aCUzMik9PTMwKXtiPVwiMDBcIitifWlmKChhLmxlbmd0aCUzMik9PTMwKXthPVwiMDBcIithfWlmKGIubGVuZ3RoJTMyIT0wKXt0aHJvd1widW5rbm93biBFQ0RTQSBzaWcgciBsZW5ndGggZXJyb3JcIn1pZihhLmxlbmd0aCUzMiE9MCl7dGhyb3dcInVua25vd24gRUNEU0Egc2lnIHMgbGVuZ3RoIGVycm9yXCJ9cmV0dXJuIGIrYX07S0pVUi5jcnlwdG8uRUNEU0EuY29uY2F0U2lnVG9BU04xU2lnPWZ1bmN0aW9uKGEpe2lmKCgoKGEubGVuZ3RoLzIpKjgpJSgxNio4KSkhPTApe3Rocm93XCJ1bmtub3duIEVDRFNBIGNvbmNhdGluYXRlZCByLXMgc2lnICBsZW5ndGggZXJyb3JcIn12YXIgYz1hLnN1YnN0cigwLGEubGVuZ3RoLzIpO3ZhciBiPWEuc3Vic3RyKGEubGVuZ3RoLzIpO3JldHVybiBLSlVSLmNyeXB0by5FQ0RTQS5oZXhSU1NpZ1RvQVNOMVNpZyhjLGIpfTtLSlVSLmNyeXB0by5FQ0RTQS5oZXhSU1NpZ1RvQVNOMVNpZz1mdW5jdGlvbihiLGEpe3ZhciBkPW5ldyBCaWdJbnRlZ2VyKGIsMTYpO3ZhciBjPW5ldyBCaWdJbnRlZ2VyKGEsMTYpO3JldHVybiBLSlVSLmNyeXB0by5FQ0RTQS5iaVJTU2lnVG9BU04xU2lnKGQsYyl9O0tKVVIuY3J5cHRvLkVDRFNBLmJpUlNTaWdUb0FTTjFTaWc9ZnVuY3Rpb24oZixkKXt2YXIgYz1LSlVSLmFzbjE7dmFyIGI9bmV3IGMuREVSSW50ZWdlcih7YmlnaW50OmZ9KTt2YXIgYT1uZXcgYy5ERVJJbnRlZ2VyKHtiaWdpbnQ6ZH0pO3ZhciBlPW5ldyBjLkRFUlNlcXVlbmNlKHthcnJheTpbYixhXX0pO3JldHVybiBlLmdldEVuY29kZWRIZXgoKX07S0pVUi5jcnlwdG8uRUNEU0EuZ2V0TmFtZT1mdW5jdGlvbihhKXtpZihhPT09XCIyYTg2NDhjZTNkMDMwMTA3XCIpe3JldHVyblwic2VjcDI1NnIxXCJ9aWYoYT09PVwiMmI4MTA0MDAwYVwiKXtyZXR1cm5cInNlY3AyNTZrMVwifWlmKGE9PT1cIjJiODEwNDAwMjJcIil7cmV0dXJuXCJzZWNwMzg0cjFcIn1pZihcInxzZWNwMjU2cjF8TklTVCBQLTI1NnxQLTI1NnxwcmltZTI1NnYxfFwiLmluZGV4T2YoYSkhPT0tMSl7cmV0dXJuXCJzZWNwMjU2cjFcIn1pZihcInxzZWNwMjU2azF8XCIuaW5kZXhPZihhKSE9PS0xKXtyZXR1cm5cInNlY3AyNTZrMVwifWlmKFwifHNlY3AzODRyMXxOSVNUIFAtMzg0fFAtMzg0fFwiLmluZGV4T2YoYSkhPT0tMSl7cmV0dXJuXCJzZWNwMzg0cjFcIn1yZXR1cm4gbnVsbH07XG5pZih0eXBlb2YgS0pVUj09XCJ1bmRlZmluZWRcInx8IUtKVVIpe0tKVVI9e319aWYodHlwZW9mIEtKVVIuY3J5cHRvPT1cInVuZGVmaW5lZFwifHwhS0pVUi5jcnlwdG8pe0tKVVIuY3J5cHRvPXt9fUtKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREI9bmV3IGZ1bmN0aW9uKCl7dmFyIGI9e307dmFyIGM9e307ZnVuY3Rpb24gYShkKXtyZXR1cm4gbmV3IEJpZ0ludGVnZXIoZCwxNil9dGhpcy5nZXRCeU5hbWU9ZnVuY3Rpb24oZSl7dmFyIGQ9ZTtpZih0eXBlb2YgY1tkXSE9XCJ1bmRlZmluZWRcIil7ZD1jW2VdfWlmKHR5cGVvZiBiW2RdIT1cInVuZGVmaW5lZFwiKXtyZXR1cm4gYltkXX10aHJvd1widW5yZWdpc3RlcmVkIEVDIGN1cnZlIG5hbWU6IFwiK2R9O3RoaXMucmVnaXN0PWZ1bmN0aW9uKEEsbCxvLGcsbSxlLGosZixrLHUsZCx4KXtiW0FdPXt9O3ZhciBzPWEobyk7dmFyIHo9YShnKTt2YXIgeT1hKG0pO3ZhciB0PWEoZSk7dmFyIHc9YShqKTt2YXIgcj1uZXcgRUNDdXJ2ZUZwKHMseix5KTt2YXIgcT1yLmRlY29kZVBvaW50SGV4KFwiMDRcIitmK2spO2JbQV1bXCJuYW1lXCJdPUE7YltBXVtcImtleWxlblwiXT1sO2JbQV1bXCJjdXJ2ZVwiXT1yO2JbQV1bXCJHXCJdPXE7YltBXVtcIm5cIl09dDtiW0FdW1wiaFwiXT13O2JbQV1bXCJvaWRcIl09ZDtiW0FdW1wiaW5mb1wiXT14O2Zvcih2YXIgdj0wO3Y8dS5sZW5ndGg7disrKXtjW3Vbdl1dPUF9fX07S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMTI4cjFcIiwxMjgsXCJGRkZGRkZGREZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRlwiLFwiRkZGRkZGRkRGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkNcIixcIkU4NzU3OUMxMTA3OUY0M0REODI0OTkzQzJDRUU1RUQzXCIsXCJGRkZGRkZGRTAwMDAwMDAwNzVBMzBEMUI5MDM4QTExNVwiLFwiMVwiLFwiMTYxRkY3NTI4Qjg5OUIyRDBDMjg2MDdDQTUyQzVCODZcIixcIkNGNUFDODM5NUJBRkVCMTNDMDJEQTI5MkRERUQ3QTgzXCIsW10sXCJcIixcInNlY3AxMjhyMSA6IFNFQ0cgY3VydmUgb3ZlciBhIDEyOCBiaXQgcHJpbWUgZmllbGRcIik7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMTYwazFcIiwxNjAsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZBQzczXCIsXCIwXCIsXCI3XCIsXCIwMTAwMDAwMDAwMDAwMDAwMDAwMDAxQjhGQTE2REZBQjlBQ0ExNkI2QjNcIixcIjFcIixcIjNCNEMzODJDRTM3QUExOTJBNDAxOUU3NjMwMzZGNEY1REQ0RDdFQkJcIixcIjkzOENGOTM1MzE4RkRDRUQ2QkMyODI4NjUzMTczM0MzRjAzQzRGRUVcIixbXSxcIlwiLFwic2VjcDE2MGsxIDogU0VDRyBjdXJ2ZSBvdmVyIGEgMTYwIGJpdCBwcmltZSBmaWVsZFwiKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AxNjByMVwiLDE2MCxcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGN0ZGRkZGRkZcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGN0ZGRkZGRkNcIixcIjFDOTdCRUZDNTRCRDdBOEI2NUFDRjg5RjgxRDRENEFEQzU2NUZBNDVcIixcIjAxMDAwMDAwMDAwMDAwMDAwMDAwMDFGNEM4RjkyN0FFRDNDQTc1MjI1N1wiLFwiMVwiLFwiNEE5NkI1Njg4RUY1NzMyODQ2NjQ2OTg5NjhDMzhCQjkxM0NCRkM4MlwiLFwiMjNBNjI4NTUzMTY4OTQ3RDU5RENDOTEyMDQyMzUxMzc3QUM1RkIzMlwiLFtdLFwiXCIsXCJzZWNwMTYwcjEgOiBTRUNHIGN1cnZlIG92ZXIgYSAxNjAgYml0IHByaW1lIGZpZWxkXCIpO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDE5MmsxXCIsMTkyLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZFRTM3XCIsXCIwXCIsXCIzXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkUyNkYyRkMxNzBGNjk0NjZBNzRERUZEOERcIixcIjFcIixcIkRCNEZGMTBFQzA1N0U5QUUyNkIwN0QwMjgwQjdGNDM0MURBNUQxQjFFQUUwNkM3RFwiLFwiOUIyRjJGNkQ5QzU2MjhBNzg0NDE2M0QwMTVCRTg2MzQ0MDgyQUE4OEQ5NUUyRjlEXCIsW10pO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDE5MnIxXCIsMTkyLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRkZGRkZGRkZGXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZGRkZGRkZGRkZGRkNcIixcIjY0MjEwNTE5RTU5QzgwRTcwRkE3RTlBQjcyMjQzMDQ5RkVCOERFRUNDMTQ2QjlCMVwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGOTlERUY4MzYxNDZCQzlCMUI0RDIyODMxXCIsXCIxXCIsXCIxODhEQTgwRUIwMzA5MEY2N0NCRjIwRUI0M0ExODgwMEY0RkYwQUZEODJGRjEwMTJcIixcIjA3MTkyQjk1RkZDOERBNzg2MzEwMTFFRDZCMjRDREQ1NzNGOTc3QTExRTc5NDgxMVwiLFtdKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AyMjRyMVwiLDIyNCxcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRVwiLFwiQjQwNTBBODUwQzA0QjNBQkY1NDEzMjU2NTA0NEIwQjdEN0JGRDhCQTI3MEIzOTQzMjM1NUZGQjRcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYxNkEyRTBCOEYwM0UxM0REMjk0NTVDNUMyQTNEXCIsXCIxXCIsXCJCNzBFMENCRDZCQjRCRjdGMzIxMzkwQjk0QTAzQzFEMzU2QzIxMTIyMzQzMjgwRDYxMTVDMUQyMVwiLFwiQkQzNzYzODhCNUY3MjNGQjRDMjJERkU2Q0Q0Mzc1QTA1QTA3NDc2NDQ0RDU4MTk5ODUwMDdFMzRcIixbXSk7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMjU2azFcIiwyNTYsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZGQzJGXCIsXCIwXCIsXCI3XCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUJBQUVEQ0U2QUY0OEEwM0JCRkQyNUU4Q0QwMzY0MTQxXCIsXCIxXCIsXCI3OUJFNjY3RUY5RENCQkFDNTVBMDYyOTVDRTg3MEIwNzAyOUJGQ0RCMkRDRTI4RDk1OUYyODE1QjE2RjgxNzk4XCIsXCI0ODNBREE3NzI2QTNDNDY1NURBNEZCRkMwRTExMDhBOEZEMTdCNDQ4QTY4NTU0MTk5QzQ3RDA4RkZCMTBENEI4XCIsW10pO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDI1NnIxXCIsMjU2LFwiRkZGRkZGRkYwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRlwiLFwiRkZGRkZGRkYwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGQ1wiLFwiNUFDNjM1RDhBQTNBOTNFN0IzRUJCRDU1NzY5ODg2QkM2NTFEMDZCMENDNTNCMEY2M0JDRTNDM0UyN0QyNjA0QlwiLFwiRkZGRkZGRkYwMDAwMDAwMEZGRkZGRkZGRkZGRkZGRkZCQ0U2RkFBREE3MTc5RTg0RjNCOUNBQzJGQzYzMjU1MVwiLFwiMVwiLFwiNkIxN0QxRjJFMTJDNDI0N0Y4QkNFNkU1NjNBNDQwRjI3NzAzN0Q4MTJERUIzM0EwRjRBMTM5NDVEODk4QzI5NlwiLFwiNEZFMzQyRTJGRTFBN0Y5QjhFRTdFQjRBN0MwRjlFMTYyQkNFMzM1NzZCMzE1RUNFQ0JCNjQwNjgzN0JGNTFGNVwiLFtcIk5JU1QgUC0yNTZcIixcIlAtMjU2XCIsXCJwcmltZTI1NnYxXCJdKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AzODRyMVwiLDM4NCxcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRjAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGRlwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZGRkZGMDAwMDAwMDAwMDAwMDAwMEZGRkZGRkZDXCIsXCJCMzMxMkZBN0UyM0VFN0U0OTg4RTA1NkJFM0Y4MkQxOTE4MUQ5QzZFRkU4MTQxMTIwMzE0MDg4RjUwMTM4NzVBQzY1NjM5OEQ4QTJFRDE5RDJBODVDOEVERDNFQzJBRUZcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkM3NjM0RDgxRjQzNzJEREY1ODFBMERCMjQ4QjBBNzdBRUNFQzE5NkFDQ0M1Mjk3M1wiLFwiMVwiLFwiQUE4N0NBMjJCRThCMDUzNzhFQjFDNzFFRjMyMEFENzQ2RTFEM0I2MjhCQTc5Qjk4NTlGNzQxRTA4MjU0MkEzODU1MDJGMjVEQkY1NTI5NkMzQTU0NUUzODcyNzYwQUI3XCIsXCIzNjE3ZGU0YTk2MjYyYzZmNWQ5ZTk4YmY5MjkyZGMyOWY4ZjQxZGJkMjg5YTE0N2NlOWRhMzExM2I1ZjBiOGMwMGE2MGIxY2UxZDdlODE5ZDdhNDMxZDdjOTBlYTBlNWZcIixbXCJOSVNUIFAtMzg0XCIsXCJQLTM4NFwiXSk7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwNTIxcjFcIiw1MjEsXCIxRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRlwiLFwiMUZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkNcIixcIjA1MTk1M0VCOTYxOEUxQzlBMUY5MjlBMjFBMEI2ODU0MEVFQTJEQTcyNUI5OUIzMTVGM0I4QjQ4OTkxOEVGMTA5RTE1NjE5Mzk1MUVDN0U5MzdCMTY1MkMwQkQzQkIxQkYwNzM1NzNERjg4M0QyQzM0RjFFRjQ1MUZENDZCNTAzRjAwXCIsXCIxRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZBNTE4Njg3ODNCRjJGOTY2QjdGQ0MwMTQ4RjcwOUE1RDAzQkI1QzlCODg5OUM0N0FFQkI2RkI3MUU5MTM4NjQwOVwiLFwiMVwiLFwiQzY4NThFMDZCNzA0MDRFOUNEOUUzRUNCNjYyMzk1QjQ0MjlDNjQ4MTM5MDUzRkI1MjFGODI4QUY2MDZCNEQzREJBQTE0QjVFNzdFRkU3NTkyOEZFMURDMTI3QTJGRkE4REUzMzQ4QjNDMTg1NkE0MjlCRjk3RTdFMzFDMkU1QkQ2NlwiLFwiMDExODM5Mjk2YTc4OWEzYmMwMDQ1YzhhNWZiNDJjN2QxYmQ5OThmNTQ0NDk1NzliNDQ2ODE3YWZiZDE3MjczZTY2MmM5N2VlNzI5OTVlZjQyNjQwYzU1MGI5MDEzZmFkMDc2MTM1M2M3MDg2YTI3MmMyNDA4OGJlOTQ3NjlmZDE2NjUwXCIsW1wiTklTVCBQLTUyMVwiLFwiUC01MjFcIl0pO1xudmFyIEtFWVVUSUw9ZnVuY3Rpb24oKXt2YXIgZD1mdW5jdGlvbihwLHIscSl7cmV0dXJuIGsoQ3J5cHRvSlMuQUVTLHAscixxKX07dmFyIGU9ZnVuY3Rpb24ocCxyLHEpe3JldHVybiBrKENyeXB0b0pTLlRyaXBsZURFUyxwLHIscSl9O3ZhciBhPWZ1bmN0aW9uKHAscixxKXtyZXR1cm4gayhDcnlwdG9KUy5ERVMscCxyLHEpfTt2YXIgaz1mdW5jdGlvbihzLHgsdSxxKXt2YXIgcj1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHgpO3ZhciB3PUNyeXB0b0pTLmVuYy5IZXgucGFyc2UodSk7dmFyIHA9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShxKTt2YXIgdD17fTt0LmtleT13O3QuaXY9cDt0LmNpcGhlcnRleHQ9cjt2YXIgdj1zLmRlY3J5cHQodCx3LHtpdjpwfSk7cmV0dXJuIENyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHYpfTt2YXIgbD1mdW5jdGlvbihwLHIscSl7cmV0dXJuIGcoQ3J5cHRvSlMuQUVTLHAscixxKX07dmFyIG89ZnVuY3Rpb24ocCxyLHEpe3JldHVybiBnKENyeXB0b0pTLlRyaXBsZURFUyxwLHIscSl9O3ZhciBmPWZ1bmN0aW9uKHAscixxKXtyZXR1cm4gZyhDcnlwdG9KUy5ERVMscCxyLHEpfTt2YXIgZz1mdW5jdGlvbih0LHksdixxKXt2YXIgcz1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHkpO3ZhciB4PUNyeXB0b0pTLmVuYy5IZXgucGFyc2Uodik7dmFyIHA9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShxKTt2YXIgdz10LmVuY3J5cHQocyx4LHtpdjpwfSk7dmFyIHI9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZSh3LnRvU3RyaW5nKCkpO3ZhciB1PUNyeXB0b0pTLmVuYy5CYXNlNjQuc3RyaW5naWZ5KHIpO3JldHVybiB1fTt2YXIgaT17XCJBRVMtMjU2LUNCQ1wiOntwcm9jOmQsZXByb2M6bCxrZXlsZW46MzIsaXZsZW46MTZ9LFwiQUVTLTE5Mi1DQkNcIjp7cHJvYzpkLGVwcm9jOmwsa2V5bGVuOjI0LGl2bGVuOjE2fSxcIkFFUy0xMjgtQ0JDXCI6e3Byb2M6ZCxlcHJvYzpsLGtleWxlbjoxNixpdmxlbjoxNn0sXCJERVMtRURFMy1DQkNcIjp7cHJvYzplLGVwcm9jOm8sa2V5bGVuOjI0LGl2bGVuOjh9LFwiREVTLUNCQ1wiOntwcm9jOmEsZXByb2M6ZixrZXlsZW46OCxpdmxlbjo4fX07dmFyIGM9ZnVuY3Rpb24ocCl7cmV0dXJuIGlbcF1bXCJwcm9jXCJdfTt2YXIgbT1mdW5jdGlvbihwKXt2YXIgcj1DcnlwdG9KUy5saWIuV29yZEFycmF5LnJhbmRvbShwKTt2YXIgcT1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShyKTtyZXR1cm4gcX07dmFyIG49ZnVuY3Rpb24odil7dmFyIHc9e307dmFyIHE9di5tYXRjaChuZXcgUmVnRXhwKFwiREVLLUluZm86IChbXixdKyksKFswLTlBLUZhLWZdKylcIixcIm1cIikpO2lmKHEpe3cuY2lwaGVyPXFbMV07dy5pdnNhbHQ9cVsyXX12YXIgcD12Lm1hdGNoKG5ldyBSZWdFeHAoXCItLS0tLUJFR0lOIChbQS1aXSspIFBSSVZBVEUgS0VZLS0tLS1cIikpO2lmKHApe3cudHlwZT1wWzFdfXZhciB1PS0xO3ZhciB4PTA7aWYodi5pbmRleE9mKFwiXFxyXFxuXFxyXFxuXCIpIT0tMSl7dT12LmluZGV4T2YoXCJcXHJcXG5cXHJcXG5cIik7eD0yfWlmKHYuaW5kZXhPZihcIlxcblxcblwiKSE9LTEpe3U9di5pbmRleE9mKFwiXFxuXFxuXCIpO3g9MX12YXIgdD12LmluZGV4T2YoXCItLS0tLUVORFwiKTtpZih1IT0tMSYmdCE9LTEpe3ZhciByPXYuc3Vic3RyaW5nKHUreCoyLHQteCk7cj1yLnJlcGxhY2UoL1xccysvZyxcIlwiKTt3LmRhdGE9cn1yZXR1cm4gd307dmFyIGo9ZnVuY3Rpb24ocSx5LHApe3ZhciB2PXAuc3Vic3RyaW5nKDAsMTYpO3ZhciB0PUNyeXB0b0pTLmVuYy5IZXgucGFyc2Uodik7dmFyIHI9Q3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UoeSk7dmFyIHU9aVtxXVtcImtleWxlblwiXStpW3FdW1wiaXZsZW5cIl07dmFyIHg9XCJcIjt2YXIgdz1udWxsO2Zvcig7Oyl7dmFyIHM9Q3J5cHRvSlMuYWxnby5NRDUuY3JlYXRlKCk7aWYodyE9bnVsbCl7cy51cGRhdGUodyl9cy51cGRhdGUocik7cy51cGRhdGUodCk7dz1zLmZpbmFsaXplKCk7eD14K0NyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHcpO2lmKHgubGVuZ3RoPj11KjIpe2JyZWFrfX12YXIgej17fTt6LmtleWhleD14LnN1YnN0cigwLGlbcV1bXCJrZXlsZW5cIl0qMik7ei5pdmhleD14LnN1YnN0cihpW3FdW1wia2V5bGVuXCJdKjIsaVtxXVtcIml2bGVuXCJdKjIpO3JldHVybiB6fTt2YXIgYj1mdW5jdGlvbihwLHYscix3KXt2YXIgcz1DcnlwdG9KUy5lbmMuQmFzZTY0LnBhcnNlKHApO3ZhciBxPUNyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHMpO3ZhciB1PWlbdl1bXCJwcm9jXCJdO3ZhciB0PXUocSxyLHcpO3JldHVybiB0fTt2YXIgaD1mdW5jdGlvbihwLHMscSx1KXt2YXIgcj1pW3NdW1wiZXByb2NcIl07dmFyIHQ9cihwLHEsdSk7cmV0dXJuIHR9O3JldHVybnt2ZXJzaW9uOlwiMS4wLjBcIixwYXJzZVBLQ1M1UEVNOmZ1bmN0aW9uKHApe3JldHVybiBuKHApfSxnZXRLZXlBbmRVbnVzZWRJdkJ5UGFzc2NvZGVBbmRJdnNhbHQ6ZnVuY3Rpb24ocSxwLHIpe3JldHVybiBqKHEscCxyKX0sZGVjcnlwdEtleUI2NDpmdW5jdGlvbihwLHIscSxzKXtyZXR1cm4gYihwLHIscSxzKX0sZ2V0RGVjcnlwdGVkS2V5SGV4OmZ1bmN0aW9uKHkseCl7dmFyIHE9bih5KTt2YXIgdD1xLnR5cGU7dmFyIHI9cS5jaXBoZXI7dmFyIHA9cS5pdnNhbHQ7dmFyIHM9cS5kYXRhO3ZhciB3PWoocix4LHApO3ZhciB2PXcua2V5aGV4O3ZhciB1PWIocyxyLHYscCk7cmV0dXJuIHV9LGdldEVuY3J5cHRlZFBLQ1M1UEVNRnJvbVBydktleUhleDpmdW5jdGlvbih4LHMsQSx0LHIpe3ZhciBwPVwiXCI7aWYodHlwZW9mIHQ9PVwidW5kZWZpbmVkXCJ8fHQ9PW51bGwpe3Q9XCJBRVMtMjU2LUNCQ1wifWlmKHR5cGVvZiBpW3RdPT1cInVuZGVmaW5lZFwiKXt0aHJvd1wiS0VZVVRJTCB1bnN1cHBvcnRlZCBhbGdvcml0aG06IFwiK3R9aWYodHlwZW9mIHI9PVwidW5kZWZpbmVkXCJ8fHI9PW51bGwpe3ZhciB2PWlbdF1bXCJpdmxlblwiXTt2YXIgdT1tKHYpO3I9dS50b1VwcGVyQ2FzZSgpfXZhciB6PWoodCxBLHIpO3ZhciB5PXoua2V5aGV4O3ZhciB3PWgocyx0LHkscik7dmFyIHE9dy5yZXBsYWNlKC8oLns2NH0pL2csXCIkMVxcclxcblwiKTt2YXIgcD1cIi0tLS0tQkVHSU4gXCIreCtcIiBQUklWQVRFIEtFWS0tLS0tXFxyXFxuXCI7cCs9XCJQcm9jLVR5cGU6IDQsRU5DUllQVEVEXFxyXFxuXCI7cCs9XCJERUstSW5mbzogXCIrdCtcIixcIityK1wiXFxyXFxuXCI7cCs9XCJcXHJcXG5cIjtwKz1xO3ArPVwiXFxyXFxuLS0tLS1FTkQgXCIreCtcIiBQUklWQVRFIEtFWS0tLS0tXFxyXFxuXCI7cmV0dXJuIHB9LHBhcnNlSGV4T2ZFbmNyeXB0ZWRQS0NTODpmdW5jdGlvbih5KXt2YXIgQj1BU04xSEVYO3ZhciB6PUIuZ2V0Q2hpbGRJZHg7dmFyIHc9Qi5nZXRWO3ZhciB0PXt9O3ZhciByPXooeSwwKTtpZihyLmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDApLml0ZW1zICE9IDI6IFwiK3IubGVuZ3RofXQuY2lwaGVydGV4dD13KHksclsxXSk7dmFyIEE9eih5LHJbMF0pO2lmKEEubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wKS5pdGVtcyAhPSAyOiBcIitBLmxlbmd0aH1pZih3KHksQVswXSkhPVwiMmE4NjQ4ODZmNzBkMDEwNTBkXCIpe3Rocm93XCJ0aGlzIG9ubHkgc3VwcG9ydHMgcGtjczVQQkVTMlwifXZhciBwPXooeSxBWzFdKTtpZihBLmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDAuMC4xKS5pdGVtcyAhPSAyOiBcIitwLmxlbmd0aH12YXIgcT16KHkscFsxXSk7aWYocS5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwLjAuMS4xKS5pdGVtcyAhPSAyOiBcIitxLmxlbmd0aH1pZih3KHkscVswXSkhPVwiMmE4NjQ4ODZmNzBkMDMwN1wiKXt0aHJvd1widGhpcyBvbmx5IHN1cHBvcnRzIFRyaXBsZURFU1wifXQuZW5jcnlwdGlvblNjaGVtZUFsZz1cIlRyaXBsZURFU1wiO3QuZW5jcnlwdGlvblNjaGVtZUlWPXcoeSxxWzFdKTt2YXIgcz16KHkscFswXSk7aWYocy5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwLjAuMS4wKS5pdGVtcyAhPSAyOiBcIitzLmxlbmd0aH1pZih3KHksc1swXSkhPVwiMmE4NjQ4ODZmNzBkMDEwNTBjXCIpe3Rocm93XCJ0aGlzIG9ubHkgc3VwcG9ydHMgcGtjczVQQktERjJcIn12YXIgeD16KHksc1sxXSk7aWYoeC5sZW5ndGg8Mil7dGhyb3dcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDAuMC4xLjAuMSkuaXRlbXMgPCAyOiBcIit4Lmxlbmd0aH10LnBia2RmMlNhbHQ9dyh5LHhbMF0pO3ZhciB1PXcoeSx4WzFdKTt0cnl7dC5wYmtkZjJJdGVyPXBhcnNlSW50KHUsMTYpfWNhdGNoKHYpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0IHBia2RmMkl0ZXI6IFwiK3V9cmV0dXJuIHR9LGdldFBCS0RGMktleUhleEZyb21QYXJhbTpmdW5jdGlvbih1LHApe3ZhciB0PUNyeXB0b0pTLmVuYy5IZXgucGFyc2UodS5wYmtkZjJTYWx0KTt2YXIgcT11LnBia2RmMkl0ZXI7dmFyIHM9Q3J5cHRvSlMuUEJLREYyKHAsdCx7a2V5U2l6ZToxOTIvMzIsaXRlcmF0aW9uczpxfSk7dmFyIHI9Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkocyk7cmV0dXJuIHJ9LF9nZXRQbGFpblBLQ1M4SGV4RnJvbUVuY3J5cHRlZFBLQ1M4UEVNOmZ1bmN0aW9uKHgseSl7dmFyIHI9cGVtdG9oZXgoeCxcIkVOQ1JZUFRFRCBQUklWQVRFIEtFWVwiKTt2YXIgcD10aGlzLnBhcnNlSGV4T2ZFbmNyeXB0ZWRQS0NTOChyKTt2YXIgdT1LRVlVVElMLmdldFBCS0RGMktleUhleEZyb21QYXJhbShwLHkpO3ZhciB2PXt9O3YuY2lwaGVydGV4dD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHAuY2lwaGVydGV4dCk7dmFyIHQ9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZSh1KTt2YXIgcz1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHAuZW5jcnlwdGlvblNjaGVtZUlWKTt2YXIgdz1DcnlwdG9KUy5UcmlwbGVERVMuZGVjcnlwdCh2LHQse2l2OnN9KTt2YXIgcT1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeSh3KTtyZXR1cm4gcX0sZ2V0S2V5RnJvbUVuY3J5cHRlZFBLQ1M4UEVNOmZ1bmN0aW9uKHMscSl7dmFyIHA9dGhpcy5fZ2V0UGxhaW5QS0NTOEhleEZyb21FbmNyeXB0ZWRQS0NTOFBFTShzLHEpO3ZhciByPXRoaXMuZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4KHApO3JldHVybiByfSxwYXJzZVBsYWluUHJpdmF0ZVBLQ1M4SGV4OmZ1bmN0aW9uKHMpe3ZhciB2PUFTTjFIRVg7dmFyIHU9di5nZXRDaGlsZElkeDt2YXIgdD12LmdldFY7dmFyIHE9e307cS5hbGdwYXJhbT1udWxsO2lmKHMuc3Vic3RyKDAsMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBwbGFpbiBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwMSlcIn12YXIgcj11KHMsMCk7aWYoci5sZW5ndGghPTMpe3Rocm93XCJtYWxmb3JtZWQgcGxhaW4gUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDIpXCJ9aWYocy5zdWJzdHIoclsxXSwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHByaXZhdGUga2V5KGNvZGU6MDAzKVwifXZhciBwPXUocyxyWzFdKTtpZihwLmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwNClcIn1pZihzLnN1YnN0cihwWzBdLDIpIT1cIjA2XCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDUpXCJ9cS5hbGdvaWQ9dChzLHBbMF0pO2lmKHMuc3Vic3RyKHBbMV0sMik9PVwiMDZcIil7cS5hbGdwYXJhbT10KHMscFsxXSl9aWYocy5zdWJzdHIoclsyXSwyKSE9XCIwNFwiKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHByaXZhdGUga2V5KGNvZGU6MDA2KVwifXEua2V5aWR4PXYuZ2V0VmlkeChzLHJbMl0pO3JldHVybiBxfSxnZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhQRU06ZnVuY3Rpb24ocSl7dmFyIHA9cGVtdG9oZXgocSxcIlBSSVZBVEUgS0VZXCIpO3ZhciByPXRoaXMuZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4KHApO3JldHVybiByfSxnZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhIZXg6ZnVuY3Rpb24ocCl7dmFyIHE9dGhpcy5wYXJzZVBsYWluUHJpdmF0ZVBLQ1M4SGV4KHApO3ZhciByO2lmKHEuYWxnb2lkPT1cIjJhODY0ODg2ZjcwZDAxMDEwMVwiKXtyPW5ldyBSU0FLZXkoKX1lbHNle2lmKHEuYWxnb2lkPT1cIjJhODY0OGNlMzgwNDAxXCIpe3I9bmV3IEtKVVIuY3J5cHRvLkRTQSgpfWVsc2V7aWYocS5hbGdvaWQ9PVwiMmE4NjQ4Y2UzZDAyMDFcIil7cj1uZXcgS0pVUi5jcnlwdG8uRUNEU0EoKX1lbHNle3Rocm93XCJ1bnN1cHBvcnRlZCBwcml2YXRlIGtleSBhbGdvcml0aG1cIn19fXIucmVhZFBLQ1M4UHJ2S2V5SGV4KHApO3JldHVybiByfSxfZ2V0S2V5RnJvbVB1YmxpY1BLQ1M4SGV4OmZ1bmN0aW9uKHEpe3ZhciBwO3ZhciByPUFTTjFIRVguZ2V0VmJ5TGlzdChxLDAsWzAsMF0sXCIwNlwiKTtpZihyPT09XCIyYTg2NDg4NmY3MGQwMTAxMDFcIil7cD1uZXcgUlNBS2V5KCl9ZWxzZXtpZihyPT09XCIyYTg2NDhjZTM4MDQwMVwiKXtwPW5ldyBLSlVSLmNyeXB0by5EU0EoKX1lbHNle2lmKHI9PT1cIjJhODY0OGNlM2QwMjAxXCIpe3A9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKCl9ZWxzZXt0aHJvd1widW5zdXBwb3J0ZWQgUEtDUyM4IHB1YmxpYyBrZXkgaGV4XCJ9fX1wLnJlYWRQS0NTOFB1YktleUhleChxKTtyZXR1cm4gcH0scGFyc2VQdWJsaWNSYXdSU0FLZXlIZXg6ZnVuY3Rpb24ocil7dmFyIHU9QVNOMUhFWDt2YXIgdD11LmdldENoaWxkSWR4O3ZhciBzPXUuZ2V0Vjt2YXIgcD17fTtpZihyLnN1YnN0cigwLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgUlNBIGtleShjb2RlOjAwMSlcIn12YXIgcT10KHIsMCk7aWYocS5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgUlNBIGtleShjb2RlOjAwMilcIn1pZihyLnN1YnN0cihxWzBdLDIpIT1cIjAyXCIpe3Rocm93XCJtYWxmb3JtZWQgUlNBIGtleShjb2RlOjAwMylcIn1wLm49cyhyLHFbMF0pO2lmKHIuc3Vic3RyKHFbMV0sMikhPVwiMDJcIil7dGhyb3dcIm1hbGZvcm1lZCBSU0Ega2V5KGNvZGU6MDA0KVwifXAuZT1zKHIscVsxXSk7cmV0dXJuIHB9LHBhcnNlUHVibGljUEtDUzhIZXg6ZnVuY3Rpb24odCl7dmFyIHY9QVNOMUhFWDt2YXIgdT12LmdldENoaWxkSWR4O3ZhciBzPXYuZ2V0Vjt2YXIgcT17fTtxLmFsZ3BhcmFtPW51bGw7dmFyIHI9dSh0LDApO2lmKHIubGVuZ3RoIT0yKXt0aHJvd1wib3V0ZXIgREVSU2VxdWVuY2Ugc2hhbGwgaGF2ZSAyIGVsZW1lbnRzOiBcIityLmxlbmd0aH12YXIgdz1yWzBdO2lmKHQuc3Vic3RyKHcsMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwdWJsaWMga2V5KGNvZGU6MDAxKVwifXZhciBwPXUodCx3KTtpZihwLmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwdWJsaWMga2V5KGNvZGU6MDAyKVwifWlmKHQuc3Vic3RyKHBbMF0sMikhPVwiMDZcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwdWJsaWMga2V5KGNvZGU6MDAzKVwifXEuYWxnb2lkPXModCxwWzBdKTtpZih0LnN1YnN0cihwWzFdLDIpPT1cIjA2XCIpe3EuYWxncGFyYW09cyh0LHBbMV0pfWVsc2V7aWYodC5zdWJzdHIocFsxXSwyKT09XCIzMFwiKXtxLmFsZ3BhcmFtPXt9O3EuYWxncGFyYW0ucD12LmdldFZieUxpc3QodCxwWzFdLFswXSxcIjAyXCIpO3EuYWxncGFyYW0ucT12LmdldFZieUxpc3QodCxwWzFdLFsxXSxcIjAyXCIpO3EuYWxncGFyYW0uZz12LmdldFZieUxpc3QodCxwWzFdLFsyXSxcIjAyXCIpfX1pZih0LnN1YnN0cihyWzFdLDIpIT1cIjAzXCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwNClcIn1xLmtleT1zKHQsclsxXSkuc3Vic3RyKDIpO3JldHVybiBxfSx9fSgpO0tFWVVUSUwuZ2V0S2V5PWZ1bmN0aW9uKGwsayxuKXt2YXIgRz1BU04xSEVYLEw9Ry5nZXRDaGlsZElkeCx2PUcuZ2V0VixkPUcuZ2V0VmJ5TGlzdCxjPUtKVVIuY3J5cHRvLGk9Yy5FQ0RTQSxDPWMuRFNBLHc9UlNBS2V5LE09cGVtdG9oZXgsRj1LRVlVVElMO2lmKHR5cGVvZiB3IT1cInVuZGVmaW5lZFwiJiZsIGluc3RhbmNlb2Ygdyl7cmV0dXJuIGx9aWYodHlwZW9mIGkhPVwidW5kZWZpbmVkXCImJmwgaW5zdGFuY2VvZiBpKXtyZXR1cm4gbH1pZih0eXBlb2YgQyE9XCJ1bmRlZmluZWRcIiYmbCBpbnN0YW5jZW9mIEMpe3JldHVybiBsfWlmKGwuY3VydmUhPT11bmRlZmluZWQmJmwueHkhPT11bmRlZmluZWQmJmwuZD09PXVuZGVmaW5lZCl7cmV0dXJuIG5ldyBpKHtwdWI6bC54eSxjdXJ2ZTpsLmN1cnZlfSl9aWYobC5jdXJ2ZSE9PXVuZGVmaW5lZCYmbC5kIT09dW5kZWZpbmVkKXtyZXR1cm4gbmV3IGkoe3BydjpsLmQsY3VydmU6bC5jdXJ2ZX0pfWlmKGwua3R5PT09dW5kZWZpbmVkJiZsLm4hPT11bmRlZmluZWQmJmwuZSE9PXVuZGVmaW5lZCYmbC5kPT09dW5kZWZpbmVkKXt2YXIgUD1uZXcgdygpO1Auc2V0UHVibGljKGwubixsLmUpO3JldHVybiBQfWlmKGwua3R5PT09dW5kZWZpbmVkJiZsLm4hPT11bmRlZmluZWQmJmwuZSE9PXVuZGVmaW5lZCYmbC5kIT09dW5kZWZpbmVkJiZsLnAhPT11bmRlZmluZWQmJmwucSE9PXVuZGVmaW5lZCYmbC5kcCE9PXVuZGVmaW5lZCYmbC5kcSE9PXVuZGVmaW5lZCYmbC5jbyE9PXVuZGVmaW5lZCYmbC5xaT09PXVuZGVmaW5lZCl7dmFyIFA9bmV3IHcoKTtQLnNldFByaXZhdGVFeChsLm4sbC5lLGwuZCxsLnAsbC5xLGwuZHAsbC5kcSxsLmNvKTtyZXR1cm4gUH1pZihsLmt0eT09PXVuZGVmaW5lZCYmbC5uIT09dW5kZWZpbmVkJiZsLmUhPT11bmRlZmluZWQmJmwuZCE9PXVuZGVmaW5lZCYmbC5wPT09dW5kZWZpbmVkKXt2YXIgUD1uZXcgdygpO1Auc2V0UHJpdmF0ZShsLm4sbC5lLGwuZCk7cmV0dXJuIFB9aWYobC5wIT09dW5kZWZpbmVkJiZsLnEhPT11bmRlZmluZWQmJmwuZyE9PXVuZGVmaW5lZCYmbC55IT09dW5kZWZpbmVkJiZsLng9PT11bmRlZmluZWQpe3ZhciBQPW5ldyBDKCk7UC5zZXRQdWJsaWMobC5wLGwucSxsLmcsbC55KTtyZXR1cm4gUH1pZihsLnAhPT11bmRlZmluZWQmJmwucSE9PXVuZGVmaW5lZCYmbC5nIT09dW5kZWZpbmVkJiZsLnkhPT11bmRlZmluZWQmJmwueCE9PXVuZGVmaW5lZCl7dmFyIFA9bmV3IEMoKTtQLnNldFByaXZhdGUobC5wLGwucSxsLmcsbC55LGwueCk7cmV0dXJuIFB9aWYobC5rdHk9PT1cIlJTQVwiJiZsLm4hPT11bmRlZmluZWQmJmwuZSE9PXVuZGVmaW5lZCYmbC5kPT09dW5kZWZpbmVkKXt2YXIgUD1uZXcgdygpO1Auc2V0UHVibGljKGI2NHV0b2hleChsLm4pLGI2NHV0b2hleChsLmUpKTtyZXR1cm4gUH1pZihsLmt0eT09PVwiUlNBXCImJmwubiE9PXVuZGVmaW5lZCYmbC5lIT09dW5kZWZpbmVkJiZsLmQhPT11bmRlZmluZWQmJmwucCE9PXVuZGVmaW5lZCYmbC5xIT09dW5kZWZpbmVkJiZsLmRwIT09dW5kZWZpbmVkJiZsLmRxIT09dW5kZWZpbmVkJiZsLnFpIT09dW5kZWZpbmVkKXt2YXIgUD1uZXcgdygpO1Auc2V0UHJpdmF0ZUV4KGI2NHV0b2hleChsLm4pLGI2NHV0b2hleChsLmUpLGI2NHV0b2hleChsLmQpLGI2NHV0b2hleChsLnApLGI2NHV0b2hleChsLnEpLGI2NHV0b2hleChsLmRwKSxiNjR1dG9oZXgobC5kcSksYjY0dXRvaGV4KGwucWkpKTtyZXR1cm4gUH1pZihsLmt0eT09PVwiUlNBXCImJmwubiE9PXVuZGVmaW5lZCYmbC5lIT09dW5kZWZpbmVkJiZsLmQhPT11bmRlZmluZWQpe3ZhciBQPW5ldyB3KCk7UC5zZXRQcml2YXRlKGI2NHV0b2hleChsLm4pLGI2NHV0b2hleChsLmUpLGI2NHV0b2hleChsLmQpKTtyZXR1cm4gUH1pZihsLmt0eT09PVwiRUNcIiYmbC5jcnYhPT11bmRlZmluZWQmJmwueCE9PXVuZGVmaW5lZCYmbC55IT09dW5kZWZpbmVkJiZsLmQ9PT11bmRlZmluZWQpe3ZhciBqPW5ldyBpKHtjdXJ2ZTpsLmNydn0pO3ZhciB0PWouZWNwYXJhbXMua2V5bGVuLzQ7dmFyIEI9KFwiMDAwMDAwMDAwMFwiK2I2NHV0b2hleChsLngpKS5zbGljZSgtdCk7dmFyIHo9KFwiMDAwMDAwMDAwMFwiK2I2NHV0b2hleChsLnkpKS5zbGljZSgtdCk7dmFyIHU9XCIwNFwiK0IrejtqLnNldFB1YmxpY0tleUhleCh1KTtyZXR1cm4gan1pZihsLmt0eT09PVwiRUNcIiYmbC5jcnYhPT11bmRlZmluZWQmJmwueCE9PXVuZGVmaW5lZCYmbC55IT09dW5kZWZpbmVkJiZsLmQhPT11bmRlZmluZWQpe3ZhciBqPW5ldyBpKHtjdXJ2ZTpsLmNydn0pO3ZhciB0PWouZWNwYXJhbXMua2V5bGVuLzQ7dmFyIEI9KFwiMDAwMDAwMDAwMFwiK2I2NHV0b2hleChsLngpKS5zbGljZSgtdCk7dmFyIHo9KFwiMDAwMDAwMDAwMFwiK2I2NHV0b2hleChsLnkpKS5zbGljZSgtdCk7dmFyIHU9XCIwNFwiK0Irejt2YXIgYj0oXCIwMDAwMDAwMDAwXCIrYjY0dXRvaGV4KGwuZCkpLnNsaWNlKC10KTtqLnNldFB1YmxpY0tleUhleCh1KTtqLnNldFByaXZhdGVLZXlIZXgoYik7cmV0dXJuIGp9aWYobj09PVwicGtjczVwcnZcIil7dmFyIEo9bCxHPUFTTjFIRVgsTixQO049TChKLDApO2lmKE4ubGVuZ3RoPT09OSl7UD1uZXcgdygpO1AucmVhZFBLQ1M1UHJ2S2V5SGV4KEopfWVsc2V7aWYoTi5sZW5ndGg9PT02KXtQPW5ldyBDKCk7UC5yZWFkUEtDUzVQcnZLZXlIZXgoSil9ZWxzZXtpZihOLmxlbmd0aD4yJiZKLnN1YnN0cihOWzFdLDIpPT09XCIwNFwiKXtQPW5ldyBpKCk7UC5yZWFkUEtDUzVQcnZLZXlIZXgoSil9ZWxzZXt0aHJvd1widW5zdXBwb3J0ZWQgUEtDUyMxLzUgaGV4YWRlY2ltYWwga2V5XCJ9fX1yZXR1cm4gUH1pZihuPT09XCJwa2NzOHBydlwiKXt2YXIgUD1GLmdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOEhleChsKTtyZXR1cm4gUH1pZihuPT09XCJwa2NzOHB1YlwiKXtyZXR1cm4gRi5fZ2V0S2V5RnJvbVB1YmxpY1BLQ1M4SGV4KGwpfWlmKG49PT1cIng1MDlwdWJcIil7cmV0dXJuIFg1MDkuZ2V0UHVibGljS2V5RnJvbUNlcnRIZXgobCl9aWYobC5pbmRleE9mKFwiLUVORCBDRVJUSUZJQ0FURS1cIiwwKSE9LTF8fGwuaW5kZXhPZihcIi1FTkQgWDUwOSBDRVJUSUZJQ0FURS1cIiwwKSE9LTF8fGwuaW5kZXhPZihcIi1FTkQgVFJVU1RFRCBDRVJUSUZJQ0FURS1cIiwwKSE9LTEpe3JldHVybiBYNTA5LmdldFB1YmxpY0tleUZyb21DZXJ0UEVNKGwpfWlmKGwuaW5kZXhPZihcIi1FTkQgUFVCTElDIEtFWS1cIikhPS0xKXt2YXIgTz1wZW10b2hleChsLFwiUFVCTElDIEtFWVwiKTtyZXR1cm4gRi5fZ2V0S2V5RnJvbVB1YmxpY1BLQ1M4SGV4KE8pfWlmKGwuaW5kZXhPZihcIi1FTkQgUlNBIFBSSVZBVEUgS0VZLVwiKSE9LTEmJmwuaW5kZXhPZihcIjQsRU5DUllQVEVEXCIpPT0tMSl7dmFyIG09TShsLFwiUlNBIFBSSVZBVEUgS0VZXCIpO3JldHVybiBGLmdldEtleShtLG51bGwsXCJwa2NzNXBydlwiKX1pZihsLmluZGV4T2YoXCItRU5EIERTQSBQUklWQVRFIEtFWS1cIikhPS0xJiZsLmluZGV4T2YoXCI0LEVOQ1JZUFRFRFwiKT09LTEpe3ZhciBJPU0obCxcIkRTQSBQUklWQVRFIEtFWVwiKTt2YXIgRT1kKEksMCxbMV0sXCIwMlwiKTt2YXIgRD1kKEksMCxbMl0sXCIwMlwiKTt2YXIgSz1kKEksMCxbM10sXCIwMlwiKTt2YXIgcj1kKEksMCxbNF0sXCIwMlwiKTt2YXIgcz1kKEksMCxbNV0sXCIwMlwiKTt2YXIgUD1uZXcgQygpO1Auc2V0UHJpdmF0ZShuZXcgQmlnSW50ZWdlcihFLDE2KSxuZXcgQmlnSW50ZWdlcihELDE2KSxuZXcgQmlnSW50ZWdlcihLLDE2KSxuZXcgQmlnSW50ZWdlcihyLDE2KSxuZXcgQmlnSW50ZWdlcihzLDE2KSk7cmV0dXJuIFB9aWYobC5pbmRleE9mKFwiLUVORCBQUklWQVRFIEtFWS1cIikhPS0xKXtyZXR1cm4gRi5nZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhQRU0obCl9aWYobC5pbmRleE9mKFwiLUVORCBSU0EgUFJJVkFURSBLRVktXCIpIT0tMSYmbC5pbmRleE9mKFwiNCxFTkNSWVBURURcIikhPS0xKXt2YXIgbz1GLmdldERlY3J5cHRlZEtleUhleChsLGspO3ZhciBIPW5ldyBSU0FLZXkoKTtILnJlYWRQS0NTNVBydktleUhleChvKTtyZXR1cm4gSH1pZihsLmluZGV4T2YoXCItRU5EIEVDIFBSSVZBVEUgS0VZLVwiKSE9LTEmJmwuaW5kZXhPZihcIjQsRU5DUllQVEVEXCIpIT0tMSl7dmFyIEk9Ri5nZXREZWNyeXB0ZWRLZXlIZXgobCxrKTt2YXIgUD1kKEksMCxbMV0sXCIwNFwiKTt2YXIgZj1kKEksMCxbMiwwXSxcIjA2XCIpO3ZhciBBPWQoSSwwLFszLDBdLFwiMDNcIikuc3Vic3RyKDIpO3ZhciBlPVwiXCI7aWYoS0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lW2ZdIT09dW5kZWZpbmVkKXtlPUtKVVIuY3J5cHRvLk9JRC5vaWRoZXgybmFtZVtmXX1lbHNle3Rocm93XCJ1bmRlZmluZWQgT0lEKGhleCkgaW4gS0pVUi5jcnlwdG8uT0lEOiBcIitmfXZhciBqPW5ldyBpKHtjdXJ2ZTplfSk7ai5zZXRQdWJsaWNLZXlIZXgoQSk7ai5zZXRQcml2YXRlS2V5SGV4KFApO2ouaXNQdWJsaWM9ZmFsc2U7cmV0dXJuIGp9aWYobC5pbmRleE9mKFwiLUVORCBEU0EgUFJJVkFURSBLRVktXCIpIT0tMSYmbC5pbmRleE9mKFwiNCxFTkNSWVBURURcIikhPS0xKXt2YXIgST1GLmdldERlY3J5cHRlZEtleUhleChsLGspO3ZhciBFPWQoSSwwLFsxXSxcIjAyXCIpO3ZhciBEPWQoSSwwLFsyXSxcIjAyXCIpO3ZhciBLPWQoSSwwLFszXSxcIjAyXCIpO3ZhciByPWQoSSwwLFs0XSxcIjAyXCIpO3ZhciBzPWQoSSwwLFs1XSxcIjAyXCIpO3ZhciBQPW5ldyBDKCk7UC5zZXRQcml2YXRlKG5ldyBCaWdJbnRlZ2VyKEUsMTYpLG5ldyBCaWdJbnRlZ2VyKEQsMTYpLG5ldyBCaWdJbnRlZ2VyKEssMTYpLG5ldyBCaWdJbnRlZ2VyKHIsMTYpLG5ldyBCaWdJbnRlZ2VyKHMsMTYpKTtyZXR1cm4gUH1pZihsLmluZGV4T2YoXCItRU5EIEVOQ1JZUFRFRCBQUklWQVRFIEtFWS1cIikhPS0xKXtyZXR1cm4gRi5nZXRLZXlGcm9tRW5jcnlwdGVkUEtDUzhQRU0obCxrKX10aHJvd1wibm90IHN1cHBvcnRlZCBhcmd1bWVudFwifTtLRVlVVElMLmdlbmVyYXRlS2V5cGFpcj1mdW5jdGlvbihhLGMpe2lmKGE9PVwiUlNBXCIpe3ZhciBiPWM7dmFyIGg9bmV3IFJTQUtleSgpO2guZ2VuZXJhdGUoYixcIjEwMDAxXCIpO2guaXNQcml2YXRlPXRydWU7aC5pc1B1YmxpYz10cnVlO3ZhciBmPW5ldyBSU0FLZXkoKTt2YXIgZT1oLm4udG9TdHJpbmcoMTYpO3ZhciBpPWguZS50b1N0cmluZygxNik7Zi5zZXRQdWJsaWMoZSxpKTtmLmlzUHJpdmF0ZT1mYWxzZTtmLmlzUHVibGljPXRydWU7dmFyIGs9e307ay5wcnZLZXlPYmo9aDtrLnB1YktleU9iaj1mO3JldHVybiBrfWVsc2V7aWYoYT09XCJFQ1wiKXt2YXIgZD1jO3ZhciBnPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6ZH0pO3ZhciBqPWcuZ2VuZXJhdGVLZXlQYWlySGV4KCk7dmFyIGg9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKHtjdXJ2ZTpkfSk7aC5zZXRQdWJsaWNLZXlIZXgoai5lY3B1YmhleCk7aC5zZXRQcml2YXRlS2V5SGV4KGouZWNwcnZoZXgpO2guaXNQcml2YXRlPXRydWU7aC5pc1B1YmxpYz1mYWxzZTt2YXIgZj1uZXcgS0pVUi5jcnlwdG8uRUNEU0Eoe2N1cnZlOmR9KTtmLnNldFB1YmxpY0tleUhleChqLmVjcHViaGV4KTtmLmlzUHJpdmF0ZT1mYWxzZTtmLmlzUHVibGljPXRydWU7dmFyIGs9e307ay5wcnZLZXlPYmo9aDtrLnB1YktleU9iaj1mO3JldHVybiBrfWVsc2V7dGhyb3dcInVua25vd24gYWxnb3JpdGhtOiBcIithfX19O0tFWVVUSUwuZ2V0UEVNPWZ1bmN0aW9uKGIsRCx5LG0scSxqKXt2YXIgRj1LSlVSLGs9Ri5hc24xLHo9ay5ERVJPYmplY3RJZGVudGlmaWVyLGY9ay5ERVJJbnRlZ2VyLGw9ay5BU04xVXRpbC5uZXdPYmplY3QsYT1rLng1MDksQz1hLlN1YmplY3RQdWJsaWNLZXlJbmZvLGU9Ri5jcnlwdG8sdT1lLkRTQSxyPWUuRUNEU0Esbj1SU0FLZXk7ZnVuY3Rpb24gQShzKXt2YXIgRz1sKHtzZXE6W3tcImludFwiOjB9LHtcImludFwiOntiaWdpbnQ6cy5ufX0se1wiaW50XCI6cy5lfSx7XCJpbnRcIjp7YmlnaW50OnMuZH19LHtcImludFwiOntiaWdpbnQ6cy5wfX0se1wiaW50XCI6e2JpZ2ludDpzLnF9fSx7XCJpbnRcIjp7YmlnaW50OnMuZG1wMX19LHtcImludFwiOntiaWdpbnQ6cy5kbXExfX0se1wiaW50XCI6e2JpZ2ludDpzLmNvZWZmfX1dfSk7cmV0dXJuIEd9ZnVuY3Rpb24gQihHKXt2YXIgcz1sKHtzZXE6W3tcImludFwiOjF9LHtvY3RzdHI6e2hleDpHLnBydktleUhleH19LHt0YWc6W1wiYTBcIix0cnVlLHtvaWQ6e25hbWU6Ry5jdXJ2ZU5hbWV9fV19LHt0YWc6W1wiYTFcIix0cnVlLHtiaXRzdHI6e2hleDpcIjAwXCIrRy5wdWJLZXlIZXh9fV19XX0pO3JldHVybiBzfWZ1bmN0aW9uIHgocyl7dmFyIEc9bCh7c2VxOlt7XCJpbnRcIjowfSx7XCJpbnRcIjp7YmlnaW50OnMucH19LHtcImludFwiOntiaWdpbnQ6cy5xfX0se1wiaW50XCI6e2JpZ2ludDpzLmd9fSx7XCJpbnRcIjp7YmlnaW50OnMueX19LHtcImludFwiOntiaWdpbnQ6cy54fX1dfSk7cmV0dXJuIEd9aWYoKChuIT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2Ygbil8fCh1IT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgdSl8fChyIT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgcikpJiZiLmlzUHVibGljPT10cnVlJiYoRD09PXVuZGVmaW5lZHx8RD09XCJQS0NTOFBVQlwiKSl7dmFyIEU9bmV3IEMoYik7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIGhleHRvcGVtKHcsXCJQVUJMSUMgS0VZXCIpfWlmKEQ9PVwiUEtDUzFQUlZcIiYmbiE9PXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIG4mJih5PT09dW5kZWZpbmVkfHx5PT1udWxsKSYmYi5pc1ByaXZhdGU9PXRydWUpe3ZhciBFPUEoYik7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIGhleHRvcGVtKHcsXCJSU0EgUFJJVkFURSBLRVlcIil9aWYoRD09XCJQS0NTMVBSVlwiJiZyIT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgciYmKHk9PT11bmRlZmluZWR8fHk9PW51bGwpJiZiLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIGk9bmV3IHooe25hbWU6Yi5jdXJ2ZU5hbWV9KTt2YXIgdj1pLmdldEVuY29kZWRIZXgoKTt2YXIgaD1CKGIpO3ZhciB0PWguZ2V0RW5jb2RlZEhleCgpO3ZhciBwPVwiXCI7cCs9aGV4dG9wZW0odixcIkVDIFBBUkFNRVRFUlNcIik7cCs9aGV4dG9wZW0odCxcIkVDIFBSSVZBVEUgS0VZXCIpO3JldHVybiBwfWlmKEQ9PVwiUEtDUzFQUlZcIiYmdSE9PXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIHUmJih5PT09dW5kZWZpbmVkfHx5PT1udWxsKSYmYi5pc1ByaXZhdGU9PXRydWUpe3ZhciBFPXgoYik7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIGhleHRvcGVtKHcsXCJEU0EgUFJJVkFURSBLRVlcIil9aWYoRD09XCJQS0NTNVBSVlwiJiZuIT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgbiYmKHkhPT11bmRlZmluZWQmJnkhPW51bGwpJiZiLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIEU9QShiKTt2YXIgdz1FLmdldEVuY29kZWRIZXgoKTtpZihtPT09dW5kZWZpbmVkKXttPVwiREVTLUVERTMtQ0JDXCJ9cmV0dXJuIHRoaXMuZ2V0RW5jcnlwdGVkUEtDUzVQRU1Gcm9tUHJ2S2V5SGV4KFwiUlNBXCIsdyx5LG0sail9aWYoRD09XCJQS0NTNVBSVlwiJiZyIT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgciYmKHkhPT11bmRlZmluZWQmJnkhPW51bGwpJiZiLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIEU9QihiKTt2YXIgdz1FLmdldEVuY29kZWRIZXgoKTtpZihtPT09dW5kZWZpbmVkKXttPVwiREVTLUVERTMtQ0JDXCJ9cmV0dXJuIHRoaXMuZ2V0RW5jcnlwdGVkUEtDUzVQRU1Gcm9tUHJ2S2V5SGV4KFwiRUNcIix3LHksbSxqKX1pZihEPT1cIlBLQ1M1UFJWXCImJnUhPT11bmRlZmluZWQmJmIgaW5zdGFuY2VvZiB1JiYoeSE9PXVuZGVmaW5lZCYmeSE9bnVsbCkmJmIuaXNQcml2YXRlPT10cnVlKXt2YXIgRT14KGIpO3ZhciB3PUUuZ2V0RW5jb2RlZEhleCgpO2lmKG09PT11bmRlZmluZWQpe209XCJERVMtRURFMy1DQkNcIn1yZXR1cm4gdGhpcy5nZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21QcnZLZXlIZXgoXCJEU0FcIix3LHksbSxqKX12YXIgbz1mdW5jdGlvbihHLHMpe3ZhciBJPWMoRyxzKTt2YXIgSD1uZXcgbCh7c2VxOlt7c2VxOlt7b2lkOntuYW1lOlwicGtjczVQQkVTMlwifX0se3NlcTpbe3NlcTpbe29pZDp7bmFtZTpcInBrY3M1UEJLREYyXCJ9fSx7c2VxOlt7b2N0c3RyOntoZXg6SS5wYmtkZjJTYWx0fX0se1wiaW50XCI6SS5wYmtkZjJJdGVyfV19XX0se3NlcTpbe29pZDp7bmFtZTpcImRlcy1FREUzLUNCQ1wifX0se29jdHN0cjp7aGV4OkkuZW5jcnlwdGlvblNjaGVtZUlWfX1dfV19XX0se29jdHN0cjp7aGV4OkkuY2lwaGVydGV4dH19XX0pO3JldHVybiBILmdldEVuY29kZWRIZXgoKX07dmFyIGM9ZnVuY3Rpb24oTixPKXt2YXIgSD0xMDA7dmFyIE09Q3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oOCk7dmFyIEw9XCJERVMtRURFMy1DQkNcIjt2YXIgcz1DcnlwdG9KUy5saWIuV29yZEFycmF5LnJhbmRvbSg4KTt2YXIgST1DcnlwdG9KUy5QQktERjIoTyxNLHtrZXlTaXplOjE5Mi8zMixpdGVyYXRpb25zOkh9KTt2YXIgSj1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKE4pO3ZhciBLPUNyeXB0b0pTLlRyaXBsZURFUy5lbmNyeXB0KEosSSx7aXY6c30pK1wiXCI7dmFyIEc9e307Ry5jaXBoZXJ0ZXh0PUs7Ry5wYmtkZjJTYWx0PUNyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KE0pO0cucGJrZGYySXRlcj1IO0cuZW5jcnlwdGlvblNjaGVtZUFsZz1MO0cuZW5jcnlwdGlvblNjaGVtZUlWPUNyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHMpO3JldHVybiBHfTtpZihEPT1cIlBLQ1M4UFJWXCImJm4hPXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIG4mJmIuaXNQcml2YXRlPT10cnVlKXt2YXIgZz1BKGIpO3ZhciBkPWcuZ2V0RW5jb2RlZEhleCgpO3ZhciBFPWwoe3NlcTpbe1wiaW50XCI6MH0se3NlcTpbe29pZDp7bmFtZTpcInJzYUVuY3J5cHRpb25cIn19LHtcIm51bGxcIjp0cnVlfV19LHtvY3RzdHI6e2hleDpkfX1dfSk7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7aWYoeT09PXVuZGVmaW5lZHx8eT09bnVsbCl7cmV0dXJuIGhleHRvcGVtKHcsXCJQUklWQVRFIEtFWVwiKX1lbHNle3ZhciB0PW8odyx5KTtyZXR1cm4gaGV4dG9wZW0odCxcIkVOQ1JZUFRFRCBQUklWQVRFIEtFWVwiKX19aWYoRD09XCJQS0NTOFBSVlwiJiZyIT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgciYmYi5pc1ByaXZhdGU9PXRydWUpe3ZhciBnPW5ldyBsKHtzZXE6W3tcImludFwiOjF9LHtvY3RzdHI6e2hleDpiLnBydktleUhleH19LHt0YWc6W1wiYTFcIix0cnVlLHtiaXRzdHI6e2hleDpcIjAwXCIrYi5wdWJLZXlIZXh9fV19XX0pO3ZhciBkPWcuZ2V0RW5jb2RlZEhleCgpO3ZhciBFPWwoe3NlcTpbe1wiaW50XCI6MH0se3NlcTpbe29pZDp7bmFtZTpcImVjUHVibGljS2V5XCJ9fSx7b2lkOntuYW1lOmIuY3VydmVOYW1lfX1dfSx7b2N0c3RyOntoZXg6ZH19XX0pO3ZhciB3PUUuZ2V0RW5jb2RlZEhleCgpO2lmKHk9PT11bmRlZmluZWR8fHk9PW51bGwpe3JldHVybiBoZXh0b3BlbSh3LFwiUFJJVkFURSBLRVlcIil9ZWxzZXt2YXIgdD1vKHcseSk7cmV0dXJuIGhleHRvcGVtKHQsXCJFTkNSWVBURUQgUFJJVkFURSBLRVlcIil9fWlmKEQ9PVwiUEtDUzhQUlZcIiYmdSE9PXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIHUmJmIuaXNQcml2YXRlPT10cnVlKXt2YXIgZz1uZXcgZih7YmlnaW50OmIueH0pO3ZhciBkPWcuZ2V0RW5jb2RlZEhleCgpO3ZhciBFPWwoe3NlcTpbe1wiaW50XCI6MH0se3NlcTpbe29pZDp7bmFtZTpcImRzYVwifX0se3NlcTpbe1wiaW50XCI6e2JpZ2ludDpiLnB9fSx7XCJpbnRcIjp7YmlnaW50OmIucX19LHtcImludFwiOntiaWdpbnQ6Yi5nfX1dfV19LHtvY3RzdHI6e2hleDpkfX1dfSk7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7aWYoeT09PXVuZGVmaW5lZHx8eT09bnVsbCl7cmV0dXJuIGhleHRvcGVtKHcsXCJQUklWQVRFIEtFWVwiKX1lbHNle3ZhciB0PW8odyx5KTtyZXR1cm4gaGV4dG9wZW0odCxcIkVOQ1JZUFRFRCBQUklWQVRFIEtFWVwiKX19dGhyb3dcInVuc3VwcG9ydGVkIG9iamVjdCBub3IgZm9ybWF0XCJ9O0tFWVVUSUwuZ2V0S2V5RnJvbUNTUlBFTT1mdW5jdGlvbihiKXt2YXIgYT1wZW10b2hleChiLFwiQ0VSVElGSUNBVEUgUkVRVUVTVFwiKTt2YXIgYz1LRVlVVElMLmdldEtleUZyb21DU1JIZXgoYSk7cmV0dXJuIGN9O0tFWVVUSUwuZ2V0S2V5RnJvbUNTUkhleD1mdW5jdGlvbihhKXt2YXIgYz1LRVlVVElMLnBhcnNlQ1NSSGV4KGEpO3ZhciBiPUtFWVVUSUwuZ2V0S2V5KGMucDhwdWJrZXloZXgsbnVsbCxcInBrY3M4cHViXCIpO3JldHVybiBifTtLRVlVVElMLnBhcnNlQ1NSSGV4PWZ1bmN0aW9uKGQpe3ZhciBpPUFTTjFIRVg7dmFyIGY9aS5nZXRDaGlsZElkeDt2YXIgYz1pLmdldFRMVjt2YXIgYj17fTt2YXIgZz1kO2lmKGcuc3Vic3RyKDAsMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBDU1IoY29kZTowMDEpXCJ9dmFyIGU9ZihnLDApO2lmKGUubGVuZ3RoPDEpe3Rocm93XCJtYWxmb3JtZWQgQ1NSKGNvZGU6MDAyKVwifWlmKGcuc3Vic3RyKGVbMF0sMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBDU1IoY29kZTowMDMpXCJ9dmFyIGE9ZihnLGVbMF0pO2lmKGEubGVuZ3RoPDMpe3Rocm93XCJtYWxmb3JtZWQgQ1NSKGNvZGU6MDA0KVwifWIucDhwdWJrZXloZXg9YyhnLGFbMl0pO3JldHVybiBifTtLRVlVVElMLmdldEpXS0Zyb21LZXk9ZnVuY3Rpb24oZCl7dmFyIGI9e307aWYoZCBpbnN0YW5jZW9mIFJTQUtleSYmZC5pc1ByaXZhdGUpe2Iua3R5PVwiUlNBXCI7Yi5uPWhleHRvYjY0dShkLm4udG9TdHJpbmcoMTYpKTtiLmU9aGV4dG9iNjR1KGQuZS50b1N0cmluZygxNikpO2IuZD1oZXh0b2I2NHUoZC5kLnRvU3RyaW5nKDE2KSk7Yi5wPWhleHRvYjY0dShkLnAudG9TdHJpbmcoMTYpKTtiLnE9aGV4dG9iNjR1KGQucS50b1N0cmluZygxNikpO2IuZHA9aGV4dG9iNjR1KGQuZG1wMS50b1N0cmluZygxNikpO2IuZHE9aGV4dG9iNjR1KGQuZG1xMS50b1N0cmluZygxNikpO2IucWk9aGV4dG9iNjR1KGQuY29lZmYudG9TdHJpbmcoMTYpKTtyZXR1cm4gYn1lbHNle2lmKGQgaW5zdGFuY2VvZiBSU0FLZXkmJmQuaXNQdWJsaWMpe2Iua3R5PVwiUlNBXCI7Yi5uPWhleHRvYjY0dShkLm4udG9TdHJpbmcoMTYpKTtiLmU9aGV4dG9iNjR1KGQuZS50b1N0cmluZygxNikpO3JldHVybiBifWVsc2V7aWYoZCBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkVDRFNBJiZkLmlzUHJpdmF0ZSl7dmFyIGE9ZC5nZXRTaG9ydE5JU1RQQ3VydmVOYW1lKCk7aWYoYSE9PVwiUC0yNTZcIiYmYSE9PVwiUC0zODRcIil7dGhyb3dcInVuc3VwcG9ydGVkIGN1cnZlIG5hbWUgZm9yIEpXVDogXCIrYX12YXIgYz1kLmdldFB1YmxpY0tleVhZSGV4KCk7Yi5rdHk9XCJFQ1wiO2IuY3J2PWE7Yi54PWhleHRvYjY0dShjLngpO2IueT1oZXh0b2I2NHUoYy55KTtiLmQ9aGV4dG9iNjR1KGQucHJ2S2V5SGV4KTtyZXR1cm4gYn1lbHNle2lmKGQgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSYmZC5pc1B1YmxpYyl7dmFyIGE9ZC5nZXRTaG9ydE5JU1RQQ3VydmVOYW1lKCk7aWYoYSE9PVwiUC0yNTZcIiYmYSE9PVwiUC0zODRcIil7dGhyb3dcInVuc3VwcG9ydGVkIGN1cnZlIG5hbWUgZm9yIEpXVDogXCIrYX12YXIgYz1kLmdldFB1YmxpY0tleVhZSGV4KCk7Yi5rdHk9XCJFQ1wiO2IuY3J2PWE7Yi54PWhleHRvYjY0dShjLngpO2IueT1oZXh0b2I2NHUoYy55KTtyZXR1cm4gYn19fX10aHJvd1wibm90IHN1cHBvcnRlZCBrZXkgb2JqZWN0XCJ9O1xuUlNBS2V5LmdldFBvc0FycmF5T2ZDaGlsZHJlbkZyb21IZXg9ZnVuY3Rpb24oYSl7cmV0dXJuIEFTTjFIRVguZ2V0Q2hpbGRJZHgoYSwwKX07UlNBS2V5LmdldEhleFZhbHVlQXJyYXlPZkNoaWxkcmVuRnJvbUhleD1mdW5jdGlvbihmKXt2YXIgbj1BU04xSEVYO3ZhciBpPW4uZ2V0Vjt2YXIgaz1SU0FLZXkuZ2V0UG9zQXJyYXlPZkNoaWxkcmVuRnJvbUhleChmKTt2YXIgZT1pKGYsa1swXSk7dmFyIGo9aShmLGtbMV0pO3ZhciBiPWkoZixrWzJdKTt2YXIgYz1pKGYsa1szXSk7dmFyIGg9aShmLGtbNF0pO3ZhciBnPWkoZixrWzVdKTt2YXIgbT1pKGYsa1s2XSk7dmFyIGw9aShmLGtbN10pO3ZhciBkPWkoZixrWzhdKTt2YXIgaz1uZXcgQXJyYXkoKTtrLnB1c2goZSxqLGIsYyxoLGcsbSxsLGQpO3JldHVybiBrfTtSU0FLZXkucHJvdG90eXBlLnJlYWRQcml2YXRlS2V5RnJvbVBFTVN0cmluZz1mdW5jdGlvbihkKXt2YXIgYz1wZW10b2hleChkKTt2YXIgYj1SU0FLZXkuZ2V0SGV4VmFsdWVBcnJheU9mQ2hpbGRyZW5Gcm9tSGV4KGMpO3RoaXMuc2V0UHJpdmF0ZUV4KGJbMV0sYlsyXSxiWzNdLGJbNF0sYls1XSxiWzZdLGJbN10sYls4XSl9O1JTQUtleS5wcm90b3R5cGUucmVhZFBLQ1M1UHJ2S2V5SGV4PWZ1bmN0aW9uKGMpe3ZhciBiPVJTQUtleS5nZXRIZXhWYWx1ZUFycmF5T2ZDaGlsZHJlbkZyb21IZXgoYyk7dGhpcy5zZXRQcml2YXRlRXgoYlsxXSxiWzJdLGJbM10sYls0XSxiWzVdLGJbNl0sYls3XSxiWzhdKX07UlNBS2V5LnByb3RvdHlwZS5yZWFkUEtDUzhQcnZLZXlIZXg9ZnVuY3Rpb24oZSl7dmFyIGMsaixsLGIsYSxmLGQsazt2YXIgbT1BU04xSEVYO3ZhciBnPW0uZ2V0VmJ5TGlzdDtpZihtLmlzQVNOMUhFWChlKT09PWZhbHNlKXt0aHJvd1wibm90IEFTTi4xIGhleCBzdHJpbmdcIn10cnl7Yz1nKGUsMCxbMiwwLDFdLFwiMDJcIik7aj1nKGUsMCxbMiwwLDJdLFwiMDJcIik7bD1nKGUsMCxbMiwwLDNdLFwiMDJcIik7Yj1nKGUsMCxbMiwwLDRdLFwiMDJcIik7YT1nKGUsMCxbMiwwLDVdLFwiMDJcIik7Zj1nKGUsMCxbMiwwLDZdLFwiMDJcIik7ZD1nKGUsMCxbMiwwLDddLFwiMDJcIik7az1nKGUsMCxbMiwwLDhdLFwiMDJcIil9Y2F0Y2goaSl7dGhyb3dcIm1hbGZvcm1lZCBQS0NTIzggcGxhaW4gUlNBIHByaXZhdGUga2V5XCJ9dGhpcy5zZXRQcml2YXRlRXgoYyxqLGwsYixhLGYsZCxrKX07UlNBS2V5LnByb3RvdHlwZS5yZWFkUEtDUzVQdWJLZXlIZXg9ZnVuY3Rpb24oYyl7dmFyIGU9QVNOMUhFWDt2YXIgYj1lLmdldFY7aWYoZS5pc0FTTjFIRVgoYyk9PT1mYWxzZSl7dGhyb3dcImtleUhleCBpcyBub3QgQVNOLjEgaGV4IHN0cmluZ1wifXZhciBhPWUuZ2V0Q2hpbGRJZHgoYywwKTtpZihhLmxlbmd0aCE9PTJ8fGMuc3Vic3RyKGFbMF0sMikhPT1cIjAyXCJ8fGMuc3Vic3RyKGFbMV0sMikhPT1cIjAyXCIpe3Rocm93XCJ3cm9uZyBoZXggZm9yIFBLQ1MjNSBwdWJsaWMga2V5XCJ9dmFyIGY9YihjLGFbMF0pO3ZhciBkPWIoYyxhWzFdKTt0aGlzLnNldFB1YmxpYyhmLGQpfTtSU0FLZXkucHJvdG90eXBlLnJlYWRQS0NTOFB1YktleUhleD1mdW5jdGlvbihiKXt2YXIgYz1BU04xSEVYO2lmKGMuaXNBU04xSEVYKGIpPT09ZmFsc2Upe3Rocm93XCJub3QgQVNOLjEgaGV4IHN0cmluZ1wifWlmKGMuZ2V0VExWYnlMaXN0KGIsMCxbMCwwXSkhPT1cIjA2MDkyYTg2NDg4NmY3MGQwMTAxMDFcIil7dGhyb3dcIm5vdCBQS0NTOCBSU0EgcHVibGljIGtleVwifXZhciBhPWMuZ2V0VExWYnlMaXN0KGIsMCxbMSwwXSk7dGhpcy5yZWFkUEtDUzVQdWJLZXlIZXgoYSl9O1JTQUtleS5wcm90b3R5cGUucmVhZENlcnRQdWJLZXlIZXg9ZnVuY3Rpb24oYixkKXt2YXIgYSxjO2E9bmV3IFg1MDkoKTthLnJlYWRDZXJ0SGV4KGIpO2M9YS5nZXRQdWJsaWNLZXlIZXgoKTt0aGlzLnJlYWRQS0NTOFB1YktleUhleChjKX07XG52YXIgX1JFX0hFWERFQ09OTFk9bmV3IFJlZ0V4cChcIlwiKTtfUkVfSEVYREVDT05MWS5jb21waWxlKFwiW14wLTlhLWZdXCIsXCJnaVwiKTtmdW5jdGlvbiBfcnNhc2lnbl9nZXRIZXhQYWRkZWREaWdlc3RJbmZvRm9yU3RyaW5nKGQsZSxhKXt2YXIgYj1mdW5jdGlvbihmKXtyZXR1cm4gS0pVUi5jcnlwdG8uVXRpbC5oYXNoU3RyaW5nKGYsYSl9O3ZhciBjPWIoZCk7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuZ2V0UGFkZGVkRGlnZXN0SW5mb0hleChjLGEsZSl9ZnVuY3Rpb24gX3plcm9QYWRkaW5nT2ZTaWduYXR1cmUoZSxkKXt2YXIgYz1cIlwiO3ZhciBhPWQvNC1lLmxlbmd0aDtmb3IodmFyIGI9MDtiPGE7YisrKXtjPWMrXCIwXCJ9cmV0dXJuIGMrZX1SU0FLZXkucHJvdG90eXBlLnNpZ249ZnVuY3Rpb24oZCxhKXt2YXIgYj1mdW5jdGlvbihlKXtyZXR1cm4gS0pVUi5jcnlwdG8uVXRpbC5oYXNoU3RyaW5nKGUsYSl9O3ZhciBjPWIoZCk7cmV0dXJuIHRoaXMuc2lnbldpdGhNZXNzYWdlSGFzaChjLGEpfTtSU0FLZXkucHJvdG90eXBlLnNpZ25XaXRoTWVzc2FnZUhhc2g9ZnVuY3Rpb24oZSxjKXt2YXIgZj1LSlVSLmNyeXB0by5VdGlsLmdldFBhZGRlZERpZ2VzdEluZm9IZXgoZSxjLHRoaXMubi5iaXRMZW5ndGgoKSk7dmFyIGI9cGFyc2VCaWdJbnQoZiwxNik7dmFyIGQ9dGhpcy5kb1ByaXZhdGUoYik7dmFyIGE9ZC50b1N0cmluZygxNik7cmV0dXJuIF96ZXJvUGFkZGluZ09mU2lnbmF0dXJlKGEsdGhpcy5uLmJpdExlbmd0aCgpKX07ZnVuY3Rpb24gcHNzX21nZjFfc3RyKGMsYSxlKXt2YXIgYj1cIlwiLGQ9MDt3aGlsZShiLmxlbmd0aDxhKXtiKz1oZXh0b3JzdHIoZShyc3RydG9oZXgoYytTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxbKGQmNDI3ODE5MDA4MCk+PjI0LChkJjE2NzExNjgwKT4+MTYsKGQmNjUyODApPj44LGQmMjU1XSkpKSk7ZCs9MX1yZXR1cm4gYn1SU0FLZXkucHJvdG90eXBlLnNpZ25QU1M9ZnVuY3Rpb24oZSxhLGQpe3ZhciBjPWZ1bmN0aW9uKGYpe3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoZixhKX07dmFyIGI9Yyhyc3RydG9oZXgoZSkpO2lmKGQ9PT11bmRlZmluZWQpe2Q9LTF9cmV0dXJuIHRoaXMuc2lnbldpdGhNZXNzYWdlSGFzaFBTUyhiLGEsZCl9O1JTQUtleS5wcm90b3R5cGUuc2lnbldpdGhNZXNzYWdlSGFzaFBTUz1mdW5jdGlvbihsLGEsayl7dmFyIGI9aGV4dG9yc3RyKGwpO3ZhciBnPWIubGVuZ3RoO3ZhciBtPXRoaXMubi5iaXRMZW5ndGgoKS0xO3ZhciBjPU1hdGguY2VpbChtLzgpO3ZhciBkO3ZhciBvPWZ1bmN0aW9uKGkpe3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoaSxhKX07aWYoaz09PS0xfHxrPT09dW5kZWZpbmVkKXtrPWd9ZWxzZXtpZihrPT09LTIpe2s9Yy1nLTJ9ZWxzZXtpZihrPC0yKXt0aHJvd1wiaW52YWxpZCBzYWx0IGxlbmd0aFwifX19aWYoYzwoZytrKzIpKXt0aHJvd1wiZGF0YSB0b28gbG9uZ1wifXZhciBmPVwiXCI7aWYoaz4wKXtmPW5ldyBBcnJheShrKTtuZXcgU2VjdXJlUmFuZG9tKCkubmV4dEJ5dGVzKGYpO2Y9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsZil9dmFyIG49aGV4dG9yc3RyKG8ocnN0cnRvaGV4KFwiXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFwiK2IrZikpKTt2YXIgaj1bXTtmb3IoZD0wO2Q8Yy1rLWctMjtkKz0xKXtqW2RdPTB9dmFyIGU9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsaikrXCJcXHgwMVwiK2Y7dmFyIGg9cHNzX21nZjFfc3RyKG4sZS5sZW5ndGgsbyk7dmFyIHE9W107Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrPTEpe3FbZF09ZS5jaGFyQ29kZUF0KGQpXmguY2hhckNvZGVBdChkKX12YXIgcD0oNjUyODA+Pig4KmMtbSkpJjI1NTtxWzBdJj1+cDtmb3IoZD0wO2Q8ZztkKyspe3EucHVzaChuLmNoYXJDb2RlQXQoZCkpfXEucHVzaCgxODgpO3JldHVybiBfemVyb1BhZGRpbmdPZlNpZ25hdHVyZSh0aGlzLmRvUHJpdmF0ZShuZXcgQmlnSW50ZWdlcihxKSkudG9TdHJpbmcoMTYpLHRoaXMubi5iaXRMZW5ndGgoKSl9O2Z1bmN0aW9uIF9yc2FzaWduX2dldERlY3J5cHRTaWduYXR1cmVCSShhLGQsYyl7dmFyIGI9bmV3IFJTQUtleSgpO2Iuc2V0UHVibGljKGQsYyk7dmFyIGU9Yi5kb1B1YmxpYyhhKTtyZXR1cm4gZX1mdW5jdGlvbiBfcnNhc2lnbl9nZXRIZXhEaWdlc3RJbmZvRnJvbVNpZyhhLGMsYil7dmFyIGU9X3JzYXNpZ25fZ2V0RGVjcnlwdFNpZ25hdHVyZUJJKGEsYyxiKTt2YXIgZD1lLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eMWYrMDAvLFwiXCIpO3JldHVybiBkfWZ1bmN0aW9uIF9yc2FzaWduX2dldEFsZ05hbWVBbmRIYXNoRnJvbUhleERpc2dlc3RJbmZvKGYpe2Zvcih2YXIgZSBpbiBLSlVSLmNyeXB0by5VdGlsLkRJR0VTVElORk9IRUFEKXt2YXIgZD1LSlVSLmNyeXB0by5VdGlsLkRJR0VTVElORk9IRUFEW2VdO3ZhciBiPWQubGVuZ3RoO2lmKGYuc3Vic3RyaW5nKDAsYik9PWQpe3ZhciBjPVtlLGYuc3Vic3RyaW5nKGIpXTtyZXR1cm4gY319cmV0dXJuW119UlNBS2V5LnByb3RvdHlwZS52ZXJpZnk9ZnVuY3Rpb24oZixqKXtqPWoucmVwbGFjZShfUkVfSEVYREVDT05MWSxcIlwiKTtqPWoucmVwbGFjZSgvWyBcXG5dKy9nLFwiXCIpO3ZhciBiPXBhcnNlQmlnSW50KGosMTYpO2lmKGIuYml0TGVuZ3RoKCk+dGhpcy5uLmJpdExlbmd0aCgpKXtyZXR1cm4gMH12YXIgaT10aGlzLmRvUHVibGljKGIpO3ZhciBlPWkudG9TdHJpbmcoMTYpLnJlcGxhY2UoL14xZiswMC8sXCJcIik7dmFyIGc9X3JzYXNpZ25fZ2V0QWxnTmFtZUFuZEhhc2hGcm9tSGV4RGlzZ2VzdEluZm8oZSk7aWYoZy5sZW5ndGg9PTApe3JldHVybiBmYWxzZX12YXIgZD1nWzBdO3ZhciBoPWdbMV07dmFyIGE9ZnVuY3Rpb24oayl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaFN0cmluZyhrLGQpfTt2YXIgYz1hKGYpO3JldHVybihoPT1jKX07UlNBS2V5LnByb3RvdHlwZS52ZXJpZnlXaXRoTWVzc2FnZUhhc2g9ZnVuY3Rpb24oZSxhKXthPWEucmVwbGFjZShfUkVfSEVYREVDT05MWSxcIlwiKTthPWEucmVwbGFjZSgvWyBcXG5dKy9nLFwiXCIpO3ZhciBiPXBhcnNlQmlnSW50KGEsMTYpO2lmKGIuYml0TGVuZ3RoKCk+dGhpcy5uLmJpdExlbmd0aCgpKXtyZXR1cm4gMH12YXIgaD10aGlzLmRvUHVibGljKGIpO3ZhciBnPWgudG9TdHJpbmcoMTYpLnJlcGxhY2UoL14xZiswMC8sXCJcIik7dmFyIGM9X3JzYXNpZ25fZ2V0QWxnTmFtZUFuZEhhc2hGcm9tSGV4RGlzZ2VzdEluZm8oZyk7aWYoYy5sZW5ndGg9PTApe3JldHVybiBmYWxzZX12YXIgZD1jWzBdO3ZhciBmPWNbMV07cmV0dXJuKGY9PWUpfTtSU0FLZXkucHJvdG90eXBlLnZlcmlmeVBTUz1mdW5jdGlvbihjLGIsYSxmKXt2YXIgZT1mdW5jdGlvbihnKXtyZXR1cm4gS0pVUi5jcnlwdG8uVXRpbC5oYXNoSGV4KGcsYSl9O3ZhciBkPWUocnN0cnRvaGV4KGMpKTtpZihmPT09dW5kZWZpbmVkKXtmPS0xfXJldHVybiB0aGlzLnZlcmlmeVdpdGhNZXNzYWdlSGFzaFBTUyhkLGIsYSxmKX07UlNBS2V5LnByb3RvdHlwZS52ZXJpZnlXaXRoTWVzc2FnZUhhc2hQU1M9ZnVuY3Rpb24oZixzLGwsYyl7dmFyIGs9bmV3IEJpZ0ludGVnZXIocywxNik7aWYoay5iaXRMZW5ndGgoKT50aGlzLm4uYml0TGVuZ3RoKCkpe3JldHVybiBmYWxzZX12YXIgcj1mdW5jdGlvbihpKXtyZXR1cm4gS0pVUi5jcnlwdG8uVXRpbC5oYXNoSGV4KGksbCl9O3ZhciBqPWhleHRvcnN0cihmKTt2YXIgaD1qLmxlbmd0aDt2YXIgZz10aGlzLm4uYml0TGVuZ3RoKCktMTt2YXIgbT1NYXRoLmNlaWwoZy84KTt2YXIgcTtpZihjPT09LTF8fGM9PT11bmRlZmluZWQpe2M9aH1lbHNle2lmKGM9PT0tMil7Yz1tLWgtMn1lbHNle2lmKGM8LTIpe3Rocm93XCJpbnZhbGlkIHNhbHQgbGVuZ3RoXCJ9fX1pZihtPChoK2MrMikpe3Rocm93XCJkYXRhIHRvbyBsb25nXCJ9dmFyIGE9dGhpcy5kb1B1YmxpYyhrKS50b0J5dGVBcnJheSgpO2ZvcihxPTA7cTxhLmxlbmd0aDtxKz0xKXthW3FdJj0yNTV9d2hpbGUoYS5sZW5ndGg8bSl7YS51bnNoaWZ0KDApfWlmKGFbbS0xXSE9PTE4OCl7dGhyb3dcImVuY29kZWQgbWVzc2FnZSBkb2VzIG5vdCBlbmQgaW4gMHhiY1wifWE9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsYSk7dmFyIGQ9YS5zdWJzdHIoMCxtLWgtMSk7dmFyIGU9YS5zdWJzdHIoZC5sZW5ndGgsaCk7dmFyIHA9KDY1MjgwPj4oOCptLWcpKSYyNTU7aWYoKGQuY2hhckNvZGVBdCgwKSZwKSE9PTApe3Rocm93XCJiaXRzIGJleW9uZCBrZXlzaXplIG5vdCB6ZXJvXCJ9dmFyIG49cHNzX21nZjFfc3RyKGUsZC5sZW5ndGgscik7dmFyIG89W107Zm9yKHE9MDtxPGQubGVuZ3RoO3ErPTEpe29bcV09ZC5jaGFyQ29kZUF0KHEpXm4uY2hhckNvZGVBdChxKX1vWzBdJj1+cDt2YXIgYj1tLWgtYy0yO2ZvcihxPTA7cTxiO3ErPTEpe2lmKG9bcV0hPT0wKXt0aHJvd1wibGVmdG1vc3Qgb2N0ZXRzIG5vdCB6ZXJvXCJ9fWlmKG9bYl0hPT0xKXt0aHJvd1wiMHgwMSBtYXJrZXIgbm90IGZvdW5kXCJ9cmV0dXJuIGU9PT1oZXh0b3JzdHIocihyc3RydG9oZXgoXCJcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXCIraitTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxvLnNsaWNlKC1jKSkpKSl9O1JTQUtleS5TQUxUX0xFTl9ITEVOPS0xO1JTQUtleS5TQUxUX0xFTl9NQVg9LTI7UlNBS2V5LlNBTFRfTEVOX1JFQ09WRVI9LTI7XG5mdW5jdGlvbiBYNTA5KCl7dmFyIGs9QVNOMUhFWCxqPWsuZ2V0Q2hpbGRJZHgsaD1rLmdldFYsYj1rLmdldFRMVixmPWsuZ2V0VmJ5TGlzdCxjPWsuZ2V0VExWYnlMaXN0LGc9ay5nZXRJZHhieUxpc3QsZD1rLmdldFZpZHgsaT1rLm9pZG5hbWUsYT1YNTA5LGU9cGVtdG9oZXg7dGhpcy5oZXg9bnVsbDt0aGlzLnZlcnNpb249MDt0aGlzLmZvZmZzZXQ9MDt0aGlzLmFFeHRJbmZvPW51bGw7dGhpcy5nZXRWZXJzaW9uPWZ1bmN0aW9uKCl7aWYodGhpcy5oZXg9PT1udWxsfHx0aGlzLnZlcnNpb24hPT0wKXtyZXR1cm4gdGhpcy52ZXJzaW9ufWlmKGModGhpcy5oZXgsMCxbMCwwXSkhPT1cImEwMDMwMjAxMDJcIil7dGhpcy52ZXJzaW9uPTE7dGhpcy5mb2Zmc2V0PS0xO3JldHVybiAxfXRoaXMudmVyc2lvbj0zO3JldHVybiAzfTt0aGlzLmdldFNlcmlhbE51bWJlckhleD1mdW5jdGlvbigpe3JldHVybiBmKHRoaXMuaGV4LDAsWzAsMSt0aGlzLmZvZmZzZXRdLFwiMDJcIil9O3RoaXMuZ2V0U2lnbmF0dXJlQWxnb3JpdGhtRmllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4gaShmKHRoaXMuaGV4LDAsWzAsMit0aGlzLmZvZmZzZXQsMF0sXCIwNlwiKSl9O3RoaXMuZ2V0SXNzdWVySGV4PWZ1bmN0aW9uKCl7cmV0dXJuIGModGhpcy5oZXgsMCxbMCwzK3RoaXMuZm9mZnNldF0sXCIzMFwiKX07dGhpcy5nZXRJc3N1ZXJTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gYS5oZXgyZG4odGhpcy5nZXRJc3N1ZXJIZXgoKSl9O3RoaXMuZ2V0U3ViamVjdEhleD1mdW5jdGlvbigpe3JldHVybiBjKHRoaXMuaGV4LDAsWzAsNSt0aGlzLmZvZmZzZXRdLFwiMzBcIil9O3RoaXMuZ2V0U3ViamVjdFN0cmluZz1mdW5jdGlvbigpe3JldHVybiBhLmhleDJkbih0aGlzLmdldFN1YmplY3RIZXgoKSl9O3RoaXMuZ2V0Tm90QmVmb3JlPWZ1bmN0aW9uKCl7dmFyIGw9Zih0aGlzLmhleCwwLFswLDQrdGhpcy5mb2Zmc2V0LDBdKTtsPWwucmVwbGFjZSgvKC4uKS9nLFwiJSQxXCIpO2w9ZGVjb2RlVVJJQ29tcG9uZW50KGwpO3JldHVybiBsfTt0aGlzLmdldE5vdEFmdGVyPWZ1bmN0aW9uKCl7dmFyIGw9Zih0aGlzLmhleCwwLFswLDQrdGhpcy5mb2Zmc2V0LDFdKTtsPWwucmVwbGFjZSgvKC4uKS9nLFwiJSQxXCIpO2w9ZGVjb2RlVVJJQ29tcG9uZW50KGwpO3JldHVybiBsfTt0aGlzLmdldFB1YmxpY0tleUhleD1mdW5jdGlvbigpe3JldHVybiBrLmdldFRMVmJ5TGlzdCh0aGlzLmhleCwwLFswLDYrdGhpcy5mb2Zmc2V0XSxcIjMwXCIpfTt0aGlzLmdldFB1YmxpY0tleUlkeD1mdW5jdGlvbigpe3JldHVybiBnKHRoaXMuaGV4LDAsWzAsNit0aGlzLmZvZmZzZXRdLFwiMzBcIil9O3RoaXMuZ2V0UHVibGljS2V5Q29udGVudElkeD1mdW5jdGlvbigpe3ZhciBsPXRoaXMuZ2V0UHVibGljS2V5SWR4KCk7cmV0dXJuIGcodGhpcy5oZXgsbCxbMSwwXSxcIjMwXCIpfTt0aGlzLmdldFB1YmxpY0tleT1mdW5jdGlvbigpe3JldHVybiBLRVlVVElMLmdldEtleSh0aGlzLmdldFB1YmxpY0tleUhleCgpLG51bGwsXCJwa2NzOHB1YlwiKX07dGhpcy5nZXRTaWduYXR1cmVBbGdvcml0aG1OYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIGkoZih0aGlzLmhleCwwLFsxLDBdLFwiMDZcIikpfTt0aGlzLmdldFNpZ25hdHVyZVZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIGYodGhpcy5oZXgsMCxbMl0sXCIwM1wiLHRydWUpfTt0aGlzLnZlcmlmeVNpZ25hdHVyZT1mdW5jdGlvbihuKXt2YXIgbz10aGlzLmdldFNpZ25hdHVyZUFsZ29yaXRobU5hbWUoKTt2YXIgbD10aGlzLmdldFNpZ25hdHVyZVZhbHVlSGV4KCk7dmFyIG09Yyh0aGlzLmhleCwwLFswXSxcIjMwXCIpO3ZhciBwPW5ldyBLSlVSLmNyeXB0by5TaWduYXR1cmUoe2FsZzpvfSk7cC5pbml0KG4pO3AudXBkYXRlSGV4KG0pO3JldHVybiBwLnZlcmlmeShsKX07dGhpcy5wYXJzZUV4dD1mdW5jdGlvbigpe2lmKHRoaXMudmVyc2lvbiE9PTMpe3JldHVybiAtMX12YXIgcD1nKHRoaXMuaGV4LDAsWzAsNywwXSxcIjMwXCIpO3ZhciBtPWoodGhpcy5oZXgscCk7dGhpcy5hRXh0SW5mbz1uZXcgQXJyYXkoKTtmb3IodmFyIG49MDtuPG0ubGVuZ3RoO24rKyl7dmFyIHE9e307cS5jcml0aWNhbD1mYWxzZTt2YXIgbD1qKHRoaXMuaGV4LG1bbl0pO3ZhciByPTA7aWYobC5sZW5ndGg9PT0zKXtxLmNyaXRpY2FsPXRydWU7cj0xfXEub2lkPWsuaGV4dG9vaWRzdHIoZih0aGlzLmhleCxtW25dLFswXSxcIjA2XCIpKTt2YXIgbz1nKHRoaXMuaGV4LG1bbl0sWzErcl0pO3EudmlkeD1kKHRoaXMuaGV4LG8pO3RoaXMuYUV4dEluZm8ucHVzaChxKX19O3RoaXMuZ2V0RXh0SW5mbz1mdW5jdGlvbihuKXt2YXIgbD10aGlzLmFFeHRJbmZvO3ZhciBvPW47aWYoIW4ubWF0Y2goL15bMC05Ll0rJC8pKXtvPUtKVVIuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZChuKX1pZihvPT09XCJcIil7cmV0dXJuIHVuZGVmaW5lZH1mb3IodmFyIG09MDttPGwubGVuZ3RoO20rKyl7aWYobFttXS5vaWQ9PT1vKXtyZXR1cm4gbFttXX19cmV0dXJuIHVuZGVmaW5lZH07dGhpcy5nZXRFeHRCYXNpY0NvbnN0cmFpbnRzPWZ1bmN0aW9uKCl7dmFyIG49dGhpcy5nZXRFeHRJbmZvKFwiYmFzaWNDb25zdHJhaW50c1wiKTtpZihuPT09dW5kZWZpbmVkKXtyZXR1cm4gbn12YXIgbD1oKHRoaXMuaGV4LG4udmlkeCk7aWYobD09PVwiXCIpe3JldHVybnt9fWlmKGw9PT1cIjAxMDFmZlwiKXtyZXR1cm57Y0E6dHJ1ZX19aWYobC5zdWJzdHIoMCw4KT09PVwiMDEwMWZmMDJcIil7dmFyIG89aChsLDYpO3ZhciBtPXBhcnNlSW50KG8sMTYpO3JldHVybntjQTp0cnVlLHBhdGhMZW46bX19dGhyb3dcImJhc2ljQ29uc3RyYWludHMgcGFyc2UgZXJyb3JcIn07dGhpcy5nZXRFeHRLZXlVc2FnZUJpbj1mdW5jdGlvbigpe3ZhciBvPXRoaXMuZ2V0RXh0SW5mbyhcImtleVVzYWdlXCIpO2lmKG89PT11bmRlZmluZWQpe3JldHVyblwiXCJ9dmFyIG09aCh0aGlzLmhleCxvLnZpZHgpO2lmKG0ubGVuZ3RoJTIhPTB8fG0ubGVuZ3RoPD0yKXt0aHJvd1wibWFsZm9ybWVkIGtleSB1c2FnZSB2YWx1ZVwifXZhciBsPXBhcnNlSW50KG0uc3Vic3RyKDAsMikpO3ZhciBuPXBhcnNlSW50KG0uc3Vic3RyKDIpLDE2KS50b1N0cmluZygyKTtyZXR1cm4gbi5zdWJzdHIoMCxuLmxlbmd0aC1sKX07dGhpcy5nZXRFeHRLZXlVc2FnZVN0cmluZz1mdW5jdGlvbigpe3ZhciBuPXRoaXMuZ2V0RXh0S2V5VXNhZ2VCaW4oKTt2YXIgbD1uZXcgQXJyYXkoKTtmb3IodmFyIG09MDttPG4ubGVuZ3RoO20rKyl7aWYobi5zdWJzdHIobSwxKT09XCIxXCIpe2wucHVzaChYNTA5LktFWVVTQUdFX05BTUVbbV0pfX1yZXR1cm4gbC5qb2luKFwiLFwiKX07dGhpcy5nZXRFeHRTdWJqZWN0S2V5SWRlbnRpZmllcj1mdW5jdGlvbigpe3ZhciBsPXRoaXMuZ2V0RXh0SW5mbyhcInN1YmplY3RLZXlJZGVudGlmaWVyXCIpO2lmKGw9PT11bmRlZmluZWQpe3JldHVybiBsfXJldHVybiBoKHRoaXMuaGV4LGwudmlkeCl9O3RoaXMuZ2V0RXh0QXV0aG9yaXR5S2V5SWRlbnRpZmllcj1mdW5jdGlvbigpe3ZhciBwPXRoaXMuZ2V0RXh0SW5mbyhcImF1dGhvcml0eUtleUlkZW50aWZpZXJcIik7aWYocD09PXVuZGVmaW5lZCl7cmV0dXJuIHB9dmFyIGw9e307dmFyIG89Yih0aGlzLmhleCxwLnZpZHgpO3ZhciBtPWoobywwKTtmb3IodmFyIG49MDtuPG0ubGVuZ3RoO24rKyl7aWYoby5zdWJzdHIobVtuXSwyKT09PVwiODBcIil7bC5raWQ9aChvLG1bbl0pfX1yZXR1cm4gbH07dGhpcy5nZXRFeHRFeHRLZXlVc2FnZU5hbWU9ZnVuY3Rpb24oKXt2YXIgcD10aGlzLmdldEV4dEluZm8oXCJleHRLZXlVc2FnZVwiKTtpZihwPT09dW5kZWZpbmVkKXtyZXR1cm4gcH12YXIgbD1uZXcgQXJyYXkoKTt2YXIgbz1iKHRoaXMuaGV4LHAudmlkeCk7aWYobz09PVwiXCIpe3JldHVybiBsfXZhciBtPWoobywwKTtmb3IodmFyIG49MDtuPG0ubGVuZ3RoO24rKyl7bC5wdXNoKGkoaChvLG1bbl0pKSl9cmV0dXJuIGx9O3RoaXMuZ2V0RXh0U3ViamVjdEFsdE5hbWU9ZnVuY3Rpb24oKXt2YXIgbT10aGlzLmdldEV4dFN1YmplY3RBbHROYW1lMigpO3ZhciBsPW5ldyBBcnJheSgpO2Zvcih2YXIgbj0wO248bS5sZW5ndGg7bisrKXtpZihtW25dWzBdPT09XCJETlNcIil7bC5wdXNoKG1bbl1bMV0pfX1yZXR1cm4gbH07dGhpcy5nZXRFeHRTdWJqZWN0QWx0TmFtZTI9ZnVuY3Rpb24oKXt2YXIgcCxzLHI7dmFyIHE9dGhpcy5nZXRFeHRJbmZvKFwic3ViamVjdEFsdE5hbWVcIik7aWYocT09PXVuZGVmaW5lZCl7cmV0dXJuIHF9dmFyIGw9bmV3IEFycmF5KCk7dmFyIG89Yih0aGlzLmhleCxxLnZpZHgpO3ZhciBtPWoobywwKTtmb3IodmFyIG49MDtuPG0ubGVuZ3RoO24rKyl7cj1vLnN1YnN0cihtW25dLDIpO3A9aChvLG1bbl0pO2lmKHI9PT1cIjgxXCIpe3M9aGV4dG91dGY4KHApO2wucHVzaChbXCJNQUlMXCIsc10pfWlmKHI9PT1cIjgyXCIpe3M9aGV4dG91dGY4KHApO2wucHVzaChbXCJETlNcIixzXSl9aWYocj09PVwiODRcIil7cz1YNTA5LmhleDJkbihwLDApO2wucHVzaChbXCJETlwiLHNdKX1pZihyPT09XCI4NlwiKXtzPWhleHRvdXRmOChwKTtsLnB1c2goW1wiVVJJXCIsc10pfWlmKHI9PT1cIjg3XCIpe3M9aGV4dG9pcChwKTtsLnB1c2goW1wiSVBcIixzXSl9fXJldHVybiBsfTt0aGlzLmdldEV4dENSTERpc3RyaWJ1dGlvblBvaW50c1VSST1mdW5jdGlvbigpe3ZhciBxPXRoaXMuZ2V0RXh0SW5mbyhcImNSTERpc3RyaWJ1dGlvblBvaW50c1wiKTtpZihxPT09dW5kZWZpbmVkKXtyZXR1cm4gcX12YXIgbD1uZXcgQXJyYXkoKTt2YXIgbT1qKHRoaXMuaGV4LHEudmlkeCk7Zm9yKHZhciBvPTA7bzxtLmxlbmd0aDtvKyspe3RyeXt2YXIgcj1mKHRoaXMuaGV4LG1bb10sWzAsMCwwXSxcIjg2XCIpO3ZhciBwPWhleHRvdXRmOChyKTtsLnB1c2gocCl9Y2F0Y2gobil7fX1yZXR1cm4gbH07dGhpcy5nZXRFeHRBSUFJbmZvPWZ1bmN0aW9uKCl7dmFyIHA9dGhpcy5nZXRFeHRJbmZvKFwiYXV0aG9yaXR5SW5mb0FjY2Vzc1wiKTtpZihwPT09dW5kZWZpbmVkKXtyZXR1cm4gcH12YXIgbD17b2NzcDpbXSxjYWlzc3VlcjpbXX07dmFyIG09aih0aGlzLmhleCxwLnZpZHgpO2Zvcih2YXIgbj0wO248bS5sZW5ndGg7bisrKXt2YXIgcT1mKHRoaXMuaGV4LG1bbl0sWzBdLFwiMDZcIik7dmFyIG89Zih0aGlzLmhleCxtW25dLFsxXSxcIjg2XCIpO2lmKHE9PT1cIjJiMDYwMTA1MDUwNzMwMDFcIil7bC5vY3NwLnB1c2goaGV4dG91dGY4KG8pKX1pZihxPT09XCIyYjA2MDEwNTA1MDczMDAyXCIpe2wuY2Fpc3N1ZXIucHVzaChoZXh0b3V0ZjgobykpfX1yZXR1cm4gbH07dGhpcy5nZXRFeHRDZXJ0aWZpY2F0ZVBvbGljaWVzPWZ1bmN0aW9uKCl7dmFyIG89dGhpcy5nZXRFeHRJbmZvKFwiY2VydGlmaWNhdGVQb2xpY2llc1wiKTtpZihvPT09dW5kZWZpbmVkKXtyZXR1cm4gb312YXIgbD1iKHRoaXMuaGV4LG8udmlkeCk7dmFyIHU9W107dmFyIHM9aihsLDApO2Zvcih2YXIgcj0wO3I8cy5sZW5ndGg7cisrKXt2YXIgdD17fTt2YXIgbj1qKGwsc1tyXSk7dC5pZD1pKGgobCxuWzBdKSk7aWYobi5sZW5ndGg9PT0yKXt2YXIgbT1qKGwsblsxXSk7Zm9yKHZhciBxPTA7cTxtLmxlbmd0aDtxKyspe3ZhciBwPWYobCxtW3FdLFswXSxcIjA2XCIpO2lmKHA9PT1cIjJiMDYwMTA1MDUwNzAyMDFcIil7dC5jcHM9aGV4dG91dGY4KGYobCxtW3FdLFsxXSkpfWVsc2V7aWYocD09PVwiMmIwNjAxMDUwNTA3MDIwMlwiKXt0LnVub3RpY2U9aGV4dG91dGY4KGYobCxtW3FdLFsxLDBdKSl9fX19dS5wdXNoKHQpfXJldHVybiB1fTt0aGlzLnJlYWRDZXJ0UEVNPWZ1bmN0aW9uKGwpe3RoaXMucmVhZENlcnRIZXgoZShsKSl9O3RoaXMucmVhZENlcnRIZXg9ZnVuY3Rpb24obCl7dGhpcy5oZXg9bDt0aGlzLmdldFZlcnNpb24oKTt0cnl7Zyh0aGlzLmhleCwwLFswLDddLFwiYTNcIik7dGhpcy5wYXJzZUV4dCgpfWNhdGNoKG0pe319O3RoaXMuZ2V0SW5mbz1mdW5jdGlvbigpe3ZhciBtPVg1MDk7dmFyIEIsdSx6O0I9XCJCYXNpYyBGaWVsZHNcXG5cIjtCKz1cIiAgc2VyaWFsIG51bWJlcjogXCIrdGhpcy5nZXRTZXJpYWxOdW1iZXJIZXgoKStcIlxcblwiO0IrPVwiICBzaWduYXR1cmUgYWxnb3JpdGhtOiBcIit0aGlzLmdldFNpZ25hdHVyZUFsZ29yaXRobUZpZWxkKCkrXCJcXG5cIjtCKz1cIiAgaXNzdWVyOiBcIit0aGlzLmdldElzc3VlclN0cmluZygpK1wiXFxuXCI7Qis9XCIgIG5vdEJlZm9yZTogXCIrdGhpcy5nZXROb3RCZWZvcmUoKStcIlxcblwiO0IrPVwiICBub3RBZnRlcjogXCIrdGhpcy5nZXROb3RBZnRlcigpK1wiXFxuXCI7Qis9XCIgIHN1YmplY3Q6IFwiK3RoaXMuZ2V0U3ViamVjdFN0cmluZygpK1wiXFxuXCI7Qis9XCIgIHN1YmplY3QgcHVibGljIGtleSBpbmZvOiBcXG5cIjt1PXRoaXMuZ2V0UHVibGljS2V5KCk7Qis9XCIgICAga2V5IGFsZ29yaXRobTogXCIrdS50eXBlK1wiXFxuXCI7aWYodS50eXBlPT09XCJSU0FcIil7Qis9XCIgICAgbj1cIitoZXh0b3Bvc2hleCh1Lm4udG9TdHJpbmcoMTYpKS5zdWJzdHIoMCwxNikrXCIuLi5cXG5cIjtCKz1cIiAgICBlPVwiK2hleHRvcG9zaGV4KHUuZS50b1N0cmluZygxNikpK1wiXFxuXCJ9ej10aGlzLmFFeHRJbmZvO2lmKHohPT11bmRlZmluZWQmJnohPT1udWxsKXtCKz1cIlg1MDl2MyBFeHRlbnNpb25zOlxcblwiO2Zvcih2YXIgcj0wO3I8ei5sZW5ndGg7cisrKXt2YXIgbj16W3JdO3ZhciBBPUtKVVIuYXNuMS54NTA5Lk9JRC5vaWQybmFtZShuLm9pZCk7aWYoQT09PVwiXCIpe0E9bi5vaWR9dmFyIHg9XCJcIjtpZihuLmNyaXRpY2FsPT09dHJ1ZSl7eD1cIkNSSVRJQ0FMXCJ9Qis9XCIgIFwiK0ErXCIgXCIreCtcIjpcXG5cIjtpZihBPT09XCJiYXNpY0NvbnN0cmFpbnRzXCIpe3ZhciB2PXRoaXMuZ2V0RXh0QmFzaWNDb25zdHJhaW50cygpO2lmKHYuY0E9PT11bmRlZmluZWQpe0IrPVwiICAgIHt9XFxuXCJ9ZWxzZXtCKz1cIiAgICBjQT10cnVlXCI7aWYodi5wYXRoTGVuIT09dW5kZWZpbmVkKXtCKz1cIiwgcGF0aExlbj1cIit2LnBhdGhMZW59Qis9XCJcXG5cIn19ZWxzZXtpZihBPT09XCJrZXlVc2FnZVwiKXtCKz1cIiAgICBcIit0aGlzLmdldEV4dEtleVVzYWdlU3RyaW5nKCkrXCJcXG5cIn1lbHNle2lmKEE9PT1cInN1YmplY3RLZXlJZGVudGlmaWVyXCIpe0IrPVwiICAgIFwiK3RoaXMuZ2V0RXh0U3ViamVjdEtleUlkZW50aWZpZXIoKStcIlxcblwifWVsc2V7aWYoQT09PVwiYXV0aG9yaXR5S2V5SWRlbnRpZmllclwiKXt2YXIgbD10aGlzLmdldEV4dEF1dGhvcml0eUtleUlkZW50aWZpZXIoKTtpZihsLmtpZCE9PXVuZGVmaW5lZCl7Qis9XCIgICAga2lkPVwiK2wua2lkK1wiXFxuXCJ9fWVsc2V7aWYoQT09PVwiZXh0S2V5VXNhZ2VcIil7dmFyIHc9dGhpcy5nZXRFeHRFeHRLZXlVc2FnZU5hbWUoKTtCKz1cIiAgICBcIit3LmpvaW4oXCIsIFwiKStcIlxcblwifWVsc2V7aWYoQT09PVwic3ViamVjdEFsdE5hbWVcIil7dmFyIHQ9dGhpcy5nZXRFeHRTdWJqZWN0QWx0TmFtZTIoKTtCKz1cIiAgICBcIit0K1wiXFxuXCJ9ZWxzZXtpZihBPT09XCJjUkxEaXN0cmlidXRpb25Qb2ludHNcIil7dmFyIHk9dGhpcy5nZXRFeHRDUkxEaXN0cmlidXRpb25Qb2ludHNVUkkoKTtCKz1cIiAgICBcIit5K1wiXFxuXCJ9ZWxzZXtpZihBPT09XCJhdXRob3JpdHlJbmZvQWNjZXNzXCIpe3ZhciBwPXRoaXMuZ2V0RXh0QUlBSW5mbygpO2lmKHAub2NzcCE9PXVuZGVmaW5lZCl7Qis9XCIgICAgb2NzcDogXCIrcC5vY3NwLmpvaW4oXCIsXCIpK1wiXFxuXCJ9aWYocC5jYWlzc3VlciE9PXVuZGVmaW5lZCl7Qis9XCIgICAgY2Fpc3N1ZXI6IFwiK3AuY2Fpc3N1ZXIuam9pbihcIixcIikrXCJcXG5cIn19ZWxzZXtpZihBPT09XCJjZXJ0aWZpY2F0ZVBvbGljaWVzXCIpe3ZhciBvPXRoaXMuZ2V0RXh0Q2VydGlmaWNhdGVQb2xpY2llcygpO2Zvcih2YXIgcT0wO3E8by5sZW5ndGg7cSsrKXtpZihvW3FdLmlkIT09dW5kZWZpbmVkKXtCKz1cIiAgICBwb2xpY3kgb2lkOiBcIitvW3FdLmlkK1wiXFxuXCJ9aWYob1txXS5jcHMhPT11bmRlZmluZWQpe0IrPVwiICAgIGNwczogXCIrb1txXS5jcHMrXCJcXG5cIn19fX19fX19fX19fX1CKz1cInNpZ25hdHVyZSBhbGdvcml0aG06IFwiK3RoaXMuZ2V0U2lnbmF0dXJlQWxnb3JpdGhtTmFtZSgpK1wiXFxuXCI7Qis9XCJzaWduYXR1cmU6IFwiK3RoaXMuZ2V0U2lnbmF0dXJlVmFsdWVIZXgoKS5zdWJzdHIoMCwxNikrXCIuLi5cXG5cIjtyZXR1cm4gQn19WDUwOS5oZXgyZG49ZnVuY3Rpb24oZixiKXtpZihiPT09dW5kZWZpbmVkKXtiPTB9aWYoZi5zdWJzdHIoYiwyKSE9PVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBETlwifXZhciBjPW5ldyBBcnJheSgpO3ZhciBkPUFTTjFIRVguZ2V0Q2hpbGRJZHgoZixiKTtmb3IodmFyIGU9MDtlPGQubGVuZ3RoO2UrKyl7Yy5wdXNoKFg1MDkuaGV4MnJkbihmLGRbZV0pKX1jPWMubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoXCIvXCIsXCJcXFxcL1wiKX0pO3JldHVyblwiL1wiK2Muam9pbihcIi9cIil9O1g1MDkuaGV4MnJkbj1mdW5jdGlvbihmLGIpe2lmKGI9PT11bmRlZmluZWQpe2I9MH1pZihmLnN1YnN0cihiLDIpIT09XCIzMVwiKXt0aHJvd1wibWFsZm9ybWVkIFJETlwifXZhciBjPW5ldyBBcnJheSgpO3ZhciBkPUFTTjFIRVguZ2V0Q2hpbGRJZHgoZixiKTtmb3IodmFyIGU9MDtlPGQubGVuZ3RoO2UrKyl7Yy5wdXNoKFg1MDkuaGV4MmF0dHJUeXBlVmFsdWUoZixkW2VdKSl9Yz1jLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKFwiK1wiLFwiXFxcXCtcIil9KTtyZXR1cm4gYy5qb2luKFwiK1wiKX07WDUwOS5oZXgyYXR0clR5cGVWYWx1ZT1mdW5jdGlvbihkLGkpe3ZhciBqPUFTTjFIRVg7dmFyIGg9ai5nZXRWO2lmKGk9PT11bmRlZmluZWQpe2k9MH1pZihkLnN1YnN0cihpLDIpIT09XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIGF0dHJpYnV0ZSB0eXBlIGFuZCB2YWx1ZVwifXZhciBnPWouZ2V0Q2hpbGRJZHgoZCxpKTtpZihnLmxlbmd0aCE9PTJ8fGQuc3Vic3RyKGdbMF0sMikhPT1cIjA2XCIpe1wibWFsZm9ybWVkIGF0dHJpYnV0ZSB0eXBlIGFuZCB2YWx1ZVwifXZhciBiPWgoZCxnWzBdKTt2YXIgZj1LSlVSLmFzbjEuQVNOMVV0aWwub2lkSGV4VG9JbnQoYik7dmFyIGU9S0pVUi5hc24xLng1MDkuT0lELm9pZDJhdHlwZShmKTt2YXIgYT1oKGQsZ1sxXSk7dmFyIGM9aGV4dG9yc3RyKGEpO3JldHVybiBlK1wiPVwiK2N9O1g1MDkuZ2V0UHVibGljS2V5RnJvbUNlcnRIZXg9ZnVuY3Rpb24oYil7dmFyIGE9bmV3IFg1MDkoKTthLnJlYWRDZXJ0SGV4KGIpO3JldHVybiBhLmdldFB1YmxpY0tleSgpfTtYNTA5LmdldFB1YmxpY0tleUZyb21DZXJ0UEVNPWZ1bmN0aW9uKGIpe3ZhciBhPW5ldyBYNTA5KCk7YS5yZWFkQ2VydFBFTShiKTtyZXR1cm4gYS5nZXRQdWJsaWNLZXkoKX07WDUwOS5nZXRQdWJsaWNLZXlJbmZvUHJvcE9mQ2VydFBFTT1mdW5jdGlvbihjKXt2YXIgZT1BU04xSEVYO3ZhciBnPWUuZ2V0VmJ5TGlzdDt2YXIgYj17fTt2YXIgYSxmLGQ7Yi5hbGdwYXJhbT1udWxsO2E9bmV3IFg1MDkoKTthLnJlYWRDZXJ0UEVNKGMpO2Y9YS5nZXRQdWJsaWNLZXlIZXgoKTtiLmtleWhleD1nKGYsMCxbMV0sXCIwM1wiKS5zdWJzdHIoMik7Yi5hbGdvaWQ9ZyhmLDAsWzAsMF0sXCIwNlwiKTtpZihiLmFsZ29pZD09PVwiMmE4NjQ4Y2UzZDAyMDFcIil7Yi5hbGdwYXJhbT1nKGYsMCxbMCwxXSxcIjA2XCIpfXJldHVybiBifTtYNTA5LktFWVVTQUdFX05BTUU9W1wiZGlnaXRhbFNpZ25hdHVyZVwiLFwibm9uUmVwdWRpYXRpb25cIixcImtleUVuY2lwaGVybWVudFwiLFwiZGF0YUVuY2lwaGVybWVudFwiLFwia2V5QWdyZWVtZW50XCIsXCJrZXlDZXJ0U2lnblwiLFwiY1JMU2lnblwiLFwiZW5jaXBoZXJPbmx5XCIsXCJkZWNpcGhlck9ubHlcIl07XG5pZih0eXBlb2YgS0pVUj09XCJ1bmRlZmluZWRcInx8IUtKVVIpe0tKVVI9e319aWYodHlwZW9mIEtKVVIuandzPT1cInVuZGVmaW5lZFwifHwhS0pVUi5qd3Mpe0tKVVIuandzPXt9fUtKVVIuandzLkpXUz1mdW5jdGlvbigpe3ZhciBiPUtKVVIsYT1iLmp3cy5KV1MsYz1hLmlzU2FmZUpTT05TdHJpbmc7dGhpcy5wYXJzZUpXUz1mdW5jdGlvbihnLGope2lmKCh0aGlzLnBhcnNlZEpXUyE9PXVuZGVmaW5lZCkmJihqfHwodGhpcy5wYXJzZWRKV1Muc2lndmFsSCE9PXVuZGVmaW5lZCkpKXtyZXR1cm59dmFyIGk9Zy5tYXRjaCgvXihbXi5dKylcXC4oW14uXSspXFwuKFteLl0rKSQvKTtpZihpPT1udWxsKXt0aHJvd1wiSldTIHNpZ25hdHVyZSBpcyBub3QgYSBmb3JtIG9mICdIZWFkLlBheWxvYWQuU2lnVmFsdWUnLlwifXZhciBrPWlbMV07dmFyIGU9aVsyXTt2YXIgbD1pWzNdO3ZhciBuPWsrXCIuXCIrZTt0aGlzLnBhcnNlZEpXUz17fTt0aGlzLnBhcnNlZEpXUy5oZWFkQjY0VT1rO3RoaXMucGFyc2VkSldTLnBheWxvYWRCNjRVPWU7dGhpcy5wYXJzZWRKV1Muc2lndmFsQjY0VT1sO3RoaXMucGFyc2VkSldTLnNpPW47aWYoIWope3ZhciBoPWI2NHV0b2hleChsKTt2YXIgZj1wYXJzZUJpZ0ludChoLDE2KTt0aGlzLnBhcnNlZEpXUy5zaWd2YWxIPWg7dGhpcy5wYXJzZWRKV1Muc2lndmFsQkk9Zn12YXIgZD1iNjR1dG91dGY4KGspO3ZhciBtPWI2NHV0b3V0ZjgoZSk7dGhpcy5wYXJzZWRKV1MuaGVhZFM9ZDt0aGlzLnBhcnNlZEpXUy5wYXlsb2FkUz1tO2lmKCFjKGQsdGhpcy5wYXJzZWRKV1MsXCJoZWFkUFwiKSl7dGhyb3dcIm1hbGZvcm1lZCBKU09OIHN0cmluZyBmb3IgSldTIEhlYWQ6IFwiK2R9fX07S0pVUi5qd3MuSldTLnNpZ249ZnVuY3Rpb24oaSx2LHkseixhKXt2YXIgdz1LSlVSLG09dy5qd3MscT1tLkpXUyxnPXEucmVhZFNhZmVKU09OU3RyaW5nLHA9cS5pc1NhZmVKU09OU3RyaW5nLGQ9dy5jcnlwdG8saz1kLkVDRFNBLG89ZC5NYWMsYz1kLlNpZ25hdHVyZSx0PUpTT047dmFyIHMsaixuO2lmKHR5cGVvZiB2IT1cInN0cmluZ1wiJiZ0eXBlb2YgdiE9XCJvYmplY3RcIil7dGhyb3dcInNwSGVhZGVyIG11c3QgYmUgSlNPTiBzdHJpbmcgb3Igb2JqZWN0OiBcIit2fWlmKHR5cGVvZiB2PT1cIm9iamVjdFwiKXtqPXY7cz10LnN0cmluZ2lmeShqKX1pZih0eXBlb2Ygdj09XCJzdHJpbmdcIil7cz12O2lmKCFwKHMpKXt0aHJvd1wiSldTIEhlYWQgaXMgbm90IHNhZmUgSlNPTiBzdHJpbmc6IFwiK3N9aj1nKHMpfW49eTtpZih0eXBlb2YgeT09XCJvYmplY3RcIil7bj10LnN0cmluZ2lmeSh5KX1pZigoaT09XCJcInx8aT09bnVsbCkmJmouYWxnIT09dW5kZWZpbmVkKXtpPWouYWxnfWlmKChpIT1cIlwiJiZpIT1udWxsKSYmai5hbGc9PT11bmRlZmluZWQpe2ouYWxnPWk7cz10LnN0cmluZ2lmeShqKX1pZihpIT09ai5hbGcpe3Rocm93XCJhbGcgYW5kIHNIZWFkZXIuYWxnIGRvZXNuJ3QgbWF0Y2g6IFwiK2krXCIhPVwiK2ouYWxnfXZhciByPW51bGw7aWYocS5qd3NhbGcyc2lnYWxnW2ldPT09dW5kZWZpbmVkKXt0aHJvd1widW5zdXBwb3J0ZWQgYWxnIG5hbWU6IFwiK2l9ZWxzZXtyPXEuandzYWxnMnNpZ2FsZ1tpXX12YXIgZT11dGY4dG9iNjR1KHMpO3ZhciBsPXV0Zjh0b2I2NHUobik7dmFyIGI9ZStcIi5cIitsO3ZhciB4PVwiXCI7aWYoci5zdWJzdHIoMCw0KT09XCJIbWFjXCIpe2lmKHo9PT11bmRlZmluZWQpe3Rocm93XCJtYWMga2V5IHNoYWxsIGJlIHNwZWNpZmllZCBmb3IgSFMqIGFsZ1wifXZhciBoPW5ldyBvKHthbGc6cixwcm92OlwiY3J5cHRvanNcIixwYXNzOnp9KTtoLnVwZGF0ZVN0cmluZyhiKTt4PWguZG9GaW5hbCgpfWVsc2V7aWYoci5pbmRleE9mKFwid2l0aEVDRFNBXCIpIT0tMSl7dmFyIGY9bmV3IGMoe2FsZzpyfSk7Zi5pbml0KHosYSk7Zi51cGRhdGVTdHJpbmcoYik7aEFTTjFTaWc9Zi5zaWduKCk7eD1LSlVSLmNyeXB0by5FQ0RTQS5hc24xU2lnVG9Db25jYXRTaWcoaEFTTjFTaWcpfWVsc2V7aWYociE9XCJub25lXCIpe3ZhciBmPW5ldyBjKHthbGc6cn0pO2YuaW5pdCh6LGEpO2YudXBkYXRlU3RyaW5nKGIpO3g9Zi5zaWduKCl9fX12YXIgdT1oZXh0b2I2NHUoeCk7cmV0dXJuIGIrXCIuXCIrdX07S0pVUi5qd3MuSldTLnZlcmlmeT1mdW5jdGlvbih3LEIsbil7dmFyIHg9S0pVUixxPXguandzLHQ9cS5KV1MsaT10LnJlYWRTYWZlSlNPTlN0cmluZyxlPXguY3J5cHRvLHA9ZS5FQ0RTQSxzPWUuTWFjLGQ9ZS5TaWduYXR1cmUsbTtpZih0eXBlb2YgUlNBS2V5IT09dW5kZWZpbmVkKXttPVJTQUtleX12YXIgeT13LnNwbGl0KFwiLlwiKTtpZih5Lmxlbmd0aCE9PTMpe3JldHVybiBmYWxzZX12YXIgZj15WzBdO3ZhciByPXlbMV07dmFyIGM9ZitcIi5cIityO3ZhciBBPWI2NHV0b2hleCh5WzJdKTt2YXIgbD1pKGI2NHV0b3V0ZjgoeVswXSkpO3ZhciBrPW51bGw7dmFyIHo9bnVsbDtpZihsLmFsZz09PXVuZGVmaW5lZCl7dGhyb3dcImFsZ29yaXRobSBub3Qgc3BlY2lmaWVkIGluIGhlYWRlclwifWVsc2V7az1sLmFsZzt6PWsuc3Vic3RyKDAsMil9aWYobiE9bnVsbCYmT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG4pPT09XCJbb2JqZWN0IEFycmF5XVwiJiZuLmxlbmd0aD4wKXt2YXIgYj1cIjpcIituLmpvaW4oXCI6XCIpK1wiOlwiO2lmKGIuaW5kZXhPZihcIjpcIitrK1wiOlwiKT09LTEpe3Rocm93XCJhbGdvcml0aG0gJ1wiK2srXCInIG5vdCBhY2NlcHRlZCBpbiB0aGUgbGlzdFwifX1pZihrIT1cIm5vbmVcIiYmQj09PW51bGwpe3Rocm93XCJrZXkgc2hhbGwgYmUgc3BlY2lmaWVkIHRvIHZlcmlmeS5cIn1pZih0eXBlb2YgQj09XCJzdHJpbmdcIiYmQi5pbmRleE9mKFwiLS0tLS1CRUdJTiBcIikhPS0xKXtCPUtFWVVUSUwuZ2V0S2V5KEIpfWlmKHo9PVwiUlNcInx8ej09XCJQU1wiKXtpZighKEIgaW5zdGFuY2VvZiBtKSl7dGhyb3dcImtleSBzaGFsbCBiZSBhIFJTQUtleSBvYmogZm9yIFJTKiBhbmQgUFMqIGFsZ3NcIn19aWYoej09XCJFU1wiKXtpZighKEIgaW5zdGFuY2VvZiBwKSl7dGhyb3dcImtleSBzaGFsbCBiZSBhIEVDRFNBIG9iaiBmb3IgRVMqIGFsZ3NcIn19aWYoaz09XCJub25lXCIpe312YXIgdT1udWxsO2lmKHQuandzYWxnMnNpZ2FsZ1tsLmFsZ109PT11bmRlZmluZWQpe3Rocm93XCJ1bnN1cHBvcnRlZCBhbGcgbmFtZTogXCIra31lbHNle3U9dC5qd3NhbGcyc2lnYWxnW2tdfWlmKHU9PVwibm9uZVwiKXt0aHJvd1wibm90IHN1cHBvcnRlZFwifWVsc2V7aWYodS5zdWJzdHIoMCw0KT09XCJIbWFjXCIpe3ZhciBvPW51bGw7aWYoQj09PXVuZGVmaW5lZCl7dGhyb3dcImhleGFkZWNpbWFsIGtleSBzaGFsbCBiZSBzcGVjaWZpZWQgZm9yIEhNQUNcIn12YXIgaj1uZXcgcyh7YWxnOnUscGFzczpCfSk7ai51cGRhdGVTdHJpbmcoYyk7bz1qLmRvRmluYWwoKTtyZXR1cm4gQT09b31lbHNle2lmKHUuaW5kZXhPZihcIndpdGhFQ0RTQVwiKSE9LTEpe3ZhciBoPW51bGw7dHJ5e2g9cC5jb25jYXRTaWdUb0FTTjFTaWcoQSl9Y2F0Y2godil7cmV0dXJuIGZhbHNlfXZhciBnPW5ldyBkKHthbGc6dX0pO2cuaW5pdChCKTtnLnVwZGF0ZVN0cmluZyhjKTtyZXR1cm4gZy52ZXJpZnkoaCl9ZWxzZXt2YXIgZz1uZXcgZCh7YWxnOnV9KTtnLmluaXQoQik7Zy51cGRhdGVTdHJpbmcoYyk7cmV0dXJuIGcudmVyaWZ5KEEpfX19fTtLSlVSLmp3cy5KV1MucGFyc2U9ZnVuY3Rpb24oZyl7dmFyIGM9Zy5zcGxpdChcIi5cIik7dmFyIGI9e307dmFyIGYsZSxkO2lmKGMubGVuZ3RoIT0yJiZjLmxlbmd0aCE9Myl7dGhyb3dcIm1hbGZvcm1lZCBzSldTOiB3cm9uZyBudW1iZXIgb2YgJy4nIHNwbGl0dGVkIGVsZW1lbnRzXCJ9Zj1jWzBdO2U9Y1sxXTtpZihjLmxlbmd0aD09Myl7ZD1jWzJdfWIuaGVhZGVyT2JqPUtKVVIuandzLkpXUy5yZWFkU2FmZUpTT05TdHJpbmcoYjY0dXRvdXRmOChmKSk7Yi5wYXlsb2FkT2JqPUtKVVIuandzLkpXUy5yZWFkU2FmZUpTT05TdHJpbmcoYjY0dXRvdXRmOChlKSk7Yi5oZWFkZXJQUD1KU09OLnN0cmluZ2lmeShiLmhlYWRlck9iaixudWxsLFwiICBcIik7aWYoYi5wYXlsb2FkT2JqPT1udWxsKXtiLnBheWxvYWRQUD1iNjR1dG91dGY4KGUpfWVsc2V7Yi5wYXlsb2FkUFA9SlNPTi5zdHJpbmdpZnkoYi5wYXlsb2FkT2JqLG51bGwsXCIgIFwiKX1pZihkIT09dW5kZWZpbmVkKXtiLnNpZ0hleD1iNjR1dG9oZXgoZCl9cmV0dXJuIGJ9O0tKVVIuandzLkpXUy52ZXJpZnlKV1Q9ZnVuY3Rpb24oZSxsLHIpe3ZhciBkPUtKVVIsaj1kLmp3cyxvPWouSldTLG49by5yZWFkU2FmZUpTT05TdHJpbmcscD1vLmluQXJyYXksZj1vLmluY2x1ZGVkQXJyYXk7dmFyIGs9ZS5zcGxpdChcIi5cIik7dmFyIGM9a1swXTt2YXIgaT1rWzFdO3ZhciBxPWMrXCIuXCIraTt2YXIgbT1iNjR1dG9oZXgoa1syXSk7dmFyIGg9bihiNjR1dG91dGY4KGMpKTt2YXIgZz1uKGI2NHV0b3V0ZjgoaSkpO2lmKGguYWxnPT09dW5kZWZpbmVkKXtyZXR1cm4gZmFsc2V9aWYoci5hbGc9PT11bmRlZmluZWQpe3Rocm93XCJhY2NlcHRGaWVsZC5hbGcgc2hhbGwgYmUgc3BlY2lmaWVkXCJ9aWYoIXAoaC5hbGcsci5hbGcpKXtyZXR1cm4gZmFsc2V9aWYoZy5pc3MhPT11bmRlZmluZWQmJnR5cGVvZiByLmlzcz09PVwib2JqZWN0XCIpe2lmKCFwKGcuaXNzLHIuaXNzKSl7cmV0dXJuIGZhbHNlfX1pZihnLnN1YiE9PXVuZGVmaW5lZCYmdHlwZW9mIHIuc3ViPT09XCJvYmplY3RcIil7aWYoIXAoZy5zdWIsci5zdWIpKXtyZXR1cm4gZmFsc2V9fWlmKGcuYXVkIT09dW5kZWZpbmVkJiZ0eXBlb2Ygci5hdWQ9PT1cIm9iamVjdFwiKXtpZih0eXBlb2YgZy5hdWQ9PVwic3RyaW5nXCIpe2lmKCFwKGcuYXVkLHIuYXVkKSl7cmV0dXJuIGZhbHNlfX1lbHNle2lmKHR5cGVvZiBnLmF1ZD09XCJvYmplY3RcIil7aWYoIWYoZy5hdWQsci5hdWQpKXtyZXR1cm4gZmFsc2V9fX19dmFyIGI9ai5JbnREYXRlLmdldE5vdygpO2lmKHIudmVyaWZ5QXQhPT11bmRlZmluZWQmJnR5cGVvZiByLnZlcmlmeUF0PT09XCJudW1iZXJcIil7Yj1yLnZlcmlmeUF0fWlmKHIuZ3JhY2VQZXJpb2Q9PT11bmRlZmluZWR8fHR5cGVvZiByLmdyYWNlUGVyaW9kIT09XCJudW1iZXJcIil7ci5ncmFjZVBlcmlvZD0wfWlmKGcuZXhwIT09dW5kZWZpbmVkJiZ0eXBlb2YgZy5leHA9PVwibnVtYmVyXCIpe2lmKGcuZXhwK3IuZ3JhY2VQZXJpb2Q8Yil7cmV0dXJuIGZhbHNlfX1pZihnLm5iZiE9PXVuZGVmaW5lZCYmdHlwZW9mIGcubmJmPT1cIm51bWJlclwiKXtpZihiPGcubmJmLXIuZ3JhY2VQZXJpb2Qpe3JldHVybiBmYWxzZX19aWYoZy5pYXQhPT11bmRlZmluZWQmJnR5cGVvZiBnLmlhdD09XCJudW1iZXJcIil7aWYoYjxnLmlhdC1yLmdyYWNlUGVyaW9kKXtyZXR1cm4gZmFsc2V9fWlmKGcuanRpIT09dW5kZWZpbmVkJiZyLmp0aSE9PXVuZGVmaW5lZCl7aWYoZy5qdGkhPT1yLmp0aSl7cmV0dXJuIGZhbHNlfX1pZighby52ZXJpZnkoZSxsLHIuYWxnKSl7cmV0dXJuIGZhbHNlfXJldHVybiB0cnVlfTtLSlVSLmp3cy5KV1MuaW5jbHVkZWRBcnJheT1mdW5jdGlvbihiLGEpe3ZhciBjPUtKVVIuandzLkpXUy5pbkFycmF5O2lmKGI9PT1udWxsKXtyZXR1cm4gZmFsc2V9aWYodHlwZW9mIGIhPT1cIm9iamVjdFwiKXtyZXR1cm4gZmFsc2V9aWYodHlwZW9mIGIubGVuZ3RoIT09XCJudW1iZXJcIil7cmV0dXJuIGZhbHNlfWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXtpZighYyhiW2RdLGEpKXtyZXR1cm4gZmFsc2V9fXJldHVybiB0cnVlfTtLSlVSLmp3cy5KV1MuaW5BcnJheT1mdW5jdGlvbihkLGIpe2lmKGI9PT1udWxsKXtyZXR1cm4gZmFsc2V9aWYodHlwZW9mIGIhPT1cIm9iamVjdFwiKXtyZXR1cm4gZmFsc2V9aWYodHlwZW9mIGIubGVuZ3RoIT09XCJudW1iZXJcIil7cmV0dXJuIGZhbHNlfWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXtpZihiW2NdPT1kKXtyZXR1cm4gdHJ1ZX19cmV0dXJuIGZhbHNlfTtLSlVSLmp3cy5KV1MuandzYWxnMnNpZ2FsZz17SFMyNTY6XCJIbWFjU0hBMjU2XCIsSFMzODQ6XCJIbWFjU0hBMzg0XCIsSFM1MTI6XCJIbWFjU0hBNTEyXCIsUlMyNTY6XCJTSEEyNTZ3aXRoUlNBXCIsUlMzODQ6XCJTSEEzODR3aXRoUlNBXCIsUlM1MTI6XCJTSEE1MTJ3aXRoUlNBXCIsRVMyNTY6XCJTSEEyNTZ3aXRoRUNEU0FcIixFUzM4NDpcIlNIQTM4NHdpdGhFQ0RTQVwiLFBTMjU2OlwiU0hBMjU2d2l0aFJTQWFuZE1HRjFcIixQUzM4NDpcIlNIQTM4NHdpdGhSU0FhbmRNR0YxXCIsUFM1MTI6XCJTSEE1MTJ3aXRoUlNBYW5kTUdGMVwiLG5vbmU6XCJub25lXCIsfTtLSlVSLmp3cy5KV1MuaXNTYWZlSlNPTlN0cmluZz1mdW5jdGlvbihjLGIsZCl7dmFyIGU9bnVsbDt0cnl7ZT1qc29uUGFyc2UoYyk7aWYodHlwZW9mIGUhPVwib2JqZWN0XCIpe3JldHVybiAwfWlmKGUuY29uc3RydWN0b3I9PT1BcnJheSl7cmV0dXJuIDB9aWYoYil7YltkXT1lfXJldHVybiAxfWNhdGNoKGEpe3JldHVybiAwfX07S0pVUi5qd3MuSldTLnJlYWRTYWZlSlNPTlN0cmluZz1mdW5jdGlvbihiKXt2YXIgYz1udWxsO3RyeXtjPWpzb25QYXJzZShiKTtpZih0eXBlb2YgYyE9XCJvYmplY3RcIil7cmV0dXJuIG51bGx9aWYoYy5jb25zdHJ1Y3Rvcj09PUFycmF5KXtyZXR1cm4gbnVsbH1yZXR1cm4gY31jYXRjaChhKXtyZXR1cm4gbnVsbH19O0tKVVIuandzLkpXUy5nZXRFbmNvZGVkU2lnbmF0dXJlVmFsdWVGcm9tSldTPWZ1bmN0aW9uKGIpe3ZhciBhPWIubWF0Y2goL15bXi5dK1xcLlteLl0rXFwuKFteLl0rKSQvKTtpZihhPT1udWxsKXt0aHJvd1wiSldTIHNpZ25hdHVyZSBpcyBub3QgYSBmb3JtIG9mICdIZWFkLlBheWxvYWQuU2lnVmFsdWUnLlwifXJldHVybiBhWzFdfTtLSlVSLmp3cy5KV1MuZ2V0SldLdGh1bWJwcmludD1mdW5jdGlvbihkKXtpZihkLmt0eSE9PVwiUlNBXCImJmQua3R5IT09XCJFQ1wiJiZkLmt0eSE9PVwib2N0XCIpe3Rocm93XCJ1bnN1cHBvcnRlZCBhbGdvcml0aG0gZm9yIEpXSyBUaHVtcHJpbnRcIn12YXIgYT1cIntcIjtpZihkLmt0eT09PVwiUlNBXCIpe2lmKHR5cGVvZiBkLm4hPVwic3RyaW5nXCJ8fHR5cGVvZiBkLmUhPVwic3RyaW5nXCIpe3Rocm93XCJ3cm9uZyBuIGFuZCBlIHZhbHVlIGZvciBSU0Ega2V5XCJ9YSs9J1wiZVwiOlwiJytkLmUrJ1wiLCc7YSs9J1wia3R5XCI6XCInK2Qua3R5KydcIiwnO2ErPSdcIm5cIjpcIicrZC5uKydcIn0nfWVsc2V7aWYoZC5rdHk9PT1cIkVDXCIpe2lmKHR5cGVvZiBkLmNydiE9XCJzdHJpbmdcInx8dHlwZW9mIGQueCE9XCJzdHJpbmdcInx8dHlwZW9mIGQueSE9XCJzdHJpbmdcIil7dGhyb3dcIndyb25nIGNydiwgeCBhbmQgeSB2YWx1ZSBmb3IgRUMga2V5XCJ9YSs9J1wiY3J2XCI6XCInK2QuY3J2KydcIiwnO2ErPSdcImt0eVwiOlwiJytkLmt0eSsnXCIsJzthKz0nXCJ4XCI6XCInK2QueCsnXCIsJzthKz0nXCJ5XCI6XCInK2QueSsnXCJ9J31lbHNle2lmKGQua3R5PT09XCJvY3RcIil7aWYodHlwZW9mIGQuayE9XCJzdHJpbmdcIil7dGhyb3dcIndyb25nIGsgdmFsdWUgZm9yIG9jdChzeW1tZXRyaWMpIGtleVwifWErPSdcImt0eVwiOlwiJytkLmt0eSsnXCIsJzthKz0nXCJrXCI6XCInK2QuaysnXCJ9J319fXZhciBiPXJzdHJ0b2hleChhKTt2YXIgYz1LSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoYixcInNoYTI1NlwiKTt2YXIgZT1oZXh0b2I2NHUoYyk7cmV0dXJuIGV9O0tKVVIuandzLkludERhdGU9e307S0pVUi5qd3MuSW50RGF0ZS5nZXQ9ZnVuY3Rpb24oYyl7dmFyIGI9S0pVUi5qd3MuSW50RGF0ZSxkPWIuZ2V0Tm93LGE9Yi5nZXRadWx1O2lmKGM9PVwibm93XCIpe3JldHVybiBkKCl9ZWxzZXtpZihjPT1cIm5vdyArIDFob3VyXCIpe3JldHVybiBkKCkrNjAqNjB9ZWxzZXtpZihjPT1cIm5vdyArIDFkYXlcIil7cmV0dXJuIGQoKSs2MCo2MCoyNH1lbHNle2lmKGM9PVwibm93ICsgMW1vbnRoXCIpe3JldHVybiBkKCkrNjAqNjAqMjQqMzB9ZWxzZXtpZihjPT1cIm5vdyArIDF5ZWFyXCIpe3JldHVybiBkKCkrNjAqNjAqMjQqMzY1fWVsc2V7aWYoYy5tYXRjaCgvWiQvKSl7cmV0dXJuIGEoYyl9ZWxzZXtpZihjLm1hdGNoKC9eWzAtOV0rJC8pKXtyZXR1cm4gcGFyc2VJbnQoYyl9fX19fX19dGhyb3dcInVuc3VwcG9ydGVkIGZvcm1hdDogXCIrY307S0pVUi5qd3MuSW50RGF0ZS5nZXRadWx1PWZ1bmN0aW9uKGEpe3JldHVybiB6dWx1dG9zZWMoYSl9O0tKVVIuandzLkludERhdGUuZ2V0Tm93PWZ1bmN0aW9uKCl7dmFyIGE9fn4obmV3IERhdGUoKS8xMDAwKTtyZXR1cm4gYX07S0pVUi5qd3MuSW50RGF0ZS5pbnREYXRlMlVUQ1N0cmluZz1mdW5jdGlvbihhKXt2YXIgYj1uZXcgRGF0ZShhKjEwMDApO3JldHVybiBiLnRvVVRDU3RyaW5nKCl9O0tKVVIuandzLkludERhdGUuaW50RGF0ZTJadWx1PWZ1bmN0aW9uKGUpe3ZhciBpPW5ldyBEYXRlKGUqMTAwMCksaD0oXCIwMDAwXCIraS5nZXRVVENGdWxsWWVhcigpKS5zbGljZSgtNCksZz0oXCIwMFwiKyhpLmdldFVUQ01vbnRoKCkrMSkpLnNsaWNlKC0yKSxiPShcIjAwXCIraS5nZXRVVENEYXRlKCkpLnNsaWNlKC0yKSxhPShcIjAwXCIraS5nZXRVVENIb3VycygpKS5zbGljZSgtMiksYz0oXCIwMFwiK2kuZ2V0VVRDTWludXRlcygpKS5zbGljZSgtMiksZj0oXCIwMFwiK2kuZ2V0VVRDU2Vjb25kcygpKS5zbGljZSgtMik7cmV0dXJuIGgrZytiK2ErYytmK1wiWlwifTtcbmV4cG9ydHMuU2VjdXJlUmFuZG9tID0gU2VjdXJlUmFuZG9tO1xyXG5leHBvcnRzLnJuZ19zZWVkX3RpbWUgPSBybmdfc2VlZF90aW1lO1xyXG5cclxuZXhwb3J0cy5CaWdJbnRlZ2VyID0gQmlnSW50ZWdlcjtcclxuZXhwb3J0cy5SU0FLZXkgPSBSU0FLZXk7XHJcbmV4cG9ydHMuRUNEU0EgPSBLSlVSLmNyeXB0by5FQ0RTQTtcclxuZXhwb3J0cy5EU0EgPSBLSlVSLmNyeXB0by5EU0E7XHJcbmV4cG9ydHMuU2lnbmF0dXJlID0gS0pVUi5jcnlwdG8uU2lnbmF0dXJlO1xyXG5leHBvcnRzLk1lc3NhZ2VEaWdlc3QgPSBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0O1xyXG5leHBvcnRzLk1hYyA9IEtKVVIuY3J5cHRvLk1hYztcclxuZXhwb3J0cy5DaXBoZXIgPSBLSlVSLmNyeXB0by5DaXBoZXI7XHJcbmV4cG9ydHMuS0VZVVRJTCA9IEtFWVVUSUw7XHJcbmV4cG9ydHMuQVNOMUhFWCA9IEFTTjFIRVg7XHJcbmV4cG9ydHMuWDUwOSA9IFg1MDk7XHJcbmV4cG9ydHMuQ3J5cHRvSlMgPSBDcnlwdG9KUztcclxuXHJcbi8vIGV4dC9iYXNlNjQuanNcclxuZXhwb3J0cy5iNjR0b2hleCA9IGI2NHRvaGV4O1xyXG5leHBvcnRzLmI2NHRvQkEgPSBiNjR0b0JBO1xyXG5cclxuLy8gYmFzZTY0eC5qc1xyXG5leHBvcnRzLnN0b0JBID0gc3RvQkE7XHJcbmV4cG9ydHMuQkF0b3MgPSBCQXRvcztcclxuZXhwb3J0cy5CQXRvaGV4ID0gQkF0b2hleDtcclxuZXhwb3J0cy5zdG9oZXggPSBzdG9oZXg7XHJcbmV4cG9ydHMuc3RvYjY0ID0gc3RvYjY0O1xyXG5leHBvcnRzLnN0b2I2NHUgPSBzdG9iNjR1O1xyXG5leHBvcnRzLmI2NHV0b3MgPSBiNjR1dG9zO1xyXG5leHBvcnRzLmI2NHRvYjY0dSA9IGI2NHRvYjY0dTtcclxuZXhwb3J0cy5iNjR1dG9iNjQgPSBiNjR1dG9iNjQ7XHJcbmV4cG9ydHMuaGV4MmI2NCA9IGhleDJiNjQ7XHJcbmV4cG9ydHMuaGV4dG9iNjR1ID0gaGV4dG9iNjR1O1xyXG5leHBvcnRzLmI2NHV0b2hleCA9IGI2NHV0b2hleDtcclxuZXhwb3J0cy51dGY4dG9iNjR1ID0gdXRmOHRvYjY0dTtcclxuZXhwb3J0cy5iNjR1dG91dGY4ID0gYjY0dXRvdXRmODtcclxuZXhwb3J0cy51dGY4dG9iNjQgPSB1dGY4dG9iNjQ7XHJcbmV4cG9ydHMuYjY0dG91dGY4ID0gYjY0dG91dGY4O1xyXG5leHBvcnRzLnV0Zjh0b2hleCA9IHV0Zjh0b2hleDtcclxuZXhwb3J0cy5oZXh0b3V0ZjggPSBoZXh0b3V0Zjg7XHJcbmV4cG9ydHMuaGV4dG9yc3RyID0gaGV4dG9yc3RyO1xyXG5leHBvcnRzLnJzdHJ0b2hleCA9IHJzdHJ0b2hleDtcclxuZXhwb3J0cy5oZXh0b2I2NCA9IGhleHRvYjY0O1xyXG5leHBvcnRzLmhleHRvYjY0bmwgPSBoZXh0b2I2NG5sO1xyXG5leHBvcnRzLmI2NG5sdG9oZXggPSBiNjRubHRvaGV4O1xyXG5leHBvcnRzLmhleHRvcGVtID0gaGV4dG9wZW07XHJcbmV4cG9ydHMucGVtdG9oZXggPSBwZW10b2hleDtcclxuZXhwb3J0cy5oZXh0b0FycmF5QnVmZmVyID0gaGV4dG9BcnJheUJ1ZmZlcjtcclxuZXhwb3J0cy5BcnJheUJ1ZmZlcnRvaGV4ID0gQXJyYXlCdWZmZXJ0b2hleDtcclxuZXhwb3J0cy56dWx1dG9tc2VjID0genVsdXRvbXNlYztcclxuZXhwb3J0cy56dWx1dG9zZWMgPSB6dWx1dG9zZWM7XHJcbmV4cG9ydHMuenVsdXRvZGF0ZSA9IHp1bHV0b2RhdGU7XHJcbmV4cG9ydHMuZGF0ZXRvenVsdSA9IGRhdGV0b3p1bHU7XHJcbmV4cG9ydHMudXJpY21wdG9oZXggPSB1cmljbXB0b2hleDtcclxuZXhwb3J0cy5oZXh0b3VyaWNtcCA9IGhleHRvdXJpY21wO1xyXG5leHBvcnRzLmlwdjZ0b2hleCA9IGlwdjZ0b2hleDtcclxuZXhwb3J0cy5oZXh0b2lwdjYgPSBoZXh0b2lwdjY7XHJcbmV4cG9ydHMuaGV4dG9pcCA9IGhleHRvaXA7XHJcbmV4cG9ydHMuaXB0b2hleCA9IGlwdG9oZXg7XHJcbmV4cG9ydHMuZW5jb2RlVVJJQ29tcG9uZW50QWxsID0gZW5jb2RlVVJJQ29tcG9uZW50QWxsO1xyXG5leHBvcnRzLm5ld2xpbmVfdG9Vbml4ID0gbmV3bGluZV90b1VuaXg7XHJcbmV4cG9ydHMubmV3bGluZV90b0RvcyA9IG5ld2xpbmVfdG9Eb3M7XHJcbmV4cG9ydHMuaGV4dG9wb3NoZXggPSBoZXh0b3Bvc2hleDtcclxuZXhwb3J0cy5pbnRhcnlzdHJ0b2hleCA9IGludGFyeXN0cnRvaGV4O1xyXG5leHBvcnRzLnN0cmRpZmZpZHggPSBzdHJkaWZmaWR4O1xyXG5cclxuLy8gbmFtZSBzcGFjZXNcclxuZXhwb3J0cy5LSlVSID0gS0pVUjtcclxuZXhwb3J0cy5jcnlwdG8gPSBLSlVSLmNyeXB0bztcclxuZXhwb3J0cy5hc24xID0gS0pVUi5hc24xO1xyXG5leHBvcnRzLmp3cyA9IEtKVVIuandzO1xyXG5leHBvcnRzLmxhbmcgPSBLSlVSLmxhbmc7XHJcblxyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanNyc2FzaWduL2Rpc3QvanNyc2FzaWduLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgeyBVcmxVdGlsaXR5IH0gZnJvbSAnLi9VcmxVdGlsaXR5JztcclxuaW1wb3J0IHsgU2lnbmluU3RhdGUgfSBmcm9tICcuL1NpZ25pblN0YXRlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTaWduaW5SZXF1ZXN0IHtcclxuICAgIGNvbnN0cnVjdG9yKHtcclxuICAgICAgICAvLyBtYW5kYXRvcnlcclxuICAgICAgICB1cmwsIGNsaWVudF9pZCwgcmVkaXJlY3RfdXJpLCByZXNwb25zZV90eXBlLCBzY29wZSwgYXV0aG9yaXR5LFxyXG4gICAgICAgIC8vIG9wdGlvbmFsXHJcbiAgICAgICAgZGF0YSwgcHJvbXB0LCBkaXNwbGF5LCBtYXhfYWdlLCB1aV9sb2NhbGVzLCBpZF90b2tlbl9oaW50LCBsb2dpbl9oaW50LCBhY3JfdmFsdWVzLCByZXNvdXJjZSxcclxuICAgICAgICByZXF1ZXN0LCByZXF1ZXN0X3VyaSwgZXh0cmFRdWVyeVBhcmFtcyxcclxuICAgIH0pIHtcclxuICAgICAgICBpZiAoIXVybCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJTaWduaW5SZXF1ZXN0LmN0b3I6IE5vIHVybCBwYXNzZWRcIik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVybFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFjbGllbnRfaWQpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiU2lnbmluUmVxdWVzdC5jdG9yOiBObyBjbGllbnRfaWQgcGFzc2VkXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjbGllbnRfaWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghcmVkaXJlY3RfdXJpKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNpZ25pblJlcXVlc3QuY3RvcjogTm8gcmVkaXJlY3RfdXJpIHBhc3NlZFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVkaXJlY3RfdXJpXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXJlc3BvbnNlX3R5cGUpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiU2lnbmluUmVxdWVzdC5jdG9yOiBObyByZXNwb25zZV90eXBlIHBhc3NlZFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVzcG9uc2VfdHlwZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFzY29wZSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJTaWduaW5SZXF1ZXN0LmN0b3I6IE5vIHNjb3BlIHBhc3NlZFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2NvcGVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghYXV0aG9yaXR5KSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNpZ25pblJlcXVlc3QuY3RvcjogTm8gYXV0aG9yaXR5IHBhc3NlZFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXV0aG9yaXR5XCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG9pZGMgPSBTaWduaW5SZXF1ZXN0LmlzT2lkYyhyZXNwb25zZV90eXBlKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0gbmV3IFNpZ25pblN0YXRlKHsgbm9uY2U6IG9pZGMsIGRhdGEsIGNsaWVudF9pZCwgYXV0aG9yaXR5IH0pO1xyXG5cclxuICAgICAgICB1cmwgPSBVcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0odXJsLCBcImNsaWVudF9pZFwiLCBjbGllbnRfaWQpO1xyXG4gICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwicmVkaXJlY3RfdXJpXCIsIHJlZGlyZWN0X3VyaSk7XHJcbiAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJyZXNwb25zZV90eXBlXCIsIHJlc3BvbnNlX3R5cGUpO1xyXG4gICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwic2NvcGVcIiwgc2NvcGUpO1xyXG5cclxuICAgICAgICB1cmwgPSBVcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0odXJsLCBcInN0YXRlXCIsIHRoaXMuc3RhdGUuaWQpO1xyXG4gICAgICAgIGlmIChvaWRjKSB7XHJcbiAgICAgICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwibm9uY2VcIiwgdGhpcy5zdGF0ZS5ub25jZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0aW9uYWwgPSB7IHByb21wdCwgZGlzcGxheSwgbWF4X2FnZSwgdWlfbG9jYWxlcywgaWRfdG9rZW5faGludCwgbG9naW5faGludCwgYWNyX3ZhbHVlcywgcmVzb3VyY2UsIHJlcXVlc3QsIHJlcXVlc3RfdXJpIH07XHJcbiAgICAgICAgZm9yKGxldCBrZXkgaW4gb3B0aW9uYWwpe1xyXG4gICAgICAgICAgICBpZiAob3B0aW9uYWxba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwga2V5LCBvcHRpb25hbFtrZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yKGxldCBrZXkgaW4gZXh0cmFRdWVyeVBhcmFtcyl7XHJcbiAgICAgICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIGtleSwgZXh0cmFRdWVyeVBhcmFtc1trZXldKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGlzT2lkYyhyZXNwb25zZV90eXBlKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlc3BvbnNlX3R5cGUuc3BsaXQoL1xccysvZykuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW0gPT09IFwiaWRfdG9rZW5cIjtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gISEocmVzdWx0WzBdKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaXNPQXV0aChyZXNwb25zZV90eXBlKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlc3BvbnNlX3R5cGUuc3BsaXQoL1xccysvZykuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW0gPT09IFwidG9rZW5cIjtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gISEocmVzdWx0WzBdKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvU2lnbmluUmVxdWVzdC5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9HbG9iYWwnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVybFV0aWxpdHkge1xyXG4gICAgc3RhdGljIGFkZFF1ZXJ5UGFyYW0odXJsLCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh1cmwuaW5kZXhPZignPycpIDwgMCkge1xyXG4gICAgICAgICAgICB1cmwgKz0gXCI/XCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodXJsW3VybC5sZW5ndGggLSAxXSAhPT0gXCI/XCIpIHtcclxuICAgICAgICAgICAgdXJsICs9IFwiJlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXJsICs9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKTtcclxuICAgICAgICB1cmwgKz0gXCI9XCI7XHJcbiAgICAgICAgdXJsICs9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XHJcblxyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHBhcnNlVXJsRnJhZ21lbnQodmFsdWUsIGRlbGltaXRlciA9IFwiI1wiLCBnbG9iYWwgPSBHbG9iYWwpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyl7XHJcbiAgICAgICAgICAgIHZhbHVlID0gZ2xvYmFsLmxvY2F0aW9uLmhyZWY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaWR4ID0gdmFsdWUubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcclxuICAgICAgICBpZiAoaWR4ID49IDApIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIoaWR4ICsgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcGFyYW1zID0ge30sXHJcbiAgICAgICAgICAgIHJlZ2V4ID0gLyhbXiY9XSspPShbXiZdKikvZyxcclxuICAgICAgICAgICAgbTtcclxuXHJcbiAgICAgICAgdmFyIGNvdW50ZXIgPSAwO1xyXG4gICAgICAgIHdoaWxlIChtID0gcmVnZXguZXhlYyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcGFyYW1zW2RlY29kZVVSSUNvbXBvbmVudChtWzFdKV0gPSBkZWNvZGVVUklDb21wb25lbnQobVsyXSk7XHJcbiAgICAgICAgICAgIGlmIChjb3VudGVyKysgPiA1MCkge1xyXG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiVXJsVXRpbGl0eS5wYXJzZVVybEZyYWdtZW50OiByZXNwb25zZSBleGNlZWRlZCBleHBlY3RlZCBudW1iZXIgb2YgcGFyYW1ldGVyc1wiLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBcIlJlc3BvbnNlIGV4Y2VlZGVkIGV4cGVjdGVkIG51bWJlciBvZiBwYXJhbWV0ZXJzXCJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gcGFyYW1zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJhbXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1VybFV0aWxpdHkuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi9TdGF0ZSc7XHJcbmltcG9ydCByYW5kb20gZnJvbSAnLi9yYW5kb20nO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNpZ25pblN0YXRlIGV4dGVuZHMgU3RhdGUge1xyXG4gICAgY29uc3RydWN0b3Ioe25vbmNlLCBhdXRob3JpdHksIGNsaWVudF9pZH0gPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKGFyZ3VtZW50c1swXSk7XHJcblxyXG4gICAgICAgIGlmIChub25jZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9ub25jZSA9IHJhbmRvbSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChub25jZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9ub25jZSA9IG5vbmNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYXV0aG9yaXR5ID0gYXV0aG9yaXR5O1xyXG4gICAgICAgIHRoaXMuX2NsaWVudF9pZCA9IGNsaWVudF9pZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbm9uY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vbmNlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGF1dGhvcml0eSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYXV0aG9yaXR5O1xyXG4gICAgfVxyXG4gICAgZ2V0IGNsaWVudF9pZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50X2lkO1xyXG4gICAgfVxyXG5cclxuICAgIHRvU3RvcmFnZVN0cmluZygpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJTaWduaW5TdGF0ZS50b1N0b3JhZ2VTdHJpbmdcIik7XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXHJcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuZGF0YSxcclxuICAgICAgICAgICAgY3JlYXRlZDogdGhpcy5jcmVhdGVkLFxyXG4gICAgICAgICAgICBub25jZTogdGhpcy5ub25jZSxcclxuICAgICAgICAgICAgYXV0aG9yaXR5OiB0aGlzLmF1dGhvcml0eSxcclxuICAgICAgICAgICAgY2xpZW50X2lkOiB0aGlzLmNsaWVudF9pZFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmcm9tU3RvcmFnZVN0cmluZyhzdG9yYWdlU3RyaW5nKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiU2lnbmluU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmdcIik7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHN0b3JhZ2VTdHJpbmcpO1xyXG4gICAgICAgIHJldHVybiBuZXcgU2lnbmluU3RhdGUoZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1NpZ25pblN0YXRlLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgcmFuZG9tIGZyb20gJy4vcmFuZG9tJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTdGF0ZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7aWQsIGRhdGEsIGNyZWF0ZWR9ID0ge30pIHtcclxuICAgICAgICB0aGlzLl9pZCA9IGlkIHx8IHJhbmRvbSgpO1xyXG4gICAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNyZWF0ZWQgPT09ICdudW1iZXInICYmIGNyZWF0ZWQgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZWQgPSBjcmVhdGVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlZCA9IHBhcnNlSW50KERhdGUubm93KCkgLyAxMDAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuICAgIGdldCBkYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNyZWF0ZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgdG9TdG9yYWdlU3RyaW5nKCkge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlN0YXRlLnRvU3RvcmFnZVN0cmluZ1wiKTtcclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcclxuICAgICAgICAgICAgZGF0YTogdGhpcy5kYXRhLFxyXG4gICAgICAgICAgICBjcmVhdGVkOiB0aGlzLmNyZWF0ZWRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmFnZVN0cmluZykge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlN0YXRlLmZyb21TdG9yYWdlU3RyaW5nXCIpO1xyXG4gICAgICAgIHJldHVybiBuZXcgU3RhdGUoSlNPTi5wYXJzZShzdG9yYWdlU3RyaW5nKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNsZWFyU3RhbGVTdGF0ZShzdG9yYWdlLCBhZ2UpIHtcclxuXHJcbiAgICAgICAgdmFyIGN1dG9mZiA9IERhdGUubm93KCkgLyAxMDAwIC0gYWdlO1xyXG5cclxuICAgICAgICByZXR1cm4gc3RvcmFnZS5nZXRBbGxLZXlzKCkudGhlbihrZXlzID0+IHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiU3RhdGUuY2xlYXJTdGFsZVN0YXRlOiBnb3Qga2V5c1wiLCBrZXlzKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBrZXkgPSBrZXlzW2ldO1xyXG4gICAgICAgICAgICAgICAgdmFyIHAgPSBzdG9yYWdlLmdldChrZXkpLnRoZW4oaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmcoaXRlbSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IGdvdCBpdGVtIGZyb20ga2V5OiBcIiwga2V5LCBzdGF0ZS5jcmVhdGVkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuY3JlYXRlZCA8PSBjdXRvZmYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IEVycm9yIHBhcnNpbmcgc3RhdGUgZm9yIGtleVwiLCBrZXksIGUubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IG5vIGl0ZW0gaW4gc3RvcmFnZSBmb3Iga2V5OiBcIiwga2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU3RhdGUuY2xlYXJTdGFsZVN0YXRlOiByZW1vdmVkIGl0ZW0gZm9yIGtleTogXCIsIGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdG9yYWdlLnJlbW92ZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2gocCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlN0YXRlLmNsZWFyU3RhbGVTdGF0ZTogd2FpdGluZyBvbiBwcm9taXNlIGNvdW50OlwiLCBwcm9taXNlcy5sZW5ndGgpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9TdGF0ZS5qcyIsIi8vIE5PVElDRTogdGhlIGNvZGUgaW4gdGhpcyBmaWxlIG9yaWdpbmFsbHkgZGV2ZWxvcGVkIGJ5IE1pY3Jvc29mdFxyXG4vLyBvcmlnaW5hbCBzb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9BenVyZUFEL2F6dXJlLWFjdGl2ZWRpcmVjdG9yeS1saWJyYXJ5LWZvci1qcy9ibG9iL21hc3Rlci9saWIvYWRhbC5qcyNMMTAyOVxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gQWRhbEpTIHYxLjAuOFxyXG4vLyBAcHJlc2VydmUgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgT3BlbiBUZWNobm9sb2dpZXMsIEluYy5cclxuLy8gQWxsIFJpZ2h0cyBSZXNlcnZlZFxyXG4vLyBBcGFjaGUgTGljZW5zZSAyLjBcclxuLy9cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuLy9cclxuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbi8vXHJcbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYW5kb20oKSB7XHJcbiAgICB2YXIgZ3VpZEhvbGRlciA9ICd4eHh4eHh4eHh4eHg0eHh4eXh4eHh4eHh4eHh4eHh4eCc7XHJcbiAgICB2YXIgaGV4ID0gJzAxMjM0NTY3ODlhYmNkZWYnO1xyXG4gICAgdmFyIHIgPSAwO1xyXG4gICAgdmFyIGd1aWRSZXNwb25zZSA9IFwiXCI7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGd1aWRIb2xkZXIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoZ3VpZEhvbGRlcltpXSAhPT0gJy0nICYmIGd1aWRIb2xkZXJbaV0gIT09ICc0Jykge1xyXG4gICAgICAgICAgICAvLyBlYWNoIHggYW5kIHkgbmVlZHMgdG8gYmUgcmFuZG9tXHJcbiAgICAgICAgICAgIHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGd1aWRIb2xkZXJbaV0gPT09ICd4Jykge1xyXG4gICAgICAgICAgICBndWlkUmVzcG9uc2UgKz0gaGV4W3JdO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZ3VpZEhvbGRlcltpXSA9PT0gJ3knKSB7XHJcbiAgICAgICAgICAgIC8vIGNsb2NrLXNlcS1hbmQtcmVzZXJ2ZWQgZmlyc3QgaGV4IGlzIGZpbHRlcmVkIGFuZCByZW1haW5pbmcgaGV4IHZhbHVlcyBhcmUgcmFuZG9tXHJcbiAgICAgICAgICAgIHIgJj0gMHgzOyAvLyBiaXQgYW5kIHdpdGggMDAxMSB0byBzZXQgcG9zIDIgdG8gemVybyA/MD8/XHJcbiAgICAgICAgICAgIHIgfD0gMHg4OyAvLyBzZXQgcG9zIDMgdG8gMSBhcyAxPz8/XHJcbiAgICAgICAgICAgIGd1aWRSZXNwb25zZSArPSBoZXhbcl07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZ3VpZFJlc3BvbnNlICs9IGd1aWRIb2xkZXJbaV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGd1aWRSZXNwb25zZTtcclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9yYW5kb20uanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBVcmxVdGlsaXR5IH0gZnJvbSAnLi9VcmxVdGlsaXR5JztcclxuXHJcbmNvbnN0IE9pZGNTY29wZSA9IFwib3BlbmlkXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2lnbmluUmVzcG9uc2Uge1xyXG4gICAgY29uc3RydWN0b3IodXJsKSB7XHJcblxyXG4gICAgICAgIHZhciB2YWx1ZXMgPSBVcmxVdGlsaXR5LnBhcnNlVXJsRnJhZ21lbnQodXJsLCBcIiNcIik7XHJcblxyXG4gICAgICAgIHRoaXMuZXJyb3IgPSB2YWx1ZXMuZXJyb3I7XHJcbiAgICAgICAgdGhpcy5lcnJvcl9kZXNjcmlwdGlvbiA9IHZhbHVlcy5lcnJvcl9kZXNjcmlwdGlvbjtcclxuICAgICAgICB0aGlzLmVycm9yX3VyaSA9IHZhbHVlcy5lcnJvcl91cmk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB2YWx1ZXMuc3RhdGU7XHJcbiAgICAgICAgdGhpcy5pZF90b2tlbiA9IHZhbHVlcy5pZF90b2tlbjtcclxuICAgICAgICB0aGlzLnNlc3Npb25fc3RhdGUgPSB2YWx1ZXMuc2Vzc2lvbl9zdGF0ZTtcclxuICAgICAgICB0aGlzLmFjY2Vzc190b2tlbiA9IHZhbHVlcy5hY2Nlc3NfdG9rZW47XHJcbiAgICAgICAgdGhpcy50b2tlbl90eXBlID0gdmFsdWVzLnRva2VuX3R5cGU7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHZhbHVlcy5zY29wZTtcclxuICAgICAgICB0aGlzLnByb2ZpbGUgPSB1bmRlZmluZWQ7IC8vIHdpbGwgYmUgc2V0IGZyb20gUmVzcG9uc2VWYWxpZGF0b3JcclxuXHJcbiAgICAgICAgbGV0IGV4cGlyZXNfaW4gPSBwYXJzZUludCh2YWx1ZXMuZXhwaXJlc19pbik7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBleHBpcmVzX2luID09PSAnbnVtYmVyJyAmJiBleHBpcmVzX2luID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgbm93ID0gcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xyXG4gICAgICAgICAgICB0aGlzLmV4cGlyZXNfYXQgPSBub3cgKyBleHBpcmVzX2luO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgZXhwaXJlc19pbigpIHtcclxuICAgICAgICBpZiAodGhpcy5leHBpcmVzX2F0KSB7XHJcbiAgICAgICAgICAgIGxldCBub3cgPSBwYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cGlyZXNfYXQgLSBub3c7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGV4cGlyZWQoKSB7XHJcbiAgICAgICAgbGV0IGV4cGlyZXNfaW4gPSB0aGlzLmV4cGlyZXNfaW47XHJcbiAgICAgICAgaWYgKGV4cGlyZXNfaW4gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwaXJlc19pbiA8PSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzY29wZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnNjb3BlIHx8IFwiXCIpLnNwbGl0KFwiIFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNPcGVuSWRDb25uZWN0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNjb3Blcy5pbmRleE9mKE9pZGNTY29wZSkgPj0gMCB8fCAhIXRoaXMuaWRfdG9rZW47XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1NpZ25pblJlc3BvbnNlLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgeyBVcmxVdGlsaXR5IH0gZnJvbSAnLi9VcmxVdGlsaXR5JztcclxuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL1N0YXRlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTaWdub3V0UmVxdWVzdCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7dXJsLCBpZF90b2tlbl9oaW50LCBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksIGRhdGF9KSB7XHJcbiAgICAgICAgaWYgKCF1cmwpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiU2lnbm91dFJlcXVlc3QuY3RvcjogTm8gdXJsIHBhc3NlZFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXJsXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlkX3Rva2VuX2hpbnQpIHtcclxuICAgICAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJpZF90b2tlbl9oaW50XCIsIGlkX3Rva2VuX2hpbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSkge1xyXG4gICAgICAgICAgICB1cmwgPSBVcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0odXJsLCBcInBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaVwiLCBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBuZXcgU3RhdGUoeyBkYXRhIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwic3RhdGVcIiwgdGhpcy5zdGF0ZS5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9TaWdub3V0UmVxdWVzdC5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IFVybFV0aWxpdHkgfSBmcm9tICcuL1VybFV0aWxpdHknO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNpZ25vdXRSZXNwb25zZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih1cmwpIHtcclxuXHJcbiAgICAgICAgdmFyIHZhbHVlcyA9IFVybFV0aWxpdHkucGFyc2VVcmxGcmFnbWVudCh1cmwsIFwiP1wiKTtcclxuXHJcbiAgICAgICAgdGhpcy5lcnJvciA9IHZhbHVlcy5lcnJvcjtcclxuICAgICAgICB0aGlzLmVycm9yX2Rlc2NyaXB0aW9uID0gdmFsdWVzLmVycm9yX2Rlc2NyaXB0aW9uO1xyXG4gICAgICAgIHRoaXMuZXJyb3JfdXJpID0gdmFsdWVzLmVycm9yX3VyaTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHZhbHVlcy5zdGF0ZTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvU2lnbm91dFJlc3BvbnNlLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEluTWVtb3J5V2ViU3RvcmFnZXtcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIGdldEl0ZW0oa2V5KSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiSW5NZW1vcnlXZWJTdG9yYWdlLmdldEl0ZW1cIiwga2V5KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVtrZXldO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEl0ZW0oa2V5LCB2YWx1ZSl7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiSW5NZW1vcnlXZWJTdG9yYWdlLnNldEl0ZW1cIiwga2V5KTtcclxuICAgICAgICB0aGlzLl9kYXRhW2tleV0gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVJdGVtKGtleSl7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiSW5NZW1vcnlXZWJTdG9yYWdlLnJlbW92ZUl0ZW1cIiwga2V5KTtcclxuICAgICAgICBkZWxldGUgdGhpcy5fZGF0YVtrZXldO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX2RhdGEpLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBrZXkoaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5fZGF0YSlbaW5kZXhdO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Jbk1lbW9yeVdlYlN0b3JhZ2UuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCB7IE9pZGNDbGllbnQgfSBmcm9tICcuL09pZGNDbGllbnQnO1xyXG5pbXBvcnQgeyBVc2VyTWFuYWdlclNldHRpbmdzIH0gZnJvbSAnLi9Vc2VyTWFuYWdlclNldHRpbmdzJztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vVXNlcic7XHJcbmltcG9ydCB7IFVzZXJNYW5hZ2VyRXZlbnRzIH0gZnJvbSAnLi9Vc2VyTWFuYWdlckV2ZW50cyc7XHJcbmltcG9ydCB7IFNpbGVudFJlbmV3U2VydmljZSB9IGZyb20gJy4vU2lsZW50UmVuZXdTZXJ2aWNlJztcclxuaW1wb3J0IHsgU2Vzc2lvbk1vbml0b3IgfSBmcm9tICcuL1Nlc3Npb25Nb25pdG9yJztcclxuaW1wb3J0IHsgVG9rZW5SZXZvY2F0aW9uQ2xpZW50IH0gZnJvbSAnLi9Ub2tlblJldm9jYXRpb25DbGllbnQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXJNYW5hZ2VyIGV4dGVuZHMgT2lkY0NsaWVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncyA9IHt9LFxyXG4gICAgICAgIFNpbGVudFJlbmV3U2VydmljZUN0b3IgPSBTaWxlbnRSZW5ld1NlcnZpY2UsXHJcbiAgICAgICAgU2Vzc2lvbk1vbml0b3JDdG9yID0gU2Vzc2lvbk1vbml0b3IsXHJcbiAgICAgICAgVG9rZW5SZXZvY2F0aW9uQ2xpZW50Q3RvciA9IFRva2VuUmV2b2NhdGlvbkNsaWVudFxyXG4gICAgKSB7XHJcblxyXG4gICAgICAgIGlmICghKHNldHRpbmdzIGluc3RhbmNlb2YgVXNlck1hbmFnZXJTZXR0aW5ncykpIHtcclxuICAgICAgICAgICAgc2V0dGluZ3MgPSBuZXcgVXNlck1hbmFnZXJTZXR0aW5ncyhzZXR0aW5ncyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyKHNldHRpbmdzKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IFVzZXJNYW5hZ2VyRXZlbnRzKHNldHRpbmdzKTtcclxuICAgICAgICB0aGlzLl9zaWxlbnRSZW5ld1NlcnZpY2UgPSBuZXcgU2lsZW50UmVuZXdTZXJ2aWNlQ3Rvcih0aGlzKTtcclxuXHJcbiAgICAgICAgLy8gb3JkZXIgaXMgaW1wb3J0YW50IGZvciB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM7IHRoZXNlIHNlcnZpY2VzIGRlcGVuZCB1cG9uIHRoZSBldmVudHMuXHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYXV0b21hdGljU2lsZW50UmVuZXcpIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuY3RvcjogYXV0b21hdGljU2lsZW50UmVuZXcgaXMgY29uZmlndXJlZCwgc2V0dGluZyB1cCBzaWxlbnQgcmVuZXdcIik7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRTaWxlbnRSZW5ldygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubW9uaXRvclNlc3Npb24pIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuY3RvcjogbW9uaXRvclNlc3Npb24gaXMgY29uZmlndXJlZCwgc2V0dGluZyB1cCBzZXNzaW9uIG1vbml0b3JcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3Nlc3Npb25Nb25pdG9yID0gbmV3IFNlc3Npb25Nb25pdG9yQ3Rvcih0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3Rva2VuUmV2b2NhdGlvbkNsaWVudCA9IG5ldyBUb2tlblJldm9jYXRpb25DbGllbnRDdG9yKHRoaXMuX3NldHRpbmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgX3JlZGlyZWN0TmF2aWdhdG9yKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnJlZGlyZWN0TmF2aWdhdG9yO1xyXG4gICAgfVxyXG4gICAgZ2V0IF9wb3B1cE5hdmlnYXRvcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5wb3B1cE5hdmlnYXRvcjtcclxuICAgIH1cclxuICAgIGdldCBfaWZyYW1lTmF2aWdhdG9yKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmlmcmFtZU5hdmlnYXRvcjtcclxuICAgIH1cclxuICAgIGdldCBfdXNlclN0b3JlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnVzZXJTdG9yZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZXZlbnRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXNlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZFVzZXIoKS50aGVuKHVzZXIgPT4ge1xyXG4gICAgICAgICAgICBpZiAodXNlcikge1xyXG4gICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5nZXRVc2VyOiB1c2VyIGxvYWRlZFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMubG9hZCh1c2VyLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLmdldFVzZXI6IHVzZXIgbm90IGZvdW5kIGluIHN0b3JhZ2VcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZVVzZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmVVc2VyKG51bGwpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnJlbW92ZVVzZXI6IHVzZXIgcmVtb3ZlZCBmcm9tIHN0b3JhZ2VcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cy51bmxvYWQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzaWduaW5SZWRpcmVjdChhcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pblN0YXJ0KGFyZ3MsIHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yKS50aGVuKCgpPT57XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUmVkaXJlY3Q6IHN1Y2Nlc3NmdWxcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzaWduaW5SZWRpcmVjdENhbGxiYWNrKHVybCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5FbmQodXJsIHx8IHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yLnVybCkudGhlbih1c2VyID0+IHtcclxuICAgICAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1c2VyLnByb2ZpbGUgJiYgdXNlci5wcm9maWxlLnN1Yikge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUmVkaXJlY3RDYWxsYmFjazogc3VjY2Vzc2Z1bCwgc2lnbmVkIGluIHN1YjogXCIsIHVzZXIucHJvZmlsZS5zdWIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5SZWRpcmVjdENhbGxiYWNrOiBubyBzdWJcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB1c2VyO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNpZ25pblBvcHVwKGFyZ3MgPSB7fSkge1xyXG4gICAgICAgIGxldCB1cmwgPSBhcmdzLnJlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnBvcHVwX3JlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnJlZGlyZWN0X3VyaTtcclxuICAgICAgICBpZiAoIXVybCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cDogTm8gcG9wdXBfcmVkaXJlY3RfdXJpIG9yIHJlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gcG9wdXBfcmVkaXJlY3RfdXJpIG9yIHJlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFyZ3MucmVkaXJlY3RfdXJpID0gdXJsO1xyXG4gICAgICAgIGFyZ3MuZGlzcGxheSA9IFwicG9wdXBcIjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pbihhcmdzLCB0aGlzLl9wb3B1cE5hdmlnYXRvciwge1xyXG4gICAgICAgICAgICBzdGFydFVybDogdXJsLFxyXG4gICAgICAgICAgICBwb3B1cFdpbmRvd0ZlYXR1cmVzOiBhcmdzLnBvcHVwV2luZG93RmVhdHVyZXMgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cFdpbmRvd0ZlYXR1cmVzLFxyXG4gICAgICAgICAgICBwb3B1cFdpbmRvd1RhcmdldDogYXJncy5wb3B1cFdpbmRvd1RhcmdldCB8fCB0aGlzLnNldHRpbmdzLnBvcHVwV2luZG93VGFyZ2V0XHJcbiAgICAgICAgfSkudGhlbih1c2VyID0+IHtcclxuICAgICAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1c2VyLnByb2ZpbGUgJiYgdXNlci5wcm9maWxlLnN1Yikge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUG9wdXA6IHNpZ25pblBvcHVwIHN1Y2Nlc3NmdWwsIHNpZ25lZCBpbiBzdWI6IFwiLCB1c2VyLnByb2ZpbGUuc3ViKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUG9wdXA6IG5vIHN1YlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzaWduaW5Qb3B1cENhbGxiYWNrKHVybCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5DYWxsYmFjayh1cmwsIHRoaXMuX3BvcHVwTmF2aWdhdG9yKS50aGVuKHVzZXIgPT4ge1xyXG4gICAgICAgICAgICBpZiAodXNlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHVzZXIucHJvZmlsZSAmJiB1c2VyLnByb2ZpbGUuc3ViKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cENhbGxiYWNrOiBzdWNjZXNzZnVsLCBzaWduZWQgaW4gc3ViOiBcIiwgdXNlci5wcm9maWxlLnN1Yik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblBvcHVwQ2FsbGJhY2s6IG5vIHN1YlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICAgICAgfSkuY2F0Y2goZXJyPT57XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJNYW5hZ2VyLnNpZ25pblBvcHVwQ2FsbGJhY2sgZXJyb3I6IFwiICsgZXJyICYmIGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2lnbmluU2lsZW50KGFyZ3MgPSB7fSkge1xyXG4gICAgICAgIGxldCB1cmwgPSBhcmdzLnJlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnNpbGVudF9yZWRpcmVjdF91cmk7XHJcbiAgICAgICAgaWYgKCF1cmwpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlck1hbmFnZXIuc2lnbmluU2lsZW50OiBObyBzaWxlbnRfcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBzaWxlbnRfcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXJncy5yZWRpcmVjdF91cmkgPSB1cmw7XHJcbiAgICAgICAgYXJncy5wcm9tcHQgPSBcIm5vbmVcIjtcclxuXHJcbiAgICAgICAgbGV0IHNldElkVG9rZW47XHJcbiAgICAgICAgaWYgKGFyZ3MuaWRfdG9rZW5faGludCB8fCAhdGhpcy5zZXR0aW5ncy5pbmNsdWRlSWRUb2tlbkluU2lsZW50UmVuZXcpIHtcclxuICAgICAgICAgICAgc2V0SWRUb2tlbiA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2V0SWRUb2tlbiA9IHRoaXMuX2xvYWRVc2VyKCkudGhlbih1c2VyID0+IHtcclxuICAgICAgICAgICAgICAgIGFyZ3MuaWRfdG9rZW5faGludCA9IHVzZXIgJiYgdXNlci5pZF90b2tlbjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2V0SWRUb2tlbi50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pbihhcmdzLCB0aGlzLl9pZnJhbWVOYXZpZ2F0b3IsIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0VXJsOiB1cmwsXHJcbiAgICAgICAgICAgICAgICBzaWxlbnRSZXF1ZXN0VGltZW91dDogYXJncy5zaWxlbnRSZXF1ZXN0VGltZW91dCB8fCB0aGlzLnNldHRpbmdzLnNpbGVudFJlcXVlc3RUaW1lb3V0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pLnRoZW4odXNlciA9PiB7XHJcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXNlci5wcm9maWxlICYmIHVzZXIucHJvZmlsZS5zdWIpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblNpbGVudDogc3VjY2Vzc2Z1bCwgc2lnbmVkIGluIHN1YjogXCIsIHVzZXIucHJvZmlsZS5zdWIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5TaWxlbnQ6IG5vIHN1YlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzaWduaW5TaWxlbnRDYWxsYmFjayh1cmwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluQ2FsbGJhY2sodXJsLCB0aGlzLl9pZnJhbWVOYXZpZ2F0b3IpLnRoZW4odXNlciA9PiB7XHJcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXNlci5wcm9maWxlICYmIHVzZXIucHJvZmlsZS5zdWIpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblNpbGVudENhbGxiYWNrOiBzdWNjZXNzZnVsLCBzaWduZWQgaW4gc3ViOiBcIiwgdXNlci5wcm9maWxlLnN1Yik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblNpbGVudENhbGxiYWNrOiBubyBzdWJcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB1c2VyO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHF1ZXJ5U2Vzc2lvblN0YXR1cyhhcmdzID0ge30pIHtcclxuICAgICAgICBsZXQgdXJsID0gYXJncy5yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5zaWxlbnRfcmVkaXJlY3RfdXJpO1xyXG4gICAgICAgIGlmICghdXJsKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1czogTm8gc2lsZW50X3JlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gc2lsZW50X3JlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFyZ3MucmVkaXJlY3RfdXJpID0gdXJsO1xyXG4gICAgICAgIGFyZ3MucHJvbXB0ID0gXCJub25lXCI7XHJcbiAgICAgICAgYXJncy5yZXNwb25zZV90eXBlID0gXCJpZF90b2tlblwiO1xyXG4gICAgICAgIGFyZ3Muc2NvcGUgPSBcIm9wZW5pZFwiO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluU3RhcnQoYXJncywgdGhpcy5faWZyYW1lTmF2aWdhdG9yLCB7XHJcbiAgICAgICAgICAgIHN0YXJ0VXJsOiB1cmwsXHJcbiAgICAgICAgICAgIHNpbGVudFJlcXVlc3RUaW1lb3V0OiBhcmdzLnNpbGVudFJlcXVlc3RUaW1lb3V0IHx8IHRoaXMuc2V0dGluZ3Muc2lsZW50UmVxdWVzdFRpbWVvdXRcclxuICAgICAgICB9KS50aGVuKG5hdlJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc1NpZ25pblJlc3BvbnNlKG5hdlJlc3BvbnNlLnVybCkudGhlbihzaWduaW5SZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5xdWVyeVNlc3Npb25TdGF0dXM6IGdvdCBzaWduaW4gcmVzcG9uc2VcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNpZ25pblJlc3BvbnNlLnNlc3Npb25fc3RhdGUgJiYgc2lnbmluUmVzcG9uc2UucHJvZmlsZS5zdWIgJiYgc2lnbmluUmVzcG9uc2UucHJvZmlsZS5zaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1czogcXVlcnlTZXNzaW9uU3RhdHVzIHN1Y2Nlc3MgZm9yIHN1YjogXCIsICBzaWduaW5SZXNwb25zZS5wcm9maWxlLnN1Yik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbl9zdGF0ZTogc2lnbmluUmVzcG9uc2Uuc2Vzc2lvbl9zdGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViOiBzaWduaW5SZXNwb25zZS5wcm9maWxlLnN1YixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2lkOiBzaWduaW5SZXNwb25zZS5wcm9maWxlLnNpZFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcInF1ZXJ5U2Vzc2lvblN0YXR1cyBzdWNjZXNzZnVsLCB1c2VyIG5vdCBhdXRoZW50aWNhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBfc2lnbmluKGFyZ3MsIG5hdmlnYXRvciwgbmF2aWdhdG9yUGFyYW1zID0ge30pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluU3RhcnQoYXJncywgbmF2aWdhdG9yLCBuYXZpZ2F0b3JQYXJhbXMpLnRoZW4obmF2UmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluRW5kKG5hdlJlc3BvbnNlLnVybCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBfc2lnbmluU3RhcnQoYXJncywgbmF2aWdhdG9yLCBuYXZpZ2F0b3JQYXJhbXMgPSB7fSkge1xyXG5cclxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLnByZXBhcmUobmF2aWdhdG9yUGFyYW1zKS50aGVuKGhhbmRsZSA9PiB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWduaW5TdGFydDogZ290IG5hdmlnYXRvciB3aW5kb3cgaGFuZGxlXCIpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU2lnbmluUmVxdWVzdChhcmdzKS50aGVuKHNpZ25pblJlcXVlc3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pblN0YXJ0OiBnb3Qgc2lnbmluIHJlcXVlc3RcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgbmF2aWdhdG9yUGFyYW1zLnVybCA9IHNpZ25pblJlcXVlc3QudXJsO1xyXG4gICAgICAgICAgICAgICAgbmF2aWdhdG9yUGFyYW1zLmlkID0gc2lnbmluUmVxdWVzdC5zdGF0ZS5pZDtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlLm5hdmlnYXRlKG5hdmlnYXRvclBhcmFtcyk7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlLmNsb3NlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pblN0YXJ0OiBFcnJvciBhZnRlciBwcmVwYXJpbmcgbmF2aWdhdG9yLCBjbG9zaW5nIG5hdmlnYXRvciB3aW5kb3dcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX3NpZ25pbkVuZCh1cmwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzU2lnbmluUmVzcG9uc2UodXJsKS50aGVuKHNpZ25pblJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pbkVuZDogZ290IHNpZ25pbiByZXNwb25zZVwiKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB1c2VyID0gbmV3IFVzZXIoc2lnbmluUmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmVVc2VyKHVzZXIpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pbkVuZDogdXNlciBzdG9yZWRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLmxvYWQodXNlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX3NpZ25pbkNhbGxiYWNrKHVybCwgbmF2aWdhdG9yKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pbkNhbGxiYWNrXCIpO1xyXG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IuY2FsbGJhY2sodXJsKTtcclxuICAgIH1cclxuXHJcbiAgICBzaWdub3V0UmVkaXJlY3QoYXJncyA9IHt9KSB7XHJcbiAgICAgICAgbGV0IHBvc3RMb2dvdXRSZWRpcmVjdFVyaSA9IGFyZ3MucG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpIHx8IHRoaXMuc2V0dGluZ3MucG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO1xyXG4gICAgICAgIGlmIChwb3N0TG9nb3V0UmVkaXJlY3RVcmkpe1xyXG4gICAgICAgICAgICBhcmdzLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSA9IHBvc3RMb2dvdXRSZWRpcmVjdFVyaTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25vdXRTdGFydChhcmdzLCB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvcikudGhlbigoKT0+e1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25vdXRSZWRpcmVjdDogc3VjY2Vzc2Z1bFwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHNpZ25vdXRSZWRpcmVjdENhbGxiYWNrKHVybCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWdub3V0RW5kKHVybCB8fCB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvci51cmwpLnRoZW4ocmVzcG9uc2U9PntcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWdub3V0UmVkaXJlY3RDYWxsYmFjazogc3VjY2Vzc2Z1bFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNpZ25vdXRQb3B1cChhcmdzID0ge30pIHtcclxuICAgICAgICBsZXQgdXJsID0gYXJncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XHJcbiAgICAgICAgYXJncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgPSB1cmw7XHJcbiAgICAgICAgYXJncy5kaXNwbGF5ID0gXCJwb3B1cFwiO1xyXG4gICAgICAgIGlmIChhcmdzLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSl7XHJcbiAgICAgICAgICAgIC8vIHdlJ3JlIHB1dHRpbmcgYSBkdW1teSBlbnRyeSBpbiBoZXJlIGJlY2F1c2Ugd2VcclxuICAgICAgICAgICAgLy8gbmVlZCBhIHVuaXF1ZSBpZCBmcm9tIHRoZSBzdGF0ZSBmb3Igbm90aWZpY2F0aW9uXHJcbiAgICAgICAgICAgIC8vIHRvIHRoZSBwYXJlbnQgd2luZG93LCB3aGljaCBpcyBuZWNlc3NhcnkgaWYgd2VcclxuICAgICAgICAgICAgLy8gcGxhbiB0byByZXR1cm4gYmFjayB0byB0aGUgY2xpZW50IGFmdGVyIHNpZ25vdXRcclxuICAgICAgICAgICAgLy8gYW5kIHNvIHdlIGNhbiBjbG9zZSB0aGUgcG9wdXAgYWZ0ZXIgc2lnbm91dFxyXG4gICAgICAgICAgICBhcmdzLnN0YXRlID0gYXJncy5zdGF0ZSB8fCB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWdub3V0KGFyZ3MsIHRoaXMuX3BvcHVwTmF2aWdhdG9yLCB7XHJcbiAgICAgICAgICAgIHN0YXJ0VXJsOiB1cmwsXHJcbiAgICAgICAgICAgIHBvcHVwV2luZG93RmVhdHVyZXM6IGFyZ3MucG9wdXBXaW5kb3dGZWF0dXJlcyB8fCB0aGlzLnNldHRpbmdzLnBvcHVwV2luZG93RmVhdHVyZXMsXHJcbiAgICAgICAgICAgIHBvcHVwV2luZG93VGFyZ2V0OiBhcmdzLnBvcHVwV2luZG93VGFyZ2V0IHx8IHRoaXMuc2V0dGluZ3MucG9wdXBXaW5kb3dUYXJnZXRcclxuICAgICAgICB9KS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cDogc3VjY2Vzc2Z1bFwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHNpZ25vdXRQb3B1cENhbGxiYWNrKHVybCwga2VlcE9wZW4pIHtcclxuICAgICAgICBpZiAodHlwZW9mKGtlZXBPcGVuKSA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mKHVybCkgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICB1cmwgPSBudWxsO1xyXG4gICAgICAgICAgICBrZWVwT3BlbiA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZGVsaW1pdGVyID0gJz8nO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cE5hdmlnYXRvci5jYWxsYmFjayh1cmwsIGtlZXBPcGVuLCBkZWxpbWl0ZXIpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25vdXRQb3B1cENhbGxiYWNrOiBzdWNjZXNzZnVsXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF9zaWdub3V0KGFyZ3MsIG5hdmlnYXRvciwgbmF2aWdhdG9yUGFyYW1zID0ge30pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbm91dFN0YXJ0KGFyZ3MsIG5hdmlnYXRvciwgbmF2aWdhdG9yUGFyYW1zKS50aGVuKG5hdlJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25vdXRFbmQobmF2UmVzcG9uc2UudXJsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9zaWdub3V0U3RhcnQoYXJncyA9IHt9LCBuYXZpZ2F0b3IsIG5hdmlnYXRvclBhcmFtcyA9IHt9KSB7XHJcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5wcmVwYXJlKG5hdmlnYXRvclBhcmFtcykudGhlbihoYW5kbGUgPT4ge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbm91dFN0YXJ0OiBnb3QgbmF2aWdhdG9yIHdpbmRvdyBoYW5kbGVcIik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9hZFVzZXIoKS50aGVuKHVzZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25vdXRTdGFydDogbG9hZGVkIGN1cnJlbnQgdXNlciBmcm9tIHN0b3JhZ2VcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJldm9rZVByb21pc2UgPSB0aGlzLl9zZXR0aW5ncy5yZXZva2VBY2Nlc3NUb2tlbk9uU2lnbm91dCA/IHRoaXMuX3Jldm9rZUludGVybmFsKHVzZXIpIDogUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV2b2tlUHJvbWlzZS50aGVuKCgpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkX3Rva2VuID0gYXJncy5pZF90b2tlbl9oaW50IHx8IHVzZXIgJiYgdXNlci5pZF90b2tlbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaWRfdG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25vdXRTdGFydDogU2V0dGluZyBpZF90b2tlbiBpbnRvIHNpZ25vdXQgcmVxdWVzdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5pZF90b2tlbl9oaW50ID0gaWRfdG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVVc2VyKCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWdub3V0U3RhcnQ6IHVzZXIgcmVtb3ZlZCwgY3JlYXRpbmcgc2lnbm91dCByZXF1ZXN0XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU2lnbm91dFJlcXVlc3QoYXJncykudGhlbihzaWdub3V0UmVxdWVzdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbm91dFN0YXJ0OiBnb3Qgc2lnbm91dCByZXF1ZXN0XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvclBhcmFtcy51cmwgPSBzaWdub3V0UmVxdWVzdC51cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2lnbm91dFJlcXVlc3Quc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3JQYXJhbXMuaWQgPSBzaWdub3V0UmVxdWVzdC5zdGF0ZS5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUubmF2aWdhdGUobmF2aWdhdG9yUGFyYW1zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChoYW5kbGUuY2xvc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbm91dFN0YXJ0OiBFcnJvciBhZnRlciBwcmVwYXJpbmcgbmF2aWdhdG9yLCBjbG9zaW5nIG5hdmlnYXRvciB3aW5kb3dcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX3NpZ25vdXRFbmQodXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc1NpZ25vdXRSZXNwb25zZSh1cmwpLnRoZW4oc2lnbm91dFJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25vdXRFbmQ6IGdvdCBzaWdub3V0IHJlc3BvbnNlXCIpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHNpZ25vdXRSZXNwb25zZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXZva2VBY2Nlc3NUb2tlbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZFVzZXIoKS50aGVuKHVzZXIgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmV2b2tlSW50ZXJuYWwodXNlciwgdHJ1ZSkudGhlbihzdWNjZXNzID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIucmV2b2tlQWNjZXNzVG9rZW46IHJlbW92aW5nIHRva2VuIHByb3BlcnRpZXMgZnJvbSB1c2VyIGFuZCByZS1zdG9yaW5nXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1c2VyLmFjY2Vzc190b2tlbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlci5leHBpcmVzX2F0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB1c2VyLnRva2VuX3R5cGUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yZVVzZXIodXNlcikudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLnJldm9rZUFjY2Vzc1Rva2VuOiB1c2VyIHN0b3JlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLmxvYWQodXNlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pLnRoZW4oKCk9PntcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5yZXZva2VBY2Nlc3NUb2tlbjogYWNjZXNzIHRva2VuIHJldm9rZWQgc3VjY2Vzc2Z1bGx5XCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF9yZXZva2VJbnRlcm5hbCh1c2VyLCByZXF1aXJlZCkge1xyXG4gICAgICAgIHZhciBhY2Nlc3NfdG9rZW4gPSB1c2VyICYmIHVzZXIuYWNjZXNzX3Rva2VuO1xyXG5cclxuICAgICAgICAvLyBjaGVjayBmb3IgSldUIHZzLiByZWZlcmVuY2UgdG9rZW5cclxuICAgICAgICBpZiAoIWFjY2Vzc190b2tlbiB8fCBhY2Nlc3NfdG9rZW4uaW5kZXhPZignLicpID49IDApIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIucmV2b2tlQWNjZXNzVG9rZW46IG5vIG5lZWQgdG8gcmV2b2tlIGR1ZSB0byBubyB1c2VyLCB0b2tlbiwgb3IgSldUIGZvcm1hdFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdG9rZW5SZXZvY2F0aW9uQ2xpZW50LnJldm9rZShhY2Nlc3NfdG9rZW4sIHJlcXVpcmVkKS50aGVuKCgpID0+IHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0U2lsZW50UmVuZXcoKSB7XHJcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdTZXJ2aWNlLnN0YXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RvcFNpbGVudFJlbmV3KCkge1xyXG4gICAgICAgIHRoaXMuX3NpbGVudFJlbmV3U2VydmljZS5zdG9wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF91c2VyU3RvcmVLZXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIGB1c2VyOiR7dGhpcy5zZXR0aW5ncy5hdXRob3JpdHl9OiR7dGhpcy5zZXR0aW5ncy5jbGllbnRfaWR9YDtcclxuICAgIH1cclxuXHJcbiAgICBfbG9hZFVzZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJTdG9yZS5nZXQodGhpcy5fdXNlclN0b3JlS2V5KS50aGVuKHN0b3JhZ2VTdHJpbmcgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc3RvcmFnZVN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX2xvYWRVc2VyOiB1c2VyIHN0b3JhZ2VTdHJpbmcgbG9hZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVzZXIuZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmFnZVN0cmluZyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9sb2FkVXNlcjogbm8gdXNlciBzdG9yYWdlU3RyaW5nXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdG9yZVVzZXIodXNlcikge1xyXG4gICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLnN0b3JlVXNlcjogc3RvcmluZyB1c2VyXCIpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0b3JhZ2VTdHJpbmcgPSB1c2VyLnRvU3RvcmFnZVN0cmluZygpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlclN0b3JlLnNldCh0aGlzLl91c2VyU3RvcmVLZXksIHN0b3JhZ2VTdHJpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwic3RvcmVVc2VyLnN0b3JlVXNlcjogcmVtb3ZpbmcgdXNlclwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJTdG9yZS5yZW1vdmUodGhpcy5fdXNlclN0b3JlS2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1VzZXJNYW5hZ2VyLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgeyBPaWRjQ2xpZW50U2V0dGluZ3MgfSBmcm9tICcuL09pZGNDbGllbnRTZXR0aW5ncyc7XHJcbmltcG9ydCB7IFJlZGlyZWN0TmF2aWdhdG9yIH0gZnJvbSAnLi9SZWRpcmVjdE5hdmlnYXRvcic7XHJcbmltcG9ydCB7IFBvcHVwTmF2aWdhdG9yIH0gZnJvbSAnLi9Qb3B1cE5hdmlnYXRvcic7XHJcbmltcG9ydCB7IElGcmFtZU5hdmlnYXRvciB9IGZyb20gJy4vSUZyYW1lTmF2aWdhdG9yJztcclxuaW1wb3J0IHsgV2ViU3RvcmFnZVN0YXRlU3RvcmUgfSBmcm9tICcuL1dlYlN0b3JhZ2VTdGF0ZVN0b3JlJztcclxuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9HbG9iYWwnO1xyXG5cclxuY29uc3QgRGVmYXVsdEFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lID0gNjA7XHJcbmNvbnN0IERlZmF1bHRDaGVja1Nlc3Npb25JbnRlcnZhbCA9IDIwMDA7XHJcblxyXG5leHBvcnQgY2xhc3MgVXNlck1hbmFnZXJTZXR0aW5ncyBleHRlbmRzIE9pZGNDbGllbnRTZXR0aW5ncyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7XHJcbiAgICAgICAgcG9wdXBfcmVkaXJlY3RfdXJpLFxyXG4gICAgICAgIHBvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSxcclxuICAgICAgICBwb3B1cFdpbmRvd0ZlYXR1cmVzLFxyXG4gICAgICAgIHBvcHVwV2luZG93VGFyZ2V0LFxyXG4gICAgICAgIHNpbGVudF9yZWRpcmVjdF91cmksXHJcbiAgICAgICAgc2lsZW50UmVxdWVzdFRpbWVvdXQsXHJcbiAgICAgICAgYXV0b21hdGljU2lsZW50UmVuZXcgPSBmYWxzZSxcclxuICAgICAgICBpbmNsdWRlSWRUb2tlbkluU2lsZW50UmVuZXcgPSB0cnVlLFxyXG4gICAgICAgIG1vbml0b3JTZXNzaW9uID0gdHJ1ZSxcclxuICAgICAgICBjaGVja1Nlc3Npb25JbnRlcnZhbCA9IERlZmF1bHRDaGVja1Nlc3Npb25JbnRlcnZhbCxcclxuICAgICAgICBzdG9wQ2hlY2tTZXNzaW9uT25FcnJvciA9IHRydWUsXHJcbiAgICAgICAgcmV2b2tlQWNjZXNzVG9rZW5PblNpZ25vdXQgPSBmYWxzZSxcclxuICAgICAgICBhY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IERlZmF1bHRBY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSxcclxuICAgICAgICByZWRpcmVjdE5hdmlnYXRvciA9IG5ldyBSZWRpcmVjdE5hdmlnYXRvcigpLFxyXG4gICAgICAgIHBvcHVwTmF2aWdhdG9yID0gbmV3IFBvcHVwTmF2aWdhdG9yKCksXHJcbiAgICAgICAgaWZyYW1lTmF2aWdhdG9yID0gbmV3IElGcmFtZU5hdmlnYXRvcigpLFxyXG4gICAgICAgIHVzZXJTdG9yZSA9IG5ldyBXZWJTdG9yYWdlU3RhdGVTdG9yZSh7IHN0b3JlOiBHbG9iYWwuc2Vzc2lvblN0b3JhZ2UgfSlcclxuICAgIH0gPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKGFyZ3VtZW50c1swXSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3BvcHVwX3JlZGlyZWN0X3VyaSA9IHBvcHVwX3JlZGlyZWN0X3VyaTtcclxuICAgICAgICB0aGlzLl9wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgPSBwb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBXaW5kb3dGZWF0dXJlcyA9IHBvcHVwV2luZG93RmVhdHVyZXM7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBXaW5kb3dUYXJnZXQgPSBwb3B1cFdpbmRvd1RhcmdldDtcclxuXHJcbiAgICAgICAgdGhpcy5fc2lsZW50X3JlZGlyZWN0X3VyaSA9IHNpbGVudF9yZWRpcmVjdF91cmk7XHJcbiAgICAgICAgdGhpcy5fc2lsZW50UmVxdWVzdFRpbWVvdXQgPSBzaWxlbnRSZXF1ZXN0VGltZW91dDtcclxuICAgICAgICB0aGlzLl9hdXRvbWF0aWNTaWxlbnRSZW5ldyA9ICEhYXV0b21hdGljU2lsZW50UmVuZXc7XHJcbiAgICAgICAgdGhpcy5faW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3ID0gaW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3O1xyXG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lID0gYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWU7XHJcblxyXG4gICAgICAgIHRoaXMuX21vbml0b3JTZXNzaW9uID0gbW9uaXRvclNlc3Npb247XHJcbiAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSW50ZXJ2YWwgPSBjaGVja1Nlc3Npb25JbnRlcnZhbDtcclxuICAgICAgICB0aGlzLl9zdG9wQ2hlY2tTZXNzaW9uT25FcnJvciA9IHN0b3BDaGVja1Nlc3Npb25PbkVycm9yO1xyXG4gICAgICAgIHRoaXMuX3Jldm9rZUFjY2Vzc1Rva2VuT25TaWdub3V0ID0gcmV2b2tlQWNjZXNzVG9rZW5PblNpZ25vdXQ7XHJcblxyXG4gICAgICAgIHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yID0gcmVkaXJlY3ROYXZpZ2F0b3I7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBOYXZpZ2F0b3IgPSBwb3B1cE5hdmlnYXRvcjtcclxuICAgICAgICB0aGlzLl9pZnJhbWVOYXZpZ2F0b3IgPSBpZnJhbWVOYXZpZ2F0b3I7XHJcblxyXG4gICAgICAgIHRoaXMuX3VzZXJTdG9yZSA9IHVzZXJTdG9yZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcG9wdXBfcmVkaXJlY3RfdXJpKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cF9yZWRpcmVjdF91cmk7XHJcbiAgICB9XHJcbiAgICBnZXQgcG9wdXBfcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XHJcbiAgICB9XHJcbiAgICBnZXQgcG9wdXBXaW5kb3dGZWF0dXJlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBXaW5kb3dGZWF0dXJlcztcclxuICAgIH1cclxuICAgIGdldCBwb3B1cFdpbmRvd1RhcmdldCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBXaW5kb3dUYXJnZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNpbGVudF9yZWRpcmVjdF91cmkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpbGVudF9yZWRpcmVjdF91cmk7XHJcbiAgICB9XHJcbiAgICAgZ2V0IHNpbGVudFJlcXVlc3RUaW1lb3V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWxlbnRSZXF1ZXN0VGltZW91dDtcclxuICAgIH1cclxuICAgIGdldCBhdXRvbWF0aWNTaWxlbnRSZW5ldygpIHtcclxuICAgICAgICByZXR1cm4gISEodGhpcy5zaWxlbnRfcmVkaXJlY3RfdXJpICYmIHRoaXMuX2F1dG9tYXRpY1NpbGVudFJlbmV3KTtcclxuICAgIH1cclxuICAgIGdldCBpbmNsdWRlSWRUb2tlbkluU2lsZW50UmVuZXcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luY2x1ZGVJZFRva2VuSW5TaWxlbnRSZW5ldztcclxuICAgIH1cclxuICAgIGdldCBhY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1vbml0b3JTZXNzaW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tb25pdG9yU2Vzc2lvbjtcclxuICAgIH1cclxuICAgIGdldCBjaGVja1Nlc3Npb25JbnRlcnZhbCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tTZXNzaW9uSW50ZXJ2YWw7XHJcbiAgICB9XHJcbiAgICBnZXQgc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3IoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3I7XHJcbiAgICB9XHJcbiAgICBnZXQgcmV2b2tlQWNjZXNzVG9rZW5PblNpZ25vdXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jldm9rZUFjY2Vzc1Rva2VuT25TaWdub3V0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCByZWRpcmVjdE5hdmlnYXRvcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVkaXJlY3ROYXZpZ2F0b3I7XHJcbiAgICB9XHJcbiAgICBnZXQgcG9wdXBOYXZpZ2F0b3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvcHVwTmF2aWdhdG9yO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlmcmFtZU5hdmlnYXRvcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWZyYW1lTmF2aWdhdG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB1c2VyU3RvcmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJTdG9yZTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvVXNlck1hbmFnZXJTZXR0aW5ncy5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuXHJcbmV4cG9ydCBjbGFzcyBSZWRpcmVjdE5hdmlnYXRvciB7XHJcblxyXG4gICAgcHJlcGFyZSgpIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIG5hdmlnYXRlKHBhcmFtcykge1xyXG4gICAgICAgIGlmICghcGFyYW1zIHx8ICFwYXJhbXMudXJsKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlZGlyZWN0TmF2aWdhdG9yLm5hdmlnYXRlOiBObyB1cmwgcHJvdmlkZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyB1cmwgcHJvdmlkZWRcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uID0gcGFyYW1zLnVybDtcclxuXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB1cmwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9SZWRpcmVjdE5hdmlnYXRvci5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgUG9wdXBXaW5kb3cgfSBmcm9tICcuL1BvcHVwV2luZG93JztcclxuXHJcbmV4cG9ydCBjbGFzcyBQb3B1cE5hdmlnYXRvciB7XHJcblxyXG4gICAgcHJlcGFyZShwYXJhbXMpIHtcclxuICAgICAgICBsZXQgcG9wdXAgPSBuZXcgUG9wdXBXaW5kb3cocGFyYW1zKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHBvcHVwKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxsYmFjayh1cmwsIGtlZXBPcGVuLCBkZWxpbWl0ZXIpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJQb3B1cE5hdmlnYXRvci5jYWxsYmFja1wiKTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgUG9wdXBXaW5kb3cubm90aWZ5T3BlbmVyKHVybCwga2VlcE9wZW4sIGRlbGltaXRlcik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvUG9wdXBOYXZpZ2F0b3IuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCB7IFVybFV0aWxpdHkgfSBmcm9tICcuL1VybFV0aWxpdHknO1xyXG5cclxuY29uc3QgQ2hlY2tGb3JQb3B1cENsb3NlZEludGVydmFsID0gNTAwO1xyXG5jb25zdCBEZWZhdWx0UG9wdXBGZWF0dXJlcyA9ICdsb2NhdGlvbj1ubyx0b29sYmFyPW5vLHdpZHRoPTUwMCxoZWlnaHQ9NTAwLGxlZnQ9MTAwLHRvcD0xMDA7JztcclxuLy9jb25zdCBEZWZhdWx0UG9wdXBGZWF0dXJlcyA9ICdsb2NhdGlvbj1ubyx0b29sYmFyPW5vLHdpZHRoPTUwMCxoZWlnaHQ9NTAwLGxlZnQ9MTAwLHRvcD0xMDA7cmVzaXphYmxlPXllcyc7XHJcblxyXG5jb25zdCBEZWZhdWx0UG9wdXBUYXJnZXQgPSBcIl9ibGFua1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvcHVwV2luZG93IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcclxuICAgICAgICB0aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgdGhpcy5fcmVqZWN0ID0gcmVqZWN0O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgdGFyZ2V0ID0gcGFyYW1zLnBvcHVwV2luZG93VGFyZ2V0IHx8IERlZmF1bHRQb3B1cFRhcmdldDtcclxuICAgICAgICBsZXQgZmVhdHVyZXMgPSBwYXJhbXMucG9wdXBXaW5kb3dGZWF0dXJlcyB8fCBEZWZhdWx0UG9wdXBGZWF0dXJlcztcclxuXHJcbiAgICAgICAgdGhpcy5fcG9wdXAgPSB3aW5kb3cub3BlbignJywgdGFyZ2V0LCBmZWF0dXJlcyk7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcHVwKSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93LmN0b3I6IHBvcHVwIHN1Y2Nlc3NmdWxseSBjcmVhdGVkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9jaGVja0ZvclBvcHVwQ2xvc2VkVGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwodGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZC5iaW5kKHRoaXMpLCBDaGVja0ZvclBvcHVwQ2xvc2VkSW50ZXJ2YWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgcHJvbWlzZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcclxuICAgIH1cclxuXHJcbiAgICBuYXZpZ2F0ZShwYXJhbXMpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3BvcHVwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiUG9wdXBXaW5kb3cubmF2aWdhdGU6IEVycm9yIG9wZW5pbmcgcG9wdXAgd2luZG93XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghcGFyYW1zIHx8ICFwYXJhbXMudXJsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiUG9wdXBXaW5kb3cubmF2aWdhdGU6IG5vIHVybCBwcm92aWRlZFwiKTtcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IoXCJObyB1cmwgcHJvdmlkZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJQb3B1cFdpbmRvdy5uYXZpZ2F0ZTogU2V0dGluZyBVUkwgaW4gcG9wdXBcIik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9pZCA9IHBhcmFtcy5pZDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lkKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3dbXCJwb3B1cENhbGxiYWNrX1wiICsgcGFyYW1zLmlkXSA9IHRoaXMuX2NhbGxiYWNrLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLndpbmRvdy5sb2NhdGlvbiA9IHBhcmFtcy51cmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNlO1xyXG4gICAgfVxyXG5cclxuICAgIF9zdWNjZXNzKGRhdGEpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJQb3B1cFdpbmRvdy5jYWxsYmFjazogU3VjY2Vzc2Z1bCByZXNwb25zZSBmcm9tIHBvcHVwIHdpbmRvd1wiKTtcclxuXHJcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xyXG4gICAgICAgIHRoaXMuX3Jlc29sdmUoZGF0YSk7XHJcbiAgICB9XHJcbiAgICBfZXJyb3IobWVzc2FnZSkge1xyXG4gICAgICAgIExvZy5lcnJvcihcIlBvcHVwV2luZG93LmVycm9yOiBcIiwgbWVzc2FnZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xyXG4gICAgICAgIHRoaXMuX3JlamVjdChuZXcgRXJyb3IobWVzc2FnZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMuX2NsZWFudXAoZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIF9jbGVhbnVwKGtlZXBPcGVuKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiUG9wdXBXaW5kb3cuY2xlYW51cFwiKTtcclxuXHJcbiAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZFRpbWVyKTtcclxuICAgICAgICB0aGlzLl9jaGVja0ZvclBvcHVwQ2xvc2VkVGltZXIgPSBudWxsO1xyXG5cclxuICAgICAgICBkZWxldGUgd2luZG93W1wicG9wdXBDYWxsYmFja19cIiArIHRoaXMuX2lkXTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcHVwICYmICFrZWVwT3Blbikge1xyXG4gICAgICAgICAgICB0aGlzLl9wb3B1cC5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9wb3B1cCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgX2NoZWNrRm9yUG9wdXBDbG9zZWQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9wb3B1cCB8fCB0aGlzLl9wb3B1cC5jbG9zZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IoXCJQb3B1cCB3aW5kb3cgY2xvc2VkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfY2FsbGJhY2sodXJsLCBrZWVwT3Blbikge1xyXG4gICAgICAgIHRoaXMuX2NsZWFudXAoa2VlcE9wZW4pO1xyXG5cclxuICAgICAgICBpZiAodXJsKSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93LmNhbGxiYWNrIHN1Y2Nlc3NcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3N1Y2Nlc3MoeyB1cmw6IHVybCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93LmNhbGxiYWNrOiBJbnZhbGlkIHJlc3BvbnNlIGZyb20gcG9wdXBcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiSW52YWxpZCByZXNwb25zZSBmcm9tIHBvcHVwXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbm90aWZ5T3BlbmVyKHVybCwga2VlcE9wZW4sIGRlbGltaXRlcikge1xyXG4gICAgICAgIGlmICh3aW5kb3cub3BlbmVyKSB7XHJcbiAgICAgICAgICAgIHVybCA9IHVybCB8fCB3aW5kb3cubG9jYXRpb24uaHJlZjtcclxuICAgICAgICAgICAgaWYgKHVybCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBVcmxVdGlsaXR5LnBhcnNlVXJsRnJhZ21lbnQodXJsLCBkZWxpbWl0ZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBcInBvcHVwQ2FsbGJhY2tfXCIgKyBkYXRhLnN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IHdpbmRvdy5vcGVuZXJbbmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93Lm5vdGlmeU9wZW5lcjogcGFzc2luZyB1cmwgbWVzc2FnZSB0byBvcGVuZXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHVybCwga2VlcE9wZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLndhcm4oXCJQb3B1cFdpbmRvdy5ub3RpZnlPcGVuZXI6IG5vIG1hdGNoaW5nIGNhbGxiYWNrIGZvdW5kIG9uIG9wZW5lclwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cud2FybihcIlBvcHVwV2luZG93Lm5vdGlmeU9wZW5lcjogbm8gc3RhdGUgZm91bmQgaW4gcmVzcG9uc2UgdXJsXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBMb2cud2FybihcIlBvcHVwV2luZG93Lm5vdGlmeU9wZW5lcjogbm8gd2luZG93Lm9wZW5lci4gQ2FuJ3QgY29tcGxldGUgbm90aWZpY2F0aW9uLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1BvcHVwV2luZG93LmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgeyBJRnJhbWVXaW5kb3cgfSBmcm9tICcuL0lGcmFtZVdpbmRvdyc7XHJcblxyXG5leHBvcnQgY2xhc3MgSUZyYW1lTmF2aWdhdG9yIHtcclxuXHJcbiAgICBwcmVwYXJlKHBhcmFtcykge1xyXG4gICAgICAgIGxldCBmcmFtZSA9IG5ldyBJRnJhbWVXaW5kb3cocGFyYW1zKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZyYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxsYmFjayh1cmwpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJJRnJhbWVOYXZpZ2F0b3IuY2FsbGJhY2tcIik7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIElGcmFtZVdpbmRvdy5ub3RpZnlQYXJlbnQodXJsKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9JRnJhbWVOYXZpZ2F0b3IuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcblxyXG5jb25zdCBEZWZhdWx0VGltZW91dCA9IDEwMDAwO1xyXG5cclxuZXhwb3J0IGNsYXNzIElGcmFtZVdpbmRvdyB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XHJcbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdCA9IHJlamVjdDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fYm91bmRNZXNzYWdlRXZlbnQgPSB0aGlzLl9tZXNzYWdlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50LCBmYWxzZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2ZyYW1lID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XHJcblxyXG4gICAgICAgIC8vIHNob3RndW4gYXBwcm9hY2hcclxuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcclxuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgdGhpcy5fZnJhbWUuc3R5bGUud2lkdGggPSAwO1xyXG4gICAgICAgIHRoaXMuX2ZyYW1lLnN0eWxlLmhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2ZyYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBuYXZpZ2F0ZShwYXJhbXMpIHtcclxuICAgICAgICBpZiAoIXBhcmFtcyB8fCAhcGFyYW1zLnVybCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lcnJvcihcIk5vIHVybCBwcm92aWRlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB0aW1lb3V0ID0gcGFyYW1zLnNpbGVudFJlcXVlc3RUaW1lb3V0IHx8IERlZmF1bHRUaW1lb3V0O1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJJRnJhbWVXaW5kb3cubmF2aWdhdGU6IFVzaW5nIHRpbWVvdXQgb2Y6XCIsIHRpbWVvdXQpO1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuX3RpbWVvdXQuYmluZCh0aGlzKSwgdGltZW91dCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lLnNyYyA9IHBhcmFtcy51cmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwcm9taXNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xyXG4gICAgfVxyXG5cclxuICAgIF9zdWNjZXNzKGRhdGEpIHtcclxuICAgICAgICB0aGlzLl9jbGVhbnVwKCk7XHJcblxyXG4gICAgICAgIExvZy5kZWJ1ZyhcIklGcmFtZVdpbmRvdzogU3VjY2Vzc2Z1bCByZXNwb25zZSBmcm9tIGZyYW1lIHdpbmRvd1wiKTtcclxuICAgICAgICB0aGlzLl9yZXNvbHZlKGRhdGEpO1xyXG4gICAgfVxyXG4gICAgX2Vycm9yKG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLl9jbGVhbnVwKCk7XHJcblxyXG4gICAgICAgIExvZy5lcnJvcihtZXNzYWdlKTtcclxuICAgICAgICB0aGlzLl9yZWplY3QobmV3IEVycm9yKG1lc3NhZ2UpKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9jbGVhbnVwKCk7XHJcbiAgICB9XHJcblxyXG4gICAgX2NsZWFudXAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZyYW1lKSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIklGcmFtZVdpbmRvdzogY2xlYW51cFwiKTtcclxuXHJcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTtcclxuICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5fZnJhbWUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX3RpbWVvdXQoKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiSUZyYW1lV2luZG93LnRpbWVvdXRcIik7XHJcbiAgICAgICAgdGhpcy5fZXJyb3IoXCJGcmFtZSB3aW5kb3cgdGltZWQgb3V0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIF9tZXNzYWdlKGUpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJJRnJhbWVXaW5kb3cubWVzc2FnZVwiKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVyICYmXHJcbiAgICAgICAgICAgIGUub3JpZ2luID09PSB0aGlzLl9vcmlnaW4gJiZcclxuICAgICAgICAgICAgZS5zb3VyY2UgPT09IHRoaXMuX2ZyYW1lLmNvbnRlbnRXaW5kb3dcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgbGV0IHVybCA9IGUuZGF0YTtcclxuICAgICAgICAgICAgaWYgKHVybCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3VjY2Vzcyh7IHVybDogdXJsIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IoXCJJbnZhbGlkIHJlc3BvbnNlIGZyb20gZnJhbWVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF9vcmlnaW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbm90aWZ5UGFyZW50KHVybCkge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIklGcmFtZVdpbmRvdy5ub3RpZnlQYXJlbnRcIik7XHJcblxyXG4gICAgICAgIGlmICh3aW5kb3cucGFyZW50ICYmIHdpbmRvdyAhPT0gd2luZG93LnBhcmVudCkge1xyXG4gICAgICAgICAgICB1cmwgPSB1cmwgfHwgd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcbiAgICAgICAgICAgIGlmICh1cmwpIHtcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIklGcmFtZVdpbmRvdy5ub3RpZnlQYXJlbnQ6IHBvc3RpbmcgdXJsIG1lc3NhZ2UgdG8gcGFyZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZSh1cmwsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0lGcmFtZVdpbmRvdy5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuXHJcbmV4cG9ydCBjbGFzcyBVc2VyIHtcclxuICAgIGNvbnN0cnVjdG9yKHtpZF90b2tlbiwgc2Vzc2lvbl9zdGF0ZSwgYWNjZXNzX3Rva2VuLCB0b2tlbl90eXBlLCBzY29wZSwgcHJvZmlsZSwgZXhwaXJlc19hdCwgc3RhdGV9KSB7XHJcbiAgICAgICAgdGhpcy5pZF90b2tlbiA9IGlkX3Rva2VuO1xyXG4gICAgICAgIHRoaXMuc2Vzc2lvbl9zdGF0ZSA9IHNlc3Npb25fc3RhdGU7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NfdG9rZW4gPSBhY2Nlc3NfdG9rZW47XHJcbiAgICAgICAgdGhpcy50b2tlbl90eXBlID0gdG9rZW5fdHlwZTtcclxuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XHJcbiAgICAgICAgdGhpcy5wcm9maWxlID0gcHJvZmlsZTtcclxuICAgICAgICB0aGlzLmV4cGlyZXNfYXQgPSBleHBpcmVzX2F0O1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZXhwaXJlc19pbigpIHtcclxuICAgICAgICBpZiAodGhpcy5leHBpcmVzX2F0KSB7XHJcbiAgICAgICAgICAgIGxldCBub3cgPSBwYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cGlyZXNfYXQgLSBub3c7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGV4cGlyZWQoKSB7XHJcbiAgICAgICAgbGV0IGV4cGlyZXNfaW4gPSB0aGlzLmV4cGlyZXNfaW47XHJcbiAgICAgICAgaWYgKGV4cGlyZXNfaW4gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwaXJlc19pbiA8PSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzY29wZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnNjb3BlIHx8IFwiXCIpLnNwbGl0KFwiIFwiKTtcclxuICAgIH1cclxuXHJcbiAgICB0b1N0b3JhZ2VTdHJpbmcoKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiVXNlci50b1N0b3JhZ2VTdHJpbmdcIik7XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgaWRfdG9rZW46IHRoaXMuaWRfdG9rZW4sXHJcbiAgICAgICAgICAgIHNlc3Npb25fc3RhdGU6IHRoaXMuc2Vzc2lvbl9zdGF0ZSxcclxuICAgICAgICAgICAgYWNjZXNzX3Rva2VuOiB0aGlzLmFjY2Vzc190b2tlbixcclxuICAgICAgICAgICAgdG9rZW5fdHlwZTogdGhpcy50b2tlbl90eXBlLFxyXG4gICAgICAgICAgICBzY29wZTogdGhpcy5zY29wZSxcclxuICAgICAgICAgICAgcHJvZmlsZTogdGhpcy5wcm9maWxlLFxyXG4gICAgICAgICAgICBleHBpcmVzX2F0OiB0aGlzLmV4cGlyZXNfYXRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmFnZVN0cmluZykge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXIuZnJvbVN0b3JhZ2VTdHJpbmdcIik7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVc2VyKEpTT04ucGFyc2Uoc3RvcmFnZVN0cmluZykpO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Vc2VyLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgeyBBY2Nlc3NUb2tlbkV2ZW50cyB9IGZyb20gJy4vQWNjZXNzVG9rZW5FdmVudHMnO1xyXG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4vRXZlbnQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXJNYW5hZ2VyRXZlbnRzIGV4dGVuZHMgQWNjZXNzVG9rZW5FdmVudHMge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzKSB7XHJcbiAgICAgICAgc3VwZXIoc2V0dGluZ3MpO1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2FkZWQgPSBuZXcgRXZlbnQoXCJVc2VyIGxvYWRlZFwiKTtcclxuICAgICAgICB0aGlzLl91c2VyVW5sb2FkZWQgPSBuZXcgRXZlbnQoXCJVc2VyIHVubG9hZGVkXCIpO1xyXG4gICAgICAgIHRoaXMuX3NpbGVudFJlbmV3RXJyb3IgPSBuZXcgRXZlbnQoXCJTaWxlbnQgcmVuZXcgZXJyb3JcIik7XHJcbiAgICAgICAgdGhpcy5fdXNlclNpZ25lZE91dCA9IG5ldyBFdmVudChcIlVzZXIgc2lnbmVkIG91dFwiKTtcclxuICAgICAgICB0aGlzLl91c2VyU2Vzc2lvbkNoYW5nZWQgPSBuZXcgRXZlbnQoXCJVc2VyIHNlc3Npb24gY2hhbmdlZFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkKHVzZXIsIHJhaXNlRXZlbnQ9dHJ1ZSkge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLmxvYWRcIik7XHJcbiAgICAgICAgc3VwZXIubG9hZCh1c2VyKTtcclxuICAgICAgICBpZiAocmFpc2VFdmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLl91c2VyTG9hZGVkLnJhaXNlKHVzZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHVubG9hZCgpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlckV2ZW50cy51bmxvYWRcIik7XHJcbiAgICAgICAgc3VwZXIudW5sb2FkKCk7XHJcbiAgICAgICAgdGhpcy5fdXNlclVubG9hZGVkLnJhaXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkVXNlckxvYWRlZChjYikge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2FkZWQuYWRkSGFuZGxlcihjYik7XHJcbiAgICB9XHJcbiAgICByZW1vdmVVc2VyTG9hZGVkKGNiKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlckxvYWRlZC5yZW1vdmVIYW5kbGVyKGNiKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRVc2VyVW5sb2FkZWQoY2IpIHtcclxuICAgICAgICB0aGlzLl91c2VyVW5sb2FkZWQuYWRkSGFuZGxlcihjYik7XHJcbiAgICB9XHJcbiAgICByZW1vdmVVc2VyVW5sb2FkZWQoY2IpIHtcclxuICAgICAgICB0aGlzLl91c2VyVW5sb2FkZWQucmVtb3ZlSGFuZGxlcihjYik7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkU2lsZW50UmVuZXdFcnJvcihjYikge1xyXG4gICAgICAgIHRoaXMuX3NpbGVudFJlbmV3RXJyb3IuYWRkSGFuZGxlcihjYik7XHJcbiAgICB9XHJcbiAgICByZW1vdmVTaWxlbnRSZW5ld0Vycm9yKGNiKSB7XHJcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdFcnJvci5yZW1vdmVIYW5kbGVyKGNiKTtcclxuICAgIH1cclxuICAgIF9yYWlzZVNpbGVudFJlbmV3RXJyb3IoZSkge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLl9yYWlzZVNpbGVudFJlbmV3RXJyb3JcIiwgZS5tZXNzYWdlKTtcclxuICAgICAgICB0aGlzLl9zaWxlbnRSZW5ld0Vycm9yLnJhaXNlKGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFVzZXJTaWduZWRPdXQoY2IpIHtcclxuICAgICAgICB0aGlzLl91c2VyU2lnbmVkT3V0LmFkZEhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlVXNlclNpZ25lZE91dChjYikge1xyXG4gICAgICAgIHRoaXMuX3VzZXJTaWduZWRPdXQucmVtb3ZlSGFuZGxlcihjYik7XHJcbiAgICB9XHJcbiAgICBfcmFpc2VVc2VyU2lnbmVkT3V0KGUpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlckV2ZW50cy5fcmFpc2VVc2VyU2lnbmVkT3V0XCIpO1xyXG4gICAgICAgIHRoaXMuX3VzZXJTaWduZWRPdXQucmFpc2UoZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkVXNlclNlc3Npb25DaGFuZ2VkKGNiKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlclNlc3Npb25DaGFuZ2VkLmFkZEhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlVXNlclNlc3Npb25DaGFuZ2VkKGNiKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlclNlc3Npb25DaGFuZ2VkLnJlbW92ZUhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG4gICAgX3JhaXNlVXNlclNlc3Npb25DaGFuZ2VkKGUpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlckV2ZW50cy5fcmFpc2VVc2VyU2Vzc2lvbkNoYW5nZWRcIik7XHJcbiAgICAgICAgdGhpcy5fdXNlclNlc3Npb25DaGFuZ2VkLnJhaXNlKGUpO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Vc2VyTWFuYWdlckV2ZW50cy5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgVGltZXIgfSBmcm9tICcuL1RpbWVyJztcclxuXHJcbmNvbnN0IERlZmF1bHRBY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IDYwOyAvLyBzZWNvbmRzXHJcblxyXG5leHBvcnQgY2xhc3MgQWNjZXNzVG9rZW5FdmVudHMge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHtcclxuICAgICAgICBhY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IERlZmF1bHRBY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSxcclxuICAgICAgICBhY2Nlc3NUb2tlbkV4cGlyaW5nVGltZXIgPSBuZXcgVGltZXIoXCJBY2Nlc3MgdG9rZW4gZXhwaXJpbmdcIiksXHJcbiAgICAgICAgYWNjZXNzVG9rZW5FeHBpcmVkVGltZXIgPSBuZXcgVGltZXIoXCJBY2Nlc3MgdG9rZW4gZXhwaXJlZFwiKVxyXG4gICAgfSA9IHt9KSB7XHJcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUgPSBhY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZTtcclxuXHJcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZyA9IGFjY2Vzc1Rva2VuRXhwaXJpbmdUaW1lcjtcclxuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQgPSBhY2Nlc3NUb2tlbkV4cGlyZWRUaW1lcjtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkKGNvbnRhaW5lcikge1xyXG4gICAgICAgIC8vIG9ubHkgcmVnaXN0ZXIgZXZlbnRzIGlmIHRoZXJlJ3MgYW4gYWNjZXNzIHRva2VuIGFuZCBpdCBoYXMgYW4gZXhwaXJhdGlvblxyXG4gICAgICAgIGlmIChjb250YWluZXIuYWNjZXNzX3Rva2VuICYmIGNvbnRhaW5lci5leHBpcmVzX2luICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbGV0IGR1cmF0aW9uID0gY29udGFpbmVyLmV4cGlyZXNfaW47XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkFjY2Vzc1Rva2VuRXZlbnRzLmxvYWQ6IGFjY2VzcyB0b2tlbiBwcmVzZW50LCByZW1haW5pbmcgZHVyYXRpb246XCIsIGR1cmF0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkdXJhdGlvbiA+IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIG9ubHkgcmVnaXN0ZXIgZXhwaXJpbmcgaWYgd2Ugc3RpbGwgaGF2ZSB0aW1lXHJcbiAgICAgICAgICAgICAgICBsZXQgZXhwaXJpbmcgPSBkdXJhdGlvbiAtIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4cGlyaW5nIDw9IDApe1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyaW5nID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiQWNjZXNzVG9rZW5FdmVudHMubG9hZDogcmVnaXN0ZXJpbmcgZXhwaXJpbmcgdGltZXIgaW46XCIsIGV4cGlyaW5nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmcuaW5pdChleHBpcmluZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJBY2Nlc3NUb2tlbkV2ZW50cy5sb2FkOiBjYW5jZWxpbmcgZXhpc3RpbmcgZXhwaXJpbmcgdGltZXIgYmVjYXNlIHdlJ3JlIHBhc3QgZXhwaXJhdGlvbi5cIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBpdCdzIG5lZ2F0aXZlLCBpdCB3aWxsIHN0aWxsIGZpcmVcclxuICAgICAgICAgICAgbGV0IGV4cGlyZWQgPSBkdXJhdGlvbiArIDE7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkFjY2Vzc1Rva2VuRXZlbnRzLmxvYWQ6IHJlZ2lzdGVyaW5nIGV4cGlyZWQgdGltZXIgaW46XCIsIGV4cGlyZWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQuaW5pdChleHBpcmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmcuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZC5jYW5jZWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdW5sb2FkKCkge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIkFjY2Vzc1Rva2VuRXZlbnRzLnVubG9hZDogY2FuY2VsaW5nIGV4aXN0aW5nIGFjY2VzcyB0b2tlbiB0aW1lcnNcIik7XHJcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZy5jYW5jZWwoKTtcclxuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQuY2FuY2VsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQWNjZXNzVG9rZW5FeHBpcmluZyhjYikge1xyXG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmcuYWRkSGFuZGxlcihjYik7XHJcbiAgICB9XHJcbiAgICByZW1vdmVBY2Nlc3NUb2tlbkV4cGlyaW5nKGNiKSB7XHJcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZy5yZW1vdmVIYW5kbGVyKGNiKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRBY2Nlc3NUb2tlbkV4cGlyZWQoY2IpIHtcclxuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQuYWRkSGFuZGxlcihjYik7XHJcbiAgICB9XHJcbiAgICByZW1vdmVBY2Nlc3NUb2tlbkV4cGlyZWQoY2IpIHtcclxuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQucmVtb3ZlSGFuZGxlcihjYik7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0FjY2Vzc1Rva2VuRXZlbnRzLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICcuL0dsb2JhbCc7XHJcbmltcG9ydCB7IEV2ZW50IH0gZnJvbSAnLi9FdmVudCc7XHJcblxyXG5jb25zdCBUaW1lckR1cmF0aW9uID0gNTsgLy8gc2Vjb25kc1xyXG5cclxuZXhwb3J0IGNsYXNzIFRpbWVyIGV4dGVuZHMgRXZlbnQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHRpbWVyID0gR2xvYmFsLnRpbWVyLCBub3dGdW5jID0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcbiAgICAgICAgdGhpcy5fdGltZXIgPSB0aW1lcjtcclxuXHJcbiAgICAgICAgaWYgKG5vd0Z1bmMpIHtcclxuICAgICAgICAgICAgdGhpcy5fbm93RnVuYyA9IG5vd0Z1bmM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9ub3dGdW5jID0gKCkgPT4gRGF0ZS5ub3coKSAvIDEwMDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBub3coKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuX25vd0Z1bmMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdChkdXJhdGlvbikge1xyXG4gICAgICAgIGlmIChkdXJhdGlvbiA8PSAwKSB7XHJcbiAgICAgICAgICAgIGR1cmF0aW9uID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZHVyYXRpb24gPSBwYXJzZUludChkdXJhdGlvbik7XHJcblxyXG4gICAgICAgIHZhciBleHBpcmF0aW9uID0gdGhpcy5ub3cgKyBkdXJhdGlvbjtcclxuICAgICAgICBpZiAodGhpcy5leHBpcmF0aW9uID09PSBleHBpcmF0aW9uICYmIHRoaXMuX3RpbWVySGFuZGxlKSB7XHJcbiAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gcmVpbml0aWFsaXplIHRvIHNhbWUgZXhwaXJhdGlvbiwgc28gYmFpbCBvdXRcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVGltZXIuaW5pdCB0aW1lciBcIiArIHRoaXMuX25hbWUgKyBcIiBza2lwcGluZyBpbml0aWFsaXphdGlvbiBzaW5jZSBhbHJlYWR5IGluaXRpYWxpemVkIGZvciBleHBpcmF0aW9uOlwiLCB0aGlzLmV4cGlyYXRpb24pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNhbmNlbCgpO1xyXG5cclxuICAgICAgICBMb2cuZGVidWcoXCJUaW1lci5pbml0IHRpbWVyIFwiICsgdGhpcy5fbmFtZSArIFwiIGZvciBkdXJhdGlvbjpcIiwgZHVyYXRpb24pO1xyXG4gICAgICAgIHRoaXMuX2V4cGlyYXRpb24gPSBleHBpcmF0aW9uO1xyXG5cclxuICAgICAgICAvLyB3ZSdyZSB1c2luZyBhIGZhaXJseSBzaG9ydCB0aW1lciBhbmQgdGhlbiBjaGVja2luZyB0aGUgZXhwaXJhdGlvbiBpbiB0aGVcclxuICAgICAgICAvLyBjYWxsYmFjayB0byBoYW5kbGUgc2NlbmFyaW9zIHdoZXJlIHRoZSBicm93c2VyIGRldmljZSBzbGVlcHMsIGFuZCB0aGVuXHJcbiAgICAgICAgLy8gdGhlIHRpbWVycyBlbmQgdXAgZ2V0dGluZyBkZWxheWVkLlxyXG4gICAgICAgIHZhciB0aW1lckR1cmF0aW9uID0gVGltZXJEdXJhdGlvbjtcclxuICAgICAgICBpZiAoZHVyYXRpb24gPCB0aW1lckR1cmF0aW9uKSB7XHJcbiAgICAgICAgICAgIHRpbWVyRHVyYXRpb24gPSBkdXJhdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdGltZXJIYW5kbGUgPSB0aGlzLl90aW1lci5zZXRJbnRlcnZhbCh0aGlzLl9jYWxsYmFjay5iaW5kKHRoaXMpLCB0aW1lckR1cmF0aW9uICogMTAwMCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldCBleHBpcmF0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9leHBpcmF0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbmNlbCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fdGltZXJIYW5kbGUpIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVGltZXIuY2FuY2VsOiBcIiwgdGhpcy5fbmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVyLmNsZWFySW50ZXJ2YWwodGhpcy5fdGltZXJIYW5kbGUpO1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lckhhbmRsZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9jYWxsYmFjaygpIHtcclxuICAgICAgICB2YXIgZGlmZiA9IHRoaXMuX2V4cGlyYXRpb24gLSB0aGlzLm5vdztcclxuICAgICAgICBMb2cuZGVidWcoXCJUaW1lci5jYWxsYmFjazsgXCIgKyB0aGlzLl9uYW1lICsgXCIgdGltZXIgZXhwaXJlcyBpbjpcIiwgZGlmZik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9leHBpcmF0aW9uIDw9IHRoaXMubm93KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgIHN1cGVyLnJhaXNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9UaW1lci5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFdmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IobmFtZSkge1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEhhbmRsZXIoY2IpIHtcclxuICAgICAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlSGFuZGxlcihjYikge1xyXG4gICAgICAgIHZhciBpZHggPSB0aGlzLl9jYWxsYmFja3MuZmluZEluZGV4KGl0ZW0gPT4gaXRlbSA9PT0gY2IpO1xyXG4gICAgICAgIGlmIChpZHggPj0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFja3Muc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJhaXNlKC4uLnBhcmFtcykge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIkV2ZW50OiBSYWlzaW5nIGV2ZW50OiBcIiArIHRoaXMuX25hbWUpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrc1tpXSguLi5wYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvRXZlbnQuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2lsZW50UmVuZXdTZXJ2aWNlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih1c2VyTWFuYWdlcikge1xyXG4gICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyID0gdXNlck1hbmFnZXI7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9jYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFjayA9IHRoaXMuX3Rva2VuRXhwaXJpbmcuYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLmFkZEFjY2Vzc1Rva2VuRXhwaXJpbmcodGhpcy5fY2FsbGJhY2spO1xyXG5cclxuICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHRyaWdnZXIgbG9hZGluZyBvZiB0aGUgdXNlciBzbyB0aGUgZXhwaXJpbmcgZXZlbnRzIGNhbiBiZSBpbml0aWFsaXplZFxyXG4gICAgICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5nZXRVc2VyKCkudGhlbih1c2VyPT57XHJcbiAgICAgICAgICAgICAgICAvLyBkZWxpYmVyYXRlIG5vcFxyXG4gICAgICAgICAgICB9KS5jYXRjaChlcnI9PntcclxuICAgICAgICAgICAgICAgIC8vIGNhdGNoIHRvIHN1cHByZXNzIGVycm9ycyBzaW5jZSB3ZSdyZSBpbiBhIGN0b3JcclxuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlNpbGVudFJlbmV3U2VydmljZS5zdGFydDogRXJyb3IgZnJvbSBnZXRVc2VyOlwiLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdG9wKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9jYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5ldmVudHMucmVtb3ZlQWNjZXNzVG9rZW5FeHBpcmluZyh0aGlzLl9jYWxsYmFjayk7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFjaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX3Rva2VuRXhwaXJpbmcoKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuc2lnbmluU2lsZW50KCkudGhlbih1c2VyID0+IHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2lsZW50UmVuZXdTZXJ2aWNlLl90b2tlbkV4cGlyaW5nOiBTaWxlbnQgdG9rZW4gcmVuZXdhbCBzdWNjZXNzZnVsXCIpO1xyXG4gICAgICAgIH0sIGVyciA9PiB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNpbGVudFJlbmV3U2VydmljZS5fdG9rZW5FeHBpcmluZzogRXJyb3IgZnJvbSBzaWduaW5TaWxlbnQ6XCIsIGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLl9yYWlzZVNpbGVudFJlbmV3RXJyb3IoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvU2lsZW50UmVuZXdTZXJ2aWNlLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgeyBDaGVja1Nlc3Npb25JRnJhbWUgfSBmcm9tICcuL0NoZWNrU2Vzc2lvbklGcmFtZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2Vzc2lvbk1vbml0b3Ige1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHVzZXJNYW5hZ2VyLCBDaGVja1Nlc3Npb25JRnJhbWVDdG9yID0gQ2hlY2tTZXNzaW9uSUZyYW1lKSB7XHJcbiAgICAgICAgaWYgKCF1c2VyTWFuYWdlcikge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJTZXNzaW9uTW9uaXRvci5jdG9yOiBObyB1c2VyIG1hbmFnZXIgcGFzc2VkIHRvIFNlc3Npb25Nb25pdG9yXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1c2VyTWFuYWdlclwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyID0gdXNlck1hbmFnZXI7XHJcbiAgICAgICAgdGhpcy5fQ2hlY2tTZXNzaW9uSUZyYW1lQ3RvciA9IENoZWNrU2Vzc2lvbklGcmFtZUN0b3I7XHJcblxyXG4gICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5hZGRVc2VyTG9hZGVkKHRoaXMuX3N0YXJ0LmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5hZGRVc2VyVW5sb2FkZWQodGhpcy5fc3RvcC5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZ2V0VXNlcigpLnRoZW4odXNlciA9PiB7XHJcbiAgICAgICAgICAgIC8vIGRvaW5nIHRoaXMgbWFudWFsbHkgaGVyZSBzaW5jZSBjYWxsaW5nIGdldFVzZXIgXHJcbiAgICAgICAgICAgIC8vIGRvZXNuJ3QgdHJpZ2dlciBsb2FkIGV2ZW50LlxyXG4gICAgICAgICAgICBpZiAodXNlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhcnQodXNlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAvLyBjYXRjaCB0byBzdXBwcmVzcyBlcnJvcnMgc2luY2Ugd2UncmUgaW4gYSBjdG9yXHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNlc3Npb25Nb25pdG9yIGN0b3I6IGVycm9yIGZyb20gZ2V0VXNlcjpcIiwgZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBfc2V0dGluZ3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJNYW5hZ2VyLnNldHRpbmdzO1xyXG4gICAgfVxyXG4gICAgZ2V0IF9tZXRhZGF0YVNlcnZpY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJNYW5hZ2VyLm1ldGFkYXRhU2VydmljZTtcclxuICAgIH1cclxuICAgIGdldCBfY2xpZW50X2lkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQ7XHJcbiAgICB9XHJcbiAgICBnZXQgX2NoZWNrU2Vzc2lvbkludGVydmFsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5jaGVja1Nlc3Npb25JbnRlcnZhbDtcclxuICAgIH1cclxuICAgIGdldCBfc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLnN0b3BDaGVja1Nlc3Npb25PbkVycm9yO1xyXG4gICAgfVxyXG5cclxuICAgIF9zdGFydCh1c2VyKSB7XHJcbiAgICAgICAgbGV0IHNlc3Npb25fc3RhdGUgPSB1c2VyLnNlc3Npb25fc3RhdGU7XHJcblxyXG4gICAgICAgIGlmIChzZXNzaW9uX3N0YXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N1YiA9IHVzZXIucHJvZmlsZS5zdWI7XHJcbiAgICAgICAgICAgIHRoaXMuX3NpZCA9IHVzZXIucHJvZmlsZS5zaWQ7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9zdGFydDogc2Vzc2lvbl9zdGF0ZTpcIiwgc2Vzc2lvbl9zdGF0ZSwgXCIsIHN1YjpcIiwgdGhpcy5fc3ViKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0Q2hlY2tTZXNzaW9uSWZyYW1lKCkudGhlbih1cmwgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cmwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX3N0YXJ0OiBJbml0aWFsaXppbmcgY2hlY2sgc2Vzc2lvbiBpZnJhbWVcIilcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjbGllbnRfaWQgPSB0aGlzLl9jbGllbnRfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnRlcnZhbCA9IHRoaXMuX2NoZWNrU2Vzc2lvbkludGVydmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RvcE9uRXJyb3IgPSB0aGlzLl9zdG9wQ2hlY2tTZXNzaW9uT25FcnJvcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrU2Vzc2lvbklGcmFtZSA9IG5ldyB0aGlzLl9DaGVja1Nlc3Npb25JRnJhbWVDdG9yKHRoaXMuX2NhbGxiYWNrLmJpbmQodGhpcyksIGNsaWVudF9pZCwgdXJsLCBpbnRlcnZhbCwgc3RvcE9uRXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUubG9hZCgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lLnN0YXJ0KHNlc3Npb25fc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy53YXJuKFwiU2Vzc2lvbk1vbml0b3IuX3N0YXJ0OiBObyBjaGVjayBzZXNzaW9uIGlmcmFtZSBmb3VuZCBpbiB0aGUgbWV0YWRhdGFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjYXRjaCB0byBzdXBwcmVzcyBlcnJvcnMgc2luY2Ugd2UncmUgaW4gbm9uLXByb21pc2UgY2FsbGJhY2tcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJTZXNzaW9uTW9uaXRvci5fc3RhcnQ6IEVycm9yIGZyb20gZ2V0Q2hlY2tTZXNzaW9uSWZyYW1lOlwiLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrU2Vzc2lvbklGcmFtZS5zdGFydChzZXNzaW9uX3N0YXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfc3RvcCgpIHtcclxuICAgICAgICB0aGlzLl9zdWIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3NpZCA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUpIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX3N0b3BcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrU2Vzc2lvbklGcmFtZS5zdG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9jYWxsYmFjaygpIHtcclxuICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5xdWVyeVNlc3Npb25TdGF0dXMoKS50aGVuKHNlc3Npb24gPT4ge1xyXG4gICAgICAgICAgICB2YXIgcmFpc2VVc2VyU2lnbmVkT3V0RXZlbnQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlc3Npb24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uLnN1YiA9PT0gdGhpcy5fc3ViKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFpc2VVc2VyU2lnbmVkT3V0RXZlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUuc3RhcnQoc2Vzc2lvbi5zZXNzaW9uX3N0YXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb24uc2lkID09PSB0aGlzLl9zaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX2NhbGxiYWNrOiBTYW1lIHN1YiBzdGlsbCBsb2dnZWQgaW4gYXQgT1AsIHJlc3RhcnRpbmcgY2hlY2sgc2Vzc2lvbiBpZnJhbWU7IHNlc3Npb25fc3RhdGU6XCIsIHNlc3Npb24uc2Vzc2lvbl9zdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTZXNzaW9uTW9uaXRvci5fY2FsbGJhY2s6IFNhbWUgc3ViIHN0aWxsIGxvZ2dlZCBpbiBhdCBPUCwgc2Vzc2lvbiBzdGF0ZSBoYXMgY2hhbmdlZCwgcmVzdGFydGluZyBjaGVjayBzZXNzaW9uIGlmcmFtZTsgc2Vzc2lvbl9zdGF0ZTpcIiwgc2Vzc2lvbi5zZXNzaW9uX3N0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLl9yYWlzZVVzZXJTZXNzaW9uQ2hhbmdlZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazogRGlmZmVyZW50IHN1YmplY3Qgc2lnbmVkIGludG8gT1A6XCIsIHNlc3Npb24uc3ViKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazogU3ViamVjdCBubyBsb25nZXIgc2lnbmVkIGludG8gT1BcIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChyYWlzZVVzZXJTaWduZWRPdXRFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX2NhbGxiYWNrOiBTZXNzaW9uTW9uaXRvci5fY2FsbGJhY2s7IHJhaXNpbmcgc2lnbmVkIG91dCBldmVudFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5fcmFpc2VVc2VyU2lnbmVkT3V0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJTZXNzaW9uTW9uaXRvci5fY2FsbGJhY2s6IEVycm9yIGNhbGxpbmcgcXVlcnlDdXJyZW50U2lnbmluU2Vzc2lvbjsgcmFpc2luZyBzaWduZWQgb3V0IGV2ZW50XCIsIGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLl9yYWlzZVVzZXJTaWduZWRPdXQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvU2Vzc2lvbk1vbml0b3IuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcblxyXG5jb25zdCBEZWZhdWx0SW50ZXJ2YWwgPSAyMDAwO1xyXG5cclxuZXhwb3J0IGNsYXNzIENoZWNrU2Vzc2lvbklGcmFtZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihjYWxsYmFjaywgY2xpZW50X2lkLCB1cmwsIGludGVydmFsLCBzdG9wT25FcnJvciA9IHRydWUpIHtcclxuICAgICAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuX2NsaWVudF9pZCA9IGNsaWVudF9pZDtcclxuICAgICAgICB0aGlzLl91cmwgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBpbnRlcnZhbCB8fCBEZWZhdWx0SW50ZXJ2YWw7XHJcbiAgICAgICAgdGhpcy5fc3RvcE9uRXJyb3IgPSBzdG9wT25FcnJvcjtcclxuXHJcbiAgICAgICAgdmFyIGlkeCA9IHVybC5pbmRleE9mKFwiL1wiLCB1cmwuaW5kZXhPZihcIi8vXCIpICsgMik7XHJcbiAgICAgICAgdGhpcy5fZnJhbWVfb3JpZ2luID0gdXJsLnN1YnN0cigwLCBpZHgpO1xyXG5cclxuICAgICAgICB0aGlzLl9mcmFtZSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xyXG5cclxuICAgICAgICAvLyBzaG90Z3VuIGFwcHJvYWNoXHJcbiAgICAgICAgdGhpcy5fZnJhbWUuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XHJcbiAgICAgICAgdGhpcy5fZnJhbWUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XHJcbiAgICAgICAgdGhpcy5fZnJhbWUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIHRoaXMuX2ZyYW1lLnN0eWxlLndpZHRoID0gMDtcclxuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS5oZWlnaHQgPSAwO1xyXG5cclxuICAgICAgICB0aGlzLl9mcmFtZS5zcmMgPSB1cmw7XHJcbiAgICB9XHJcbiAgICBsb2FkKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2ZyYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5fYm91bmRNZXNzYWdlRXZlbnQgPSB0aGlzLl9tZXNzYWdlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCwgZmFsc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX21lc3NhZ2UoZSkge1xyXG4gICAgICAgIGlmIChlLm9yaWdpbiA9PT0gdGhpcy5fZnJhbWVfb3JpZ2luICYmXHJcbiAgICAgICAgICAgIGUuc291cmNlID09PSB0aGlzLl9mcmFtZS5jb250ZW50V2luZG93XHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmRhdGEgPT09IFwiZXJyb3JcIikge1xyXG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiQ2hlY2tTZXNzaW9uSUZyYW1lOiBlcnJvciBtZXNzYWdlIGZyb20gY2hlY2sgc2Vzc2lvbiBvcCBpZnJhbWVcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RvcE9uRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChlLmRhdGEgPT09IFwiY2hhbmdlZFwiKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJDaGVja1Nlc3Npb25JRnJhbWU6IGNoYW5nZWQgbWVzc2FnZSBmcm9tIGNoZWNrIHNlc3Npb24gb3AgaWZyYW1lXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiQ2hlY2tTZXNzaW9uSUZyYW1lOiBcIiArIGUuZGF0YSArIFwiIG1lc3NhZ2UgZnJvbSBjaGVjayBzZXNzaW9uIG9wIGlmcmFtZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXJ0KHNlc3Npb25fc3RhdGUpIHtcclxuICAgICAgICBpZiAodGhpcy5fc2Vzc2lvbl9zdGF0ZSAhPT0gc2Vzc2lvbl9zdGF0ZSkge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJDaGVja1Nlc3Npb25JRnJhbWUuc3RhcnRcIik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3Nlc3Npb25fc3RhdGUgPSBzZXNzaW9uX3N0YXRlO1xyXG5cclxuICAgICAgICAgICAgbGV0IHNlbmQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZS5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKHRoaXMuX2NsaWVudF9pZCArIFwiIFwiICsgdGhpcy5fc2Vzc2lvbl9zdGF0ZSwgdGhpcy5fZnJhbWVfb3JpZ2luKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIHRyaWdnZXIgbm93XHJcbiAgICAgICAgICAgIHNlbmQoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGFuZCBzZXR1cCB0aW1lclxyXG4gICAgICAgICAgICB0aGlzLl90aW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbChzZW5kLCB0aGlzLl9pbnRlcnZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0b3AoKSB7XHJcbiAgICAgICAgdGhpcy5fc2Vzc2lvbl9zdGF0ZSA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl90aW1lcikge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJDaGVja1Nlc3Npb25JRnJhbWUuc3RvcFwiKTtcclxuXHJcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuX3RpbWVyKTtcclxuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvQ2hlY2tTZXNzaW9uSUZyYW1lLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgeyBNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICcuL01ldGFkYXRhU2VydmljZSc7XHJcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gJy4vR2xvYmFsJztcclxuXHJcbmNvbnN0IEFjY2Vzc1Rva2VuVHlwZUhpbnQgPSBcImFjY2Vzc190b2tlblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRva2VuUmV2b2NhdGlvbkNsaWVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgWE1MSHR0cFJlcXVlc3RDdG9yID0gR2xvYmFsLlhNTEh0dHBSZXF1ZXN0LCBNZXRhZGF0YVNlcnZpY2VDdG9yID0gTWV0YWRhdGFTZXJ2aWNlKSB7XHJcbiAgICAgICAgaWYgKCFzZXR0aW5ncykge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJUb2tlblJldm9jYXRpb25DbGllbnQuY3RvcjogTm8gc2V0dGluZ3MgcHJvdmlkZWRcIik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHNldHRpbmdzIHByb3ZpZGVkLlwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5fWE1MSHR0cFJlcXVlc3RDdG9yID0gWE1MSHR0cFJlcXVlc3RDdG9yO1xyXG4gICAgICAgIHRoaXMuX21ldGFkYXRhU2VydmljZSA9IG5ldyBNZXRhZGF0YVNlcnZpY2VDdG9yKHRoaXMuX3NldHRpbmdzKTtcclxuICAgIH1cclxuXHJcbiAgICByZXZva2UoYWNjZXNzVG9rZW4sIHJlcXVpcmVkKSB7XHJcbiAgICAgICAgaWYgKCFhY2Nlc3NUb2tlbikge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJUb2tlblJldm9jYXRpb25DbGllbnQucmV2b2tlOiBObyBhY2Nlc3NUb2tlbiBwcm92aWRlZFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gYWNjZXNzVG9rZW4gcHJvdmlkZWQuXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRSZXZvY2F0aW9uRW5kcG9pbnQoKS50aGVuKHVybCA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdXJsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVxdWlyZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJUb2tlblJldm9jYXRpb25DbGllbnQucmV2b2tlOiBSZXZvY2F0aW9uIG5vdCBzdXBwb3J0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmV2b2NhdGlvbiBub3Qgc3VwcG9ydGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIG5vdCByZXF1aXJlZCwgc28gZG9uJ3QgZXJyb3IgYW5kIGp1c3QgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2U6IFJldm9raW5nIGFjY2VzcyB0b2tlblwiKTtcclxuICAgICAgICAgICAgdmFyIGNsaWVudF9pZCA9IHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZDtcclxuICAgICAgICAgICAgdmFyIGNsaWVudF9zZWNyZXQgPSB0aGlzLl9zZXR0aW5ncy5jbGllbnRfc2VjcmV0O1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmV2b2tlKHVybCwgY2xpZW50X2lkLCBjbGllbnRfc2VjcmV0LCBhY2Nlc3NUb2tlbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgX3Jldm9rZSh1cmwsIGNsaWVudF9pZCwgY2xpZW50X3NlY3JldCwgYWNjZXNzVG9rZW4pIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgdGhpcy5fWE1MSHR0cFJlcXVlc3RDdG9yKCk7XHJcbiAgICAgICAgICAgIHhoci5vcGVuKFwiUE9TVFwiLCB1cmwpO1xyXG5cclxuICAgICAgICAgICAgeGhyLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlRva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2U6IEhUVFAgcmVzcG9uc2UgcmVjZWl2ZWQsIHN0YXR1c1wiLCB4aHIuc3RhdHVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KEVycm9yKHhoci5zdGF0dXNUZXh0ICsgXCIgKFwiICsgeGhyLnN0YXR1cyArIFwiKVwiKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2YXIgYm9keSA9IFwiY2xpZW50X2lkPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGNsaWVudF9pZCk7XHJcbiAgICAgICAgICAgIGlmIChjbGllbnRfc2VjcmV0KSB7XHJcbiAgICAgICAgICAgICAgICBib2R5ICs9IFwiJmNsaWVudF9zZWNyZXQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoY2xpZW50X3NlY3JldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYm9keSArPSBcIiZ0b2tlbl90eXBlX2hpbnQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoQWNjZXNzVG9rZW5UeXBlSGludCk7XHJcbiAgICAgICAgICAgIGJvZHkgKz0gXCImdG9rZW49XCIgKyBlbmNvZGVVUklDb21wb25lbnQoYWNjZXNzVG9rZW4pO1xyXG5cclxuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIik7XHJcbiAgICAgICAgICAgIHhoci5zZW5kKGJvZHkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Ub2tlblJldm9jYXRpb25DbGllbnQuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBDb3Jkb3ZhUG9wdXBXaW5kb3cgfSBmcm9tICcuL0NvcmRvdmFQb3B1cFdpbmRvdyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29yZG92YVBvcHVwTmF2aWdhdG9yIHtcclxuXHJcbiAgICBwcmVwYXJlKHBhcmFtcykge1xyXG4gICAgICAgIGxldCBwb3B1cCA9IG5ldyBDb3Jkb3ZhUG9wdXBXaW5kb3cocGFyYW1zKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHBvcHVwKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvQ29yZG92YVBvcHVwTmF2aWdhdG9yLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5cclxuY29uc3QgRGVmYXVsdFBvcHVwRmVhdHVyZXMgPSAnbG9jYXRpb249bm8sdG9vbGJhcj1ubyx6b29tPW5vJztcclxuY29uc3QgRGVmYXVsdFBvcHVwVGFyZ2V0ID0gXCJfYmxhbmtcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb3Jkb3ZhUG9wdXBXaW5kb3cge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xyXG4gICAgICAgIHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgICAgICAgICB0aGlzLl9yZWplY3QgPSByZWplY3Q7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZmVhdHVyZXMgPSBwYXJhbXMucG9wdXBXaW5kb3dGZWF0dXJlcyB8fCBEZWZhdWx0UG9wdXBGZWF0dXJlcztcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHBhcmFtcy5wb3B1cFdpbmRvd1RhcmdldCB8fCBEZWZhdWx0UG9wdXBUYXJnZXQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5yZWRpcmVjdF91cmkgPSBwYXJhbXMuc3RhcnRVcmw7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiQ29yZG92YVBvcHVwV2luZG93LmN0b3I6IHJlZGlyZWN0X3VyaTogXCIgKyB0aGlzLnJlZGlyZWN0X3VyaSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2lzSW5BcHBCcm93c2VySW5zdGFsbGVkKGNvcmRvdmFNZXRhZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBbXCJjb3Jkb3ZhLXBsdWdpbi1pbmFwcGJyb3dzZXJcIiwgXCJjb3Jkb3ZhLXBsdWdpbi1pbmFwcGJyb3dzZXIuaW5hcHBicm93c2VyXCIsIFwib3JnLmFwYWNoZS5jb3Jkb3ZhLmluYXBwYnJvd3NlclwiXS5zb21lKGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3Jkb3ZhTWV0YWRhdGEuaGFzT3duUHJvcGVydHkobmFtZSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBuYXZpZ2F0ZShwYXJhbXMpIHtcclxuICAgICAgICBpZiAoIXBhcmFtcyB8fCAhcGFyYW1zLnVybCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lcnJvcihcIk5vIHVybCBwcm92aWRlZFwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIXdpbmRvdy5jb3Jkb3ZhKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXJyb3IoXCJjb3Jkb3ZhIGlzIHVuZGVmaW5lZFwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgY29yZG92YU1ldGFkYXRhID0gd2luZG93LmNvcmRvdmEucmVxdWlyZShcImNvcmRvdmEvcGx1Z2luX2xpc3RcIikubWV0YWRhdGE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0luQXBwQnJvd3Nlckluc3RhbGxlZChjb3Jkb3ZhTWV0YWRhdGEpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKFwiSW5BcHBCcm93c2VyIHBsdWdpbiBub3QgZm91bmRcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9wb3B1cCA9IGNvcmRvdmEuSW5BcHBCcm93c2VyLm9wZW4ocGFyYW1zLnVybCwgdGhpcy50YXJnZXQsIHRoaXMuZmVhdHVyZXMpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcG9wdXApIHtcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkNvcmRvdmFQb3B1cFdpbmRvdy5uYXZpZ2F0ZTogcG9wdXAgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuX2V4aXRDYWxsYmFja0V2ZW50ID0gdGhpcy5fZXhpdENhbGxiYWNrLmJpbmQodGhpcyk7IFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbG9hZFN0YXJ0Q2FsbGJhY2tFdmVudCA9IHRoaXMuX2xvYWRTdGFydENhbGxiYWNrLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJleGl0XCIsIHRoaXMuX2V4aXRDYWxsYmFja0V2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3B1cC5hZGRFdmVudExpc3RlbmVyKFwibG9hZHN0YXJ0XCIsIHRoaXMuX2xvYWRTdGFydENhbGxiYWNrRXZlbnQsIGZhbHNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiRXJyb3Igb3BlbmluZyBwb3B1cCB3aW5kb3dcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcHJvbWlzZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcclxuICAgIH1cclxuXHJcbiAgICBfbG9hZFN0YXJ0Q2FsbGJhY2soZXZlbnQpIHtcclxuICAgICAgICBpZiAoZXZlbnQudXJsLmluZGV4T2YodGhpcy5yZWRpcmVjdF91cmkpID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N1Y2Nlc3MoeyB1cmw6IGV2ZW50LnVybCB9KTtcclxuICAgICAgICB9ICAgIFxyXG4gICAgfVxyXG4gICAgX2V4aXRDYWxsYmFjayhtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5fZXJyb3IobWVzc2FnZSk7ICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBfc3VjY2VzcyhkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xyXG5cclxuICAgICAgICBMb2cuZGVidWcoXCJDb3Jkb3ZhUG9wdXBXaW5kb3c6IFN1Y2Nlc3NmdWwgcmVzcG9uc2UgZnJvbSBjb3Jkb3ZhIHBvcHVwIHdpbmRvd1wiKTtcclxuICAgICAgICB0aGlzLl9yZXNvbHZlKGRhdGEpO1xyXG4gICAgfVxyXG4gICAgX2Vycm9yKG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLl9jbGVhbnVwKCk7XHJcblxyXG4gICAgICAgIExvZy5lcnJvcihtZXNzYWdlKTtcclxuICAgICAgICB0aGlzLl9yZWplY3QobmV3IEVycm9yKG1lc3NhZ2UpKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9jbGVhbnVwKCk7XHJcbiAgICB9XHJcblxyXG4gICAgX2NsZWFudXAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcHVwKXtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiQ29yZG92YVBvcHVwV2luZG93OiBjbGVhbmluZyB1cCBwb3B1cFwiKTtcclxuICAgICAgICAgICAgdGhpcy5fcG9wdXAucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImV4aXRcIiwgdGhpcy5fZXhpdENhbGxiYWNrRXZlbnQsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5fcG9wdXAucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRzdGFydFwiLCB0aGlzLl9sb2FkU3RhcnRDYWxsYmFja0V2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3BvcHVwID0gbnVsbDtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvQ29yZG92YVBvcHVwV2luZG93LmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgQ29yZG92YVBvcHVwV2luZG93IH0gZnJvbSAnLi9Db3Jkb3ZhUG9wdXBXaW5kb3cnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvcmRvdmFJRnJhbWVOYXZpZ2F0b3Ige1xyXG5cclxuICAgIHByZXBhcmUocGFyYW1zKSB7XHJcbiAgICAgICAgcGFyYW1zLnBvcHVwV2luZG93RmVhdHVyZXMgPSAnaGlkZGVuPXllcyc7XHJcbiAgICAgICAgbGV0IHBvcHVwID0gbmV3IENvcmRvdmFQb3B1cFdpbmRvdyhwYXJhbXMpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocG9wdXApO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Db3Jkb3ZhSUZyYW1lTmF2aWdhdG9yLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==