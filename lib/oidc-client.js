(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 19);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var nopLogger = {
    debug: function debug() {},
    info: function info() {},
    warn: function warn() {},
    error: function error() {}
};

var NONE = 0;
var ERROR = 1;
var WARN = 2;
var INFO = 3;
var DEBUG = 4;

var logger = void 0;
var level = void 0;

var Log = exports.Log = function () {
    function Log() {
        _classCallCheck(this, Log);
    }

    Log.reset = function reset() {
        level = INFO;
        logger = nopLogger;
    };

    Log.debug = function debug() {
        if (level >= DEBUG) {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            logger.debug.apply(logger, Array.from(args));
        }
    };

    Log.info = function info() {
        if (level >= INFO) {
            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }

            logger.info.apply(logger, Array.from(args));
        }
    };

    Log.warn = function warn() {
        if (level >= WARN) {
            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
            }

            logger.warn.apply(logger, Array.from(args));
        }
    };

    Log.error = function error() {
        if (level >= ERROR) {
            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                args[_key4] = arguments[_key4];
            }

            logger.error.apply(logger, Array.from(args));
        }
    };

    _createClass(Log, null, [{
        key: "NONE",
        get: function get() {
            return NONE;
        }
    }, {
        key: "ERROR",
        get: function get() {
            return ERROR;
        }
    }, {
        key: "WARN",
        get: function get() {
            return WARN;
        }
    }, {
        key: "INFO",
        get: function get() {
            return INFO;
        }
    }, {
        key: "DEBUG",
        get: function get() {
            return DEBUG;
        }
    }, {
        key: "level",
        get: function get() {
            return level;
        },
        set: function set(value) {
            if (NONE <= value && value <= DEBUG) {
                level = value;
            } else {
                throw new Error("Invalid log level");
            }
        }
    }, {
        key: "logger",
        get: function get() {
            return logger;
        },
        set: function set(value) {
            if (!value.debug && value.info) {
                // just to stay backwards compat. can remove in 2.0
                value.debug = value.info;
            }

            if (value.debug && value.info && value.warn && value.error) {
                logger = value;
            } else {
                throw new Error("Invalid logger");
            }
        }
    }]);

    return Log;
}();

Log.reset();

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var timer = {
    setInterval: function (_setInterval) {
        function setInterval(_x, _x2) {
            return _setInterval.apply(this, arguments);
        }

        setInterval.toString = function () {
            return _setInterval.toString();
        };

        return setInterval;
    }(function (cb, duration) {
        return setInterval(cb, duration);
    }),
    clearInterval: function (_clearInterval) {
        function clearInterval(_x3) {
            return _clearInterval.apply(this, arguments);
        }

        clearInterval.toString = function () {
            return _clearInterval.toString();
        };

        return clearInterval;
    }(function (handle) {
        return clearInterval(handle);
    })
};

var testing = false;
var request = null;

var Global = exports.Global = function () {
    function Global() {
        _classCallCheck(this, Global);
    }

    Global._testing = function _testing() {
        testing = true;
    };

    Global.setXMLHttpRequest = function setXMLHttpRequest(newRequest) {
        request = newRequest;
    };

    _createClass(Global, null, [{
        key: 'location',
        get: function get() {
            if (!testing) {
                return location;
            }
        }
    }, {
        key: 'localStorage',
        get: function get() {
            if (!testing && typeof window !== 'undefined') {
                return localStorage;
            }
        }
    }, {
        key: 'sessionStorage',
        get: function get() {
            if (!testing && typeof window !== 'undefined') {
                return sessionStorage;
            }
        }
    }, {
        key: 'XMLHttpRequest',
        get: function get() {
            if (!testing && typeof window !== 'undefined') {
                return request || XMLHttpRequest;
            }
        }
    }, {
        key: 'timer',
        get: function get() {
            if (!testing) {
                return timer;
            }
        }
    }]);

    return Global;
}();

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MetadataService = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(0);

var _JsonService = __webpack_require__(8);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OidcMetadataUrlPath = '.well-known/openid-configuration';

var MetadataService = exports.MetadataService = function () {
    function MetadataService(settings) {
        var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService.JsonService;

        _classCallCheck(this, MetadataService);

        if (!settings) {
            _Log.Log.error("MetadataService: No settings passed to MetadataService");
            throw new Error("settings");
        }

        this._settings = settings;
        this._jsonService = new JsonServiceCtor();
    }

    MetadataService.prototype.getMetadata = function getMetadata() {
        var _this = this;

        if (this._settings.metadata) {
            _Log.Log.debug("MetadataService.getMetadata: Returning metadata from settings");
            return Promise.resolve(this._settings.metadata);
        }

        if (!this.metadataUrl) {
            _Log.Log.error("MetadataService.getMetadata: No authority or metadataUrl configured on settings");
            return Promise.reject(new Error("No authority or metadataUrl configured on settings"));
        }

        _Log.Log.debug("MetadataService.getMetadata: getting metadata from", this.metadataUrl);

        return this._jsonService.getJson(this.metadataUrl).then(function (metadata) {
            _Log.Log.debug("MetadataService.getMetadata: json received");
            _this._settings.metadata = metadata;
            return metadata;
        });
    };

    MetadataService.prototype.getIssuer = function getIssuer() {
        return this._getMetadataProperty("issuer");
    };

    MetadataService.prototype.getAuthorizationEndpoint = function getAuthorizationEndpoint() {
        return this._getMetadataProperty("authorization_endpoint");
    };

    MetadataService.prototype.getUserInfoEndpoint = function getUserInfoEndpoint() {
        return this._getMetadataProperty("userinfo_endpoint");
    };

    MetadataService.prototype.getTokenEndpoint = function getTokenEndpoint() {
        return this._getMetadataProperty("token_endpoint", true);
    };

    MetadataService.prototype.getCheckSessionIframe = function getCheckSessionIframe() {
        return this._getMetadataProperty("check_session_iframe", true);
    };

    MetadataService.prototype.getEndSessionEndpoint = function getEndSessionEndpoint() {
        return this._getMetadataProperty("end_session_endpoint", true);
    };

    MetadataService.prototype.getRevocationEndpoint = function getRevocationEndpoint() {
        return this._getMetadataProperty("revocation_endpoint", true);
    };

    MetadataService.prototype._getMetadataProperty = function _getMetadataProperty(name) {
        var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        _Log.Log.debug("MetadataService.getMetadataProperty for: " + name);

        return this.getMetadata().then(function (metadata) {
            _Log.Log.debug("MetadataService.getMetadataProperty: metadata recieved");

            if (metadata[name] === undefined) {

                if (optional === true) {
                    _Log.Log.warn("MetadataService.getMetadataProperty: Metadata does not contain optional property " + name);
                    return undefined;
                } else {
                    _Log.Log.error("MetadataService.getMetadataProperty: Metadata does not contain property " + name);
                    throw new Error("Metadata does not contain property " + name);
                }
            }

            return metadata[name];
        });
    };

    MetadataService.prototype.getSigningKeys = function getSigningKeys() {
        var _this2 = this;

        if (this._settings.signingKeys) {
            _Log.Log.debug("MetadataService.getSigningKeys: Returning signingKeys from settings");
            return Promise.resolve(this._settings.signingKeys);
        }

        return this._getMetadataProperty("jwks_uri").then(function (jwks_uri) {
            _Log.Log.debug("MetadataService.getSigningKeys: jwks_uri received", jwks_uri);

            return _this2._jsonService.getJson(jwks_uri).then(function (keySet) {
                _Log.Log.debug("MetadataService.getSigningKeys: key set received", keySet);

                if (!keySet.keys) {
                    _Log.Log.error("MetadataService.getSigningKeys: Missing keys on keyset");
                    throw new Error("Missing keys on keyset");
                }

                _this2._settings.signingKeys = keySet.keys;
                return _this2._settings.signingKeys;
            });
        });
    };

    _createClass(MetadataService, [{
        key: 'metadataUrl',
        get: function get() {
            if (!this._metadataUrl) {
                if (this._settings.metadataUrl) {
                    this._metadataUrl = this._settings.metadataUrl;
                } else {
                    this._metadataUrl = this._settings.authority;

                    if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {
                        if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {
                            this._metadataUrl += '/';
                        }
                        this._metadataUrl += OidcMetadataUrlPath;
                    }
                }
            }

            return this._metadataUrl;
        }
    }]);

    return MetadataService;
}();

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UrlUtility = undefined;

var _Log = __webpack_require__(0);

var _Global = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var UrlUtility = exports.UrlUtility = function () {
    function UrlUtility() {
        _classCallCheck(this, UrlUtility);
    }

    UrlUtility.addQueryParam = function addQueryParam(url, name, value) {
        if (url.indexOf('?') < 0) {
            url += "?";
        }

        if (url[url.length - 1] !== "?") {
            url += "&";
        }

        url += encodeURIComponent(name);
        url += "=";
        url += encodeURIComponent(value);

        return url;
    };

    UrlUtility.parseUrlFragment = function parseUrlFragment(value) {
        var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#";
        var global = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Global.Global;

        if (typeof value !== 'string') {
            value = global.location.href;
        }

        var idx = value.lastIndexOf(delimiter);
        if (idx >= 0) {
            value = value.substr(idx + 1);
        }

        var params = {},
            regex = /([^&=]+)=([^&]*)/g,
            m;

        var counter = 0;
        while (m = regex.exec(value)) {
            params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
            if (counter++ > 50) {
                _Log.Log.error("UrlUtility.parseUrlFragment: response exceeded expected number of parameters", value);
                return {
                    error: "Response exceeded expected number of parameters"
                };
            }
        }

        for (var prop in params) {
            return params;
        }

        return {};
    };

    return UrlUtility;
}();

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OidcClientSettings = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(0);

var _WebStorageStateStore = __webpack_require__(5);

var _ResponseValidator = __webpack_require__(20);

var _MetadataService = __webpack_require__(2);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OidcMetadataUrlPath = '.well-known/openid-configuration';

var DefaultResponseType = "id_token";
var DefaultScope = "openid";
var DefaultStaleStateAge = 60 * 15; // seconds
var DefaultClockSkewInSeconds = 60 * 5;

var OidcClientSettings = exports.OidcClientSettings = function () {
    function OidcClientSettings() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            authority = _ref.authority,
            metadataUrl = _ref.metadataUrl,
            metadata = _ref.metadata,
            signingKeys = _ref.signingKeys,
            client_id = _ref.client_id,
            client_secret = _ref.client_secret,
            _ref$response_type = _ref.response_type,
            response_type = _ref$response_type === undefined ? DefaultResponseType : _ref$response_type,
            _ref$scope = _ref.scope,
            scope = _ref$scope === undefined ? DefaultScope : _ref$scope,
            redirect_uri = _ref.redirect_uri,
            post_logout_redirect_uri = _ref.post_logout_redirect_uri,
            prompt = _ref.prompt,
            display = _ref.display,
            max_age = _ref.max_age,
            ui_locales = _ref.ui_locales,
            acr_values = _ref.acr_values,
            resource = _ref.resource,
            _ref$filterProtocolCl = _ref.filterProtocolClaims,
            filterProtocolClaims = _ref$filterProtocolCl === undefined ? true : _ref$filterProtocolCl,
            _ref$loadUserInfo = _ref.loadUserInfo,
            loadUserInfo = _ref$loadUserInfo === undefined ? true : _ref$loadUserInfo,
            _ref$staleStateAge = _ref.staleStateAge,
            staleStateAge = _ref$staleStateAge === undefined ? DefaultStaleStateAge : _ref$staleStateAge,
            _ref$clockSkew = _ref.clockSkew,
            clockSkew = _ref$clockSkew === undefined ? DefaultClockSkewInSeconds : _ref$clockSkew,
            _ref$stateStore = _ref.stateStore,
            stateStore = _ref$stateStore === undefined ? new _WebStorageStateStore.WebStorageStateStore() : _ref$stateStore,
            _ref$ResponseValidato = _ref.ResponseValidatorCtor,
            ResponseValidatorCtor = _ref$ResponseValidato === undefined ? _ResponseValidator.ResponseValidator : _ref$ResponseValidato,
            _ref$MetadataServiceC = _ref.MetadataServiceCtor,
            MetadataServiceCtor = _ref$MetadataServiceC === undefined ? _MetadataService.MetadataService : _ref$MetadataServiceC,
            _ref$extraQueryParams = _ref.extraQueryParams,
            extraQueryParams = _ref$extraQueryParams === undefined ? {} : _ref$extraQueryParams;

        _classCallCheck(this, OidcClientSettings);

        this._authority = authority;
        this._metadataUrl = metadataUrl;
        this._metadata = metadata;
        this._signingKeys = signingKeys;

        this._client_id = client_id;
        this._client_secret = client_secret;
        this._response_type = response_type;
        this._scope = scope;
        this._redirect_uri = redirect_uri;
        this._post_logout_redirect_uri = post_logout_redirect_uri;

        this._prompt = prompt;
        this._display = display;
        this._max_age = max_age;
        this._ui_locales = ui_locales;
        this._acr_values = acr_values;
        this._resource = resource;

        this._filterProtocolClaims = !!filterProtocolClaims;
        this._loadUserInfo = !!loadUserInfo;
        this._staleStateAge = staleStateAge;
        this._clockSkew = clockSkew;

        this._stateStore = stateStore;
        this._validator = new ResponseValidatorCtor(this);
        this._metadataService = new MetadataServiceCtor(this);

        this._extraQueryParams = (typeof extraQueryParams === 'undefined' ? 'undefined' : _typeof(extraQueryParams)) === 'object' ? extraQueryParams : {};
    }

    // client config


    _createClass(OidcClientSettings, [{
        key: 'client_id',
        get: function get() {
            return this._client_id;
        },
        set: function set(value) {
            if (!this._client_id) {
                // one-time set only
                this._client_id = value;
            } else {
                _Log.Log.error("OidcClientSettings.set_client_id: client_id has already been assigned.");
                throw new Error("client_id has already been assigned.");
            }
        }
    }, {
        key: 'client_secret',
        get: function get() {
            return this._client_secret;
        }
    }, {
        key: 'response_type',
        get: function get() {
            return this._response_type;
        }
    }, {
        key: 'scope',
        get: function get() {
            return this._scope;
        }
    }, {
        key: 'redirect_uri',
        get: function get() {
            return this._redirect_uri;
        }
    }, {
        key: 'post_logout_redirect_uri',
        get: function get() {
            return this._post_logout_redirect_uri;
        }

        // optional protocol params

    }, {
        key: 'prompt',
        get: function get() {
            return this._prompt;
        }
    }, {
        key: 'display',
        get: function get() {
            return this._display;
        }
    }, {
        key: 'max_age',
        get: function get() {
            return this._max_age;
        }
    }, {
        key: 'ui_locales',
        get: function get() {
            return this._ui_locales;
        }
    }, {
        key: 'acr_values',
        get: function get() {
            return this._acr_values;
        }
    }, {
        key: 'resource',
        get: function get() {
            return this._resource;
        }

        // metadata

    }, {
        key: 'authority',
        get: function get() {
            return this._authority;
        },
        set: function set(value) {
            if (!this._authority) {
                // one-time set only
                this._authority = value;
            } else {
                _Log.Log.error("OidcClientSettings.set_authority: authority has already been assigned.");
                throw new Error("authority has already been assigned.");
            }
        }
    }, {
        key: 'metadataUrl',
        get: function get() {
            if (!this._metadataUrl) {
                this._metadataUrl = this.authority;

                if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {
                    if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {
                        this._metadataUrl += '/';
                    }
                    this._metadataUrl += OidcMetadataUrlPath;
                }
            }

            return this._metadataUrl;
        }

        // settable/cachable metadata values

    }, {
        key: 'metadata',
        get: function get() {
            return this._metadata;
        },
        set: function set(value) {
            this._metadata = value;
        }
    }, {
        key: 'signingKeys',
        get: function get() {
            return this._signingKeys;
        },
        set: function set(value) {
            this._signingKeys = value;
        }

        // behavior flags

    }, {
        key: 'filterProtocolClaims',
        get: function get() {
            return this._filterProtocolClaims;
        }
    }, {
        key: 'loadUserInfo',
        get: function get() {
            return this._loadUserInfo;
        }
    }, {
        key: 'staleStateAge',
        get: function get() {
            return this._staleStateAge;
        }
    }, {
        key: 'clockSkew',
        get: function get() {
            return this._clockSkew;
        }
    }, {
        key: 'stateStore',
        get: function get() {
            return this._stateStore;
        }
    }, {
        key: 'validator',
        get: function get() {
            return this._validator;
        }
    }, {
        key: 'metadataService',
        get: function get() {
            return this._metadataService;
        }

        // extra query params

    }, {
        key: 'extraQueryParams',
        get: function get() {
            return this._extraQueryParams;
        },
        set: function set(value) {
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
                this._extraQueryParams = value;
            } else {
                this._extraQueryParams = {};
            }
        }
    }]);

    return OidcClientSettings;
}();

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebStorageStateStore = undefined;

var _Log = __webpack_require__(0);

var _Global = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var WebStorageStateStore = exports.WebStorageStateStore = function () {
    function WebStorageStateStore() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$prefix = _ref.prefix,
            prefix = _ref$prefix === undefined ? "oidc." : _ref$prefix,
            _ref$store = _ref.store,
            store = _ref$store === undefined ? _Global.Global.localStorage : _ref$store;

        _classCallCheck(this, WebStorageStateStore);

        this._store = store;
        this._prefix = prefix;
    }

    WebStorageStateStore.prototype.set = function set(key, value) {
        _Log.Log.debug("WebStorageStateStore.set", key);

        key = this._prefix + key;

        this._store.setItem(key, value);

        return Promise.resolve();
    };

    WebStorageStateStore.prototype.get = function get(key) {
        _Log.Log.debug("WebStorageStateStore.get", key);

        key = this._prefix + key;

        var item = this._store.getItem(key);

        return Promise.resolve(item);
    };

    WebStorageStateStore.prototype.remove = function remove(key) {
        _Log.Log.debug("WebStorageStateStore.remove", key);

        key = this._prefix + key;

        var item = this._store.getItem(key);
        this._store.removeItem(key);

        return Promise.resolve(item);
    };

    WebStorageStateStore.prototype.getAllKeys = function getAllKeys() {
        _Log.Log.debug("WebStorageStateStore.getAllKeys");

        var keys = [];

        for (var index = 0; index < this._store.length; index++) {
            var key = this._store.key(index);

            if (key.indexOf(this._prefix) === 0) {
                keys.push(key.substr(this._prefix.length));
            }
        }

        return Promise.resolve(keys);
    };

    return WebStorageStateStore;
}();

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.State = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(0);

var _random = __webpack_require__(11);

var _random2 = _interopRequireDefault(_random);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var State = exports.State = function () {
    function State() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            id = _ref.id,
            data = _ref.data,
            created = _ref.created;

        _classCallCheck(this, State);

        this._id = id || (0, _random2.default)();
        this._data = data;

        if (typeof created === 'number' && created > 0) {
            this._created = created;
        } else {
            this._created = parseInt(Date.now() / 1000);
        }
    }

    State.prototype.toStorageString = function toStorageString() {
        _Log.Log.debug("State.toStorageString");
        return JSON.stringify({
            id: this.id,
            data: this.data,
            created: this.created
        });
    };

    State.fromStorageString = function fromStorageString(storageString) {
        _Log.Log.debug("State.fromStorageString");
        return new State(JSON.parse(storageString));
    };

    State.clearStaleState = function clearStaleState(storage, age) {

        var cutoff = Date.now() / 1000 - age;

        return storage.getAllKeys().then(function (keys) {
            _Log.Log.debug("State.clearStaleState: got keys", keys);

            var promises = [];

            var _loop = function _loop(i) {
                var key = keys[i];
                p = storage.get(key).then(function (item) {
                    var remove = false;

                    if (item) {
                        try {
                            var state = State.fromStorageString(item);

                            _Log.Log.debug("State.clearStaleState: got item from key: ", key, state.created);

                            if (state.created <= cutoff) {
                                remove = true;
                            }
                        } catch (e) {
                            _Log.Log.error("State.clearStaleState: Error parsing state for key", key, e.message);
                            remove = true;
                        }
                    } else {
                        _Log.Log.debug("State.clearStaleState: no item in storage for key: ", key);
                        remove = true;
                    }

                    if (remove) {
                        _Log.Log.debug("State.clearStaleState: removed item for key: ", key);
                        return storage.remove(key);
                    }
                });


                promises.push(p);
            };

            for (var i = 0; i < keys.length; i++) {
                var p;

                _loop(i);
            }

            _Log.Log.debug("State.clearStaleState: waiting on promise count:", promises.length);
            return Promise.all(promises);
        });
    };

    _createClass(State, [{
        key: 'id',
        get: function get() {
            return this._id;
        }
    }, {
        key: 'data',
        get: function get() {
            return this._data;
        }
    }, {
        key: 'created',
        get: function get() {
            return this._created;
        }
    }]);

    return State;
}();

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OidcClient = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(0);

var _OidcClientSettings = __webpack_require__(4);

var _ErrorResponse = __webpack_require__(9);

var _SigninRequest = __webpack_require__(29);

var _SigninResponse = __webpack_require__(30);

var _SignoutRequest = __webpack_require__(31);

var _SignoutResponse = __webpack_require__(32);

var _SigninState = __webpack_require__(10);

var _State = __webpack_require__(6);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OidcClient = exports.OidcClient = function () {
    function OidcClient() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, OidcClient);

        if (settings instanceof _OidcClientSettings.OidcClientSettings) {
            this._settings = settings;
        } else {
            this._settings = new _OidcClientSettings.OidcClientSettings(settings);
        }
    }

    OidcClient.prototype.createSigninRequest = function createSigninRequest() {
        var _this = this;

        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            response_type = _ref.response_type,
            scope = _ref.scope,
            redirect_uri = _ref.redirect_uri,
            data = _ref.data,
            state = _ref.state,
            prompt = _ref.prompt,
            display = _ref.display,
            max_age = _ref.max_age,
            ui_locales = _ref.ui_locales,
            id_token_hint = _ref.id_token_hint,
            login_hint = _ref.login_hint,
            acr_values = _ref.acr_values,
            resource = _ref.resource,
            request = _ref.request,
            request_uri = _ref.request_uri,
            extraQueryParams = _ref.extraQueryParams;

        var stateStore = arguments[1];

        _Log.Log.debug("OidcClient.createSigninRequest");

        var client_id = this._settings.client_id;
        response_type = response_type || this._settings.response_type;
        scope = scope || this._settings.scope;
        redirect_uri = redirect_uri || this._settings.redirect_uri;

        // id_token_hint, login_hint aren't allowed on _settings
        prompt = prompt || this._settings.prompt;
        display = display || this._settings.display;
        max_age = max_age || this._settings.max_age;
        ui_locales = ui_locales || this._settings.ui_locales;
        acr_values = acr_values || this._settings.acr_values;
        resource = resource || this._settings.resource;
        extraQueryParams = extraQueryParams || this._settings.extraQueryParams;

        var authority = this._settings.authority;

        return this._metadataService.getAuthorizationEndpoint().then(function (url) {
            _Log.Log.debug("OidcClient.createSigninRequest: Received authorization endpoint", url);

            var signinRequest = new _SigninRequest.SigninRequest({
                url: url,
                client_id: client_id,
                redirect_uri: redirect_uri,
                response_type: response_type,
                scope: scope,
                data: data || state,
                authority: authority,
                prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values,
                resource: resource, request: request, request_uri: request_uri, extraQueryParams: extraQueryParams
            });

            var signinState = signinRequest.state;
            stateStore = stateStore || _this._stateStore;

            return stateStore.set(signinState.id, signinState.toStorageString()).then(function () {
                return signinRequest;
            });
        });
    };

    OidcClient.prototype.processSigninResponse = function processSigninResponse(url, stateStore) {
        var _this2 = this;

        _Log.Log.debug("OidcClient.processSigninResponse");

        var response = new _SigninResponse.SigninResponse(url);

        if (!response.state) {
            _Log.Log.error("OidcClient.processSigninResponse: No state in response");
            return Promise.reject(new Error("No state in response"));
        }

        stateStore = stateStore || this._stateStore;

        return stateStore.remove(response.state).then(function (storedStateString) {
            if (!storedStateString) {
                _Log.Log.error("OidcClient.processSigninResponse: No matching state found in storage");
                throw new Error("No matching state found in storage");
            }

            var state = _SigninState.SigninState.fromStorageString(storedStateString);

            _Log.Log.debug("OidcClient.processSigninResponse: Received state from storage; validating response");
            return _this2._validator.validateSigninResponse(state, response);
        });
    };

    OidcClient.prototype.createSignoutRequest = function createSignoutRequest() {
        var _this3 = this;

        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            id_token_hint = _ref2.id_token_hint,
            data = _ref2.data,
            state = _ref2.state,
            post_logout_redirect_uri = _ref2.post_logout_redirect_uri;

        var stateStore = arguments[1];

        _Log.Log.debug("OidcClient.createSignoutRequest");

        post_logout_redirect_uri = post_logout_redirect_uri || this._settings.post_logout_redirect_uri;

        return this._metadataService.getEndSessionEndpoint().then(function (url) {
            if (!url) {
                _Log.Log.error("OidcClient.createSignoutRequest: No end session endpoint url returned");
                throw new Error("no end session endpoint");
            }

            _Log.Log.debug("OidcClient.createSignoutRequest: Received end session endpoint", url);

            var request = new _SignoutRequest.SignoutRequest({
                url: url,
                id_token_hint: id_token_hint,
                post_logout_redirect_uri: post_logout_redirect_uri,
                data: data || state
            });

            var signoutState = request.state;
            if (signoutState) {
                _Log.Log.debug("OidcClient.createSignoutRequest: Signout request has state to persist");

                stateStore = stateStore || _this3._stateStore;
                stateStore.set(signoutState.id, signoutState.toStorageString());
            }

            return request;
        });
    };

    OidcClient.prototype.processSignoutResponse = function processSignoutResponse(url, stateStore) {
        var _this4 = this;

        _Log.Log.debug("OidcClient.processSignoutResponse");

        var response = new _SignoutResponse.SignoutResponse(url);
        if (!response.state) {
            _Log.Log.debug("OidcClient.processSignoutResponse: No state in response");

            if (response.error) {
                _Log.Log.warn("OidcClient.processSignoutResponse: Response was error: ", response.error);
                return Promise.reject(new _ErrorResponse.ErrorResponse(response));
            }

            return Promise.resolve(response);
        }

        var stateKey = response.state;

        stateStore = stateStore || this._stateStore;

        return stateStore.remove(stateKey).then(function (storedStateString) {
            if (!storedStateString) {
                _Log.Log.error("OidcClient.processSignoutResponse: No matching state found in storage");
                throw new Error("No matching state found in storage");
            }

            var state = _State.State.fromStorageString(storedStateString);

            _Log.Log.debug("OidcClient.processSignoutResponse: Received state from storage; validating response");
            return _this4._validator.validateSignoutResponse(state, response);
        });
    };

    OidcClient.prototype.clearStaleState = function clearStaleState(stateStore) {
        _Log.Log.debug("OidcClient.clearStaleState");

        stateStore = stateStore || this._stateStore;

        return _State.State.clearStaleState(stateStore, this.settings.staleStateAge);
    };

    _createClass(OidcClient, [{
        key: '_stateStore',
        get: function get() {
            return this.settings.stateStore;
        }
    }, {
        key: '_validator',
        get: function get() {
            return this.settings.validator;
        }
    }, {
        key: '_metadataService',
        get: function get() {
            return this.settings.metadataService;
        }
    }, {
        key: 'settings',
        get: function get() {
            return this._settings;
        }
    }, {
        key: 'metadataService',
        get: function get() {
            return this._metadataService;
        }
    }]);

    return OidcClient;
}();

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.JsonService = undefined;

var _Log = __webpack_require__(0);

var _Global = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var JsonService = exports.JsonService = function () {
    function JsonService() {
        var XMLHttpRequestCtor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _Global.Global.XMLHttpRequest;

        _classCallCheck(this, JsonService);

        this._XMLHttpRequest = XMLHttpRequestCtor;
    }

    JsonService.prototype.getJson = function getJson(url, token) {
        var _this = this;

        if (!url) {
            _Log.Log.error("JsonService.getJson: No url passed");
            throw new Error("url");
        }

        _Log.Log.debug("JsonService.getJson, url: ", url);

        return new Promise(function (resolve, reject) {

            var req = new _this._XMLHttpRequest();
            req.open('GET', url);

            req.onload = function () {
                _Log.Log.debug("JsonService.getJson: HTTP response received, status", req.status);

                if (req.status === 200) {
                    var contentType = req.getResponseHeader("Content-Type");
                    if (contentType && contentType.startsWith("application/json")) {
                        try {
                            resolve(JSON.parse(req.responseText));
                        } catch (e) {
                            _Log.Log.error("JsonService.getJson: Error parsing JSON response", e.message);
                            reject(e);
                        }
                    } else {
                        reject(Error("Invalid response Content-Type: " + contentType + ", from URL: " + url));
                    }
                } else {
                    reject(Error(req.statusText + " (" + req.status + ")"));
                }
            };

            req.onerror = function () {
                _Log.Log.error("JsonService.getJson: network error");
                reject(Error("Network Error"));
            };

            if (token) {
                _Log.Log.debug("JsonService.getJson: token passed, setting Authorization header");
                req.setRequestHeader("Authorization", "Bearer " + token);
            }

            req.send();
        });
    };

    return JsonService;
}();

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.ErrorResponse = undefined;

var _Log = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var ErrorResponse = exports.ErrorResponse = function (_Error) {
        _inherits(ErrorResponse, _Error);

        function ErrorResponse() {
                var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                    error = _ref.error,
                    error_description = _ref.error_description,
                    error_uri = _ref.error_uri,
                    state = _ref.state;

                _classCallCheck(this, ErrorResponse);

                if (!error) {
                        _Log.Log.error("No error passed to ErrorResponse");
                        throw new Error("error");
                }

                var _this = _possibleConstructorReturn(this, _Error.call(this, error_description || error));

                _this.name = "ErrorResponse";

                _this.error = error;
                _this.error_description = error_description;
                _this.error_uri = error_uri;

                _this.state = state;
                return _this;
        }

        return ErrorResponse;
}(Error);

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SigninState = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Log = __webpack_require__(0);

var _State2 = __webpack_require__(6);

var _random = __webpack_require__(11);

var _random2 = _interopRequireDefault(_random);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SigninState = exports.SigninState = function (_State) {
    _inherits(SigninState, _State);

    function SigninState() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            nonce = _ref.nonce,
            authority = _ref.authority,
            client_id = _ref.client_id;

        _classCallCheck(this, SigninState);

        var _this = _possibleConstructorReturn(this, _State.call(this, arguments[0]));

        if (nonce === true) {
            _this._nonce = (0, _random2.default)();
        } else if (nonce) {
            _this._nonce = nonce;
        }

        _this._authority = authority;
        _this._client_id = client_id;
        return _this;
    }

    SigninState.prototype.toStorageString = function toStorageString() {
        _Log.Log.debug("SigninState.toStorageString");
        return JSON.stringify({
            id: this.id,
            data: this.data,
            created: this.created,
            nonce: this.nonce,
            authority: this.authority,
            client_id: this.client_id
        });
    };

    SigninState.fromStorageString = function fromStorageString(storageString) {
        _Log.Log.debug("SigninState.fromStorageString");
        var data = JSON.parse(storageString);
        return new SigninState(data);
    };

    _createClass(SigninState, [{
        key: 'nonce',
        get: function get() {
            return this._nonce;
        }
    }, {
        key: 'authority',
        get: function get() {
            return this._authority;
        }
    }, {
        key: 'client_id',
        get: function get() {
            return this._client_id;
        }
    }]);

    return SigninState;
}(_State2.State);

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = random;
// NOTICE: the code in this file originally developed by Microsoft
// original source: https://github.com/AzureAD/azure-activedirectory-library-for-js/blob/master/lib/adal.js#L1029
//----------------------------------------------------------------------
// AdalJS v1.0.8
// @preserve Copyright (c) Microsoft Open Technologies, Inc.
// All Rights Reserved
// Apache License 2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//----------------------------------------------------------------------

function random() {
    var guidHolder = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx';
    var hex = '0123456789abcdef';
    var r = 0;
    var guidResponse = "";
    for (var i = 0; i < guidHolder.length; i++) {
        if (guidHolder[i] !== '-' && guidHolder[i] !== '4') {
            // each x and y needs to be random
            r = Math.random() * 16 | 0;
        }

        if (guidHolder[i] === 'x') {
            guidResponse += hex[r];
        } else if (guidHolder[i] === 'y') {
            // clock-seq-and-reserved first hex is filtered and remaining hex values are random
            r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??
            r |= 0x8; // set pos 3 to 1 as 1???
            guidResponse += hex[r];
        } else {
            guidResponse += guidHolder[i];
        }
    }
    return guidResponse;
}
module.exports = exports['default'];

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.User = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var User = exports.User = function () {
    function User(_ref) {
        var id_token = _ref.id_token,
            session_state = _ref.session_state,
            access_token = _ref.access_token,
            token_type = _ref.token_type,
            scope = _ref.scope,
            profile = _ref.profile,
            expires_at = _ref.expires_at,
            state = _ref.state;

        _classCallCheck(this, User);

        this.id_token = id_token;
        this.session_state = session_state;
        this.access_token = access_token;
        this.token_type = token_type;
        this.scope = scope;
        this.profile = profile;
        this.expires_at = expires_at;
        this.state = state;
    }

    User.prototype.toStorageString = function toStorageString() {
        _Log.Log.debug("User.toStorageString");
        return JSON.stringify({
            id_token: this.id_token,
            session_state: this.session_state,
            access_token: this.access_token,
            token_type: this.token_type,
            scope: this.scope,
            profile: this.profile,
            expires_at: this.expires_at
        });
    };

    User.fromStorageString = function fromStorageString(storageString) {
        _Log.Log.debug("User.fromStorageString");
        return new User(JSON.parse(storageString));
    };

    _createClass(User, [{
        key: "expires_in",
        get: function get() {
            if (this.expires_at) {
                var now = parseInt(Date.now() / 1000);
                return this.expires_at - now;
            }
            return undefined;
        }
    }, {
        key: "expired",
        get: function get() {
            var expires_in = this.expires_in;
            if (expires_in !== undefined) {
                return expires_in <= 0;
            }
            return undefined;
        }
    }, {
        key: "scopes",
        get: function get() {
            return (this.scope || "").split(" ");
        }
    }]);

    return User;
}();

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccessTokenEvents = undefined;

var _Log = __webpack_require__(0);

var _Timer = __webpack_require__(42);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var DefaultAccessTokenExpiringNotificationTime = 60; // seconds

var AccessTokenEvents = exports.AccessTokenEvents = function () {
    function AccessTokenEvents() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime,
            accessTokenExpiringNotificationTime = _ref$accessTokenExpir === undefined ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir,
            _ref$accessTokenExpir2 = _ref.accessTokenExpiringTimer,
            accessTokenExpiringTimer = _ref$accessTokenExpir2 === undefined ? new _Timer.Timer("Access token expiring") : _ref$accessTokenExpir2,
            _ref$accessTokenExpir3 = _ref.accessTokenExpiredTimer,
            accessTokenExpiredTimer = _ref$accessTokenExpir3 === undefined ? new _Timer.Timer("Access token expired") : _ref$accessTokenExpir3;

        _classCallCheck(this, AccessTokenEvents);

        this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;

        this._accessTokenExpiring = accessTokenExpiringTimer;
        this._accessTokenExpired = accessTokenExpiredTimer;
    }

    AccessTokenEvents.prototype.load = function load(container) {
        // only register events if there's an access token and it has an expiration
        if (container.access_token && container.expires_in !== undefined) {
            var duration = container.expires_in;
            _Log.Log.debug("AccessTokenEvents.load: access token present, remaining duration:", duration);

            if (duration > 0) {
                // only register expiring if we still have time
                var expiring = duration - this._accessTokenExpiringNotificationTime;
                if (expiring <= 0) {
                    expiring = 1;
                }

                _Log.Log.debug("AccessTokenEvents.load: registering expiring timer in:", expiring);
                this._accessTokenExpiring.init(expiring);
            } else {
                _Log.Log.debug("AccessTokenEvents.load: canceling existing expiring timer becase we're past expiration.");
                this._accessTokenExpiring.cancel();
            }

            // if it's negative, it will still fire
            var expired = duration + 1;
            _Log.Log.debug("AccessTokenEvents.load: registering expired timer in:", expired);
            this._accessTokenExpired.init(expired);
        } else {
            this._accessTokenExpiring.cancel();
            this._accessTokenExpired.cancel();
        }
    };

    AccessTokenEvents.prototype.unload = function unload() {
        _Log.Log.debug("AccessTokenEvents.unload: canceling existing access token timers");
        this._accessTokenExpiring.cancel();
        this._accessTokenExpired.cancel();
    };

    AccessTokenEvents.prototype.addAccessTokenExpiring = function addAccessTokenExpiring(cb) {
        this._accessTokenExpiring.addHandler(cb);
    };

    AccessTokenEvents.prototype.removeAccessTokenExpiring = function removeAccessTokenExpiring(cb) {
        this._accessTokenExpiring.removeHandler(cb);
    };

    AccessTokenEvents.prototype.addAccessTokenExpired = function addAccessTokenExpired(cb) {
        this._accessTokenExpired.addHandler(cb);
    };

    AccessTokenEvents.prototype.removeAccessTokenExpired = function removeAccessTokenExpired(cb) {
        this._accessTokenExpired.removeHandler(cb);
    };

    return AccessTokenEvents;
}();

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Event = undefined;

var _Log = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var Event = exports.Event = function () {
    function Event(name) {
        _classCallCheck(this, Event);

        this._name = name;
        this._callbacks = [];
    }

    Event.prototype.addHandler = function addHandler(cb) {
        this._callbacks.push(cb);
    };

    Event.prototype.removeHandler = function removeHandler(cb) {
        var idx = this._callbacks.findIndex(function (item) {
            return item === cb;
        });
        if (idx >= 0) {
            this._callbacks.splice(idx, 1);
        }
    };

    Event.prototype.raise = function raise() {
        _Log.Log.debug("Event: Raising event: " + this._name);
        for (var i = 0; i < this._callbacks.length; i++) {
            var _callbacks;

            (_callbacks = this._callbacks)[i].apply(_callbacks, arguments);
        }
    };

    return Event;
}();

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SessionMonitor = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(0);

var _CheckSessionIFrame = __webpack_require__(16);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SessionMonitor = exports.SessionMonitor = function () {
    function SessionMonitor(userManager) {
        var _this = this;

        var CheckSessionIFrameCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _CheckSessionIFrame.CheckSessionIFrame;

        _classCallCheck(this, SessionMonitor);

        if (!userManager) {
            _Log.Log.error("SessionMonitor.ctor: No user manager passed to SessionMonitor");
            throw new Error("userManager");
        }

        this._userManager = userManager;
        this._CheckSessionIFrameCtor = CheckSessionIFrameCtor;

        this._userManager.events.addUserLoaded(this._start.bind(this));
        this._userManager.events.addUserUnloaded(this._stop.bind(this));

        this._userManager.getUser().then(function (user) {
            // doing this manually here since calling getUser 
            // doesn't trigger load event.
            if (user) {
                _this._start(user);
            }
        }).catch(function (err) {
            // catch to suppress errors since we're in a ctor
            _Log.Log.error("SessionMonitor ctor: error from getUser:", err.message);
        });
    }

    SessionMonitor.prototype._start = function _start(user) {
        var _this2 = this;

        var session_state = user.session_state;

        if (session_state) {
            this._sub = user.profile.sub;
            this._sid = user.profile.sid;
            _Log.Log.debug("SessionMonitor._start: session_state:", session_state, ", sub:", this._sub);

            if (!this._checkSessionIFrame) {
                this._metadataService.getCheckSessionIframe().then(function (url) {
                    if (url) {
                        _Log.Log.debug("SessionMonitor._start: Initializing check session iframe");

                        var client_id = _this2._client_id;
                        var interval = _this2._checkSessionInterval;
                        var stopOnError = _this2._stopCheckSessionOnError;

                        _this2._checkSessionIFrame = new _this2._CheckSessionIFrameCtor(_this2._callback.bind(_this2), client_id, url, interval, stopOnError);
                        _this2._checkSessionIFrame.load().then(function () {
                            _this2._checkSessionIFrame.start(session_state);
                        });
                    } else {
                        _Log.Log.warn("SessionMonitor._start: No check session iframe found in the metadata");
                    }
                }).catch(function (err) {
                    // catch to suppress errors since we're in non-promise callback
                    _Log.Log.error("SessionMonitor._start: Error from getCheckSessionIframe:", err.message);
                });
            } else {
                this._checkSessionIFrame.start(session_state);
            }
        }
    };

    SessionMonitor.prototype._stop = function _stop() {
        this._sub = null;
        this._sid = null;

        if (this._checkSessionIFrame) {
            _Log.Log.debug("SessionMonitor._stop");
            this._checkSessionIFrame.stop();
        }
    };

    SessionMonitor.prototype._callback = function _callback() {
        var _this3 = this;

        this._userManager.querySessionStatus().then(function (session) {
            var raiseUserSignedOutEvent = true;

            if (session) {
                if (session.sub === _this3._sub) {
                    raiseUserSignedOutEvent = false;
                    _this3._checkSessionIFrame.start(session.session_state);

                    if (session.sid === _this3._sid) {
                        _Log.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, restarting check session iframe; session_state:", session.session_state);
                    } else {
                        _Log.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, session state has changed, restarting check session iframe; session_state:", session.session_state);
                        _this3._userManager.events._raiseUserSessionChanged();
                    }
                } else {
                    _Log.Log.debug("SessionMonitor._callback: Different subject signed into OP:", session.sub);
                }
            } else {
                _Log.Log.debug("SessionMonitor._callback: Subject no longer signed into OP");
            }

            if (raiseUserSignedOutEvent) {
                _Log.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed out event");
                _this3._userManager.events._raiseUserSignedOut();
            }
        }).catch(function (err) {
            _Log.Log.debug("SessionMonitor._callback: Error calling queryCurrentSigninSession; raising signed out event", err.message);
            _this3._userManager.events._raiseUserSignedOut();
        });
    };

    _createClass(SessionMonitor, [{
        key: '_settings',
        get: function get() {
            return this._userManager.settings;
        }
    }, {
        key: '_metadataService',
        get: function get() {
            return this._userManager.metadataService;
        }
    }, {
        key: '_client_id',
        get: function get() {
            return this._settings.client_id;
        }
    }, {
        key: '_checkSessionInterval',
        get: function get() {
            return this._settings.checkSessionInterval;
        }
    }, {
        key: '_stopCheckSessionOnError',
        get: function get() {
            return this._settings.stopCheckSessionOnError;
        }
    }]);

    return SessionMonitor;
}();

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CheckSessionIFrame = undefined;

var _Log = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var DefaultInterval = 2000;

var CheckSessionIFrame = exports.CheckSessionIFrame = function () {
    function CheckSessionIFrame(callback, client_id, url, interval) {
        var stopOnError = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

        _classCallCheck(this, CheckSessionIFrame);

        this._callback = callback;
        this._client_id = client_id;
        this._url = url;
        this._interval = interval || DefaultInterval;
        this._stopOnError = stopOnError;

        var idx = url.indexOf("/", url.indexOf("//") + 2);
        this._frame_origin = url.substr(0, idx);

        this._frame = window.document.createElement("iframe");

        // shotgun approach
        this._frame.style.visibility = "hidden";
        this._frame.style.position = "absolute";
        this._frame.style.display = "none";
        this._frame.style.width = 0;
        this._frame.style.height = 0;

        this._frame.src = url;
    }

    CheckSessionIFrame.prototype.load = function load() {
        var _this = this;

        return new Promise(function (resolve) {
            _this._frame.onload = function () {
                resolve();
            };

            window.document.body.appendChild(_this._frame);
            _this._boundMessageEvent = _this._message.bind(_this);
            window.addEventListener("message", _this._boundMessageEvent, false);
        });
    };

    CheckSessionIFrame.prototype._message = function _message(e) {
        if (e.origin === this._frame_origin && e.source === this._frame.contentWindow) {
            if (e.data === "error") {
                _Log.Log.error("CheckSessionIFrame: error message from check session op iframe");
                if (this._stopOnError) {
                    this.stop();
                }
            } else if (e.data === "changed") {
                _Log.Log.debug("CheckSessionIFrame: changed message from check session op iframe");
                this.stop();
                this._callback();
            } else {
                _Log.Log.debug("CheckSessionIFrame: " + e.data + " message from check session op iframe");
            }
        }
    };

    CheckSessionIFrame.prototype.start = function start(session_state) {
        var _this2 = this;

        if (this._session_state !== session_state) {
            _Log.Log.debug("CheckSessionIFrame.start");

            this.stop();

            this._session_state = session_state;

            var send = function send() {
                _this2._frame.contentWindow.postMessage(_this2._client_id + " " + _this2._session_state, _this2._frame_origin);
            };

            // trigger now
            send();

            // and setup timer
            this._timer = window.setInterval(send, this._interval);
        }
    };

    CheckSessionIFrame.prototype.stop = function stop() {
        this._session_state = null;

        if (this._timer) {
            _Log.Log.debug("CheckSessionIFrame.stop");

            window.clearInterval(this._timer);
            this._timer = null;
        }
    };

    return CheckSessionIFrame;
}();

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenRevocationClient = undefined;

var _Log = __webpack_require__(0);

var _MetadataService = __webpack_require__(2);

var _Global = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var AccessTokenTypeHint = "access_token";

var TokenRevocationClient = exports.TokenRevocationClient = function () {
    function TokenRevocationClient(settings) {
        var XMLHttpRequestCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global.Global.XMLHttpRequest;
        var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService.MetadataService;

        _classCallCheck(this, TokenRevocationClient);

        if (!settings) {
            _Log.Log.error("TokenRevocationClient.ctor: No settings provided");
            throw new Error("No settings provided.");
        }

        this._settings = settings;
        this._XMLHttpRequestCtor = XMLHttpRequestCtor;
        this._metadataService = new MetadataServiceCtor(this._settings);
    }

    TokenRevocationClient.prototype.revoke = function revoke(accessToken, required) {
        var _this = this;

        if (!accessToken) {
            _Log.Log.error("TokenRevocationClient.revoke: No accessToken provided");
            throw new Error("No accessToken provided.");
        }

        return this._metadataService.getRevocationEndpoint().then(function (url) {
            if (!url) {
                if (required) {
                    _Log.Log.error("TokenRevocationClient.revoke: Revocation not supported");
                    throw new Error("Revocation not supported");
                }

                // not required, so don't error and just return
                return;
            }

            _Log.Log.error("TokenRevocationClient.revoke: Revoking access token");
            var client_id = _this._settings.client_id;
            var client_secret = _this._settings.client_secret;
            return _this._revoke(url, client_id, client_secret, accessToken);
        });
    };

    TokenRevocationClient.prototype._revoke = function _revoke(url, client_id, client_secret, accessToken) {
        var _this2 = this;

        return new Promise(function (resolve, reject) {

            var xhr = new _this2._XMLHttpRequestCtor();
            xhr.open("POST", url);

            xhr.onload = function () {
                _Log.Log.debug("TokenRevocationClient.revoke: HTTP response received, status", xhr.status);

                if (xhr.status === 200) {
                    resolve();
                } else {
                    reject(Error(xhr.statusText + " (" + xhr.status + ")"));
                }
            };

            var body = "client_id=" + encodeURIComponent(client_id);
            if (client_secret) {
                body += "&client_secret=" + encodeURIComponent(client_secret);
            }
            body += "&token_type_hint=" + encodeURIComponent(AccessTokenTypeHint);
            body += "&token=" + encodeURIComponent(accessToken);

            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.send(body);
        });
    };

    return TokenRevocationClient;
}();

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CordovaPopupWindow = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DefaultPopupFeatures = 'location=no,toolbar=no,zoom=no';
var DefaultPopupTarget = "_blank";

var CordovaPopupWindow = exports.CordovaPopupWindow = function () {
    function CordovaPopupWindow(params) {
        var _this = this;

        _classCallCheck(this, CordovaPopupWindow);

        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });

        this.features = params.popupWindowFeatures || DefaultPopupFeatures;
        this.target = params.popupWindowTarget || DefaultPopupTarget;

        this.redirect_uri = params.startUrl;
        _Log.Log.debug("CordovaPopupWindow.ctor: redirect_uri: " + this.redirect_uri);
    }

    CordovaPopupWindow.prototype._isInAppBrowserInstalled = function _isInAppBrowserInstalled(cordovaMetadata) {
        return ["cordova-plugin-inappbrowser", "cordova-plugin-inappbrowser.inappbrowser", "org.apache.cordova.inappbrowser"].some(function (name) {
            return cordovaMetadata.hasOwnProperty(name);
        });
    };

    CordovaPopupWindow.prototype.navigate = function navigate(params) {
        if (!params || !params.url) {
            this._error("No url provided");
        } else {
            if (!window.cordova) {
                return this._error("cordova is undefined");
            }

            var cordovaMetadata = window.cordova.require("cordova/plugin_list").metadata;
            if (this._isInAppBrowserInstalled(cordovaMetadata) === false) {
                return this._error("InAppBrowser plugin not found");
            }
            this._popup = cordova.InAppBrowser.open(params.url, this.target, this.features);
            if (this._popup) {
                _Log.Log.debug("CordovaPopupWindow.navigate: popup successfully created");

                this._exitCallbackEvent = this._exitCallback.bind(this);
                this._loadStartCallbackEvent = this._loadStartCallback.bind(this);

                this._popup.addEventListener("exit", this._exitCallbackEvent, false);
                this._popup.addEventListener("loadstart", this._loadStartCallbackEvent, false);
            } else {
                this._error("Error opening popup window");
            }
        }
        return this.promise;
    };

    CordovaPopupWindow.prototype._loadStartCallback = function _loadStartCallback(event) {
        if (event.url.indexOf(this.redirect_uri) === 0) {
            this._success({ url: event.url });
        }
    };

    CordovaPopupWindow.prototype._exitCallback = function _exitCallback(message) {
        this._error(message);
    };

    CordovaPopupWindow.prototype._success = function _success(data) {
        this._cleanup();

        _Log.Log.debug("CordovaPopupWindow: Successful response from cordova popup window");
        this._resolve(data);
    };

    CordovaPopupWindow.prototype._error = function _error(message) {
        this._cleanup();

        _Log.Log.error(message);
        this._reject(new Error(message));
    };

    CordovaPopupWindow.prototype.close = function close() {
        this._cleanup();
    };

    CordovaPopupWindow.prototype._cleanup = function _cleanup() {
        if (this._popup) {
            _Log.Log.debug("CordovaPopupWindow: cleaning up popup");
            this._popup.removeEventListener("exit", this._exitCallbackEvent, false);
            this._popup.removeEventListener("loadstart", this._loadStartCallbackEvent, false);
            this._popup.close();
        }
        this._popup = null;
    };

    _createClass(CordovaPopupWindow, [{
        key: 'promise',
        get: function get() {
            return this._promise;
        }
    }]);

    return CordovaPopupWindow;
}();

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Log = __webpack_require__(0);

Object.defineProperty(exports, 'Log', {
  enumerable: true,
  get: function get() {
    return _Log.Log;
  }
});

var _OidcClient = __webpack_require__(7);

Object.defineProperty(exports, 'OidcClient', {
  enumerable: true,
  get: function get() {
    return _OidcClient.OidcClient;
  }
});

var _OidcClientSettings = __webpack_require__(4);

Object.defineProperty(exports, 'OidcClientSettings', {
  enumerable: true,
  get: function get() {
    return _OidcClientSettings.OidcClientSettings;
  }
});

var _WebStorageStateStore = __webpack_require__(5);

Object.defineProperty(exports, 'WebStorageStateStore', {
  enumerable: true,
  get: function get() {
    return _WebStorageStateStore.WebStorageStateStore;
  }
});

var _InMemoryWebStorage = __webpack_require__(33);

Object.defineProperty(exports, 'InMemoryWebStorage', {
  enumerable: true,
  get: function get() {
    return _InMemoryWebStorage.InMemoryWebStorage;
  }
});

var _UserManager = __webpack_require__(34);

Object.defineProperty(exports, 'UserManager', {
  enumerable: true,
  get: function get() {
    return _UserManager.UserManager;
  }
});

var _AccessTokenEvents = __webpack_require__(13);

Object.defineProperty(exports, 'AccessTokenEvents', {
  enumerable: true,
  get: function get() {
    return _AccessTokenEvents.AccessTokenEvents;
  }
});

var _MetadataService = __webpack_require__(2);

Object.defineProperty(exports, 'MetadataService', {
  enumerable: true,
  get: function get() {
    return _MetadataService.MetadataService;
  }
});

var _CordovaPopupNavigator = __webpack_require__(44);

Object.defineProperty(exports, 'CordovaPopupNavigator', {
  enumerable: true,
  get: function get() {
    return _CordovaPopupNavigator.CordovaPopupNavigator;
  }
});

var _CordovaIFrameNavigator = __webpack_require__(45);

Object.defineProperty(exports, 'CordovaIFrameNavigator', {
  enumerable: true,
  get: function get() {
    return _CordovaIFrameNavigator.CordovaIFrameNavigator;
  }
});

var _CheckSessionIFrame = __webpack_require__(16);

Object.defineProperty(exports, 'CheckSessionIFrame', {
  enumerable: true,
  get: function get() {
    return _CheckSessionIFrame.CheckSessionIFrame;
  }
});

var _TokenRevocationClient = __webpack_require__(17);

Object.defineProperty(exports, 'TokenRevocationClient', {
  enumerable: true,
  get: function get() {
    return _TokenRevocationClient.TokenRevocationClient;
  }
});

var _SessionMonitor = __webpack_require__(15);

Object.defineProperty(exports, 'SessionMonitor', {
  enumerable: true,
  get: function get() {
    return _SessionMonitor.SessionMonitor;
  }
});

var _Global = __webpack_require__(1);

Object.defineProperty(exports, 'Global', {
  enumerable: true,
  get: function get() {
    return _Global.Global;
  }
});

var _User = __webpack_require__(12);

Object.defineProperty(exports, 'User', {
  enumerable: true,
  get: function get() {
    return _User.User;
  }
});

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ResponseValidator = undefined;

var _Log = __webpack_require__(0);

var _MetadataService = __webpack_require__(2);

var _UserInfoService = __webpack_require__(21);

var _ErrorResponse = __webpack_require__(9);

var _JoseUtil = __webpack_require__(22);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var ProtocolClaims = ["nonce", "at_hash", "iat", "nbf", "exp", "aud", "iss", "c_hash"];

var ResponseValidator = exports.ResponseValidator = function () {
    function ResponseValidator(settings) {
        var MetadataServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _MetadataService.MetadataService;
        var UserInfoServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _UserInfoService.UserInfoService;
        var joseUtil = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _JoseUtil.JoseUtil;

        _classCallCheck(this, ResponseValidator);

        if (!settings) {
            _Log.Log.error("ResponseValidator.ctor: No settings passed to ResponseValidator");
            throw new Error("settings");
        }

        this._settings = settings;
        this._metadataService = new MetadataServiceCtor(this._settings);
        this._userInfoService = new UserInfoServiceCtor(this._settings);
        this._joseUtil = joseUtil;
    }

    ResponseValidator.prototype.validateSigninResponse = function validateSigninResponse(state, response) {
        var _this = this;

        _Log.Log.debug("ResponseValidator.validateSigninResponse");

        return this._processSigninParams(state, response).then(function (response) {
            _Log.Log.debug("ResponseValidator.validateSigninResponse: state processed");
            return _this._validateTokens(state, response).then(function (response) {
                _Log.Log.debug("ResponseValidator.validateSigninResponse: tokens validated");
                return _this._processClaims(response).then(function (response) {
                    _Log.Log.debug("ResponseValidator.validateSigninResponse: claims processed");
                    return response;
                });
            });
        });
    };

    ResponseValidator.prototype.validateSignoutResponse = function validateSignoutResponse(state, response) {
        if (state.id !== response.state) {
            _Log.Log.error("ResponseValidator.validateSignoutResponse: State does not match");
            return Promise.reject(new Error("State does not match"));
        }

        // now that we know the state matches, take the stored data
        // and set it into the response so callers can get their state
        // this is important for both success & error outcomes
        _Log.Log.debug("ResponseValidator.validateSignoutResponse: state validated");
        response.state = state.data;

        if (response.error) {
            _Log.Log.warn("ResponseValidator.validateSignoutResponse: Response was error", response.error);
            return Promise.reject(new _ErrorResponse.ErrorResponse(response));
        }

        return Promise.resolve(response);
    };

    ResponseValidator.prototype._processSigninParams = function _processSigninParams(state, response) {
        if (state.id !== response.state) {
            _Log.Log.error("ResponseValidator._processSigninParams: State does not match");
            return Promise.reject(new Error("State does not match"));
        }

        if (!state.client_id) {
            _Log.Log.error("ResponseValidator._processSigninParams: No client_id on state");
            return Promise.reject(new Error("No client_id on state"));
        }

        if (!state.authority) {
            _Log.Log.error("ResponseValidator._processSigninParams: No authority on state");
            return Promise.reject(new Error("No authority on state"));
        }

        // this allows the authority to be loaded from the signin state
        if (!this._settings.authority) {
            this._settings.authority = state.authority;
        }
        // ensure we're using the correct authority if the authority is not loaded from signin state
        else if (this._settings.authority && this._settings.authority !== state.authority) {
                _Log.Log.error("ResponseValidator._processSigninParams: authority mismatch on settings vs. signin state");
                return Promise.reject(new Error("authority mismatch on settings vs. signin state"));
            }
        // this allows the client_id to be loaded from the signin state
        if (!this._settings.client_id) {
            this._settings.client_id = state.client_id;
        }
        // ensure we're using the correct client_id if the client_id is not loaded from signin state
        else if (this._settings.client_id && this._settings.client_id !== state.client_id) {
                _Log.Log.error("ResponseValidator._processSigninParams: client_id mismatch on settings vs. signin state");
                return Promise.reject(new Error("client_id mismatch on settings vs. signin state"));
            }

        // now that we know the state matches, take the stored data
        // and set it into the response so callers can get their state
        // this is important for both success & error outcomes
        _Log.Log.debug("ResponseValidator._processSigninParams: state validated");
        response.state = state.data;

        if (response.error) {
            _Log.Log.warn("ResponseValidator._processSigninParams: Response was error", response.error);
            return Promise.reject(new _ErrorResponse.ErrorResponse(response));
        }

        if (state.nonce && !response.id_token) {
            _Log.Log.error("ResponseValidator._processSigninParams: Expecting id_token in response");
            return Promise.reject(new Error("No id_token in response"));
        }

        if (!state.nonce && response.id_token) {
            _Log.Log.error("ResponseValidator._processSigninParams: Not expecting id_token in response");
            return Promise.reject(new Error("Unexpected id_token in response"));
        }

        return Promise.resolve(response);
    };

    ResponseValidator.prototype._processClaims = function _processClaims(response) {
        var _this2 = this;

        if (response.isOpenIdConnect) {
            _Log.Log.debug("ResponseValidator._processClaims: response is OIDC, processing claims");

            response.profile = this._filterProtocolClaims(response.profile);

            if (this._settings.loadUserInfo && response.access_token) {
                _Log.Log.debug("ResponseValidator._processClaims: loading user info");

                return this._userInfoService.getClaims(response.access_token).then(function (claims) {
                    _Log.Log.debug("ResponseValidator._processClaims: user info claims received from user info endpoint");

                    if (claims.sub !== response.profile.sub) {
                        _Log.Log.error("ResponseValidator._processClaims: sub from user info endpoint does not match sub in access_token");
                        return Promise.reject(new Error("sub from user info endpoint does not match sub in access_token"));
                    }

                    response.profile = _this2._mergeClaims(response.profile, claims);
                    _Log.Log.debug("ResponseValidator._processClaims: user info claims received, updated profile:", response.profile);

                    return response;
                });
            } else {
                _Log.Log.debug("ResponseValidator._processClaims: not loading user info");
            }
        } else {
            _Log.Log.debug("ResponseValidator._processClaims: response is not OIDC, not processing claims");
        }

        return Promise.resolve(response);
    };

    ResponseValidator.prototype._mergeClaims = function _mergeClaims(claims1, claims2) {
        var result = Object.assign({}, claims1);

        for (var name in claims2) {
            var values = claims2[name];
            if (!Array.isArray(values)) {
                values = [values];
            }

            for (var i = 0; i < values.length; i++) {
                var value = values[i];
                if (!result[name]) {
                    result[name] = value;
                } else if (Array.isArray(result[name])) {
                    if (result[name].indexOf(value) < 0) {
                        result[name].push(value);
                    }
                } else if (result[name] !== value) {
                    result[name] = [result[name], value];
                }
            }
        }

        return result;
    };

    ResponseValidator.prototype._filterProtocolClaims = function _filterProtocolClaims(claims) {
        _Log.Log.debug("ResponseValidator._filterProtocolClaims, incoming claims:", claims);

        var result = Object.assign({}, claims);

        if (this._settings._filterProtocolClaims) {
            ProtocolClaims.forEach(function (type) {
                delete result[type];
            });

            _Log.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims filtered", result);
        } else {
            _Log.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims not filtered");
        }

        return result;
    };

    ResponseValidator.prototype._validateTokens = function _validateTokens(state, response) {
        if (response.id_token) {
            if (response.access_token) {
                _Log.Log.debug("ResponseValidator._validateTokens: Validating id_token and access_token");
                return this._validateIdTokenAndAccessToken(state, response);
            }

            _Log.Log.debug("ResponseValidator._validateTokens: Validating id_token");
            return this._validateIdToken(state, response);
        }

        _Log.Log.debug("ResponseValidator._validateTokens: No id_token to validate");
        return Promise.resolve(response);
    };

    ResponseValidator.prototype._validateIdTokenAndAccessToken = function _validateIdTokenAndAccessToken(state, response) {
        var _this3 = this;

        return this._validateIdToken(state, response).then(function (response) {
            return _this3._validateAccessToken(response);
        });
    };

    ResponseValidator.prototype._validateIdToken = function _validateIdToken(state, response) {
        var _this4 = this;

        if (!state.nonce) {
            _Log.Log.error("ResponseValidator._validateIdToken: No nonce on state");
            return Promise.reject(new Error("No nonce on state"));
        }

        var jwt = this._joseUtil.parseJwt(response.id_token);
        if (!jwt || !jwt.header || !jwt.payload) {
            _Log.Log.error("ResponseValidator._validateIdToken: Failed to parse id_token", jwt);
            return Promise.reject(new Error("Failed to parse id_token"));
        }

        if (state.nonce !== jwt.payload.nonce) {
            _Log.Log.error("ResponseValidator._validateIdToken: Invalid nonce in id_token");
            return Promise.reject(new Error("Invalid nonce in id_token"));
        }

        var kid = jwt.header.kid;

        return this._metadataService.getIssuer().then(function (issuer) {
            _Log.Log.debug("ResponseValidator._validateIdToken: Received issuer");

            return _this4._metadataService.getSigningKeys().then(function (keys) {
                if (!keys) {
                    _Log.Log.error("ResponseValidator._validateIdToken: No signing keys from metadata");
                    return Promise.reject(new Error("No signing keys from metadata"));
                }

                _Log.Log.debug("ResponseValidator._validateIdToken: Received signing keys");
                var key = void 0;
                if (!kid) {
                    keys = _this4._filterByAlg(keys, jwt.header.alg);

                    if (keys.length > 1) {
                        _Log.Log.error("ResponseValidator._validateIdToken: No kid found in id_token and more than one key found in metadata");
                        return Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));
                    } else {
                        // kid is mandatory only when there are multiple keys in the referenced JWK Set document
                        // see http://openid.net/specs/openid-connect-core-1_0.html#Signing
                        key = keys[0];
                    }
                } else {
                    key = keys.filter(function (key) {
                        return key.kid === kid;
                    })[0];
                }

                if (!key) {
                    _Log.Log.error("ResponseValidator._validateIdToken: No key matching kid or alg found in signing keys");
                    return Promise.reject(new Error("No key matching kid or alg found in signing keys"));
                }

                var audience = state.client_id;

                var clockSkewInSeconds = _this4._settings.clockSkew;
                _Log.Log.debug("ResponseValidator._validateIdToken: Validaing JWT; using clock skew (in seconds) of: ", clockSkewInSeconds);

                return _this4._joseUtil.validateJwt(response.id_token, key, issuer, audience, clockSkewInSeconds).then(function () {
                    _Log.Log.debug("ResponseValidator._validateIdToken: JWT validation successful");

                    if (!jwt.payload.sub) {
                        _Log.Log.error("ResponseValidator._validateIdToken: No sub present in id_token");
                        return Promise.reject(new Error("No sub present in id_token"));
                    }

                    response.profile = jwt.payload;

                    return response;
                });
            });
        });
    };

    ResponseValidator.prototype._filterByAlg = function _filterByAlg(keys, alg) {
        var kty = null;
        if (alg.startsWith("RS")) {
            kty = "RSA";
        } else if (alg.startsWith("PS")) {
            kty = "PS";
        } else if (alg.startsWith("ES")) {
            kty = "EC";
        } else {
            _Log.Log.debug("ResponseValidator._filterByAlg: alg not supported: ", alg);
            return [];
        }

        _Log.Log.debug("ResponseValidator._filterByAlg: Looking for keys that match kty: ", kty);

        keys = keys.filter(function (key) {
            return key.kty === kty;
        });

        _Log.Log.debug("ResponseValidator._filterByAlg: Number of keys that match kty: ", kty, keys.length);

        return keys;
    };

    ResponseValidator.prototype._validateAccessToken = function _validateAccessToken(response) {
        if (!response.profile) {
            _Log.Log.error("ResponseValidator._validateAccessToken: No profile loaded from id_token");
            return Promise.reject(new Error("No profile loaded from id_token"));
        }

        if (!response.profile.at_hash) {
            _Log.Log.error("ResponseValidator._validateAccessToken: No at_hash in id_token");
            return Promise.reject(new Error("No at_hash in id_token"));
        }

        if (!response.id_token) {
            _Log.Log.error("ResponseValidator._validateAccessToken: No id_token");
            return Promise.reject(new Error("No id_token"));
        }

        var jwt = this._joseUtil.parseJwt(response.id_token);
        if (!jwt || !jwt.header) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Failed to parse id_token", jwt);
            return Promise.reject(new Error("Failed to parse id_token"));
        }

        var hashAlg = jwt.header.alg;
        if (!hashAlg || hashAlg.length !== 5) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg);
            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
        }

        var hashBits = hashAlg.substr(2, 3);
        if (!hashBits) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg, hashBits);
            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
        }

        hashBits = parseInt(hashBits);
        if (hashBits !== 256 && hashBits !== 384 && hashBits !== 512) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg, hashBits);
            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
        }

        var sha = "sha" + hashBits;
        var hash = this._joseUtil.hashString(response.access_token, sha);
        if (!hash) {
            _Log.Log.error("ResponseValidator._validateAccessToken: access_token hash failed:", sha);
            return Promise.reject(new Error("Failed to validate at_hash"));
        }

        var left = hash.substr(0, hash.length / 2);
        var left_b64u = this._joseUtil.hexToBase64Url(left);
        if (left_b64u !== response.profile.at_hash) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Failed to validate at_hash", left_b64u, response.profile.at_hash);
            return Promise.reject(new Error("Failed to validate at_hash"));
        }

        _Log.Log.debug("ResponseValidator._validateAccessToken: success");

        return Promise.resolve(response);
    };

    return ResponseValidator;
}();

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserInfoService = undefined;

var _JsonService = __webpack_require__(8);

var _MetadataService = __webpack_require__(2);

var _Log = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var UserInfoService = exports.UserInfoService = function () {
    function UserInfoService(settings) {
        var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService.JsonService;
        var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService.MetadataService;

        _classCallCheck(this, UserInfoService);

        if (!settings) {
            _Log.Log.error("UserInfoService.ctor: No settings passed");
            throw new Error("settings");
        }

        this._settings = settings;
        this._jsonService = new JsonServiceCtor();
        this._metadataService = new MetadataServiceCtor(this._settings);
    }

    UserInfoService.prototype.getClaims = function getClaims(token) {
        var _this = this;

        if (!token) {
            _Log.Log.error("UserInfoService.getClaims: No token passed");
            return Promise.reject(new Error("A token is required"));
        }

        return this._metadataService.getUserInfoEndpoint().then(function (url) {
            _Log.Log.debug("UserInfoService.getClaims: received userinfo url", url);

            return _this._jsonService.getJson(url, token).then(function (claims) {
                _Log.Log.debug("UserInfoService.getClaims: claims received", claims);
                return claims;
            });
        });
    };

    return UserInfoService;
}();

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.JoseUtil = undefined;

var _jsrsasign = __webpack_require__(23);

var _Log = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

//import { jws, KEYUTIL as KeyUtil, X509, crypto, hextob64u, b64tohex } from 'jsrsasign';


var AllowedSigningAlgs = ['RS256', 'RS384', 'RS512', 'PS256', 'PS384', 'PS512', 'ES256', 'ES384', 'ES512'];

var JoseUtil = exports.JoseUtil = function () {
    function JoseUtil() {
        _classCallCheck(this, JoseUtil);
    }

    JoseUtil.parseJwt = function parseJwt(jwt) {
        _Log.Log.debug("JoseUtil.parseJwt");
        try {
            var token = _jsrsasign.jws.JWS.parse(jwt);
            return {
                header: token.headerObj,
                payload: token.payloadObj
            };
        } catch (e) {
            _Log.Log.error(e);
        }
    };

    JoseUtil.validateJwt = function validateJwt(jwt, key, issuer, audience, clockSkew, now) {
        _Log.Log.debug("JoseUtil.validateJwt");

        try {
            if (key.kty === "RSA") {
                if (key.e && key.n) {
                    key = _jsrsasign.KEYUTIL.getKey(key);
                } else if (key.x5c && key.x5c.length) {
                    var hex = (0, _jsrsasign.b64tohex)(key.x5c[0]);
                    key = _jsrsasign.X509.getPublicKeyFromCertHex(hex);
                } else {
                    _Log.Log.error("JoseUtil.validateJwt: RSA key missing key material", key);
                    return Promise.reject(new Error("RSA key missing key material"));
                }
            } else if (key.kty === "EC") {
                if (key.crv && key.x && key.y) {
                    key = _jsrsasign.KEYUTIL.getKey(key);
                } else {
                    _Log.Log.error("JoseUtil.validateJwt: EC key missing key material", key);
                    return Promise.reject(new Error("EC key missing key material"));
                }
            } else {
                _Log.Log.error("JoseUtil.validateJwt: Unsupported key type", key && key.kty);
                return Promise.reject(new Error("Unsupported key type: " + key && key.kty));
            }

            return JoseUtil._validateJwt(jwt, key, issuer, audience, clockSkew, now);
        } catch (e) {
            _Log.Log.error(e && e.message || e);
            return Promise.reject("JWT validation failed");
        }
    };

    JoseUtil._validateJwt = function _validateJwt(jwt, key, issuer, audience, clockSkew, now) {
        if (!clockSkew) {
            clockSkew = 0;
        }

        if (!now) {
            now = parseInt(Date.now() / 1000);
        }

        var payload = JoseUtil.parseJwt(jwt).payload;

        if (!payload.iss) {
            _Log.Log.error("JoseUtil._validateJwt: issuer was not provided");
            return Promise.reject(new Error("issuer was not provided"));
        }
        if (payload.iss !== issuer) {
            _Log.Log.error("JoseUtil._validateJwt: Invalid issuer in token", payload.iss);
            return Promise.reject(new Error("Invalid issuer in token: " + payload.iss));
        }

        if (!payload.aud) {
            _Log.Log.error("JoseUtil._validateJwt: aud was not provided");
            return Promise.reject(new Error("aud was not provided"));
        }
        var validAudience = payload.aud === audience || Array.isArray(payload.aud) && payload.aud.indexOf(audience) >= 0;
        if (!validAudience) {
            _Log.Log.error("JoseUtil._validateJwt: Invalid audience in token", payload.aud);
            return Promise.reject(new Error("Invalid audience in token: " + payload.aud));
        }

        var lowerNow = now + clockSkew;
        var upperNow = now - clockSkew;

        if (!payload.iat) {
            _Log.Log.error("JoseUtil._validateJwt: iat was not provided");
            return Promise.reject(new Error("iat was not provided"));
        }
        if (lowerNow < payload.iat) {
            _Log.Log.error("JoseUtil._validateJwt: iat is in the future", payload.iat);
            return Promise.reject(new Error("iat is in the future: " + payload.iat));
        }

        if (payload.nbf && lowerNow < payload.nbf) {
            _Log.Log.error("JoseUtil._validateJwt: nbf is in the future", payload.nbf);
            return Promise.reject(new Error("nbf is in the future: " + payload.nbf));
        }

        if (!payload.exp) {
            _Log.Log.error("JoseUtil._validateJwt: exp was not provided");
            return Promise.reject(new Error("exp was not provided"));
        }
        if (payload.exp < upperNow) {
            _Log.Log.error("JoseUtil._validateJwt: exp is in the past", payload.exp);
            return Promise.reject(new Error("exp is in the past:" + payload.exp));
        }

        try {
            if (!_jsrsasign.jws.JWS.verify(jwt, key, AllowedSigningAlgs)) {
                _Log.Log.error("JoseUtil._validateJwt: signature validation failed");
                return Promise.reject(new Error("signature validation failed"));
            }
        } catch (e) {
            _Log.Log.error(e && e.message || e);
            return Promise.reject(new Error("signature validation failed"));
        }

        return Promise.resolve();
    };

    JoseUtil.hashString = function hashString(value, alg) {
        try {
            return _jsrsasign.crypto.Util.hashString(value, alg);
        } catch (e) {
            _Log.Log.error(e);
        }
    };

    JoseUtil.hexToBase64Url = function hexToBase64Url(value) {
        try {
            return (0, _jsrsasign.hextob64u)(value);
        } catch (e) {
            _Log.Log.error(e);
        }
    };

    return JoseUtil;
}();

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 * jsrsasign(all) 8.0.12 (2018-04-22) (c) 2010-2018 Kenji Urushima | kjur.github.com/jsrsasign/license
 */

var navigator = {};
navigator.userAgent = false;

var window = {};

/*!
Copyright (c) 2011, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://developer.yahoo.com/yui/license.html
version: 2.9.0
*/
if (YAHOO === undefined) {
  var YAHOO = {};
}YAHOO.lang = { extend: function extend(g, h, f) {
    if (!h || !g) {
      throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");
    }var d = function d() {};d.prototype = h.prototype;g.prototype = new d();g.prototype.constructor = g;g.superclass = h.prototype;if (h.prototype.constructor == Object.prototype.constructor) {
      h.prototype.constructor = h;
    }if (f) {
      var b;for (b in f) {
        g.prototype[b] = f[b];
      }var e = function e() {},
          c = ["toString", "valueOf"];try {
        if (/MSIE/.test(navigator.userAgent)) {
          e = function e(j, i) {
            for (b = 0; b < c.length; b = b + 1) {
              var l = c[b],
                  k = i[l];if (typeof k === "function" && k != Object.prototype[l]) {
                j[l] = k;
              }
            }
          };
        }
      } catch (a) {}e(g.prototype, f);
    }
  } };
/*! CryptoJS v3.1.2 core-fix.js
 * code.google.com/p/crypto-js
 * (c) 2009-2013 by Jeff Mott. All rights reserved.
 * code.google.com/p/crypto-js/wiki/License
 * THIS IS FIX of 'core.js' to fix Hmac issue.
 * https://code.google.com/p/crypto-js/issues/detail?id=84
 * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js
 */
var CryptoJS = CryptoJS || function (e, g) {
  var a = {};var b = a.lib = {};var j = b.Base = function () {
    function n() {}return { extend: function extend(p) {
        n.prototype = this;var o = new n();if (p) {
          o.mixIn(p);
        }if (!o.hasOwnProperty("init")) {
          o.init = function () {
            o.$super.init.apply(this, arguments);
          };
        }o.init.prototype = o;o.$super = this;return o;
      }, create: function create() {
        var o = this.extend();o.init.apply(o, arguments);return o;
      }, init: function init() {}, mixIn: function mixIn(p) {
        for (var o in p) {
          if (p.hasOwnProperty(o)) {
            this[o] = p[o];
          }
        }if (p.hasOwnProperty("toString")) {
          this.toString = p.toString;
        }
      }, clone: function clone() {
        return this.init.prototype.extend(this);
      } };
  }();var l = b.WordArray = j.extend({ init: function init(o, n) {
      o = this.words = o || [];if (n != g) {
        this.sigBytes = n;
      } else {
        this.sigBytes = o.length * 4;
      }
    }, toString: function toString(n) {
      return (n || h).stringify(this);
    }, concat: function concat(t) {
      var q = this.words;var p = t.words;var n = this.sigBytes;var s = t.sigBytes;this.clamp();if (n % 4) {
        for (var r = 0; r < s; r++) {
          var o = p[r >>> 2] >>> 24 - r % 4 * 8 & 255;q[n + r >>> 2] |= o << 24 - (n + r) % 4 * 8;
        }
      } else {
        for (var r = 0; r < s; r += 4) {
          q[n + r >>> 2] = p[r >>> 2];
        }
      }this.sigBytes += s;return this;
    }, clamp: function clamp() {
      var o = this.words;var n = this.sigBytes;o[n >>> 2] &= 4294967295 << 32 - n % 4 * 8;o.length = e.ceil(n / 4);
    }, clone: function clone() {
      var n = j.clone.call(this);n.words = this.words.slice(0);return n;
    }, random: function random(p) {
      var o = [];for (var n = 0; n < p; n += 4) {
        o.push(e.random() * 4294967296 | 0);
      }return new l.init(o, p);
    } });var m = a.enc = {};var h = m.Hex = { stringify: function stringify(p) {
      var r = p.words;var o = p.sigBytes;var q = [];for (var n = 0; n < o; n++) {
        var s = r[n >>> 2] >>> 24 - n % 4 * 8 & 255;q.push((s >>> 4).toString(16));q.push((s & 15).toString(16));
      }return q.join("");
    }, parse: function parse(p) {
      var n = p.length;var q = [];for (var o = 0; o < n; o += 2) {
        q[o >>> 3] |= parseInt(p.substr(o, 2), 16) << 24 - o % 8 * 4;
      }return new l.init(q, n / 2);
    } };var d = m.Latin1 = { stringify: function stringify(q) {
      var r = q.words;var p = q.sigBytes;var n = [];for (var o = 0; o < p; o++) {
        var s = r[o >>> 2] >>> 24 - o % 4 * 8 & 255;n.push(String.fromCharCode(s));
      }return n.join("");
    }, parse: function parse(p) {
      var n = p.length;var q = [];for (var o = 0; o < n; o++) {
        q[o >>> 2] |= (p.charCodeAt(o) & 255) << 24 - o % 4 * 8;
      }return new l.init(q, n);
    } };var c = m.Utf8 = { stringify: function stringify(n) {
      try {
        return decodeURIComponent(escape(d.stringify(n)));
      } catch (o) {
        throw new Error("Malformed UTF-8 data");
      }
    }, parse: function parse(n) {
      return d.parse(unescape(encodeURIComponent(n)));
    } };var i = b.BufferedBlockAlgorithm = j.extend({ reset: function reset() {
      this._data = new l.init();this._nDataBytes = 0;
    }, _append: function _append(n) {
      if (typeof n == "string") {
        n = c.parse(n);
      }this._data.concat(n);this._nDataBytes += n.sigBytes;
    }, _process: function _process(w) {
      var q = this._data;var x = q.words;var n = q.sigBytes;var t = this.blockSize;var v = t * 4;var u = n / v;if (w) {
        u = e.ceil(u);
      } else {
        u = e.max((u | 0) - this._minBufferSize, 0);
      }var s = u * t;var r = e.min(s * 4, n);if (s) {
        for (var p = 0; p < s; p += t) {
          this._doProcessBlock(x, p);
        }var o = x.splice(0, s);q.sigBytes -= r;
      }return new l.init(o, r);
    }, clone: function clone() {
      var n = j.clone.call(this);n._data = this._data.clone();return n;
    }, _minBufferSize: 0 });var f = b.Hasher = i.extend({ cfg: j.extend(), init: function init(n) {
      this.cfg = this.cfg.extend(n);this.reset();
    }, reset: function reset() {
      i.reset.call(this);this._doReset();
    }, update: function update(n) {
      this._append(n);this._process();return this;
    }, finalize: function finalize(n) {
      if (n) {
        this._append(n);
      }var o = this._doFinalize();return o;
    }, blockSize: 512 / 32, _createHelper: function _createHelper(n) {
      return function (p, o) {
        return new n.init(o).finalize(p);
      };
    }, _createHmacHelper: function _createHmacHelper(n) {
      return function (p, o) {
        return new k.HMAC.init(n, o).finalize(p);
      };
    } });var k = a.algo = {};return a;
}(Math);
/*
CryptoJS v3.1.2 x64-core-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function (g) {
  var a = CryptoJS,
      f = a.lib,
      e = f.Base,
      h = f.WordArray,
      a = a.x64 = {};a.Word = e.extend({ init: function init(b, c) {
      this.high = b;this.low = c;
    } });a.WordArray = e.extend({ init: function init(b, c) {
      b = this.words = b || [];this.sigBytes = c != g ? c : 8 * b.length;
    }, toX32: function toX32() {
      for (var b = this.words, c = b.length, a = [], d = 0; d < c; d++) {
        var e = b[d];a.push(e.high);a.push(e.low);
      }return h.create(a, this.sigBytes);
    }, clone: function clone() {
      for (var b = e.clone.call(this), c = b.words = this.words.slice(0), a = c.length, d = 0; d < a; d++) {
        c[d] = c[d].clone();
      }return b;
    } });
})();

/*
CryptoJS v3.1.2 enc-base64.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function () {
  var h = CryptoJS,
      j = h.lib.WordArray;h.enc.Base64 = { stringify: function stringify(b) {
      var e = b.words,
          f = b.sigBytes,
          c = this._map;b.clamp();b = [];for (var a = 0; a < f; a += 3) {
        for (var d = (e[a >>> 2] >>> 24 - 8 * (a % 4) & 255) << 16 | (e[a + 1 >>> 2] >>> 24 - 8 * ((a + 1) % 4) & 255) << 8 | e[a + 2 >>> 2] >>> 24 - 8 * ((a + 2) % 4) & 255, g = 0; 4 > g && a + 0.75 * g < f; g++) {
          b.push(c.charAt(d >>> 6 * (3 - g) & 63));
        }
      }if (e = c.charAt(64)) for (; b.length % 4;) {
        b.push(e);
      }return b.join("");
    }, parse: function parse(b) {
      var e = b.length,
          f = this._map,
          c = f.charAt(64);c && (c = b.indexOf(c), -1 != c && (e = c));for (var c = [], a = 0, d = 0; d < e; d++) {
        if (d % 4) {
          var g = f.indexOf(b.charAt(d - 1)) << 2 * (d % 4),
              h = f.indexOf(b.charAt(d)) >>> 6 - 2 * (d % 4);c[a >>> 2] |= (g | h) << 24 - 8 * (a % 4);a++;
        }
      }return j.create(c, a);
    }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" };
})();

/*
CryptoJS v3.1.2 sha256-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function (k) {
  for (var g = CryptoJS, h = g.lib, v = h.WordArray, j = h.Hasher, h = g.algo, s = [], t = [], u = function u(q) {
    return 4294967296 * (q - (q | 0)) | 0;
  }, l = 2, b = 0; 64 > b;) {
    var d;a: {
      d = l;for (var w = k.sqrt(d), r = 2; r <= w; r++) {
        if (!(d % r)) {
          d = !1;break a;
        }
      }d = !0;
    }d && (8 > b && (s[b] = u(k.pow(l, 0.5))), t[b] = u(k.pow(l, 1 / 3)), b++);l++;
  }var n = [],
      h = h.SHA256 = j.extend({ _doReset: function _doReset() {
      this._hash = new v.init(s.slice(0));
    }, _doProcessBlock: function _doProcessBlock(q, h) {
      for (var a = this._hash.words, c = a[0], d = a[1], b = a[2], k = a[3], f = a[4], g = a[5], j = a[6], l = a[7], e = 0; 64 > e; e++) {
        if (16 > e) n[e] = q[h + e] | 0;else {
          var m = n[e - 15],
              p = n[e - 2];n[e] = ((m << 25 | m >>> 7) ^ (m << 14 | m >>> 18) ^ m >>> 3) + n[e - 7] + ((p << 15 | p >>> 17) ^ (p << 13 | p >>> 19) ^ p >>> 10) + n[e - 16];
        }m = l + ((f << 26 | f >>> 6) ^ (f << 21 | f >>> 11) ^ (f << 7 | f >>> 25)) + (f & g ^ ~f & j) + t[e] + n[e];p = ((c << 30 | c >>> 2) ^ (c << 19 | c >>> 13) ^ (c << 10 | c >>> 22)) + (c & d ^ c & b ^ d & b);l = j;j = g;g = f;f = k + m | 0;k = b;b = d;d = c;c = m + p | 0;
      }a[0] = a[0] + c | 0;a[1] = a[1] + d | 0;a[2] = a[2] + b | 0;a[3] = a[3] + k | 0;a[4] = a[4] + f | 0;a[5] = a[5] + g | 0;a[6] = a[6] + j | 0;a[7] = a[7] + l | 0;
    }, _doFinalize: function _doFinalize() {
      var d = this._data,
          b = d.words,
          a = 8 * this._nDataBytes,
          c = 8 * d.sigBytes;
      b[c >>> 5] |= 128 << 24 - c % 32;b[(c + 64 >>> 9 << 4) + 14] = k.floor(a / 4294967296);b[(c + 64 >>> 9 << 4) + 15] = a;d.sigBytes = 4 * b.length;this._process();return this._hash;
    }, clone: function clone() {
      var b = j.clone.call(this);b._hash = this._hash.clone();return b;
    } });g.SHA256 = j._createHelper(h);g.HmacSHA256 = j._createHmacHelper(h);
})(Math);

/*
CryptoJS v3.1.2 sha512-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function () {
  function a() {
    return d.create.apply(d, arguments);
  }for (var n = CryptoJS, r = n.lib.Hasher, e = n.x64, d = e.Word, T = e.WordArray, e = n.algo, ea = [a(1116352408, 3609767458), a(1899447441, 602891725), a(3049323471, 3964484399), a(3921009573, 2173295548), a(961987163, 4081628472), a(1508970993, 3053834265), a(2453635748, 2937671579), a(2870763221, 3664609560), a(3624381080, 2734883394), a(310598401, 1164996542), a(607225278, 1323610764), a(1426881987, 3590304994), a(1925078388, 4068182383), a(2162078206, 991336113), a(2614888103, 633803317), a(3248222580, 3479774868), a(3835390401, 2666613458), a(4022224774, 944711139), a(264347078, 2341262773), a(604807628, 2007800933), a(770255983, 1495990901), a(1249150122, 1856431235), a(1555081692, 3175218132), a(1996064986, 2198950837), a(2554220882, 3999719339), a(2821834349, 766784016), a(2952996808, 2566594879), a(3210313671, 3203337956), a(3336571891, 1034457026), a(3584528711, 2466948901), a(113926993, 3758326383), a(338241895, 168717936), a(666307205, 1188179964), a(773529912, 1546045734), a(1294757372, 1522805485), a(1396182291, 2643833823), a(1695183700, 2343527390), a(1986661051, 1014477480), a(2177026350, 1206759142), a(2456956037, 344077627), a(2730485921, 1290863460), a(2820302411, 3158454273), a(3259730800, 3505952657), a(3345764771, 106217008), a(3516065817, 3606008344), a(3600352804, 1432725776), a(4094571909, 1467031594), a(275423344, 851169720), a(430227734, 3100823752), a(506948616, 1363258195), a(659060556, 3750685593), a(883997877, 3785050280), a(958139571, 3318307427), a(1322822218, 3812723403), a(1537002063, 2003034995), a(1747873779, 3602036899), a(1955562222, 1575990012), a(2024104815, 1125592928), a(2227730452, 2716904306), a(2361852424, 442776044), a(2428436474, 593698344), a(2756734187, 3733110249), a(3204031479, 2999351573), a(3329325298, 3815920427), a(3391569614, 3928383900), a(3515267271, 566280711), a(3940187606, 3454069534), a(4118630271, 4000239992), a(116418474, 1914138554), a(174292421, 2731055270), a(289380356, 3203993006), a(460393269, 320620315), a(685471733, 587496836), a(852142971, 1086792851), a(1017036298, 365543100), a(1126000580, 2618297676), a(1288033470, 3409855158), a(1501505948, 4234509866), a(1607167915, 987167468), a(1816402316, 1246189591)], v = [], w = 0; 80 > w; w++) {
    v[w] = a();
  }e = e.SHA512 = r.extend({ _doReset: function _doReset() {
      this._hash = new T.init([new d.init(1779033703, 4089235720), new d.init(3144134277, 2227873595), new d.init(1013904242, 4271175723), new d.init(2773480762, 1595750129), new d.init(1359893119, 2917565137), new d.init(2600822924, 725511199), new d.init(528734635, 4215389547), new d.init(1541459225, 327033209)]);
    }, _doProcessBlock: function _doProcessBlock(a, d) {
      for (var f = this._hash.words, F = f[0], e = f[1], n = f[2], r = f[3], G = f[4], H = f[5], I = f[6], f = f[7], w = F.high, J = F.low, X = e.high, K = e.low, Y = n.high, L = n.low, Z = r.high, M = r.low, $ = G.high, N = G.low, aa = H.high, O = H.low, ba = I.high, P = I.low, ca = f.high, Q = f.low, k = w, g = J, z = X, x = K, A = Y, y = L, U = Z, B = M, l = $, h = N, R = aa, C = O, S = ba, D = P, V = ca, E = Q, m = 0; 80 > m; m++) {
        var s = v[m];if (16 > m) var j = s.high = a[d + 2 * m] | 0,
            b = s.low = a[d + 2 * m + 1] | 0;else {
          var j = v[m - 15],
              b = j.high,
              p = j.low,
              j = (b >>> 1 | p << 31) ^ (b >>> 8 | p << 24) ^ b >>> 7,
              p = (p >>> 1 | b << 31) ^ (p >>> 8 | b << 24) ^ (p >>> 7 | b << 25),
              u = v[m - 2],
              b = u.high,
              c = u.low,
              u = (b >>> 19 | c << 13) ^ (b << 3 | c >>> 29) ^ b >>> 6,
              c = (c >>> 19 | b << 13) ^ (c << 3 | b >>> 29) ^ (c >>> 6 | b << 26),
              b = v[m - 7],
              W = b.high,
              t = v[m - 16],
              q = t.high,
              t = t.low,
              b = p + b.low,
              j = j + W + (b >>> 0 < p >>> 0 ? 1 : 0),
              b = b + c,
              j = j + u + (b >>> 0 < c >>> 0 ? 1 : 0),
              b = b + t,
              j = j + q + (b >>> 0 < t >>> 0 ? 1 : 0);s.high = j;s.low = b;
        }var W = l & R ^ ~l & S,
            t = h & C ^ ~h & D,
            s = k & z ^ k & A ^ z & A,
            T = g & x ^ g & y ^ x & y,
            p = (k >>> 28 | g << 4) ^ (k << 30 | g >>> 2) ^ (k << 25 | g >>> 7),
            u = (g >>> 28 | k << 4) ^ (g << 30 | k >>> 2) ^ (g << 25 | k >>> 7),
            c = ea[m],
            fa = c.high,
            da = c.low,
            c = E + ((h >>> 14 | l << 18) ^ (h >>> 18 | l << 14) ^ (h << 23 | l >>> 9)),
            q = V + ((l >>> 14 | h << 18) ^ (l >>> 18 | h << 14) ^ (l << 23 | h >>> 9)) + (c >>> 0 < E >>> 0 ? 1 : 0),
            c = c + t,
            q = q + W + (c >>> 0 < t >>> 0 ? 1 : 0),
            c = c + da,
            q = q + fa + (c >>> 0 < da >>> 0 ? 1 : 0),
            c = c + b,
            q = q + j + (c >>> 0 < b >>> 0 ? 1 : 0),
            b = u + T,
            s = p + s + (b >>> 0 < u >>> 0 ? 1 : 0),
            V = S,
            E = D,
            S = R,
            D = C,
            R = l,
            C = h,
            h = B + c | 0,
            l = U + q + (h >>> 0 < B >>> 0 ? 1 : 0) | 0,
            U = A,
            B = y,
            A = z,
            y = x,
            z = k,
            x = g,
            g = c + b | 0,
            k = q + s + (g >>> 0 < c >>> 0 ? 1 : 0) | 0;
      }J = F.low = J + g;F.high = w + k + (J >>> 0 < g >>> 0 ? 1 : 0);K = e.low = K + x;e.high = X + z + (K >>> 0 < x >>> 0 ? 1 : 0);L = n.low = L + y;n.high = Y + A + (L >>> 0 < y >>> 0 ? 1 : 0);M = r.low = M + B;r.high = Z + U + (M >>> 0 < B >>> 0 ? 1 : 0);N = G.low = N + h;G.high = $ + l + (N >>> 0 < h >>> 0 ? 1 : 0);O = H.low = O + C;H.high = aa + R + (O >>> 0 < C >>> 0 ? 1 : 0);P = I.low = P + D;
      I.high = ba + S + (P >>> 0 < D >>> 0 ? 1 : 0);Q = f.low = Q + E;f.high = ca + V + (Q >>> 0 < E >>> 0 ? 1 : 0);
    }, _doFinalize: function _doFinalize() {
      var a = this._data,
          d = a.words,
          f = 8 * this._nDataBytes,
          e = 8 * a.sigBytes;d[e >>> 5] |= 128 << 24 - e % 32;d[(e + 128 >>> 10 << 5) + 30] = Math.floor(f / 4294967296);d[(e + 128 >>> 10 << 5) + 31] = f;a.sigBytes = 4 * d.length;this._process();return this._hash.toX32();
    }, clone: function clone() {
      var a = r.clone.call(this);a._hash = this._hash.clone();return a;
    }, blockSize: 32 });n.SHA512 = r._createHelper(e);n.HmacSHA512 = r._createHmacHelper(e);
})();

/*
CryptoJS v3.1.2 sha384-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function () {
  var c = CryptoJS,
      a = c.x64,
      b = a.Word,
      e = a.WordArray,
      a = c.algo,
      d = a.SHA512,
      a = a.SHA384 = d.extend({ _doReset: function _doReset() {
      this._hash = new e.init([new b.init(3418070365, 3238371032), new b.init(1654270250, 914150663), new b.init(2438529370, 812702999), new b.init(355462360, 4144912697), new b.init(1731405415, 4290775857), new b.init(2394180231, 1750603025), new b.init(3675008525, 1694076839), new b.init(1203062813, 3204075428)]);
    }, _doFinalize: function _doFinalize() {
      var a = d._doFinalize.call(this);a.sigBytes -= 16;return a;
    } });c.SHA384 = d._createHelper(a);c.HmacSHA384 = d._createHmacHelper(a);
})();

/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var b64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var b64pad = "=";function hex2b64(d) {
  var b;var e;var a = "";for (b = 0; b + 3 <= d.length; b += 3) {
    e = parseInt(d.substring(b, b + 3), 16);a += b64map.charAt(e >> 6) + b64map.charAt(e & 63);
  }if (b + 1 == d.length) {
    e = parseInt(d.substring(b, b + 1), 16);a += b64map.charAt(e << 2);
  } else {
    if (b + 2 == d.length) {
      e = parseInt(d.substring(b, b + 2), 16);a += b64map.charAt(e >> 2) + b64map.charAt((e & 3) << 4);
    }
  }if (b64pad) {
    while ((a.length & 3) > 0) {
      a += b64pad;
    }
  }return a;
}function b64tohex(f) {
  var d = "";var e;var b = 0;var c;var a;for (e = 0; e < f.length; ++e) {
    if (f.charAt(e) == b64pad) {
      break;
    }a = b64map.indexOf(f.charAt(e));if (a < 0) {
      continue;
    }if (b == 0) {
      d += int2char(a >> 2);c = a & 3;b = 1;
    } else {
      if (b == 1) {
        d += int2char(c << 2 | a >> 4);c = a & 15;b = 2;
      } else {
        if (b == 2) {
          d += int2char(c);d += int2char(a >> 2);c = a & 3;b = 3;
        } else {
          d += int2char(c << 2 | a >> 4);d += int2char(a & 15);b = 0;
        }
      }
    }
  }if (b == 1) {
    d += int2char(c << 2);
  }return d;
}function b64toBA(e) {
  var d = b64tohex(e);var c;var b = new Array();for (c = 0; 2 * c < d.length; ++c) {
    b[c] = parseInt(d.substring(2 * c, 2 * c + 2), 16);
  }return b;
};
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var dbits;var canary = 244837814094590;var j_lm = (canary & 16777215) == 15715070;function BigInteger(e, d, f) {
  if (e != null) {
    if ("number" == typeof e) {
      this.fromNumber(e, d, f);
    } else {
      if (d == null && "string" != typeof e) {
        this.fromString(e, 256);
      } else {
        this.fromString(e, d);
      }
    }
  }
}function nbi() {
  return new BigInteger(null);
}function am1(f, a, b, e, h, g) {
  while (--g >= 0) {
    var d = a * this[f++] + b[e] + h;h = Math.floor(d / 67108864);b[e++] = d & 67108863;
  }return h;
}function am2(f, q, r, e, o, a) {
  var k = q & 32767,
      p = q >> 15;while (--a >= 0) {
    var d = this[f] & 32767;var g = this[f++] >> 15;var b = p * d + g * k;d = k * d + ((b & 32767) << 15) + r[e] + (o & 1073741823);o = (d >>> 30) + (b >>> 15) + p * g + (o >>> 30);r[e++] = d & 1073741823;
  }return o;
}function am3(f, q, r, e, o, a) {
  var k = q & 16383,
      p = q >> 14;while (--a >= 0) {
    var d = this[f] & 16383;var g = this[f++] >> 14;var b = p * d + g * k;d = k * d + ((b & 16383) << 14) + r[e] + o;o = (d >> 28) + (b >> 14) + p * g;r[e++] = d & 268435455;
  }return o;
}if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
  BigInteger.prototype.am = am2;dbits = 30;
} else {
  if (j_lm && navigator.appName != "Netscape") {
    BigInteger.prototype.am = am1;dbits = 26;
  } else {
    BigInteger.prototype.am = am3;dbits = 28;
  }
}BigInteger.prototype.DB = dbits;BigInteger.prototype.DM = (1 << dbits) - 1;BigInteger.prototype.DV = 1 << dbits;var BI_FP = 52;BigInteger.prototype.FV = Math.pow(2, BI_FP);BigInteger.prototype.F1 = BI_FP - dbits;BigInteger.prototype.F2 = 2 * dbits - BI_FP;var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";var BI_RC = new Array();var rr, vv;rr = "0".charCodeAt(0);for (vv = 0; vv <= 9; ++vv) {
  BI_RC[rr++] = vv;
}rr = "a".charCodeAt(0);for (vv = 10; vv < 36; ++vv) {
  BI_RC[rr++] = vv;
}rr = "A".charCodeAt(0);for (vv = 10; vv < 36; ++vv) {
  BI_RC[rr++] = vv;
}function int2char(a) {
  return BI_RM.charAt(a);
}function intAt(b, a) {
  var d = BI_RC[b.charCodeAt(a)];return d == null ? -1 : d;
}function bnpCopyTo(b) {
  for (var a = this.t - 1; a >= 0; --a) {
    b[a] = this[a];
  }b.t = this.t;b.s = this.s;
}function bnpFromInt(a) {
  this.t = 1;this.s = a < 0 ? -1 : 0;if (a > 0) {
    this[0] = a;
  } else {
    if (a < -1) {
      this[0] = a + this.DV;
    } else {
      this.t = 0;
    }
  }
}function nbv(a) {
  var b = nbi();b.fromInt(a);return b;
}function bnpFromString(h, c) {
  var e;if (c == 16) {
    e = 4;
  } else {
    if (c == 8) {
      e = 3;
    } else {
      if (c == 256) {
        e = 8;
      } else {
        if (c == 2) {
          e = 1;
        } else {
          if (c == 32) {
            e = 5;
          } else {
            if (c == 4) {
              e = 2;
            } else {
              this.fromRadix(h, c);return;
            }
          }
        }
      }
    }
  }this.t = 0;this.s = 0;var g = h.length,
      d = false,
      f = 0;while (--g >= 0) {
    var a = e == 8 ? h[g] & 255 : intAt(h, g);if (a < 0) {
      if (h.charAt(g) == "-") {
        d = true;
      }continue;
    }d = false;if (f == 0) {
      this[this.t++] = a;
    } else {
      if (f + e > this.DB) {
        this[this.t - 1] |= (a & (1 << this.DB - f) - 1) << f;this[this.t++] = a >> this.DB - f;
      } else {
        this[this.t - 1] |= a << f;
      }
    }f += e;if (f >= this.DB) {
      f -= this.DB;
    }
  }if (e == 8 && (h[0] & 128) != 0) {
    this.s = -1;if (f > 0) {
      this[this.t - 1] |= (1 << this.DB - f) - 1 << f;
    }
  }this.clamp();if (d) {
    BigInteger.ZERO.subTo(this, this);
  }
}function bnpClamp() {
  var a = this.s & this.DM;while (this.t > 0 && this[this.t - 1] == a) {
    --this.t;
  }
}function bnToString(c) {
  if (this.s < 0) {
    return "-" + this.negate().toString(c);
  }var e;if (c == 16) {
    e = 4;
  } else {
    if (c == 8) {
      e = 3;
    } else {
      if (c == 2) {
        e = 1;
      } else {
        if (c == 32) {
          e = 5;
        } else {
          if (c == 4) {
            e = 2;
          } else {
            return this.toRadix(c);
          }
        }
      }
    }
  }var g = (1 << e) - 1,
      l,
      a = false,
      h = "",
      f = this.t;var j = this.DB - f * this.DB % e;if (f-- > 0) {
    if (j < this.DB && (l = this[f] >> j) > 0) {
      a = true;h = int2char(l);
    }while (f >= 0) {
      if (j < e) {
        l = (this[f] & (1 << j) - 1) << e - j;l |= this[--f] >> (j += this.DB - e);
      } else {
        l = this[f] >> (j -= e) & g;if (j <= 0) {
          j += this.DB;--f;
        }
      }if (l > 0) {
        a = true;
      }if (a) {
        h += int2char(l);
      }
    }
  }return a ? h : "0";
}function bnNegate() {
  var a = nbi();BigInteger.ZERO.subTo(this, a);return a;
}function bnAbs() {
  return this.s < 0 ? this.negate() : this;
}function bnCompareTo(b) {
  var d = this.s - b.s;if (d != 0) {
    return d;
  }var c = this.t;d = c - b.t;if (d != 0) {
    return this.s < 0 ? -d : d;
  }while (--c >= 0) {
    if ((d = this[c] - b[c]) != 0) {
      return d;
    }
  }return 0;
}function nbits(a) {
  var c = 1,
      b;if ((b = a >>> 16) != 0) {
    a = b;c += 16;
  }if ((b = a >> 8) != 0) {
    a = b;c += 8;
  }if ((b = a >> 4) != 0) {
    a = b;c += 4;
  }if ((b = a >> 2) != 0) {
    a = b;c += 2;
  }if ((b = a >> 1) != 0) {
    a = b;c += 1;
  }return c;
}function bnBitLength() {
  if (this.t <= 0) {
    return 0;
  }return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
}function bnpDLShiftTo(c, b) {
  var a;for (a = this.t - 1; a >= 0; --a) {
    b[a + c] = this[a];
  }for (a = c - 1; a >= 0; --a) {
    b[a] = 0;
  }b.t = this.t + c;b.s = this.s;
}function bnpDRShiftTo(c, b) {
  for (var a = c; a < this.t; ++a) {
    b[a - c] = this[a];
  }b.t = Math.max(this.t - c, 0);b.s = this.s;
}function bnpLShiftTo(j, e) {
  var b = j % this.DB;var a = this.DB - b;var g = (1 << a) - 1;var f = Math.floor(j / this.DB),
      h = this.s << b & this.DM,
      d;for (d = this.t - 1; d >= 0; --d) {
    e[d + f + 1] = this[d] >> a | h;h = (this[d] & g) << b;
  }for (d = f - 1; d >= 0; --d) {
    e[d] = 0;
  }e[f] = h;e.t = this.t + f + 1;e.s = this.s;e.clamp();
}function bnpRShiftTo(g, d) {
  d.s = this.s;var e = Math.floor(g / this.DB);if (e >= this.t) {
    d.t = 0;return;
  }var b = g % this.DB;var a = this.DB - b;var f = (1 << b) - 1;d[0] = this[e] >> b;for (var c = e + 1; c < this.t; ++c) {
    d[c - e - 1] |= (this[c] & f) << a;d[c - e] = this[c] >> b;
  }if (b > 0) {
    d[this.t - e - 1] |= (this.s & f) << a;
  }d.t = this.t - e;d.clamp();
}function bnpSubTo(d, f) {
  var e = 0,
      g = 0,
      b = Math.min(d.t, this.t);while (e < b) {
    g += this[e] - d[e];f[e++] = g & this.DM;g >>= this.DB;
  }if (d.t < this.t) {
    g -= d.s;while (e < this.t) {
      g += this[e];f[e++] = g & this.DM;g >>= this.DB;
    }g += this.s;
  } else {
    g += this.s;while (e < d.t) {
      g -= d[e];f[e++] = g & this.DM;g >>= this.DB;
    }g -= d.s;
  }f.s = g < 0 ? -1 : 0;if (g < -1) {
    f[e++] = this.DV + g;
  } else {
    if (g > 0) {
      f[e++] = g;
    }
  }f.t = e;f.clamp();
}function bnpMultiplyTo(c, e) {
  var b = this.abs(),
      f = c.abs();var d = b.t;e.t = d + f.t;while (--d >= 0) {
    e[d] = 0;
  }for (d = 0; d < f.t; ++d) {
    e[d + b.t] = b.am(0, f[d], e, d, 0, b.t);
  }e.s = 0;e.clamp();if (this.s != c.s) {
    BigInteger.ZERO.subTo(e, e);
  }
}function bnpSquareTo(d) {
  var a = this.abs();var b = d.t = 2 * a.t;while (--b >= 0) {
    d[b] = 0;
  }for (b = 0; b < a.t - 1; ++b) {
    var e = a.am(b, a[b], d, 2 * b, 0, 1);if ((d[b + a.t] += a.am(b + 1, 2 * a[b], d, 2 * b + 1, e, a.t - b - 1)) >= a.DV) {
      d[b + a.t] -= a.DV;d[b + a.t + 1] = 1;
    }
  }if (d.t > 0) {
    d[d.t - 1] += a.am(b, a[b], d, 2 * b, 0, 1);
  }d.s = 0;d.clamp();
}function bnpDivRemTo(n, h, g) {
  var w = n.abs();if (w.t <= 0) {
    return;
  }var k = this.abs();if (k.t < w.t) {
    if (h != null) {
      h.fromInt(0);
    }if (g != null) {
      this.copyTo(g);
    }return;
  }if (g == null) {
    g = nbi();
  }var d = nbi(),
      a = this.s,
      l = n.s;var v = this.DB - nbits(w[w.t - 1]);if (v > 0) {
    w.lShiftTo(v, d);k.lShiftTo(v, g);
  } else {
    w.copyTo(d);k.copyTo(g);
  }var p = d.t;var b = d[p - 1];if (b == 0) {
    return;
  }var o = b * (1 << this.F1) + (p > 1 ? d[p - 2] >> this.F2 : 0);var A = this.FV / o,
      z = (1 << this.F1) / o,
      x = 1 << this.F2;var u = g.t,
      s = u - p,
      f = h == null ? nbi() : h;d.dlShiftTo(s, f);if (g.compareTo(f) >= 0) {
    g[g.t++] = 1;g.subTo(f, g);
  }BigInteger.ONE.dlShiftTo(p, f);f.subTo(d, d);while (d.t < p) {
    d[d.t++] = 0;
  }while (--s >= 0) {
    var c = g[--u] == b ? this.DM : Math.floor(g[u] * A + (g[u - 1] + x) * z);if ((g[u] += d.am(0, c, g, s, 0, p)) < c) {
      d.dlShiftTo(s, f);g.subTo(f, g);while (g[u] < --c) {
        g.subTo(f, g);
      }
    }
  }if (h != null) {
    g.drShiftTo(p, h);if (a != l) {
      BigInteger.ZERO.subTo(h, h);
    }
  }g.t = p;g.clamp();if (v > 0) {
    g.rShiftTo(v, g);
  }if (a < 0) {
    BigInteger.ZERO.subTo(g, g);
  }
}function bnMod(b) {
  var c = nbi();this.abs().divRemTo(b, null, c);if (this.s < 0 && c.compareTo(BigInteger.ZERO) > 0) {
    b.subTo(c, c);
  }return c;
}function Classic(a) {
  this.m = a;
}function cConvert(a) {
  if (a.s < 0 || a.compareTo(this.m) >= 0) {
    return a.mod(this.m);
  } else {
    return a;
  }
}function cRevert(a) {
  return a;
}function cReduce(a) {
  a.divRemTo(this.m, null, a);
}function cMulTo(a, c, b) {
  a.multiplyTo(c, b);this.reduce(b);
}function cSqrTo(a, b) {
  a.squareTo(b);this.reduce(b);
}Classic.prototype.convert = cConvert;Classic.prototype.revert = cRevert;Classic.prototype.reduce = cReduce;Classic.prototype.mulTo = cMulTo;Classic.prototype.sqrTo = cSqrTo;function bnpInvDigit() {
  if (this.t < 1) {
    return 0;
  }var a = this[0];if ((a & 1) == 0) {
    return 0;
  }var b = a & 3;b = b * (2 - (a & 15) * b) & 15;b = b * (2 - (a & 255) * b) & 255;b = b * (2 - ((a & 65535) * b & 65535)) & 65535;b = b * (2 - a * b % this.DV) % this.DV;return b > 0 ? this.DV - b : -b;
}function Montgomery(a) {
  this.m = a;this.mp = a.invDigit();this.mpl = this.mp & 32767;this.mph = this.mp >> 15;this.um = (1 << a.DB - 15) - 1;this.mt2 = 2 * a.t;
}function montConvert(a) {
  var b = nbi();a.abs().dlShiftTo(this.m.t, b);b.divRemTo(this.m, null, b);if (a.s < 0 && b.compareTo(BigInteger.ZERO) > 0) {
    this.m.subTo(b, b);
  }return b;
}function montRevert(a) {
  var b = nbi();a.copyTo(b);this.reduce(b);return b;
}function montReduce(a) {
  while (a.t <= this.mt2) {
    a[a.t++] = 0;
  }for (var c = 0; c < this.m.t; ++c) {
    var b = a[c] & 32767;var d = b * this.mpl + ((b * this.mph + (a[c] >> 15) * this.mpl & this.um) << 15) & a.DM;b = c + this.m.t;a[b] += this.m.am(0, d, a, c, 0, this.m.t);while (a[b] >= a.DV) {
      a[b] -= a.DV;a[++b]++;
    }
  }a.clamp();a.drShiftTo(this.m.t, a);if (a.compareTo(this.m) >= 0) {
    a.subTo(this.m, a);
  }
}function montSqrTo(a, b) {
  a.squareTo(b);this.reduce(b);
}function montMulTo(a, c, b) {
  a.multiplyTo(c, b);this.reduce(b);
}Montgomery.prototype.convert = montConvert;Montgomery.prototype.revert = montRevert;Montgomery.prototype.reduce = montReduce;Montgomery.prototype.mulTo = montMulTo;Montgomery.prototype.sqrTo = montSqrTo;function bnpIsEven() {
  return (this.t > 0 ? this[0] & 1 : this.s) == 0;
}function bnpExp(h, j) {
  if (h > 4294967295 || h < 1) {
    return BigInteger.ONE;
  }var f = nbi(),
      a = nbi(),
      d = j.convert(this),
      c = nbits(h) - 1;d.copyTo(f);while (--c >= 0) {
    j.sqrTo(f, a);if ((h & 1 << c) > 0) {
      j.mulTo(a, d, f);
    } else {
      var b = f;f = a;a = b;
    }
  }return j.revert(f);
}function bnModPowInt(b, a) {
  var c;if (b < 256 || a.isEven()) {
    c = new Classic(a);
  } else {
    c = new Montgomery(a);
  }return this.exp(b, c);
}BigInteger.prototype.copyTo = bnpCopyTo;BigInteger.prototype.fromInt = bnpFromInt;BigInteger.prototype.fromString = bnpFromString;BigInteger.prototype.clamp = bnpClamp;BigInteger.prototype.dlShiftTo = bnpDLShiftTo;BigInteger.prototype.drShiftTo = bnpDRShiftTo;BigInteger.prototype.lShiftTo = bnpLShiftTo;BigInteger.prototype.rShiftTo = bnpRShiftTo;BigInteger.prototype.subTo = bnpSubTo;BigInteger.prototype.multiplyTo = bnpMultiplyTo;BigInteger.prototype.squareTo = bnpSquareTo;BigInteger.prototype.divRemTo = bnpDivRemTo;BigInteger.prototype.invDigit = bnpInvDigit;BigInteger.prototype.isEven = bnpIsEven;BigInteger.prototype.exp = bnpExp;BigInteger.prototype.toString = bnToString;BigInteger.prototype.negate = bnNegate;BigInteger.prototype.abs = bnAbs;BigInteger.prototype.compareTo = bnCompareTo;BigInteger.prototype.bitLength = bnBitLength;BigInteger.prototype.mod = bnMod;BigInteger.prototype.modPowInt = bnModPowInt;BigInteger.ZERO = nbv(0);BigInteger.ONE = nbv(1);
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function bnClone() {
  var a = nbi();this.copyTo(a);return a;
}function bnIntValue() {
  if (this.s < 0) {
    if (this.t == 1) {
      return this[0] - this.DV;
    } else {
      if (this.t == 0) {
        return -1;
      }
    }
  } else {
    if (this.t == 1) {
      return this[0];
    } else {
      if (this.t == 0) {
        return 0;
      }
    }
  }return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
}function bnByteValue() {
  return this.t == 0 ? this.s : this[0] << 24 >> 24;
}function bnShortValue() {
  return this.t == 0 ? this.s : this[0] << 16 >> 16;
}function bnpChunkSize(a) {
  return Math.floor(Math.LN2 * this.DB / Math.log(a));
}function bnSigNum() {
  if (this.s < 0) {
    return -1;
  } else {
    if (this.t <= 0 || this.t == 1 && this[0] <= 0) {
      return 0;
    } else {
      return 1;
    }
  }
}function bnpToRadix(c) {
  if (c == null) {
    c = 10;
  }if (this.signum() == 0 || c < 2 || c > 36) {
    return "0";
  }var f = this.chunkSize(c);var e = Math.pow(c, f);var i = nbv(e),
      j = nbi(),
      h = nbi(),
      g = "";this.divRemTo(i, j, h);while (j.signum() > 0) {
    g = (e + h.intValue()).toString(c).substr(1) + g;j.divRemTo(i, j, h);
  }return h.intValue().toString(c) + g;
}function bnpFromRadix(m, h) {
  this.fromInt(0);if (h == null) {
    h = 10;
  }var f = this.chunkSize(h);var g = Math.pow(h, f),
      e = false,
      a = 0,
      l = 0;for (var c = 0; c < m.length; ++c) {
    var k = intAt(m, c);if (k < 0) {
      if (m.charAt(c) == "-" && this.signum() == 0) {
        e = true;
      }continue;
    }l = h * l + k;if (++a >= f) {
      this.dMultiply(g);this.dAddOffset(l, 0);a = 0;l = 0;
    }
  }if (a > 0) {
    this.dMultiply(Math.pow(h, a));this.dAddOffset(l, 0);
  }if (e) {
    BigInteger.ZERO.subTo(this, this);
  }
}function bnpFromNumber(f, e, h) {
  if ("number" == typeof e) {
    if (f < 2) {
      this.fromInt(1);
    } else {
      this.fromNumber(f, h);if (!this.testBit(f - 1)) {
        this.bitwiseTo(BigInteger.ONE.shiftLeft(f - 1), op_or, this);
      }if (this.isEven()) {
        this.dAddOffset(1, 0);
      }while (!this.isProbablePrime(e)) {
        this.dAddOffset(2, 0);if (this.bitLength() > f) {
          this.subTo(BigInteger.ONE.shiftLeft(f - 1), this);
        }
      }
    }
  } else {
    var d = new Array(),
        g = f & 7;d.length = (f >> 3) + 1;e.nextBytes(d);if (g > 0) {
      d[0] &= (1 << g) - 1;
    } else {
      d[0] = 0;
    }this.fromString(d, 256);
  }
}function bnToByteArray() {
  var b = this.t,
      c = new Array();c[0] = this.s;var e = this.DB - b * this.DB % 8,
      f,
      a = 0;if (b-- > 0) {
    if (e < this.DB && (f = this[b] >> e) != (this.s & this.DM) >> e) {
      c[a++] = f | this.s << this.DB - e;
    }while (b >= 0) {
      if (e < 8) {
        f = (this[b] & (1 << e) - 1) << 8 - e;f |= this[--b] >> (e += this.DB - 8);
      } else {
        f = this[b] >> (e -= 8) & 255;if (e <= 0) {
          e += this.DB;--b;
        }
      }if ((f & 128) != 0) {
        f |= -256;
      }if (a == 0 && (this.s & 128) != (f & 128)) {
        ++a;
      }if (a > 0 || f != this.s) {
        c[a++] = f;
      }
    }
  }return c;
}function bnEquals(b) {
  return this.compareTo(b) == 0;
}function bnMin(b) {
  return this.compareTo(b) < 0 ? this : b;
}function bnMax(b) {
  return this.compareTo(b) > 0 ? this : b;
}function bnpBitwiseTo(c, h, e) {
  var d,
      g,
      b = Math.min(c.t, this.t);for (d = 0; d < b; ++d) {
    e[d] = h(this[d], c[d]);
  }if (c.t < this.t) {
    g = c.s & this.DM;for (d = b; d < this.t; ++d) {
      e[d] = h(this[d], g);
    }e.t = this.t;
  } else {
    g = this.s & this.DM;for (d = b; d < c.t; ++d) {
      e[d] = h(g, c[d]);
    }e.t = c.t;
  }e.s = h(this.s, c.s);e.clamp();
}function op_and(a, b) {
  return a & b;
}function bnAnd(b) {
  var c = nbi();this.bitwiseTo(b, op_and, c);return c;
}function op_or(a, b) {
  return a | b;
}function bnOr(b) {
  var c = nbi();this.bitwiseTo(b, op_or, c);return c;
}function op_xor(a, b) {
  return a ^ b;
}function bnXor(b) {
  var c = nbi();this.bitwiseTo(b, op_xor, c);return c;
}function op_andnot(a, b) {
  return a & ~b;
}function bnAndNot(b) {
  var c = nbi();this.bitwiseTo(b, op_andnot, c);return c;
}function bnNot() {
  var b = nbi();for (var a = 0; a < this.t; ++a) {
    b[a] = this.DM & ~this[a];
  }b.t = this.t;b.s = ~this.s;return b;
}function bnShiftLeft(b) {
  var a = nbi();if (b < 0) {
    this.rShiftTo(-b, a);
  } else {
    this.lShiftTo(b, a);
  }return a;
}function bnShiftRight(b) {
  var a = nbi();if (b < 0) {
    this.lShiftTo(-b, a);
  } else {
    this.rShiftTo(b, a);
  }return a;
}function lbit(a) {
  if (a == 0) {
    return -1;
  }var b = 0;if ((a & 65535) == 0) {
    a >>= 16;b += 16;
  }if ((a & 255) == 0) {
    a >>= 8;b += 8;
  }if ((a & 15) == 0) {
    a >>= 4;b += 4;
  }if ((a & 3) == 0) {
    a >>= 2;b += 2;
  }if ((a & 1) == 0) {
    ++b;
  }return b;
}function bnGetLowestSetBit() {
  for (var a = 0; a < this.t; ++a) {
    if (this[a] != 0) {
      return a * this.DB + lbit(this[a]);
    }
  }if (this.s < 0) {
    return this.t * this.DB;
  }return -1;
}function cbit(a) {
  var b = 0;while (a != 0) {
    a &= a - 1;++b;
  }return b;
}function bnBitCount() {
  var c = 0,
      a = this.s & this.DM;for (var b = 0; b < this.t; ++b) {
    c += cbit(this[b] ^ a);
  }return c;
}function bnTestBit(b) {
  var a = Math.floor(b / this.DB);if (a >= this.t) {
    return this.s != 0;
  }return (this[a] & 1 << b % this.DB) != 0;
}function bnpChangeBit(c, b) {
  var a = BigInteger.ONE.shiftLeft(c);this.bitwiseTo(a, b, a);return a;
}function bnSetBit(a) {
  return this.changeBit(a, op_or);
}function bnClearBit(a) {
  return this.changeBit(a, op_andnot);
}function bnFlipBit(a) {
  return this.changeBit(a, op_xor);
}function bnpAddTo(d, f) {
  var e = 0,
      g = 0,
      b = Math.min(d.t, this.t);while (e < b) {
    g += this[e] + d[e];f[e++] = g & this.DM;g >>= this.DB;
  }if (d.t < this.t) {
    g += d.s;while (e < this.t) {
      g += this[e];f[e++] = g & this.DM;g >>= this.DB;
    }g += this.s;
  } else {
    g += this.s;while (e < d.t) {
      g += d[e];f[e++] = g & this.DM;g >>= this.DB;
    }g += d.s;
  }f.s = g < 0 ? -1 : 0;if (g > 0) {
    f[e++] = g;
  } else {
    if (g < -1) {
      f[e++] = this.DV + g;
    }
  }f.t = e;f.clamp();
}function bnAdd(b) {
  var c = nbi();this.addTo(b, c);return c;
}function bnSubtract(b) {
  var c = nbi();this.subTo(b, c);return c;
}function bnMultiply(b) {
  var c = nbi();this.multiplyTo(b, c);return c;
}function bnSquare() {
  var a = nbi();this.squareTo(a);return a;
}function bnDivide(b) {
  var c = nbi();this.divRemTo(b, c, null);return c;
}function bnRemainder(b) {
  var c = nbi();this.divRemTo(b, null, c);return c;
}function bnDivideAndRemainder(b) {
  var d = nbi(),
      c = nbi();this.divRemTo(b, d, c);return new Array(d, c);
}function bnpDMultiply(a) {
  this[this.t] = this.am(0, a - 1, this, 0, 0, this.t);++this.t;this.clamp();
}function bnpDAddOffset(b, a) {
  if (b == 0) {
    return;
  }while (this.t <= a) {
    this[this.t++] = 0;
  }this[a] += b;while (this[a] >= this.DV) {
    this[a] -= this.DV;if (++a >= this.t) {
      this[this.t++] = 0;
    }++this[a];
  }
}function NullExp() {}function nNop(a) {
  return a;
}function nMulTo(a, c, b) {
  a.multiplyTo(c, b);
}function nSqrTo(a, b) {
  a.squareTo(b);
}NullExp.prototype.convert = nNop;NullExp.prototype.revert = nNop;NullExp.prototype.mulTo = nMulTo;NullExp.prototype.sqrTo = nSqrTo;function bnPow(a) {
  return this.exp(a, new NullExp());
}function bnpMultiplyLowerTo(b, f, e) {
  var d = Math.min(this.t + b.t, f);e.s = 0;e.t = d;while (d > 0) {
    e[--d] = 0;
  }var c;for (c = e.t - this.t; d < c; ++d) {
    e[d + this.t] = this.am(0, b[d], e, d, 0, this.t);
  }for (c = Math.min(b.t, f); d < c; ++d) {
    this.am(0, b[d], e, d, 0, f - d);
  }e.clamp();
}function bnpMultiplyUpperTo(b, e, d) {
  --e;var c = d.t = this.t + b.t - e;d.s = 0;while (--c >= 0) {
    d[c] = 0;
  }for (c = Math.max(e - this.t, 0); c < b.t; ++c) {
    d[this.t + c - e] = this.am(e - c, b[c], d, 0, 0, this.t + c - e);
  }d.clamp();d.drShiftTo(1, d);
}function Barrett(a) {
  this.r2 = nbi();this.q3 = nbi();BigInteger.ONE.dlShiftTo(2 * a.t, this.r2);this.mu = this.r2.divide(a);this.m = a;
}function barrettConvert(a) {
  if (a.s < 0 || a.t > 2 * this.m.t) {
    return a.mod(this.m);
  } else {
    if (a.compareTo(this.m) < 0) {
      return a;
    } else {
      var b = nbi();a.copyTo(b);this.reduce(b);return b;
    }
  }
}function barrettRevert(a) {
  return a;
}function barrettReduce(a) {
  a.drShiftTo(this.m.t - 1, this.r2);if (a.t > this.m.t + 1) {
    a.t = this.m.t + 1;a.clamp();
  }this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);while (a.compareTo(this.r2) < 0) {
    a.dAddOffset(1, this.m.t + 1);
  }a.subTo(this.r2, a);while (a.compareTo(this.m) >= 0) {
    a.subTo(this.m, a);
  }
}function barrettSqrTo(a, b) {
  a.squareTo(b);this.reduce(b);
}function barrettMulTo(a, c, b) {
  a.multiplyTo(c, b);this.reduce(b);
}Barrett.prototype.convert = barrettConvert;Barrett.prototype.revert = barrettRevert;Barrett.prototype.reduce = barrettReduce;Barrett.prototype.mulTo = barrettMulTo;Barrett.prototype.sqrTo = barrettSqrTo;function bnModPow(q, f) {
  var o = q.bitLength(),
      h,
      b = nbv(1),
      v;if (o <= 0) {
    return b;
  } else {
    if (o < 18) {
      h = 1;
    } else {
      if (o < 48) {
        h = 3;
      } else {
        if (o < 144) {
          h = 4;
        } else {
          if (o < 768) {
            h = 5;
          } else {
            h = 6;
          }
        }
      }
    }
  }if (o < 8) {
    v = new Classic(f);
  } else {
    if (f.isEven()) {
      v = new Barrett(f);
    } else {
      v = new Montgomery(f);
    }
  }var p = new Array(),
      d = 3,
      s = h - 1,
      a = (1 << h) - 1;p[1] = v.convert(this);if (h > 1) {
    var A = nbi();v.sqrTo(p[1], A);while (d <= a) {
      p[d] = nbi();v.mulTo(A, p[d - 2], p[d]);d += 2;
    }
  }var l = q.t - 1,
      x,
      u = true,
      c = nbi(),
      y;o = nbits(q[l]) - 1;while (l >= 0) {
    if (o >= s) {
      x = q[l] >> o - s & a;
    } else {
      x = (q[l] & (1 << o + 1) - 1) << s - o;if (l > 0) {
        x |= q[l - 1] >> this.DB + o - s;
      }
    }d = h;while ((x & 1) == 0) {
      x >>= 1;--d;
    }if ((o -= d) < 0) {
      o += this.DB;--l;
    }if (u) {
      p[x].copyTo(b);u = false;
    } else {
      while (d > 1) {
        v.sqrTo(b, c);v.sqrTo(c, b);d -= 2;
      }if (d > 0) {
        v.sqrTo(b, c);
      } else {
        y = b;b = c;c = y;
      }v.mulTo(c, p[x], b);
    }while (l >= 0 && (q[l] & 1 << o) == 0) {
      v.sqrTo(b, c);y = b;b = c;c = y;if (--o < 0) {
        o = this.DB - 1;--l;
      }
    }
  }return v.revert(b);
}function bnGCD(c) {
  var b = this.s < 0 ? this.negate() : this.clone();var h = c.s < 0 ? c.negate() : c.clone();if (b.compareTo(h) < 0) {
    var e = b;b = h;h = e;
  }var d = b.getLowestSetBit(),
      f = h.getLowestSetBit();if (f < 0) {
    return b;
  }if (d < f) {
    f = d;
  }if (f > 0) {
    b.rShiftTo(f, b);h.rShiftTo(f, h);
  }while (b.signum() > 0) {
    if ((d = b.getLowestSetBit()) > 0) {
      b.rShiftTo(d, b);
    }if ((d = h.getLowestSetBit()) > 0) {
      h.rShiftTo(d, h);
    }if (b.compareTo(h) >= 0) {
      b.subTo(h, b);b.rShiftTo(1, b);
    } else {
      h.subTo(b, h);h.rShiftTo(1, h);
    }
  }if (f > 0) {
    h.lShiftTo(f, h);
  }return h;
}function bnpModInt(e) {
  if (e <= 0) {
    return 0;
  }var c = this.DV % e,
      b = this.s < 0 ? e - 1 : 0;if (this.t > 0) {
    if (c == 0) {
      b = this[0] % e;
    } else {
      for (var a = this.t - 1; a >= 0; --a) {
        b = (c * b + this[a]) % e;
      }
    }
  }return b;
}function bnModInverse(f) {
  var j = f.isEven();if (this.isEven() && j || f.signum() == 0) {
    return BigInteger.ZERO;
  }var i = f.clone(),
      h = this.clone();var g = nbv(1),
      e = nbv(0),
      l = nbv(0),
      k = nbv(1);while (i.signum() != 0) {
    while (i.isEven()) {
      i.rShiftTo(1, i);if (j) {
        if (!g.isEven() || !e.isEven()) {
          g.addTo(this, g);e.subTo(f, e);
        }g.rShiftTo(1, g);
      } else {
        if (!e.isEven()) {
          e.subTo(f, e);
        }
      }e.rShiftTo(1, e);
    }while (h.isEven()) {
      h.rShiftTo(1, h);if (j) {
        if (!l.isEven() || !k.isEven()) {
          l.addTo(this, l);k.subTo(f, k);
        }l.rShiftTo(1, l);
      } else {
        if (!k.isEven()) {
          k.subTo(f, k);
        }
      }k.rShiftTo(1, k);
    }if (i.compareTo(h) >= 0) {
      i.subTo(h, i);if (j) {
        g.subTo(l, g);
      }e.subTo(k, e);
    } else {
      h.subTo(i, h);if (j) {
        l.subTo(g, l);
      }k.subTo(e, k);
    }
  }if (h.compareTo(BigInteger.ONE) != 0) {
    return BigInteger.ZERO;
  }if (k.compareTo(f) >= 0) {
    return k.subtract(f);
  }if (k.signum() < 0) {
    k.addTo(f, k);
  } else {
    return k;
  }if (k.signum() < 0) {
    return k.add(f);
  } else {
    return k;
  }
}var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];function bnIsProbablePrime(e) {
  var d,
      b = this.abs();if (b.t == 1 && b[0] <= lowprimes[lowprimes.length - 1]) {
    for (d = 0; d < lowprimes.length; ++d) {
      if (b[0] == lowprimes[d]) {
        return true;
      }
    }return false;
  }if (b.isEven()) {
    return false;
  }d = 1;while (d < lowprimes.length) {
    var a = lowprimes[d],
        c = d + 1;while (c < lowprimes.length && a < lplim) {
      a *= lowprimes[c++];
    }a = b.modInt(a);while (d < c) {
      if (a % lowprimes[d++] == 0) {
        return false;
      }
    }
  }return b.millerRabin(e);
}function bnpMillerRabin(f) {
  var g = this.subtract(BigInteger.ONE);var c = g.getLowestSetBit();if (c <= 0) {
    return false;
  }var h = g.shiftRight(c);f = f + 1 >> 1;if (f > lowprimes.length) {
    f = lowprimes.length;
  }var b = nbi();for (var e = 0; e < f; ++e) {
    b.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);var l = b.modPow(h, this);if (l.compareTo(BigInteger.ONE) != 0 && l.compareTo(g) != 0) {
      var d = 1;while (d++ < c && l.compareTo(g) != 0) {
        l = l.modPowInt(2, this);if (l.compareTo(BigInteger.ONE) == 0) {
          return false;
        }
      }if (l.compareTo(g) != 0) {
        return false;
      }
    }
  }return true;
}BigInteger.prototype.chunkSize = bnpChunkSize;BigInteger.prototype.toRadix = bnpToRadix;BigInteger.prototype.fromRadix = bnpFromRadix;BigInteger.prototype.fromNumber = bnpFromNumber;BigInteger.prototype.bitwiseTo = bnpBitwiseTo;BigInteger.prototype.changeBit = bnpChangeBit;BigInteger.prototype.addTo = bnpAddTo;BigInteger.prototype.dMultiply = bnpDMultiply;BigInteger.prototype.dAddOffset = bnpDAddOffset;BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;BigInteger.prototype.modInt = bnpModInt;BigInteger.prototype.millerRabin = bnpMillerRabin;BigInteger.prototype.clone = bnClone;BigInteger.prototype.intValue = bnIntValue;BigInteger.prototype.byteValue = bnByteValue;BigInteger.prototype.shortValue = bnShortValue;BigInteger.prototype.signum = bnSigNum;BigInteger.prototype.toByteArray = bnToByteArray;BigInteger.prototype.equals = bnEquals;BigInteger.prototype.min = bnMin;BigInteger.prototype.max = bnMax;BigInteger.prototype.and = bnAnd;BigInteger.prototype.or = bnOr;BigInteger.prototype.xor = bnXor;BigInteger.prototype.andNot = bnAndNot;BigInteger.prototype.not = bnNot;BigInteger.prototype.shiftLeft = bnShiftLeft;BigInteger.prototype.shiftRight = bnShiftRight;BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;BigInteger.prototype.bitCount = bnBitCount;BigInteger.prototype.testBit = bnTestBit;BigInteger.prototype.setBit = bnSetBit;BigInteger.prototype.clearBit = bnClearBit;BigInteger.prototype.flipBit = bnFlipBit;BigInteger.prototype.add = bnAdd;BigInteger.prototype.subtract = bnSubtract;BigInteger.prototype.multiply = bnMultiply;BigInteger.prototype.divide = bnDivide;BigInteger.prototype.remainder = bnRemainder;BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;BigInteger.prototype.modPow = bnModPow;BigInteger.prototype.modInverse = bnModInverse;BigInteger.prototype.pow = bnPow;BigInteger.prototype.gcd = bnGCD;BigInteger.prototype.isProbablePrime = bnIsProbablePrime;BigInteger.prototype.square = bnSquare;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function Arcfour() {
  this.i = 0;this.j = 0;this.S = new Array();
}function ARC4init(d) {
  var c, a, b;for (c = 0; c < 256; ++c) {
    this.S[c] = c;
  }a = 0;for (c = 0; c < 256; ++c) {
    a = a + this.S[c] + d[c % d.length] & 255;b = this.S[c];this.S[c] = this.S[a];this.S[a] = b;
  }this.i = 0;this.j = 0;
}function ARC4next() {
  var a;this.i = this.i + 1 & 255;this.j = this.j + this.S[this.i] & 255;a = this.S[this.i];this.S[this.i] = this.S[this.j];this.S[this.j] = a;return this.S[a + this.S[this.i] & 255];
}Arcfour.prototype.init = ARC4init;Arcfour.prototype.next = ARC4next;function prng_newstate() {
  return new Arcfour();
}var rng_psize = 256;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var rng_state;var rng_pool;var rng_pptr;function rng_seed_int(a) {
  rng_pool[rng_pptr++] ^= a & 255;rng_pool[rng_pptr++] ^= a >> 8 & 255;rng_pool[rng_pptr++] ^= a >> 16 & 255;rng_pool[rng_pptr++] ^= a >> 24 & 255;if (rng_pptr >= rng_psize) {
    rng_pptr -= rng_psize;
  }
}function rng_seed_time() {
  rng_seed_int(new Date().getTime());
}if (rng_pool == null) {
  rng_pool = new Array();rng_pptr = 0;var t;if (window !== undefined && (window.crypto !== undefined || window.msCrypto !== undefined)) {
    var crypto = window.crypto || window.msCrypto;if (crypto.getRandomValues) {
      var ua = new Uint8Array(32);crypto.getRandomValues(ua);for (t = 0; t < 32; ++t) {
        rng_pool[rng_pptr++] = ua[t];
      }
    } else {
      if (navigator.appName == "Netscape" && navigator.appVersion < "5") {
        var z = window.crypto.random(32);for (t = 0; t < z.length; ++t) {
          rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
        }
      }
    }
  }while (rng_pptr < rng_psize) {
    t = Math.floor(65536 * Math.random());rng_pool[rng_pptr++] = t >>> 8;rng_pool[rng_pptr++] = t & 255;
  }rng_pptr = 0;rng_seed_time();
}function rng_get_byte() {
  if (rng_state == null) {
    rng_seed_time();rng_state = prng_newstate();rng_state.init(rng_pool);for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {
      rng_pool[rng_pptr] = 0;
    }rng_pptr = 0;
  }return rng_state.next();
}function rng_get_bytes(b) {
  var a;for (a = 0; a < b.length; ++a) {
    b[a] = rng_get_byte();
  }
}function SecureRandom() {}SecureRandom.prototype.nextBytes = rng_get_bytes;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function parseBigInt(b, a) {
  return new BigInteger(b, a);
}function linebrk(c, d) {
  var a = "";var b = 0;while (b + d < c.length) {
    a += c.substring(b, b + d) + "\n";b += d;
  }return a + c.substring(b, c.length);
}function byte2Hex(a) {
  if (a < 16) {
    return "0" + a.toString(16);
  } else {
    return a.toString(16);
  }
}function pkcs1pad2(e, h) {
  if (h < e.length + 11) {
    throw "Message too long for RSA";return null;
  }var g = new Array();var d = e.length - 1;while (d >= 0 && h > 0) {
    var f = e.charCodeAt(d--);if (f < 128) {
      g[--h] = f;
    } else {
      if (f > 127 && f < 2048) {
        g[--h] = f & 63 | 128;g[--h] = f >> 6 | 192;
      } else {
        g[--h] = f & 63 | 128;g[--h] = f >> 6 & 63 | 128;g[--h] = f >> 12 | 224;
      }
    }
  }g[--h] = 0;var b = new SecureRandom();var a = new Array();while (h > 2) {
    a[0] = 0;while (a[0] == 0) {
      b.nextBytes(a);
    }g[--h] = a[0];
  }g[--h] = 2;g[--h] = 0;return new BigInteger(g);
}function oaep_mgf1_arr(c, a, e) {
  var b = "",
      d = 0;while (b.length < a) {
    b += e(String.fromCharCode.apply(String, c.concat([(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255])));d += 1;
  }return b;
}function oaep_pad(q, a, f, l) {
  var c = KJUR.crypto.MessageDigest;var o = KJUR.crypto.Util;var b = null;if (!f) {
    f = "sha1";
  }if (typeof f === "string") {
    b = c.getCanonicalAlgName(f);l = c.getHashLength(b);f = function f(i) {
      return hextorstr(o.hashHex(rstrtohex(i), b));
    };
  }if (q.length + 2 * l + 2 > a) {
    throw "Message too long for RSA";
  }var k = "",
      e;for (e = 0; e < a - q.length - 2 * l - 2; e += 1) {
    k += "\x00";
  }var h = f("") + k + "\x01" + q;var g = new Array(l);new SecureRandom().nextBytes(g);var j = oaep_mgf1_arr(g, h.length, f);var p = [];for (e = 0; e < h.length; e += 1) {
    p[e] = h.charCodeAt(e) ^ j.charCodeAt(e);
  }var m = oaep_mgf1_arr(p, g.length, f);var d = [0];for (e = 0; e < g.length; e += 1) {
    d[e + 1] = g[e] ^ m.charCodeAt(e);
  }return new BigInteger(d.concat(p));
}function RSAKey() {
  this.n = null;this.e = 0;this.d = null;this.p = null;this.q = null;this.dmp1 = null;this.dmq1 = null;this.coeff = null;
}function RSASetPublic(b, a) {
  this.isPublic = true;this.isPrivate = false;if (typeof b !== "string") {
    this.n = b;this.e = a;
  } else {
    if (b != null && a != null && b.length > 0 && a.length > 0) {
      this.n = parseBigInt(b, 16);this.e = parseInt(a, 16);
    } else {
      throw "Invalid RSA public key";
    }
  }
}function RSADoPublic(a) {
  return a.modPowInt(this.e, this.n);
}function RSAEncrypt(d) {
  var a = pkcs1pad2(d, this.n.bitLength() + 7 >> 3);if (a == null) {
    return null;
  }var e = this.doPublic(a);if (e == null) {
    return null;
  }var b = e.toString(16);if ((b.length & 1) == 0) {
    return b;
  } else {
    return "0" + b;
  }
}function RSAEncryptOAEP(f, e, b) {
  var a = oaep_pad(f, this.n.bitLength() + 7 >> 3, e, b);if (a == null) {
    return null;
  }var g = this.doPublic(a);if (g == null) {
    return null;
  }var d = g.toString(16);if ((d.length & 1) == 0) {
    return d;
  } else {
    return "0" + d;
  }
}RSAKey.prototype.doPublic = RSADoPublic;RSAKey.prototype.setPublic = RSASetPublic;RSAKey.prototype.encrypt = RSAEncrypt;RSAKey.prototype.encryptOAEP = RSAEncryptOAEP;RSAKey.prototype.type = "RSA";
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function ECFieldElementFp(b, a) {
  this.x = a;this.q = b;
}function feFpEquals(a) {
  if (a == this) {
    return true;
  }return this.q.equals(a.q) && this.x.equals(a.x);
}function feFpToBigInteger() {
  return this.x;
}function feFpNegate() {
  return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));
}function feFpAdd(a) {
  return new ECFieldElementFp(this.q, this.x.add(a.toBigInteger()).mod(this.q));
}function feFpSubtract(a) {
  return new ECFieldElementFp(this.q, this.x.subtract(a.toBigInteger()).mod(this.q));
}function feFpMultiply(a) {
  return new ECFieldElementFp(this.q, this.x.multiply(a.toBigInteger()).mod(this.q));
}function feFpSquare() {
  return new ECFieldElementFp(this.q, this.x.square().mod(this.q));
}function feFpDivide(a) {
  return new ECFieldElementFp(this.q, this.x.multiply(a.toBigInteger().modInverse(this.q)).mod(this.q));
}ECFieldElementFp.prototype.equals = feFpEquals;ECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;ECFieldElementFp.prototype.negate = feFpNegate;ECFieldElementFp.prototype.add = feFpAdd;ECFieldElementFp.prototype.subtract = feFpSubtract;ECFieldElementFp.prototype.multiply = feFpMultiply;ECFieldElementFp.prototype.square = feFpSquare;ECFieldElementFp.prototype.divide = feFpDivide;function ECPointFp(c, a, d, b) {
  this.curve = c;this.x = a;this.y = d;if (b == null) {
    this.z = BigInteger.ONE;
  } else {
    this.z = b;
  }this.zinv = null;
}function pointFpGetX() {
  if (this.zinv == null) {
    this.zinv = this.z.modInverse(this.curve.q);
  }return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));
}function pointFpGetY() {
  if (this.zinv == null) {
    this.zinv = this.z.modInverse(this.curve.q);
  }return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));
}function pointFpEquals(a) {
  if (a == this) {
    return true;
  }if (this.isInfinity()) {
    return a.isInfinity();
  }if (a.isInfinity()) {
    return this.isInfinity();
  }var c, b;c = a.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(a.z)).mod(this.curve.q);if (!c.equals(BigInteger.ZERO)) {
    return false;
  }b = a.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(a.z)).mod(this.curve.q);return b.equals(BigInteger.ZERO);
}function pointFpIsInfinity() {
  if (this.x == null && this.y == null) {
    return true;
  }return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);
}function pointFpNegate() {
  return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);
}function pointFpAdd(l) {
  if (this.isInfinity()) {
    return l;
  }if (l.isInfinity()) {
    return this;
  }var p = l.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(l.z)).mod(this.curve.q);var o = l.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(l.z)).mod(this.curve.q);if (BigInteger.ZERO.equals(o)) {
    if (BigInteger.ZERO.equals(p)) {
      return this.twice();
    }return this.curve.getInfinity();
  }var j = new BigInteger("3");var e = this.x.toBigInteger();var n = this.y.toBigInteger();var c = l.x.toBigInteger();var k = l.y.toBigInteger();var m = o.square();var i = m.multiply(o);var d = e.multiply(m);var g = p.square().multiply(this.z);var a = g.subtract(d.shiftLeft(1)).multiply(l.z).subtract(i).multiply(o).mod(this.curve.q);var h = d.multiply(j).multiply(p).subtract(n.multiply(i)).subtract(g.multiply(p)).multiply(l.z).add(p.multiply(i)).mod(this.curve.q);var f = i.multiply(this.z).multiply(l.z).mod(this.curve.q);return new ECPointFp(this.curve, this.curve.fromBigInteger(a), this.curve.fromBigInteger(h), f);
}function pointFpTwice() {
  if (this.isInfinity()) {
    return this;
  }if (this.y.toBigInteger().signum() == 0) {
    return this.curve.getInfinity();
  }var g = new BigInteger("3");var c = this.x.toBigInteger();var h = this.y.toBigInteger();var e = h.multiply(this.z);var j = e.multiply(h).mod(this.curve.q);var i = this.curve.a.toBigInteger();var k = c.square().multiply(g);if (!BigInteger.ZERO.equals(i)) {
    k = k.add(this.z.square().multiply(i));
  }k = k.mod(this.curve.q);var b = k.square().subtract(c.shiftLeft(3).multiply(j)).shiftLeft(1).multiply(e).mod(this.curve.q);var f = k.multiply(g).multiply(c).subtract(j.shiftLeft(1)).shiftLeft(2).multiply(j).subtract(k.square().multiply(k)).mod(this.curve.q);var d = e.square().multiply(e).shiftLeft(3).mod(this.curve.q);return new ECPointFp(this.curve, this.curve.fromBigInteger(b), this.curve.fromBigInteger(f), d);
}function pointFpMultiply(b) {
  if (this.isInfinity()) {
    return this;
  }if (b.signum() == 0) {
    return this.curve.getInfinity();
  }var g = b;var f = g.multiply(new BigInteger("3"));var l = this.negate();var d = this;var c;for (c = f.bitLength() - 2; c > 0; --c) {
    d = d.twice();var a = f.testBit(c);var j = g.testBit(c);if (a != j) {
      d = d.add(a ? this : l);
    }
  }return d;
}function pointFpMultiplyTwo(c, a, b) {
  var d;if (c.bitLength() > b.bitLength()) {
    d = c.bitLength() - 1;
  } else {
    d = b.bitLength() - 1;
  }var f = this.curve.getInfinity();var e = this.add(a);while (d >= 0) {
    f = f.twice();if (c.testBit(d)) {
      if (b.testBit(d)) {
        f = f.add(e);
      } else {
        f = f.add(this);
      }
    } else {
      if (b.testBit(d)) {
        f = f.add(a);
      }
    }--d;
  }return f;
}ECPointFp.prototype.getX = pointFpGetX;ECPointFp.prototype.getY = pointFpGetY;ECPointFp.prototype.equals = pointFpEquals;ECPointFp.prototype.isInfinity = pointFpIsInfinity;ECPointFp.prototype.negate = pointFpNegate;ECPointFp.prototype.add = pointFpAdd;ECPointFp.prototype.twice = pointFpTwice;ECPointFp.prototype.multiply = pointFpMultiply;ECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;function ECCurveFp(e, d, c) {
  this.q = e;this.a = this.fromBigInteger(d);this.b = this.fromBigInteger(c);this.infinity = new ECPointFp(this, null, null);
}function curveFpGetQ() {
  return this.q;
}function curveFpGetA() {
  return this.a;
}function curveFpGetB() {
  return this.b;
}function curveFpEquals(a) {
  if (a == this) {
    return true;
  }return this.q.equals(a.q) && this.a.equals(a.a) && this.b.equals(a.b);
}function curveFpGetInfinity() {
  return this.infinity;
}function curveFpFromBigInteger(a) {
  return new ECFieldElementFp(this.q, a);
}function curveFpDecodePointHex(d) {
  switch (parseInt(d.substr(0, 2), 16)) {case 0:
      return this.infinity;case 2:case 3:
      return null;case 4:case 6:case 7:
      var a = (d.length - 2) / 2;var c = d.substr(2, a);var b = d.substr(a + 2, a);return new ECPointFp(this, this.fromBigInteger(new BigInteger(c, 16)), this.fromBigInteger(new BigInteger(b, 16)));default:
      return null;}
}ECCurveFp.prototype.getQ = curveFpGetQ;ECCurveFp.prototype.getA = curveFpGetA;ECCurveFp.prototype.getB = curveFpGetB;ECCurveFp.prototype.equals = curveFpEquals;ECCurveFp.prototype.getInfinity = curveFpGetInfinity;ECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;
/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
 */
var jsonParse = function () {
  var e = "(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)";var j = '(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))';var i = '(?:"' + j + '*")';var d = new RegExp("(?:false|true|null|[\\{\\}\\[\\]]|" + e + "|" + i + ")", "g");var k = new RegExp("\\\\(?:([^u])|u(.{4}))", "g");var g = { '"': '"', "/": "/", "\\": "\\", b: "\b", f: "\f", n: "\n", r: "\r", t: "\t" };function h(l, m, n) {
    return m ? g[m] : String.fromCharCode(parseInt(n, 16));
  }var c = new String("");var a = "\\";var f = { "{": Object, "[": Array };var b = Object.hasOwnProperty;return function (u, q) {
    var p = u.match(d);var x;var v = p[0];var l = false;if ("{" === v) {
      x = {};
    } else {
      if ("[" === v) {
        x = [];
      } else {
        x = [];l = true;
      }
    }var t;var r = [x];for (var o = 1 - l, m = p.length; o < m; ++o) {
      v = p[o];var w;switch (v.charCodeAt(0)) {default:
          w = r[0];w[t || w.length] = +v;t = void 0;break;case 34:
          v = v.substring(1, v.length - 1);if (v.indexOf(a) !== -1) {
            v = v.replace(k, h);
          }w = r[0];if (!t) {
            if (w instanceof Array) {
              t = w.length;
            } else {
              t = v || c;break;
            }
          }w[t] = v;t = void 0;break;case 91:
          w = r[0];r.unshift(w[t || w.length] = []);t = void 0;break;case 93:
          r.shift();break;case 102:
          w = r[0];w[t || w.length] = false;t = void 0;break;case 110:
          w = r[0];w[t || w.length] = null;t = void 0;break;case 116:
          w = r[0];w[t || w.length] = true;t = void 0;break;case 123:
          w = r[0];r.unshift(w[t || w.length] = {});t = void 0;break;case 125:
          r.shift();break;}
    }if (l) {
      if (r.length !== 1) {
        throw new Error();
      }x = x[0];
    } else {
      if (r.length) {
        throw new Error();
      }
    }if (q) {
      var s = function s(C, B) {
        var D = C[B];if (D && (typeof D === "undefined" ? "undefined" : _typeof(D)) === "object") {
          var n = null;for (var z in D) {
            if (b.call(D, z) && D !== C) {
              var y = s(D, z);if (y !== void 0) {
                D[z] = y;
              } else {
                if (!n) {
                  n = [];
                }n.push(z);
              }
            }
          }if (n) {
            for (var A = n.length; --A >= 0;) {
              delete D[n[A]];
            }
          }
        }return q.call(C, B, D);
      };x = s({ "": x }, "");
    }return x;
  };
}();
if (typeof KJUR == "undefined" || !KJUR) {
  KJUR = {};
}if (typeof KJUR.asn1 == "undefined" || !KJUR.asn1) {
  KJUR.asn1 = {};
}KJUR.asn1.ASN1Util = new function () {
  this.integerToByteHex = function (a) {
    var b = a.toString(16);if (b.length % 2 == 1) {
      b = "0" + b;
    }return b;
  };this.bigIntToMinTwosComplementsHex = function (j) {
    var f = j.toString(16);if (f.substr(0, 1) != "-") {
      if (f.length % 2 == 1) {
        f = "0" + f;
      } else {
        if (!f.match(/^[0-7]/)) {
          f = "00" + f;
        }
      }
    } else {
      var a = f.substr(1);var e = a.length;if (e % 2 == 1) {
        e += 1;
      } else {
        if (!f.match(/^[0-7]/)) {
          e += 2;
        }
      }var g = "";for (var d = 0; d < e; d++) {
        g += "f";
      }var c = new BigInteger(g, 16);var b = c.xor(j).add(BigInteger.ONE);f = b.toString(16).replace(/^-/, "");
    }return f;
  };this.getPEMStringFromHex = function (a, b) {
    return hextopem(a, b);
  };this.newObject = function (k) {
    var D = KJUR,
        n = D.asn1,
        z = n.DERBoolean,
        e = n.DERInteger,
        s = n.DERBitString,
        h = n.DEROctetString,
        v = n.DERNull,
        w = n.DERObjectIdentifier,
        l = n.DEREnumerated,
        g = n.DERUTF8String,
        f = n.DERNumericString,
        y = n.DERPrintableString,
        u = n.DERTeletexString,
        p = n.DERIA5String,
        C = n.DERUTCTime,
        j = n.DERGeneralizedTime,
        m = n.DERSequence,
        c = n.DERSet,
        r = n.DERTaggedObject,
        o = n.ASN1Util.newObject;var t = Object.keys(k);if (t.length != 1) {
      throw "key of param shall be only one.";
    }var F = t[0];if (":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":" + F + ":") == -1) {
      throw "undefined key: " + F;
    }if (F == "bool") {
      return new z(k[F]);
    }if (F == "int") {
      return new e(k[F]);
    }if (F == "bitstr") {
      return new s(k[F]);
    }if (F == "octstr") {
      return new h(k[F]);
    }if (F == "null") {
      return new v(k[F]);
    }if (F == "oid") {
      return new w(k[F]);
    }if (F == "enum") {
      return new l(k[F]);
    }if (F == "utf8str") {
      return new g(k[F]);
    }if (F == "numstr") {
      return new f(k[F]);
    }if (F == "prnstr") {
      return new y(k[F]);
    }if (F == "telstr") {
      return new u(k[F]);
    }if (F == "ia5str") {
      return new p(k[F]);
    }if (F == "utctime") {
      return new C(k[F]);
    }if (F == "gentime") {
      return new j(k[F]);
    }if (F == "seq") {
      var d = k[F];var E = [];for (var x = 0; x < d.length; x++) {
        var B = o(d[x]);E.push(B);
      }return new m({ array: E });
    }if (F == "set") {
      var d = k[F];var E = [];for (var x = 0; x < d.length; x++) {
        var B = o(d[x]);E.push(B);
      }return new c({ array: E });
    }if (F == "tag") {
      var A = k[F];if (Object.prototype.toString.call(A) === "[object Array]" && A.length == 3) {
        var q = o(A[2]);return new r({ tag: A[0], explicit: A[1], obj: q });
      } else {
        var b = {};if (A.explicit !== undefined) {
          b.explicit = A.explicit;
        }if (A.tag !== undefined) {
          b.tag = A.tag;
        }if (A.obj === undefined) {
          throw "obj shall be specified for 'tag'.";
        }b.obj = o(A.obj);return new r(b);
      }
    }
  };this.jsonToASN1HEX = function (b) {
    var a = this.newObject(b);return a.getEncodedHex();
  };
}();KJUR.asn1.ASN1Util.oidHexToInt = function (a) {
  var j = "";var k = parseInt(a.substr(0, 2), 16);var d = Math.floor(k / 40);var c = k % 40;var j = d + "." + c;var e = "";for (var f = 2; f < a.length; f += 2) {
    var g = parseInt(a.substr(f, 2), 16);var h = ("00000000" + g.toString(2)).slice(-8);e = e + h.substr(1, 7);if (h.substr(0, 1) == "0") {
      var b = new BigInteger(e, 2);j = j + "." + b.toString(10);e = "";
    }
  }return j;
};KJUR.asn1.ASN1Util.oidIntToHex = function (f) {
  var e = function e(a) {
    var k = a.toString(16);if (k.length == 1) {
      k = "0" + k;
    }return k;
  };var d = function d(o) {
    var n = "";var k = new BigInteger(o, 10);var a = k.toString(2);var l = 7 - a.length % 7;if (l == 7) {
      l = 0;
    }var q = "";for (var m = 0; m < l; m++) {
      q += "0";
    }a = q + a;for (var m = 0; m < a.length - 1; m += 7) {
      var p = a.substr(m, 7);if (m != a.length - 7) {
        p = "1" + p;
      }n += e(parseInt(p, 2));
    }return n;
  };if (!f.match(/^[0-9.]+$/)) {
    throw "malformed oid string: " + f;
  }var g = "";var b = f.split(".");var j = parseInt(b[0]) * 40 + parseInt(b[1]);g += e(j);b.splice(0, 2);for (var c = 0; c < b.length; c++) {
    g += d(b[c]);
  }return g;
};KJUR.asn1.ASN1Object = function () {
  var c = true;var b = null;var d = "00";var e = "00";var a = "";this.getLengthHexFromValue = function () {
    if (typeof this.hV == "undefined" || this.hV == null) {
      throw "this.hV is null or undefined.";
    }if (this.hV.length % 2 == 1) {
      throw "value hex must be even length: n=" + a.length + ",v=" + this.hV;
    }var i = this.hV.length / 2;var h = i.toString(16);if (h.length % 2 == 1) {
      h = "0" + h;
    }if (i < 128) {
      return h;
    } else {
      var g = h.length / 2;if (g > 15) {
        throw "ASN.1 length too long to represent by 8x: n = " + i.toString(16);
      }var f = 128 + g;return f.toString(16) + h;
    }
  };this.getEncodedHex = function () {
    if (this.hTLV == null || this.isModified) {
      this.hV = this.getFreshValueHex();this.hL = this.getLengthHexFromValue();this.hTLV = this.hT + this.hL + this.hV;this.isModified = false;
    }return this.hTLV;
  };this.getValueHex = function () {
    this.getEncodedHex();return this.hV;
  };this.getFreshValueHex = function () {
    return "";
  };
};KJUR.asn1.DERAbstractString = function (c) {
  KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var b = null;var a = null;this.getString = function () {
    return this.s;
  };this.setString = function (d) {
    this.hTLV = null;this.isModified = true;this.s = d;this.hV = utf8tohex(this.s).toLowerCase();
  };this.setStringHex = function (d) {
    this.hTLV = null;this.isModified = true;this.s = null;this.hV = d;
  };this.getFreshValueHex = function () {
    return this.hV;
  };if (typeof c != "undefined") {
    if (typeof c == "string") {
      this.setString(c);
    } else {
      if (typeof c.str != "undefined") {
        this.setString(c.str);
      } else {
        if (typeof c.hex != "undefined") {
          this.setStringHex(c.hex);
        }
      }
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERAbstractString, KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractTime = function (c) {
  KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);var b = null;var a = null;this.localDateToUTC = function (f) {
    utc = f.getTime() + f.getTimezoneOffset() * 60000;var e = new Date(utc);return e;
  };this.formatDate = function (m, o, e) {
    var g = this.zeroPadding;var n = this.localDateToUTC(m);var p = String(n.getFullYear());if (o == "utc") {
      p = p.substr(2, 2);
    }var l = g(String(n.getMonth() + 1), 2);var q = g(String(n.getDate()), 2);var h = g(String(n.getHours()), 2);var i = g(String(n.getMinutes()), 2);var j = g(String(n.getSeconds()), 2);var r = p + l + q + h + i + j;if (e === true) {
      var f = n.getMilliseconds();if (f != 0) {
        var k = g(String(f), 3);k = k.replace(/[0]+$/, "");r = r + "." + k;
      }
    }return r + "Z";
  };this.zeroPadding = function (e, d) {
    if (e.length >= d) {
      return e;
    }return new Array(d - e.length + 1).join("0") + e;
  };this.getString = function () {
    return this.s;
  };this.setString = function (d) {
    this.hTLV = null;this.isModified = true;this.s = d;this.hV = stohex(d);
  };this.setByDateValue = function (h, j, e, d, f, g) {
    var i = new Date(Date.UTC(h, j - 1, e, d, f, g, 0));this.setByDate(i);
  };this.getFreshValueHex = function () {
    return this.hV;
  };
};YAHOO.lang.extend(KJUR.asn1.DERAbstractTime, KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractStructured = function (b) {
  KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var a = null;this.setByASN1ObjectArray = function (c) {
    this.hTLV = null;this.isModified = true;this.asn1Array = c;
  };this.appendASN1Object = function (c) {
    this.hTLV = null;this.isModified = true;this.asn1Array.push(c);
  };this.asn1Array = new Array();if (typeof b != "undefined") {
    if (typeof b.array != "undefined") {
      this.asn1Array = b.array;
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERAbstractStructured, KJUR.asn1.ASN1Object);KJUR.asn1.DERBoolean = function () {
  KJUR.asn1.DERBoolean.superclass.constructor.call(this);this.hT = "01";this.hTLV = "0101ff";
};YAHOO.lang.extend(KJUR.asn1.DERBoolean, KJUR.asn1.ASN1Object);KJUR.asn1.DERInteger = function (a) {
  KJUR.asn1.DERInteger.superclass.constructor.call(this);this.hT = "02";this.setByBigInteger = function (b) {
    this.hTLV = null;this.isModified = true;this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b);
  };this.setByInteger = function (c) {
    var b = new BigInteger(String(c), 10);this.setByBigInteger(b);
  };this.setValueHex = function (b) {
    this.hV = b;
  };this.getFreshValueHex = function () {
    return this.hV;
  };if (typeof a != "undefined") {
    if (typeof a.bigint != "undefined") {
      this.setByBigInteger(a.bigint);
    } else {
      if (typeof a["int"] != "undefined") {
        this.setByInteger(a["int"]);
      } else {
        if (typeof a == "number") {
          this.setByInteger(a);
        } else {
          if (typeof a.hex != "undefined") {
            this.setValueHex(a.hex);
          }
        }
      }
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERInteger, KJUR.asn1.ASN1Object);KJUR.asn1.DERBitString = function (b) {
  if (b !== undefined && typeof b.obj !== "undefined") {
    var a = KJUR.asn1.ASN1Util.newObject(b.obj);b.hex = "00" + a.getEncodedHex();
  }KJUR.asn1.DERBitString.superclass.constructor.call(this);this.hT = "03";this.setHexValueIncludingUnusedBits = function (c) {
    this.hTLV = null;this.isModified = true;this.hV = c;
  };this.setUnusedBitsAndHexValue = function (c, e) {
    if (c < 0 || 7 < c) {
      throw "unused bits shall be from 0 to 7: u = " + c;
    }var d = "0" + c;this.hTLV = null;this.isModified = true;this.hV = d + e;
  };this.setByBinaryString = function (e) {
    e = e.replace(/0+$/, "");var f = 8 - e.length % 8;if (f == 8) {
      f = 0;
    }for (var g = 0; g <= f; g++) {
      e += "0";
    }var j = "";for (var g = 0; g < e.length - 1; g += 8) {
      var d = e.substr(g, 8);var c = parseInt(d, 2).toString(16);if (c.length == 1) {
        c = "0" + c;
      }j += c;
    }this.hTLV = null;this.isModified = true;this.hV = "0" + f + j;
  };this.setByBooleanArray = function (e) {
    var d = "";for (var c = 0; c < e.length; c++) {
      if (e[c] == true) {
        d += "1";
      } else {
        d += "0";
      }
    }this.setByBinaryString(d);
  };this.newFalseArray = function (e) {
    var c = new Array(e);for (var d = 0; d < e; d++) {
      c[d] = false;
    }return c;
  };this.getFreshValueHex = function () {
    return this.hV;
  };if (typeof b != "undefined") {
    if (typeof b == "string" && b.toLowerCase().match(/^[0-9a-f]+$/)) {
      this.setHexValueIncludingUnusedBits(b);
    } else {
      if (typeof b.hex != "undefined") {
        this.setHexValueIncludingUnusedBits(b.hex);
      } else {
        if (typeof b.bin != "undefined") {
          this.setByBinaryString(b.bin);
        } else {
          if (typeof b.array != "undefined") {
            this.setByBooleanArray(b.array);
          }
        }
      }
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERBitString, KJUR.asn1.ASN1Object);KJUR.asn1.DEROctetString = function (b) {
  if (b !== undefined && typeof b.obj !== "undefined") {
    var a = KJUR.asn1.ASN1Util.newObject(b.obj);b.hex = a.getEncodedHex();
  }KJUR.asn1.DEROctetString.superclass.constructor.call(this, b);this.hT = "04";
};YAHOO.lang.extend(KJUR.asn1.DEROctetString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERNull = function () {
  KJUR.asn1.DERNull.superclass.constructor.call(this);this.hT = "05";this.hTLV = "0500";
};YAHOO.lang.extend(KJUR.asn1.DERNull, KJUR.asn1.ASN1Object);KJUR.asn1.DERObjectIdentifier = function (c) {
  var b = function b(d) {
    var e = d.toString(16);if (e.length == 1) {
      e = "0" + e;
    }return e;
  };var a = function a(k) {
    var j = "";var e = new BigInteger(k, 10);var d = e.toString(2);var f = 7 - d.length % 7;if (f == 7) {
      f = 0;
    }var m = "";for (var g = 0; g < f; g++) {
      m += "0";
    }d = m + d;for (var g = 0; g < d.length - 1; g += 7) {
      var l = d.substr(g, 7);if (g != d.length - 7) {
        l = "1" + l;
      }j += b(parseInt(l, 2));
    }return j;
  };KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);this.hT = "06";this.setValueHex = function (d) {
    this.hTLV = null;this.isModified = true;this.s = null;this.hV = d;
  };this.setValueOidString = function (f) {
    if (!f.match(/^[0-9.]+$/)) {
      throw "malformed oid string: " + f;
    }var g = "";var d = f.split(".");var j = parseInt(d[0]) * 40 + parseInt(d[1]);g += b(j);d.splice(0, 2);for (var e = 0; e < d.length; e++) {
      g += a(d[e]);
    }this.hTLV = null;this.isModified = true;this.s = null;this.hV = g;
  };this.setValueName = function (e) {
    var d = KJUR.asn1.x509.OID.name2oid(e);if (d !== "") {
      this.setValueOidString(d);
    } else {
      throw "DERObjectIdentifier oidName undefined: " + e;
    }
  };this.getFreshValueHex = function () {
    return this.hV;
  };if (c !== undefined) {
    if (typeof c === "string") {
      if (c.match(/^[0-2].[0-9.]+$/)) {
        this.setValueOidString(c);
      } else {
        this.setValueName(c);
      }
    } else {
      if (c.oid !== undefined) {
        this.setValueOidString(c.oid);
      } else {
        if (c.hex !== undefined) {
          this.setValueHex(c.hex);
        } else {
          if (c.name !== undefined) {
            this.setValueName(c.name);
          }
        }
      }
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier, KJUR.asn1.ASN1Object);KJUR.asn1.DEREnumerated = function (a) {
  KJUR.asn1.DEREnumerated.superclass.constructor.call(this);this.hT = "0a";this.setByBigInteger = function (b) {
    this.hTLV = null;this.isModified = true;this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b);
  };this.setByInteger = function (c) {
    var b = new BigInteger(String(c), 10);this.setByBigInteger(b);
  };this.setValueHex = function (b) {
    this.hV = b;
  };this.getFreshValueHex = function () {
    return this.hV;
  };if (typeof a != "undefined") {
    if (typeof a["int"] != "undefined") {
      this.setByInteger(a["int"]);
    } else {
      if (typeof a == "number") {
        this.setByInteger(a);
      } else {
        if (typeof a.hex != "undefined") {
          this.setValueHex(a.hex);
        }
      }
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DEREnumerated, KJUR.asn1.ASN1Object);KJUR.asn1.DERUTF8String = function (a) {
  KJUR.asn1.DERUTF8String.superclass.constructor.call(this, a);this.hT = "0c";
};YAHOO.lang.extend(KJUR.asn1.DERUTF8String, KJUR.asn1.DERAbstractString);KJUR.asn1.DERNumericString = function (a) {
  KJUR.asn1.DERNumericString.superclass.constructor.call(this, a);this.hT = "12";
};YAHOO.lang.extend(KJUR.asn1.DERNumericString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERPrintableString = function (a) {
  KJUR.asn1.DERPrintableString.superclass.constructor.call(this, a);this.hT = "13";
};YAHOO.lang.extend(KJUR.asn1.DERPrintableString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERTeletexString = function (a) {
  KJUR.asn1.DERTeletexString.superclass.constructor.call(this, a);this.hT = "14";
};YAHOO.lang.extend(KJUR.asn1.DERTeletexString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERIA5String = function (a) {
  KJUR.asn1.DERIA5String.superclass.constructor.call(this, a);this.hT = "16";
};YAHOO.lang.extend(KJUR.asn1.DERIA5String, KJUR.asn1.DERAbstractString);KJUR.asn1.DERUTCTime = function (a) {
  KJUR.asn1.DERUTCTime.superclass.constructor.call(this, a);this.hT = "17";this.setByDate = function (b) {
    this.hTLV = null;this.isModified = true;this.date = b;this.s = this.formatDate(this.date, "utc");this.hV = stohex(this.s);
  };this.getFreshValueHex = function () {
    if (typeof this.date == "undefined" && typeof this.s == "undefined") {
      this.date = new Date();this.s = this.formatDate(this.date, "utc");this.hV = stohex(this.s);
    }return this.hV;
  };if (a !== undefined) {
    if (a.str !== undefined) {
      this.setString(a.str);
    } else {
      if (typeof a == "string" && a.match(/^[0-9]{12}Z$/)) {
        this.setString(a);
      } else {
        if (a.hex !== undefined) {
          this.setStringHex(a.hex);
        } else {
          if (a.date !== undefined) {
            this.setByDate(a.date);
          }
        }
      }
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERUTCTime, KJUR.asn1.DERAbstractTime);KJUR.asn1.DERGeneralizedTime = function (a) {
  KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this, a);this.hT = "18";this.withMillis = false;this.setByDate = function (b) {
    this.hTLV = null;this.isModified = true;this.date = b;this.s = this.formatDate(this.date, "gen", this.withMillis);this.hV = stohex(this.s);
  };this.getFreshValueHex = function () {
    if (this.date === undefined && this.s === undefined) {
      this.date = new Date();this.s = this.formatDate(this.date, "gen", this.withMillis);this.hV = stohex(this.s);
    }return this.hV;
  };if (a !== undefined) {
    if (a.str !== undefined) {
      this.setString(a.str);
    } else {
      if (typeof a == "string" && a.match(/^[0-9]{14}Z$/)) {
        this.setString(a);
      } else {
        if (a.hex !== undefined) {
          this.setStringHex(a.hex);
        } else {
          if (a.date !== undefined) {
            this.setByDate(a.date);
          }
        }
      }
    }if (a.millis === true) {
      this.withMillis = true;
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime, KJUR.asn1.DERAbstractTime);KJUR.asn1.DERSequence = function (a) {
  KJUR.asn1.DERSequence.superclass.constructor.call(this, a);this.hT = "30";this.getFreshValueHex = function () {
    var c = "";for (var b = 0; b < this.asn1Array.length; b++) {
      var d = this.asn1Array[b];c += d.getEncodedHex();
    }this.hV = c;return this.hV;
  };
};YAHOO.lang.extend(KJUR.asn1.DERSequence, KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERSet = function (a) {
  KJUR.asn1.DERSet.superclass.constructor.call(this, a);this.hT = "31";this.sortFlag = true;this.getFreshValueHex = function () {
    var b = new Array();for (var c = 0; c < this.asn1Array.length; c++) {
      var d = this.asn1Array[c];b.push(d.getEncodedHex());
    }if (this.sortFlag == true) {
      b.sort();
    }this.hV = b.join("");return this.hV;
  };if (typeof a != "undefined") {
    if (typeof a.sortflag != "undefined" && a.sortflag == false) {
      this.sortFlag = false;
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERSet, KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERTaggedObject = function (a) {
  KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);this.hT = "a0";this.hV = "";this.isExplicit = true;this.asn1Object = null;this.setASN1Object = function (b, c, d) {
    this.hT = c;this.isExplicit = b;this.asn1Object = d;if (this.isExplicit) {
      this.hV = this.asn1Object.getEncodedHex();this.hTLV = null;this.isModified = true;
    } else {
      this.hV = null;this.hTLV = d.getEncodedHex();this.hTLV = this.hTLV.replace(/^../, c);this.isModified = false;
    }
  };this.getFreshValueHex = function () {
    return this.hV;
  };if (typeof a != "undefined") {
    if (typeof a.tag != "undefined") {
      this.hT = a.tag;
    }if (typeof a.explicit != "undefined") {
      this.isExplicit = a.explicit;
    }if (typeof a.obj != "undefined") {
      this.asn1Object = a.obj;this.setASN1Object(this.isExplicit, this.hT, this.asn1Object);
    }
  }
};YAHOO.lang.extend(KJUR.asn1.DERTaggedObject, KJUR.asn1.ASN1Object);
var ASN1HEX = new function () {}();ASN1HEX.getLblen = function (c, a) {
  if (c.substr(a + 2, 1) != "8") {
    return 1;
  }var b = parseInt(c.substr(a + 3, 1));if (b == 0) {
    return -1;
  }if (0 < b && b < 10) {
    return b + 1;
  }return -2;
};ASN1HEX.getL = function (c, b) {
  var a = ASN1HEX.getLblen(c, b);if (a < 1) {
    return "";
  }return c.substr(b + 2, a * 2);
};ASN1HEX.getVblen = function (d, a) {
  var c, b;c = ASN1HEX.getL(d, a);if (c == "") {
    return -1;
  }if (c.substr(0, 1) === "8") {
    b = new BigInteger(c.substr(2), 16);
  } else {
    b = new BigInteger(c, 16);
  }return b.intValue();
};ASN1HEX.getVidx = function (c, b) {
  var a = ASN1HEX.getLblen(c, b);if (a < 0) {
    return a;
  }return b + (a + 1) * 2;
};ASN1HEX.getV = function (d, a) {
  var c = ASN1HEX.getVidx(d, a);var b = ASN1HEX.getVblen(d, a);return d.substr(c, b * 2);
};ASN1HEX.getTLV = function (b, a) {
  return b.substr(a, 2) + ASN1HEX.getL(b, a) + ASN1HEX.getV(b, a);
};ASN1HEX.getNextSiblingIdx = function (d, a) {
  var c = ASN1HEX.getVidx(d, a);var b = ASN1HEX.getVblen(d, a);return c + b * 2;
};ASN1HEX.getChildIdx = function (e, f) {
  var j = ASN1HEX;var g = new Array();var i = j.getVidx(e, f);if (e.substr(f, 2) == "03") {
    g.push(i + 2);
  } else {
    g.push(i);
  }var l = j.getVblen(e, f);var c = i;var d = 0;while (1) {
    var b = j.getNextSiblingIdx(e, c);if (b == null || b - i >= l * 2) {
      break;
    }if (d >= 200) {
      break;
    }g.push(b);c = b;d++;
  }return g;
};ASN1HEX.getNthChildIdx = function (d, b, e) {
  var c = ASN1HEX.getChildIdx(d, b);return c[e];
};ASN1HEX.getIdxbyList = function (e, d, c, i) {
  var g = ASN1HEX;var f, b;if (c.length == 0) {
    if (i !== undefined) {
      if (e.substr(d, 2) !== i) {
        throw "checking tag doesn't match: " + e.substr(d, 2) + "!=" + i;
      }
    }return d;
  }f = c.shift();b = g.getChildIdx(e, d);return g.getIdxbyList(e, b[f], c, i);
};ASN1HEX.getTLVbyList = function (d, c, b, f) {
  var e = ASN1HEX;var a = e.getIdxbyList(d, c, b);if (a === undefined) {
    throw "can't find nthList object";
  }if (f !== undefined) {
    if (d.substr(a, 2) != f) {
      throw "checking tag doesn't match: " + d.substr(a, 2) + "!=" + f;
    }
  }return e.getTLV(d, a);
};ASN1HEX.getVbyList = function (e, c, b, g, i) {
  var f = ASN1HEX;var a, d;a = f.getIdxbyList(e, c, b, g);if (a === undefined) {
    throw "can't find nthList object";
  }d = f.getV(e, a);if (i === true) {
    d = d.substr(2);
  }return d;
};ASN1HEX.hextooidstr = function (e) {
  var h = function h(b, a) {
    if (b.length >= a) {
      return b;
    }return new Array(a - b.length + 1).join("0") + b;
  };var l = [];var o = e.substr(0, 2);var f = parseInt(o, 16);l[0] = new String(Math.floor(f / 40));l[1] = new String(f % 40);var m = e.substr(2);var k = [];for (var g = 0; g < m.length / 2; g++) {
    k.push(parseInt(m.substr(g * 2, 2), 16));
  }var j = [];var d = "";for (var g = 0; g < k.length; g++) {
    if (k[g] & 128) {
      d = d + h((k[g] & 127).toString(2), 7);
    } else {
      d = d + h((k[g] & 127).toString(2), 7);j.push(new String(parseInt(d, 2)));d = "";
    }
  }var n = l.join(".");if (j.length > 0) {
    n = n + "." + j.join(".");
  }return n;
};ASN1HEX.dump = function (t, c, l, g) {
  var p = ASN1HEX;var j = p.getV;var y = p.dump;var w = p.getChildIdx;var e = t;if (t instanceof KJUR.asn1.ASN1Object) {
    e = t.getEncodedHex();
  }var q = function q(A, i) {
    if (A.length <= i * 2) {
      return A;
    } else {
      var v = A.substr(0, i) + "..(total " + A.length / 2 + "bytes).." + A.substr(A.length - i, i);return v;
    }
  };if (c === undefined) {
    c = { ommit_long_octet: 32 };
  }if (l === undefined) {
    l = 0;
  }if (g === undefined) {
    g = "";
  }var x = c.ommit_long_octet;if (e.substr(l, 2) == "01") {
    var h = j(e, l);if (h == "00") {
      return g + "BOOLEAN FALSE\n";
    } else {
      return g + "BOOLEAN TRUE\n";
    }
  }if (e.substr(l, 2) == "02") {
    var h = j(e, l);return g + "INTEGER " + q(h, x) + "\n";
  }if (e.substr(l, 2) == "03") {
    var h = j(e, l);return g + "BITSTRING " + q(h, x) + "\n";
  }if (e.substr(l, 2) == "04") {
    var h = j(e, l);if (p.isASN1HEX(h)) {
      var k = g + "OCTETSTRING, encapsulates\n";k = k + y(h, c, 0, g + "  ");return k;
    } else {
      return g + "OCTETSTRING " + q(h, x) + "\n";
    }
  }if (e.substr(l, 2) == "05") {
    return g + "NULL\n";
  }if (e.substr(l, 2) == "06") {
    var m = j(e, l);var a = KJUR.asn1.ASN1Util.oidHexToInt(m);var o = KJUR.asn1.x509.OID.oid2name(a);var b = a.replace(/\./g, " ");if (o != "") {
      return g + "ObjectIdentifier " + o + " (" + b + ")\n";
    } else {
      return g + "ObjectIdentifier (" + b + ")\n";
    }
  }if (e.substr(l, 2) == "0c") {
    return g + "UTF8String '" + hextoutf8(j(e, l)) + "'\n";
  }if (e.substr(l, 2) == "13") {
    return g + "PrintableString '" + hextoutf8(j(e, l)) + "'\n";
  }if (e.substr(l, 2) == "14") {
    return g + "TeletexString '" + hextoutf8(j(e, l)) + "'\n";
  }if (e.substr(l, 2) == "16") {
    return g + "IA5String '" + hextoutf8(j(e, l)) + "'\n";
  }if (e.substr(l, 2) == "17") {
    return g + "UTCTime " + hextoutf8(j(e, l)) + "\n";
  }if (e.substr(l, 2) == "18") {
    return g + "GeneralizedTime " + hextoutf8(j(e, l)) + "\n";
  }if (e.substr(l, 2) == "30") {
    if (e.substr(l, 4) == "3000") {
      return g + "SEQUENCE {}\n";
    }var k = g + "SEQUENCE\n";var d = w(e, l);var f = c;if ((d.length == 2 || d.length == 3) && e.substr(d[0], 2) == "06" && e.substr(d[d.length - 1], 2) == "04") {
      var o = p.oidname(j(e, d[0]));var r = JSON.parse(JSON.stringify(c));r.x509ExtName = o;f = r;
    }for (var u = 0; u < d.length; u++) {
      k = k + y(e, f, d[u], g + "  ");
    }return k;
  }if (e.substr(l, 2) == "31") {
    var k = g + "SET\n";var d = w(e, l);for (var u = 0; u < d.length; u++) {
      k = k + y(e, c, d[u], g + "  ");
    }return k;
  }var z = parseInt(e.substr(l, 2), 16);if ((z & 128) != 0) {
    var n = z & 31;if ((z & 32) != 0) {
      var k = g + "[" + n + "]\n";var d = w(e, l);for (var u = 0; u < d.length; u++) {
        k = k + y(e, c, d[u], g + "  ");
      }return k;
    } else {
      var h = j(e, l);if (h.substr(0, 8) == "68747470") {
        h = hextoutf8(h);
      }if (c.x509ExtName === "subjectAltName" && n == 2) {
        h = hextoutf8(h);
      }var k = g + "[" + n + "] " + h + "\n";return k;
    }
  }return g + "UNKNOWN(" + e.substr(l, 2) + ") " + j(e, l) + "\n";
};ASN1HEX.isASN1HEX = function (e) {
  var d = ASN1HEX;if (e.length % 2 == 1) {
    return false;
  }var c = d.getVblen(e, 0);var b = e.substr(0, 2);var f = d.getL(e, 0);var a = e.length - b.length - f.length;if (a == c * 2) {
    return true;
  }return false;
};ASN1HEX.oidname = function (a) {
  var c = KJUR.asn1;if (KJUR.lang.String.isHex(a)) {
    a = c.ASN1Util.oidHexToInt(a);
  }var b = c.x509.OID.oid2name(a);if (b === "") {
    b = a;
  }return b;
};
if (typeof KJUR == "undefined" || !KJUR) {
  KJUR = {};
}if (typeof KJUR.asn1 == "undefined" || !KJUR.asn1) {
  KJUR.asn1 = {};
}if (typeof KJUR.asn1.x509 == "undefined" || !KJUR.asn1.x509) {
  KJUR.asn1.x509 = {};
}KJUR.asn1.x509.Certificate = function (e) {
  KJUR.asn1.x509.Certificate.superclass.constructor.call(this);var a = null,
      j = null,
      h = null,
      k = null,
      i = null,
      b = KJUR,
      f = b.crypto,
      g = b.asn1,
      d = g.DERSequence,
      c = g.DERBitString;this.sign = function () {
    this.asn1SignatureAlg = this.asn1TBSCert.asn1SignatureAlg;var m = new KJUR.crypto.Signature({ alg: this.asn1SignatureAlg.nameAlg });m.init(this.prvKey);m.updateHex(this.asn1TBSCert.getEncodedHex());this.hexSig = m.sign();this.asn1Sig = new c({ hex: "00" + this.hexSig });var l = new d({ array: [this.asn1TBSCert, this.asn1SignatureAlg, this.asn1Sig] });this.hTLV = l.getEncodedHex();this.isModified = false;
  };this.setSignatureHex = function (l) {
    this.asn1SignatureAlg = this.asn1TBSCert.asn1SignatureAlg;this.hexSig = l;this.asn1Sig = new c({ hex: "00" + this.hexSig });var m = new d({ array: [this.asn1TBSCert, this.asn1SignatureAlg, this.asn1Sig] });this.hTLV = m.getEncodedHex();this.isModified = false;
  };this.getEncodedHex = function () {
    if (this.isModified == false && this.hTLV != null) {
      return this.hTLV;
    }throw "not signed yet";
  };this.getPEMString = function () {
    var l = hextob64nl(this.getEncodedHex());return "-----BEGIN CERTIFICATE-----\r\n" + l + "\r\n-----END CERTIFICATE-----\r\n";
  };if (e !== undefined) {
    if (e.tbscertobj !== undefined) {
      this.asn1TBSCert = e.tbscertobj;
    }if (e.prvkeyobj !== undefined) {
      this.prvKey = e.prvkeyobj;
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.Certificate, KJUR.asn1.ASN1Object);KJUR.asn1.x509.TBSCertificate = function (e) {
  KJUR.asn1.x509.TBSCertificate.superclass.constructor.call(this);var b = KJUR,
      i = b.asn1,
      f = i.DERSequence,
      h = i.DERInteger,
      c = i.DERTaggedObject,
      d = i.x509,
      g = d.Time,
      a = d.X500Name,
      j = d.SubjectPublicKeyInfo;this._initialize = function () {
    this.asn1Array = new Array();this.asn1Version = new c({ obj: new h({ "int": 2 }) });this.asn1SerialNumber = null;this.asn1SignatureAlg = null;this.asn1Issuer = null;this.asn1NotBefore = null;this.asn1NotAfter = null;this.asn1Subject = null;this.asn1SubjPKey = null;this.extensionsArray = new Array();
  };this.setSerialNumberByParam = function (k) {
    this.asn1SerialNumber = new h(k);
  };this.setSignatureAlgByParam = function (k) {
    this.asn1SignatureAlg = new d.AlgorithmIdentifier(k);
  };this.setIssuerByParam = function (k) {
    this.asn1Issuer = new a(k);
  };this.setNotBeforeByParam = function (k) {
    this.asn1NotBefore = new g(k);
  };this.setNotAfterByParam = function (k) {
    this.asn1NotAfter = new g(k);
  };this.setSubjectByParam = function (k) {
    this.asn1Subject = new a(k);
  };this.setSubjectPublicKey = function (k) {
    this.asn1SubjPKey = new j(k);
  };this.setSubjectPublicKeyByGetKey = function (l) {
    var k = KEYUTIL.getKey(l);this.asn1SubjPKey = new j(k);
  };this.appendExtension = function (k) {
    this.extensionsArray.push(k);
  };this.appendExtensionByName = function (l, k) {
    KJUR.asn1.x509.Extension.appendByNameToArray(l, k, this.extensionsArray);
  };this.getEncodedHex = function () {
    if (this.asn1NotBefore == null || this.asn1NotAfter == null) {
      throw "notBefore and/or notAfter not set";
    }var l = new f({ array: [this.asn1NotBefore, this.asn1NotAfter] });this.asn1Array = new Array();this.asn1Array.push(this.asn1Version);this.asn1Array.push(this.asn1SerialNumber);this.asn1Array.push(this.asn1SignatureAlg);this.asn1Array.push(this.asn1Issuer);this.asn1Array.push(l);this.asn1Array.push(this.asn1Subject);this.asn1Array.push(this.asn1SubjPKey);if (this.extensionsArray.length > 0) {
      var m = new f({ array: this.extensionsArray });var k = new c({ explicit: true, tag: "a3", obj: m });this.asn1Array.push(k);
    }var n = new f({ array: this.asn1Array });this.hTLV = n.getEncodedHex();this.isModified = false;return this.hTLV;
  };this._initialize();
};YAHOO.lang.extend(KJUR.asn1.x509.TBSCertificate, KJUR.asn1.ASN1Object);KJUR.asn1.x509.Extension = function (d) {
  KJUR.asn1.x509.Extension.superclass.constructor.call(this);var f = null,
      a = KJUR,
      e = a.asn1,
      h = e.DERObjectIdentifier,
      i = e.DEROctetString,
      b = e.DERBitString,
      g = e.DERBoolean,
      c = e.DERSequence;this.getEncodedHex = function () {
    var m = new h({ oid: this.oid });var l = new i({ hex: this.getExtnValueHex() });var k = new Array();k.push(m);if (this.critical) {
      k.push(new g());
    }k.push(l);var j = new c({ array: k });return j.getEncodedHex();
  };this.critical = false;if (d !== undefined) {
    if (d.critical !== undefined) {
      this.critical = d.critical;
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.Extension, KJUR.asn1.ASN1Object);KJUR.asn1.x509.Extension.appendByNameToArray = function (e, c, b) {
  var g = e.toLowerCase(),
      f = KJUR.asn1.x509;if (g == "basicconstraints") {
    var d = new f.BasicConstraints(c);b.push(d);
  } else {
    if (g == "keyusage") {
      var d = new f.KeyUsage(c);b.push(d);
    } else {
      if (g == "crldistributionpoints") {
        var d = new f.CRLDistributionPoints(c);b.push(d);
      } else {
        if (g == "extkeyusage") {
          var d = new f.ExtKeyUsage(c);b.push(d);
        } else {
          if (g == "authoritykeyidentifier") {
            var d = new f.AuthorityKeyIdentifier(c);b.push(d);
          } else {
            if (g == "authorityinfoaccess") {
              var d = new f.AuthorityInfoAccess(c);b.push(d);
            } else {
              if (g == "subjectaltname") {
                var d = new f.SubjectAltName(c);b.push(d);
              } else {
                if (g == "issueraltname") {
                  var d = new f.IssuerAltName(c);b.push(d);
                } else {
                  throw "unsupported extension name: " + e;
                }
              }
            }
          }
        }
      }
    }
  }
};KJUR.asn1.x509.KeyUsage = function (f) {
  KJUR.asn1.x509.KeyUsage.superclass.constructor.call(this, f);var a = X509.KEYUSAGE_NAME;this.getExtnValueHex = function () {
    return this.asn1ExtnValue.getEncodedHex();
  };this.oid = "2.5.29.15";if (f !== undefined) {
    if (f.bin !== undefined) {
      this.asn1ExtnValue = new KJUR.asn1.DERBitString(f);
    }if (f.names !== undefined && f.names.length !== undefined) {
      var e = f.names;var d = "000000000";for (var c = 0; c < e.length; c++) {
        for (var b = 0; b < a.length; b++) {
          if (e[c] === a[b]) {
            d = d.substring(0, b) + "1" + d.substring(b + 1, d.length);
          }
        }
      }this.asn1ExtnValue = new KJUR.asn1.DERBitString({ bin: d });
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.KeyUsage, KJUR.asn1.x509.Extension);KJUR.asn1.x509.BasicConstraints = function (c) {
  KJUR.asn1.x509.BasicConstraints.superclass.constructor.call(this, c);var a = false;var b = -1;this.getExtnValueHex = function () {
    var e = new Array();if (this.cA) {
      e.push(new KJUR.asn1.DERBoolean());
    }if (this.pathLen > -1) {
      e.push(new KJUR.asn1.DERInteger({ "int": this.pathLen }));
    }var d = new KJUR.asn1.DERSequence({ array: e });this.asn1ExtnValue = d;return this.asn1ExtnValue.getEncodedHex();
  };this.oid = "2.5.29.19";this.cA = false;this.pathLen = -1;if (c !== undefined) {
    if (c.cA !== undefined) {
      this.cA = c.cA;
    }if (c.pathLen !== undefined) {
      this.pathLen = c.pathLen;
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.BasicConstraints, KJUR.asn1.x509.Extension);KJUR.asn1.x509.CRLDistributionPoints = function (d) {
  KJUR.asn1.x509.CRLDistributionPoints.superclass.constructor.call(this, d);var b = KJUR,
      a = b.asn1,
      c = a.x509;this.getExtnValueHex = function () {
    return this.asn1ExtnValue.getEncodedHex();
  };this.setByDPArray = function (e) {
    this.asn1ExtnValue = new a.DERSequence({ array: e });
  };this.setByOneURI = function (h) {
    var e = new c.GeneralNames([{ uri: h }]);var g = new c.DistributionPointName(e);var f = new c.DistributionPoint({ dpobj: g });this.setByDPArray([f]);
  };this.oid = "2.5.29.31";if (d !== undefined) {
    if (d.array !== undefined) {
      this.setByDPArray(d.array);
    } else {
      if (d.uri !== undefined) {
        this.setByOneURI(d.uri);
      }
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.CRLDistributionPoints, KJUR.asn1.x509.Extension);KJUR.asn1.x509.ExtKeyUsage = function (c) {
  KJUR.asn1.x509.ExtKeyUsage.superclass.constructor.call(this, c);var b = KJUR,
      a = b.asn1;this.setPurposeArray = function (d) {
    this.asn1ExtnValue = new a.DERSequence();for (var e = 0; e < d.length; e++) {
      var f = new a.DERObjectIdentifier(d[e]);this.asn1ExtnValue.appendASN1Object(f);
    }
  };this.getExtnValueHex = function () {
    return this.asn1ExtnValue.getEncodedHex();
  };this.oid = "2.5.29.37";if (c !== undefined) {
    if (c.array !== undefined) {
      this.setPurposeArray(c.array);
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.ExtKeyUsage, KJUR.asn1.x509.Extension);KJUR.asn1.x509.AuthorityKeyIdentifier = function (d) {
  KJUR.asn1.x509.AuthorityKeyIdentifier.superclass.constructor.call(this, d);var b = KJUR,
      a = b.asn1,
      c = a.DERTaggedObject;this.asn1KID = null;this.asn1CertIssuer = null;this.asn1CertSN = null;this.getExtnValueHex = function () {
    var f = new Array();if (this.asn1KID) {
      f.push(new c({ explicit: false, tag: "80", obj: this.asn1KID }));
    }if (this.asn1CertIssuer) {
      f.push(new c({ explicit: false, tag: "a1", obj: this.asn1CertIssuer }));
    }if (this.asn1CertSN) {
      f.push(new c({ explicit: false, tag: "82", obj: this.asn1CertSN }));
    }var e = new a.DERSequence({ array: f });this.asn1ExtnValue = e;return this.asn1ExtnValue.getEncodedHex();
  };this.setKIDByParam = function (e) {
    this.asn1KID = new KJUR.asn1.DEROctetString(e);
  };this.setCertIssuerByParam = function (e) {
    this.asn1CertIssuer = new KJUR.asn1.x509.X500Name(e);
  };this.setCertSNByParam = function (e) {
    this.asn1CertSN = new KJUR.asn1.DERInteger(e);
  };this.oid = "2.5.29.35";if (d !== undefined) {
    if (d.kid !== undefined) {
      this.setKIDByParam(d.kid);
    }if (d.issuer !== undefined) {
      this.setCertIssuerByParam(d.issuer);
    }if (d.sn !== undefined) {
      this.setCertSNByParam(d.sn);
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.AuthorityKeyIdentifier, KJUR.asn1.x509.Extension);KJUR.asn1.x509.AuthorityInfoAccess = function (a) {
  KJUR.asn1.x509.AuthorityInfoAccess.superclass.constructor.call(this, a);this.setAccessDescriptionArray = function (k) {
    var j = new Array(),
        b = KJUR,
        g = b.asn1,
        d = g.DERSequence;for (var f = 0; f < k.length; f++) {
      var c = new g.DERObjectIdentifier(k[f].accessMethod);var e = new g.x509.GeneralName(k[f].accessLocation);var h = new d({ array: [c, e] });j.push(h);
    }this.asn1ExtnValue = new d({ array: j });
  };this.getExtnValueHex = function () {
    return this.asn1ExtnValue.getEncodedHex();
  };this.oid = "1.3.6.1.5.5.7.1.1";if (a !== undefined) {
    if (a.array !== undefined) {
      this.setAccessDescriptionArray(a.array);
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.AuthorityInfoAccess, KJUR.asn1.x509.Extension);KJUR.asn1.x509.SubjectAltName = function (a) {
  KJUR.asn1.x509.SubjectAltName.superclass.constructor.call(this, a);this.setNameArray = function (b) {
    this.asn1ExtnValue = new KJUR.asn1.x509.GeneralNames(b);
  };this.getExtnValueHex = function () {
    return this.asn1ExtnValue.getEncodedHex();
  };this.oid = "2.5.29.17";if (a !== undefined) {
    if (a.array !== undefined) {
      this.setNameArray(a.array);
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.SubjectAltName, KJUR.asn1.x509.Extension);KJUR.asn1.x509.IssuerAltName = function (a) {
  KJUR.asn1.x509.IssuerAltName.superclass.constructor.call(this, a);this.setNameArray = function (b) {
    this.asn1ExtnValue = new KJUR.asn1.x509.GeneralNames(b);
  };this.getExtnValueHex = function () {
    return this.asn1ExtnValue.getEncodedHex();
  };this.oid = "2.5.29.18";if (a !== undefined) {
    if (a.array !== undefined) {
      this.setNameArray(a.array);
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.IssuerAltName, KJUR.asn1.x509.Extension);KJUR.asn1.x509.CRL = function (f) {
  KJUR.asn1.x509.CRL.superclass.constructor.call(this);var b = null,
      d = null,
      e = null,
      c = null,
      a = null;this.sign = function () {
    this.asn1SignatureAlg = this.asn1TBSCertList.asn1SignatureAlg;sig = new KJUR.crypto.Signature({ alg: "SHA1withRSA", prov: "cryptojs/jsrsa" });sig.init(this.prvKey);sig.updateHex(this.asn1TBSCertList.getEncodedHex());this.hexSig = sig.sign();this.asn1Sig = new KJUR.asn1.DERBitString({ hex: "00" + this.hexSig });var g = new KJUR.asn1.DERSequence({ array: [this.asn1TBSCertList, this.asn1SignatureAlg, this.asn1Sig] });this.hTLV = g.getEncodedHex();this.isModified = false;
  };this.getEncodedHex = function () {
    if (this.isModified == false && this.hTLV != null) {
      return this.hTLV;
    }throw "not signed yet";
  };this.getPEMString = function () {
    var g = hextob64nl(this.getEncodedHex());return "-----BEGIN X509 CRL-----\r\n" + g + "\r\n-----END X509 CRL-----\r\n";
  };if (f !== undefined) {
    if (f.tbsobj !== undefined) {
      this.asn1TBSCertList = f.tbsobj;
    }if (f.prvkeyobj !== undefined) {
      this.prvKey = f.prvkeyobj;
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.CRL, KJUR.asn1.ASN1Object);KJUR.asn1.x509.TBSCertList = function (g) {
  KJUR.asn1.x509.TBSCertList.superclass.constructor.call(this);var e = null,
      d = KJUR,
      c = d.asn1,
      b = c.DERSequence,
      f = c.x509,
      a = f.Time;this.setSignatureAlgByParam = function (h) {
    this.asn1SignatureAlg = new f.AlgorithmIdentifier(h);
  };this.setIssuerByParam = function (h) {
    this.asn1Issuer = new f.X500Name(h);
  };this.setThisUpdateByParam = function (h) {
    this.asn1ThisUpdate = new a(h);
  };this.setNextUpdateByParam = function (h) {
    this.asn1NextUpdate = new a(h);
  };this.addRevokedCert = function (h, i) {
    var k = {};if (h != undefined && h != null) {
      k.sn = h;
    }if (i != undefined && i != null) {
      k.time = i;
    }var j = new f.CRLEntry(k);this.aRevokedCert.push(j);
  };this.getEncodedHex = function () {
    this.asn1Array = new Array();if (this.asn1Version != null) {
      this.asn1Array.push(this.asn1Version);
    }this.asn1Array.push(this.asn1SignatureAlg);this.asn1Array.push(this.asn1Issuer);this.asn1Array.push(this.asn1ThisUpdate);if (this.asn1NextUpdate != null) {
      this.asn1Array.push(this.asn1NextUpdate);
    }if (this.aRevokedCert.length > 0) {
      var h = new b({ array: this.aRevokedCert });this.asn1Array.push(h);
    }var i = new b({ array: this.asn1Array });this.hTLV = i.getEncodedHex();this.isModified = false;return this.hTLV;
  };this._initialize = function () {
    this.asn1Version = null;this.asn1SignatureAlg = null;this.asn1Issuer = null;this.asn1ThisUpdate = null;this.asn1NextUpdate = null;this.aRevokedCert = new Array();
  };this._initialize();
};YAHOO.lang.extend(KJUR.asn1.x509.TBSCertList, KJUR.asn1.ASN1Object);KJUR.asn1.x509.CRLEntry = function (e) {
  KJUR.asn1.x509.CRLEntry.superclass.constructor.call(this);var d = null,
      c = null,
      b = KJUR,
      a = b.asn1;this.setCertSerial = function (f) {
    this.sn = new a.DERInteger(f);
  };this.setRevocationDate = function (f) {
    this.time = new a.x509.Time(f);
  };this.getEncodedHex = function () {
    var f = new a.DERSequence({ array: [this.sn, this.time] });this.TLV = f.getEncodedHex();return this.TLV;
  };if (e !== undefined) {
    if (e.time !== undefined) {
      this.setRevocationDate(e.time);
    }if (e.sn !== undefined) {
      this.setCertSerial(e.sn);
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.CRLEntry, KJUR.asn1.ASN1Object);KJUR.asn1.x509.X500Name = function (f) {
  KJUR.asn1.x509.X500Name.superclass.constructor.call(this);this.asn1Array = new Array();var d = KJUR,
      c = d.asn1,
      e = c.x509,
      b = pemtohex;this.setByString = function (g) {
    var k = g.split("/");k.shift();var j = [];for (var l = 0; l < k.length; l++) {
      if (k[l].match(/^[^=]+=.+$/)) {
        j.push(k[l]);
      } else {
        var h = j.length - 1;j[h] = j[h] + "/" + k[l];
      }
    }for (var l = 0; l < j.length; l++) {
      this.asn1Array.push(new e.RDN({ str: j[l] }));
    }
  };this.setByLdapString = function (g) {
    var h = e.X500Name.ldapToOneline(g);this.setByString(h);
  };this.setByObject = function (i) {
    for (var g in i) {
      if (i.hasOwnProperty(g)) {
        var h = new KJUR.asn1.x509.RDN({ str: g + "=" + i[g] });this.asn1Array ? this.asn1Array.push(h) : this.asn1Array = [h];
      }
    }
  };this.getEncodedHex = function () {
    if (typeof this.hTLV == "string") {
      return this.hTLV;
    }var g = new c.DERSequence({ array: this.asn1Array });this.hTLV = g.getEncodedHex();return this.hTLV;
  };if (f !== undefined) {
    if (f.str !== undefined) {
      this.setByString(f.str);
    } else {
      if (f.ldapstr !== undefined) {
        this.setByLdapString(f.ldapstr);
      } else {
        if ((typeof f === "undefined" ? "undefined" : _typeof(f)) === "object") {
          this.setByObject(f);
        }
      }
    }if (f.certissuer !== undefined) {
      var a = new X509();a.hex = b(f.certissuer);this.hTLV = a.getIssuerHex();
    }if (f.certsubject !== undefined) {
      var a = new X509();a.hex = b(f.certsubject);this.hTLV = a.getSubjectHex();
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.X500Name, KJUR.asn1.ASN1Object);KJUR.asn1.x509.X500Name.onelineToLDAP = function (d) {
  if (d.substr(0, 1) !== "/") {
    throw "malformed input";
  }var b = "";d = d.substr(1);var c = d.split("/");c.reverse();c = c.map(function (a) {
    return a.replace(/,/, "\\,");
  });return c.join(",");
};KJUR.asn1.x509.X500Name.ldapToOneline = function (g) {
  var c = g.split(",");var e = false;var b = [];for (var f = 0; c.length > 0; f++) {
    var h = c.shift();if (e === true) {
      var d = b.pop();var j = (d + "," + h).replace(/\\,/g, ",");b.push(j);e = false;
    } else {
      b.push(h);
    }if (h.substr(-1, 1) === "\\") {
      e = true;
    }
  }b = b.map(function (a) {
    return a.replace("/", "\\/");
  });b.reverse();return "/" + b.join("/");
};KJUR.asn1.x509.RDN = function (a) {
  KJUR.asn1.x509.RDN.superclass.constructor.call(this);this.asn1Array = new Array();this.addByString = function (b) {
    this.asn1Array.push(new KJUR.asn1.x509.AttributeTypeAndValue({ str: b }));
  };this.addByMultiValuedString = function (d) {
    var b = KJUR.asn1.x509.RDN.parseString(d);for (var c = 0; c < b.length; c++) {
      this.addByString(b[c]);
    }
  };this.getEncodedHex = function () {
    var b = new KJUR.asn1.DERSet({ array: this.asn1Array });this.TLV = b.getEncodedHex();return this.TLV;
  };if (a !== undefined) {
    if (a.str !== undefined) {
      this.addByMultiValuedString(a.str);
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.RDN, KJUR.asn1.ASN1Object);KJUR.asn1.x509.RDN.parseString = function (m) {
  var j = m.split(/\+/);var h = false;var c = [];for (var g = 0; j.length > 0; g++) {
    var k = j.shift();if (h === true) {
      var f = c.pop();var d = (f + "+" + k).replace(/\\\+/g, "+");c.push(d);h = false;
    } else {
      c.push(k);
    }if (k.substr(-1, 1) === "\\") {
      h = true;
    }
  }var l = false;var b = [];for (var g = 0; c.length > 0; g++) {
    var k = c.shift();if (l === true) {
      var e = b.pop();if (k.match(/"$/)) {
        var d = (e + "+" + k).replace(/^([^=]+)="(.*)"$/, "$1=$2");b.push(d);l = false;
      } else {
        b.push(e + "+" + k);
      }
    } else {
      b.push(k);
    }if (k.match(/^[^=]+="/)) {
      l = true;
    }
  }return b;
};KJUR.asn1.x509.AttributeTypeAndValue = function (d) {
  KJUR.asn1.x509.AttributeTypeAndValue.superclass.constructor.call(this);var f = null,
      e = null,
      a = "utf8",
      c = KJUR,
      b = c.asn1;this.setByString = function (h) {
    var g = h.match(/^([^=]+)=(.+)$/);if (g) {
      this.setByAttrTypeAndValueStr(g[1], g[2]);
    } else {
      throw "malformed attrTypeAndValueStr: " + h;
    }
  };this.setByAttrTypeAndValueStr = function (i, h) {
    this.typeObj = KJUR.asn1.x509.OID.atype2obj(i);var g = a;if (i == "C") {
      g = "prn";
    }this.valueObj = this.getValueObj(g, h);
  };this.getValueObj = function (h, g) {
    if (h == "utf8") {
      return new b.DERUTF8String({ str: g });
    }if (h == "prn") {
      return new b.DERPrintableString({ str: g });
    }if (h == "tel") {
      return new b.DERTeletexString({ str: g });
    }if (h == "ia5") {
      return new b.DERIA5String({ str: g });
    }throw "unsupported directory string type: type=" + h + " value=" + g;
  };this.getEncodedHex = function () {
    var g = new b.DERSequence({ array: [this.typeObj, this.valueObj] });this.TLV = g.getEncodedHex();return this.TLV;
  };if (d !== undefined) {
    if (d.str !== undefined) {
      this.setByString(d.str);
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.AttributeTypeAndValue, KJUR.asn1.ASN1Object);KJUR.asn1.x509.SubjectPublicKeyInfo = function (f) {
  KJUR.asn1.x509.SubjectPublicKeyInfo.superclass.constructor.call(this);var l = null,
      k = null,
      a = KJUR,
      j = a.asn1,
      i = j.DERInteger,
      b = j.DERBitString,
      m = j.DERObjectIdentifier,
      e = j.DERSequence,
      h = j.ASN1Util.newObject,
      d = j.x509,
      o = d.AlgorithmIdentifier,
      g = a.crypto,
      n = g.ECDSA,
      c = g.DSA;this.getASN1Object = function () {
    if (this.asn1AlgId == null || this.asn1SubjPKey == null) {
      throw "algId and/or subjPubKey not set";
    }var p = new e({ array: [this.asn1AlgId, this.asn1SubjPKey] });return p;
  };this.getEncodedHex = function () {
    var p = this.getASN1Object();this.hTLV = p.getEncodedHex();return this.hTLV;
  };this.setPubKey = function (q) {
    try {
      if (q instanceof RSAKey) {
        var u = h({ seq: [{ "int": { bigint: q.n } }, { "int": { "int": q.e } }] });var s = u.getEncodedHex();this.asn1AlgId = new o({ name: "rsaEncryption" });this.asn1SubjPKey = new b({ hex: "00" + s });
      }
    } catch (p) {}try {
      if (q instanceof KJUR.crypto.ECDSA) {
        var r = new m({ name: q.curveName });this.asn1AlgId = new o({ name: "ecPublicKey", asn1params: r });this.asn1SubjPKey = new b({ hex: "00" + q.pubKeyHex });
      }
    } catch (p) {}try {
      if (q instanceof KJUR.crypto.DSA) {
        var r = new h({ seq: [{ "int": { bigint: q.p } }, { "int": { bigint: q.q } }, { "int": { bigint: q.g } }] });this.asn1AlgId = new o({ name: "dsa", asn1params: r });var t = new i({ bigint: q.y });this.asn1SubjPKey = new b({ hex: "00" + t.getEncodedHex() });
      }
    } catch (p) {}
  };if (f !== undefined) {
    this.setPubKey(f);
  }
};YAHOO.lang.extend(KJUR.asn1.x509.SubjectPublicKeyInfo, KJUR.asn1.ASN1Object);KJUR.asn1.x509.Time = function (f) {
  KJUR.asn1.x509.Time.superclass.constructor.call(this);var e = null,
      a = null,
      d = KJUR,
      c = d.asn1,
      b = c.DERUTCTime,
      g = c.DERGeneralizedTime;this.setTimeParams = function (h) {
    this.timeParams = h;
  };this.getEncodedHex = function () {
    var h = null;if (this.timeParams != null) {
      if (this.type == "utc") {
        h = new b(this.timeParams);
      } else {
        h = new g(this.timeParams);
      }
    } else {
      if (this.type == "utc") {
        h = new b();
      } else {
        h = new g();
      }
    }this.TLV = h.getEncodedHex();return this.TLV;
  };this.type = "utc";if (f !== undefined) {
    if (f.type !== undefined) {
      this.type = f.type;
    } else {
      if (f.str !== undefined) {
        if (f.str.match(/^[0-9]{12}Z$/)) {
          this.type = "utc";
        }if (f.str.match(/^[0-9]{14}Z$/)) {
          this.type = "gen";
        }
      }
    }this.timeParams = f;
  }
};YAHOO.lang.extend(KJUR.asn1.x509.Time, KJUR.asn1.ASN1Object);KJUR.asn1.x509.AlgorithmIdentifier = function (d) {
  KJUR.asn1.x509.AlgorithmIdentifier.superclass.constructor.call(this);this.nameAlg = null;this.asn1Alg = null;this.asn1Params = null;this.paramEmpty = false;var b = KJUR,
      a = b.asn1;this.getEncodedHex = function () {
    if (this.nameAlg === null && this.asn1Alg === null) {
      throw "algorithm not specified";
    }if (this.nameAlg !== null && this.asn1Alg === null) {
      this.asn1Alg = a.x509.OID.name2obj(this.nameAlg);
    }var e = [this.asn1Alg];if (this.asn1Params !== null) {
      e.push(this.asn1Params);
    }var f = new a.DERSequence({ array: e });this.hTLV = f.getEncodedHex();return this.hTLV;
  };if (d !== undefined) {
    if (d.name !== undefined) {
      this.nameAlg = d.name;
    }if (d.asn1params !== undefined) {
      this.asn1Params = d.asn1params;
    }if (d.paramempty !== undefined) {
      this.paramEmpty = d.paramempty;
    }
  }if (this.asn1Params === null && this.paramEmpty === false && this.nameAlg !== null) {
    var c = this.nameAlg.toLowerCase();if (c.substr(-7, 7) !== "withdsa" && c.substr(-9, 9) !== "withecdsa") {
      this.asn1Params = new a.DERNull();
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.AlgorithmIdentifier, KJUR.asn1.ASN1Object);KJUR.asn1.x509.GeneralName = function (e) {
  KJUR.asn1.x509.GeneralName.superclass.constructor.call(this);var m = null,
      i = null,
      k = { rfc822: "81", dns: "82", dn: "a4", uri: "86", ip: "87" },
      b = KJUR,
      g = b.asn1,
      f = g.DERSequence,
      j = g.DEROctetString,
      d = g.DERIA5String,
      c = g.DERTaggedObject,
      l = g.ASN1Object,
      a = g.x509.X500Name,
      h = pemtohex;this.explicit = false;this.setByParam = function (p) {
    var r = null;var u = null;if (p === undefined) {
      return;
    }if (p.rfc822 !== undefined) {
      this.type = "rfc822";u = new d({ str: p[this.type] });
    }if (p.dns !== undefined) {
      this.type = "dns";u = new d({ str: p[this.type] });
    }if (p.uri !== undefined) {
      this.type = "uri";u = new d({ str: p[this.type] });
    }if (p.dn !== undefined) {
      this.type = "dn";this.explicit = true;u = new a({ str: p.dn });
    }if (p.ldapdn !== undefined) {
      this.type = "dn";this.explicit = true;u = new a({ ldapstr: p.ldapdn });
    }if (p.certissuer !== undefined) {
      this.type = "dn";this.explicit = true;var o = p.certissuer;var w = null;if (o.match(/^[0-9A-Fa-f]+$/)) {
        w == o;
      }if (o.indexOf("-----BEGIN ") != -1) {
        w = h(o);
      }if (w == null) {
        throw "certissuer param not cert";
      }var t = new X509();t.hex = w;var y = t.getIssuerHex();u = new l();u.hTLV = y;
    }if (p.certsubj !== undefined) {
      this.type = "dn";this.explicit = true;var o = p.certsubj;var w = null;if (o.match(/^[0-9A-Fa-f]+$/)) {
        w == o;
      }if (o.indexOf("-----BEGIN ") != -1) {
        w = h(o);
      }if (w == null) {
        throw "certsubj param not cert";
      }var t = new X509();t.hex = w;var y = t.getSubjectHex();u = new l();u.hTLV = y;
    }if (p.ip !== undefined) {
      this.type = "ip";this.explicit = false;var q = p.ip;var s;var n = "malformed IP address";if (q.match(/^[0-9.]+[.][0-9.]+$/)) {
        s = intarystrtohex("[" + q.split(".").join(",") + "]");if (s.length !== 8) {
          throw n;
        }
      } else {
        if (q.match(/^[0-9A-Fa-f:]+:[0-9A-Fa-f:]+$/)) {
          s = ipv6tohex(q);
        } else {
          if (q.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)) {
            s = q;
          } else {
            throw n;
          }
        }
      }u = new j({ hex: s });
    }if (this.type == null) {
      throw "unsupported type in params=" + p;
    }this.asn1Obj = new c({ explicit: this.explicit, tag: k[this.type], obj: u });
  };this.getEncodedHex = function () {
    return this.asn1Obj.getEncodedHex();
  };if (e !== undefined) {
    this.setByParam(e);
  }
};YAHOO.lang.extend(KJUR.asn1.x509.GeneralName, KJUR.asn1.ASN1Object);KJUR.asn1.x509.GeneralNames = function (d) {
  KJUR.asn1.x509.GeneralNames.superclass.constructor.call(this);var a = null,
      c = KJUR,
      b = c.asn1;this.setByParamArray = function (g) {
    for (var e = 0; e < g.length; e++) {
      var f = new b.x509.GeneralName(g[e]);this.asn1Array.push(f);
    }
  };this.getEncodedHex = function () {
    var e = new b.DERSequence({ array: this.asn1Array });return e.getEncodedHex();
  };this.asn1Array = new Array();if (typeof d != "undefined") {
    this.setByParamArray(d);
  }
};YAHOO.lang.extend(KJUR.asn1.x509.GeneralNames, KJUR.asn1.ASN1Object);KJUR.asn1.x509.DistributionPointName = function (b) {
  KJUR.asn1.x509.DistributionPointName.superclass.constructor.call(this);var h = null,
      e = null,
      a = null,
      g = null,
      d = KJUR,
      c = d.asn1,
      f = c.DERTaggedObject;this.getEncodedHex = function () {
    if (this.type != "full") {
      throw "currently type shall be 'full': " + this.type;
    }this.asn1Obj = new f({ explicit: false, tag: this.tag, obj: this.asn1V });this.hTLV = this.asn1Obj.getEncodedHex();return this.hTLV;
  };if (b !== undefined) {
    if (c.x509.GeneralNames.prototype.isPrototypeOf(b)) {
      this.type = "full";this.tag = "a0";this.asn1V = b;
    } else {
      throw "This class supports GeneralNames only as argument";
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.DistributionPointName, KJUR.asn1.ASN1Object);KJUR.asn1.x509.DistributionPoint = function (d) {
  KJUR.asn1.x509.DistributionPoint.superclass.constructor.call(this);var a = null,
      c = KJUR,
      b = c.asn1;this.getEncodedHex = function () {
    var e = new b.DERSequence();if (this.asn1DP != null) {
      var f = new b.DERTaggedObject({ explicit: true, tag: "a0", obj: this.asn1DP });e.appendASN1Object(f);
    }this.hTLV = e.getEncodedHex();return this.hTLV;
  };if (d !== undefined) {
    if (d.dpobj !== undefined) {
      this.asn1DP = d.dpobj;
    }
  }
};YAHOO.lang.extend(KJUR.asn1.x509.DistributionPoint, KJUR.asn1.ASN1Object);KJUR.asn1.x509.OID = new function (a) {
  this.atype2oidList = { CN: "2.5.4.3", L: "2.5.4.7", ST: "2.5.4.8", O: "2.5.4.10", OU: "2.5.4.11", C: "2.5.4.6", STREET: "2.5.4.9", DC: "0.9.2342.19200300.100.1.25", UID: "0.9.2342.19200300.100.1.1", SN: "2.5.4.4", T: "2.5.4.12", DN: "2.5.4.49", E: "1.2.840.113549.1.9.1", description: "2.5.4.13", businessCategory: "2.5.4.15", postalCode: "2.5.4.17", serialNumber: "2.5.4.5", uniqueIdentifier: "2.5.4.45", organizationIdentifier: "2.5.4.97", jurisdictionOfIncorporationL: "1.3.6.1.4.1.311.60.2.1.1", jurisdictionOfIncorporationSP: "1.3.6.1.4.1.311.60.2.1.2", jurisdictionOfIncorporationC: "1.3.6.1.4.1.311.60.2.1.3" };this.name2oidList = { sha1: "1.3.14.3.2.26", sha256: "2.16.840.1.101.3.4.2.1", sha384: "2.16.840.1.101.3.4.2.2", sha512: "2.16.840.1.101.3.4.2.3", sha224: "2.16.840.1.101.3.4.2.4", md5: "1.2.840.113549.2.5", md2: "1.3.14.7.2.2.1", ripemd160: "1.3.36.3.2.1", MD2withRSA: "1.2.840.113549.1.1.2", MD4withRSA: "1.2.840.113549.1.1.3", MD5withRSA: "1.2.840.113549.1.1.4", SHA1withRSA: "1.2.840.113549.1.1.5", SHA224withRSA: "1.2.840.113549.1.1.14", SHA256withRSA: "1.2.840.113549.1.1.11", SHA384withRSA: "1.2.840.113549.1.1.12", SHA512withRSA: "1.2.840.113549.1.1.13", SHA1withECDSA: "1.2.840.10045.4.1", SHA224withECDSA: "1.2.840.10045.4.3.1", SHA256withECDSA: "1.2.840.10045.4.3.2", SHA384withECDSA: "1.2.840.10045.4.3.3", SHA512withECDSA: "1.2.840.10045.4.3.4", dsa: "1.2.840.10040.4.1", SHA1withDSA: "1.2.840.10040.4.3", SHA224withDSA: "2.16.840.1.101.3.4.3.1", SHA256withDSA: "2.16.840.1.101.3.4.3.2", rsaEncryption: "1.2.840.113549.1.1.1", commonName: "2.5.4.3", countryName: "2.5.4.6", localityName: "2.5.4.7", stateOrProvinceName: "2.5.4.8", streetAddress: "2.5.4.9", organizationName: "2.5.4.10", organizationalUnitName: "2.5.4.11", domainComponent: "0.9.2342.19200300.100.1.25", userId: "0.9.2342.19200300.100.1.1", surname: "2.5.4.4", title: "2.5.4.12", distinguishedName: "2.5.4.49", emailAddress: "1.2.840.113549.1.9.1", description: "2.5.4.13", businessCategory: "2.5.4.15", postalCode: "2.5.4.17", uniqueIdentifier: "2.5.4.45", organizationIdentifier: "2.5.4.97", jurisdictionOfIncorporationL: "1.3.6.1.4.1.311.60.2.1.1", jurisdictionOfIncorporationSP: "1.3.6.1.4.1.311.60.2.1.2", jurisdictionOfIncorporationC: "1.3.6.1.4.1.311.60.2.1.3", subjectKeyIdentifier: "2.5.29.14", keyUsage: "2.5.29.15", subjectAltName: "2.5.29.17", issuerAltName: "2.5.29.18", basicConstraints: "2.5.29.19", nameConstraints: "2.5.29.30", cRLDistributionPoints: "2.5.29.31", certificatePolicies: "2.5.29.32", authorityKeyIdentifier: "2.5.29.35", policyConstraints: "2.5.29.36", extKeyUsage: "2.5.29.37", authorityInfoAccess: "1.3.6.1.5.5.7.1.1", ocsp: "1.3.6.1.5.5.7.48.1", caIssuers: "1.3.6.1.5.5.7.48.2", anyExtendedKeyUsage: "2.5.29.37.0", serverAuth: "1.3.6.1.5.5.7.3.1", clientAuth: "1.3.6.1.5.5.7.3.2", codeSigning: "1.3.6.1.5.5.7.3.3", emailProtection: "1.3.6.1.5.5.7.3.4", timeStamping: "1.3.6.1.5.5.7.3.8", ocspSigning: "1.3.6.1.5.5.7.3.9", ecPublicKey: "1.2.840.10045.2.1", secp256r1: "1.2.840.10045.3.1.7", secp256k1: "1.3.132.0.10", secp384r1: "1.3.132.0.34", pkcs5PBES2: "1.2.840.113549.1.5.13", pkcs5PBKDF2: "1.2.840.113549.1.5.12", "des-EDE3-CBC": "1.2.840.113549.3.7", data: "1.2.840.113549.1.7.1", "signed-data": "1.2.840.113549.1.7.2", "enveloped-data": "1.2.840.113549.1.7.3", "digested-data": "1.2.840.113549.1.7.5", "encrypted-data": "1.2.840.113549.1.7.6", "authenticated-data": "1.2.840.113549.1.9.16.1.2", tstinfo: "1.2.840.113549.1.9.16.1.4", extensionRequest: "1.2.840.113549.1.9.14" };this.objCache = {};this.name2obj = function (b) {
    if (typeof this.objCache[b] != "undefined") {
      return this.objCache[b];
    }if (typeof this.name2oidList[b] == "undefined") {
      throw "Name of ObjectIdentifier not defined: " + b;
    }var c = this.name2oidList[b];var d = new KJUR.asn1.DERObjectIdentifier({ oid: c });this.objCache[b] = d;return d;
  };this.atype2obj = function (b) {
    if (typeof this.objCache[b] != "undefined") {
      return this.objCache[b];
    }if (typeof this.atype2oidList[b] == "undefined") {
      throw "AttributeType name undefined: " + b;
    }var c = this.atype2oidList[b];var d = new KJUR.asn1.DERObjectIdentifier({ oid: c });this.objCache[b] = d;return d;
  };
}();KJUR.asn1.x509.OID.oid2name = function (b) {
  var c = KJUR.asn1.x509.OID.name2oidList;for (var a in c) {
    if (c[a] == b) {
      return a;
    }
  }return "";
};KJUR.asn1.x509.OID.oid2atype = function (b) {
  var c = KJUR.asn1.x509.OID.atype2oidList;for (var a in c) {
    if (c[a] == b) {
      return a;
    }
  }return b;
};KJUR.asn1.x509.OID.name2oid = function (a) {
  var b = KJUR.asn1.x509.OID.name2oidList;if (b[a] === undefined) {
    return "";
  }return b[a];
};KJUR.asn1.x509.X509Util = {};KJUR.asn1.x509.X509Util.newCertPEM = function (h) {
  var g = KJUR.asn1.x509,
      b = g.TBSCertificate,
      a = g.Certificate;var f = new b();if (h.serial !== undefined) {
    f.setSerialNumberByParam(h.serial);
  } else {
    throw "serial number undefined.";
  }if (typeof h.sigalg.name === "string") {
    f.setSignatureAlgByParam(h.sigalg);
  } else {
    throw "unproper signature algorithm name";
  }if (h.issuer !== undefined) {
    f.setIssuerByParam(h.issuer);
  } else {
    throw "issuer name undefined.";
  }if (h.notbefore !== undefined) {
    f.setNotBeforeByParam(h.notbefore);
  } else {
    throw "notbefore undefined.";
  }if (h.notafter !== undefined) {
    f.setNotAfterByParam(h.notafter);
  } else {
    throw "notafter undefined.";
  }if (h.subject !== undefined) {
    f.setSubjectByParam(h.subject);
  } else {
    throw "subject name undefined.";
  }if (h.sbjpubkey !== undefined) {
    f.setSubjectPublicKeyByGetKey(h.sbjpubkey);
  } else {
    throw "subject public key undefined.";
  }if (h.ext !== undefined && h.ext.length !== undefined) {
    for (var d = 0; d < h.ext.length; d++) {
      for (key in h.ext[d]) {
        f.appendExtensionByName(key, h.ext[d][key]);
      }
    }
  }if (h.cakey === undefined && h.sighex === undefined) {
    throw "param cakey and sighex undefined.";
  }var e = null;var c = null;if (h.cakey) {
    if (h.cakey.isPrivate === true) {
      e = h.cakey;
    } else {
      e = KEYUTIL.getKey.apply(null, h.cakey);
    }c = new a({ tbscertobj: f, prvkeyobj: e });c.sign();
  }if (h.sighex) {
    c = new a({ tbscertobj: f });c.setSignatureHex(h.sighex);
  }return c.getPEMString();
};
var KJUR;if (typeof KJUR == "undefined" || !KJUR) {
  KJUR = {};
}if (typeof KJUR.lang == "undefined" || !KJUR.lang) {
  KJUR.lang = {};
}KJUR.lang.String = function () {};function Base64x() {}function stoBA(d) {
  var b = new Array();for (var c = 0; c < d.length; c++) {
    b[c] = d.charCodeAt(c);
  }return b;
}function BAtos(b) {
  var d = "";for (var c = 0; c < b.length; c++) {
    d = d + String.fromCharCode(b[c]);
  }return d;
}function BAtohex(b) {
  var e = "";for (var d = 0; d < b.length; d++) {
    var c = b[d].toString(16);if (c.length == 1) {
      c = "0" + c;
    }e = e + c;
  }return e;
}function stohex(a) {
  return BAtohex(stoBA(a));
}function stob64(a) {
  return hex2b64(stohex(a));
}function stob64u(a) {
  return b64tob64u(hex2b64(stohex(a)));
}function b64utos(a) {
  return BAtos(b64toBA(b64utob64(a)));
}function b64tob64u(a) {
  a = a.replace(/\=/g, "");a = a.replace(/\+/g, "-");a = a.replace(/\//g, "_");return a;
}function b64utob64(a) {
  if (a.length % 4 == 2) {
    a = a + "==";
  } else {
    if (a.length % 4 == 3) {
      a = a + "=";
    }
  }a = a.replace(/-/g, "+");a = a.replace(/_/g, "/");return a;
}function hextob64u(a) {
  if (a.length % 2 == 1) {
    a = "0" + a;
  }return b64tob64u(hex2b64(a));
}function b64utohex(a) {
  return b64tohex(b64utob64(a));
}var utf8tob64u, b64utoutf8;if (typeof Buffer === "function") {
  utf8tob64u = function utf8tob64u(a) {
    return b64tob64u(new Buffer(a, "utf8").toString("base64"));
  };b64utoutf8 = function b64utoutf8(a) {
    return new Buffer(b64utob64(a), "base64").toString("utf8");
  };
} else {
  utf8tob64u = function utf8tob64u(a) {
    return hextob64u(uricmptohex(encodeURIComponentAll(a)));
  };b64utoutf8 = function b64utoutf8(a) {
    return decodeURIComponent(hextouricmp(b64utohex(a)));
  };
}function utf8tob64(a) {
  return hex2b64(uricmptohex(encodeURIComponentAll(a)));
}function b64toutf8(a) {
  return decodeURIComponent(hextouricmp(b64tohex(a)));
}function utf8tohex(a) {
  return uricmptohex(encodeURIComponentAll(a));
}function hextoutf8(a) {
  return decodeURIComponent(hextouricmp(a));
}function hextorstr(c) {
  var b = "";for (var a = 0; a < c.length - 1; a += 2) {
    b += String.fromCharCode(parseInt(c.substr(a, 2), 16));
  }return b;
}function rstrtohex(c) {
  var a = "";for (var b = 0; b < c.length; b++) {
    a += ("0" + c.charCodeAt(b).toString(16)).slice(-2);
  }return a;
}function hextob64(a) {
  return hex2b64(a);
}function hextob64nl(b) {
  var a = hextob64(b);var c = a.replace(/(.{64})/g, "$1\r\n");c = c.replace(/\r\n$/, "");return c;
}function b64nltohex(b) {
  var a = b.replace(/[^0-9A-Za-z\/+=]*/g, "");var c = b64tohex(a);return c;
}function hextopem(a, b) {
  var c = hextob64nl(a);return "-----BEGIN " + b + "-----\r\n" + c + "\r\n-----END " + b + "-----\r\n";
}function pemtohex(a, b) {
  if (a.indexOf("-----BEGIN ") == -1) {
    throw "can't find PEM header: " + b;
  }if (b !== undefined) {
    a = a.replace("-----BEGIN " + b + "-----", "");a = a.replace("-----END " + b + "-----", "");
  } else {
    a = a.replace(/-----BEGIN [^-]+-----/, "");a = a.replace(/-----END [^-]+-----/, "");
  }return b64nltohex(a);
}function hextoArrayBuffer(d) {
  if (d.length % 2 != 0) {
    throw "input is not even length";
  }if (d.match(/^[0-9A-Fa-f]+$/) == null) {
    throw "input is not hexadecimal";
  }var b = new ArrayBuffer(d.length / 2);var a = new DataView(b);for (var c = 0; c < d.length / 2; c++) {
    a.setUint8(c, parseInt(d.substr(c * 2, 2), 16));
  }return b;
}function ArrayBuffertohex(b) {
  var d = "";var a = new DataView(b);for (var c = 0; c < b.byteLength; c++) {
    d += ("00" + a.getUint8(c).toString(16)).slice(-2);
  }return d;
}function zulutomsec(n) {
  var l, j, m, e, f, i, b, k;var a, h, g, c;c = n.match(/^(\d{2}|\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(|\.\d+)Z$/);if (c) {
    a = c[1];l = parseInt(a);if (a.length === 2) {
      if (50 <= l && l < 100) {
        l = 1900 + l;
      } else {
        if (0 <= l && l < 50) {
          l = 2000 + l;
        }
      }
    }j = parseInt(c[2]) - 1;m = parseInt(c[3]);e = parseInt(c[4]);f = parseInt(c[5]);i = parseInt(c[6]);b = 0;h = c[7];if (h !== "") {
      g = (h.substr(1) + "00").substr(0, 3);b = parseInt(g);
    }return Date.UTC(l, j, m, e, f, i, b);
  }throw "unsupported zulu format: " + n;
}function zulutosec(a) {
  var b = zulutomsec(a);return ~~(b / 1000);
}function zulutodate(a) {
  return new Date(zulutomsec(a));
}function datetozulu(g, e, f) {
  var b;var a = g.getUTCFullYear();if (e) {
    if (a < 1950 || 2049 < a) {
      throw "not proper year for UTCTime: " + a;
    }b = ("" + a).slice(-2);
  } else {
    b = ("000" + a).slice(-4);
  }b += ("0" + (g.getUTCMonth() + 1)).slice(-2);b += ("0" + g.getUTCDate()).slice(-2);b += ("0" + g.getUTCHours()).slice(-2);b += ("0" + g.getUTCMinutes()).slice(-2);b += ("0" + g.getUTCSeconds()).slice(-2);if (f) {
    var c = g.getUTCMilliseconds();if (c !== 0) {
      c = ("00" + c).slice(-3);c = c.replace(/0+$/g, "");b += "." + c;
    }
  }b += "Z";return b;
}function uricmptohex(a) {
  return a.replace(/%/g, "");
}function hextouricmp(a) {
  return a.replace(/(..)/g, "%$1");
}function ipv6tohex(g) {
  var b = "malformed IPv6 address";if (!g.match(/^[0-9A-Fa-f:]+$/)) {
    throw b;
  }g = g.toLowerCase();var d = g.split(":").length - 1;if (d < 2) {
    throw b;
  }var e = ":".repeat(7 - d + 2);g = g.replace("::", e);var c = g.split(":");if (c.length != 8) {
    throw b;
  }for (var f = 0; f < 8; f++) {
    c[f] = ("0000" + c[f]).slice(-4);
  }return c.join("");
}function hextoipv6(e) {
  if (!e.match(/^[0-9A-Fa-f]{32}$/)) {
    throw "malformed IPv6 address octet";
  }e = e.toLowerCase();var b = e.match(/.{1,4}/g);for (var d = 0; d < 8; d++) {
    b[d] = b[d].replace(/^0+/, "");if (b[d] == "") {
      b[d] = "0";
    }
  }e = ":" + b.join(":") + ":";var c = e.match(/:(0:){2,}/g);if (c === null) {
    return e.slice(1, -1);
  }var f = "";for (var d = 0; d < c.length; d++) {
    if (c[d].length > f.length) {
      f = c[d];
    }
  }e = e.replace(f, "::");return e.slice(1, -1);
}function hextoip(b) {
  var d = "malformed hex value";if (!b.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)) {
    throw d;
  }if (b.length == 8) {
    var c;try {
      c = parseInt(b.substr(0, 2), 16) + "." + parseInt(b.substr(2, 2), 16) + "." + parseInt(b.substr(4, 2), 16) + "." + parseInt(b.substr(6, 2), 16);return c;
    } catch (a) {
      throw d;
    }
  } else {
    if (b.length == 32) {
      return hextoipv6(b);
    } else {
      return b;
    }
  }
}function iptohex(f) {
  var j = "malformed IP address";f = f.toLowerCase(f);if (f.match(/^[0-9.]+$/)) {
    var b = f.split(".");if (b.length !== 4) {
      throw j;
    }var g = "";try {
      for (var e = 0; e < 4; e++) {
        var h = parseInt(b[e]);g += ("0" + h.toString(16)).slice(-2);
      }return g;
    } catch (c) {
      throw j;
    }
  } else {
    if (f.match(/^[0-9a-f:]+$/) && f.indexOf(":") !== -1) {
      return ipv6tohex(f);
    } else {
      throw j;
    }
  }
}function encodeURIComponentAll(a) {
  var d = encodeURIComponent(a);var b = "";for (var c = 0; c < d.length; c++) {
    if (d[c] == "%") {
      b = b + d.substr(c, 3);c = c + 2;
    } else {
      b = b + "%" + stohex(d[c]);
    }
  }return b;
}function newline_toUnix(a) {
  a = a.replace(/\r\n/mg, "\n");return a;
}function newline_toDos(a) {
  a = a.replace(/\r\n/mg, "\n");a = a.replace(/\n/mg, "\r\n");return a;
}KJUR.lang.String.isInteger = function (a) {
  if (a.match(/^[0-9]+$/)) {
    return true;
  } else {
    if (a.match(/^-[0-9]+$/)) {
      return true;
    } else {
      return false;
    }
  }
};KJUR.lang.String.isHex = function (a) {
  if (a.length % 2 == 0 && (a.match(/^[0-9a-f]+$/) || a.match(/^[0-9A-F]+$/))) {
    return true;
  } else {
    return false;
  }
};KJUR.lang.String.isBase64 = function (a) {
  a = a.replace(/\s+/g, "");if (a.match(/^[0-9A-Za-z+\/]+={0,3}$/) && a.length % 4 == 0) {
    return true;
  } else {
    return false;
  }
};KJUR.lang.String.isBase64URL = function (a) {
  if (a.match(/[+/=]/)) {
    return false;
  }a = b64utob64(a);return KJUR.lang.String.isBase64(a);
};KJUR.lang.String.isIntegerArray = function (a) {
  a = a.replace(/\s+/g, "");if (a.match(/^\[[0-9,]+\]$/)) {
    return true;
  } else {
    return false;
  }
};function hextoposhex(a) {
  if (a.length % 2 == 1) {
    return "0" + a;
  }if (a.substr(0, 1) > "7") {
    return "00" + a;
  }return a;
}function intarystrtohex(b) {
  b = b.replace(/^\s*\[\s*/, "");b = b.replace(/\s*\]\s*$/, "");b = b.replace(/\s*/g, "");try {
    var c = b.split(/,/).map(function (g, e, h) {
      var f = parseInt(g);if (f < 0 || 255 < f) {
        throw "integer not in range 0-255";
      }var d = ("00" + f.toString(16)).slice(-2);return d;
    }).join("");return c;
  } catch (a) {
    throw "malformed integer array string: " + a;
  }
}var strdiffidx = function strdiffidx(c, a) {
  var d = c.length;if (c.length > a.length) {
    d = a.length;
  }for (var b = 0; b < d; b++) {
    if (c.charCodeAt(b) != a.charCodeAt(b)) {
      return b;
    }
  }if (c.length != a.length) {
    return d;
  }return -1;
};
if (typeof KJUR == "undefined" || !KJUR) {
  KJUR = {};
}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
  KJUR.crypto = {};
}KJUR.crypto.Util = new function () {
  this.DIGESTINFOHEAD = { sha1: "3021300906052b0e03021a05000414", sha224: "302d300d06096086480165030402040500041c", sha256: "3031300d060960864801650304020105000420", sha384: "3041300d060960864801650304020205000430", sha512: "3051300d060960864801650304020305000440", md2: "3020300c06082a864886f70d020205000410", md5: "3020300c06082a864886f70d020505000410", ripemd160: "3021300906052b2403020105000414" };this.DEFAULTPROVIDER = { md5: "cryptojs", sha1: "cryptojs", sha224: "cryptojs", sha256: "cryptojs", sha384: "cryptojs", sha512: "cryptojs", ripemd160: "cryptojs", hmacmd5: "cryptojs", hmacsha1: "cryptojs", hmacsha224: "cryptojs", hmacsha256: "cryptojs", hmacsha384: "cryptojs", hmacsha512: "cryptojs", hmacripemd160: "cryptojs", MD5withRSA: "cryptojs/jsrsa", SHA1withRSA: "cryptojs/jsrsa", SHA224withRSA: "cryptojs/jsrsa", SHA256withRSA: "cryptojs/jsrsa", SHA384withRSA: "cryptojs/jsrsa", SHA512withRSA: "cryptojs/jsrsa", RIPEMD160withRSA: "cryptojs/jsrsa", MD5withECDSA: "cryptojs/jsrsa", SHA1withECDSA: "cryptojs/jsrsa", SHA224withECDSA: "cryptojs/jsrsa", SHA256withECDSA: "cryptojs/jsrsa", SHA384withECDSA: "cryptojs/jsrsa", SHA512withECDSA: "cryptojs/jsrsa", RIPEMD160withECDSA: "cryptojs/jsrsa", SHA1withDSA: "cryptojs/jsrsa", SHA224withDSA: "cryptojs/jsrsa", SHA256withDSA: "cryptojs/jsrsa", MD5withRSAandMGF1: "cryptojs/jsrsa", SHA1withRSAandMGF1: "cryptojs/jsrsa", SHA224withRSAandMGF1: "cryptojs/jsrsa", SHA256withRSAandMGF1: "cryptojs/jsrsa", SHA384withRSAandMGF1: "cryptojs/jsrsa", SHA512withRSAandMGF1: "cryptojs/jsrsa", RIPEMD160withRSAandMGF1: "cryptojs/jsrsa" };this.CRYPTOJSMESSAGEDIGESTNAME = { md5: CryptoJS.algo.MD5, sha1: CryptoJS.algo.SHA1, sha224: CryptoJS.algo.SHA224, sha256: CryptoJS.algo.SHA256, sha384: CryptoJS.algo.SHA384, sha512: CryptoJS.algo.SHA512, ripemd160: CryptoJS.algo.RIPEMD160 };this.getDigestInfoHex = function (a, b) {
    if (typeof this.DIGESTINFOHEAD[b] == "undefined") {
      throw "alg not supported in Util.DIGESTINFOHEAD: " + b;
    }return this.DIGESTINFOHEAD[b] + a;
  };this.getPaddedDigestInfoHex = function (h, a, j) {
    var c = this.getDigestInfoHex(h, a);var d = j / 4;if (c.length + 22 > d) {
      throw "key is too short for SigAlg: keylen=" + j + "," + a;
    }var b = "0001";var k = "00" + c;var g = "";var l = d - b.length - k.length;for (var f = 0; f < l; f += 2) {
      g += "ff";
    }var e = b + g + k;return e;
  };this.hashString = function (a, c) {
    var b = new KJUR.crypto.MessageDigest({ alg: c });return b.digestString(a);
  };this.hashHex = function (b, c) {
    var a = new KJUR.crypto.MessageDigest({ alg: c });return a.digestHex(b);
  };this.sha1 = function (a) {
    var b = new KJUR.crypto.MessageDigest({ alg: "sha1", prov: "cryptojs" });return b.digestString(a);
  };this.sha256 = function (a) {
    var b = new KJUR.crypto.MessageDigest({ alg: "sha256", prov: "cryptojs" });return b.digestString(a);
  };this.sha256Hex = function (a) {
    var b = new KJUR.crypto.MessageDigest({ alg: "sha256", prov: "cryptojs" });return b.digestHex(a);
  };this.sha512 = function (a) {
    var b = new KJUR.crypto.MessageDigest({ alg: "sha512", prov: "cryptojs" });return b.digestString(a);
  };this.sha512Hex = function (a) {
    var b = new KJUR.crypto.MessageDigest({ alg: "sha512", prov: "cryptojs" });return b.digestHex(a);
  };
}();KJUR.crypto.Util.md5 = function (a) {
  var b = new KJUR.crypto.MessageDigest({ alg: "md5", prov: "cryptojs" });return b.digestString(a);
};KJUR.crypto.Util.ripemd160 = function (a) {
  var b = new KJUR.crypto.MessageDigest({ alg: "ripemd160", prov: "cryptojs" });return b.digestString(a);
};KJUR.crypto.Util.SECURERANDOMGEN = new SecureRandom();KJUR.crypto.Util.getRandomHexOfNbytes = function (b) {
  var a = new Array(b);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(a);return BAtohex(a);
};KJUR.crypto.Util.getRandomBigIntegerOfNbytes = function (a) {
  return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbytes(a), 16);
};KJUR.crypto.Util.getRandomHexOfNbits = function (d) {
  var c = d % 8;var a = (d - c) / 8;var b = new Array(a + 1);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(b);b[0] = (255 << c & 255 ^ 255) & b[0];return BAtohex(b);
};KJUR.crypto.Util.getRandomBigIntegerOfNbits = function (a) {
  return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbits(a), 16);
};KJUR.crypto.Util.getRandomBigIntegerZeroToMax = function (b) {
  var a = b.bitLength();while (1) {
    var c = KJUR.crypto.Util.getRandomBigIntegerOfNbits(a);if (b.compareTo(c) != -1) {
      return c;
    }
  }
};KJUR.crypto.Util.getRandomBigIntegerMinToMax = function (e, b) {
  var c = e.compareTo(b);if (c == 1) {
    throw "biMin is greater than biMax";
  }if (c == 0) {
    return e;
  }var a = b.subtract(e);var d = KJUR.crypto.Util.getRandomBigIntegerZeroToMax(a);return d.add(e);
};KJUR.crypto.MessageDigest = function (c) {
  var b = null;var a = null;var d = null;this.setAlgAndProvider = function (g, f) {
    g = KJUR.crypto.MessageDigest.getCanonicalAlgName(g);if (g !== null && f === undefined) {
      f = KJUR.crypto.Util.DEFAULTPROVIDER[g];
    }if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g) != -1 && f == "cryptojs") {
      try {
        this.md = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g].create();
      } catch (e) {
        throw "setAlgAndProvider hash alg set fail alg=" + g + "/" + e;
      }this.updateString = function (h) {
        this.md.update(h);
      };this.updateHex = function (h) {
        var i = CryptoJS.enc.Hex.parse(h);this.md.update(i);
      };this.digest = function () {
        var h = this.md.finalize();return h.toString(CryptoJS.enc.Hex);
      };this.digestString = function (h) {
        this.updateString(h);return this.digest();
      };this.digestHex = function (h) {
        this.updateHex(h);return this.digest();
      };
    }if (":sha256:".indexOf(g) != -1 && f == "sjcl") {
      try {
        this.md = new sjcl.hash.sha256();
      } catch (e) {
        throw "setAlgAndProvider hash alg set fail alg=" + g + "/" + e;
      }this.updateString = function (h) {
        this.md.update(h);
      };this.updateHex = function (i) {
        var h = sjcl.codec.hex.toBits(i);this.md.update(h);
      };this.digest = function () {
        var h = this.md.finalize();return sjcl.codec.hex.fromBits(h);
      };this.digestString = function (h) {
        this.updateString(h);return this.digest();
      };this.digestHex = function (h) {
        this.updateHex(h);return this.digest();
      };
    }
  };this.updateString = function (e) {
    throw "updateString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };this.updateHex = function (e) {
    throw "updateHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };this.digest = function () {
    throw "digest() not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };this.digestString = function (e) {
    throw "digestString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };this.digestHex = function (e) {
    throw "digestHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };if (c !== undefined) {
    if (c.alg !== undefined) {
      this.algName = c.alg;if (c.prov === undefined) {
        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
      }this.setAlgAndProvider(this.algName, this.provName);
    }
  }
};KJUR.crypto.MessageDigest.getCanonicalAlgName = function (a) {
  if (typeof a === "string") {
    a = a.toLowerCase();a = a.replace(/-/, "");
  }return a;
};KJUR.crypto.MessageDigest.getHashLength = function (c) {
  var b = KJUR.crypto.MessageDigest;var a = b.getCanonicalAlgName(c);if (b.HASHLENGTH[a] === undefined) {
    throw "not supported algorithm: " + c;
  }return b.HASHLENGTH[a];
};KJUR.crypto.MessageDigest.HASHLENGTH = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, ripemd160: 20 };KJUR.crypto.Mac = function (d) {
  var f = null;var c = null;var a = null;var e = null;var b = null;this.setAlgAndProvider = function (k, i) {
    k = k.toLowerCase();if (k == null) {
      k = "hmacsha1";
    }k = k.toLowerCase();if (k.substr(0, 4) != "hmac") {
      throw "setAlgAndProvider unsupported HMAC alg: " + k;
    }if (i === undefined) {
      i = KJUR.crypto.Util.DEFAULTPROVIDER[k];
    }this.algProv = k + "/" + i;var g = k.substr(4);if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g) != -1 && i == "cryptojs") {
      try {
        var j = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g];this.mac = CryptoJS.algo.HMAC.create(j, this.pass);
      } catch (h) {
        throw "setAlgAndProvider hash alg set fail hashAlg=" + g + "/" + h;
      }this.updateString = function (l) {
        this.mac.update(l);
      };this.updateHex = function (l) {
        var m = CryptoJS.enc.Hex.parse(l);this.mac.update(m);
      };this.doFinal = function () {
        var l = this.mac.finalize();return l.toString(CryptoJS.enc.Hex);
      };this.doFinalString = function (l) {
        this.updateString(l);return this.doFinal();
      };this.doFinalHex = function (l) {
        this.updateHex(l);return this.doFinal();
      };
    }
  };this.updateString = function (g) {
    throw "updateString(str) not supported for this alg/prov: " + this.algProv;
  };this.updateHex = function (g) {
    throw "updateHex(hex) not supported for this alg/prov: " + this.algProv;
  };this.doFinal = function () {
    throw "digest() not supported for this alg/prov: " + this.algProv;
  };this.doFinalString = function (g) {
    throw "digestString(str) not supported for this alg/prov: " + this.algProv;
  };this.doFinalHex = function (g) {
    throw "digestHex(hex) not supported for this alg/prov: " + this.algProv;
  };this.setPassword = function (h) {
    if (typeof h == "string") {
      var g = h;if (h.length % 2 == 1 || !h.match(/^[0-9A-Fa-f]+$/)) {
        g = rstrtohex(h);
      }this.pass = CryptoJS.enc.Hex.parse(g);return;
    }if ((typeof h === "undefined" ? "undefined" : _typeof(h)) != "object") {
      throw "KJUR.crypto.Mac unsupported password type: " + h;
    }var g = null;if (h.hex !== undefined) {
      if (h.hex.length % 2 != 0 || !h.hex.match(/^[0-9A-Fa-f]+$/)) {
        throw "Mac: wrong hex password: " + h.hex;
      }g = h.hex;
    }if (h.utf8 !== undefined) {
      g = utf8tohex(h.utf8);
    }if (h.rstr !== undefined) {
      g = rstrtohex(h.rstr);
    }if (h.b64 !== undefined) {
      g = b64tohex(h.b64);
    }if (h.b64u !== undefined) {
      g = b64utohex(h.b64u);
    }if (g == null) {
      throw "KJUR.crypto.Mac unsupported password type: " + h;
    }this.pass = CryptoJS.enc.Hex.parse(g);
  };if (d !== undefined) {
    if (d.pass !== undefined) {
      this.setPassword(d.pass);
    }if (d.alg !== undefined) {
      this.algName = d.alg;if (d.prov === undefined) {
        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
      }this.setAlgAndProvider(this.algName, this.provName);
    }
  }
};KJUR.crypto.Signature = function (o) {
  var q = null;var n = null;var r = null;var c = null;var l = null;var d = null;var k = null;var h = null;var p = null;var e = null;var b = -1;var g = null;var j = null;var a = null;var i = null;var f = null;this._setAlgNames = function () {
    var s = this.algName.match(/^(.+)with(.+)$/);if (s) {
      this.mdAlgName = s[1].toLowerCase();this.pubkeyAlgName = s[2].toLowerCase();
    }
  };this._zeroPaddingOfSignature = function (x, w) {
    var v = "";var t = w / 4 - x.length;for (var u = 0; u < t; u++) {
      v = v + "0";
    }return v + x;
  };this.setAlgAndProvider = function (u, t) {
    this._setAlgNames();if (t != "cryptojs/jsrsa") {
      throw "provider not supported: " + t;
    }if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName) != -1) {
      try {
        this.md = new KJUR.crypto.MessageDigest({ alg: this.mdAlgName });
      } catch (s) {
        throw "setAlgAndProvider hash alg set fail alg=" + this.mdAlgName + "/" + s;
      }this.init = function (w, x) {
        var y = null;try {
          if (x === undefined) {
            y = KEYUTIL.getKey(w);
          } else {
            y = KEYUTIL.getKey(w, x);
          }
        } catch (v) {
          throw "init failed:" + v;
        }if (y.isPrivate === true) {
          this.prvKey = y;this.state = "SIGN";
        } else {
          if (y.isPublic === true) {
            this.pubKey = y;this.state = "VERIFY";
          } else {
            throw "init failed.:" + y;
          }
        }
      };this.updateString = function (v) {
        this.md.updateString(v);
      };this.updateHex = function (v) {
        this.md.updateHex(v);
      };this.sign = function () {
        this.sHashHex = this.md.digest();if (typeof this.ecprvhex != "undefined" && typeof this.eccurvename != "undefined") {
          var v = new KJUR.crypto.ECDSA({ curve: this.eccurvename });this.hSign = v.signHex(this.sHashHex, this.ecprvhex);
        } else {
          if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === "rsaandmgf1") {
            this.hSign = this.prvKey.signWithMessageHashPSS(this.sHashHex, this.mdAlgName, this.pssSaltLen);
          } else {
            if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === "rsa") {
              this.hSign = this.prvKey.signWithMessageHash(this.sHashHex, this.mdAlgName);
            } else {
              if (this.prvKey instanceof KJUR.crypto.ECDSA) {
                this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
              } else {
                if (this.prvKey instanceof KJUR.crypto.DSA) {
                  this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
                } else {
                  throw "Signature: unsupported private key alg: " + this.pubkeyAlgName;
                }
              }
            }
          }
        }return this.hSign;
      };this.signString = function (v) {
        this.updateString(v);return this.sign();
      };this.signHex = function (v) {
        this.updateHex(v);return this.sign();
      };this.verify = function (v) {
        this.sHashHex = this.md.digest();if (typeof this.ecpubhex != "undefined" && typeof this.eccurvename != "undefined") {
          var w = new KJUR.crypto.ECDSA({ curve: this.eccurvename });return w.verifyHex(this.sHashHex, v, this.ecpubhex);
        } else {
          if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === "rsaandmgf1") {
            return this.pubKey.verifyWithMessageHashPSS(this.sHashHex, v, this.mdAlgName, this.pssSaltLen);
          } else {
            if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === "rsa") {
              return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
            } else {
              if (KJUR.crypto.ECDSA !== undefined && this.pubKey instanceof KJUR.crypto.ECDSA) {
                return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
              } else {
                if (KJUR.crypto.DSA !== undefined && this.pubKey instanceof KJUR.crypto.DSA) {
                  return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
                } else {
                  throw "Signature: unsupported public key alg: " + this.pubkeyAlgName;
                }
              }
            }
          }
        }
      };
    }
  };this.init = function (s, t) {
    throw "init(key, pass) not supported for this alg:prov=" + this.algProvName;
  };this.updateString = function (s) {
    throw "updateString(str) not supported for this alg:prov=" + this.algProvName;
  };this.updateHex = function (s) {
    throw "updateHex(hex) not supported for this alg:prov=" + this.algProvName;
  };this.sign = function () {
    throw "sign() not supported for this alg:prov=" + this.algProvName;
  };this.signString = function (s) {
    throw "digestString(str) not supported for this alg:prov=" + this.algProvName;
  };this.signHex = function (s) {
    throw "digestHex(hex) not supported for this alg:prov=" + this.algProvName;
  };this.verify = function (s) {
    throw "verify(hSigVal) not supported for this alg:prov=" + this.algProvName;
  };this.initParams = o;if (o !== undefined) {
    if (o.alg !== undefined) {
      this.algName = o.alg;if (o.prov === undefined) {
        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
      } else {
        this.provName = o.prov;
      }this.algProvName = this.algName + ":" + this.provName;this.setAlgAndProvider(this.algName, this.provName);this._setAlgNames();
    }if (o.psssaltlen !== undefined) {
      this.pssSaltLen = o.psssaltlen;
    }if (o.prvkeypem !== undefined) {
      if (o.prvkeypas !== undefined) {
        throw "both prvkeypem and prvkeypas parameters not supported";
      } else {
        try {
          var q = KEYUTIL.getKey(o.prvkeypem);this.init(q);
        } catch (m) {
          throw "fatal error to load pem private key: " + m;
        }
      }
    }
  }
};KJUR.crypto.Cipher = function (a) {};KJUR.crypto.Cipher.encrypt = function (e, f, d) {
  if (f instanceof RSAKey && f.isPublic) {
    var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d);if (c === "RSA") {
      return f.encrypt(e);
    }if (c === "RSAOAEP") {
      return f.encryptOAEP(e, "sha1");
    }var b = c.match(/^RSAOAEP(\d+)$/);if (b !== null) {
      return f.encryptOAEP(e, "sha" + b[1]);
    }throw "Cipher.encrypt: unsupported algorithm for RSAKey: " + d;
  } else {
    throw "Cipher.encrypt: unsupported key or algorithm";
  }
};KJUR.crypto.Cipher.decrypt = function (e, f, d) {
  if (f instanceof RSAKey && f.isPrivate) {
    var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d);if (c === "RSA") {
      return f.decrypt(e);
    }if (c === "RSAOAEP") {
      return f.decryptOAEP(e, "sha1");
    }var b = c.match(/^RSAOAEP(\d+)$/);if (b !== null) {
      return f.decryptOAEP(e, "sha" + b[1]);
    }throw "Cipher.decrypt: unsupported algorithm for RSAKey: " + d;
  } else {
    throw "Cipher.decrypt: unsupported key or algorithm";
  }
};KJUR.crypto.Cipher.getAlgByKeyAndName = function (b, a) {
  if (b instanceof RSAKey) {
    if (":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(a) != -1) {
      return a;
    }if (a === null || a === undefined) {
      return "RSA";
    }throw "getAlgByKeyAndName: not supported algorithm name for RSAKey: " + a;
  }throw "getAlgByKeyAndName: not supported algorithm name: " + a;
};KJUR.crypto.OID = new function () {
  this.oidhex2name = { "2a864886f70d010101": "rsaEncryption", "2a8648ce3d0201": "ecPublicKey", "2a8648ce380401": "dsa", "2a8648ce3d030107": "secp256r1", "2b8104001f": "secp192k1", "2b81040021": "secp224r1", "2b8104000a": "secp256k1", "2b81040023": "secp521r1", "2b81040022": "secp384r1", "2a8648ce380403": "SHA1withDSA", "608648016503040301": "SHA224withDSA", "608648016503040302": "SHA256withDSA" };
}();
if (typeof KJUR == "undefined" || !KJUR) {
  KJUR = {};
}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
  KJUR.crypto = {};
}KJUR.crypto.ECDSA = function (h) {
  var e = "secp256r1";var g = null;var b = null;var f = null;var a = new SecureRandom();var d = null;this.type = "EC";this.isPrivate = false;this.isPublic = false;function c(s, o, r, n) {
    var j = Math.max(o.bitLength(), n.bitLength());var t = s.add2D(r);var q = s.curve.getInfinity();for (var p = j - 1; p >= 0; --p) {
      q = q.twice2D();q.z = BigInteger.ONE;if (o.testBit(p)) {
        if (n.testBit(p)) {
          q = q.add2D(t);
        } else {
          q = q.add2D(s);
        }
      } else {
        if (n.testBit(p)) {
          q = q.add2D(r);
        }
      }
    }return q;
  }this.getBigRandom = function (i) {
    return new BigInteger(i.bitLength(), a).mod(i.subtract(BigInteger.ONE)).add(BigInteger.ONE);
  };this.setNamedCurve = function (i) {
    this.ecparams = KJUR.crypto.ECParameterDB.getByName(i);this.prvKeyHex = null;this.pubKeyHex = null;this.curveName = i;
  };this.setPrivateKeyHex = function (i) {
    this.isPrivate = true;this.prvKeyHex = i;
  };this.setPublicKeyHex = function (i) {
    this.isPublic = true;this.pubKeyHex = i;
  };this.getPublicKeyXYHex = function () {
    var k = this.pubKeyHex;if (k.substr(0, 2) !== "04") {
      throw "this method supports uncompressed format(04) only";
    }var j = this.ecparams.keylen / 4;if (k.length !== 2 + j * 2) {
      throw "malformed public key hex length";
    }var i = {};i.x = k.substr(2, j);i.y = k.substr(2 + j);return i;
  };this.getShortNISTPCurveName = function () {
    var i = this.curveName;if (i === "secp256r1" || i === "NIST P-256" || i === "P-256" || i === "prime256v1") {
      return "P-256";
    }if (i === "secp384r1" || i === "NIST P-384" || i === "P-384") {
      return "P-384";
    }return null;
  };this.generateKeyPairHex = function () {
    var k = this.ecparams.n;var n = this.getBigRandom(k);var l = this.ecparams.G.multiply(n);var q = l.getX().toBigInteger();var o = l.getY().toBigInteger();var i = this.ecparams.keylen / 4;var m = ("0000000000" + n.toString(16)).slice(-i);var r = ("0000000000" + q.toString(16)).slice(-i);var p = ("0000000000" + o.toString(16)).slice(-i);var j = "04" + r + p;this.setPrivateKeyHex(m);this.setPublicKeyHex(j);return { ecprvhex: m, ecpubhex: j };
  };this.signWithMessageHash = function (i) {
    return this.signHex(i, this.prvKeyHex);
  };this.signHex = function (o, j) {
    var t = new BigInteger(j, 16);var l = this.ecparams.n;var q = new BigInteger(o, 16);do {
      var m = this.getBigRandom(l);var u = this.ecparams.G;var p = u.multiply(m);var i = p.getX().toBigInteger().mod(l);
    } while (i.compareTo(BigInteger.ZERO) <= 0);var v = m.modInverse(l).multiply(q.add(t.multiply(i))).mod(l);return KJUR.crypto.ECDSA.biRSSigToASN1Sig(i, v);
  };this.sign = function (m, u) {
    var q = u;var j = this.ecparams.n;var p = BigInteger.fromByteArrayUnsigned(m);do {
      var l = this.getBigRandom(j);var t = this.ecparams.G;var o = t.multiply(l);var i = o.getX().toBigInteger().mod(j);
    } while (i.compareTo(BigInteger.ZERO) <= 0);var v = l.modInverse(j).multiply(p.add(q.multiply(i))).mod(j);return this.serializeSig(i, v);
  };this.verifyWithMessageHash = function (j, i) {
    return this.verifyHex(j, i, this.pubKeyHex);
  };this.verifyHex = function (m, i, p) {
    var l, j;var o = KJUR.crypto.ECDSA.parseSigHex(i);l = o.r;j = o.s;var k;k = ECPointFp.decodeFromHex(this.ecparams.curve, p);var n = new BigInteger(m, 16);return this.verifyRaw(n, l, j, k);
  };this.verify = function (o, p, j) {
    var l, i;if (Bitcoin.Util.isArray(p)) {
      var n = this.parseSig(p);l = n.r;i = n.s;
    } else {
      if ("object" === (typeof p === "undefined" ? "undefined" : _typeof(p)) && p.r && p.s) {
        l = p.r;i = p.s;
      } else {
        throw "Invalid value for signature";
      }
    }var k;if (j instanceof ECPointFp) {
      k = j;
    } else {
      if (Bitcoin.Util.isArray(j)) {
        k = ECPointFp.decodeFrom(this.ecparams.curve, j);
      } else {
        throw "Invalid format for pubkey value, must be byte array or ECPointFp";
      }
    }var m = BigInteger.fromByteArrayUnsigned(o);return this.verifyRaw(m, l, i, k);
  };this.verifyRaw = function (o, i, w, m) {
    var l = this.ecparams.n;var u = this.ecparams.G;if (i.compareTo(BigInteger.ONE) < 0 || i.compareTo(l) >= 0) {
      return false;
    }if (w.compareTo(BigInteger.ONE) < 0 || w.compareTo(l) >= 0) {
      return false;
    }var p = w.modInverse(l);var k = o.multiply(p).mod(l);var j = i.multiply(p).mod(l);var q = u.multiply(k).add(m.multiply(j));var t = q.getX().toBigInteger().mod(l);return t.equals(i);
  };this.serializeSig = function (k, j) {
    var l = k.toByteArraySigned();var i = j.toByteArraySigned();var m = [];m.push(2);m.push(l.length);m = m.concat(l);m.push(2);m.push(i.length);m = m.concat(i);m.unshift(m.length);m.unshift(48);return m;
  };this.parseSig = function (n) {
    var m;if (n[0] != 48) {
      throw new Error("Signature not a valid DERSequence");
    }m = 2;if (n[m] != 2) {
      throw new Error("First element in signature must be a DERInteger");
    }var l = n.slice(m + 2, m + 2 + n[m + 1]);m += 2 + n[m + 1];if (n[m] != 2) {
      throw new Error("Second element in signature must be a DERInteger");
    }var i = n.slice(m + 2, m + 2 + n[m + 1]);m += 2 + n[m + 1];var k = BigInteger.fromByteArrayUnsigned(l);var j = BigInteger.fromByteArrayUnsigned(i);return { r: k, s: j };
  };this.parseSigCompact = function (m) {
    if (m.length !== 65) {
      throw "Signature has the wrong length";
    }var j = m[0] - 27;if (j < 0 || j > 7) {
      throw "Invalid signature type";
    }var o = this.ecparams.n;var l = BigInteger.fromByteArrayUnsigned(m.slice(1, 33)).mod(o);var k = BigInteger.fromByteArrayUnsigned(m.slice(33, 65)).mod(o);return { r: l, s: k, i: j };
  };this.readPKCS5PrvKeyHex = function (l) {
    var n = ASN1HEX;var m = KJUR.crypto.ECDSA.getName;var p = n.getVbyList;if (n.isASN1HEX(l) === false) {
      throw "not ASN.1 hex string";
    }var i, k, o;try {
      i = p(l, 0, [2, 0], "06");k = p(l, 0, [1], "04");try {
        o = p(l, 0, [3, 0], "03").substr(2);
      } catch (j) {}
    } catch (j) {
      throw "malformed PKCS#1/5 plain ECC private key";
    }this.curveName = m(i);if (this.curveName === undefined) {
      throw "unsupported curve name";
    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(o);this.setPrivateKeyHex(k);this.isPublic = false;
  };this.readPKCS8PrvKeyHex = function (l) {
    var q = ASN1HEX;var i = KJUR.crypto.ECDSA.getName;var n = q.getVbyList;if (q.isASN1HEX(l) === false) {
      throw "not ASN.1 hex string";
    }var j, p, m, k;try {
      j = n(l, 0, [1, 0], "06");p = n(l, 0, [1, 1], "06");m = n(l, 0, [2, 0, 1], "04");try {
        k = n(l, 0, [2, 0, 2, 0], "03").substr(2);
      } catch (o) {}
    } catch (o) {
      throw "malformed PKCS#8 plain ECC private key";
    }this.curveName = i(p);if (this.curveName === undefined) {
      throw "unsupported curve name";
    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(k);this.setPrivateKeyHex(m);this.isPublic = false;
  };this.readPKCS8PubKeyHex = function (l) {
    var n = ASN1HEX;var m = KJUR.crypto.ECDSA.getName;var p = n.getVbyList;if (n.isASN1HEX(l) === false) {
      throw "not ASN.1 hex string";
    }var k, i, o;try {
      k = p(l, 0, [0, 0], "06");i = p(l, 0, [0, 1], "06");o = p(l, 0, [1], "03").substr(2);
    } catch (j) {
      throw "malformed PKCS#8 ECC public key";
    }this.curveName = m(i);if (this.curveName === null) {
      throw "unsupported curve name";
    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(o);
  };this.readCertPubKeyHex = function (k, p) {
    if (p !== 5) {
      p = 6;
    }var m = ASN1HEX;var l = KJUR.crypto.ECDSA.getName;var o = m.getVbyList;if (m.isASN1HEX(k) === false) {
      throw "not ASN.1 hex string";
    }var i, n;try {
      i = o(k, 0, [0, p, 0, 1], "06");n = o(k, 0, [0, p, 1], "03").substr(2);
    } catch (j) {
      throw "malformed X.509 certificate ECC public key";
    }this.curveName = l(i);if (this.curveName === null) {
      throw "unsupported curve name";
    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(n);
  };if (h !== undefined) {
    if (h.curve !== undefined) {
      this.curveName = h.curve;
    }
  }if (this.curveName === undefined) {
    this.curveName = e;
  }this.setNamedCurve(this.curveName);if (h !== undefined) {
    if (h.prv !== undefined) {
      this.setPrivateKeyHex(h.prv);
    }if (h.pub !== undefined) {
      this.setPublicKeyHex(h.pub);
    }
  }
};KJUR.crypto.ECDSA.parseSigHex = function (a) {
  var b = KJUR.crypto.ECDSA.parseSigHexInHexRS(a);var d = new BigInteger(b.r, 16);var c = new BigInteger(b.s, 16);return { r: d, s: c };
};KJUR.crypto.ECDSA.parseSigHexInHexRS = function (f) {
  var j = ASN1HEX;var i = j.getChildIdx;var g = j.getV;if (f.substr(0, 2) != "30") {
    throw "signature is not a ASN.1 sequence";
  }var h = i(f, 0);if (h.length != 2) {
    throw "number of signature ASN.1 sequence elements seem wrong";
  }var e = h[0];var d = h[1];if (f.substr(e, 2) != "02") {
    throw "1st item of sequene of signature is not ASN.1 integer";
  }if (f.substr(d, 2) != "02") {
    throw "2nd item of sequene of signature is not ASN.1 integer";
  }var c = g(f, e);var b = g(f, d);return { r: c, s: b };
};KJUR.crypto.ECDSA.asn1SigToConcatSig = function (c) {
  var d = KJUR.crypto.ECDSA.parseSigHexInHexRS(c);var b = d.r;var a = d.s;if (b.substr(0, 2) == "00" && b.length % 32 == 2) {
    b = b.substr(2);
  }if (a.substr(0, 2) == "00" && a.length % 32 == 2) {
    a = a.substr(2);
  }if (b.length % 32 == 30) {
    b = "00" + b;
  }if (a.length % 32 == 30) {
    a = "00" + a;
  }if (b.length % 32 != 0) {
    throw "unknown ECDSA sig r length error";
  }if (a.length % 32 != 0) {
    throw "unknown ECDSA sig s length error";
  }return b + a;
};KJUR.crypto.ECDSA.concatSigToASN1Sig = function (a) {
  if (a.length / 2 * 8 % (16 * 8) != 0) {
    throw "unknown ECDSA concatinated r-s sig  length error";
  }var c = a.substr(0, a.length / 2);var b = a.substr(a.length / 2);return KJUR.crypto.ECDSA.hexRSSigToASN1Sig(c, b);
};KJUR.crypto.ECDSA.hexRSSigToASN1Sig = function (b, a) {
  var d = new BigInteger(b, 16);var c = new BigInteger(a, 16);return KJUR.crypto.ECDSA.biRSSigToASN1Sig(d, c);
};KJUR.crypto.ECDSA.biRSSigToASN1Sig = function (f, d) {
  var c = KJUR.asn1;var b = new c.DERInteger({ bigint: f });var a = new c.DERInteger({ bigint: d });var e = new c.DERSequence({ array: [b, a] });return e.getEncodedHex();
};KJUR.crypto.ECDSA.getName = function (a) {
  if (a === "2a8648ce3d030107") {
    return "secp256r1";
  }if (a === "2b8104000a") {
    return "secp256k1";
  }if (a === "2b81040022") {
    return "secp384r1";
  }if ("|secp256r1|NIST P-256|P-256|prime256v1|".indexOf(a) !== -1) {
    return "secp256r1";
  }if ("|secp256k1|".indexOf(a) !== -1) {
    return "secp256k1";
  }if ("|secp384r1|NIST P-384|P-384|".indexOf(a) !== -1) {
    return "secp384r1";
  }return null;
};
if (typeof KJUR == "undefined" || !KJUR) {
  KJUR = {};
}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
  KJUR.crypto = {};
}KJUR.crypto.ECParameterDB = new function () {
  var b = {};var c = {};function a(d) {
    return new BigInteger(d, 16);
  }this.getByName = function (e) {
    var d = e;if (typeof c[d] != "undefined") {
      d = c[e];
    }if (typeof b[d] != "undefined") {
      return b[d];
    }throw "unregistered EC curve name: " + d;
  };this.regist = function (A, l, o, g, m, e, j, f, k, u, d, x) {
    b[A] = {};var s = a(o);var z = a(g);var y = a(m);var t = a(e);var w = a(j);var r = new ECCurveFp(s, z, y);var q = r.decodePointHex("04" + f + k);b[A]["name"] = A;b[A]["keylen"] = l;b[A]["curve"] = r;b[A]["G"] = q;b[A]["n"] = t;b[A]["h"] = w;b[A]["oid"] = d;b[A]["info"] = x;for (var v = 0; v < u.length; v++) {
      c[u[v]] = A;
    }
  };
}();KJUR.crypto.ECParameterDB.regist("secp128r1", 128, "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC", "E87579C11079F43DD824993C2CEE5ED3", "FFFFFFFE0000000075A30D1B9038A115", "1", "161FF7528B899B2D0C28607CA52C5B86", "CF5AC8395BAFEB13C02DA292DDED7A83", [], "", "secp128r1 : SECG curve over a 128 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160k1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73", "0", "7", "0100000000000000000001B8FA16DFAB9ACA16B6B3", "1", "3B4C382CE37AA192A4019E763036F4F5DD4D7EBB", "938CF935318FDCED6BC28286531733C3F03C4FEE", [], "", "secp160k1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160r1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC", "1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45", "0100000000000000000001F4C8F927AED3CA752257", "1", "4A96B5688EF573284664698968C38BB913CBFC82", "23A628553168947D59DCC912042351377AC5FB32", [], "", "secp160r1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp192k1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37", "0", "3", "FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D", "1", "DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D", "9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D", []);KJUR.crypto.ECParameterDB.regist("secp192r1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC", "64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1", "FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831", "1", "188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012", "07192B95FFC8DA78631011ED6B24CDD573F977A11E794811", []);KJUR.crypto.ECParameterDB.regist("secp224r1", 224, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE", "B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4", "FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D", "1", "B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21", "BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34", []);KJUR.crypto.ECParameterDB.regist("secp256k1", 256, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F", "0", "7", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141", "1", "79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798", "483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8", []);KJUR.crypto.ECParameterDB.regist("secp256r1", 256, "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC", "5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B", "FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551", "1", "6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296", "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5", ["NIST P-256", "P-256", "prime256v1"]);KJUR.crypto.ECParameterDB.regist("secp384r1", 384, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC", "B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973", "1", "AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7", "3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f", ["NIST P-384", "P-384"]);KJUR.crypto.ECParameterDB.regist("secp521r1", 521, "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC", "051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409", "1", "C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66", "011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650", ["NIST P-521", "P-521"]);
var KEYUTIL = function () {
  var d = function d(p, r, q) {
    return k(CryptoJS.AES, p, r, q);
  };var e = function e(p, r, q) {
    return k(CryptoJS.TripleDES, p, r, q);
  };var a = function a(p, r, q) {
    return k(CryptoJS.DES, p, r, q);
  };var k = function k(s, x, u, q) {
    var r = CryptoJS.enc.Hex.parse(x);var w = CryptoJS.enc.Hex.parse(u);var p = CryptoJS.enc.Hex.parse(q);var t = {};t.key = w;t.iv = p;t.ciphertext = r;var v = s.decrypt(t, w, { iv: p });return CryptoJS.enc.Hex.stringify(v);
  };var l = function l(p, r, q) {
    return g(CryptoJS.AES, p, r, q);
  };var o = function o(p, r, q) {
    return g(CryptoJS.TripleDES, p, r, q);
  };var f = function f(p, r, q) {
    return g(CryptoJS.DES, p, r, q);
  };var g = function g(t, y, v, q) {
    var s = CryptoJS.enc.Hex.parse(y);var x = CryptoJS.enc.Hex.parse(v);var p = CryptoJS.enc.Hex.parse(q);var w = t.encrypt(s, x, { iv: p });var r = CryptoJS.enc.Hex.parse(w.toString());var u = CryptoJS.enc.Base64.stringify(r);return u;
  };var i = { "AES-256-CBC": { proc: d, eproc: l, keylen: 32, ivlen: 16 }, "AES-192-CBC": { proc: d, eproc: l, keylen: 24, ivlen: 16 }, "AES-128-CBC": { proc: d, eproc: l, keylen: 16, ivlen: 16 }, "DES-EDE3-CBC": { proc: e, eproc: o, keylen: 24, ivlen: 8 }, "DES-CBC": { proc: a, eproc: f, keylen: 8, ivlen: 8 } };var c = function c(p) {
    return i[p]["proc"];
  };var m = function m(p) {
    var r = CryptoJS.lib.WordArray.random(p);var q = CryptoJS.enc.Hex.stringify(r);return q;
  };var n = function n(v) {
    var w = {};var q = v.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)", "m"));if (q) {
      w.cipher = q[1];w.ivsalt = q[2];
    }var p = v.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));if (p) {
      w.type = p[1];
    }var u = -1;var x = 0;if (v.indexOf("\r\n\r\n") != -1) {
      u = v.indexOf("\r\n\r\n");x = 2;
    }if (v.indexOf("\n\n") != -1) {
      u = v.indexOf("\n\n");x = 1;
    }var t = v.indexOf("-----END");if (u != -1 && t != -1) {
      var r = v.substring(u + x * 2, t - x);r = r.replace(/\s+/g, "");w.data = r;
    }return w;
  };var j = function j(q, y, p) {
    var v = p.substring(0, 16);var t = CryptoJS.enc.Hex.parse(v);var r = CryptoJS.enc.Utf8.parse(y);var u = i[q]["keylen"] + i[q]["ivlen"];var x = "";var w = null;for (;;) {
      var s = CryptoJS.algo.MD5.create();if (w != null) {
        s.update(w);
      }s.update(r);s.update(t);w = s.finalize();x = x + CryptoJS.enc.Hex.stringify(w);if (x.length >= u * 2) {
        break;
      }
    }var z = {};z.keyhex = x.substr(0, i[q]["keylen"] * 2);z.ivhex = x.substr(i[q]["keylen"] * 2, i[q]["ivlen"] * 2);return z;
  };var b = function b(p, v, r, w) {
    var s = CryptoJS.enc.Base64.parse(p);var q = CryptoJS.enc.Hex.stringify(s);var u = i[v]["proc"];var t = u(q, r, w);return t;
  };var h = function h(p, s, q, u) {
    var r = i[s]["eproc"];var t = r(p, q, u);return t;
  };return { version: "1.0.0", parsePKCS5PEM: function parsePKCS5PEM(p) {
      return n(p);
    }, getKeyAndUnusedIvByPasscodeAndIvsalt: function getKeyAndUnusedIvByPasscodeAndIvsalt(q, p, r) {
      return j(q, p, r);
    }, decryptKeyB64: function decryptKeyB64(p, r, q, s) {
      return b(p, r, q, s);
    }, getDecryptedKeyHex: function getDecryptedKeyHex(y, x) {
      var q = n(y);var t = q.type;var r = q.cipher;var p = q.ivsalt;var s = q.data;var w = j(r, x, p);var v = w.keyhex;var u = b(s, r, v, p);return u;
    }, getEncryptedPKCS5PEMFromPrvKeyHex: function getEncryptedPKCS5PEMFromPrvKeyHex(x, s, A, t, r) {
      var p = "";if (typeof t == "undefined" || t == null) {
        t = "AES-256-CBC";
      }if (typeof i[t] == "undefined") {
        throw "KEYUTIL unsupported algorithm: " + t;
      }if (typeof r == "undefined" || r == null) {
        var v = i[t]["ivlen"];var u = m(v);r = u.toUpperCase();
      }var z = j(t, A, r);var y = z.keyhex;var w = h(s, t, y, r);var q = w.replace(/(.{64})/g, "$1\r\n");var p = "-----BEGIN " + x + " PRIVATE KEY-----\r\n";p += "Proc-Type: 4,ENCRYPTED\r\n";p += "DEK-Info: " + t + "," + r + "\r\n";p += "\r\n";p += q;p += "\r\n-----END " + x + " PRIVATE KEY-----\r\n";return p;
    }, parseHexOfEncryptedPKCS8: function parseHexOfEncryptedPKCS8(y) {
      var B = ASN1HEX;var z = B.getChildIdx;var w = B.getV;var t = {};var r = z(y, 0);if (r.length != 2) {
        throw "malformed format: SEQUENCE(0).items != 2: " + r.length;
      }t.ciphertext = w(y, r[1]);var A = z(y, r[0]);if (A.length != 2) {
        throw "malformed format: SEQUENCE(0.0).items != 2: " + A.length;
      }if (w(y, A[0]) != "2a864886f70d01050d") {
        throw "this only supports pkcs5PBES2";
      }var p = z(y, A[1]);if (A.length != 2) {
        throw "malformed format: SEQUENCE(0.0.1).items != 2: " + p.length;
      }var q = z(y, p[1]);if (q.length != 2) {
        throw "malformed format: SEQUENCE(0.0.1.1).items != 2: " + q.length;
      }if (w(y, q[0]) != "2a864886f70d0307") {
        throw "this only supports TripleDES";
      }t.encryptionSchemeAlg = "TripleDES";t.encryptionSchemeIV = w(y, q[1]);var s = z(y, p[0]);if (s.length != 2) {
        throw "malformed format: SEQUENCE(0.0.1.0).items != 2: " + s.length;
      }if (w(y, s[0]) != "2a864886f70d01050c") {
        throw "this only supports pkcs5PBKDF2";
      }var x = z(y, s[1]);if (x.length < 2) {
        throw "malformed format: SEQUENCE(0.0.1.0.1).items < 2: " + x.length;
      }t.pbkdf2Salt = w(y, x[0]);var u = w(y, x[1]);try {
        t.pbkdf2Iter = parseInt(u, 16);
      } catch (v) {
        throw "malformed format pbkdf2Iter: " + u;
      }return t;
    }, getPBKDF2KeyHexFromParam: function getPBKDF2KeyHexFromParam(u, p) {
      var t = CryptoJS.enc.Hex.parse(u.pbkdf2Salt);var q = u.pbkdf2Iter;var s = CryptoJS.PBKDF2(p, t, { keySize: 192 / 32, iterations: q });var r = CryptoJS.enc.Hex.stringify(s);return r;
    }, _getPlainPKCS8HexFromEncryptedPKCS8PEM: function _getPlainPKCS8HexFromEncryptedPKCS8PEM(x, y) {
      var r = pemtohex(x, "ENCRYPTED PRIVATE KEY");var p = this.parseHexOfEncryptedPKCS8(r);var u = KEYUTIL.getPBKDF2KeyHexFromParam(p, y);var v = {};v.ciphertext = CryptoJS.enc.Hex.parse(p.ciphertext);var t = CryptoJS.enc.Hex.parse(u);var s = CryptoJS.enc.Hex.parse(p.encryptionSchemeIV);var w = CryptoJS.TripleDES.decrypt(v, t, { iv: s });var q = CryptoJS.enc.Hex.stringify(w);return q;
    }, getKeyFromEncryptedPKCS8PEM: function getKeyFromEncryptedPKCS8PEM(s, q) {
      var p = this._getPlainPKCS8HexFromEncryptedPKCS8PEM(s, q);var r = this.getKeyFromPlainPrivatePKCS8Hex(p);return r;
    }, parsePlainPrivatePKCS8Hex: function parsePlainPrivatePKCS8Hex(s) {
      var v = ASN1HEX;var u = v.getChildIdx;var t = v.getV;var q = {};q.algparam = null;if (s.substr(0, 2) != "30") {
        throw "malformed plain PKCS8 private key(code:001)";
      }var r = u(s, 0);if (r.length != 3) {
        throw "malformed plain PKCS8 private key(code:002)";
      }if (s.substr(r[1], 2) != "30") {
        throw "malformed PKCS8 private key(code:003)";
      }var p = u(s, r[1]);if (p.length != 2) {
        throw "malformed PKCS8 private key(code:004)";
      }if (s.substr(p[0], 2) != "06") {
        throw "malformed PKCS8 private key(code:005)";
      }q.algoid = t(s, p[0]);if (s.substr(p[1], 2) == "06") {
        q.algparam = t(s, p[1]);
      }if (s.substr(r[2], 2) != "04") {
        throw "malformed PKCS8 private key(code:006)";
      }q.keyidx = v.getVidx(s, r[2]);return q;
    }, getKeyFromPlainPrivatePKCS8PEM: function getKeyFromPlainPrivatePKCS8PEM(q) {
      var p = pemtohex(q, "PRIVATE KEY");var r = this.getKeyFromPlainPrivatePKCS8Hex(p);return r;
    }, getKeyFromPlainPrivatePKCS8Hex: function getKeyFromPlainPrivatePKCS8Hex(p) {
      var q = this.parsePlainPrivatePKCS8Hex(p);var r;if (q.algoid == "2a864886f70d010101") {
        r = new RSAKey();
      } else {
        if (q.algoid == "2a8648ce380401") {
          r = new KJUR.crypto.DSA();
        } else {
          if (q.algoid == "2a8648ce3d0201") {
            r = new KJUR.crypto.ECDSA();
          } else {
            throw "unsupported private key algorithm";
          }
        }
      }r.readPKCS8PrvKeyHex(p);return r;
    }, _getKeyFromPublicPKCS8Hex: function _getKeyFromPublicPKCS8Hex(q) {
      var p;var r = ASN1HEX.getVbyList(q, 0, [0, 0], "06");if (r === "2a864886f70d010101") {
        p = new RSAKey();
      } else {
        if (r === "2a8648ce380401") {
          p = new KJUR.crypto.DSA();
        } else {
          if (r === "2a8648ce3d0201") {
            p = new KJUR.crypto.ECDSA();
          } else {
            throw "unsupported PKCS#8 public key hex";
          }
        }
      }p.readPKCS8PubKeyHex(q);return p;
    }, parsePublicRawRSAKeyHex: function parsePublicRawRSAKeyHex(r) {
      var u = ASN1HEX;var t = u.getChildIdx;var s = u.getV;var p = {};if (r.substr(0, 2) != "30") {
        throw "malformed RSA key(code:001)";
      }var q = t(r, 0);if (q.length != 2) {
        throw "malformed RSA key(code:002)";
      }if (r.substr(q[0], 2) != "02") {
        throw "malformed RSA key(code:003)";
      }p.n = s(r, q[0]);if (r.substr(q[1], 2) != "02") {
        throw "malformed RSA key(code:004)";
      }p.e = s(r, q[1]);return p;
    }, parsePublicPKCS8Hex: function parsePublicPKCS8Hex(t) {
      var v = ASN1HEX;var u = v.getChildIdx;var s = v.getV;var q = {};q.algparam = null;var r = u(t, 0);if (r.length != 2) {
        throw "outer DERSequence shall have 2 elements: " + r.length;
      }var w = r[0];if (t.substr(w, 2) != "30") {
        throw "malformed PKCS8 public key(code:001)";
      }var p = u(t, w);if (p.length != 2) {
        throw "malformed PKCS8 public key(code:002)";
      }if (t.substr(p[0], 2) != "06") {
        throw "malformed PKCS8 public key(code:003)";
      }q.algoid = s(t, p[0]);if (t.substr(p[1], 2) == "06") {
        q.algparam = s(t, p[1]);
      } else {
        if (t.substr(p[1], 2) == "30") {
          q.algparam = {};q.algparam.p = v.getVbyList(t, p[1], [0], "02");q.algparam.q = v.getVbyList(t, p[1], [1], "02");q.algparam.g = v.getVbyList(t, p[1], [2], "02");
        }
      }if (t.substr(r[1], 2) != "03") {
        throw "malformed PKCS8 public key(code:004)";
      }q.key = s(t, r[1]).substr(2);return q;
    } };
}();KEYUTIL.getKey = function (l, k, n) {
  var G = ASN1HEX,
      L = G.getChildIdx,
      v = G.getV,
      d = G.getVbyList,
      c = KJUR.crypto,
      i = c.ECDSA,
      C = c.DSA,
      w = RSAKey,
      M = pemtohex,
      F = KEYUTIL;if (typeof w != "undefined" && l instanceof w) {
    return l;
  }if (typeof i != "undefined" && l instanceof i) {
    return l;
  }if (typeof C != "undefined" && l instanceof C) {
    return l;
  }if (l.curve !== undefined && l.xy !== undefined && l.d === undefined) {
    return new i({ pub: l.xy, curve: l.curve });
  }if (l.curve !== undefined && l.d !== undefined) {
    return new i({ prv: l.d, curve: l.curve });
  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d === undefined) {
    var P = new w();P.setPublic(l.n, l.e);return P;
  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p !== undefined && l.q !== undefined && l.dp !== undefined && l.dq !== undefined && l.co !== undefined && l.qi === undefined) {
    var P = new w();P.setPrivateEx(l.n, l.e, l.d, l.p, l.q, l.dp, l.dq, l.co);return P;
  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p === undefined) {
    var P = new w();P.setPrivate(l.n, l.e, l.d);return P;
  }if (l.p !== undefined && l.q !== undefined && l.g !== undefined && l.y !== undefined && l.x === undefined) {
    var P = new C();P.setPublic(l.p, l.q, l.g, l.y);return P;
  }if (l.p !== undefined && l.q !== undefined && l.g !== undefined && l.y !== undefined && l.x !== undefined) {
    var P = new C();P.setPrivate(l.p, l.q, l.g, l.y, l.x);return P;
  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d === undefined) {
    var P = new w();P.setPublic(b64utohex(l.n), b64utohex(l.e));return P;
  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p !== undefined && l.q !== undefined && l.dp !== undefined && l.dq !== undefined && l.qi !== undefined) {
    var P = new w();P.setPrivateEx(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d), b64utohex(l.p), b64utohex(l.q), b64utohex(l.dp), b64utohex(l.dq), b64utohex(l.qi));return P;
  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d !== undefined) {
    var P = new w();P.setPrivate(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d));return P;
  }if (l.kty === "EC" && l.crv !== undefined && l.x !== undefined && l.y !== undefined && l.d === undefined) {
    var j = new i({ curve: l.crv });var t = j.ecparams.keylen / 4;var B = ("0000000000" + b64utohex(l.x)).slice(-t);var z = ("0000000000" + b64utohex(l.y)).slice(-t);var u = "04" + B + z;j.setPublicKeyHex(u);return j;
  }if (l.kty === "EC" && l.crv !== undefined && l.x !== undefined && l.y !== undefined && l.d !== undefined) {
    var j = new i({ curve: l.crv });var t = j.ecparams.keylen / 4;var B = ("0000000000" + b64utohex(l.x)).slice(-t);var z = ("0000000000" + b64utohex(l.y)).slice(-t);var u = "04" + B + z;var b = ("0000000000" + b64utohex(l.d)).slice(-t);j.setPublicKeyHex(u);j.setPrivateKeyHex(b);return j;
  }if (n === "pkcs5prv") {
    var J = l,
        G = ASN1HEX,
        N,
        P;N = L(J, 0);if (N.length === 9) {
      P = new w();P.readPKCS5PrvKeyHex(J);
    } else {
      if (N.length === 6) {
        P = new C();P.readPKCS5PrvKeyHex(J);
      } else {
        if (N.length > 2 && J.substr(N[1], 2) === "04") {
          P = new i();P.readPKCS5PrvKeyHex(J);
        } else {
          throw "unsupported PKCS#1/5 hexadecimal key";
        }
      }
    }return P;
  }if (n === "pkcs8prv") {
    var P = F.getKeyFromPlainPrivatePKCS8Hex(l);return P;
  }if (n === "pkcs8pub") {
    return F._getKeyFromPublicPKCS8Hex(l);
  }if (n === "x509pub") {
    return X509.getPublicKeyFromCertHex(l);
  }if (l.indexOf("-END CERTIFICATE-", 0) != -1 || l.indexOf("-END X509 CERTIFICATE-", 0) != -1 || l.indexOf("-END TRUSTED CERTIFICATE-", 0) != -1) {
    return X509.getPublicKeyFromCertPEM(l);
  }if (l.indexOf("-END PUBLIC KEY-") != -1) {
    var O = pemtohex(l, "PUBLIC KEY");return F._getKeyFromPublicPKCS8Hex(O);
  }if (l.indexOf("-END RSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
    var m = M(l, "RSA PRIVATE KEY");return F.getKey(m, null, "pkcs5prv");
  }if (l.indexOf("-END DSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
    var I = M(l, "DSA PRIVATE KEY");var E = d(I, 0, [1], "02");var D = d(I, 0, [2], "02");var K = d(I, 0, [3], "02");var r = d(I, 0, [4], "02");var s = d(I, 0, [5], "02");var P = new C();P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r, 16), new BigInteger(s, 16));return P;
  }if (l.indexOf("-END PRIVATE KEY-") != -1) {
    return F.getKeyFromPlainPrivatePKCS8PEM(l);
  }if (l.indexOf("-END RSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
    var o = F.getDecryptedKeyHex(l, k);var H = new RSAKey();H.readPKCS5PrvKeyHex(o);return H;
  }if (l.indexOf("-END EC PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
    var I = F.getDecryptedKeyHex(l, k);var P = d(I, 0, [1], "04");var f = d(I, 0, [2, 0], "06");var A = d(I, 0, [3, 0], "03").substr(2);var e = "";if (KJUR.crypto.OID.oidhex2name[f] !== undefined) {
      e = KJUR.crypto.OID.oidhex2name[f];
    } else {
      throw "undefined OID(hex) in KJUR.crypto.OID: " + f;
    }var j = new i({ curve: e });j.setPublicKeyHex(A);j.setPrivateKeyHex(P);j.isPublic = false;return j;
  }if (l.indexOf("-END DSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
    var I = F.getDecryptedKeyHex(l, k);var E = d(I, 0, [1], "02");var D = d(I, 0, [2], "02");var K = d(I, 0, [3], "02");var r = d(I, 0, [4], "02");var s = d(I, 0, [5], "02");var P = new C();P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r, 16), new BigInteger(s, 16));return P;
  }if (l.indexOf("-END ENCRYPTED PRIVATE KEY-") != -1) {
    return F.getKeyFromEncryptedPKCS8PEM(l, k);
  }throw "not supported argument";
};KEYUTIL.generateKeypair = function (a, c) {
  if (a == "RSA") {
    var b = c;var h = new RSAKey();h.generate(b, "10001");h.isPrivate = true;h.isPublic = true;var f = new RSAKey();var e = h.n.toString(16);var i = h.e.toString(16);f.setPublic(e, i);f.isPrivate = false;f.isPublic = true;var k = {};k.prvKeyObj = h;k.pubKeyObj = f;return k;
  } else {
    if (a == "EC") {
      var d = c;var g = new KJUR.crypto.ECDSA({ curve: d });var j = g.generateKeyPairHex();var h = new KJUR.crypto.ECDSA({ curve: d });h.setPublicKeyHex(j.ecpubhex);h.setPrivateKeyHex(j.ecprvhex);h.isPrivate = true;h.isPublic = false;var f = new KJUR.crypto.ECDSA({ curve: d });f.setPublicKeyHex(j.ecpubhex);f.isPrivate = false;f.isPublic = true;var k = {};k.prvKeyObj = h;k.pubKeyObj = f;return k;
    } else {
      throw "unknown algorithm: " + a;
    }
  }
};KEYUTIL.getPEM = function (b, D, y, m, q, j) {
  var F = KJUR,
      k = F.asn1,
      z = k.DERObjectIdentifier,
      f = k.DERInteger,
      l = k.ASN1Util.newObject,
      a = k.x509,
      C = a.SubjectPublicKeyInfo,
      e = F.crypto,
      u = e.DSA,
      r = e.ECDSA,
      n = RSAKey;function A(s) {
    var G = l({ seq: [{ "int": 0 }, { "int": { bigint: s.n } }, { "int": s.e }, { "int": { bigint: s.d } }, { "int": { bigint: s.p } }, { "int": { bigint: s.q } }, { "int": { bigint: s.dmp1 } }, { "int": { bigint: s.dmq1 } }, { "int": { bigint: s.coeff } }] });return G;
  }function B(G) {
    var s = l({ seq: [{ "int": 1 }, { octstr: { hex: G.prvKeyHex } }, { tag: ["a0", true, { oid: { name: G.curveName } }] }, { tag: ["a1", true, { bitstr: { hex: "00" + G.pubKeyHex } }] }] });return s;
  }function x(s) {
    var G = l({ seq: [{ "int": 0 }, { "int": { bigint: s.p } }, { "int": { bigint: s.q } }, { "int": { bigint: s.g } }, { "int": { bigint: s.y } }, { "int": { bigint: s.x } }] });return G;
  }if ((n !== undefined && b instanceof n || u !== undefined && b instanceof u || r !== undefined && b instanceof r) && b.isPublic == true && (D === undefined || D == "PKCS8PUB")) {
    var E = new C(b);var w = E.getEncodedHex();return hextopem(w, "PUBLIC KEY");
  }if (D == "PKCS1PRV" && n !== undefined && b instanceof n && (y === undefined || y == null) && b.isPrivate == true) {
    var E = A(b);var w = E.getEncodedHex();return hextopem(w, "RSA PRIVATE KEY");
  }if (D == "PKCS1PRV" && r !== undefined && b instanceof r && (y === undefined || y == null) && b.isPrivate == true) {
    var i = new z({ name: b.curveName });var v = i.getEncodedHex();var h = B(b);var t = h.getEncodedHex();var p = "";p += hextopem(v, "EC PARAMETERS");p += hextopem(t, "EC PRIVATE KEY");return p;
  }if (D == "PKCS1PRV" && u !== undefined && b instanceof u && (y === undefined || y == null) && b.isPrivate == true) {
    var E = x(b);var w = E.getEncodedHex();return hextopem(w, "DSA PRIVATE KEY");
  }if (D == "PKCS5PRV" && n !== undefined && b instanceof n && y !== undefined && y != null && b.isPrivate == true) {
    var E = A(b);var w = E.getEncodedHex();if (m === undefined) {
      m = "DES-EDE3-CBC";
    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA", w, y, m, j);
  }if (D == "PKCS5PRV" && r !== undefined && b instanceof r && y !== undefined && y != null && b.isPrivate == true) {
    var E = B(b);var w = E.getEncodedHex();if (m === undefined) {
      m = "DES-EDE3-CBC";
    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("EC", w, y, m, j);
  }if (D == "PKCS5PRV" && u !== undefined && b instanceof u && y !== undefined && y != null && b.isPrivate == true) {
    var E = x(b);var w = E.getEncodedHex();if (m === undefined) {
      m = "DES-EDE3-CBC";
    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA", w, y, m, j);
  }var o = function o(G, s) {
    var I = c(G, s);var H = new l({ seq: [{ seq: [{ oid: { name: "pkcs5PBES2" } }, { seq: [{ seq: [{ oid: { name: "pkcs5PBKDF2" } }, { seq: [{ octstr: { hex: I.pbkdf2Salt } }, { "int": I.pbkdf2Iter }] }] }, { seq: [{ oid: { name: "des-EDE3-CBC" } }, { octstr: { hex: I.encryptionSchemeIV } }] }] }] }, { octstr: { hex: I.ciphertext } }] });return H.getEncodedHex();
  };var c = function c(N, O) {
    var H = 100;var M = CryptoJS.lib.WordArray.random(8);var L = "DES-EDE3-CBC";var s = CryptoJS.lib.WordArray.random(8);var I = CryptoJS.PBKDF2(O, M, { keySize: 192 / 32, iterations: H });var J = CryptoJS.enc.Hex.parse(N);var K = CryptoJS.TripleDES.encrypt(J, I, { iv: s }) + "";var G = {};G.ciphertext = K;G.pbkdf2Salt = CryptoJS.enc.Hex.stringify(M);G.pbkdf2Iter = H;G.encryptionSchemeAlg = L;G.encryptionSchemeIV = CryptoJS.enc.Hex.stringify(s);return G;
  };if (D == "PKCS8PRV" && n != undefined && b instanceof n && b.isPrivate == true) {
    var g = A(b);var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "rsaEncryption" } }, { "null": true }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
      return hextopem(w, "PRIVATE KEY");
    } else {
      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
    }
  }if (D == "PKCS8PRV" && r !== undefined && b instanceof r && b.isPrivate == true) {
    var g = new l({ seq: [{ "int": 1 }, { octstr: { hex: b.prvKeyHex } }, { tag: ["a1", true, { bitstr: { hex: "00" + b.pubKeyHex } }] }] });var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "ecPublicKey" } }, { oid: { name: b.curveName } }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
      return hextopem(w, "PRIVATE KEY");
    } else {
      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
    }
  }if (D == "PKCS8PRV" && u !== undefined && b instanceof u && b.isPrivate == true) {
    var g = new f({ bigint: b.x });var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "dsa" } }, { seq: [{ "int": { bigint: b.p } }, { "int": { bigint: b.q } }, { "int": { bigint: b.g } }] }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
      return hextopem(w, "PRIVATE KEY");
    } else {
      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
    }
  }throw "unsupported object nor format";
};KEYUTIL.getKeyFromCSRPEM = function (b) {
  var a = pemtohex(b, "CERTIFICATE REQUEST");var c = KEYUTIL.getKeyFromCSRHex(a);return c;
};KEYUTIL.getKeyFromCSRHex = function (a) {
  var c = KEYUTIL.parseCSRHex(a);var b = KEYUTIL.getKey(c.p8pubkeyhex, null, "pkcs8pub");return b;
};KEYUTIL.parseCSRHex = function (d) {
  var i = ASN1HEX;var f = i.getChildIdx;var c = i.getTLV;var b = {};var g = d;if (g.substr(0, 2) != "30") {
    throw "malformed CSR(code:001)";
  }var e = f(g, 0);if (e.length < 1) {
    throw "malformed CSR(code:002)";
  }if (g.substr(e[0], 2) != "30") {
    throw "malformed CSR(code:003)";
  }var a = f(g, e[0]);if (a.length < 3) {
    throw "malformed CSR(code:004)";
  }b.p8pubkeyhex = c(g, a[2]);return b;
};KEYUTIL.getJWKFromKey = function (d) {
  var b = {};if (d instanceof RSAKey && d.isPrivate) {
    b.kty = "RSA";b.n = hextob64u(d.n.toString(16));b.e = hextob64u(d.e.toString(16));b.d = hextob64u(d.d.toString(16));b.p = hextob64u(d.p.toString(16));b.q = hextob64u(d.q.toString(16));b.dp = hextob64u(d.dmp1.toString(16));b.dq = hextob64u(d.dmq1.toString(16));b.qi = hextob64u(d.coeff.toString(16));return b;
  } else {
    if (d instanceof RSAKey && d.isPublic) {
      b.kty = "RSA";b.n = hextob64u(d.n.toString(16));b.e = hextob64u(d.e.toString(16));return b;
    } else {
      if (d instanceof KJUR.crypto.ECDSA && d.isPrivate) {
        var a = d.getShortNISTPCurveName();if (a !== "P-256" && a !== "P-384") {
          throw "unsupported curve name for JWT: " + a;
        }var c = d.getPublicKeyXYHex();b.kty = "EC";b.crv = a;b.x = hextob64u(c.x);b.y = hextob64u(c.y);b.d = hextob64u(d.prvKeyHex);return b;
      } else {
        if (d instanceof KJUR.crypto.ECDSA && d.isPublic) {
          var a = d.getShortNISTPCurveName();if (a !== "P-256" && a !== "P-384") {
            throw "unsupported curve name for JWT: " + a;
          }var c = d.getPublicKeyXYHex();b.kty = "EC";b.crv = a;b.x = hextob64u(c.x);b.y = hextob64u(c.y);return b;
        }
      }
    }
  }throw "not supported key object";
};
RSAKey.getPosArrayOfChildrenFromHex = function (a) {
  return ASN1HEX.getChildIdx(a, 0);
};RSAKey.getHexValueArrayOfChildrenFromHex = function (f) {
  var n = ASN1HEX;var i = n.getV;var k = RSAKey.getPosArrayOfChildrenFromHex(f);var e = i(f, k[0]);var j = i(f, k[1]);var b = i(f, k[2]);var c = i(f, k[3]);var h = i(f, k[4]);var g = i(f, k[5]);var m = i(f, k[6]);var l = i(f, k[7]);var d = i(f, k[8]);var k = new Array();k.push(e, j, b, c, h, g, m, l, d);return k;
};RSAKey.prototype.readPrivateKeyFromPEMString = function (d) {
  var c = pemtohex(d);var b = RSAKey.getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]);
};RSAKey.prototype.readPKCS5PrvKeyHex = function (c) {
  var b = RSAKey.getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]);
};RSAKey.prototype.readPKCS8PrvKeyHex = function (e) {
  var c, j, l, b, a, f, d, k;var m = ASN1HEX;var g = m.getVbyList;if (m.isASN1HEX(e) === false) {
    throw "not ASN.1 hex string";
  }try {
    c = g(e, 0, [2, 0, 1], "02");j = g(e, 0, [2, 0, 2], "02");l = g(e, 0, [2, 0, 3], "02");b = g(e, 0, [2, 0, 4], "02");a = g(e, 0, [2, 0, 5], "02");f = g(e, 0, [2, 0, 6], "02");d = g(e, 0, [2, 0, 7], "02");k = g(e, 0, [2, 0, 8], "02");
  } catch (i) {
    throw "malformed PKCS#8 plain RSA private key";
  }this.setPrivateEx(c, j, l, b, a, f, d, k);
};RSAKey.prototype.readPKCS5PubKeyHex = function (c) {
  var e = ASN1HEX;var b = e.getV;if (e.isASN1HEX(c) === false) {
    throw "keyHex is not ASN.1 hex string";
  }var a = e.getChildIdx(c, 0);if (a.length !== 2 || c.substr(a[0], 2) !== "02" || c.substr(a[1], 2) !== "02") {
    throw "wrong hex for PKCS#5 public key";
  }var f = b(c, a[0]);var d = b(c, a[1]);this.setPublic(f, d);
};RSAKey.prototype.readPKCS8PubKeyHex = function (b) {
  var c = ASN1HEX;if (c.isASN1HEX(b) === false) {
    throw "not ASN.1 hex string";
  }if (c.getTLVbyList(b, 0, [0, 0]) !== "06092a864886f70d010101") {
    throw "not PKCS8 RSA public key";
  }var a = c.getTLVbyList(b, 0, [1, 0]);this.readPKCS5PubKeyHex(a);
};RSAKey.prototype.readCertPubKeyHex = function (b, d) {
  var a, c;a = new X509();a.readCertHex(b);c = a.getPublicKeyHex();this.readPKCS8PubKeyHex(c);
};
var _RE_HEXDECONLY = new RegExp("");_RE_HEXDECONLY.compile("[^0-9a-f]", "gi");function _rsasign_getHexPaddedDigestInfoForString(d, e, a) {
  var b = function b(f) {
    return KJUR.crypto.Util.hashString(f, a);
  };var c = b(d);return KJUR.crypto.Util.getPaddedDigestInfoHex(c, a, e);
}function _zeroPaddingOfSignature(e, d) {
  var c = "";var a = d / 4 - e.length;for (var b = 0; b < a; b++) {
    c = c + "0";
  }return c + e;
}RSAKey.prototype.sign = function (d, a) {
  var b = function b(e) {
    return KJUR.crypto.Util.hashString(e, a);
  };var c = b(d);return this.signWithMessageHash(c, a);
};RSAKey.prototype.signWithMessageHash = function (e, c) {
  var f = KJUR.crypto.Util.getPaddedDigestInfoHex(e, c, this.n.bitLength());var b = parseBigInt(f, 16);var d = this.doPrivate(b);var a = d.toString(16);return _zeroPaddingOfSignature(a, this.n.bitLength());
};function pss_mgf1_str(c, a, e) {
  var b = "",
      d = 0;while (b.length < a) {
    b += hextorstr(e(rstrtohex(c + String.fromCharCode.apply(String, [(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255]))));d += 1;
  }return b;
}RSAKey.prototype.signPSS = function (e, a, d) {
  var c = function c(f) {
    return KJUR.crypto.Util.hashHex(f, a);
  };var b = c(rstrtohex(e));if (d === undefined) {
    d = -1;
  }return this.signWithMessageHashPSS(b, a, d);
};RSAKey.prototype.signWithMessageHashPSS = function (l, a, k) {
  var b = hextorstr(l);var g = b.length;var m = this.n.bitLength() - 1;var c = Math.ceil(m / 8);var d;var o = function o(i) {
    return KJUR.crypto.Util.hashHex(i, a);
  };if (k === -1 || k === undefined) {
    k = g;
  } else {
    if (k === -2) {
      k = c - g - 2;
    } else {
      if (k < -2) {
        throw "invalid salt length";
      }
    }
  }if (c < g + k + 2) {
    throw "data too long";
  }var f = "";if (k > 0) {
    f = new Array(k);new SecureRandom().nextBytes(f);f = String.fromCharCode.apply(String, f);
  }var n = hextorstr(o(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00" + b + f)));var j = [];for (d = 0; d < c - k - g - 2; d += 1) {
    j[d] = 0;
  }var e = String.fromCharCode.apply(String, j) + "\x01" + f;var h = pss_mgf1_str(n, e.length, o);var q = [];for (d = 0; d < e.length; d += 1) {
    q[d] = e.charCodeAt(d) ^ h.charCodeAt(d);
  }var p = 65280 >> 8 * c - m & 255;q[0] &= ~p;for (d = 0; d < g; d++) {
    q.push(n.charCodeAt(d));
  }q.push(188);return _zeroPaddingOfSignature(this.doPrivate(new BigInteger(q)).toString(16), this.n.bitLength());
};function _rsasign_getDecryptSignatureBI(a, d, c) {
  var b = new RSAKey();b.setPublic(d, c);var e = b.doPublic(a);return e;
}function _rsasign_getHexDigestInfoFromSig(a, c, b) {
  var e = _rsasign_getDecryptSignatureBI(a, c, b);var d = e.toString(16).replace(/^1f+00/, "");return d;
}function _rsasign_getAlgNameAndHashFromHexDisgestInfo(f) {
  for (var e in KJUR.crypto.Util.DIGESTINFOHEAD) {
    var d = KJUR.crypto.Util.DIGESTINFOHEAD[e];var b = d.length;if (f.substring(0, b) == d) {
      var c = [e, f.substring(b)];return c;
    }
  }return [];
}RSAKey.prototype.verify = function (f, j) {
  j = j.replace(_RE_HEXDECONLY, "");j = j.replace(/[ \n]+/g, "");var b = parseBigInt(j, 16);if (b.bitLength() > this.n.bitLength()) {
    return 0;
  }var i = this.doPublic(b);var e = i.toString(16).replace(/^1f+00/, "");var g = _rsasign_getAlgNameAndHashFromHexDisgestInfo(e);if (g.length == 0) {
    return false;
  }var d = g[0];var h = g[1];var a = function a(k) {
    return KJUR.crypto.Util.hashString(k, d);
  };var c = a(f);return h == c;
};RSAKey.prototype.verifyWithMessageHash = function (e, a) {
  a = a.replace(_RE_HEXDECONLY, "");a = a.replace(/[ \n]+/g, "");var b = parseBigInt(a, 16);if (b.bitLength() > this.n.bitLength()) {
    return 0;
  }var h = this.doPublic(b);var g = h.toString(16).replace(/^1f+00/, "");var c = _rsasign_getAlgNameAndHashFromHexDisgestInfo(g);if (c.length == 0) {
    return false;
  }var d = c[0];var f = c[1];return f == e;
};RSAKey.prototype.verifyPSS = function (c, b, a, f) {
  var e = function e(g) {
    return KJUR.crypto.Util.hashHex(g, a);
  };var d = e(rstrtohex(c));if (f === undefined) {
    f = -1;
  }return this.verifyWithMessageHashPSS(d, b, a, f);
};RSAKey.prototype.verifyWithMessageHashPSS = function (f, s, l, c) {
  var k = new BigInteger(s, 16);if (k.bitLength() > this.n.bitLength()) {
    return false;
  }var r = function r(i) {
    return KJUR.crypto.Util.hashHex(i, l);
  };var j = hextorstr(f);var h = j.length;var g = this.n.bitLength() - 1;var m = Math.ceil(g / 8);var q;if (c === -1 || c === undefined) {
    c = h;
  } else {
    if (c === -2) {
      c = m - h - 2;
    } else {
      if (c < -2) {
        throw "invalid salt length";
      }
    }
  }if (m < h + c + 2) {
    throw "data too long";
  }var a = this.doPublic(k).toByteArray();for (q = 0; q < a.length; q += 1) {
    a[q] &= 255;
  }while (a.length < m) {
    a.unshift(0);
  }if (a[m - 1] !== 188) {
    throw "encoded message does not end in 0xbc";
  }a = String.fromCharCode.apply(String, a);var d = a.substr(0, m - h - 1);var e = a.substr(d.length, h);var p = 65280 >> 8 * m - g & 255;if ((d.charCodeAt(0) & p) !== 0) {
    throw "bits beyond keysize not zero";
  }var n = pss_mgf1_str(e, d.length, r);var o = [];for (q = 0; q < d.length; q += 1) {
    o[q] = d.charCodeAt(q) ^ n.charCodeAt(q);
  }o[0] &= ~p;var b = m - h - c - 2;for (q = 0; q < b; q += 1) {
    if (o[q] !== 0) {
      throw "leftmost octets not zero";
    }
  }if (o[b] !== 1) {
    throw "0x01 marker not found";
  }return e === hextorstr(r(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00" + j + String.fromCharCode.apply(String, o.slice(-c)))));
};RSAKey.SALT_LEN_HLEN = -1;RSAKey.SALT_LEN_MAX = -2;RSAKey.SALT_LEN_RECOVER = -2;
function X509() {
  var k = ASN1HEX,
      j = k.getChildIdx,
      h = k.getV,
      b = k.getTLV,
      f = k.getVbyList,
      c = k.getTLVbyList,
      g = k.getIdxbyList,
      d = k.getVidx,
      i = k.oidname,
      a = X509,
      e = pemtohex;this.hex = null;this.version = 0;this.foffset = 0;this.aExtInfo = null;this.getVersion = function () {
    if (this.hex === null || this.version !== 0) {
      return this.version;
    }if (c(this.hex, 0, [0, 0]) !== "a003020102") {
      this.version = 1;this.foffset = -1;return 1;
    }this.version = 3;return 3;
  };this.getSerialNumberHex = function () {
    return f(this.hex, 0, [0, 1 + this.foffset], "02");
  };this.getSignatureAlgorithmField = function () {
    return i(f(this.hex, 0, [0, 2 + this.foffset, 0], "06"));
  };this.getIssuerHex = function () {
    return c(this.hex, 0, [0, 3 + this.foffset], "30");
  };this.getIssuerString = function () {
    return a.hex2dn(this.getIssuerHex());
  };this.getSubjectHex = function () {
    return c(this.hex, 0, [0, 5 + this.foffset], "30");
  };this.getSubjectString = function () {
    return a.hex2dn(this.getSubjectHex());
  };this.getNotBefore = function () {
    var l = f(this.hex, 0, [0, 4 + this.foffset, 0]);l = l.replace(/(..)/g, "%$1");l = decodeURIComponent(l);return l;
  };this.getNotAfter = function () {
    var l = f(this.hex, 0, [0, 4 + this.foffset, 1]);l = l.replace(/(..)/g, "%$1");l = decodeURIComponent(l);return l;
  };this.getPublicKeyHex = function () {
    return k.getTLVbyList(this.hex, 0, [0, 6 + this.foffset], "30");
  };this.getPublicKeyIdx = function () {
    return g(this.hex, 0, [0, 6 + this.foffset], "30");
  };this.getPublicKeyContentIdx = function () {
    var l = this.getPublicKeyIdx();return g(this.hex, l, [1, 0], "30");
  };this.getPublicKey = function () {
    return KEYUTIL.getKey(this.getPublicKeyHex(), null, "pkcs8pub");
  };this.getSignatureAlgorithmName = function () {
    return i(f(this.hex, 0, [1, 0], "06"));
  };this.getSignatureValueHex = function () {
    return f(this.hex, 0, [2], "03", true);
  };this.verifySignature = function (n) {
    var o = this.getSignatureAlgorithmName();var l = this.getSignatureValueHex();var m = c(this.hex, 0, [0], "30");var p = new KJUR.crypto.Signature({ alg: o });p.init(n);p.updateHex(m);return p.verify(l);
  };this.parseExt = function () {
    if (this.version !== 3) {
      return -1;
    }var p = g(this.hex, 0, [0, 7, 0], "30");var m = j(this.hex, p);this.aExtInfo = new Array();for (var n = 0; n < m.length; n++) {
      var q = {};q.critical = false;var l = j(this.hex, m[n]);var r = 0;if (l.length === 3) {
        q.critical = true;r = 1;
      }q.oid = k.hextooidstr(f(this.hex, m[n], [0], "06"));var o = g(this.hex, m[n], [1 + r]);q.vidx = d(this.hex, o);this.aExtInfo.push(q);
    }
  };this.getExtInfo = function (n) {
    var l = this.aExtInfo;var o = n;if (!n.match(/^[0-9.]+$/)) {
      o = KJUR.asn1.x509.OID.name2oid(n);
    }if (o === "") {
      return undefined;
    }for (var m = 0; m < l.length; m++) {
      if (l[m].oid === o) {
        return l[m];
      }
    }return undefined;
  };this.getExtBasicConstraints = function () {
    var n = this.getExtInfo("basicConstraints");if (n === undefined) {
      return n;
    }var l = h(this.hex, n.vidx);if (l === "") {
      return {};
    }if (l === "0101ff") {
      return { cA: true };
    }if (l.substr(0, 8) === "0101ff02") {
      var o = h(l, 6);var m = parseInt(o, 16);return { cA: true, pathLen: m };
    }throw "basicConstraints parse error";
  };this.getExtKeyUsageBin = function () {
    var o = this.getExtInfo("keyUsage");if (o === undefined) {
      return "";
    }var m = h(this.hex, o.vidx);if (m.length % 2 != 0 || m.length <= 2) {
      throw "malformed key usage value";
    }var l = parseInt(m.substr(0, 2));var n = parseInt(m.substr(2), 16).toString(2);return n.substr(0, n.length - l);
  };this.getExtKeyUsageString = function () {
    var n = this.getExtKeyUsageBin();var l = new Array();for (var m = 0; m < n.length; m++) {
      if (n.substr(m, 1) == "1") {
        l.push(X509.KEYUSAGE_NAME[m]);
      }
    }return l.join(",");
  };this.getExtSubjectKeyIdentifier = function () {
    var l = this.getExtInfo("subjectKeyIdentifier");if (l === undefined) {
      return l;
    }return h(this.hex, l.vidx);
  };this.getExtAuthorityKeyIdentifier = function () {
    var p = this.getExtInfo("authorityKeyIdentifier");if (p === undefined) {
      return p;
    }var l = {};var o = b(this.hex, p.vidx);var m = j(o, 0);for (var n = 0; n < m.length; n++) {
      if (o.substr(m[n], 2) === "80") {
        l.kid = h(o, m[n]);
      }
    }return l;
  };this.getExtExtKeyUsageName = function () {
    var p = this.getExtInfo("extKeyUsage");if (p === undefined) {
      return p;
    }var l = new Array();var o = b(this.hex, p.vidx);if (o === "") {
      return l;
    }var m = j(o, 0);for (var n = 0; n < m.length; n++) {
      l.push(i(h(o, m[n])));
    }return l;
  };this.getExtSubjectAltName = function () {
    var m = this.getExtSubjectAltName2();var l = new Array();for (var n = 0; n < m.length; n++) {
      if (m[n][0] === "DNS") {
        l.push(m[n][1]);
      }
    }return l;
  };this.getExtSubjectAltName2 = function () {
    var p, s, r;var q = this.getExtInfo("subjectAltName");if (q === undefined) {
      return q;
    }var l = new Array();var o = b(this.hex, q.vidx);var m = j(o, 0);for (var n = 0; n < m.length; n++) {
      r = o.substr(m[n], 2);p = h(o, m[n]);if (r === "81") {
        s = hextoutf8(p);l.push(["MAIL", s]);
      }if (r === "82") {
        s = hextoutf8(p);l.push(["DNS", s]);
      }if (r === "84") {
        s = X509.hex2dn(p, 0);l.push(["DN", s]);
      }if (r === "86") {
        s = hextoutf8(p);l.push(["URI", s]);
      }if (r === "87") {
        s = hextoip(p);l.push(["IP", s]);
      }
    }return l;
  };this.getExtCRLDistributionPointsURI = function () {
    var q = this.getExtInfo("cRLDistributionPoints");if (q === undefined) {
      return q;
    }var l = new Array();var m = j(this.hex, q.vidx);for (var o = 0; o < m.length; o++) {
      try {
        var r = f(this.hex, m[o], [0, 0, 0], "86");var p = hextoutf8(r);l.push(p);
      } catch (n) {}
    }return l;
  };this.getExtAIAInfo = function () {
    var p = this.getExtInfo("authorityInfoAccess");if (p === undefined) {
      return p;
    }var l = { ocsp: [], caissuer: [] };var m = j(this.hex, p.vidx);for (var n = 0; n < m.length; n++) {
      var q = f(this.hex, m[n], [0], "06");var o = f(this.hex, m[n], [1], "86");if (q === "2b06010505073001") {
        l.ocsp.push(hextoutf8(o));
      }if (q === "2b06010505073002") {
        l.caissuer.push(hextoutf8(o));
      }
    }return l;
  };this.getExtCertificatePolicies = function () {
    var o = this.getExtInfo("certificatePolicies");if (o === undefined) {
      return o;
    }var l = b(this.hex, o.vidx);var u = [];var s = j(l, 0);for (var r = 0; r < s.length; r++) {
      var t = {};var n = j(l, s[r]);t.id = i(h(l, n[0]));if (n.length === 2) {
        var m = j(l, n[1]);for (var q = 0; q < m.length; q++) {
          var p = f(l, m[q], [0], "06");if (p === "2b06010505070201") {
            t.cps = hextoutf8(f(l, m[q], [1]));
          } else {
            if (p === "2b06010505070202") {
              t.unotice = hextoutf8(f(l, m[q], [1, 0]));
            }
          }
        }
      }u.push(t);
    }return u;
  };this.readCertPEM = function (l) {
    this.readCertHex(e(l));
  };this.readCertHex = function (l) {
    this.hex = l;this.getVersion();try {
      g(this.hex, 0, [0, 7], "a3");this.parseExt();
    } catch (m) {}
  };this.getInfo = function () {
    var m = X509;var B, u, z;B = "Basic Fields\n";B += "  serial number: " + this.getSerialNumberHex() + "\n";B += "  signature algorithm: " + this.getSignatureAlgorithmField() + "\n";B += "  issuer: " + this.getIssuerString() + "\n";B += "  notBefore: " + this.getNotBefore() + "\n";B += "  notAfter: " + this.getNotAfter() + "\n";B += "  subject: " + this.getSubjectString() + "\n";B += "  subject public key info: \n";u = this.getPublicKey();B += "    key algorithm: " + u.type + "\n";if (u.type === "RSA") {
      B += "    n=" + hextoposhex(u.n.toString(16)).substr(0, 16) + "...\n";B += "    e=" + hextoposhex(u.e.toString(16)) + "\n";
    }z = this.aExtInfo;if (z !== undefined && z !== null) {
      B += "X509v3 Extensions:\n";for (var r = 0; r < z.length; r++) {
        var n = z[r];var A = KJUR.asn1.x509.OID.oid2name(n.oid);if (A === "") {
          A = n.oid;
        }var x = "";if (n.critical === true) {
          x = "CRITICAL";
        }B += "  " + A + " " + x + ":\n";if (A === "basicConstraints") {
          var v = this.getExtBasicConstraints();if (v.cA === undefined) {
            B += "    {}\n";
          } else {
            B += "    cA=true";if (v.pathLen !== undefined) {
              B += ", pathLen=" + v.pathLen;
            }B += "\n";
          }
        } else {
          if (A === "keyUsage") {
            B += "    " + this.getExtKeyUsageString() + "\n";
          } else {
            if (A === "subjectKeyIdentifier") {
              B += "    " + this.getExtSubjectKeyIdentifier() + "\n";
            } else {
              if (A === "authorityKeyIdentifier") {
                var l = this.getExtAuthorityKeyIdentifier();if (l.kid !== undefined) {
                  B += "    kid=" + l.kid + "\n";
                }
              } else {
                if (A === "extKeyUsage") {
                  var w = this.getExtExtKeyUsageName();B += "    " + w.join(", ") + "\n";
                } else {
                  if (A === "subjectAltName") {
                    var t = this.getExtSubjectAltName2();B += "    " + t + "\n";
                  } else {
                    if (A === "cRLDistributionPoints") {
                      var y = this.getExtCRLDistributionPointsURI();B += "    " + y + "\n";
                    } else {
                      if (A === "authorityInfoAccess") {
                        var p = this.getExtAIAInfo();if (p.ocsp !== undefined) {
                          B += "    ocsp: " + p.ocsp.join(",") + "\n";
                        }if (p.caissuer !== undefined) {
                          B += "    caissuer: " + p.caissuer.join(",") + "\n";
                        }
                      } else {
                        if (A === "certificatePolicies") {
                          var o = this.getExtCertificatePolicies();for (var q = 0; q < o.length; q++) {
                            if (o[q].id !== undefined) {
                              B += "    policy oid: " + o[q].id + "\n";
                            }if (o[q].cps !== undefined) {
                              B += "    cps: " + o[q].cps + "\n";
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }B += "signature algorithm: " + this.getSignatureAlgorithmName() + "\n";B += "signature: " + this.getSignatureValueHex().substr(0, 16) + "...\n";return B;
  };
}X509.hex2dn = function (f, b) {
  if (b === undefined) {
    b = 0;
  }if (f.substr(b, 2) !== "30") {
    throw "malformed DN";
  }var c = new Array();var d = ASN1HEX.getChildIdx(f, b);for (var e = 0; e < d.length; e++) {
    c.push(X509.hex2rdn(f, d[e]));
  }c = c.map(function (a) {
    return a.replace("/", "\\/");
  });return "/" + c.join("/");
};X509.hex2rdn = function (f, b) {
  if (b === undefined) {
    b = 0;
  }if (f.substr(b, 2) !== "31") {
    throw "malformed RDN";
  }var c = new Array();var d = ASN1HEX.getChildIdx(f, b);for (var e = 0; e < d.length; e++) {
    c.push(X509.hex2attrTypeValue(f, d[e]));
  }c = c.map(function (a) {
    return a.replace("+", "\\+");
  });return c.join("+");
};X509.hex2attrTypeValue = function (d, i) {
  var j = ASN1HEX;var h = j.getV;if (i === undefined) {
    i = 0;
  }if (d.substr(i, 2) !== "30") {
    throw "malformed attribute type and value";
  }var g = j.getChildIdx(d, i);if (g.length !== 2 || d.substr(g[0], 2) !== "06") {
    "malformed attribute type and value";
  }var b = h(d, g[0]);var f = KJUR.asn1.ASN1Util.oidHexToInt(b);var e = KJUR.asn1.x509.OID.oid2atype(f);var a = h(d, g[1]);var c = hextorstr(a);return e + "=" + c;
};X509.getPublicKeyFromCertHex = function (b) {
  var a = new X509();a.readCertHex(b);return a.getPublicKey();
};X509.getPublicKeyFromCertPEM = function (b) {
  var a = new X509();a.readCertPEM(b);return a.getPublicKey();
};X509.getPublicKeyInfoPropOfCertPEM = function (c) {
  var e = ASN1HEX;var g = e.getVbyList;var b = {};var a, f, d;b.algparam = null;a = new X509();a.readCertPEM(c);f = a.getPublicKeyHex();b.keyhex = g(f, 0, [1], "03").substr(2);b.algoid = g(f, 0, [0, 0], "06");if (b.algoid === "2a8648ce3d0201") {
    b.algparam = g(f, 0, [0, 1], "06");
  }return b;
};X509.KEYUSAGE_NAME = ["digitalSignature", "nonRepudiation", "keyEncipherment", "dataEncipherment", "keyAgreement", "keyCertSign", "cRLSign", "encipherOnly", "decipherOnly"];
if (typeof KJUR == "undefined" || !KJUR) {
  KJUR = {};
}if (typeof KJUR.jws == "undefined" || !KJUR.jws) {
  KJUR.jws = {};
}KJUR.jws.JWS = function () {
  var b = KJUR,
      a = b.jws.JWS,
      c = a.isSafeJSONString;this.parseJWS = function (g, j) {
    if (this.parsedJWS !== undefined && (j || this.parsedJWS.sigvalH !== undefined)) {
      return;
    }var i = g.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);if (i == null) {
      throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
    }var k = i[1];var e = i[2];var l = i[3];var n = k + "." + e;this.parsedJWS = {};this.parsedJWS.headB64U = k;this.parsedJWS.payloadB64U = e;this.parsedJWS.sigvalB64U = l;this.parsedJWS.si = n;if (!j) {
      var h = b64utohex(l);var f = parseBigInt(h, 16);this.parsedJWS.sigvalH = h;this.parsedJWS.sigvalBI = f;
    }var d = b64utoutf8(k);var m = b64utoutf8(e);this.parsedJWS.headS = d;this.parsedJWS.payloadS = m;if (!c(d, this.parsedJWS, "headP")) {
      throw "malformed JSON string for JWS Head: " + d;
    }
  };
};KJUR.jws.JWS.sign = function (i, v, y, z, a) {
  var w = KJUR,
      m = w.jws,
      q = m.JWS,
      g = q.readSafeJSONString,
      p = q.isSafeJSONString,
      d = w.crypto,
      k = d.ECDSA,
      o = d.Mac,
      c = d.Signature,
      t = JSON;var s, j, n;if (typeof v != "string" && (typeof v === "undefined" ? "undefined" : _typeof(v)) != "object") {
    throw "spHeader must be JSON string or object: " + v;
  }if ((typeof v === "undefined" ? "undefined" : _typeof(v)) == "object") {
    j = v;s = t.stringify(j);
  }if (typeof v == "string") {
    s = v;if (!p(s)) {
      throw "JWS Head is not safe JSON string: " + s;
    }j = g(s);
  }n = y;if ((typeof y === "undefined" ? "undefined" : _typeof(y)) == "object") {
    n = t.stringify(y);
  }if ((i == "" || i == null) && j.alg !== undefined) {
    i = j.alg;
  }if (i != "" && i != null && j.alg === undefined) {
    j.alg = i;s = t.stringify(j);
  }if (i !== j.alg) {
    throw "alg and sHeader.alg doesn't match: " + i + "!=" + j.alg;
  }var r = null;if (q.jwsalg2sigalg[i] === undefined) {
    throw "unsupported alg name: " + i;
  } else {
    r = q.jwsalg2sigalg[i];
  }var e = utf8tob64u(s);var l = utf8tob64u(n);var b = e + "." + l;var x = "";if (r.substr(0, 4) == "Hmac") {
    if (z === undefined) {
      throw "mac key shall be specified for HS* alg";
    }var h = new o({ alg: r, prov: "cryptojs", pass: z });h.updateString(b);x = h.doFinal();
  } else {
    if (r.indexOf("withECDSA") != -1) {
      var f = new c({ alg: r });f.init(z, a);f.updateString(b);hASN1Sig = f.sign();x = KJUR.crypto.ECDSA.asn1SigToConcatSig(hASN1Sig);
    } else {
      if (r != "none") {
        var f = new c({ alg: r });f.init(z, a);f.updateString(b);x = f.sign();
      }
    }
  }var u = hextob64u(x);return b + "." + u;
};KJUR.jws.JWS.verify = function (w, B, n) {
  var x = KJUR,
      q = x.jws,
      t = q.JWS,
      i = t.readSafeJSONString,
      e = x.crypto,
      p = e.ECDSA,
      s = e.Mac,
      d = e.Signature,
      m;if ((typeof RSAKey === "undefined" ? "undefined" : _typeof(RSAKey)) !== undefined) {
    m = RSAKey;
  }var y = w.split(".");if (y.length !== 3) {
    return false;
  }var f = y[0];var r = y[1];var c = f + "." + r;var A = b64utohex(y[2]);var l = i(b64utoutf8(y[0]));var k = null;var z = null;if (l.alg === undefined) {
    throw "algorithm not specified in header";
  } else {
    k = l.alg;z = k.substr(0, 2);
  }if (n != null && Object.prototype.toString.call(n) === "[object Array]" && n.length > 0) {
    var b = ":" + n.join(":") + ":";if (b.indexOf(":" + k + ":") == -1) {
      throw "algorithm '" + k + "' not accepted in the list";
    }
  }if (k != "none" && B === null) {
    throw "key shall be specified to verify.";
  }if (typeof B == "string" && B.indexOf("-----BEGIN ") != -1) {
    B = KEYUTIL.getKey(B);
  }if (z == "RS" || z == "PS") {
    if (!(B instanceof m)) {
      throw "key shall be a RSAKey obj for RS* and PS* algs";
    }
  }if (z == "ES") {
    if (!(B instanceof p)) {
      throw "key shall be a ECDSA obj for ES* algs";
    }
  }if (k == "none") {}var u = null;if (t.jwsalg2sigalg[l.alg] === undefined) {
    throw "unsupported alg name: " + k;
  } else {
    u = t.jwsalg2sigalg[k];
  }if (u == "none") {
    throw "not supported";
  } else {
    if (u.substr(0, 4) == "Hmac") {
      var o = null;if (B === undefined) {
        throw "hexadecimal key shall be specified for HMAC";
      }var j = new s({ alg: u, pass: B });j.updateString(c);o = j.doFinal();return A == o;
    } else {
      if (u.indexOf("withECDSA") != -1) {
        var h = null;try {
          h = p.concatSigToASN1Sig(A);
        } catch (v) {
          return false;
        }var g = new d({ alg: u });g.init(B);g.updateString(c);return g.verify(h);
      } else {
        var g = new d({ alg: u });g.init(B);g.updateString(c);return g.verify(A);
      }
    }
  }
};KJUR.jws.JWS.parse = function (g) {
  var c = g.split(".");var b = {};var f, e, d;if (c.length != 2 && c.length != 3) {
    throw "malformed sJWS: wrong number of '.' splitted elements";
  }f = c[0];e = c[1];if (c.length == 3) {
    d = c[2];
  }b.headerObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(f));b.payloadObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(e));b.headerPP = JSON.stringify(b.headerObj, null, "  ");if (b.payloadObj == null) {
    b.payloadPP = b64utoutf8(e);
  } else {
    b.payloadPP = JSON.stringify(b.payloadObj, null, "  ");
  }if (d !== undefined) {
    b.sigHex = b64utohex(d);
  }return b;
};KJUR.jws.JWS.verifyJWT = function (e, l, r) {
  var d = KJUR,
      j = d.jws,
      o = j.JWS,
      n = o.readSafeJSONString,
      p = o.inArray,
      f = o.includedArray;var k = e.split(".");var c = k[0];var i = k[1];var q = c + "." + i;var m = b64utohex(k[2]);var h = n(b64utoutf8(c));var g = n(b64utoutf8(i));if (h.alg === undefined) {
    return false;
  }if (r.alg === undefined) {
    throw "acceptField.alg shall be specified";
  }if (!p(h.alg, r.alg)) {
    return false;
  }if (g.iss !== undefined && _typeof(r.iss) === "object") {
    if (!p(g.iss, r.iss)) {
      return false;
    }
  }if (g.sub !== undefined && _typeof(r.sub) === "object") {
    if (!p(g.sub, r.sub)) {
      return false;
    }
  }if (g.aud !== undefined && _typeof(r.aud) === "object") {
    if (typeof g.aud == "string") {
      if (!p(g.aud, r.aud)) {
        return false;
      }
    } else {
      if (_typeof(g.aud) == "object") {
        if (!f(g.aud, r.aud)) {
          return false;
        }
      }
    }
  }var b = j.IntDate.getNow();if (r.verifyAt !== undefined && typeof r.verifyAt === "number") {
    b = r.verifyAt;
  }if (r.gracePeriod === undefined || typeof r.gracePeriod !== "number") {
    r.gracePeriod = 0;
  }if (g.exp !== undefined && typeof g.exp == "number") {
    if (g.exp + r.gracePeriod < b) {
      return false;
    }
  }if (g.nbf !== undefined && typeof g.nbf == "number") {
    if (b < g.nbf - r.gracePeriod) {
      return false;
    }
  }if (g.iat !== undefined && typeof g.iat == "number") {
    if (b < g.iat - r.gracePeriod) {
      return false;
    }
  }if (g.jti !== undefined && r.jti !== undefined) {
    if (g.jti !== r.jti) {
      return false;
    }
  }if (!o.verify(e, l, r.alg)) {
    return false;
  }return true;
};KJUR.jws.JWS.includedArray = function (b, a) {
  var c = KJUR.jws.JWS.inArray;if (b === null) {
    return false;
  }if ((typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") {
    return false;
  }if (typeof b.length !== "number") {
    return false;
  }for (var d = 0; d < b.length; d++) {
    if (!c(b[d], a)) {
      return false;
    }
  }return true;
};KJUR.jws.JWS.inArray = function (d, b) {
  if (b === null) {
    return false;
  }if ((typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") {
    return false;
  }if (typeof b.length !== "number") {
    return false;
  }for (var c = 0; c < b.length; c++) {
    if (b[c] == d) {
      return true;
    }
  }return false;
};KJUR.jws.JWS.jwsalg2sigalg = { HS256: "HmacSHA256", HS384: "HmacSHA384", HS512: "HmacSHA512", RS256: "SHA256withRSA", RS384: "SHA384withRSA", RS512: "SHA512withRSA", ES256: "SHA256withECDSA", ES384: "SHA384withECDSA", PS256: "SHA256withRSAandMGF1", PS384: "SHA384withRSAandMGF1", PS512: "SHA512withRSAandMGF1", none: "none" };KJUR.jws.JWS.isSafeJSONString = function (c, b, d) {
  var e = null;try {
    e = jsonParse(c);if ((typeof e === "undefined" ? "undefined" : _typeof(e)) != "object") {
      return 0;
    }if (e.constructor === Array) {
      return 0;
    }if (b) {
      b[d] = e;
    }return 1;
  } catch (a) {
    return 0;
  }
};KJUR.jws.JWS.readSafeJSONString = function (b) {
  var c = null;try {
    c = jsonParse(b);if ((typeof c === "undefined" ? "undefined" : _typeof(c)) != "object") {
      return null;
    }if (c.constructor === Array) {
      return null;
    }return c;
  } catch (a) {
    return null;
  }
};KJUR.jws.JWS.getEncodedSignatureValueFromJWS = function (b) {
  var a = b.match(/^[^.]+\.[^.]+\.([^.]+)$/);if (a == null) {
    throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
  }return a[1];
};KJUR.jws.JWS.getJWKthumbprint = function (d) {
  if (d.kty !== "RSA" && d.kty !== "EC" && d.kty !== "oct") {
    throw "unsupported algorithm for JWK Thumprint";
  }var a = "{";if (d.kty === "RSA") {
    if (typeof d.n != "string" || typeof d.e != "string") {
      throw "wrong n and e value for RSA key";
    }a += '"e":"' + d.e + '",';a += '"kty":"' + d.kty + '",';a += '"n":"' + d.n + '"}';
  } else {
    if (d.kty === "EC") {
      if (typeof d.crv != "string" || typeof d.x != "string" || typeof d.y != "string") {
        throw "wrong crv, x and y value for EC key";
      }a += '"crv":"' + d.crv + '",';a += '"kty":"' + d.kty + '",';a += '"x":"' + d.x + '",';a += '"y":"' + d.y + '"}';
    } else {
      if (d.kty === "oct") {
        if (typeof d.k != "string") {
          throw "wrong k value for oct(symmetric) key";
        }a += '"kty":"' + d.kty + '",';a += '"k":"' + d.k + '"}';
      }
    }
  }var b = rstrtohex(a);var c = KJUR.crypto.Util.hashHex(b, "sha256");var e = hextob64u(c);return e;
};KJUR.jws.IntDate = {};KJUR.jws.IntDate.get = function (c) {
  var b = KJUR.jws.IntDate,
      d = b.getNow,
      a = b.getZulu;if (c == "now") {
    return d();
  } else {
    if (c == "now + 1hour") {
      return d() + 60 * 60;
    } else {
      if (c == "now + 1day") {
        return d() + 60 * 60 * 24;
      } else {
        if (c == "now + 1month") {
          return d() + 60 * 60 * 24 * 30;
        } else {
          if (c == "now + 1year") {
            return d() + 60 * 60 * 24 * 365;
          } else {
            if (c.match(/Z$/)) {
              return a(c);
            } else {
              if (c.match(/^[0-9]+$/)) {
                return parseInt(c);
              }
            }
          }
        }
      }
    }
  }throw "unsupported format: " + c;
};KJUR.jws.IntDate.getZulu = function (a) {
  return zulutosec(a);
};KJUR.jws.IntDate.getNow = function () {
  var a = ~~(new Date() / 1000);return a;
};KJUR.jws.IntDate.intDate2UTCString = function (a) {
  var b = new Date(a * 1000);return b.toUTCString();
};KJUR.jws.IntDate.intDate2Zulu = function (e) {
  var i = new Date(e * 1000),
      h = ("0000" + i.getUTCFullYear()).slice(-4),
      g = ("00" + (i.getUTCMonth() + 1)).slice(-2),
      b = ("00" + i.getUTCDate()).slice(-2),
      a = ("00" + i.getUTCHours()).slice(-2),
      c = ("00" + i.getUTCMinutes()).slice(-2),
      f = ("00" + i.getUTCSeconds()).slice(-2);return h + g + b + a + c + f + "Z";
};
exports.SecureRandom = SecureRandom;
exports.rng_seed_time = rng_seed_time;

exports.BigInteger = BigInteger;
exports.RSAKey = RSAKey;
exports.ECDSA = KJUR.crypto.ECDSA;
exports.DSA = KJUR.crypto.DSA;
exports.Signature = KJUR.crypto.Signature;
exports.MessageDigest = KJUR.crypto.MessageDigest;
exports.Mac = KJUR.crypto.Mac;
exports.Cipher = KJUR.crypto.Cipher;
exports.KEYUTIL = KEYUTIL;
exports.ASN1HEX = ASN1HEX;
exports.X509 = X509;
exports.CryptoJS = CryptoJS;

// ext/base64.js
exports.b64tohex = b64tohex;
exports.b64toBA = b64toBA;

// base64x.js
exports.stoBA = stoBA;
exports.BAtos = BAtos;
exports.BAtohex = BAtohex;
exports.stohex = stohex;
exports.stob64 = stob64;
exports.stob64u = stob64u;
exports.b64utos = b64utos;
exports.b64tob64u = b64tob64u;
exports.b64utob64 = b64utob64;
exports.hex2b64 = hex2b64;
exports.hextob64u = hextob64u;
exports.b64utohex = b64utohex;
exports.utf8tob64u = utf8tob64u;
exports.b64utoutf8 = b64utoutf8;
exports.utf8tob64 = utf8tob64;
exports.b64toutf8 = b64toutf8;
exports.utf8tohex = utf8tohex;
exports.hextoutf8 = hextoutf8;
exports.hextorstr = hextorstr;
exports.rstrtohex = rstrtohex;
exports.hextob64 = hextob64;
exports.hextob64nl = hextob64nl;
exports.b64nltohex = b64nltohex;
exports.hextopem = hextopem;
exports.pemtohex = pemtohex;
exports.hextoArrayBuffer = hextoArrayBuffer;
exports.ArrayBuffertohex = ArrayBuffertohex;
exports.zulutomsec = zulutomsec;
exports.zulutosec = zulutosec;
exports.zulutodate = zulutodate;
exports.datetozulu = datetozulu;
exports.uricmptohex = uricmptohex;
exports.hextouricmp = hextouricmp;
exports.ipv6tohex = ipv6tohex;
exports.hextoipv6 = hextoipv6;
exports.hextoip = hextoip;
exports.iptohex = iptohex;
exports.encodeURIComponentAll = encodeURIComponentAll;
exports.newline_toUnix = newline_toUnix;
exports.newline_toDos = newline_toDos;
exports.hextoposhex = hextoposhex;
exports.intarystrtohex = intarystrtohex;
exports.strdiffidx = strdiffidx;

// name spaces
exports.KJUR = KJUR;
exports.crypto = KJUR.crypto;
exports.asn1 = KJUR.asn1;
exports.jws = KJUR.jws;
exports.lang = KJUR.lang;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer))

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(26)
var ieee754 = __webpack_require__(27)
var isArray = __webpack_require__(28)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(25)))

/***/ }),
/* 25 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),
/* 27 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 28 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SigninRequest = undefined;

var _Log = __webpack_require__(0);

var _UrlUtility = __webpack_require__(3);

var _SigninState = __webpack_require__(10);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SigninRequest = exports.SigninRequest = function () {
    function SigninRequest(_ref) {
        var url = _ref.url,
            client_id = _ref.client_id,
            redirect_uri = _ref.redirect_uri,
            response_type = _ref.response_type,
            scope = _ref.scope,
            authority = _ref.authority,
            data = _ref.data,
            prompt = _ref.prompt,
            display = _ref.display,
            max_age = _ref.max_age,
            ui_locales = _ref.ui_locales,
            id_token_hint = _ref.id_token_hint,
            login_hint = _ref.login_hint,
            acr_values = _ref.acr_values,
            resource = _ref.resource,
            request = _ref.request,
            request_uri = _ref.request_uri,
            extraQueryParams = _ref.extraQueryParams;

        _classCallCheck(this, SigninRequest);

        if (!url) {
            _Log.Log.error("SigninRequest.ctor: No url passed");
            throw new Error("url");
        }
        if (!client_id) {
            _Log.Log.error("SigninRequest.ctor: No client_id passed");
            throw new Error("client_id");
        }
        if (!redirect_uri) {
            _Log.Log.error("SigninRequest.ctor: No redirect_uri passed");
            throw new Error("redirect_uri");
        }
        if (!response_type) {
            _Log.Log.error("SigninRequest.ctor: No response_type passed");
            throw new Error("response_type");
        }
        if (!scope) {
            _Log.Log.error("SigninRequest.ctor: No scope passed");
            throw new Error("scope");
        }
        if (!authority) {
            _Log.Log.error("SigninRequest.ctor: No authority passed");
            throw new Error("authority");
        }

        var oidc = SigninRequest.isOidc(response_type);
        this.state = new _SigninState.SigninState({ nonce: oidc, data: data, client_id: client_id, authority: authority });

        url = _UrlUtility.UrlUtility.addQueryParam(url, "client_id", client_id);
        url = _UrlUtility.UrlUtility.addQueryParam(url, "redirect_uri", redirect_uri);
        url = _UrlUtility.UrlUtility.addQueryParam(url, "response_type", response_type);
        url = _UrlUtility.UrlUtility.addQueryParam(url, "scope", scope);

        url = _UrlUtility.UrlUtility.addQueryParam(url, "state", this.state.id);
        if (oidc) {
            url = _UrlUtility.UrlUtility.addQueryParam(url, "nonce", this.state.nonce);
        }

        var optional = { prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values, resource: resource, request: request, request_uri: request_uri };
        for (var key in optional) {
            if (optional[key]) {
                url = _UrlUtility.UrlUtility.addQueryParam(url, key, optional[key]);
            }
        }

        for (var _key in extraQueryParams) {
            url = _UrlUtility.UrlUtility.addQueryParam(url, _key, extraQueryParams[_key]);
        }

        this.url = url;
    }

    SigninRequest.isOidc = function isOidc(response_type) {
        var result = response_type.split(/\s+/g).filter(function (item) {
            return item === "id_token";
        });
        return !!result[0];
    };

    SigninRequest.isOAuth = function isOAuth(response_type) {
        var result = response_type.split(/\s+/g).filter(function (item) {
            return item === "token";
        });
        return !!result[0];
    };

    return SigninRequest;
}();

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SigninResponse = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _UrlUtility = __webpack_require__(3);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OidcScope = "openid";

var SigninResponse = exports.SigninResponse = function () {
    function SigninResponse(url) {
        _classCallCheck(this, SigninResponse);

        var values = _UrlUtility.UrlUtility.parseUrlFragment(url, "#");

        this.error = values.error;
        this.error_description = values.error_description;
        this.error_uri = values.error_uri;

        this.state = values.state;
        this.id_token = values.id_token;
        this.session_state = values.session_state;
        this.access_token = values.access_token;
        this.token_type = values.token_type;
        this.scope = values.scope;
        this.profile = undefined; // will be set from ResponseValidator

        var expires_in = parseInt(values.expires_in);
        if (typeof expires_in === 'number' && expires_in > 0) {
            var now = parseInt(Date.now() / 1000);
            this.expires_at = now + expires_in;
        }
    }

    _createClass(SigninResponse, [{
        key: "expires_in",
        get: function get() {
            if (this.expires_at) {
                var now = parseInt(Date.now() / 1000);
                return this.expires_at - now;
            }
            return undefined;
        }
    }, {
        key: "expired",
        get: function get() {
            var expires_in = this.expires_in;
            if (expires_in !== undefined) {
                return expires_in <= 0;
            }
            return undefined;
        }
    }, {
        key: "scopes",
        get: function get() {
            return (this.scope || "").split(" ");
        }
    }, {
        key: "isOpenIdConnect",
        get: function get() {
            return this.scopes.indexOf(OidcScope) >= 0 || !!this.id_token;
        }
    }]);

    return SigninResponse;
}();

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SignoutRequest = undefined;

var _Log = __webpack_require__(0);

var _UrlUtility = __webpack_require__(3);

var _State = __webpack_require__(6);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SignoutRequest = exports.SignoutRequest = function SignoutRequest(_ref) {
    var url = _ref.url,
        id_token_hint = _ref.id_token_hint,
        post_logout_redirect_uri = _ref.post_logout_redirect_uri,
        data = _ref.data;

    _classCallCheck(this, SignoutRequest);

    if (!url) {
        _Log.Log.error("SignoutRequest.ctor: No url passed");
        throw new Error("url");
    }

    if (id_token_hint) {
        url = _UrlUtility.UrlUtility.addQueryParam(url, "id_token_hint", id_token_hint);
    }

    if (post_logout_redirect_uri) {
        url = _UrlUtility.UrlUtility.addQueryParam(url, "post_logout_redirect_uri", post_logout_redirect_uri);

        if (data) {
            this.state = new _State.State({ data: data });

            url = _UrlUtility.UrlUtility.addQueryParam(url, "state", this.state.id);
        }
    }

    this.url = url;
};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.SignoutResponse = undefined;

var _UrlUtility = __webpack_require__(3);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SignoutResponse = exports.SignoutResponse = function SignoutResponse(url) {
        _classCallCheck(this, SignoutResponse);

        var values = _UrlUtility.UrlUtility.parseUrlFragment(url, "?");

        this.error = values.error;
        this.error_description = values.error_description;
        this.error_uri = values.error_uri;

        this.state = values.state;
};

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InMemoryWebStorage = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InMemoryWebStorage = exports.InMemoryWebStorage = function () {
    function InMemoryWebStorage() {
        _classCallCheck(this, InMemoryWebStorage);

        this._data = {};
    }

    InMemoryWebStorage.prototype.getItem = function getItem(key) {
        _Log.Log.debug("InMemoryWebStorage.getItem", key);
        return this._data[key];
    };

    InMemoryWebStorage.prototype.setItem = function setItem(key, value) {
        _Log.Log.debug("InMemoryWebStorage.setItem", key);
        this._data[key] = value;
    };

    InMemoryWebStorage.prototype.removeItem = function removeItem(key) {
        _Log.Log.debug("InMemoryWebStorage.removeItem", key);
        delete this._data[key];
    };

    InMemoryWebStorage.prototype.key = function key(index) {
        return Object.getOwnPropertyNames(this._data)[index];
    };

    _createClass(InMemoryWebStorage, [{
        key: "length",
        get: function get() {
            return Object.getOwnPropertyNames(this._data).length;
        }
    }]);

    return InMemoryWebStorage;
}();

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserManager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Log = __webpack_require__(0);

var _OidcClient2 = __webpack_require__(7);

var _UserManagerSettings = __webpack_require__(35);

var _User = __webpack_require__(12);

var _UserManagerEvents = __webpack_require__(41);

var _SilentRenewService = __webpack_require__(43);

var _SessionMonitor = __webpack_require__(15);

var _TokenRevocationClient = __webpack_require__(17);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var UserManager = exports.UserManager = function (_OidcClient) {
    _inherits(UserManager, _OidcClient);

    function UserManager() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var SilentRenewServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _SilentRenewService.SilentRenewService;
        var SessionMonitorCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _SessionMonitor.SessionMonitor;
        var TokenRevocationClientCtor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _TokenRevocationClient.TokenRevocationClient;

        _classCallCheck(this, UserManager);

        if (!(settings instanceof _UserManagerSettings.UserManagerSettings)) {
            settings = new _UserManagerSettings.UserManagerSettings(settings);
        }

        var _this = _possibleConstructorReturn(this, _OidcClient.call(this, settings));

        _this._events = new _UserManagerEvents.UserManagerEvents(settings);
        _this._silentRenewService = new SilentRenewServiceCtor(_this);

        // order is important for the following properties; these services depend upon the events.
        if (_this.settings.automaticSilentRenew) {
            _Log.Log.debug("UserManager.ctor: automaticSilentRenew is configured, setting up silent renew");
            _this.startSilentRenew();
        }

        if (_this.settings.monitorSession) {
            _Log.Log.debug("UserManager.ctor: monitorSession is configured, setting up session monitor");
            _this._sessionMonitor = new SessionMonitorCtor(_this);
        }

        _this._tokenRevocationClient = new TokenRevocationClientCtor(_this._settings);
        return _this;
    }

    UserManager.prototype.getUser = function getUser() {
        var _this2 = this;

        return this._loadUser().then(function (user) {
            if (user) {
                _Log.Log.info("UserManager.getUser: user loaded");

                _this2._events.load(user, false);

                return user;
            } else {
                _Log.Log.info("UserManager.getUser: user not found in storage");
                return null;
            }
        });
    };

    UserManager.prototype.removeUser = function removeUser() {
        var _this3 = this;

        return this.storeUser(null).then(function () {
            _Log.Log.info("UserManager.removeUser: user removed from storage");
            _this3._events.unload();
        });
    };

    UserManager.prototype.signinRedirect = function signinRedirect(args) {
        return this._signinStart(args, this._redirectNavigator).then(function () {
            _Log.Log.info("UserManager.signinRedirect: successful");
        });
    };

    UserManager.prototype.signinRedirectCallback = function signinRedirectCallback(url) {
        return this._signinEnd(url || this._redirectNavigator.url).then(function (user) {
            if (user) {
                if (user.profile && user.profile.sub) {
                    _Log.Log.info("UserManager.signinRedirectCallback: successful, signed in sub: ", user.profile.sub);
                } else {
                    _Log.Log.info("UserManager.signinRedirectCallback: no sub");
                }
            }

            return user;
        });
    };

    UserManager.prototype.signinPopup = function signinPopup() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var url = args.redirect_uri || this.settings.popup_redirect_uri || this.settings.redirect_uri;
        if (!url) {
            _Log.Log.error("UserManager.signinPopup: No popup_redirect_uri or redirect_uri configured");
            return Promise.reject(new Error("No popup_redirect_uri or redirect_uri configured"));
        }

        args.redirect_uri = url;
        args.display = "popup";

        return this._signin(args, this._popupNavigator, {
            startUrl: url,
            popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,
            popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget
        }).then(function (user) {
            if (user) {
                if (user.profile && user.profile.sub) {
                    _Log.Log.info("UserManager.signinPopup: signinPopup successful, signed in sub: ", user.profile.sub);
                } else {
                    _Log.Log.info("UserManager.signinPopup: no sub");
                }
            }

            return user;
        });
    };

    UserManager.prototype.signinPopupCallback = function signinPopupCallback(url) {
        return this._signinCallback(url, this._popupNavigator).then(function (user) {
            if (user) {
                if (user.profile && user.profile.sub) {
                    _Log.Log.info("UserManager.signinPopupCallback: successful, signed in sub: ", user.profile.sub);
                } else {
                    _Log.Log.info("UserManager.signinPopupCallback: no sub");
                }
            }

            return user;
        }).catch(function (err) {
            _Log.Log.error("UserManager.signinPopupCallback error: " + err && err.message);
        });
    };

    UserManager.prototype.signinSilent = function signinSilent() {
        var _this4 = this;

        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var url = args.redirect_uri || this.settings.silent_redirect_uri;
        if (!url) {
            _Log.Log.error("UserManager.signinSilent: No silent_redirect_uri configured");
            return Promise.reject(new Error("No silent_redirect_uri configured"));
        }

        args.redirect_uri = url;
        args.prompt = "none";

        var setIdToken = void 0;
        if (args.id_token_hint || !this.settings.includeIdTokenInSilentRenew) {
            setIdToken = Promise.resolve();
        } else {
            setIdToken = this._loadUser().then(function (user) {
                args.id_token_hint = user && user.id_token;
            });
        }

        return setIdToken.then(function () {
            return _this4._signin(args, _this4._iframeNavigator, {
                startUrl: url,
                silentRequestTimeout: args.silentRequestTimeout || _this4.settings.silentRequestTimeout
            });
        }).then(function (user) {
            if (user) {
                if (user.profile && user.profile.sub) {
                    _Log.Log.info("UserManager.signinSilent: successful, signed in sub: ", user.profile.sub);
                } else {
                    _Log.Log.info("UserManager.signinSilent: no sub");
                }
            }

            return user;
        });
    };

    UserManager.prototype.signinSilentCallback = function signinSilentCallback(url) {
        return this._signinCallback(url, this._iframeNavigator).then(function (user) {
            if (user) {
                if (user.profile && user.profile.sub) {
                    _Log.Log.info("UserManager.signinSilentCallback: successful, signed in sub: ", user.profile.sub);
                } else {
                    _Log.Log.info("UserManager.signinSilentCallback: no sub");
                }
            }

            return user;
        });
    };

    UserManager.prototype.querySessionStatus = function querySessionStatus() {
        var _this5 = this;

        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var url = args.redirect_uri || this.settings.silent_redirect_uri;
        if (!url) {
            _Log.Log.error("UserManager.querySessionStatus: No silent_redirect_uri configured");
            return Promise.reject(new Error("No silent_redirect_uri configured"));
        }

        args.redirect_uri = url;
        args.prompt = "none";
        args.response_type = "id_token";
        args.scope = "openid";

        return this._signinStart(args, this._iframeNavigator, {
            startUrl: url,
            silentRequestTimeout: args.silentRequestTimeout || this.settings.silentRequestTimeout
        }).then(function (navResponse) {
            return _this5.processSigninResponse(navResponse.url).then(function (signinResponse) {
                _Log.Log.debug("UserManager.querySessionStatus: got signin response");

                if (signinResponse.session_state && signinResponse.profile.sub && signinResponse.profile.sid) {
                    _Log.Log.info("UserManager.querySessionStatus: querySessionStatus success for sub: ", signinResponse.profile.sub);
                    return {
                        session_state: signinResponse.session_state,
                        sub: signinResponse.profile.sub,
                        sid: signinResponse.profile.sid
                    };
                } else {
                    _Log.Log.info("querySessionStatus successful, user not authenticated");
                }
            });
        });
    };

    UserManager.prototype._signin = function _signin(args, navigator) {
        var _this6 = this;

        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        return this._signinStart(args, navigator, navigatorParams).then(function (navResponse) {
            return _this6._signinEnd(navResponse.url);
        });
    };

    UserManager.prototype._signinStart = function _signinStart(args, navigator) {
        var _this7 = this;

        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};


        return navigator.prepare(navigatorParams).then(function (handle) {
            _Log.Log.debug("UserManager._signinStart: got navigator window handle");

            return _this7.createSigninRequest(args).then(function (signinRequest) {
                _Log.Log.debug("UserManager._signinStart: got signin request");

                navigatorParams.url = signinRequest.url;
                navigatorParams.id = signinRequest.state.id;

                return handle.navigate(navigatorParams);
            }).catch(function (err) {
                if (handle.close) {
                    _Log.Log.debug("UserManager._signinStart: Error after preparing navigator, closing navigator window");
                    handle.close();
                }
                throw err;
            });
        });
    };

    UserManager.prototype._signinEnd = function _signinEnd(url) {
        var _this8 = this;

        return this.processSigninResponse(url).then(function (signinResponse) {
            _Log.Log.debug("UserManager._signinEnd: got signin response");

            var user = new _User.User(signinResponse);

            return _this8.storeUser(user).then(function () {
                _Log.Log.debug("UserManager._signinEnd: user stored");

                _this8._events.load(user);

                return user;
            });
        });
    };

    UserManager.prototype._signinCallback = function _signinCallback(url, navigator) {
        _Log.Log.debug("UserManager._signinCallback");
        return navigator.callback(url);
    };

    UserManager.prototype.signoutRedirect = function signoutRedirect() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var postLogoutRedirectUri = args.post_logout_redirect_uri || this.settings.post_logout_redirect_uri;
        if (postLogoutRedirectUri) {
            args.post_logout_redirect_uri = postLogoutRedirectUri;
        }
        return this._signoutStart(args, this._redirectNavigator).then(function () {
            _Log.Log.info("UserManager.signoutRedirect: successful");
        });
    };

    UserManager.prototype.signoutRedirectCallback = function signoutRedirectCallback(url) {
        return this._signoutEnd(url || this._redirectNavigator.url).then(function (response) {
            _Log.Log.info("UserManager.signoutRedirectCallback: successful");
            return response;
        });
    };

    UserManager.prototype.signoutPopup = function signoutPopup() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var url = args.post_logout_redirect_uri || this.settings.popup_post_logout_redirect_uri || this.settings.post_logout_redirect_uri;
        args.post_logout_redirect_uri = url;
        args.display = "popup";
        if (args.post_logout_redirect_uri) {
            // we're putting a dummy entry in here because we
            // need a unique id from the state for notification
            // to the parent window, which is necessary if we
            // plan to return back to the client after signout
            // and so we can close the popup after signout
            args.state = args.state || {};
        }

        return this._signout(args, this._popupNavigator, {
            startUrl: url,
            popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,
            popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget
        }).then(function () {
            _Log.Log.info("UserManager.signinPopup: successful");
        });
    };

    UserManager.prototype.signoutPopupCallback = function signoutPopupCallback(url, keepOpen) {
        if (typeof keepOpen === 'undefined' && typeof url === 'boolean') {
            url = null;
            keepOpen = true;
        }

        var delimiter = '?';
        return this._popupNavigator.callback(url, keepOpen, delimiter).then(function () {
            _Log.Log.info("UserManager.signoutPopupCallback: successful");
        });
    };

    UserManager.prototype._signout = function _signout(args, navigator) {
        var _this9 = this;

        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        return this._signoutStart(args, navigator, navigatorParams).then(function (navResponse) {
            return _this9._signoutEnd(navResponse.url);
        });
    };

    UserManager.prototype._signoutStart = function _signoutStart() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var _this10 = this;

        var navigator = arguments[1];
        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        return navigator.prepare(navigatorParams).then(function (handle) {
            _Log.Log.debug("UserManager._signoutStart: got navigator window handle");

            return _this10._loadUser().then(function (user) {
                _Log.Log.debug("UserManager._signoutStart: loaded current user from storage");

                var revokePromise = _this10._settings.revokeAccessTokenOnSignout ? _this10._revokeInternal(user) : Promise.resolve();
                return revokePromise.then(function () {

                    var id_token = args.id_token_hint || user && user.id_token;
                    if (id_token) {
                        _Log.Log.debug("UserManager._signoutStart: Setting id_token into signout request");
                        args.id_token_hint = id_token;
                    }

                    return _this10.removeUser().then(function () {
                        _Log.Log.debug("UserManager._signoutStart: user removed, creating signout request");

                        return _this10.createSignoutRequest(args).then(function (signoutRequest) {
                            _Log.Log.debug("UserManager._signoutStart: got signout request");

                            navigatorParams.url = signoutRequest.url;
                            if (signoutRequest.state) {
                                navigatorParams.id = signoutRequest.state.id;
                            }
                            return handle.navigate(navigatorParams);
                        });
                    });
                });
            }).catch(function (err) {
                if (handle.close) {
                    _Log.Log.debug("UserManager._signoutStart: Error after preparing navigator, closing navigator window");
                    handle.close();
                }
                throw err;
            });
        });
    };

    UserManager.prototype._signoutEnd = function _signoutEnd(url) {
        return this.processSignoutResponse(url).then(function (signoutResponse) {
            _Log.Log.debug("UserManager._signoutEnd: got signout response");

            return signoutResponse;
        });
    };

    UserManager.prototype.revokeAccessToken = function revokeAccessToken() {
        var _this11 = this;

        return this._loadUser().then(function (user) {
            return _this11._revokeInternal(user, true).then(function (success) {
                if (success) {
                    _Log.Log.debug("UserManager.revokeAccessToken: removing token properties from user and re-storing");

                    user.access_token = null;
                    user.expires_at = null;
                    user.token_type = null;

                    return _this11.storeUser(user).then(function () {
                        _Log.Log.debug("UserManager.revokeAccessToken: user stored");
                        _this11._events.load(user);
                    });
                }
            });
        }).then(function () {
            _Log.Log.info("UserManager.revokeAccessToken: access token revoked successfully");
        });
    };

    UserManager.prototype._revokeInternal = function _revokeInternal(user, required) {
        var access_token = user && user.access_token;

        // check for JWT vs. reference token
        if (!access_token || access_token.indexOf('.') >= 0) {
            _Log.Log.debug("UserManager.revokeAccessToken: no need to revoke due to no user, token, or JWT format");
            return Promise.resolve(false);
        }

        return this._tokenRevocationClient.revoke(access_token, required).then(function () {
            return true;
        });
    };

    UserManager.prototype.startSilentRenew = function startSilentRenew() {
        this._silentRenewService.start();
    };

    UserManager.prototype.stopSilentRenew = function stopSilentRenew() {
        this._silentRenewService.stop();
    };

    UserManager.prototype._loadUser = function _loadUser() {
        return this._userStore.get(this._userStoreKey).then(function (storageString) {
            if (storageString) {
                _Log.Log.debug("UserManager._loadUser: user storageString loaded");
                return _User.User.fromStorageString(storageString);
            }

            _Log.Log.debug("UserManager._loadUser: no user storageString");
            return null;
        });
    };

    UserManager.prototype.storeUser = function storeUser(user) {
        if (user) {
            _Log.Log.debug("UserManager.storeUser: storing user");

            var storageString = user.toStorageString();
            return this._userStore.set(this._userStoreKey, storageString);
        } else {
            _Log.Log.debug("storeUser.storeUser: removing user");
            return this._userStore.remove(this._userStoreKey);
        }
    };

    _createClass(UserManager, [{
        key: '_redirectNavigator',
        get: function get() {
            return this.settings.redirectNavigator;
        }
    }, {
        key: '_popupNavigator',
        get: function get() {
            return this.settings.popupNavigator;
        }
    }, {
        key: '_iframeNavigator',
        get: function get() {
            return this.settings.iframeNavigator;
        }
    }, {
        key: '_userStore',
        get: function get() {
            return this.settings.userStore;
        }
    }, {
        key: 'events',
        get: function get() {
            return this._events;
        }
    }, {
        key: '_userStoreKey',
        get: function get() {
            return 'user:' + this.settings.authority + ':' + this.settings.client_id;
        }
    }]);

    return UserManager;
}(_OidcClient2.OidcClient);

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserManagerSettings = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Log = __webpack_require__(0);

var _OidcClientSettings2 = __webpack_require__(4);

var _RedirectNavigator = __webpack_require__(36);

var _PopupNavigator = __webpack_require__(37);

var _IFrameNavigator = __webpack_require__(39);

var _WebStorageStateStore = __webpack_require__(5);

var _Global = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var DefaultAccessTokenExpiringNotificationTime = 60;
var DefaultCheckSessionInterval = 2000;

var UserManagerSettings = exports.UserManagerSettings = function (_OidcClientSettings) {
    _inherits(UserManagerSettings, _OidcClientSettings);

    function UserManagerSettings() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            popup_redirect_uri = _ref.popup_redirect_uri,
            popup_post_logout_redirect_uri = _ref.popup_post_logout_redirect_uri,
            popupWindowFeatures = _ref.popupWindowFeatures,
            popupWindowTarget = _ref.popupWindowTarget,
            silent_redirect_uri = _ref.silent_redirect_uri,
            silentRequestTimeout = _ref.silentRequestTimeout,
            _ref$automaticSilentR = _ref.automaticSilentRenew,
            automaticSilentRenew = _ref$automaticSilentR === undefined ? false : _ref$automaticSilentR,
            _ref$includeIdTokenIn = _ref.includeIdTokenInSilentRenew,
            includeIdTokenInSilentRenew = _ref$includeIdTokenIn === undefined ? true : _ref$includeIdTokenIn,
            _ref$monitorSession = _ref.monitorSession,
            monitorSession = _ref$monitorSession === undefined ? true : _ref$monitorSession,
            _ref$checkSessionInte = _ref.checkSessionInterval,
            checkSessionInterval = _ref$checkSessionInte === undefined ? DefaultCheckSessionInterval : _ref$checkSessionInte,
            _ref$stopCheckSession = _ref.stopCheckSessionOnError,
            stopCheckSessionOnError = _ref$stopCheckSession === undefined ? true : _ref$stopCheckSession,
            _ref$revokeAccessToke = _ref.revokeAccessTokenOnSignout,
            revokeAccessTokenOnSignout = _ref$revokeAccessToke === undefined ? false : _ref$revokeAccessToke,
            _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime,
            accessTokenExpiringNotificationTime = _ref$accessTokenExpir === undefined ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir,
            _ref$redirectNavigato = _ref.redirectNavigator,
            redirectNavigator = _ref$redirectNavigato === undefined ? new _RedirectNavigator.RedirectNavigator() : _ref$redirectNavigato,
            _ref$popupNavigator = _ref.popupNavigator,
            popupNavigator = _ref$popupNavigator === undefined ? new _PopupNavigator.PopupNavigator() : _ref$popupNavigator,
            _ref$iframeNavigator = _ref.iframeNavigator,
            iframeNavigator = _ref$iframeNavigator === undefined ? new _IFrameNavigator.IFrameNavigator() : _ref$iframeNavigator,
            _ref$userStore = _ref.userStore,
            userStore = _ref$userStore === undefined ? new _WebStorageStateStore.WebStorageStateStore({ store: _Global.Global.sessionStorage }) : _ref$userStore;

        _classCallCheck(this, UserManagerSettings);

        var _this = _possibleConstructorReturn(this, _OidcClientSettings.call(this, arguments[0]));

        _this._popup_redirect_uri = popup_redirect_uri;
        _this._popup_post_logout_redirect_uri = popup_post_logout_redirect_uri;
        _this._popupWindowFeatures = popupWindowFeatures;
        _this._popupWindowTarget = popupWindowTarget;

        _this._silent_redirect_uri = silent_redirect_uri;
        _this._silentRequestTimeout = silentRequestTimeout;
        _this._automaticSilentRenew = !!automaticSilentRenew;
        _this._includeIdTokenInSilentRenew = includeIdTokenInSilentRenew;
        _this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;

        _this._monitorSession = monitorSession;
        _this._checkSessionInterval = checkSessionInterval;
        _this._stopCheckSessionOnError = stopCheckSessionOnError;
        _this._revokeAccessTokenOnSignout = revokeAccessTokenOnSignout;

        _this._redirectNavigator = redirectNavigator;
        _this._popupNavigator = popupNavigator;
        _this._iframeNavigator = iframeNavigator;

        _this._userStore = userStore;
        return _this;
    }

    _createClass(UserManagerSettings, [{
        key: 'popup_redirect_uri',
        get: function get() {
            return this._popup_redirect_uri;
        }
    }, {
        key: 'popup_post_logout_redirect_uri',
        get: function get() {
            return this._popup_post_logout_redirect_uri;
        }
    }, {
        key: 'popupWindowFeatures',
        get: function get() {
            return this._popupWindowFeatures;
        }
    }, {
        key: 'popupWindowTarget',
        get: function get() {
            return this._popupWindowTarget;
        }
    }, {
        key: 'silent_redirect_uri',
        get: function get() {
            return this._silent_redirect_uri;
        }
    }, {
        key: 'silentRequestTimeout',
        get: function get() {
            return this._silentRequestTimeout;
        }
    }, {
        key: 'automaticSilentRenew',
        get: function get() {
            return !!(this.silent_redirect_uri && this._automaticSilentRenew);
        }
    }, {
        key: 'includeIdTokenInSilentRenew',
        get: function get() {
            return this._includeIdTokenInSilentRenew;
        }
    }, {
        key: 'accessTokenExpiringNotificationTime',
        get: function get() {
            return this._accessTokenExpiringNotificationTime;
        }
    }, {
        key: 'monitorSession',
        get: function get() {
            return this._monitorSession;
        }
    }, {
        key: 'checkSessionInterval',
        get: function get() {
            return this._checkSessionInterval;
        }
    }, {
        key: 'stopCheckSessionOnError',
        get: function get() {
            return this._stopCheckSessionOnError;
        }
    }, {
        key: 'revokeAccessTokenOnSignout',
        get: function get() {
            return this._revokeAccessTokenOnSignout;
        }
    }, {
        key: 'redirectNavigator',
        get: function get() {
            return this._redirectNavigator;
        }
    }, {
        key: 'popupNavigator',
        get: function get() {
            return this._popupNavigator;
        }
    }, {
        key: 'iframeNavigator',
        get: function get() {
            return this._iframeNavigator;
        }
    }, {
        key: 'userStore',
        get: function get() {
            return this._userStore;
        }
    }]);

    return UserManagerSettings;
}(_OidcClientSettings2.OidcClientSettings);

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RedirectNavigator = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RedirectNavigator = exports.RedirectNavigator = function () {
    function RedirectNavigator() {
        _classCallCheck(this, RedirectNavigator);
    }

    RedirectNavigator.prototype.prepare = function prepare() {
        return Promise.resolve(this);
    };

    RedirectNavigator.prototype.navigate = function navigate(params) {
        if (!params || !params.url) {
            _Log.Log.error("RedirectNavigator.navigate: No url provided");
            return Promise.reject(new Error("No url provided"));
        }

        window.location = params.url;

        return Promise.resolve();
    };

    _createClass(RedirectNavigator, [{
        key: "url",
        get: function get() {
            return window.location.href;
        }
    }]);

    return RedirectNavigator;
}();

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PopupNavigator = undefined;

var _Log = __webpack_require__(0);

var _PopupWindow = __webpack_require__(38);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var PopupNavigator = exports.PopupNavigator = function () {
    function PopupNavigator() {
        _classCallCheck(this, PopupNavigator);
    }

    PopupNavigator.prototype.prepare = function prepare(params) {
        var popup = new _PopupWindow.PopupWindow(params);
        return Promise.resolve(popup);
    };

    PopupNavigator.prototype.callback = function callback(url, keepOpen, delimiter) {
        _Log.Log.debug("PopupNavigator.callback");

        try {
            _PopupWindow.PopupWindow.notifyOpener(url, keepOpen, delimiter);
            return Promise.resolve();
        } catch (e) {
            return Promise.reject(e);
        }
    };

    return PopupNavigator;
}();

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PopupWindow = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(0);

var _UrlUtility = __webpack_require__(3);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CheckForPopupClosedInterval = 500;
var DefaultPopupFeatures = 'location=no,toolbar=no,width=500,height=500,left=100,top=100;';
//const DefaultPopupFeatures = 'location=no,toolbar=no,width=500,height=500,left=100,top=100;resizable=yes';

var DefaultPopupTarget = "_blank";

var PopupWindow = exports.PopupWindow = function () {
    function PopupWindow(params) {
        var _this = this;

        _classCallCheck(this, PopupWindow);

        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });

        var target = params.popupWindowTarget || DefaultPopupTarget;
        var features = params.popupWindowFeatures || DefaultPopupFeatures;

        this._popup = window.open('', target, features);
        if (this._popup) {
            _Log.Log.debug("PopupWindow.ctor: popup successfully created");
            this._checkForPopupClosedTimer = window.setInterval(this._checkForPopupClosed.bind(this), CheckForPopupClosedInterval);
        }
    }

    PopupWindow.prototype.navigate = function navigate(params) {
        if (!this._popup) {
            this._error("PopupWindow.navigate: Error opening popup window");
        } else if (!params || !params.url) {
            this._error("PopupWindow.navigate: no url provided");
            this._error("No url provided");
        } else {
            _Log.Log.debug("PopupWindow.navigate: Setting URL in popup");

            this._id = params.id;
            if (this._id) {
                window["popupCallback_" + params.id] = this._callback.bind(this);
            }

            this._popup.focus();
            this._popup.window.location = params.url;
        }

        return this.promise;
    };

    PopupWindow.prototype._success = function _success(data) {
        _Log.Log.debug("PopupWindow.callback: Successful response from popup window");

        this._cleanup();
        this._resolve(data);
    };

    PopupWindow.prototype._error = function _error(message) {
        _Log.Log.error("PopupWindow.error: ", message);

        this._cleanup();
        this._reject(new Error(message));
    };

    PopupWindow.prototype.close = function close() {
        this._cleanup(false);
    };

    PopupWindow.prototype._cleanup = function _cleanup(keepOpen) {
        _Log.Log.debug("PopupWindow.cleanup");

        window.clearInterval(this._checkForPopupClosedTimer);
        this._checkForPopupClosedTimer = null;

        delete window["popupCallback_" + this._id];

        if (this._popup && !keepOpen) {
            this._popup.close();
        }
        this._popup = null;
    };

    PopupWindow.prototype._checkForPopupClosed = function _checkForPopupClosed() {
        if (!this._popup || this._popup.closed) {
            this._error("Popup window closed");
        }
    };

    PopupWindow.prototype._callback = function _callback(url, keepOpen) {
        this._cleanup(keepOpen);

        if (url) {
            _Log.Log.debug("PopupWindow.callback success");
            this._success({ url: url });
        } else {
            _Log.Log.debug("PopupWindow.callback: Invalid response from popup");
            this._error("Invalid response from popup");
        }
    };

    PopupWindow.notifyOpener = function notifyOpener(url, keepOpen, delimiter) {
        if (window.opener) {
            url = url || window.location.href;
            if (url) {
                var data = _UrlUtility.UrlUtility.parseUrlFragment(url, delimiter);

                if (data.state) {
                    var name = "popupCallback_" + data.state;
                    var callback = window.opener[name];
                    if (callback) {
                        _Log.Log.debug("PopupWindow.notifyOpener: passing url message to opener");
                        callback(url, keepOpen);
                    } else {
                        _Log.Log.warn("PopupWindow.notifyOpener: no matching callback found on opener");
                    }
                } else {
                    _Log.Log.warn("PopupWindow.notifyOpener: no state found in response url");
                }
            }
        } else {
            _Log.Log.warn("PopupWindow.notifyOpener: no window.opener. Can't complete notification.");
        }
    };

    _createClass(PopupWindow, [{
        key: 'promise',
        get: function get() {
            return this._promise;
        }
    }]);

    return PopupWindow;
}();

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IFrameNavigator = undefined;

var _Log = __webpack_require__(0);

var _IFrameWindow = __webpack_require__(40);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var IFrameNavigator = exports.IFrameNavigator = function () {
    function IFrameNavigator() {
        _classCallCheck(this, IFrameNavigator);
    }

    IFrameNavigator.prototype.prepare = function prepare(params) {
        var frame = new _IFrameWindow.IFrameWindow(params);
        return Promise.resolve(frame);
    };

    IFrameNavigator.prototype.callback = function callback(url) {
        _Log.Log.debug("IFrameNavigator.callback");

        try {
            _IFrameWindow.IFrameWindow.notifyParent(url);
            return Promise.resolve();
        } catch (e) {
            return Promise.reject(e);
        }
    };

    return IFrameNavigator;
}();

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IFrameWindow = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DefaultTimeout = 10000;

var IFrameWindow = exports.IFrameWindow = function () {
    function IFrameWindow(params) {
        var _this = this;

        _classCallCheck(this, IFrameWindow);

        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });

        this._boundMessageEvent = this._message.bind(this);
        window.addEventListener("message", this._boundMessageEvent, false);

        this._frame = window.document.createElement("iframe");

        // shotgun approach
        this._frame.style.visibility = "hidden";
        this._frame.style.position = "absolute";
        this._frame.style.display = "none";
        this._frame.style.width = 0;
        this._frame.style.height = 0;

        window.document.body.appendChild(this._frame);
    }

    IFrameWindow.prototype.navigate = function navigate(params) {
        if (!params || !params.url) {
            this._error("No url provided");
        } else {
            var timeout = params.silentRequestTimeout || DefaultTimeout;
            _Log.Log.debug("IFrameWindow.navigate: Using timeout of:", timeout);
            this._timer = window.setTimeout(this._timeout.bind(this), timeout);
            this._frame.src = params.url;
        }

        return this.promise;
    };

    IFrameWindow.prototype._success = function _success(data) {
        this._cleanup();

        _Log.Log.debug("IFrameWindow: Successful response from frame window");
        this._resolve(data);
    };

    IFrameWindow.prototype._error = function _error(message) {
        this._cleanup();

        _Log.Log.error(message);
        this._reject(new Error(message));
    };

    IFrameWindow.prototype.close = function close() {
        this._cleanup();
    };

    IFrameWindow.prototype._cleanup = function _cleanup() {
        if (this._frame) {
            _Log.Log.debug("IFrameWindow: cleanup");

            window.removeEventListener("message", this._boundMessageEvent, false);
            window.clearTimeout(this._timer);
            window.document.body.removeChild(this._frame);

            this._timer = null;
            this._frame = null;
            this._boundMessageEvent = null;
        }
    };

    IFrameWindow.prototype._timeout = function _timeout() {
        _Log.Log.debug("IFrameWindow.timeout");
        this._error("Frame window timed out");
    };

    IFrameWindow.prototype._message = function _message(e) {
        _Log.Log.debug("IFrameWindow.message");

        if (this._timer && e.origin === this._origin && e.source === this._frame.contentWindow) {
            var url = e.data;
            if (url) {
                this._success({ url: url });
            } else {
                this._error("Invalid response from frame");
            }
        }
    };

    IFrameWindow.notifyParent = function notifyParent(url) {
        _Log.Log.debug("IFrameWindow.notifyParent");

        if (window.parent && window !== window.parent) {
            url = url || window.location.href;
            if (url) {
                _Log.Log.debug("IFrameWindow.notifyParent: posting url message to parent");
                window.parent.postMessage(url, location.protocol + "//" + location.host);
            }
        }
    };

    _createClass(IFrameWindow, [{
        key: "promise",
        get: function get() {
            return this._promise;
        }
    }, {
        key: "_origin",
        get: function get() {
            return location.protocol + "//" + location.host;
        }
    }]);

    return IFrameWindow;
}();

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserManagerEvents = undefined;

var _Log = __webpack_require__(0);

var _AccessTokenEvents2 = __webpack_require__(13);

var _Event = __webpack_require__(14);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var UserManagerEvents = exports.UserManagerEvents = function (_AccessTokenEvents) {
    _inherits(UserManagerEvents, _AccessTokenEvents);

    function UserManagerEvents(settings) {
        _classCallCheck(this, UserManagerEvents);

        var _this = _possibleConstructorReturn(this, _AccessTokenEvents.call(this, settings));

        _this._userLoaded = new _Event.Event("User loaded");
        _this._userUnloaded = new _Event.Event("User unloaded");
        _this._silentRenewError = new _Event.Event("Silent renew error");
        _this._userSignedOut = new _Event.Event("User signed out");
        _this._userSessionChanged = new _Event.Event("User session changed");
        return _this;
    }

    UserManagerEvents.prototype.load = function load(user) {
        var raiseEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        _Log.Log.debug("UserManagerEvents.load");
        _AccessTokenEvents.prototype.load.call(this, user);
        if (raiseEvent) {
            this._userLoaded.raise(user);
        }
    };

    UserManagerEvents.prototype.unload = function unload() {
        _Log.Log.debug("UserManagerEvents.unload");
        _AccessTokenEvents.prototype.unload.call(this);
        this._userUnloaded.raise();
    };

    UserManagerEvents.prototype.addUserLoaded = function addUserLoaded(cb) {
        this._userLoaded.addHandler(cb);
    };

    UserManagerEvents.prototype.removeUserLoaded = function removeUserLoaded(cb) {
        this._userLoaded.removeHandler(cb);
    };

    UserManagerEvents.prototype.addUserUnloaded = function addUserUnloaded(cb) {
        this._userUnloaded.addHandler(cb);
    };

    UserManagerEvents.prototype.removeUserUnloaded = function removeUserUnloaded(cb) {
        this._userUnloaded.removeHandler(cb);
    };

    UserManagerEvents.prototype.addSilentRenewError = function addSilentRenewError(cb) {
        this._silentRenewError.addHandler(cb);
    };

    UserManagerEvents.prototype.removeSilentRenewError = function removeSilentRenewError(cb) {
        this._silentRenewError.removeHandler(cb);
    };

    UserManagerEvents.prototype._raiseSilentRenewError = function _raiseSilentRenewError(e) {
        _Log.Log.debug("UserManagerEvents._raiseSilentRenewError", e.message);
        this._silentRenewError.raise(e);
    };

    UserManagerEvents.prototype.addUserSignedOut = function addUserSignedOut(cb) {
        this._userSignedOut.addHandler(cb);
    };

    UserManagerEvents.prototype.removeUserSignedOut = function removeUserSignedOut(cb) {
        this._userSignedOut.removeHandler(cb);
    };

    UserManagerEvents.prototype._raiseUserSignedOut = function _raiseUserSignedOut(e) {
        _Log.Log.debug("UserManagerEvents._raiseUserSignedOut");
        this._userSignedOut.raise(e);
    };

    UserManagerEvents.prototype.addUserSessionChanged = function addUserSessionChanged(cb) {
        this._userSessionChanged.addHandler(cb);
    };

    UserManagerEvents.prototype.removeUserSessionChanged = function removeUserSessionChanged(cb) {
        this._userSessionChanged.removeHandler(cb);
    };

    UserManagerEvents.prototype._raiseUserSessionChanged = function _raiseUserSessionChanged(e) {
        _Log.Log.debug("UserManagerEvents._raiseUserSessionChanged");
        this._userSessionChanged.raise(e);
    };

    return UserManagerEvents;
}(_AccessTokenEvents2.AccessTokenEvents);

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Timer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Log = __webpack_require__(0);

var _Global = __webpack_require__(1);

var _Event2 = __webpack_require__(14);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var TimerDuration = 5; // seconds

var Timer = exports.Timer = function (_Event) {
    _inherits(Timer, _Event);

    function Timer(name) {
        var timer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global.Global.timer;
        var nowFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

        _classCallCheck(this, Timer);

        var _this = _possibleConstructorReturn(this, _Event.call(this, name));

        _this._timer = timer;

        if (nowFunc) {
            _this._nowFunc = nowFunc;
        } else {
            _this._nowFunc = function () {
                return Date.now() / 1000;
            };
        }
        return _this;
    }

    Timer.prototype.init = function init(duration) {
        if (duration <= 0) {
            duration = 1;
        }
        duration = parseInt(duration);

        var expiration = this.now + duration;
        if (this.expiration === expiration && this._timerHandle) {
            // no need to reinitialize to same expiration, so bail out
            _Log.Log.debug("Timer.init timer " + this._name + " skipping initialization since already initialized for expiration:", this.expiration);
            return;
        }

        this.cancel();

        _Log.Log.debug("Timer.init timer " + this._name + " for duration:", duration);
        this._expiration = expiration;

        // we're using a fairly short timer and then checking the expiration in the
        // callback to handle scenarios where the browser device sleeps, and then
        // the timers end up getting delayed.
        var timerDuration = TimerDuration;
        if (duration < timerDuration) {
            timerDuration = duration;
        }
        this._timerHandle = this._timer.setInterval(this._callback.bind(this), timerDuration * 1000);
    };

    Timer.prototype.cancel = function cancel() {
        if (this._timerHandle) {
            _Log.Log.debug("Timer.cancel: ", this._name);
            this._timer.clearInterval(this._timerHandle);
            this._timerHandle = null;
        }
    };

    Timer.prototype._callback = function _callback() {
        var diff = this._expiration - this.now;
        _Log.Log.debug("Timer.callback; " + this._name + " timer expires in:", diff);

        if (this._expiration <= this.now) {
            this.cancel();
            _Event.prototype.raise.call(this);
        }
    };

    _createClass(Timer, [{
        key: 'now',
        get: function get() {
            return parseInt(this._nowFunc());
        }
    }, {
        key: 'expiration',
        get: function get() {
            return this._expiration;
        }
    }]);

    return Timer;
}(_Event2.Event);

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SilentRenewService = undefined;

var _Log = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SilentRenewService = exports.SilentRenewService = function () {
    function SilentRenewService(userManager) {
        _classCallCheck(this, SilentRenewService);

        this._userManager = userManager;
    }

    SilentRenewService.prototype.start = function start() {
        if (!this._callback) {
            this._callback = this._tokenExpiring.bind(this);
            this._userManager.events.addAccessTokenExpiring(this._callback);

            // this will trigger loading of the user so the expiring events can be initialized
            this._userManager.getUser().then(function (user) {
                // deliberate nop
            }).catch(function (err) {
                // catch to suppress errors since we're in a ctor
                _Log.Log.error("SilentRenewService.start: Error from getUser:", err.message);
            });
        }
    };

    SilentRenewService.prototype.stop = function stop() {
        if (this._callback) {
            this._userManager.events.removeAccessTokenExpiring(this._callback);
            delete this._callback;
        }
    };

    SilentRenewService.prototype._tokenExpiring = function _tokenExpiring() {
        var _this = this;

        this._userManager.signinSilent().then(function (user) {
            _Log.Log.debug("SilentRenewService._tokenExpiring: Silent token renewal successful");
        }, function (err) {
            _Log.Log.error("SilentRenewService._tokenExpiring: Error from signinSilent:", err.message);
            _this._userManager.events._raiseSilentRenewError(err);
        });
    };

    return SilentRenewService;
}();

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CordovaPopupNavigator = undefined;

var _CordovaPopupWindow = __webpack_require__(18);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var CordovaPopupNavigator = exports.CordovaPopupNavigator = function () {
    function CordovaPopupNavigator() {
        _classCallCheck(this, CordovaPopupNavigator);
    }

    CordovaPopupNavigator.prototype.prepare = function prepare(params) {
        var popup = new _CordovaPopupWindow.CordovaPopupWindow(params);
        return Promise.resolve(popup);
    };

    return CordovaPopupNavigator;
}();

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CordovaIFrameNavigator = undefined;

var _CordovaPopupWindow = __webpack_require__(18);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var CordovaIFrameNavigator = exports.CordovaIFrameNavigator = function () {
    function CordovaIFrameNavigator() {
        _classCallCheck(this, CordovaIFrameNavigator);
    }

    CordovaIFrameNavigator.prototype.prepare = function prepare(params) {
        params.popupWindowFeatures = 'hidden=yes';
        var popup = new _CordovaPopupWindow.CordovaPopupWindow(params);
        return Promise.resolve(popup);
    };

    return CordovaIFrameNavigator;
}();

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCA1NTYyMzU1NzZiMjkxMzFkNmFlNSIsIndlYnBhY2s6Ly8vLi9zcmMvTG9nLmpzIiwid2VicGFjazovLy8uL3NyYy9HbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL01ldGFkYXRhU2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXJsVXRpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvT2lkY0NsaWVudFNldHRpbmdzLmpzIiwid2VicGFjazovLy8uL3NyYy9XZWJTdG9yYWdlU3RhdGVTdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL09pZGNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0pzb25TZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9FcnJvclJlc3BvbnNlLmpzIiwid2VicGFjazovLy8uL3NyYy9TaWduaW5TdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmFuZG9tLmpzIiwid2VicGFjazovLy8uL3NyYy9Vc2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9BY2Nlc3NUb2tlbkV2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Nlc3Npb25Nb25pdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9DaGVja1Nlc3Npb25JRnJhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Rva2VuUmV2b2NhdGlvbkNsaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29yZG92YVBvcHVwV2luZG93LmpzIiwid2VicGFjazovLy8uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9SZXNwb25zZVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXNlckluZm9TZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9Kb3NlVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9qc3JzYXNpZ24vZGlzdC9qc3JzYXNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU2lnbmluUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU2lnbmluUmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NpZ25vdXRSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9TaWdub3V0UmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0luTWVtb3J5V2ViU3RvcmFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXNlck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VzZXJNYW5hZ2VyU2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1JlZGlyZWN0TmF2aWdhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9Qb3B1cE5hdmlnYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUG9wdXBXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0lGcmFtZU5hdmlnYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvSUZyYW1lV2luZG93LmpzIiwid2VicGFjazovLy8uL3NyYy9Vc2VyTWFuYWdlckV2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVGltZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NpbGVudFJlbmV3U2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29yZG92YVBvcHVwTmF2aWdhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9Db3Jkb3ZhSUZyYW1lTmF2aWdhdG9yLmpzIl0sIm5hbWVzIjpbIm5vcExvZ2dlciIsImRlYnVnIiwiaW5mbyIsIndhcm4iLCJlcnJvciIsIk5PTkUiLCJFUlJPUiIsIldBUk4iLCJJTkZPIiwiREVCVUciLCJsb2dnZXIiLCJsZXZlbCIsIkxvZyIsInJlc2V0IiwiYXJncyIsImFwcGx5IiwiQXJyYXkiLCJmcm9tIiwidmFsdWUiLCJFcnJvciIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJjYiIsImR1cmF0aW9uIiwiY2xlYXJJbnRlcnZhbCIsImhhbmRsZSIsInRlc3RpbmciLCJyZXF1ZXN0IiwiR2xvYmFsIiwiX3Rlc3RpbmciLCJzZXRYTUxIdHRwUmVxdWVzdCIsIm5ld1JlcXVlc3QiLCJsb2NhdGlvbiIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsInNlc3Npb25TdG9yYWdlIiwiWE1MSHR0cFJlcXVlc3QiLCJPaWRjTWV0YWRhdGFVcmxQYXRoIiwiTWV0YWRhdGFTZXJ2aWNlIiwic2V0dGluZ3MiLCJKc29uU2VydmljZUN0b3IiLCJKc29uU2VydmljZSIsIl9zZXR0aW5ncyIsIl9qc29uU2VydmljZSIsImdldE1ldGFkYXRhIiwibWV0YWRhdGEiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1ldGFkYXRhVXJsIiwicmVqZWN0IiwiZ2V0SnNvbiIsInRoZW4iLCJnZXRJc3N1ZXIiLCJfZ2V0TWV0YWRhdGFQcm9wZXJ0eSIsImdldEF1dGhvcml6YXRpb25FbmRwb2ludCIsImdldFVzZXJJbmZvRW5kcG9pbnQiLCJnZXRUb2tlbkVuZHBvaW50IiwiZ2V0Q2hlY2tTZXNzaW9uSWZyYW1lIiwiZ2V0RW5kU2Vzc2lvbkVuZHBvaW50IiwiZ2V0UmV2b2NhdGlvbkVuZHBvaW50IiwibmFtZSIsIm9wdGlvbmFsIiwidW5kZWZpbmVkIiwiZ2V0U2lnbmluZ0tleXMiLCJzaWduaW5nS2V5cyIsImp3a3NfdXJpIiwia2V5U2V0Iiwia2V5cyIsIl9tZXRhZGF0YVVybCIsImF1dGhvcml0eSIsImluZGV4T2YiLCJsZW5ndGgiLCJVcmxVdGlsaXR5IiwiYWRkUXVlcnlQYXJhbSIsInVybCIsImVuY29kZVVSSUNvbXBvbmVudCIsInBhcnNlVXJsRnJhZ21lbnQiLCJkZWxpbWl0ZXIiLCJnbG9iYWwiLCJocmVmIiwiaWR4IiwibGFzdEluZGV4T2YiLCJzdWJzdHIiLCJwYXJhbXMiLCJyZWdleCIsIm0iLCJjb3VudGVyIiwiZXhlYyIsImRlY29kZVVSSUNvbXBvbmVudCIsInByb3AiLCJEZWZhdWx0UmVzcG9uc2VUeXBlIiwiRGVmYXVsdFNjb3BlIiwiRGVmYXVsdFN0YWxlU3RhdGVBZ2UiLCJEZWZhdWx0Q2xvY2tTa2V3SW5TZWNvbmRzIiwiT2lkY0NsaWVudFNldHRpbmdzIiwiY2xpZW50X2lkIiwiY2xpZW50X3NlY3JldCIsInJlc3BvbnNlX3R5cGUiLCJzY29wZSIsInJlZGlyZWN0X3VyaSIsInBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSIsInByb21wdCIsImRpc3BsYXkiLCJtYXhfYWdlIiwidWlfbG9jYWxlcyIsImFjcl92YWx1ZXMiLCJyZXNvdXJjZSIsImZpbHRlclByb3RvY29sQ2xhaW1zIiwibG9hZFVzZXJJbmZvIiwic3RhbGVTdGF0ZUFnZSIsImNsb2NrU2tldyIsInN0YXRlU3RvcmUiLCJXZWJTdG9yYWdlU3RhdGVTdG9yZSIsIlJlc3BvbnNlVmFsaWRhdG9yQ3RvciIsIlJlc3BvbnNlVmFsaWRhdG9yIiwiTWV0YWRhdGFTZXJ2aWNlQ3RvciIsImV4dHJhUXVlcnlQYXJhbXMiLCJfYXV0aG9yaXR5IiwiX21ldGFkYXRhIiwiX3NpZ25pbmdLZXlzIiwiX2NsaWVudF9pZCIsIl9jbGllbnRfc2VjcmV0IiwiX3Jlc3BvbnNlX3R5cGUiLCJfc2NvcGUiLCJfcmVkaXJlY3RfdXJpIiwiX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSIsIl9wcm9tcHQiLCJfZGlzcGxheSIsIl9tYXhfYWdlIiwiX3VpX2xvY2FsZXMiLCJfYWNyX3ZhbHVlcyIsIl9yZXNvdXJjZSIsIl9maWx0ZXJQcm90b2NvbENsYWltcyIsIl9sb2FkVXNlckluZm8iLCJfc3RhbGVTdGF0ZUFnZSIsIl9jbG9ja1NrZXciLCJfc3RhdGVTdG9yZSIsIl92YWxpZGF0b3IiLCJfbWV0YWRhdGFTZXJ2aWNlIiwiX2V4dHJhUXVlcnlQYXJhbXMiLCJwcmVmaXgiLCJzdG9yZSIsIl9zdG9yZSIsIl9wcmVmaXgiLCJzZXQiLCJrZXkiLCJzZXRJdGVtIiwiZ2V0IiwiaXRlbSIsImdldEl0ZW0iLCJyZW1vdmUiLCJyZW1vdmVJdGVtIiwiZ2V0QWxsS2V5cyIsImluZGV4IiwicHVzaCIsIlN0YXRlIiwiaWQiLCJkYXRhIiwiY3JlYXRlZCIsIl9pZCIsIl9kYXRhIiwiX2NyZWF0ZWQiLCJwYXJzZUludCIsIkRhdGUiLCJub3ciLCJ0b1N0b3JhZ2VTdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiZnJvbVN0b3JhZ2VTdHJpbmciLCJzdG9yYWdlU3RyaW5nIiwicGFyc2UiLCJjbGVhclN0YWxlU3RhdGUiLCJzdG9yYWdlIiwiYWdlIiwiY3V0b2ZmIiwicHJvbWlzZXMiLCJpIiwicCIsInN0YXRlIiwiZSIsIm1lc3NhZ2UiLCJhbGwiLCJPaWRjQ2xpZW50IiwiY3JlYXRlU2lnbmluUmVxdWVzdCIsImlkX3Rva2VuX2hpbnQiLCJsb2dpbl9oaW50IiwicmVxdWVzdF91cmkiLCJzaWduaW5SZXF1ZXN0IiwiU2lnbmluUmVxdWVzdCIsInNpZ25pblN0YXRlIiwicHJvY2Vzc1NpZ25pblJlc3BvbnNlIiwicmVzcG9uc2UiLCJTaWduaW5SZXNwb25zZSIsInN0b3JlZFN0YXRlU3RyaW5nIiwiU2lnbmluU3RhdGUiLCJ2YWxpZGF0ZVNpZ25pblJlc3BvbnNlIiwiY3JlYXRlU2lnbm91dFJlcXVlc3QiLCJTaWdub3V0UmVxdWVzdCIsInNpZ25vdXRTdGF0ZSIsInByb2Nlc3NTaWdub3V0UmVzcG9uc2UiLCJTaWdub3V0UmVzcG9uc2UiLCJFcnJvclJlc3BvbnNlIiwic3RhdGVLZXkiLCJ2YWxpZGF0ZVNpZ25vdXRSZXNwb25zZSIsInZhbGlkYXRvciIsIm1ldGFkYXRhU2VydmljZSIsIlhNTEh0dHBSZXF1ZXN0Q3RvciIsIl9YTUxIdHRwUmVxdWVzdCIsInRva2VuIiwicmVxIiwib3BlbiIsIm9ubG9hZCIsInN0YXR1cyIsImNvbnRlbnRUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJzdGFydHNXaXRoIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsImVycm9yX2Rlc2NyaXB0aW9uIiwiZXJyb3JfdXJpIiwibm9uY2UiLCJhcmd1bWVudHMiLCJfbm9uY2UiLCJyYW5kb20iLCJndWlkSG9sZGVyIiwiaGV4IiwiciIsImd1aWRSZXNwb25zZSIsIk1hdGgiLCJVc2VyIiwiaWRfdG9rZW4iLCJzZXNzaW9uX3N0YXRlIiwiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSIsInByb2ZpbGUiLCJleHBpcmVzX2F0IiwiZXhwaXJlc19pbiIsInNwbGl0IiwiRGVmYXVsdEFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lIiwiQWNjZXNzVG9rZW5FdmVudHMiLCJhY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSIsImFjY2Vzc1Rva2VuRXhwaXJpbmdUaW1lciIsIlRpbWVyIiwiYWNjZXNzVG9rZW5FeHBpcmVkVGltZXIiLCJfYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUiLCJfYWNjZXNzVG9rZW5FeHBpcmluZyIsIl9hY2Nlc3NUb2tlbkV4cGlyZWQiLCJsb2FkIiwiY29udGFpbmVyIiwiZXhwaXJpbmciLCJpbml0IiwiY2FuY2VsIiwiZXhwaXJlZCIsInVubG9hZCIsImFkZEFjY2Vzc1Rva2VuRXhwaXJpbmciLCJhZGRIYW5kbGVyIiwicmVtb3ZlQWNjZXNzVG9rZW5FeHBpcmluZyIsInJlbW92ZUhhbmRsZXIiLCJhZGRBY2Nlc3NUb2tlbkV4cGlyZWQiLCJyZW1vdmVBY2Nlc3NUb2tlbkV4cGlyZWQiLCJFdmVudCIsIl9uYW1lIiwiX2NhbGxiYWNrcyIsImZpbmRJbmRleCIsInNwbGljZSIsInJhaXNlIiwiU2Vzc2lvbk1vbml0b3IiLCJ1c2VyTWFuYWdlciIsIkNoZWNrU2Vzc2lvbklGcmFtZUN0b3IiLCJDaGVja1Nlc3Npb25JRnJhbWUiLCJfdXNlck1hbmFnZXIiLCJfQ2hlY2tTZXNzaW9uSUZyYW1lQ3RvciIsImV2ZW50cyIsImFkZFVzZXJMb2FkZWQiLCJfc3RhcnQiLCJiaW5kIiwiYWRkVXNlclVubG9hZGVkIiwiX3N0b3AiLCJnZXRVc2VyIiwidXNlciIsImNhdGNoIiwiZXJyIiwiX3N1YiIsInN1YiIsIl9zaWQiLCJzaWQiLCJfY2hlY2tTZXNzaW9uSUZyYW1lIiwiaW50ZXJ2YWwiLCJfY2hlY2tTZXNzaW9uSW50ZXJ2YWwiLCJzdG9wT25FcnJvciIsIl9zdG9wQ2hlY2tTZXNzaW9uT25FcnJvciIsIl9jYWxsYmFjayIsInN0YXJ0Iiwic3RvcCIsInF1ZXJ5U2Vzc2lvblN0YXR1cyIsInJhaXNlVXNlclNpZ25lZE91dEV2ZW50Iiwic2Vzc2lvbiIsIl9yYWlzZVVzZXJTZXNzaW9uQ2hhbmdlZCIsIl9yYWlzZVVzZXJTaWduZWRPdXQiLCJjaGVja1Nlc3Npb25JbnRlcnZhbCIsInN0b3BDaGVja1Nlc3Npb25PbkVycm9yIiwiRGVmYXVsdEludGVydmFsIiwiY2FsbGJhY2siLCJfdXJsIiwiX2ludGVydmFsIiwiX3N0b3BPbkVycm9yIiwiX2ZyYW1lX29yaWdpbiIsIl9mcmFtZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwidmlzaWJpbGl0eSIsInBvc2l0aW9uIiwid2lkdGgiLCJoZWlnaHQiLCJzcmMiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJfYm91bmRNZXNzYWdlRXZlbnQiLCJfbWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvcmlnaW4iLCJzb3VyY2UiLCJjb250ZW50V2luZG93IiwiX3Nlc3Npb25fc3RhdGUiLCJwb3N0TWVzc2FnZSIsIl90aW1lciIsIkFjY2Vzc1Rva2VuVHlwZUhpbnQiLCJUb2tlblJldm9jYXRpb25DbGllbnQiLCJfWE1MSHR0cFJlcXVlc3RDdG9yIiwicmV2b2tlIiwiYWNjZXNzVG9rZW4iLCJyZXF1aXJlZCIsIl9yZXZva2UiLCJ4aHIiLCJEZWZhdWx0UG9wdXBGZWF0dXJlcyIsIkRlZmF1bHRQb3B1cFRhcmdldCIsIkNvcmRvdmFQb3B1cFdpbmRvdyIsIl9wcm9taXNlIiwiX3Jlc29sdmUiLCJfcmVqZWN0IiwiZmVhdHVyZXMiLCJwb3B1cFdpbmRvd0ZlYXR1cmVzIiwidGFyZ2V0IiwicG9wdXBXaW5kb3dUYXJnZXQiLCJzdGFydFVybCIsIl9pc0luQXBwQnJvd3Nlckluc3RhbGxlZCIsImNvcmRvdmFNZXRhZGF0YSIsInNvbWUiLCJoYXNPd25Qcm9wZXJ0eSIsIm5hdmlnYXRlIiwiX2Vycm9yIiwiY29yZG92YSIsInJlcXVpcmUiLCJfcG9wdXAiLCJJbkFwcEJyb3dzZXIiLCJfZXhpdENhbGxiYWNrRXZlbnQiLCJfZXhpdENhbGxiYWNrIiwiX2xvYWRTdGFydENhbGxiYWNrRXZlbnQiLCJfbG9hZFN0YXJ0Q2FsbGJhY2siLCJwcm9taXNlIiwiZXZlbnQiLCJfc3VjY2VzcyIsIl9jbGVhbnVwIiwiY2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiSW5NZW1vcnlXZWJTdG9yYWdlIiwiVXNlck1hbmFnZXIiLCJDb3Jkb3ZhUG9wdXBOYXZpZ2F0b3IiLCJDb3Jkb3ZhSUZyYW1lTmF2aWdhdG9yIiwiUHJvdG9jb2xDbGFpbXMiLCJVc2VySW5mb1NlcnZpY2VDdG9yIiwiVXNlckluZm9TZXJ2aWNlIiwiam9zZVV0aWwiLCJKb3NlVXRpbCIsIl91c2VySW5mb1NlcnZpY2UiLCJfam9zZVV0aWwiLCJfcHJvY2Vzc1NpZ25pblBhcmFtcyIsIl92YWxpZGF0ZVRva2VucyIsIl9wcm9jZXNzQ2xhaW1zIiwiaXNPcGVuSWRDb25uZWN0IiwiZ2V0Q2xhaW1zIiwiY2xhaW1zIiwiX21lcmdlQ2xhaW1zIiwiY2xhaW1zMSIsImNsYWltczIiLCJyZXN1bHQiLCJPYmplY3QiLCJhc3NpZ24iLCJ2YWx1ZXMiLCJpc0FycmF5IiwiZm9yRWFjaCIsInR5cGUiLCJfdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW4iLCJfdmFsaWRhdGVJZFRva2VuIiwiX3ZhbGlkYXRlQWNjZXNzVG9rZW4iLCJqd3QiLCJwYXJzZUp3dCIsImhlYWRlciIsInBheWxvYWQiLCJraWQiLCJfZmlsdGVyQnlBbGciLCJhbGciLCJmaWx0ZXIiLCJhdWRpZW5jZSIsImNsb2NrU2tld0luU2Vjb25kcyIsInZhbGlkYXRlSnd0IiwiaXNzdWVyIiwia3R5IiwiYXRfaGFzaCIsImhhc2hBbGciLCJoYXNoQml0cyIsInNoYSIsImhhc2giLCJoYXNoU3RyaW5nIiwibGVmdCIsImxlZnRfYjY0dSIsImhleFRvQmFzZTY0VXJsIiwiQWxsb3dlZFNpZ25pbmdBbGdzIiwiandzIiwiSldTIiwiaGVhZGVyT2JqIiwicGF5bG9hZE9iaiIsIm4iLCJLZXlVdGlsIiwiZ2V0S2V5IiwieDVjIiwiWDUwOSIsImdldFB1YmxpY0tleUZyb21DZXJ0SGV4IiwiY3J2IiwieCIsInkiLCJfdmFsaWRhdGVKd3QiLCJpc3MiLCJhdWQiLCJ2YWxpZEF1ZGllbmNlIiwibG93ZXJOb3ciLCJ1cHBlck5vdyIsImlhdCIsIm5iZiIsImV4cCIsInZlcmlmeSIsImNyeXB0byIsIlV0aWwiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJZQUhPTyIsImxhbmciLCJleHRlbmQiLCJnIiwiaCIsImYiLCJkIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJzdXBlcmNsYXNzIiwiYiIsImMiLCJ0ZXN0IiwiaiIsImwiLCJrIiwiYSIsIkNyeXB0b0pTIiwibGliIiwiQmFzZSIsIm8iLCJtaXhJbiIsIiRzdXBlciIsImNyZWF0ZSIsInRvU3RyaW5nIiwiY2xvbmUiLCJXb3JkQXJyYXkiLCJ3b3JkcyIsInNpZ0J5dGVzIiwiY29uY2F0IiwidCIsInEiLCJzIiwiY2xhbXAiLCJjZWlsIiwiY2FsbCIsInNsaWNlIiwiZW5jIiwiSGV4Iiwiam9pbiIsIkxhdGluMSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoYXJDb2RlQXQiLCJVdGY4IiwiZXNjYXBlIiwidW5lc2NhcGUiLCJCdWZmZXJlZEJsb2NrQWxnb3JpdGhtIiwiX25EYXRhQnl0ZXMiLCJfYXBwZW5kIiwiX3Byb2Nlc3MiLCJ3IiwiYmxvY2tTaXplIiwidiIsInUiLCJtYXgiLCJfbWluQnVmZmVyU2l6ZSIsIm1pbiIsIl9kb1Byb2Nlc3NCbG9jayIsIkhhc2hlciIsImNmZyIsIl9kb1Jlc2V0IiwidXBkYXRlIiwiZmluYWxpemUiLCJfZG9GaW5hbGl6ZSIsIl9jcmVhdGVIZWxwZXIiLCJfY3JlYXRlSG1hY0hlbHBlciIsIkhNQUMiLCJhbGdvIiwieDY0IiwiV29yZCIsImhpZ2giLCJsb3ciLCJ0b1gzMiIsIkJhc2U2NCIsIl9tYXAiLCJjaGFyQXQiLCJzcXJ0IiwicG93IiwiU0hBMjU2IiwiX2hhc2giLCJmbG9vciIsIkhtYWNTSEEyNTYiLCJUIiwiZWEiLCJTSEE1MTIiLCJGIiwiRyIsIkgiLCJJIiwiSiIsIlgiLCJLIiwiWSIsIkwiLCJaIiwiTSIsIiQiLCJOIiwiYWEiLCJPIiwiYmEiLCJQIiwiY2EiLCJRIiwieiIsIkEiLCJVIiwiQiIsIlIiLCJDIiwiUyIsIkQiLCJWIiwiRSIsIlciLCJmYSIsImRhIiwiSG1hY1NIQTUxMiIsIlNIQTM4NCIsIkhtYWNTSEEzODQiLCJiNjRtYXAiLCJiNjRwYWQiLCJoZXgyYjY0Iiwic3Vic3RyaW5nIiwiYjY0dG9oZXgiLCJpbnQyY2hhciIsImI2NHRvQkEiLCJkYml0cyIsImNhbmFyeSIsImpfbG0iLCJCaWdJbnRlZ2VyIiwiZnJvbU51bWJlciIsImZyb21TdHJpbmciLCJuYmkiLCJhbTEiLCJhbTIiLCJhbTMiLCJhcHBOYW1lIiwiYW0iLCJEQiIsIkRNIiwiRFYiLCJCSV9GUCIsIkZWIiwiRjEiLCJGMiIsIkJJX1JNIiwiQklfUkMiLCJyciIsInZ2IiwiaW50QXQiLCJibnBDb3B5VG8iLCJibnBGcm9tSW50IiwibmJ2IiwiZnJvbUludCIsImJucEZyb21TdHJpbmciLCJmcm9tUmFkaXgiLCJaRVJPIiwic3ViVG8iLCJibnBDbGFtcCIsImJuVG9TdHJpbmciLCJuZWdhdGUiLCJ0b1JhZGl4IiwiYm5OZWdhdGUiLCJibkFicyIsImJuQ29tcGFyZVRvIiwibmJpdHMiLCJibkJpdExlbmd0aCIsImJucERMU2hpZnRUbyIsImJucERSU2hpZnRUbyIsImJucExTaGlmdFRvIiwiYm5wUlNoaWZ0VG8iLCJibnBTdWJUbyIsImJucE11bHRpcGx5VG8iLCJhYnMiLCJibnBTcXVhcmVUbyIsImJucERpdlJlbVRvIiwiY29weVRvIiwibFNoaWZ0VG8iLCJkbFNoaWZ0VG8iLCJjb21wYXJlVG8iLCJPTkUiLCJkclNoaWZ0VG8iLCJyU2hpZnRUbyIsImJuTW9kIiwiZGl2UmVtVG8iLCJDbGFzc2ljIiwiY0NvbnZlcnQiLCJtb2QiLCJjUmV2ZXJ0IiwiY1JlZHVjZSIsImNNdWxUbyIsIm11bHRpcGx5VG8iLCJyZWR1Y2UiLCJjU3FyVG8iLCJzcXVhcmVUbyIsImNvbnZlcnQiLCJyZXZlcnQiLCJtdWxUbyIsInNxclRvIiwiYm5wSW52RGlnaXQiLCJNb250Z29tZXJ5IiwibXAiLCJpbnZEaWdpdCIsIm1wbCIsIm1waCIsInVtIiwibXQyIiwibW9udENvbnZlcnQiLCJtb250UmV2ZXJ0IiwibW9udFJlZHVjZSIsIm1vbnRTcXJUbyIsIm1vbnRNdWxUbyIsImJucElzRXZlbiIsImJucEV4cCIsImJuTW9kUG93SW50IiwiaXNFdmVuIiwiYml0TGVuZ3RoIiwibW9kUG93SW50IiwiYm5DbG9uZSIsImJuSW50VmFsdWUiLCJibkJ5dGVWYWx1ZSIsImJuU2hvcnRWYWx1ZSIsImJucENodW5rU2l6ZSIsIkxOMiIsImxvZyIsImJuU2lnTnVtIiwiYm5wVG9SYWRpeCIsInNpZ251bSIsImNodW5rU2l6ZSIsImludFZhbHVlIiwiYm5wRnJvbVJhZGl4IiwiZE11bHRpcGx5IiwiZEFkZE9mZnNldCIsImJucEZyb21OdW1iZXIiLCJ0ZXN0Qml0IiwiYml0d2lzZVRvIiwic2hpZnRMZWZ0Iiwib3Bfb3IiLCJpc1Byb2JhYmxlUHJpbWUiLCJuZXh0Qnl0ZXMiLCJiblRvQnl0ZUFycmF5IiwiYm5FcXVhbHMiLCJibk1pbiIsImJuTWF4IiwiYm5wQml0d2lzZVRvIiwib3BfYW5kIiwiYm5BbmQiLCJibk9yIiwib3BfeG9yIiwiYm5Yb3IiLCJvcF9hbmRub3QiLCJibkFuZE5vdCIsImJuTm90IiwiYm5TaGlmdExlZnQiLCJiblNoaWZ0UmlnaHQiLCJsYml0IiwiYm5HZXRMb3dlc3RTZXRCaXQiLCJjYml0IiwiYm5CaXRDb3VudCIsImJuVGVzdEJpdCIsImJucENoYW5nZUJpdCIsImJuU2V0Qml0IiwiY2hhbmdlQml0IiwiYm5DbGVhckJpdCIsImJuRmxpcEJpdCIsImJucEFkZFRvIiwiYm5BZGQiLCJhZGRUbyIsImJuU3VidHJhY3QiLCJibk11bHRpcGx5IiwiYm5TcXVhcmUiLCJibkRpdmlkZSIsImJuUmVtYWluZGVyIiwiYm5EaXZpZGVBbmRSZW1haW5kZXIiLCJibnBETXVsdGlwbHkiLCJibnBEQWRkT2Zmc2V0IiwiTnVsbEV4cCIsIm5Ob3AiLCJuTXVsVG8iLCJuU3FyVG8iLCJiblBvdyIsImJucE11bHRpcGx5TG93ZXJUbyIsImJucE11bHRpcGx5VXBwZXJUbyIsIkJhcnJldHQiLCJyMiIsInEzIiwibXUiLCJkaXZpZGUiLCJiYXJyZXR0Q29udmVydCIsImJhcnJldHRSZXZlcnQiLCJiYXJyZXR0UmVkdWNlIiwibXVsdGlwbHlVcHBlclRvIiwibXVsdGlwbHlMb3dlclRvIiwiYmFycmV0dFNxclRvIiwiYmFycmV0dE11bFRvIiwiYm5Nb2RQb3ciLCJibkdDRCIsImdldExvd2VzdFNldEJpdCIsImJucE1vZEludCIsImJuTW9kSW52ZXJzZSIsInN1YnRyYWN0IiwiYWRkIiwibG93cHJpbWVzIiwibHBsaW0iLCJibklzUHJvYmFibGVQcmltZSIsIm1vZEludCIsIm1pbGxlclJhYmluIiwiYm5wTWlsbGVyUmFiaW4iLCJzaGlmdFJpZ2h0IiwibW9kUG93IiwiYnl0ZVZhbHVlIiwic2hvcnRWYWx1ZSIsInRvQnl0ZUFycmF5IiwiZXF1YWxzIiwiYW5kIiwib3IiLCJ4b3IiLCJhbmROb3QiLCJub3QiLCJiaXRDb3VudCIsInNldEJpdCIsImNsZWFyQml0IiwiZmxpcEJpdCIsIm11bHRpcGx5IiwicmVtYWluZGVyIiwiZGl2aWRlQW5kUmVtYWluZGVyIiwibW9kSW52ZXJzZSIsImdjZCIsInNxdWFyZSIsIkFyY2ZvdXIiLCJBUkM0aW5pdCIsIkFSQzRuZXh0IiwibmV4dCIsInBybmdfbmV3c3RhdGUiLCJybmdfcHNpemUiLCJybmdfc3RhdGUiLCJybmdfcG9vbCIsInJuZ19wcHRyIiwicm5nX3NlZWRfaW50Iiwicm5nX3NlZWRfdGltZSIsImdldFRpbWUiLCJtc0NyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsInVhIiwiVWludDhBcnJheSIsImFwcFZlcnNpb24iLCJybmdfZ2V0X2J5dGUiLCJybmdfZ2V0X2J5dGVzIiwiU2VjdXJlUmFuZG9tIiwicGFyc2VCaWdJbnQiLCJsaW5lYnJrIiwiYnl0ZTJIZXgiLCJwa2NzMXBhZDIiLCJvYWVwX21nZjFfYXJyIiwib2FlcF9wYWQiLCJLSlVSIiwiTWVzc2FnZURpZ2VzdCIsImdldENhbm9uaWNhbEFsZ05hbWUiLCJnZXRIYXNoTGVuZ3RoIiwiaGV4dG9yc3RyIiwiaGFzaEhleCIsInJzdHJ0b2hleCIsIlJTQUtleSIsImRtcDEiLCJkbXExIiwiY29lZmYiLCJSU0FTZXRQdWJsaWMiLCJpc1B1YmxpYyIsImlzUHJpdmF0ZSIsIlJTQURvUHVibGljIiwiUlNBRW5jcnlwdCIsImRvUHVibGljIiwiUlNBRW5jcnlwdE9BRVAiLCJzZXRQdWJsaWMiLCJlbmNyeXB0IiwiZW5jcnlwdE9BRVAiLCJFQ0ZpZWxkRWxlbWVudEZwIiwiZmVGcEVxdWFscyIsImZlRnBUb0JpZ0ludGVnZXIiLCJmZUZwTmVnYXRlIiwiZmVGcEFkZCIsInRvQmlnSW50ZWdlciIsImZlRnBTdWJ0cmFjdCIsImZlRnBNdWx0aXBseSIsImZlRnBTcXVhcmUiLCJmZUZwRGl2aWRlIiwiRUNQb2ludEZwIiwiY3VydmUiLCJ6aW52IiwicG9pbnRGcEdldFgiLCJmcm9tQmlnSW50ZWdlciIsInBvaW50RnBHZXRZIiwicG9pbnRGcEVxdWFscyIsImlzSW5maW5pdHkiLCJwb2ludEZwSXNJbmZpbml0eSIsInBvaW50RnBOZWdhdGUiLCJwb2ludEZwQWRkIiwidHdpY2UiLCJnZXRJbmZpbml0eSIsInBvaW50RnBUd2ljZSIsInBvaW50RnBNdWx0aXBseSIsInBvaW50RnBNdWx0aXBseVR3byIsImdldFgiLCJnZXRZIiwibXVsdGlwbHlUd28iLCJFQ0N1cnZlRnAiLCJpbmZpbml0eSIsImN1cnZlRnBHZXRRIiwiY3VydmVGcEdldEEiLCJjdXJ2ZUZwR2V0QiIsImN1cnZlRnBFcXVhbHMiLCJjdXJ2ZUZwR2V0SW5maW5pdHkiLCJjdXJ2ZUZwRnJvbUJpZ0ludGVnZXIiLCJjdXJ2ZUZwRGVjb2RlUG9pbnRIZXgiLCJnZXRRIiwiZ2V0QSIsImdldEIiLCJkZWNvZGVQb2ludEhleCIsImpzb25QYXJzZSIsIlJlZ0V4cCIsIm1hdGNoIiwicmVwbGFjZSIsInVuc2hpZnQiLCJzaGlmdCIsImFzbjEiLCJBU04xVXRpbCIsImludGVnZXJUb0J5dGVIZXgiLCJiaWdJbnRUb01pblR3b3NDb21wbGVtZW50c0hleCIsImdldFBFTVN0cmluZ0Zyb21IZXgiLCJoZXh0b3BlbSIsIm5ld09iamVjdCIsIkRFUkJvb2xlYW4iLCJERVJJbnRlZ2VyIiwiREVSQml0U3RyaW5nIiwiREVST2N0ZXRTdHJpbmciLCJERVJOdWxsIiwiREVST2JqZWN0SWRlbnRpZmllciIsIkRFUkVudW1lcmF0ZWQiLCJERVJVVEY4U3RyaW5nIiwiREVSTnVtZXJpY1N0cmluZyIsIkRFUlByaW50YWJsZVN0cmluZyIsIkRFUlRlbGV0ZXhTdHJpbmciLCJERVJJQTVTdHJpbmciLCJERVJVVENUaW1lIiwiREVSR2VuZXJhbGl6ZWRUaW1lIiwiREVSU2VxdWVuY2UiLCJERVJTZXQiLCJERVJUYWdnZWRPYmplY3QiLCJhcnJheSIsInRhZyIsImV4cGxpY2l0Iiwib2JqIiwianNvblRvQVNOMUhFWCIsImdldEVuY29kZWRIZXgiLCJvaWRIZXhUb0ludCIsIm9pZEludFRvSGV4IiwiQVNOMU9iamVjdCIsImdldExlbmd0aEhleEZyb21WYWx1ZSIsImhWIiwiaFRMViIsImlzTW9kaWZpZWQiLCJnZXRGcmVzaFZhbHVlSGV4IiwiaEwiLCJoVCIsImdldFZhbHVlSGV4IiwiREVSQWJzdHJhY3RTdHJpbmciLCJnZXRTdHJpbmciLCJzZXRTdHJpbmciLCJ1dGY4dG9oZXgiLCJ0b0xvd2VyQ2FzZSIsInNldFN0cmluZ0hleCIsInN0ciIsIkRFUkFic3RyYWN0VGltZSIsImxvY2FsRGF0ZVRvVVRDIiwidXRjIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJmb3JtYXREYXRlIiwiemVyb1BhZGRpbmciLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJzdG9oZXgiLCJzZXRCeURhdGVWYWx1ZSIsIlVUQyIsInNldEJ5RGF0ZSIsIkRFUkFic3RyYWN0U3RydWN0dXJlZCIsInNldEJ5QVNOMU9iamVjdEFycmF5IiwiYXNuMUFycmF5IiwiYXBwZW5kQVNOMU9iamVjdCIsInNldEJ5QmlnSW50ZWdlciIsInNldEJ5SW50ZWdlciIsInNldFZhbHVlSGV4IiwiYmlnaW50Iiwic2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzIiwic2V0VW51c2VkQml0c0FuZEhleFZhbHVlIiwic2V0QnlCaW5hcnlTdHJpbmciLCJzZXRCeUJvb2xlYW5BcnJheSIsIm5ld0ZhbHNlQXJyYXkiLCJiaW4iLCJzZXRWYWx1ZU9pZFN0cmluZyIsInNldFZhbHVlTmFtZSIsIng1MDkiLCJPSUQiLCJuYW1lMm9pZCIsIm9pZCIsImRhdGUiLCJ3aXRoTWlsbGlzIiwibWlsbGlzIiwic29ydEZsYWciLCJzb3J0Iiwic29ydGZsYWciLCJpc0V4cGxpY2l0IiwiYXNuMU9iamVjdCIsInNldEFTTjFPYmplY3QiLCJBU04xSEVYIiwiZ2V0TGJsZW4iLCJnZXRMIiwiZ2V0VmJsZW4iLCJnZXRWaWR4IiwiZ2V0ViIsImdldFRMViIsImdldE5leHRTaWJsaW5nSWR4IiwiZ2V0Q2hpbGRJZHgiLCJnZXROdGhDaGlsZElkeCIsImdldElkeGJ5TGlzdCIsImdldFRMVmJ5TGlzdCIsImdldFZieUxpc3QiLCJoZXh0b29pZHN0ciIsImR1bXAiLCJvbW1pdF9sb25nX29jdGV0IiwiaXNBU04xSEVYIiwib2lkMm5hbWUiLCJoZXh0b3V0ZjgiLCJvaWRuYW1lIiwieDUwOUV4dE5hbWUiLCJpc0hleCIsIkNlcnRpZmljYXRlIiwic2lnbiIsImFzbjFTaWduYXR1cmVBbGciLCJhc24xVEJTQ2VydCIsIlNpZ25hdHVyZSIsIm5hbWVBbGciLCJwcnZLZXkiLCJ1cGRhdGVIZXgiLCJoZXhTaWciLCJhc24xU2lnIiwic2V0U2lnbmF0dXJlSGV4IiwiZ2V0UEVNU3RyaW5nIiwiaGV4dG9iNjRubCIsInRic2NlcnRvYmoiLCJwcnZrZXlvYmoiLCJUQlNDZXJ0aWZpY2F0ZSIsIlRpbWUiLCJYNTAwTmFtZSIsIlN1YmplY3RQdWJsaWNLZXlJbmZvIiwiX2luaXRpYWxpemUiLCJhc24xVmVyc2lvbiIsImFzbjFTZXJpYWxOdW1iZXIiLCJhc24xSXNzdWVyIiwiYXNuMU5vdEJlZm9yZSIsImFzbjFOb3RBZnRlciIsImFzbjFTdWJqZWN0IiwiYXNuMVN1YmpQS2V5IiwiZXh0ZW5zaW9uc0FycmF5Iiwic2V0U2VyaWFsTnVtYmVyQnlQYXJhbSIsInNldFNpZ25hdHVyZUFsZ0J5UGFyYW0iLCJBbGdvcml0aG1JZGVudGlmaWVyIiwic2V0SXNzdWVyQnlQYXJhbSIsInNldE5vdEJlZm9yZUJ5UGFyYW0iLCJzZXROb3RBZnRlckJ5UGFyYW0iLCJzZXRTdWJqZWN0QnlQYXJhbSIsInNldFN1YmplY3RQdWJsaWNLZXkiLCJzZXRTdWJqZWN0UHVibGljS2V5QnlHZXRLZXkiLCJLRVlVVElMIiwiYXBwZW5kRXh0ZW5zaW9uIiwiYXBwZW5kRXh0ZW5zaW9uQnlOYW1lIiwiRXh0ZW5zaW9uIiwiYXBwZW5kQnlOYW1lVG9BcnJheSIsImdldEV4dG5WYWx1ZUhleCIsImNyaXRpY2FsIiwiQmFzaWNDb25zdHJhaW50cyIsIktleVVzYWdlIiwiQ1JMRGlzdHJpYnV0aW9uUG9pbnRzIiwiRXh0S2V5VXNhZ2UiLCJBdXRob3JpdHlLZXlJZGVudGlmaWVyIiwiQXV0aG9yaXR5SW5mb0FjY2VzcyIsIlN1YmplY3RBbHROYW1lIiwiSXNzdWVyQWx0TmFtZSIsIktFWVVTQUdFX05BTUUiLCJhc24xRXh0blZhbHVlIiwibmFtZXMiLCJjQSIsInBhdGhMZW4iLCJzZXRCeURQQXJyYXkiLCJzZXRCeU9uZVVSSSIsIkdlbmVyYWxOYW1lcyIsInVyaSIsIkRpc3RyaWJ1dGlvblBvaW50TmFtZSIsIkRpc3RyaWJ1dGlvblBvaW50IiwiZHBvYmoiLCJzZXRQdXJwb3NlQXJyYXkiLCJhc24xS0lEIiwiYXNuMUNlcnRJc3N1ZXIiLCJhc24xQ2VydFNOIiwic2V0S0lEQnlQYXJhbSIsInNldENlcnRJc3N1ZXJCeVBhcmFtIiwic2V0Q2VydFNOQnlQYXJhbSIsInNuIiwic2V0QWNjZXNzRGVzY3JpcHRpb25BcnJheSIsImFjY2Vzc01ldGhvZCIsIkdlbmVyYWxOYW1lIiwiYWNjZXNzTG9jYXRpb24iLCJzZXROYW1lQXJyYXkiLCJDUkwiLCJhc24xVEJTQ2VydExpc3QiLCJzaWciLCJwcm92IiwidGJzb2JqIiwiVEJTQ2VydExpc3QiLCJzZXRUaGlzVXBkYXRlQnlQYXJhbSIsImFzbjFUaGlzVXBkYXRlIiwic2V0TmV4dFVwZGF0ZUJ5UGFyYW0iLCJhc24xTmV4dFVwZGF0ZSIsImFkZFJldm9rZWRDZXJ0IiwidGltZSIsIkNSTEVudHJ5IiwiYVJldm9rZWRDZXJ0Iiwic2V0Q2VydFNlcmlhbCIsInNldFJldm9jYXRpb25EYXRlIiwiVExWIiwicGVtdG9oZXgiLCJzZXRCeVN0cmluZyIsIlJETiIsInNldEJ5TGRhcFN0cmluZyIsImxkYXBUb09uZWxpbmUiLCJzZXRCeU9iamVjdCIsImxkYXBzdHIiLCJjZXJ0aXNzdWVyIiwiZ2V0SXNzdWVySGV4IiwiY2VydHN1YmplY3QiLCJnZXRTdWJqZWN0SGV4Iiwib25lbGluZVRvTERBUCIsInJldmVyc2UiLCJtYXAiLCJwb3AiLCJhZGRCeVN0cmluZyIsIkF0dHJpYnV0ZVR5cGVBbmRWYWx1ZSIsImFkZEJ5TXVsdGlWYWx1ZWRTdHJpbmciLCJwYXJzZVN0cmluZyIsInNldEJ5QXR0clR5cGVBbmRWYWx1ZVN0ciIsInR5cGVPYmoiLCJhdHlwZTJvYmoiLCJ2YWx1ZU9iaiIsImdldFZhbHVlT2JqIiwiRUNEU0EiLCJEU0EiLCJnZXRBU04xT2JqZWN0IiwiYXNuMUFsZ0lkIiwic2V0UHViS2V5Iiwic2VxIiwiY3VydmVOYW1lIiwiYXNuMXBhcmFtcyIsInB1YktleUhleCIsInNldFRpbWVQYXJhbXMiLCJ0aW1lUGFyYW1zIiwiYXNuMUFsZyIsImFzbjFQYXJhbXMiLCJwYXJhbUVtcHR5IiwibmFtZTJvYmoiLCJwYXJhbWVtcHR5IiwicmZjODIyIiwiZG5zIiwiZG4iLCJpcCIsInNldEJ5UGFyYW0iLCJsZGFwZG4iLCJjZXJ0c3ViaiIsImludGFyeXN0cnRvaGV4IiwiaXB2NnRvaGV4IiwiYXNuMU9iaiIsInNldEJ5UGFyYW1BcnJheSIsImFzbjFWIiwiaXNQcm90b3R5cGVPZiIsImFzbjFEUCIsImF0eXBlMm9pZExpc3QiLCJDTiIsIlNUIiwiT1UiLCJTVFJFRVQiLCJEQyIsIlVJRCIsIlNOIiwiRE4iLCJkZXNjcmlwdGlvbiIsImJ1c2luZXNzQ2F0ZWdvcnkiLCJwb3N0YWxDb2RlIiwic2VyaWFsTnVtYmVyIiwidW5pcXVlSWRlbnRpZmllciIsIm9yZ2FuaXphdGlvbklkZW50aWZpZXIiLCJqdXJpc2RpY3Rpb25PZkluY29ycG9yYXRpb25MIiwianVyaXNkaWN0aW9uT2ZJbmNvcnBvcmF0aW9uU1AiLCJqdXJpc2RpY3Rpb25PZkluY29ycG9yYXRpb25DIiwibmFtZTJvaWRMaXN0Iiwic2hhMSIsInNoYTI1NiIsInNoYTM4NCIsInNoYTUxMiIsInNoYTIyNCIsIm1kNSIsIm1kMiIsInJpcGVtZDE2MCIsIk1EMndpdGhSU0EiLCJNRDR3aXRoUlNBIiwiTUQ1d2l0aFJTQSIsIlNIQTF3aXRoUlNBIiwiU0hBMjI0d2l0aFJTQSIsIlNIQTI1NndpdGhSU0EiLCJTSEEzODR3aXRoUlNBIiwiU0hBNTEyd2l0aFJTQSIsIlNIQTF3aXRoRUNEU0EiLCJTSEEyMjR3aXRoRUNEU0EiLCJTSEEyNTZ3aXRoRUNEU0EiLCJTSEEzODR3aXRoRUNEU0EiLCJTSEE1MTJ3aXRoRUNEU0EiLCJkc2EiLCJTSEExd2l0aERTQSIsIlNIQTIyNHdpdGhEU0EiLCJTSEEyNTZ3aXRoRFNBIiwicnNhRW5jcnlwdGlvbiIsImNvbW1vbk5hbWUiLCJjb3VudHJ5TmFtZSIsImxvY2FsaXR5TmFtZSIsInN0YXRlT3JQcm92aW5jZU5hbWUiLCJzdHJlZXRBZGRyZXNzIiwib3JnYW5pemF0aW9uTmFtZSIsIm9yZ2FuaXphdGlvbmFsVW5pdE5hbWUiLCJkb21haW5Db21wb25lbnQiLCJ1c2VySWQiLCJzdXJuYW1lIiwidGl0bGUiLCJkaXN0aW5ndWlzaGVkTmFtZSIsImVtYWlsQWRkcmVzcyIsInN1YmplY3RLZXlJZGVudGlmaWVyIiwia2V5VXNhZ2UiLCJzdWJqZWN0QWx0TmFtZSIsImlzc3VlckFsdE5hbWUiLCJiYXNpY0NvbnN0cmFpbnRzIiwibmFtZUNvbnN0cmFpbnRzIiwiY1JMRGlzdHJpYnV0aW9uUG9pbnRzIiwiY2VydGlmaWNhdGVQb2xpY2llcyIsImF1dGhvcml0eUtleUlkZW50aWZpZXIiLCJwb2xpY3lDb25zdHJhaW50cyIsImV4dEtleVVzYWdlIiwiYXV0aG9yaXR5SW5mb0FjY2VzcyIsIm9jc3AiLCJjYUlzc3VlcnMiLCJhbnlFeHRlbmRlZEtleVVzYWdlIiwic2VydmVyQXV0aCIsImNsaWVudEF1dGgiLCJjb2RlU2lnbmluZyIsImVtYWlsUHJvdGVjdGlvbiIsInRpbWVTdGFtcGluZyIsIm9jc3BTaWduaW5nIiwiZWNQdWJsaWNLZXkiLCJzZWNwMjU2cjEiLCJzZWNwMjU2azEiLCJzZWNwMzg0cjEiLCJwa2NzNVBCRVMyIiwicGtjczVQQktERjIiLCJ0c3RpbmZvIiwiZXh0ZW5zaW9uUmVxdWVzdCIsIm9iakNhY2hlIiwib2lkMmF0eXBlIiwiWDUwOVV0aWwiLCJuZXdDZXJ0UEVNIiwic2VyaWFsIiwic2lnYWxnIiwibm90YmVmb3JlIiwibm90YWZ0ZXIiLCJzdWJqZWN0Iiwic2JqcHVia2V5IiwiZXh0IiwiY2FrZXkiLCJzaWdoZXgiLCJCYXNlNjR4Iiwic3RvQkEiLCJCQXRvcyIsIkJBdG9oZXgiLCJzdG9iNjQiLCJzdG9iNjR1IiwiYjY0dG9iNjR1IiwiYjY0dXRvcyIsImI2NHV0b2I2NCIsImhleHRvYjY0dSIsImI2NHV0b2hleCIsInV0Zjh0b2I2NHUiLCJiNjR1dG91dGY4IiwiQnVmZmVyIiwidXJpY21wdG9oZXgiLCJlbmNvZGVVUklDb21wb25lbnRBbGwiLCJoZXh0b3VyaWNtcCIsInV0Zjh0b2I2NCIsImI2NHRvdXRmOCIsImhleHRvYjY0IiwiYjY0bmx0b2hleCIsImhleHRvQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsIkRhdGFWaWV3Iiwic2V0VWludDgiLCJBcnJheUJ1ZmZlcnRvaGV4IiwiYnl0ZUxlbmd0aCIsImdldFVpbnQ4IiwienVsdXRvbXNlYyIsInp1bHV0b3NlYyIsInp1bHV0b2RhdGUiLCJkYXRldG96dWx1IiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwicmVwZWF0IiwiaGV4dG9pcHY2IiwiaGV4dG9pcCIsImlwdG9oZXgiLCJuZXdsaW5lX3RvVW5peCIsIm5ld2xpbmVfdG9Eb3MiLCJpc0ludGVnZXIiLCJpc0Jhc2U2NCIsImlzQmFzZTY0VVJMIiwiaXNJbnRlZ2VyQXJyYXkiLCJoZXh0b3Bvc2hleCIsInN0cmRpZmZpZHgiLCJESUdFU1RJTkZPSEVBRCIsIkRFRkFVTFRQUk9WSURFUiIsImhtYWNtZDUiLCJobWFjc2hhMSIsImhtYWNzaGEyMjQiLCJobWFjc2hhMjU2IiwiaG1hY3NoYTM4NCIsImhtYWNzaGE1MTIiLCJobWFjcmlwZW1kMTYwIiwiUklQRU1EMTYwd2l0aFJTQSIsIk1ENXdpdGhFQ0RTQSIsIlJJUEVNRDE2MHdpdGhFQ0RTQSIsIk1ENXdpdGhSU0FhbmRNR0YxIiwiU0hBMXdpdGhSU0FhbmRNR0YxIiwiU0hBMjI0d2l0aFJTQWFuZE1HRjEiLCJTSEEyNTZ3aXRoUlNBYW5kTUdGMSIsIlNIQTM4NHdpdGhSU0FhbmRNR0YxIiwiU0hBNTEyd2l0aFJTQWFuZE1HRjEiLCJSSVBFTUQxNjB3aXRoUlNBYW5kTUdGMSIsIkNSWVBUT0pTTUVTU0FHRURJR0VTVE5BTUUiLCJNRDUiLCJTSEExIiwiU0hBMjI0IiwiUklQRU1EMTYwIiwiZ2V0RGlnZXN0SW5mb0hleCIsImdldFBhZGRlZERpZ2VzdEluZm9IZXgiLCJkaWdlc3RTdHJpbmciLCJkaWdlc3RIZXgiLCJzaGEyNTZIZXgiLCJzaGE1MTJIZXgiLCJTRUNVUkVSQU5ET01HRU4iLCJnZXRSYW5kb21IZXhPZk5ieXRlcyIsImdldFJhbmRvbUJpZ0ludGVnZXJPZk5ieXRlcyIsImdldFJhbmRvbUhleE9mTmJpdHMiLCJnZXRSYW5kb21CaWdJbnRlZ2VyT2ZOYml0cyIsImdldFJhbmRvbUJpZ0ludGVnZXJaZXJvVG9NYXgiLCJnZXRSYW5kb21CaWdJbnRlZ2VyTWluVG9NYXgiLCJzZXRBbGdBbmRQcm92aWRlciIsIm1kIiwidXBkYXRlU3RyaW5nIiwiZGlnZXN0Iiwic2pjbCIsImNvZGVjIiwidG9CaXRzIiwiZnJvbUJpdHMiLCJhbGdOYW1lIiwicHJvdk5hbWUiLCJIQVNITEVOR1RIIiwiTWFjIiwiYWxnUHJvdiIsIm1hYyIsInBhc3MiLCJkb0ZpbmFsIiwiZG9GaW5hbFN0cmluZyIsImRvRmluYWxIZXgiLCJzZXRQYXNzd29yZCIsInV0ZjgiLCJyc3RyIiwiYjY0IiwiYjY0dSIsIl9zZXRBbGdOYW1lcyIsIm1kQWxnTmFtZSIsInB1YmtleUFsZ05hbWUiLCJfemVyb1BhZGRpbmdPZlNpZ25hdHVyZSIsInB1YktleSIsInNIYXNoSGV4IiwiZWNwcnZoZXgiLCJlY2N1cnZlbmFtZSIsImhTaWduIiwic2lnbkhleCIsInNpZ25XaXRoTWVzc2FnZUhhc2hQU1MiLCJwc3NTYWx0TGVuIiwic2lnbldpdGhNZXNzYWdlSGFzaCIsInNpZ25TdHJpbmciLCJlY3B1YmhleCIsInZlcmlmeUhleCIsInZlcmlmeVdpdGhNZXNzYWdlSGFzaFBTUyIsInZlcmlmeVdpdGhNZXNzYWdlSGFzaCIsImFsZ1Byb3ZOYW1lIiwiaW5pdFBhcmFtcyIsInBzc3NhbHRsZW4iLCJwcnZrZXlwZW0iLCJwcnZrZXlwYXMiLCJDaXBoZXIiLCJnZXRBbGdCeUtleUFuZE5hbWUiLCJkZWNyeXB0IiwiZGVjcnlwdE9BRVAiLCJvaWRoZXgybmFtZSIsImFkZDJEIiwidHdpY2UyRCIsImdldEJpZ1JhbmRvbSIsInNldE5hbWVkQ3VydmUiLCJlY3BhcmFtcyIsIkVDUGFyYW1ldGVyREIiLCJnZXRCeU5hbWUiLCJwcnZLZXlIZXgiLCJzZXRQcml2YXRlS2V5SGV4Iiwic2V0UHVibGljS2V5SGV4IiwiZ2V0UHVibGljS2V5WFlIZXgiLCJrZXlsZW4iLCJnZXRTaG9ydE5JU1RQQ3VydmVOYW1lIiwiZ2VuZXJhdGVLZXlQYWlySGV4IiwiYmlSU1NpZ1RvQVNOMVNpZyIsImZyb21CeXRlQXJyYXlVbnNpZ25lZCIsInNlcmlhbGl6ZVNpZyIsInBhcnNlU2lnSGV4IiwiZGVjb2RlRnJvbUhleCIsInZlcmlmeVJhdyIsIkJpdGNvaW4iLCJwYXJzZVNpZyIsImRlY29kZUZyb20iLCJ0b0J5dGVBcnJheVNpZ25lZCIsInBhcnNlU2lnQ29tcGFjdCIsInJlYWRQS0NTNVBydktleUhleCIsImdldE5hbWUiLCJyZWFkUEtDUzhQcnZLZXlIZXgiLCJyZWFkUEtDUzhQdWJLZXlIZXgiLCJyZWFkQ2VydFB1YktleUhleCIsInBydiIsInB1YiIsInBhcnNlU2lnSGV4SW5IZXhSUyIsImFzbjFTaWdUb0NvbmNhdFNpZyIsImNvbmNhdFNpZ1RvQVNOMVNpZyIsImhleFJTU2lnVG9BU04xU2lnIiwicmVnaXN0IiwiQUVTIiwiVHJpcGxlREVTIiwiREVTIiwiaXYiLCJjaXBoZXJ0ZXh0IiwicHJvYyIsImVwcm9jIiwiaXZsZW4iLCJjaXBoZXIiLCJpdnNhbHQiLCJrZXloZXgiLCJpdmhleCIsInZlcnNpb24iLCJwYXJzZVBLQ1M1UEVNIiwiZ2V0S2V5QW5kVW51c2VkSXZCeVBhc3Njb2RlQW5kSXZzYWx0IiwiZGVjcnlwdEtleUI2NCIsImdldERlY3J5cHRlZEtleUhleCIsImdldEVuY3J5cHRlZFBLQ1M1UEVNRnJvbVBydktleUhleCIsInRvVXBwZXJDYXNlIiwicGFyc2VIZXhPZkVuY3J5cHRlZFBLQ1M4IiwiZW5jcnlwdGlvblNjaGVtZUFsZyIsImVuY3J5cHRpb25TY2hlbWVJViIsInBia2RmMlNhbHQiLCJwYmtkZjJJdGVyIiwiZ2V0UEJLREYyS2V5SGV4RnJvbVBhcmFtIiwiUEJLREYyIiwia2V5U2l6ZSIsIml0ZXJhdGlvbnMiLCJfZ2V0UGxhaW5QS0NTOEhleEZyb21FbmNyeXB0ZWRQS0NTOFBFTSIsImdldEtleUZyb21FbmNyeXB0ZWRQS0NTOFBFTSIsImdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOEhleCIsInBhcnNlUGxhaW5Qcml2YXRlUEtDUzhIZXgiLCJhbGdwYXJhbSIsImFsZ29pZCIsImtleWlkeCIsImdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOFBFTSIsIl9nZXRLZXlGcm9tUHVibGljUEtDUzhIZXgiLCJwYXJzZVB1YmxpY1Jhd1JTQUtleUhleCIsInBhcnNlUHVibGljUEtDUzhIZXgiLCJ4eSIsImRwIiwiZHEiLCJjbyIsInFpIiwic2V0UHJpdmF0ZUV4Iiwic2V0UHJpdmF0ZSIsImdldFB1YmxpY0tleUZyb21DZXJ0UEVNIiwiZ2VuZXJhdGVLZXlwYWlyIiwiZ2VuZXJhdGUiLCJwcnZLZXlPYmoiLCJwdWJLZXlPYmoiLCJnZXRQRU0iLCJvY3RzdHIiLCJiaXRzdHIiLCJnZXRLZXlGcm9tQ1NSUEVNIiwiZ2V0S2V5RnJvbUNTUkhleCIsInBhcnNlQ1NSSGV4IiwicDhwdWJrZXloZXgiLCJnZXRKV0tGcm9tS2V5IiwiZ2V0UG9zQXJyYXlPZkNoaWxkcmVuRnJvbUhleCIsImdldEhleFZhbHVlQXJyYXlPZkNoaWxkcmVuRnJvbUhleCIsInJlYWRQcml2YXRlS2V5RnJvbVBFTVN0cmluZyIsInJlYWRQS0NTNVB1YktleUhleCIsInJlYWRDZXJ0SGV4IiwiZ2V0UHVibGljS2V5SGV4IiwiX1JFX0hFWERFQ09OTFkiLCJjb21waWxlIiwiX3JzYXNpZ25fZ2V0SGV4UGFkZGVkRGlnZXN0SW5mb0ZvclN0cmluZyIsImRvUHJpdmF0ZSIsInBzc19tZ2YxX3N0ciIsInNpZ25QU1MiLCJfcnNhc2lnbl9nZXREZWNyeXB0U2lnbmF0dXJlQkkiLCJfcnNhc2lnbl9nZXRIZXhEaWdlc3RJbmZvRnJvbVNpZyIsIl9yc2FzaWduX2dldEFsZ05hbWVBbmRIYXNoRnJvbUhleERpc2dlc3RJbmZvIiwidmVyaWZ5UFNTIiwiU0FMVF9MRU5fSExFTiIsIlNBTFRfTEVOX01BWCIsIlNBTFRfTEVOX1JFQ09WRVIiLCJmb2Zmc2V0IiwiYUV4dEluZm8iLCJnZXRWZXJzaW9uIiwiZ2V0U2VyaWFsTnVtYmVySGV4IiwiZ2V0U2lnbmF0dXJlQWxnb3JpdGhtRmllbGQiLCJnZXRJc3N1ZXJTdHJpbmciLCJoZXgyZG4iLCJnZXRTdWJqZWN0U3RyaW5nIiwiZ2V0Tm90QmVmb3JlIiwiZ2V0Tm90QWZ0ZXIiLCJnZXRQdWJsaWNLZXlJZHgiLCJnZXRQdWJsaWNLZXlDb250ZW50SWR4IiwiZ2V0UHVibGljS2V5IiwiZ2V0U2lnbmF0dXJlQWxnb3JpdGhtTmFtZSIsImdldFNpZ25hdHVyZVZhbHVlSGV4IiwidmVyaWZ5U2lnbmF0dXJlIiwicGFyc2VFeHQiLCJ2aWR4IiwiZ2V0RXh0SW5mbyIsImdldEV4dEJhc2ljQ29uc3RyYWludHMiLCJnZXRFeHRLZXlVc2FnZUJpbiIsImdldEV4dEtleVVzYWdlU3RyaW5nIiwiZ2V0RXh0U3ViamVjdEtleUlkZW50aWZpZXIiLCJnZXRFeHRBdXRob3JpdHlLZXlJZGVudGlmaWVyIiwiZ2V0RXh0RXh0S2V5VXNhZ2VOYW1lIiwiZ2V0RXh0U3ViamVjdEFsdE5hbWUiLCJnZXRFeHRTdWJqZWN0QWx0TmFtZTIiLCJnZXRFeHRDUkxEaXN0cmlidXRpb25Qb2ludHNVUkkiLCJnZXRFeHRBSUFJbmZvIiwiY2Fpc3N1ZXIiLCJnZXRFeHRDZXJ0aWZpY2F0ZVBvbGljaWVzIiwiY3BzIiwidW5vdGljZSIsInJlYWRDZXJ0UEVNIiwiZ2V0SW5mbyIsImhleDJyZG4iLCJoZXgyYXR0clR5cGVWYWx1ZSIsImdldFB1YmxpY0tleUluZm9Qcm9wT2ZDZXJ0UEVNIiwiaXNTYWZlSlNPTlN0cmluZyIsInBhcnNlSldTIiwicGFyc2VkSldTIiwic2lndmFsSCIsImhlYWRCNjRVIiwicGF5bG9hZEI2NFUiLCJzaWd2YWxCNjRVIiwic2kiLCJzaWd2YWxCSSIsImhlYWRTIiwicGF5bG9hZFMiLCJyZWFkU2FmZUpTT05TdHJpbmciLCJqd3NhbGcyc2lnYWxnIiwiaEFTTjFTaWciLCJoZWFkZXJQUCIsInBheWxvYWRQUCIsInNpZ0hleCIsInZlcmlmeUpXVCIsImluQXJyYXkiLCJpbmNsdWRlZEFycmF5IiwiSW50RGF0ZSIsImdldE5vdyIsInZlcmlmeUF0IiwiZ3JhY2VQZXJpb2QiLCJqdGkiLCJIUzI1NiIsIkhTMzg0IiwiSFM1MTIiLCJSUzI1NiIsIlJTMzg0IiwiUlM1MTIiLCJFUzI1NiIsIkVTMzg0IiwiUFMyNTYiLCJQUzM4NCIsIlBTNTEyIiwibm9uZSIsImdldEVuY29kZWRTaWduYXR1cmVWYWx1ZUZyb21KV1MiLCJnZXRKV0t0aHVtYnByaW50IiwiZ2V0WnVsdSIsImludERhdGUyVVRDU3RyaW5nIiwidG9VVENTdHJpbmciLCJpbnREYXRlMlp1bHUiLCJleHBvcnRzIiwib2lkYyIsImlzT2lkYyIsImlzT0F1dGgiLCJPaWRjU2NvcGUiLCJzY29wZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiU2lsZW50UmVuZXdTZXJ2aWNlQ3RvciIsIlNpbGVudFJlbmV3U2VydmljZSIsIlNlc3Npb25Nb25pdG9yQ3RvciIsIlRva2VuUmV2b2NhdGlvbkNsaWVudEN0b3IiLCJVc2VyTWFuYWdlclNldHRpbmdzIiwiX2V2ZW50cyIsIlVzZXJNYW5hZ2VyRXZlbnRzIiwiX3NpbGVudFJlbmV3U2VydmljZSIsImF1dG9tYXRpY1NpbGVudFJlbmV3Iiwic3RhcnRTaWxlbnRSZW5ldyIsIm1vbml0b3JTZXNzaW9uIiwiX3Nlc3Npb25Nb25pdG9yIiwiX3Rva2VuUmV2b2NhdGlvbkNsaWVudCIsIl9sb2FkVXNlciIsInJlbW92ZVVzZXIiLCJzdG9yZVVzZXIiLCJzaWduaW5SZWRpcmVjdCIsIl9zaWduaW5TdGFydCIsIl9yZWRpcmVjdE5hdmlnYXRvciIsInNpZ25pblJlZGlyZWN0Q2FsbGJhY2siLCJfc2lnbmluRW5kIiwic2lnbmluUG9wdXAiLCJwb3B1cF9yZWRpcmVjdF91cmkiLCJfc2lnbmluIiwiX3BvcHVwTmF2aWdhdG9yIiwic2lnbmluUG9wdXBDYWxsYmFjayIsIl9zaWduaW5DYWxsYmFjayIsInNpZ25pblNpbGVudCIsInNpbGVudF9yZWRpcmVjdF91cmkiLCJzZXRJZFRva2VuIiwiaW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3IiwiX2lmcmFtZU5hdmlnYXRvciIsInNpbGVudFJlcXVlc3RUaW1lb3V0Iiwic2lnbmluU2lsZW50Q2FsbGJhY2siLCJuYXZSZXNwb25zZSIsInNpZ25pblJlc3BvbnNlIiwibmF2aWdhdG9yUGFyYW1zIiwicHJlcGFyZSIsInNpZ25vdXRSZWRpcmVjdCIsInBvc3RMb2dvdXRSZWRpcmVjdFVyaSIsIl9zaWdub3V0U3RhcnQiLCJzaWdub3V0UmVkaXJlY3RDYWxsYmFjayIsIl9zaWdub3V0RW5kIiwic2lnbm91dFBvcHVwIiwicG9wdXBfcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpIiwiX3NpZ25vdXQiLCJzaWdub3V0UG9wdXBDYWxsYmFjayIsImtlZXBPcGVuIiwicmV2b2tlUHJvbWlzZSIsInJldm9rZUFjY2Vzc1Rva2VuT25TaWdub3V0IiwiX3Jldm9rZUludGVybmFsIiwic2lnbm91dFJlcXVlc3QiLCJzaWdub3V0UmVzcG9uc2UiLCJyZXZva2VBY2Nlc3NUb2tlbiIsInN1Y2Nlc3MiLCJzdG9wU2lsZW50UmVuZXciLCJfdXNlclN0b3JlIiwiX3VzZXJTdG9yZUtleSIsInJlZGlyZWN0TmF2aWdhdG9yIiwicG9wdXBOYXZpZ2F0b3IiLCJpZnJhbWVOYXZpZ2F0b3IiLCJ1c2VyU3RvcmUiLCJEZWZhdWx0Q2hlY2tTZXNzaW9uSW50ZXJ2YWwiLCJSZWRpcmVjdE5hdmlnYXRvciIsIlBvcHVwTmF2aWdhdG9yIiwiSUZyYW1lTmF2aWdhdG9yIiwiX3BvcHVwX3JlZGlyZWN0X3VyaSIsIl9wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkiLCJfcG9wdXBXaW5kb3dGZWF0dXJlcyIsIl9wb3B1cFdpbmRvd1RhcmdldCIsIl9zaWxlbnRfcmVkaXJlY3RfdXJpIiwiX3NpbGVudFJlcXVlc3RUaW1lb3V0IiwiX2F1dG9tYXRpY1NpbGVudFJlbmV3IiwiX2luY2x1ZGVJZFRva2VuSW5TaWxlbnRSZW5ldyIsIl9tb25pdG9yU2Vzc2lvbiIsIl9yZXZva2VBY2Nlc3NUb2tlbk9uU2lnbm91dCIsInBvcHVwIiwiUG9wdXBXaW5kb3ciLCJub3RpZnlPcGVuZXIiLCJDaGVja0ZvclBvcHVwQ2xvc2VkSW50ZXJ2YWwiLCJfY2hlY2tGb3JQb3B1cENsb3NlZFRpbWVyIiwiX2NoZWNrRm9yUG9wdXBDbG9zZWQiLCJmb2N1cyIsImNsb3NlZCIsIm9wZW5lciIsImZyYW1lIiwiSUZyYW1lV2luZG93Iiwibm90aWZ5UGFyZW50IiwiRGVmYXVsdFRpbWVvdXQiLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsIl90aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwicmVtb3ZlQ2hpbGQiLCJfb3JpZ2luIiwicGFyZW50IiwicHJvdG9jb2wiLCJob3N0IiwiX3VzZXJMb2FkZWQiLCJfdXNlclVubG9hZGVkIiwiX3NpbGVudFJlbmV3RXJyb3IiLCJfdXNlclNpZ25lZE91dCIsIl91c2VyU2Vzc2lvbkNoYW5nZWQiLCJyYWlzZUV2ZW50IiwicmVtb3ZlVXNlckxvYWRlZCIsInJlbW92ZVVzZXJVbmxvYWRlZCIsImFkZFNpbGVudFJlbmV3RXJyb3IiLCJyZW1vdmVTaWxlbnRSZW5ld0Vycm9yIiwiX3JhaXNlU2lsZW50UmVuZXdFcnJvciIsImFkZFVzZXJTaWduZWRPdXQiLCJyZW1vdmVVc2VyU2lnbmVkT3V0IiwiYWRkVXNlclNlc3Npb25DaGFuZ2VkIiwicmVtb3ZlVXNlclNlc3Npb25DaGFuZ2VkIiwiVGltZXJEdXJhdGlvbiIsIm5vd0Z1bmMiLCJfbm93RnVuYyIsImV4cGlyYXRpb24iLCJfdGltZXJIYW5kbGUiLCJfZXhwaXJhdGlvbiIsInRpbWVyRHVyYXRpb24iLCJkaWZmIiwiX3Rva2VuRXhwaXJpbmciXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxPO0FDVkE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzdEQTtBQUNBOztBQUVBLElBQUlBLFlBQVk7QUFDWkMsU0FEWSxtQkFDTCxDQUFFLENBREc7QUFFWkMsUUFGWSxrQkFFTixDQUFFLENBRkk7QUFHWkMsUUFIWSxr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dkMsRUFBMEMsRUFBMUMsRUFBNkMsRUFBN0MsRUFBZ0QsRUFBaEQsRUFBbUQsRUFBbkQsRUFBc0QsRUFBdEQsRUFBeUQsRUFBekQsRUFBNEQsRUFBNUQsRUFBK0QsRUFBL0QsRUFBa0UsRUFBbEUsRUFBcUUsRUFBckUsRUFBd0UsR0FBeEUsRUFBNEUsR0FBNUUsRUFBZ0YsR0FBaEYsRUFBb0YsR0FBcEYsRUFBd0YsR0FBeEYsRUFBNEYsR0FBNUYsRUFBZ0csR0FBaEcsRUFBb0csR0FBcEcsRUFBd0csR0FBeEcsRUFBNEcsR0FBNUcsRUFBZ0gsR0FBaEgsRUFBb0gsR0FBcEgsRUFBd0gsR0FBeEgsRUFBNEgsR0FBNUgsRUFBZ0ksR0FBaEksRUFBb0ksR0FBcEksRUFBd0ksR0FBeEksRUFBNEksR0FBNUksRUFBZ0osR0FBaEosRUFBb0osR0FBcEosRUFBd0osR0FBeEosRUFBNEosR0FBNUosRUFBZ0ssR0FBaEssRUFBb0ssR0FBcEssRUFBd0ssR0FBeEssRUFBNEssR0FBNUssRUFBZ0wsR0FBaEwsRUFBb0wsR0FBcEwsRUFBd0wsR0FBeEwsRUFBNEwsR0FBNUwsRUFBZ00sR0FBaE0sRUFBb00sR0FBcE0sRUFBd00sR0FBeE0sRUFBNE0sR0FBNU0sRUFBZ04sR0FBaE4sRUFBb04sR0FBcE4sRUFBd04sR0FBeE4sRUFBNE4sR0FBNU4sRUFBZ08sR0FBaE8sRUFBb08sR0FBcE8sRUFBd08sR0FBeE8sRUFBNE8sR0FBNU8sRUFBZ1AsR0FBaFAsRUFBb1AsR0FBcFAsRUFBd1AsR0FBeFAsRUFBNFAsR0FBNVAsRUFBZ1EsR0FBaFEsRUFBb1EsR0FBcFEsRUFBd1EsR0FBeFEsRUFBNFEsR0FBNVEsRUFBZ1IsR0FBaFIsRUFBb1IsR0FBcFIsRUFBd1IsR0FBeFIsRUFBNFIsR0FBNVIsRUFBZ1MsR0FBaFMsRUFBb1MsR0FBcFMsRUFBd1MsR0FBeFMsRUFBNFMsR0FBNVMsRUFBZ1QsR0FBaFQsRUFBb1QsR0FBcFQsRUFBd1QsR0FBeFQsRUFBNFQsR0FBNVQsRUFBZ1UsR0FBaFUsRUFBb1UsR0FBcFUsRUFBd1UsR0FB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsVUFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELEVBQUU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQSxxQkFBcUIsZUFBZTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQsT0FBTztBQUM5RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdURBQXVELE9BQU87QUFDOUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLFFBQVE7QUFDN0I7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixZQUFZO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUM1dkRBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDOzs7Ozs7OztBQ3BCQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDLFNBQVM7QUFDM0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsU0FBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBDQUEwQyxVQUFVO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFD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QUVHLGVBQU87QUFDTlcscUJBQUlSLEtBQUosQ0FBVSw2REFBVixFQUF5RXdSLElBQUl4RyxPQUE3RTtBQUNBLGtCQUFLNkYsWUFBTCxDQUFrQkUsTUFBbEIsQ0FBeUJzNEMsc0JBQXpCLENBQWdENzNDLEdBQWhEO0FBQ0gsU0FMRDtBQU1ILEs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDckNMOzswSkFIQTtBQUNBOztJQUlhdUYscUIsV0FBQUEscUI7Ozs7O29DQUVUK3RDLE8sb0JBQVEvL0MsTSxFQUFRO0FBQ1osWUFBSXNpRCxRQUFRLElBQUlyeUMsc0NBQUosQ0FBdUJqUSxNQUF2QixDQUFaO0FBQ0EsZUFBT3JDLFFBQVFDLE9BQVIsQ0FBZ0Iwa0QsS0FBaEIsQ0FBUDtBQUNILEs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDUEw7OzBKQUhBO0FBQ0E7O0lBSWFyd0Msc0IsV0FBQUEsc0I7Ozs7O3FDQUVUOHRDLE8sb0JBQVEvL0MsTSxFQUFRO0FBQ1pBLGVBQU9zUSxtQkFBUCxHQUE2QixZQUE3QjtBQUNBLFlBQUlneUMsUUFBUSxJQUFJcnlDLHNDQUFKLENBQXVCalEsTUFBdkIsQ0FBWjtBQUNBLGVBQU9yQyxRQUFRQyxPQUFSLENBQWdCMGtELEtBQWhCLENBQVA7QUFDSCxLIiwiZmlsZSI6Im9pZGMtY2xpZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IGZhY3RvcnkoKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDU1NjIzNTU3NmIyOTEzMWQ2YWU1IiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxubGV0IG5vcExvZ2dlciA9IHtcclxuICAgIGRlYnVnKCl7fSxcclxuICAgIGluZm8oKXt9LFxyXG4gICAgd2Fybigpe30sXHJcbiAgICBlcnJvcigpe31cclxufTtcclxuXHJcbmNvbnN0IE5PTkUgPSAwO1xyXG5jb25zdCBFUlJPUiA9IDE7XHJcbmNvbnN0IFdBUk4gPSAyO1xyXG5jb25zdCBJTkZPID0gMztcclxuY29uc3QgREVCVUcgPSA0O1xyXG5cclxubGV0IGxvZ2dlcjtcclxubGV0IGxldmVsO1xyXG5cclxuZXhwb3J0IGNsYXNzIExvZyB7XHJcbiAgICBzdGF0aWMgZ2V0IE5PTkUoKSB7cmV0dXJuIE5PTkV9O1xyXG4gICAgc3RhdGljIGdldCBFUlJPUigpIHtyZXR1cm4gRVJST1J9O1xyXG4gICAgc3RhdGljIGdldCBXQVJOKCkge3JldHVybiBXQVJOfTtcclxuICAgIHN0YXRpYyBnZXQgSU5GTygpIHtyZXR1cm4gSU5GT307XHJcbiAgICBzdGF0aWMgZ2V0IERFQlVHKCkge3JldHVybiBERUJVR307XHJcbiAgICBcclxuICAgIHN0YXRpYyByZXNldCgpe1xyXG4gICAgICAgIGxldmVsID0gSU5GTztcclxuICAgICAgICBsb2dnZXIgPSBub3BMb2dnZXI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHN0YXRpYyBnZXQgbGV2ZWwoKXtcclxuICAgICAgICByZXR1cm4gbGV2ZWw7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgc2V0IGxldmVsKHZhbHVlKXtcclxuICAgICAgICBpZiAoTk9ORSA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSBERUJVRyl7XHJcbiAgICAgICAgICAgIGxldmVsID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGxvZyBsZXZlbFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHN0YXRpYyBnZXQgbG9nZ2VyKCl7XHJcbiAgICAgICAgcmV0dXJuIGxvZ2dlcjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBzZXQgbG9nZ2VyKHZhbHVlKXtcclxuICAgICAgICBpZiAoIXZhbHVlLmRlYnVnICYmIHZhbHVlLmluZm8pIHtcclxuICAgICAgICAgICAgLy8ganVzdCB0byBzdGF5IGJhY2t3YXJkcyBjb21wYXQuIGNhbiByZW1vdmUgaW4gMi4wXHJcbiAgICAgICAgICAgIHZhbHVlLmRlYnVnID0gdmFsdWUuaW5mbztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZS5kZWJ1ZyAmJiB2YWx1ZS5pbmZvICYmIHZhbHVlLndhcm4gJiYgdmFsdWUuZXJyb3Ipe1xyXG4gICAgICAgICAgICBsb2dnZXIgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9nZ2VyXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RhdGljIGRlYnVnKC4uLmFyZ3Mpe1xyXG4gICAgICAgIGlmIChsZXZlbCA+PSBERUJVRyl7XHJcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1Zy5hcHBseShsb2dnZXIsIEFycmF5LmZyb20oYXJncykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBpbmZvKC4uLmFyZ3Mpe1xyXG4gICAgICAgIGlmIChsZXZlbCA+PSBJTkZPKXtcclxuICAgICAgICAgICAgbG9nZ2VyLmluZm8uYXBwbHkobG9nZ2VyLCBBcnJheS5mcm9tKGFyZ3MpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgd2FybiguLi5hcmdzKXtcclxuICAgICAgICBpZiAobGV2ZWwgPj0gV0FSTil7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuLmFwcGx5KGxvZ2dlciwgQXJyYXkuZnJvbShhcmdzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGVycm9yKC4uLmFyZ3Mpe1xyXG4gICAgICAgIGlmIChsZXZlbCA+PSBFUlJPUil7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvci5hcHBseShsb2dnZXIsIEFycmF5LmZyb20oYXJncykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuTG9nLnJlc2V0KCk7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Mb2cuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5jb25zdCB0aW1lciA9IHtcclxuICAgIHNldEludGVydmFsOiBmdW5jdGlvbiAoY2IsIGR1cmF0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHNldEludGVydmFsKGNiLCBkdXJhdGlvbik7XHJcbiAgICB9LFxyXG4gICAgY2xlYXJJbnRlcnZhbDogZnVuY3Rpb24gKGhhbmRsZSkge1xyXG4gICAgICAgIHJldHVybiBjbGVhckludGVydmFsKGhhbmRsZSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5sZXQgdGVzdGluZyA9IGZhbHNlO1xyXG5sZXQgcmVxdWVzdCA9IG51bGw7XHJcblxyXG5leHBvcnQgY2xhc3MgR2xvYmFsIHtcclxuXHJcbiAgICBzdGF0aWMgX3Rlc3RpbmcoKSB7XHJcbiAgICAgICAgdGVzdGluZyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldCBsb2NhdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRlc3RpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0IGxvY2FsU3RvcmFnZSgpIHtcclxuICAgICAgICBpZiAoIXRlc3RpbmcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldCBzZXNzaW9uU3RvcmFnZSgpIHtcclxuICAgICAgICBpZiAoIXRlc3RpbmcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgc2V0WE1MSHR0cFJlcXVlc3QobmV3UmVxdWVzdCkge1xyXG4gICAgICAgIHJlcXVlc3QgPSBuZXdSZXF1ZXN0O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXQgWE1MSHR0cFJlcXVlc3QoKSB7XHJcbiAgICAgICAgaWYgKCF0ZXN0aW5nICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0IHx8IFhNTEh0dHBSZXF1ZXN0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0IHRpbWVyKCkge1xyXG4gICAgICAgIGlmICghdGVzdGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGltZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9HbG9iYWwuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCB7IEpzb25TZXJ2aWNlIH0gZnJvbSAnLi9Kc29uU2VydmljZSc7XHJcblxyXG5jb25zdCBPaWRjTWV0YWRhdGFVcmxQYXRoID0gJy53ZWxsLWtub3duL29wZW5pZC1jb25maWd1cmF0aW9uJztcclxuXHJcbmV4cG9ydCBjbGFzcyBNZXRhZGF0YVNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIEpzb25TZXJ2aWNlQ3RvciA9IEpzb25TZXJ2aWNlKSB7XHJcbiAgICAgICAgaWYgKCFzZXR0aW5ncykge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJNZXRhZGF0YVNlcnZpY2U6IE5vIHNldHRpbmdzIHBhc3NlZCB0byBNZXRhZGF0YVNlcnZpY2VcIik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInNldHRpbmdzXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgICAgICB0aGlzLl9qc29uU2VydmljZSA9IG5ldyBKc29uU2VydmljZUN0b3IoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbWV0YWRhdGFVcmwoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9tZXRhZGF0YVVybCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MubWV0YWRhdGFVcmwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21ldGFkYXRhVXJsID0gdGhpcy5fc2V0dGluZ3MubWV0YWRhdGFVcmw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCA9IHRoaXMuX3NldHRpbmdzLmF1dGhvcml0eTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWV0YWRhdGFVcmwgJiYgdGhpcy5fbWV0YWRhdGFVcmwuaW5kZXhPZihPaWRjTWV0YWRhdGFVcmxQYXRoKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWV0YWRhdGFVcmxbdGhpcy5fbWV0YWRhdGFVcmwubGVuZ3RoIC0gMV0gIT09ICcvJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCArPSAnLyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21ldGFkYXRhVXJsICs9IE9pZGNNZXRhZGF0YVVybFBhdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVVybDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRNZXRhZGF0YSgpIHtcclxuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MubWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhOiBSZXR1cm5pbmcgbWV0YWRhdGEgZnJvbSBzZXR0aW5nc1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9zZXR0aW5ncy5tZXRhZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMubWV0YWRhdGFVcmwpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhOiBObyBhdXRob3JpdHkgb3IgbWV0YWRhdGFVcmwgY29uZmlndXJlZCBvbiBzZXR0aW5nc1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGF1dGhvcml0eSBvciBtZXRhZGF0YVVybCBjb25maWd1cmVkIG9uIHNldHRpbmdzXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YTogZ2V0dGluZyBtZXRhZGF0YSBmcm9tXCIsIHRoaXMubWV0YWRhdGFVcmwpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fanNvblNlcnZpY2UuZ2V0SnNvbih0aGlzLm1ldGFkYXRhVXJsKVxyXG4gICAgICAgICAgICAudGhlbihtZXRhZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0TWV0YWRhdGE6IGpzb24gcmVjZWl2ZWRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXR0aW5ncy5tZXRhZGF0YSA9IG1ldGFkYXRhO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRJc3N1ZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJpc3N1ZXJcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXV0aG9yaXphdGlvbkVuZHBvaW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiYXV0aG9yaXphdGlvbl9lbmRwb2ludFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRVc2VySW5mb0VuZHBvaW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwidXNlcmluZm9fZW5kcG9pbnRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VG9rZW5FbmRwb2ludCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcInRva2VuX2VuZHBvaW50XCIsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENoZWNrU2Vzc2lvbklmcmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcImNoZWNrX3Nlc3Npb25faWZyYW1lXCIsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEVuZFNlc3Npb25FbmRwb2ludCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcImVuZF9zZXNzaW9uX2VuZHBvaW50XCIsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJldm9jYXRpb25FbmRwb2ludCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcInJldm9jYXRpb25fZW5kcG9pbnRcIiwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2dldE1ldGFkYXRhUHJvcGVydHkobmFtZSwgb3B0aW9uYWw9ZmFsc2UpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0TWV0YWRhdGFQcm9wZXJ0eSBmb3I6IFwiICsgbmFtZSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldE1ldGFkYXRhKCkudGhlbihtZXRhZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YVByb3BlcnR5OiBtZXRhZGF0YSByZWNpZXZlZFwiKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YVtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbmFsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLndhcm4oXCJNZXRhZGF0YVNlcnZpY2UuZ2V0TWV0YWRhdGFQcm9wZXJ0eTogTWV0YWRhdGEgZG9lcyBub3QgY29udGFpbiBvcHRpb25hbCBwcm9wZXJ0eSBcIiArIG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0TWV0YWRhdGFQcm9wZXJ0eTogTWV0YWRhdGEgZG9lcyBub3QgY29udGFpbiBwcm9wZXJ0eSBcIiArIG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGFkYXRhIGRvZXMgbm90IGNvbnRhaW4gcHJvcGVydHkgXCIgKyBuYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhW25hbWVdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNpZ25pbmdLZXlzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5zaWduaW5nS2V5cykge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0U2lnbmluZ0tleXM6IFJldHVybmluZyBzaWduaW5nS2V5cyBmcm9tIHNldHRpbmdzXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX3NldHRpbmdzLnNpZ25pbmdLZXlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiandrc191cmlcIikudGhlbihqd2tzX3VyaSA9PiB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRTaWduaW5nS2V5czogandrc191cmkgcmVjZWl2ZWRcIiwgandrc191cmkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb25TZXJ2aWNlLmdldEpzb24oandrc191cmkpLnRoZW4oa2V5U2V0ID0+IHtcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRTaWduaW5nS2V5czoga2V5IHNldCByZWNlaXZlZFwiLCBrZXlTZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgha2V5U2V0LmtleXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0U2lnbmluZ0tleXM6IE1pc3Npbmcga2V5cyBvbiBrZXlzZXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBrZXlzIG9uIGtleXNldFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXR0aW5ncy5zaWduaW5nS2V5cyA9IGtleVNldC5rZXlzO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLnNpZ25pbmdLZXlzO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvTWV0YWRhdGFTZXJ2aWNlLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICcuL0dsb2JhbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgVXJsVXRpbGl0eSB7XHJcbiAgICBzdGF0aWMgYWRkUXVlcnlQYXJhbSh1cmwsIG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHVybC5pbmRleE9mKCc/JykgPCAwKSB7XHJcbiAgICAgICAgICAgIHVybCArPSBcIj9cIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh1cmxbdXJsLmxlbmd0aCAtIDFdICE9PSBcIj9cIikge1xyXG4gICAgICAgICAgICB1cmwgKz0gXCImXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1cmwgKz0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpO1xyXG4gICAgICAgIHVybCArPSBcIj1cIjtcclxuICAgICAgICB1cmwgKz0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcGFyc2VVcmxGcmFnbWVudCh2YWx1ZSwgZGVsaW1pdGVyID0gXCIjXCIsIGdsb2JhbCA9IEdsb2JhbCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKXtcclxuICAgICAgICAgICAgdmFsdWUgPSBnbG9iYWwubG9jYXRpb24uaHJlZjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBpZHggPSB2YWx1ZS5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpO1xyXG4gICAgICAgIGlmIChpZHggPj0gMCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cihpZHggKyAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBwYXJhbXMgPSB7fSxcclxuICAgICAgICAgICAgcmVnZXggPSAvKFteJj1dKyk9KFteJl0qKS9nLFxyXG4gICAgICAgICAgICBtO1xyXG5cclxuICAgICAgICB2YXIgY291bnRlciA9IDA7XHJcbiAgICAgICAgd2hpbGUgKG0gPSByZWdleC5leGVjKHZhbHVlKSkge1xyXG4gICAgICAgICAgICBwYXJhbXNbZGVjb2RlVVJJQ29tcG9uZW50KG1bMV0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChtWzJdKTtcclxuICAgICAgICAgICAgaWYgKGNvdW50ZXIrKyA+IDUwKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJVcmxVdGlsaXR5LnBhcnNlVXJsRnJhZ21lbnQ6IHJlc3BvbnNlIGV4Y2VlZGVkIGV4cGVjdGVkIG51bWJlciBvZiBwYXJhbWV0ZXJzXCIsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IFwiUmVzcG9uc2UgZXhjZWVkZWQgZXhwZWN0ZWQgbnVtYmVyIG9mIHBhcmFtZXRlcnNcIlxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBwYXJhbXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvVXJsVXRpbGl0eS5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgV2ViU3RvcmFnZVN0YXRlU3RvcmUgfSBmcm9tICcuL1dlYlN0b3JhZ2VTdGF0ZVN0b3JlJztcclxuaW1wb3J0IHsgUmVzcG9uc2VWYWxpZGF0b3IgfSBmcm9tICcuL1Jlc3BvbnNlVmFsaWRhdG9yJztcclxuaW1wb3J0IHsgTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9NZXRhZGF0YVNlcnZpY2UnO1xyXG5cclxuY29uc3QgT2lkY01ldGFkYXRhVXJsUGF0aCA9ICcud2VsbC1rbm93bi9vcGVuaWQtY29uZmlndXJhdGlvbic7XHJcblxyXG5jb25zdCBEZWZhdWx0UmVzcG9uc2VUeXBlID0gXCJpZF90b2tlblwiO1xyXG5jb25zdCBEZWZhdWx0U2NvcGUgPSBcIm9wZW5pZFwiO1xyXG5jb25zdCBEZWZhdWx0U3RhbGVTdGF0ZUFnZSA9IDYwICogMTU7IC8vIHNlY29uZHNcclxuY29uc3QgRGVmYXVsdENsb2NrU2tld0luU2Vjb25kcyA9IDYwICogNTtcclxuXHJcbmV4cG9ydCBjbGFzcyBPaWRjQ2xpZW50U2V0dGluZ3Mge1xyXG4gICAgY29uc3RydWN0b3Ioe1xyXG4gICAgICAgIC8vIG1ldGFkYXRhIHJlbGF0ZWRcclxuICAgICAgICBhdXRob3JpdHksIG1ldGFkYXRhVXJsLCBtZXRhZGF0YSwgc2lnbmluZ0tleXMsXHJcbiAgICAgICAgLy8gY2xpZW50IHJlbGF0ZWRcclxuICAgICAgICBjbGllbnRfaWQsIGNsaWVudF9zZWNyZXQsIHJlc3BvbnNlX3R5cGUgPSBEZWZhdWx0UmVzcG9uc2VUeXBlLCBzY29wZSA9IERlZmF1bHRTY29wZSxcclxuICAgICAgICByZWRpcmVjdF91cmksIHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSxcclxuICAgICAgICAvLyBvcHRpb25hbCBwcm90b2NvbFxyXG4gICAgICAgIHByb21wdCwgZGlzcGxheSwgbWF4X2FnZSwgdWlfbG9jYWxlcywgYWNyX3ZhbHVlcywgcmVzb3VyY2UsXHJcbiAgICAgICAgLy8gYmVoYXZpb3IgZmxhZ3NcclxuICAgICAgICBmaWx0ZXJQcm90b2NvbENsYWltcyA9IHRydWUsIGxvYWRVc2VySW5mbyA9IHRydWUsXHJcbiAgICAgICAgc3RhbGVTdGF0ZUFnZSA9IERlZmF1bHRTdGFsZVN0YXRlQWdlLCBjbG9ja1NrZXcgPSBEZWZhdWx0Q2xvY2tTa2V3SW5TZWNvbmRzLFxyXG4gICAgICAgIC8vIG90aGVyIGJlaGF2aW9yXHJcbiAgICAgICAgc3RhdGVTdG9yZSA9IG5ldyBXZWJTdG9yYWdlU3RhdGVTdG9yZSgpLFxyXG4gICAgICAgIFJlc3BvbnNlVmFsaWRhdG9yQ3RvciA9IFJlc3BvbnNlVmFsaWRhdG9yLFxyXG4gICAgICAgIE1ldGFkYXRhU2VydmljZUN0b3IgPSBNZXRhZGF0YVNlcnZpY2UsXHJcbiAgICAgICAgLy8gZXh0cmEgcXVlcnkgcGFyYW1zXHJcbiAgICAgICAgZXh0cmFRdWVyeVBhcmFtcyA9IHt9XHJcbiAgICB9ID0ge30pIHtcclxuXHJcbiAgICAgICAgdGhpcy5fYXV0aG9yaXR5ID0gYXV0aG9yaXR5O1xyXG4gICAgICAgIHRoaXMuX21ldGFkYXRhVXJsID0gbWV0YWRhdGFVcmw7XHJcbiAgICAgICAgdGhpcy5fbWV0YWRhdGEgPSBtZXRhZGF0YTtcclxuICAgICAgICB0aGlzLl9zaWduaW5nS2V5cyA9IHNpZ25pbmdLZXlzO1xyXG5cclxuICAgICAgICB0aGlzLl9jbGllbnRfaWQgPSBjbGllbnRfaWQ7XHJcbiAgICAgICAgdGhpcy5fY2xpZW50X3NlY3JldCA9IGNsaWVudF9zZWNyZXQ7XHJcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VfdHlwZSA9IHJlc3BvbnNlX3R5cGU7XHJcbiAgICAgICAgdGhpcy5fc2NvcGUgPSBzY29wZTtcclxuICAgICAgICB0aGlzLl9yZWRpcmVjdF91cmkgPSByZWRpcmVjdF91cmk7XHJcbiAgICAgICAgdGhpcy5fcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpID0gcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO1xyXG5cclxuICAgICAgICB0aGlzLl9wcm9tcHQgPSBwcm9tcHQ7XHJcbiAgICAgICAgdGhpcy5fZGlzcGxheSA9IGRpc3BsYXk7XHJcbiAgICAgICAgdGhpcy5fbWF4X2FnZSA9IG1heF9hZ2U7XHJcbiAgICAgICAgdGhpcy5fdWlfbG9jYWxlcyA9IHVpX2xvY2FsZXM7XHJcbiAgICAgICAgdGhpcy5fYWNyX3ZhbHVlcyA9IGFjcl92YWx1ZXM7XHJcbiAgICAgICAgdGhpcy5fcmVzb3VyY2UgPSByZXNvdXJjZTtcclxuXHJcbiAgICAgICAgdGhpcy5fZmlsdGVyUHJvdG9jb2xDbGFpbXMgPSAhIWZpbHRlclByb3RvY29sQ2xhaW1zO1xyXG4gICAgICAgIHRoaXMuX2xvYWRVc2VySW5mbyA9ICEhbG9hZFVzZXJJbmZvO1xyXG4gICAgICAgIHRoaXMuX3N0YWxlU3RhdGVBZ2UgPSBzdGFsZVN0YXRlQWdlO1xyXG4gICAgICAgIHRoaXMuX2Nsb2NrU2tldyA9IGNsb2NrU2tldztcclxuXHJcbiAgICAgICAgdGhpcy5fc3RhdGVTdG9yZSA9IHN0YXRlU3RvcmU7XHJcbiAgICAgICAgdGhpcy5fdmFsaWRhdG9yID0gbmV3IFJlc3BvbnNlVmFsaWRhdG9yQ3Rvcih0aGlzKTtcclxuICAgICAgICB0aGlzLl9tZXRhZGF0YVNlcnZpY2UgPSBuZXcgTWV0YWRhdGFTZXJ2aWNlQ3Rvcih0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZXh0cmFRdWVyeVBhcmFtcyA9IHR5cGVvZiBleHRyYVF1ZXJ5UGFyYW1zID09PSAnb2JqZWN0JyA/IGV4dHJhUXVlcnlQYXJhbXMgOiB7fTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjbGllbnQgY29uZmlnXHJcbiAgICBnZXQgY2xpZW50X2lkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRfaWQ7XHJcbiAgICB9XHJcbiAgICBzZXQgY2xpZW50X2lkKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9jbGllbnRfaWQpIHtcclxuICAgICAgICAgICAgLy8gb25lLXRpbWUgc2V0IG9ubHlcclxuICAgICAgICAgICAgdGhpcy5fY2xpZW50X2lkID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJPaWRjQ2xpZW50U2V0dGluZ3Muc2V0X2NsaWVudF9pZDogY2xpZW50X2lkIGhhcyBhbHJlYWR5IGJlZW4gYXNzaWduZWQuXCIpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNsaWVudF9pZCBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLlwiKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBjbGllbnRfc2VjcmV0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRfc2VjcmV0O1xyXG4gICAgfVxyXG4gICAgZ2V0IHJlc3BvbnNlX3R5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlX3R5cGU7XHJcbiAgICB9XHJcbiAgICBnZXQgc2NvcGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Njb3BlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHJlZGlyZWN0X3VyaSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVkaXJlY3RfdXJpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBvcHRpb25hbCBwcm90b2NvbCBwYXJhbXNcclxuICAgIGdldCBwcm9tcHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb21wdDtcclxuICAgIH1cclxuICAgIGdldCBkaXNwbGF5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwbGF5O1xyXG4gICAgfVxyXG4gICAgZ2V0IG1heF9hZ2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heF9hZ2U7XHJcbiAgICB9XHJcbiAgICBnZXQgdWlfbG9jYWxlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdWlfbG9jYWxlcztcclxuICAgIH1cclxuICAgIGdldCBhY3JfdmFsdWVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hY3JfdmFsdWVzO1xyXG4gICAgfVxyXG4gICAgZ2V0IHJlc291cmNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvdXJjZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gbWV0YWRhdGFcclxuICAgIGdldCBhdXRob3JpdHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dGhvcml0eTtcclxuICAgIH1cclxuICAgIHNldCBhdXRob3JpdHkodmFsdWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2F1dGhvcml0eSkge1xyXG4gICAgICAgICAgICAvLyBvbmUtdGltZSBzZXQgb25seVxyXG4gICAgICAgICAgICB0aGlzLl9hdXRob3JpdHkgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnRTZXR0aW5ncy5zZXRfYXV0aG9yaXR5OiBhdXRob3JpdHkgaGFzIGFscmVhZHkgYmVlbiBhc3NpZ25lZC5cIilcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXV0aG9yaXR5IGhhcyBhbHJlYWR5IGJlZW4gYXNzaWduZWQuXCIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IG1ldGFkYXRhVXJsKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fbWV0YWRhdGFVcmwpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFVcmwgPSB0aGlzLmF1dGhvcml0eTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9tZXRhZGF0YVVybCAmJiB0aGlzLl9tZXRhZGF0YVVybC5pbmRleE9mKE9pZGNNZXRhZGF0YVVybFBhdGgpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21ldGFkYXRhVXJsW3RoaXMuX21ldGFkYXRhVXJsLmxlbmd0aCAtIDFdICE9PSAnLycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCArPSAnLyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCArPSBPaWRjTWV0YWRhdGFVcmxQYXRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFVcmw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc2V0dGFibGUvY2FjaGFibGUgbWV0YWRhdGEgdmFsdWVzXHJcbiAgICBnZXQgbWV0YWRhdGEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhO1xyXG4gICAgfVxyXG4gICAgc2V0IG1ldGFkYXRhKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fbWV0YWRhdGEgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2lnbmluZ0tleXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pbmdLZXlzO1xyXG4gICAgfVxyXG4gICAgc2V0IHNpZ25pbmdLZXlzKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fc2lnbmluZ0tleXMgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBiZWhhdmlvciBmbGFnc1xyXG4gICAgZ2V0IGZpbHRlclByb3RvY29sQ2xhaW1zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJQcm90b2NvbENsYWltcztcclxuICAgIH1cclxuICAgIGdldCBsb2FkVXNlckluZm8oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRVc2VySW5mbztcclxuICAgIH1cclxuICAgIGdldCBzdGFsZVN0YXRlQWdlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFsZVN0YXRlQWdlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNsb2NrU2tldygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xvY2tTa2V3O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzdGF0ZVN0b3JlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZVN0b3JlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHZhbGlkYXRvcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdG9yO1xyXG4gICAgfVxyXG4gICAgZ2V0IG1ldGFkYXRhU2VydmljZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGV4dHJhIHF1ZXJ5IHBhcmFtc1xyXG4gICAgZ2V0IGV4dHJhUXVlcnlQYXJhbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4dHJhUXVlcnlQYXJhbXM7XHJcbiAgICB9XHJcbiAgICBzZXQgZXh0cmFRdWVyeVBhcmFtcyh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKXtcclxuICAgICAgICAgICAgdGhpcy5fZXh0cmFRdWVyeVBhcmFtcyA9IHZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2V4dHJhUXVlcnlQYXJhbXMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL09pZGNDbGllbnRTZXR0aW5ncy5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9HbG9iYWwnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFdlYlN0b3JhZ2VTdGF0ZVN0b3JlIHtcclxuICAgIGNvbnN0cnVjdG9yKHtwcmVmaXggPSBcIm9pZGMuXCIsIHN0b3JlID0gR2xvYmFsLmxvY2FsU3RvcmFnZX0gPSB7fSkge1xyXG4gICAgICAgIHRoaXMuX3N0b3JlID0gc3RvcmU7XHJcbiAgICAgICAgdGhpcy5fcHJlZml4ID0gcHJlZml4O1xyXG4gICAgfVxyXG5cclxuICAgIHNldChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUuc2V0XCIsIGtleSk7XHJcblxyXG4gICAgICAgIGtleSA9IHRoaXMuX3ByZWZpeCArIGtleTtcclxuXHJcbiAgICAgICAgdGhpcy5fc3RvcmUuc2V0SXRlbShrZXksIHZhbHVlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldChrZXkpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJXZWJTdG9yYWdlU3RhdGVTdG9yZS5nZXRcIiwga2V5KTtcclxuXHJcbiAgICAgICAga2V5ID0gdGhpcy5fcHJlZml4ICsga2V5O1xyXG5cclxuICAgICAgICBsZXQgaXRlbSA9IHRoaXMuX3N0b3JlLmdldEl0ZW0oa2V5KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShpdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmUoa2V5KSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUucmVtb3ZlXCIsIGtleSk7XHJcblxyXG4gICAgICAgIGtleSA9IHRoaXMuX3ByZWZpeCArIGtleTtcclxuXHJcbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLl9zdG9yZS5nZXRJdGVtKGtleSk7XHJcbiAgICAgICAgdGhpcy5fc3RvcmUucmVtb3ZlSXRlbShrZXkpO1xyXG5cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFsbEtleXMoKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUuZ2V0QWxsS2V5c1wiKTtcclxuXHJcbiAgICAgICAgdmFyIGtleXMgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX3N0b3JlLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICBsZXQga2V5ID0gdGhpcy5fc3RvcmUua2V5KGluZGV4KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZih0aGlzLl9wcmVmaXgpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5LnN1YnN0cih0aGlzLl9wcmVmaXgubGVuZ3RoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoa2V5cyk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1dlYlN0b3JhZ2VTdGF0ZVN0b3JlLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgcmFuZG9tIGZyb20gJy4vcmFuZG9tJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTdGF0ZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7aWQsIGRhdGEsIGNyZWF0ZWR9ID0ge30pIHtcclxuICAgICAgICB0aGlzLl9pZCA9IGlkIHx8IHJhbmRvbSgpO1xyXG4gICAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNyZWF0ZWQgPT09ICdudW1iZXInICYmIGNyZWF0ZWQgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZWQgPSBjcmVhdGVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlZCA9IHBhcnNlSW50KERhdGUubm93KCkgLyAxMDAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuICAgIGdldCBkYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNyZWF0ZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgdG9TdG9yYWdlU3RyaW5nKCkge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlN0YXRlLnRvU3RvcmFnZVN0cmluZ1wiKTtcclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcclxuICAgICAgICAgICAgZGF0YTogdGhpcy5kYXRhLFxyXG4gICAgICAgICAgICBjcmVhdGVkOiB0aGlzLmNyZWF0ZWRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmFnZVN0cmluZykge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlN0YXRlLmZyb21TdG9yYWdlU3RyaW5nXCIpO1xyXG4gICAgICAgIHJldHVybiBuZXcgU3RhdGUoSlNPTi5wYXJzZShzdG9yYWdlU3RyaW5nKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNsZWFyU3RhbGVTdGF0ZShzdG9yYWdlLCBhZ2UpIHtcclxuXHJcbiAgICAgICAgdmFyIGN1dG9mZiA9IERhdGUubm93KCkgLyAxMDAwIC0gYWdlO1xyXG5cclxuICAgICAgICByZXR1cm4gc3RvcmFnZS5nZXRBbGxLZXlzKCkudGhlbihrZXlzID0+IHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiU3RhdGUuY2xlYXJTdGFsZVN0YXRlOiBnb3Qga2V5c1wiLCBrZXlzKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBrZXkgPSBrZXlzW2ldO1xyXG4gICAgICAgICAgICAgICAgdmFyIHAgPSBzdG9yYWdlLmdldChrZXkpLnRoZW4oaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmcoaXRlbSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IGdvdCBpdGVtIGZyb20ga2V5OiBcIiwga2V5LCBzdGF0ZS5jcmVhdGVkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuY3JlYXRlZCA8PSBjdXRvZmYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IEVycm9yIHBhcnNpbmcgc3RhdGUgZm9yIGtleVwiLCBrZXksIGUubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IG5vIGl0ZW0gaW4gc3RvcmFnZSBmb3Iga2V5OiBcIiwga2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU3RhdGUuY2xlYXJTdGFsZVN0YXRlOiByZW1vdmVkIGl0ZW0gZm9yIGtleTogXCIsIGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdG9yYWdlLnJlbW92ZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2gocCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlN0YXRlLmNsZWFyU3RhbGVTdGF0ZTogd2FpdGluZyBvbiBwcm9taXNlIGNvdW50OlwiLCBwcm9taXNlcy5sZW5ndGgpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9TdGF0ZS5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgT2lkY0NsaWVudFNldHRpbmdzIH0gZnJvbSAnLi9PaWRjQ2xpZW50U2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBFcnJvclJlc3BvbnNlIH0gZnJvbSAnLi9FcnJvclJlc3BvbnNlJztcclxuaW1wb3J0IHsgU2lnbmluUmVxdWVzdCB9IGZyb20gJy4vU2lnbmluUmVxdWVzdCc7XHJcbmltcG9ydCB7IFNpZ25pblJlc3BvbnNlIH0gZnJvbSAnLi9TaWduaW5SZXNwb25zZSc7XHJcbmltcG9ydCB7IFNpZ25vdXRSZXF1ZXN0IH0gZnJvbSAnLi9TaWdub3V0UmVxdWVzdCc7XHJcbmltcG9ydCB7IFNpZ25vdXRSZXNwb25zZSB9IGZyb20gJy4vU2lnbm91dFJlc3BvbnNlJztcclxuaW1wb3J0IHsgU2lnbmluU3RhdGUgfSBmcm9tICcuL1NpZ25pblN0YXRlJztcclxuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL1N0YXRlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBPaWRjQ2xpZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzID0ge30pIHtcclxuICAgICAgICBpZiAoc2V0dGluZ3MgaW5zdGFuY2VvZiBPaWRjQ2xpZW50U2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldHRpbmdzID0gbmV3IE9pZGNDbGllbnRTZXR0aW5ncyhzZXR0aW5ncyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBfc3RhdGVTdG9yZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5zdGF0ZVN0b3JlO1xyXG4gICAgfVxyXG4gICAgZ2V0IF92YWxpZGF0b3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MudmFsaWRhdG9yO1xyXG4gICAgfVxyXG4gICAgZ2V0IF9tZXRhZGF0YVNlcnZpY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MubWV0YWRhdGFTZXJ2aWNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzZXR0aW5ncygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3M7XHJcbiAgICB9XHJcbiAgICBnZXQgbWV0YWRhdGFTZXJ2aWNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2U7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlU2lnbmluUmVxdWVzdCh7XHJcbiAgICAgICAgcmVzcG9uc2VfdHlwZSwgc2NvcGUsIHJlZGlyZWN0X3VyaSxcclxuICAgICAgICAvLyBkYXRhIHdhcyBtZWFudCB0byBiZSB0aGUgcGxhY2UgYSBjYWxsZXIgY291bGQgaW5kaWNhdGUgdGhlIGRhdGEgdG9cclxuICAgICAgICAvLyBoYXZlIHJvdW5kIHRyaXBwZWQsIGJ1dCBwZW9wbGUgd2VyZSBnZXR0aW5nIGNvbmZ1c2VkLCBzbyBpIGFkZGVkIHN0YXRlIChzaW5jZSB0aGF0IG1hdGNoZXMgdGhlIHNwZWMpXHJcbiAgICAgICAgLy8gYW5kIHNvIG5vdyBpZiBkYXRhIGlzIG5vdCBwYXNzZWQsIGJ1dCBzdGF0ZSBpcyB0aGVuIHN0YXRlIHdpbGwgYmUgdXNlZFxyXG4gICAgICAgIGRhdGEsIHN0YXRlLCBwcm9tcHQsIGRpc3BsYXksIG1heF9hZ2UsIHVpX2xvY2FsZXMsIGlkX3Rva2VuX2hpbnQsIGxvZ2luX2hpbnQsIGFjcl92YWx1ZXMsXHJcbiAgICAgICAgcmVzb3VyY2UsIHJlcXVlc3QsIHJlcXVlc3RfdXJpLCBleHRyYVF1ZXJ5UGFyYW1zIH0gPSB7fSxcclxuICAgICAgICBzdGF0ZVN0b3JlXHJcbiAgICApIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJPaWRjQ2xpZW50LmNyZWF0ZVNpZ25pblJlcXVlc3RcIik7XHJcblxyXG4gICAgICAgIGxldCBjbGllbnRfaWQgPSB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQ7XHJcbiAgICAgICAgcmVzcG9uc2VfdHlwZSA9IHJlc3BvbnNlX3R5cGUgfHwgdGhpcy5fc2V0dGluZ3MucmVzcG9uc2VfdHlwZTtcclxuICAgICAgICBzY29wZSA9IHNjb3BlIHx8IHRoaXMuX3NldHRpbmdzLnNjb3BlO1xyXG4gICAgICAgIHJlZGlyZWN0X3VyaSA9IHJlZGlyZWN0X3VyaSB8fCB0aGlzLl9zZXR0aW5ncy5yZWRpcmVjdF91cmk7XHJcblxyXG4gICAgICAgIC8vIGlkX3Rva2VuX2hpbnQsIGxvZ2luX2hpbnQgYXJlbid0IGFsbG93ZWQgb24gX3NldHRpbmdzXHJcbiAgICAgICAgcHJvbXB0ID0gcHJvbXB0IHx8IHRoaXMuX3NldHRpbmdzLnByb21wdDtcclxuICAgICAgICBkaXNwbGF5ID0gZGlzcGxheSB8fCB0aGlzLl9zZXR0aW5ncy5kaXNwbGF5O1xyXG4gICAgICAgIG1heF9hZ2UgPSBtYXhfYWdlIHx8IHRoaXMuX3NldHRpbmdzLm1heF9hZ2U7XHJcbiAgICAgICAgdWlfbG9jYWxlcyA9IHVpX2xvY2FsZXMgfHwgdGhpcy5fc2V0dGluZ3MudWlfbG9jYWxlcztcclxuICAgICAgICBhY3JfdmFsdWVzID0gYWNyX3ZhbHVlcyB8fCB0aGlzLl9zZXR0aW5ncy5hY3JfdmFsdWVzO1xyXG4gICAgICAgIHJlc291cmNlID0gcmVzb3VyY2UgfHwgdGhpcy5fc2V0dGluZ3MucmVzb3VyY2U7XHJcbiAgICAgICAgZXh0cmFRdWVyeVBhcmFtcyA9IGV4dHJhUXVlcnlQYXJhbXMgfHwgdGhpcy5fc2V0dGluZ3MuZXh0cmFRdWVyeVBhcmFtcztcclxuXHJcbiAgICAgICAgbGV0IGF1dGhvcml0eSA9IHRoaXMuX3NldHRpbmdzLmF1dGhvcml0eTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRBdXRob3JpemF0aW9uRW5kcG9pbnQoKS50aGVuKHVybCA9PiB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQuY3JlYXRlU2lnbmluUmVxdWVzdDogUmVjZWl2ZWQgYXV0aG9yaXphdGlvbiBlbmRwb2ludFwiLCB1cmwpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHNpZ25pblJlcXVlc3QgPSBuZXcgU2lnbmluUmVxdWVzdCh7XHJcbiAgICAgICAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICAgICAgICBjbGllbnRfaWQsXHJcbiAgICAgICAgICAgICAgICByZWRpcmVjdF91cmksXHJcbiAgICAgICAgICAgICAgICByZXNwb25zZV90eXBlLFxyXG4gICAgICAgICAgICAgICAgc2NvcGUsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhIHx8IHN0YXRlLFxyXG4gICAgICAgICAgICAgICAgYXV0aG9yaXR5LFxyXG4gICAgICAgICAgICAgICAgcHJvbXB0LCBkaXNwbGF5LCBtYXhfYWdlLCB1aV9sb2NhbGVzLCBpZF90b2tlbl9oaW50LCBsb2dpbl9oaW50LCBhY3JfdmFsdWVzLFxyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2UsIHJlcXVlc3QsIHJlcXVlc3RfdXJpLCBleHRyYVF1ZXJ5UGFyYW1zLFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzaWduaW5TdGF0ZSA9IHNpZ25pblJlcXVlc3Quc3RhdGU7XHJcbiAgICAgICAgICAgIHN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlIHx8IHRoaXMuX3N0YXRlU3RvcmU7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGVTdG9yZS5zZXQoc2lnbmluU3RhdGUuaWQsIHNpZ25pblN0YXRlLnRvU3RvcmFnZVN0cmluZygpKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzaWduaW5SZXF1ZXN0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm9jZXNzU2lnbmluUmVzcG9uc2UodXJsLCBzdGF0ZVN0b3JlKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5wcm9jZXNzU2lnbmluUmVzcG9uc2VcIik7XHJcblxyXG4gICAgICAgIHZhciByZXNwb25zZSA9IG5ldyBTaWduaW5SZXNwb25zZSh1cmwpO1xyXG5cclxuICAgICAgICBpZiAoIXJlc3BvbnNlLnN0YXRlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25pblJlc3BvbnNlOiBObyBzdGF0ZSBpbiByZXNwb25zZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHN0YXRlIGluIHJlc3BvbnNlXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlIHx8IHRoaXMuX3N0YXRlU3RvcmU7XHJcblxyXG4gICAgICAgIHJldHVybiBzdGF0ZVN0b3JlLnJlbW92ZShyZXNwb25zZS5zdGF0ZSkudGhlbihzdG9yZWRTdGF0ZVN0cmluZyA9PiB7XHJcbiAgICAgICAgICAgIGlmICghc3RvcmVkU3RhdGVTdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25pblJlc3BvbnNlOiBObyBtYXRjaGluZyBzdGF0ZSBmb3VuZCBpbiBzdG9yYWdlXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gbWF0Y2hpbmcgc3RhdGUgZm91bmQgaW4gc3RvcmFnZVwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IHN0YXRlID0gU2lnbmluU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmVkU3RhdGVTdHJpbmcpO1xyXG5cclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5wcm9jZXNzU2lnbmluUmVzcG9uc2U6IFJlY2VpdmVkIHN0YXRlIGZyb20gc3RvcmFnZTsgdmFsaWRhdGluZyByZXNwb25zZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRvci52YWxpZGF0ZVNpZ25pblJlc3BvbnNlKHN0YXRlLCByZXNwb25zZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlU2lnbm91dFJlcXVlc3Qoe2lkX3Rva2VuX2hpbnQsIGRhdGEsIHN0YXRlLCBwb3N0X2xvZ291dF9yZWRpcmVjdF91cml9ID0ge30sXHJcbiAgICAgICAgc3RhdGVTdG9yZVxyXG4gICAgKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5jcmVhdGVTaWdub3V0UmVxdWVzdFwiKTtcclxuXHJcbiAgICAgICAgcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpID0gcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpIHx8IHRoaXMuX3NldHRpbmdzLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRFbmRTZXNzaW9uRW5kcG9pbnQoKS50aGVuKHVybCA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdXJsKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJPaWRjQ2xpZW50LmNyZWF0ZVNpZ25vdXRSZXF1ZXN0OiBObyBlbmQgc2Vzc2lvbiBlbmRwb2ludCB1cmwgcmV0dXJuZWRcIik7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJubyBlbmQgc2Vzc2lvbiBlbmRwb2ludFwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5jcmVhdGVTaWdub3V0UmVxdWVzdDogUmVjZWl2ZWQgZW5kIHNlc3Npb24gZW5kcG9pbnRcIiwgdXJsKTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZXF1ZXN0ID0gbmV3IFNpZ25vdXRSZXF1ZXN0KHtcclxuICAgICAgICAgICAgICAgIHVybCxcclxuICAgICAgICAgICAgICAgIGlkX3Rva2VuX2hpbnQsXHJcbiAgICAgICAgICAgICAgICBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhIHx8IHN0YXRlXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNpZ25vdXRTdGF0ZSA9IHJlcXVlc3Quc3RhdGU7XHJcbiAgICAgICAgICAgIGlmIChzaWdub3V0U3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQuY3JlYXRlU2lnbm91dFJlcXVlc3Q6IFNpZ25vdXQgcmVxdWVzdCBoYXMgc3RhdGUgdG8gcGVyc2lzdFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzdGF0ZVN0b3JlID0gc3RhdGVTdG9yZSB8fCB0aGlzLl9zdGF0ZVN0b3JlO1xyXG4gICAgICAgICAgICAgICAgc3RhdGVTdG9yZS5zZXQoc2lnbm91dFN0YXRlLmlkLCBzaWdub3V0U3RhdGUudG9TdG9yYWdlU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm9jZXNzU2lnbm91dFJlc3BvbnNlKHVybCwgc3RhdGVTdG9yZSkge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25vdXRSZXNwb25zZVwiKTtcclxuXHJcbiAgICAgICAgdmFyIHJlc3BvbnNlID0gbmV3IFNpZ25vdXRSZXNwb25zZSh1cmwpO1xyXG4gICAgICAgIGlmICghcmVzcG9uc2Uuc3RhdGUpIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5wcm9jZXNzU2lnbm91dFJlc3BvbnNlOiBObyBzdGF0ZSBpbiByZXNwb25zZVwiKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgTG9nLndhcm4oXCJPaWRjQ2xpZW50LnByb2Nlc3NTaWdub3V0UmVzcG9uc2U6IFJlc3BvbnNlIHdhcyBlcnJvcjogXCIsIHJlc3BvbnNlLmVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3JSZXNwb25zZShyZXNwb25zZSkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzdGF0ZUtleSA9IHJlc3BvbnNlLnN0YXRlO1xyXG5cclxuICAgICAgICBzdGF0ZVN0b3JlID0gc3RhdGVTdG9yZSB8fCB0aGlzLl9zdGF0ZVN0b3JlO1xyXG5cclxuICAgICAgICByZXR1cm4gc3RhdGVTdG9yZS5yZW1vdmUoc3RhdGVLZXkpLnRoZW4oc3RvcmVkU3RhdGVTdHJpbmcgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXN0b3JlZFN0YXRlU3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJPaWRjQ2xpZW50LnByb2Nlc3NTaWdub3V0UmVzcG9uc2U6IE5vIG1hdGNoaW5nIHN0YXRlIGZvdW5kIGluIHN0b3JhZ2VcIik7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBtYXRjaGluZyBzdGF0ZSBmb3VuZCBpbiBzdG9yYWdlXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgc3RhdGUgPSBTdGF0ZS5mcm9tU3RvcmFnZVN0cmluZyhzdG9yZWRTdGF0ZVN0cmluZyk7XHJcblxyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJPaWRjQ2xpZW50LnByb2Nlc3NTaWdub3V0UmVzcG9uc2U6IFJlY2VpdmVkIHN0YXRlIGZyb20gc3RvcmFnZTsgdmFsaWRhdGluZyByZXNwb25zZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRvci52YWxpZGF0ZVNpZ25vdXRSZXNwb25zZShzdGF0ZSwgcmVzcG9uc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyU3RhbGVTdGF0ZShzdGF0ZVN0b3JlKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5jbGVhclN0YWxlU3RhdGVcIik7XHJcblxyXG4gICAgICAgIHN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlIHx8IHRoaXMuX3N0YXRlU3RvcmU7XHJcblxyXG4gICAgICAgIHJldHVybiBTdGF0ZS5jbGVhclN0YWxlU3RhdGUoc3RhdGVTdG9yZSwgdGhpcy5zZXR0aW5ncy5zdGFsZVN0YXRlQWdlKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvT2lkY0NsaWVudC5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9HbG9iYWwnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEpzb25TZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKFhNTEh0dHBSZXF1ZXN0Q3RvciA9IEdsb2JhbC5YTUxIdHRwUmVxdWVzdCkge1xyXG4gICAgICAgIHRoaXMuX1hNTEh0dHBSZXF1ZXN0ID0gWE1MSHR0cFJlcXVlc3RDdG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEpzb24odXJsLCB0b2tlbikge1xyXG4gICAgICAgIGlmICghdXJsKXtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiSnNvblNlcnZpY2UuZ2V0SnNvbjogTm8gdXJsIHBhc3NlZFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXJsXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgTG9nLmRlYnVnKFwiSnNvblNlcnZpY2UuZ2V0SnNvbiwgdXJsOiBcIiwgdXJsKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHZhciByZXEgPSBuZXcgdGhpcy5fWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICAgICAgcmVxLm9wZW4oJ0dFVCcsIHVybCk7XHJcblxyXG4gICAgICAgICAgICByZXEub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJKc29uU2VydmljZS5nZXRKc29uOiBIVFRQIHJlc3BvbnNlIHJlY2VpdmVkLCBzdGF0dXNcIiwgcmVxLnN0YXR1cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJlcS5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50VHlwZSA9IHJlcS5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudFR5cGUgJiYgY29udGVudFR5cGUuc3RhcnRzV2l0aChcImFwcGxpY2F0aW9uL2pzb25cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShyZXEucmVzcG9uc2VUZXh0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpzb25TZXJ2aWNlLmdldEpzb246IEVycm9yIHBhcnNpbmcgSlNPTiByZXNwb25zZVwiLCBlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoRXJyb3IoXCJJbnZhbGlkIHJlc3BvbnNlIENvbnRlbnQtVHlwZTogXCIgKyBjb250ZW50VHlwZSArIFwiLCBmcm9tIFVSTDogXCIgKyB1cmwpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoRXJyb3IocmVxLnN0YXR1c1RleHQgKyBcIiAoXCIgKyByZXEuc3RhdHVzICsgXCIpXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKc29uU2VydmljZS5nZXRKc29uOiBuZXR3b3JrIGVycm9yXCIpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KEVycm9yKFwiTmV0d29yayBFcnJvclwiKSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkpzb25TZXJ2aWNlLmdldEpzb246IHRva2VuIHBhc3NlZCwgc2V0dGluZyBBdXRob3JpemF0aW9uIGhlYWRlclwiKTtcclxuICAgICAgICAgICAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKFwiQXV0aG9yaXphdGlvblwiLCBcIkJlYXJlciBcIiArIHRva2VuKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVxLnNlbmQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvSnNvblNlcnZpY2UuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRXJyb3JSZXNwb25zZSBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKHtlcnJvciwgZXJyb3JfZGVzY3JpcHRpb24sIGVycm9yX3VyaSwgc3RhdGV9PXt9XHJcbiAgICApIHtcclxuICAgICAgICAgaWYgKCFlcnJvcil7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk5vIGVycm9yIHBhc3NlZCB0byBFcnJvclJlc3BvbnNlXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlcnJvclwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN1cGVyKGVycm9yX2Rlc2NyaXB0aW9uIHx8IGVycm9yKTtcclxuXHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJFcnJvclJlc3BvbnNlXCI7XHJcblxyXG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcclxuICAgICAgICB0aGlzLmVycm9yX2Rlc2NyaXB0aW9uID0gZXJyb3JfZGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy5lcnJvcl91cmkgPSBlcnJvcl91cmk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvRXJyb3JSZXNwb25zZS5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL1N0YXRlJztcclxuaW1wb3J0IHJhbmRvbSBmcm9tICcuL3JhbmRvbSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2lnbmluU3RhdGUgZXh0ZW5kcyBTdGF0ZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7bm9uY2UsIGF1dGhvcml0eSwgY2xpZW50X2lkfSA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIoYXJndW1lbnRzWzBdKTtcclxuXHJcbiAgICAgICAgaWYgKG5vbmNlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX25vbmNlID0gcmFuZG9tKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG5vbmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX25vbmNlID0gbm9uY2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9hdXRob3JpdHkgPSBhdXRob3JpdHk7XHJcbiAgICAgICAgdGhpcy5fY2xpZW50X2lkID0gY2xpZW50X2lkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBub25jZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbm9uY2U7XHJcbiAgICB9XHJcbiAgICBnZXQgYXV0aG9yaXR5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hdXRob3JpdHk7XHJcbiAgICB9XHJcbiAgICBnZXQgY2xpZW50X2lkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRfaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgdG9TdG9yYWdlU3RyaW5nKCkge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlNpZ25pblN0YXRlLnRvU3RvcmFnZVN0cmluZ1wiKTtcclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcclxuICAgICAgICAgICAgZGF0YTogdGhpcy5kYXRhLFxyXG4gICAgICAgICAgICBjcmVhdGVkOiB0aGlzLmNyZWF0ZWQsXHJcbiAgICAgICAgICAgIG5vbmNlOiB0aGlzLm5vbmNlLFxyXG4gICAgICAgICAgICBhdXRob3JpdHk6IHRoaXMuYXV0aG9yaXR5LFxyXG4gICAgICAgICAgICBjbGllbnRfaWQ6IHRoaXMuY2xpZW50X2lkXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGZyb21TdG9yYWdlU3RyaW5nKHN0b3JhZ2VTdHJpbmcpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJTaWduaW5TdGF0ZS5mcm9tU3RvcmFnZVN0cmluZ1wiKTtcclxuICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2Uoc3RvcmFnZVN0cmluZyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTaWduaW5TdGF0ZShkYXRhKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvU2lnbmluU3RhdGUuanMiLCIvLyBOT1RJQ0U6IHRoZSBjb2RlIGluIHRoaXMgZmlsZSBvcmlnaW5hbGx5IGRldmVsb3BlZCBieSBNaWNyb3NvZnRcclxuLy8gb3JpZ2luYWwgc291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vQXp1cmVBRC9henVyZS1hY3RpdmVkaXJlY3RvcnktbGlicmFyeS1mb3ItanMvYmxvYi9tYXN0ZXIvbGliL2FkYWwuanMjTDEwMjlcclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIEFkYWxKUyB2MS4wLjhcclxuLy8gQHByZXNlcnZlIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IE9wZW4gVGVjaG5vbG9naWVzLCBJbmMuXHJcbi8vIEFsbCBSaWdodHMgUmVzZXJ2ZWRcclxuLy8gQXBhY2hlIExpY2Vuc2UgMi4wXHJcbi8vXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbi8vXHJcbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4vL1xyXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFuZG9tKCkge1xyXG4gICAgdmFyIGd1aWRIb2xkZXIgPSAneHh4eHh4eHh4eHh4NHh4eHl4eHh4eHh4eHh4eHh4eHgnO1xyXG4gICAgdmFyIGhleCA9ICcwMTIzNDU2Nzg5YWJjZGVmJztcclxuICAgIHZhciByID0gMDtcclxuICAgIHZhciBndWlkUmVzcG9uc2UgPSBcIlwiO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBndWlkSG9sZGVyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGd1aWRIb2xkZXJbaV0gIT09ICctJyAmJiBndWlkSG9sZGVyW2ldICE9PSAnNCcpIHtcclxuICAgICAgICAgICAgLy8gZWFjaCB4IGFuZCB5IG5lZWRzIHRvIGJlIHJhbmRvbVxyXG4gICAgICAgICAgICByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChndWlkSG9sZGVyW2ldID09PSAneCcpIHtcclxuICAgICAgICAgICAgZ3VpZFJlc3BvbnNlICs9IGhleFtyXTtcclxuICAgICAgICB9IGVsc2UgaWYgKGd1aWRIb2xkZXJbaV0gPT09ICd5Jykge1xyXG4gICAgICAgICAgICAvLyBjbG9jay1zZXEtYW5kLXJlc2VydmVkIGZpcnN0IGhleCBpcyBmaWx0ZXJlZCBhbmQgcmVtYWluaW5nIGhleCB2YWx1ZXMgYXJlIHJhbmRvbVxyXG4gICAgICAgICAgICByICY9IDB4MzsgLy8gYml0IGFuZCB3aXRoIDAwMTEgdG8gc2V0IHBvcyAyIHRvIHplcm8gPzA/P1xyXG4gICAgICAgICAgICByIHw9IDB4ODsgLy8gc2V0IHBvcyAzIHRvIDEgYXMgMT8/P1xyXG4gICAgICAgICAgICBndWlkUmVzcG9uc2UgKz0gaGV4W3JdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGd1aWRSZXNwb25zZSArPSBndWlkSG9sZGVyW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBndWlkUmVzcG9uc2U7XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcmFuZG9tLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXIge1xyXG4gICAgY29uc3RydWN0b3Ioe2lkX3Rva2VuLCBzZXNzaW9uX3N0YXRlLCBhY2Nlc3NfdG9rZW4sIHRva2VuX3R5cGUsIHNjb3BlLCBwcm9maWxlLCBleHBpcmVzX2F0LCBzdGF0ZX0pIHtcclxuICAgICAgICB0aGlzLmlkX3Rva2VuID0gaWRfdG9rZW47XHJcbiAgICAgICAgdGhpcy5zZXNzaW9uX3N0YXRlID0gc2Vzc2lvbl9zdGF0ZTtcclxuICAgICAgICB0aGlzLmFjY2Vzc190b2tlbiA9IGFjY2Vzc190b2tlbjtcclxuICAgICAgICB0aGlzLnRva2VuX3R5cGUgPSB0b2tlbl90eXBlO1xyXG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcclxuICAgICAgICB0aGlzLnByb2ZpbGUgPSBwcm9maWxlO1xyXG4gICAgICAgIHRoaXMuZXhwaXJlc19hdCA9IGV4cGlyZXNfYXQ7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBleHBpcmVzX2luKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmV4cGlyZXNfYXQpIHtcclxuICAgICAgICAgICAgbGV0IG5vdyA9IHBhcnNlSW50KERhdGUubm93KCkgLyAxMDAwKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwaXJlc19hdCAtIG5vdztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZXhwaXJlZCgpIHtcclxuICAgICAgICBsZXQgZXhwaXJlc19pbiA9IHRoaXMuZXhwaXJlc19pbjtcclxuICAgICAgICBpZiAoZXhwaXJlc19pbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBleHBpcmVzX2luIDw9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNjb3BlcygpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuc2NvcGUgfHwgXCJcIikuc3BsaXQoXCIgXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvU3RvcmFnZVN0cmluZygpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJVc2VyLnRvU3RvcmFnZVN0cmluZ1wiKTtcclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICBpZF90b2tlbjogdGhpcy5pZF90b2tlbixcclxuICAgICAgICAgICAgc2Vzc2lvbl9zdGF0ZTogdGhpcy5zZXNzaW9uX3N0YXRlLFxyXG4gICAgICAgICAgICBhY2Nlc3NfdG9rZW46IHRoaXMuYWNjZXNzX3Rva2VuLFxyXG4gICAgICAgICAgICB0b2tlbl90eXBlOiB0aGlzLnRva2VuX3R5cGUsXHJcbiAgICAgICAgICAgIHNjb3BlOiB0aGlzLnNjb3BlLFxyXG4gICAgICAgICAgICBwcm9maWxlOiB0aGlzLnByb2ZpbGUsXHJcbiAgICAgICAgICAgIGV4cGlyZXNfYXQ6IHRoaXMuZXhwaXJlc19hdFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmcm9tU3RvcmFnZVN0cmluZyhzdG9yYWdlU3RyaW5nKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiVXNlci5mcm9tU3RvcmFnZVN0cmluZ1wiKTtcclxuICAgICAgICByZXR1cm4gbmV3IFVzZXIoSlNPTi5wYXJzZShzdG9yYWdlU3RyaW5nKSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1VzZXIuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCB7IFRpbWVyIH0gZnJvbSAnLi9UaW1lcic7XHJcblxyXG5jb25zdCBEZWZhdWx0QWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUgPSA2MDsgLy8gc2Vjb25kc1xyXG5cclxuZXhwb3J0IGNsYXNzIEFjY2Vzc1Rva2VuRXZlbnRzIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih7XHJcbiAgICAgICAgYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUgPSBEZWZhdWx0QWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUsXHJcbiAgICAgICAgYWNjZXNzVG9rZW5FeHBpcmluZ1RpbWVyID0gbmV3IFRpbWVyKFwiQWNjZXNzIHRva2VuIGV4cGlyaW5nXCIpLFxyXG4gICAgICAgIGFjY2Vzc1Rva2VuRXhwaXJlZFRpbWVyID0gbmV3IFRpbWVyKFwiQWNjZXNzIHRva2VuIGV4cGlyZWRcIilcclxuICAgIH0gPSB7fSkge1xyXG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lID0gYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWU7XHJcblxyXG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmcgPSBhY2Nlc3NUb2tlbkV4cGlyaW5nVGltZXI7XHJcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmVkID0gYWNjZXNzVG9rZW5FeHBpcmVkVGltZXI7XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZChjb250YWluZXIpIHtcclxuICAgICAgICAvLyBvbmx5IHJlZ2lzdGVyIGV2ZW50cyBpZiB0aGVyZSdzIGFuIGFjY2VzcyB0b2tlbiBhbmQgaXQgaGFzIGFuIGV4cGlyYXRpb25cclxuICAgICAgICBpZiAoY29udGFpbmVyLmFjY2Vzc190b2tlbiAmJiBjb250YWluZXIuZXhwaXJlc19pbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGxldCBkdXJhdGlvbiA9IGNvbnRhaW5lci5leHBpcmVzX2luO1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJBY2Nlc3NUb2tlbkV2ZW50cy5sb2FkOiBhY2Nlc3MgdG9rZW4gcHJlc2VudCwgcmVtYWluaW5nIGR1cmF0aW9uOlwiLCBkdXJhdGlvbik7XHJcblxyXG4gICAgICAgICAgICBpZiAoZHVyYXRpb24gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBvbmx5IHJlZ2lzdGVyIGV4cGlyaW5nIGlmIHdlIHN0aWxsIGhhdmUgdGltZVxyXG4gICAgICAgICAgICAgICAgbGV0IGV4cGlyaW5nID0gZHVyYXRpb24gLSB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZTtcclxuICAgICAgICAgICAgICAgIGlmIChleHBpcmluZyA8PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICBleHBpcmluZyA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkFjY2Vzc1Rva2VuRXZlbnRzLmxvYWQ6IHJlZ2lzdGVyaW5nIGV4cGlyaW5nIHRpbWVyIGluOlwiLCBleHBpcmluZyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLmluaXQoZXhwaXJpbmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiQWNjZXNzVG9rZW5FdmVudHMubG9hZDogY2FuY2VsaW5nIGV4aXN0aW5nIGV4cGlyaW5nIHRpbWVyIGJlY2FzZSB3ZSdyZSBwYXN0IGV4cGlyYXRpb24uXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZy5jYW5jZWwoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaWYgaXQncyBuZWdhdGl2ZSwgaXQgd2lsbCBzdGlsbCBmaXJlXHJcbiAgICAgICAgICAgIGxldCBleHBpcmVkID0gZHVyYXRpb24gKyAxO1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJBY2Nlc3NUb2tlbkV2ZW50cy5sb2FkOiByZWdpc3RlcmluZyBleHBpcmVkIHRpbWVyIGluOlwiLCBleHBpcmVkKTtcclxuICAgICAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmVkLmluaXQoZXhwaXJlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQuY2FuY2VsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVubG9hZCgpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJBY2Nlc3NUb2tlbkV2ZW50cy51bmxvYWQ6IGNhbmNlbGluZyBleGlzdGluZyBhY2Nlc3MgdG9rZW4gdGltZXJzXCIpO1xyXG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmcuY2FuY2VsKCk7XHJcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmVkLmNhbmNlbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEFjY2Vzc1Rva2VuRXhwaXJpbmcoY2IpIHtcclxuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLmFkZEhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlQWNjZXNzVG9rZW5FeHBpcmluZyhjYikge1xyXG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmcucmVtb3ZlSGFuZGxlcihjYik7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQWNjZXNzVG9rZW5FeHBpcmVkKGNiKSB7XHJcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmVkLmFkZEhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlQWNjZXNzVG9rZW5FeHBpcmVkKGNiKSB7XHJcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmVkLnJlbW92ZUhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9BY2Nlc3NUb2tlbkV2ZW50cy5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFdmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IobmFtZSkge1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEhhbmRsZXIoY2IpIHtcclxuICAgICAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlSGFuZGxlcihjYikge1xyXG4gICAgICAgIHZhciBpZHggPSB0aGlzLl9jYWxsYmFja3MuZmluZEluZGV4KGl0ZW0gPT4gaXRlbSA9PT0gY2IpO1xyXG4gICAgICAgIGlmIChpZHggPj0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFja3Muc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJhaXNlKC4uLnBhcmFtcykge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIkV2ZW50OiBSYWlzaW5nIGV2ZW50OiBcIiArIHRoaXMuX25hbWUpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrc1tpXSguLi5wYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvRXZlbnQuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCB7IENoZWNrU2Vzc2lvbklGcmFtZSB9IGZyb20gJy4vQ2hlY2tTZXNzaW9uSUZyYW1lJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZXNzaW9uTW9uaXRvciB7XHJcblxyXG4gICAgY29uc3RydWN0b3IodXNlck1hbmFnZXIsIENoZWNrU2Vzc2lvbklGcmFtZUN0b3IgPSBDaGVja1Nlc3Npb25JRnJhbWUpIHtcclxuICAgICAgICBpZiAoIXVzZXJNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNlc3Npb25Nb25pdG9yLmN0b3I6IE5vIHVzZXIgbWFuYWdlciBwYXNzZWQgdG8gU2Vzc2lvbk1vbml0b3JcIik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVzZXJNYW5hZ2VyXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIgPSB1c2VyTWFuYWdlcjtcclxuICAgICAgICB0aGlzLl9DaGVja1Nlc3Npb25JRnJhbWVDdG9yID0gQ2hlY2tTZXNzaW9uSUZyYW1lQ3RvcjtcclxuXHJcbiAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLmFkZFVzZXJMb2FkZWQodGhpcy5fc3RhcnQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLmFkZFVzZXJVbmxvYWRlZCh0aGlzLl9zdG9wLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5nZXRVc2VyKCkudGhlbih1c2VyID0+IHtcclxuICAgICAgICAgICAgLy8gZG9pbmcgdGhpcyBtYW51YWxseSBoZXJlIHNpbmNlIGNhbGxpbmcgZ2V0VXNlciBcclxuICAgICAgICAgICAgLy8gZG9lc24ndCB0cmlnZ2VyIGxvYWQgZXZlbnQuXHJcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydCh1c2VyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNhdGNoIHRvIHN1cHByZXNzIGVycm9ycyBzaW5jZSB3ZSdyZSBpbiBhIGN0b3JcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiU2Vzc2lvbk1vbml0b3IgY3RvcjogZXJyb3IgZnJvbSBnZXRVc2VyOlwiLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF9zZXR0aW5ncygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdXNlck1hbmFnZXIuc2V0dGluZ3M7XHJcbiAgICB9XHJcbiAgICBnZXQgX21ldGFkYXRhU2VydmljZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdXNlck1hbmFnZXIubWV0YWRhdGFTZXJ2aWNlO1xyXG4gICAgfVxyXG4gICAgZ2V0IF9jbGllbnRfaWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZDtcclxuICAgIH1cclxuICAgIGdldCBfY2hlY2tTZXNzaW9uSW50ZXJ2YWwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLmNoZWNrU2Vzc2lvbkludGVydmFsO1xyXG4gICAgfVxyXG4gICAgZ2V0IF9zdG9wQ2hlY2tTZXNzaW9uT25FcnJvcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3Muc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3I7XHJcbiAgICB9XHJcblxyXG4gICAgX3N0YXJ0KHVzZXIpIHtcclxuICAgICAgICBsZXQgc2Vzc2lvbl9zdGF0ZSA9IHVzZXIuc2Vzc2lvbl9zdGF0ZTtcclxuXHJcbiAgICAgICAgaWYgKHNlc3Npb25fc3RhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3ViID0gdXNlci5wcm9maWxlLnN1YjtcclxuICAgICAgICAgICAgdGhpcy5fc2lkID0gdXNlci5wcm9maWxlLnNpZDtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX3N0YXJ0OiBzZXNzaW9uX3N0YXRlOlwiLCBzZXNzaW9uX3N0YXRlLCBcIiwgc3ViOlwiLCB0aGlzLl9zdWIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRDaGVja1Nlc3Npb25JZnJhbWUoKS50aGVuKHVybCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVybCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTZXNzaW9uTW9uaXRvci5fc3RhcnQ6IEluaXRpYWxpemluZyBjaGVjayBzZXNzaW9uIGlmcmFtZVwiKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNsaWVudF9pZCA9IHRoaXMuX2NsaWVudF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGludGVydmFsID0gdGhpcy5fY2hlY2tTZXNzaW9uSW50ZXJ2YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdG9wT25FcnJvciA9IHRoaXMuX3N0b3BDaGVja1Nlc3Npb25PbkVycm9yO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lID0gbmV3IHRoaXMuX0NoZWNrU2Vzc2lvbklGcmFtZUN0b3IodGhpcy5fY2FsbGJhY2suYmluZCh0aGlzKSwgY2xpZW50X2lkLCB1cmwsIGludGVydmFsLCBzdG9wT25FcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrU2Vzc2lvbklGcmFtZS5sb2FkKCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUuc3RhcnQoc2Vzc2lvbl9zdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLndhcm4oXCJTZXNzaW9uTW9uaXRvci5fc3RhcnQ6IE5vIGNoZWNrIHNlc3Npb24gaWZyYW1lIGZvdW5kIGluIHRoZSBtZXRhZGF0YVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhdGNoIHRvIHN1cHByZXNzIGVycm9ycyBzaW5jZSB3ZSdyZSBpbiBub24tcHJvbWlzZSBjYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlNlc3Npb25Nb25pdG9yLl9zdGFydDogRXJyb3IgZnJvbSBnZXRDaGVja1Nlc3Npb25JZnJhbWU6XCIsIGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lLnN0YXJ0KHNlc3Npb25fc3RhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9zdG9wKCkge1xyXG4gICAgICAgIHRoaXMuX3N1YiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fc2lkID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NoZWNrU2Vzc2lvbklGcmFtZSkge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJTZXNzaW9uTW9uaXRvci5fc3RvcFwiKTtcclxuICAgICAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lLnN0b3AoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX2NhbGxiYWNrKCkge1xyXG4gICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1cygpLnRoZW4oc2Vzc2lvbiA9PiB7XHJcbiAgICAgICAgICAgIHZhciByYWlzZVVzZXJTaWduZWRPdXRFdmVudCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2Vzc2lvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlc3Npb24uc3ViID09PSB0aGlzLl9zdWIpIHtcclxuICAgICAgICAgICAgICAgICAgICByYWlzZVVzZXJTaWduZWRPdXRFdmVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrU2Vzc2lvbklGcmFtZS5zdGFydChzZXNzaW9uLnNlc3Npb25fc3RhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbi5zaWQgPT09IHRoaXMuX3NpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTZXNzaW9uTW9uaXRvci5fY2FsbGJhY2s6IFNhbWUgc3ViIHN0aWxsIGxvZ2dlZCBpbiBhdCBPUCwgcmVzdGFydGluZyBjaGVjayBzZXNzaW9uIGlmcmFtZTsgc2Vzc2lvbl9zdGF0ZTpcIiwgc2Vzc2lvbi5zZXNzaW9uX3N0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazogU2FtZSBzdWIgc3RpbGwgbG9nZ2VkIGluIGF0IE9QLCBzZXNzaW9uIHN0YXRlIGhhcyBjaGFuZ2VkLCByZXN0YXJ0aW5nIGNoZWNrIHNlc3Npb24gaWZyYW1lOyBzZXNzaW9uX3N0YXRlOlwiLCBzZXNzaW9uLnNlc3Npb25fc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5ldmVudHMuX3JhaXNlVXNlclNlc3Npb25DaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX2NhbGxiYWNrOiBEaWZmZXJlbnQgc3ViamVjdCBzaWduZWQgaW50byBPUDpcIiwgc2Vzc2lvbi5zdWIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX2NhbGxiYWNrOiBTdWJqZWN0IG5vIGxvbmdlciBzaWduZWQgaW50byBPUFwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJhaXNlVXNlclNpZ25lZE91dEV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTZXNzaW9uTW9uaXRvci5fY2FsbGJhY2s6IFNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazsgcmFpc2luZyBzaWduZWQgb3V0IGV2ZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLl9yYWlzZVVzZXJTaWduZWRPdXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazogRXJyb3IgY2FsbGluZyBxdWVyeUN1cnJlbnRTaWduaW5TZXNzaW9uOyByYWlzaW5nIHNpZ25lZCBvdXQgZXZlbnRcIiwgZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5ldmVudHMuX3JhaXNlVXNlclNpZ25lZE91dCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9TZXNzaW9uTW9uaXRvci5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuXHJcbmNvbnN0IERlZmF1bHRJbnRlcnZhbCA9IDIwMDA7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2hlY2tTZXNzaW9uSUZyYW1lIHtcclxuICAgIGNvbnN0cnVjdG9yKGNhbGxiYWNrLCBjbGllbnRfaWQsIHVybCwgaW50ZXJ2YWwsIHN0b3BPbkVycm9yID0gdHJ1ZSkge1xyXG4gICAgICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5fY2xpZW50X2lkID0gY2xpZW50X2lkO1xyXG4gICAgICAgIHRoaXMuX3VybCA9IHVybDtcclxuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IGludGVydmFsIHx8IERlZmF1bHRJbnRlcnZhbDtcclxuICAgICAgICB0aGlzLl9zdG9wT25FcnJvciA9IHN0b3BPbkVycm9yO1xyXG5cclxuICAgICAgICB2YXIgaWR4ID0gdXJsLmluZGV4T2YoXCIvXCIsIHVybC5pbmRleE9mKFwiLy9cIikgKyAyKTtcclxuICAgICAgICB0aGlzLl9mcmFtZV9vcmlnaW4gPSB1cmwuc3Vic3RyKDAsIGlkeCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2ZyYW1lID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XHJcblxyXG4gICAgICAgIC8vIHNob3RndW4gYXBwcm9hY2hcclxuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcclxuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgdGhpcy5fZnJhbWUuc3R5bGUud2lkdGggPSAwO1xyXG4gICAgICAgIHRoaXMuX2ZyYW1lLnN0eWxlLmhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMuX2ZyYW1lLnNyYyA9IHVybDtcclxuICAgIH1cclxuICAgIGxvYWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZnJhbWUpO1xyXG4gICAgICAgICAgICB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCA9IHRoaXMuX21lc3NhZ2UuYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBfbWVzc2FnZShlKSB7XHJcbiAgICAgICAgaWYgKGUub3JpZ2luID09PSB0aGlzLl9mcmFtZV9vcmlnaW4gJiZcclxuICAgICAgICAgICAgZS5zb3VyY2UgPT09IHRoaXMuX2ZyYW1lLmNvbnRlbnRXaW5kb3dcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKGUuZGF0YSA9PT0gXCJlcnJvclwiKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJDaGVja1Nlc3Npb25JRnJhbWU6IGVycm9yIG1lc3NhZ2UgZnJvbSBjaGVjayBzZXNzaW9uIG9wIGlmcmFtZVwiKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdG9wT25FcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGUuZGF0YSA9PT0gXCJjaGFuZ2VkXCIpIHtcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkNoZWNrU2Vzc2lvbklGcmFtZTogY2hhbmdlZCBtZXNzYWdlIGZyb20gY2hlY2sgc2Vzc2lvbiBvcCBpZnJhbWVcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJDaGVja1Nlc3Npb25JRnJhbWU6IFwiICsgZS5kYXRhICsgXCIgbWVzc2FnZSBmcm9tIGNoZWNrIHNlc3Npb24gb3AgaWZyYW1lXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhcnQoc2Vzc2lvbl9zdGF0ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9zZXNzaW9uX3N0YXRlICE9PSBzZXNzaW9uX3N0YXRlKSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkNoZWNrU2Vzc2lvbklGcmFtZS5zdGFydFwiKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fc2Vzc2lvbl9zdGF0ZSA9IHNlc3Npb25fc3RhdGU7XHJcblxyXG4gICAgICAgICAgICBsZXQgc2VuZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UodGhpcy5fY2xpZW50X2lkICsgXCIgXCIgKyB0aGlzLl9zZXNzaW9uX3N0YXRlLCB0aGlzLl9mcmFtZV9vcmlnaW4pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gdHJpZ2dlciBub3dcclxuICAgICAgICAgICAgc2VuZCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gYW5kIHNldHVwIHRpbWVyXHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVyID0gd2luZG93LnNldEludGVydmFsKHNlbmQsIHRoaXMuX2ludGVydmFsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RvcCgpIHtcclxuICAgICAgICB0aGlzLl9zZXNzaW9uX3N0YXRlID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVyKSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkNoZWNrU2Vzc2lvbklGcmFtZS5zdG9wXCIpO1xyXG5cclxuICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5fdGltZXIpO1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9DaGVja1Nlc3Npb25JRnJhbWUuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCB7IE1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4vTWV0YWRhdGFTZXJ2aWNlJztcclxuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9HbG9iYWwnO1xyXG5cclxuY29uc3QgQWNjZXNzVG9rZW5UeXBlSGludCA9IFwiYWNjZXNzX3Rva2VuXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVG9rZW5SZXZvY2F0aW9uQ2xpZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBYTUxIdHRwUmVxdWVzdEN0b3IgPSBHbG9iYWwuWE1MSHR0cFJlcXVlc3QsIE1ldGFkYXRhU2VydmljZUN0b3IgPSBNZXRhZGF0YVNlcnZpY2UpIHtcclxuICAgICAgICBpZiAoIXNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuUmV2b2NhdGlvbkNsaWVudC5jdG9yOiBObyBzZXR0aW5ncyBwcm92aWRlZFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc2V0dGluZ3MgcHJvdmlkZWQuXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgICAgICB0aGlzLl9YTUxIdHRwUmVxdWVzdEN0b3IgPSBYTUxIdHRwUmVxdWVzdEN0b3I7XHJcbiAgICAgICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlID0gbmV3IE1ldGFkYXRhU2VydmljZUN0b3IodGhpcy5fc2V0dGluZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldm9rZShhY2Nlc3NUb2tlbiwgcmVxdWlyZWQpIHtcclxuICAgICAgICBpZiAoIWFjY2Vzc1Rva2VuKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2U6IE5vIGFjY2Vzc1Rva2VuIHByb3ZpZGVkXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBhY2Nlc3NUb2tlbiBwcm92aWRlZC5cIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFJldm9jYXRpb25FbmRwb2ludCgpLnRoZW4odXJsID0+IHtcclxuICAgICAgICAgICAgaWYgKCF1cmwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXF1aXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2U6IFJldm9jYXRpb24gbm90IHN1cHBvcnRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXZvY2F0aW9uIG5vdCBzdXBwb3J0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbm90IHJlcXVpcmVkLCBzbyBkb24ndCBlcnJvciBhbmQganVzdCByZXR1cm5cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiVG9rZW5SZXZvY2F0aW9uQ2xpZW50LnJldm9rZTogUmV2b2tpbmcgYWNjZXNzIHRva2VuXCIpO1xyXG4gICAgICAgICAgICB2YXIgY2xpZW50X2lkID0gdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkO1xyXG4gICAgICAgICAgICB2YXIgY2xpZW50X3NlY3JldCA9IHRoaXMuX3NldHRpbmdzLmNsaWVudF9zZWNyZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXZva2UodXJsLCBjbGllbnRfaWQsIGNsaWVudF9zZWNyZXQsIGFjY2Vzc1Rva2VuKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBfcmV2b2tlKHVybCwgY2xpZW50X2lkLCBjbGllbnRfc2VjcmV0LCBhY2Nlc3NUb2tlbikge1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgdmFyIHhociA9IG5ldyB0aGlzLl9YTUxIdHRwUmVxdWVzdEN0b3IoKTtcclxuICAgICAgICAgICAgeGhyLm9wZW4oXCJQT1NUXCIsIHVybCk7XHJcblxyXG4gICAgICAgICAgICB4aHIub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVG9rZW5SZXZvY2F0aW9uQ2xpZW50LnJldm9rZTogSFRUUCByZXNwb25zZSByZWNlaXZlZCwgc3RhdHVzXCIsIHhoci5zdGF0dXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoRXJyb3IoeGhyLnN0YXR1c1RleHQgKyBcIiAoXCIgKyB4aHIuc3RhdHVzICsgXCIpXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciBib2R5ID0gXCJjbGllbnRfaWQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoY2xpZW50X2lkKTtcclxuICAgICAgICAgICAgaWYgKGNsaWVudF9zZWNyZXQpIHtcclxuICAgICAgICAgICAgICAgIGJvZHkgKz0gXCImY2xpZW50X3NlY3JldD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChjbGllbnRfc2VjcmV0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBib2R5ICs9IFwiJnRva2VuX3R5cGVfaGludD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChBY2Nlc3NUb2tlblR5cGVIaW50KTtcclxuICAgICAgICAgICAgYm9keSArPSBcIiZ0b2tlbj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChhY2Nlc3NUb2tlbik7XHJcblxyXG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKTtcclxuICAgICAgICAgICAgeGhyLnNlbmQoYm9keSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1Rva2VuUmV2b2NhdGlvbkNsaWVudC5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuXHJcbmNvbnN0IERlZmF1bHRQb3B1cEZlYXR1cmVzID0gJ2xvY2F0aW9uPW5vLHRvb2xiYXI9bm8sem9vbT1ubyc7XHJcbmNvbnN0IERlZmF1bHRQb3B1cFRhcmdldCA9IFwiX2JsYW5rXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29yZG92YVBvcHVwV2luZG93IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcclxuICAgICAgICB0aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgdGhpcy5fcmVqZWN0ID0gcmVqZWN0O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmZlYXR1cmVzID0gcGFyYW1zLnBvcHVwV2luZG93RmVhdHVyZXMgfHwgRGVmYXVsdFBvcHVwRmVhdHVyZXM7XHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSBwYXJhbXMucG9wdXBXaW5kb3dUYXJnZXQgfHwgRGVmYXVsdFBvcHVwVGFyZ2V0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMucmVkaXJlY3RfdXJpID0gcGFyYW1zLnN0YXJ0VXJsO1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIkNvcmRvdmFQb3B1cFdpbmRvdy5jdG9yOiByZWRpcmVjdF91cmk6IFwiICsgdGhpcy5yZWRpcmVjdF91cmkpO1xyXG4gICAgfVxyXG5cclxuICAgIF9pc0luQXBwQnJvd3Nlckluc3RhbGxlZChjb3Jkb3ZhTWV0YWRhdGEpIHtcclxuICAgICAgICByZXR1cm4gW1wiY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyXCIsIFwiY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyLmluYXBwYnJvd3NlclwiLCBcIm9yZy5hcGFjaGUuY29yZG92YS5pbmFwcGJyb3dzZXJcIl0uc29tZShmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29yZG92YU1ldGFkYXRhLmhhc093blByb3BlcnR5KG5hbWUpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIFxyXG4gICAgbmF2aWdhdGUocGFyYW1zKSB7XHJcbiAgICAgICAgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy51cmwpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IoXCJObyB1cmwgcHJvdmlkZWRcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCF3aW5kb3cuY29yZG92YSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yKFwiY29yZG92YSBpcyB1bmRlZmluZWRcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIGNvcmRvdmFNZXRhZGF0YSA9IHdpbmRvdy5jb3Jkb3ZhLnJlcXVpcmUoXCJjb3Jkb3ZhL3BsdWdpbl9saXN0XCIpLm1ldGFkYXRhO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNJbkFwcEJyb3dzZXJJbnN0YWxsZWQoY29yZG92YU1ldGFkYXRhKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lcnJvcihcIkluQXBwQnJvd3NlciBwbHVnaW4gbm90IGZvdW5kXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fcG9wdXAgPSBjb3Jkb3ZhLkluQXBwQnJvd3Nlci5vcGVuKHBhcmFtcy51cmwsIHRoaXMudGFyZ2V0LCB0aGlzLmZlYXR1cmVzKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BvcHVwKSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJDb3Jkb3ZhUG9wdXBXaW5kb3cubmF2aWdhdGU6IHBvcHVwIHN1Y2Nlc3NmdWxseSBjcmVhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9leGl0Q2FsbGJhY2tFdmVudCA9IHRoaXMuX2V4aXRDYWxsYmFjay5iaW5kKHRoaXMpOyBcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRTdGFydENhbGxiYWNrRXZlbnQgPSB0aGlzLl9sb2FkU3RhcnRDYWxsYmFjay5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3B1cC5hZGRFdmVudExpc3RlbmVyKFwiZXhpdFwiLCB0aGlzLl9leGl0Q2FsbGJhY2tFdmVudCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRzdGFydFwiLCB0aGlzLl9sb2FkU3RhcnRDYWxsYmFja0V2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJvcihcIkVycm9yIG9wZW5pbmcgcG9wdXAgd2luZG93XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHByb21pc2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgX2xvYWRTdGFydENhbGxiYWNrKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGV2ZW50LnVybC5pbmRleE9mKHRoaXMucmVkaXJlY3RfdXJpKSA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdWNjZXNzKHsgdXJsOiBldmVudC51cmwgfSk7XHJcbiAgICAgICAgfSAgICBcclxuICAgIH1cclxuICAgIF9leGl0Q2FsbGJhY2sobWVzc2FnZSkge1xyXG4gICAgICAgIHRoaXMuX2Vycm9yKG1lc3NhZ2UpOyAgICBcclxuICAgIH1cclxuICAgIFxyXG4gICAgX3N1Y2Nlc3MoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuX2NsZWFudXAoKTtcclxuXHJcbiAgICAgICAgTG9nLmRlYnVnKFwiQ29yZG92YVBvcHVwV2luZG93OiBTdWNjZXNzZnVsIHJlc3BvbnNlIGZyb20gY29yZG92YSBwb3B1cCB3aW5kb3dcIik7XHJcbiAgICAgICAgdGhpcy5fcmVzb2x2ZShkYXRhKTtcclxuICAgIH1cclxuICAgIF9lcnJvcihtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xyXG5cclxuICAgICAgICBMb2cuZXJyb3IobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5fcmVqZWN0KG5ldyBFcnJvcihtZXNzYWdlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xyXG4gICAgfVxyXG5cclxuICAgIF9jbGVhbnVwKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9wb3B1cCl7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkNvcmRvdmFQb3B1cFdpbmRvdzogY2xlYW5pbmcgdXAgcG9wdXBcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJleGl0XCIsIHRoaXMuX2V4aXRDYWxsYmFja0V2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2Fkc3RhcnRcIiwgdGhpcy5fbG9hZFN0YXJ0Q2FsbGJhY2tFdmVudCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLl9wb3B1cC5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9wb3B1cCA9IG51bGw7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0NvcmRvdmFQb3B1cFdpbmRvdy5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmV4cG9ydCB7IExvZyB9IGZyb20gJy4vc3JjL0xvZyc7XHJcbmV4cG9ydCB7IE9pZGNDbGllbnQgfSBmcm9tICcuL3NyYy9PaWRjQ2xpZW50JztcclxuZXhwb3J0IHsgT2lkY0NsaWVudFNldHRpbmdzIH0gZnJvbSAnLi9zcmMvT2lkY0NsaWVudFNldHRpbmdzJztcclxuZXhwb3J0IHsgV2ViU3RvcmFnZVN0YXRlU3RvcmUgfSBmcm9tICcuL3NyYy9XZWJTdG9yYWdlU3RhdGVTdG9yZSc7XHJcbmV4cG9ydCB7IEluTWVtb3J5V2ViU3RvcmFnZSB9IGZyb20gJy4vc3JjL0luTWVtb3J5V2ViU3RvcmFnZSc7XHJcbmV4cG9ydCB7IFVzZXJNYW5hZ2VyIH0gZnJvbSAnLi9zcmMvVXNlck1hbmFnZXInO1xyXG5leHBvcnQgeyBBY2Nlc3NUb2tlbkV2ZW50cyB9IGZyb20gJy4vc3JjL0FjY2Vzc1Rva2VuRXZlbnRzJztcclxuZXhwb3J0IHsgTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9zcmMvTWV0YWRhdGFTZXJ2aWNlJztcclxuZXhwb3J0IHsgQ29yZG92YVBvcHVwTmF2aWdhdG9yIH0gZnJvbSAnLi9zcmMvQ29yZG92YVBvcHVwTmF2aWdhdG9yJztcclxuZXhwb3J0IHsgQ29yZG92YUlGcmFtZU5hdmlnYXRvciB9IGZyb20gJy4vc3JjL0NvcmRvdmFJRnJhbWVOYXZpZ2F0b3InO1xyXG5leHBvcnQgeyBDaGVja1Nlc3Npb25JRnJhbWUgfSBmcm9tICcuL3NyYy9DaGVja1Nlc3Npb25JRnJhbWUnO1xyXG5leHBvcnQgeyBUb2tlblJldm9jYXRpb25DbGllbnQgfSBmcm9tICcuL3NyYy9Ub2tlblJldm9jYXRpb25DbGllbnQnO1xyXG5leHBvcnQgeyBTZXNzaW9uTW9uaXRvciB9IGZyb20gJy4vc3JjL1Nlc3Npb25Nb25pdG9yJztcclxuZXhwb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9zcmMvR2xvYmFsJztcclxuZXhwb3J0IHsgVXNlciB9IGZyb20gJy4vc3JjL1VzZXInO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9pbmRleC5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9NZXRhZGF0YVNlcnZpY2UnO1xyXG5pbXBvcnQgeyBVc2VySW5mb1NlcnZpY2UgfSBmcm9tICcuL1VzZXJJbmZvU2VydmljZSc7XHJcbmltcG9ydCB7IEVycm9yUmVzcG9uc2UgfSBmcm9tICcuL0Vycm9yUmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBKb3NlVXRpbCB9IGZyb20gJy4vSm9zZVV0aWwnO1xyXG5cclxuY29uc3QgUHJvdG9jb2xDbGFpbXMgPSBbXCJub25jZVwiLCBcImF0X2hhc2hcIiwgXCJpYXRcIiwgXCJuYmZcIiwgXCJleHBcIiwgXCJhdWRcIiwgXCJpc3NcIiwgXCJjX2hhc2hcIl07XHJcblxyXG5leHBvcnQgY2xhc3MgUmVzcG9uc2VWYWxpZGF0b3Ige1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBNZXRhZGF0YVNlcnZpY2VDdG9yID0gTWV0YWRhdGFTZXJ2aWNlLCBVc2VySW5mb1NlcnZpY2VDdG9yID0gVXNlckluZm9TZXJ2aWNlLCBqb3NlVXRpbCA9IEpvc2VVdGlsKSB7XHJcbiAgICAgICAgaWYgKCFzZXR0aW5ncykge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5jdG9yOiBObyBzZXR0aW5ncyBwYXNzZWQgdG8gUmVzcG9uc2VWYWxpZGF0b3JcIik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInNldHRpbmdzXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgICAgICB0aGlzLl9tZXRhZGF0YVNlcnZpY2UgPSBuZXcgTWV0YWRhdGFTZXJ2aWNlQ3Rvcih0aGlzLl9zZXR0aW5ncyk7XHJcbiAgICAgICAgdGhpcy5fdXNlckluZm9TZXJ2aWNlID0gbmV3IFVzZXJJbmZvU2VydmljZUN0b3IodGhpcy5fc2V0dGluZ3MpO1xyXG4gICAgICAgIHRoaXMuX2pvc2VVdGlsID0gam9zZVV0aWw7XHJcbiAgICB9XHJcblxyXG4gICAgdmFsaWRhdGVTaWduaW5SZXNwb25zZShzdGF0ZSwgcmVzcG9uc2UpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci52YWxpZGF0ZVNpZ25pblJlc3BvbnNlXCIpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc1NpZ25pblBhcmFtcyhzdGF0ZSwgcmVzcG9uc2UpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci52YWxpZGF0ZVNpZ25pblJlc3BvbnNlOiBzdGF0ZSBwcm9jZXNzZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0ZVRva2VucyhzdGF0ZSwgcmVzcG9uc2UpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IudmFsaWRhdGVTaWduaW5SZXNwb25zZTogdG9rZW5zIHZhbGlkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm9jZXNzQ2xhaW1zKHJlc3BvbnNlKS50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci52YWxpZGF0ZVNpZ25pblJlc3BvbnNlOiBjbGFpbXMgcHJvY2Vzc2VkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YWxpZGF0ZVNpZ25vdXRSZXNwb25zZShzdGF0ZSwgcmVzcG9uc2UpIHtcclxuICAgICAgICBpZiAoc3RhdGUuaWQgIT09IHJlc3BvbnNlLnN0YXRlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbm91dFJlc3BvbnNlOiBTdGF0ZSBkb2VzIG5vdCBtYXRjaFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlN0YXRlIGRvZXMgbm90IG1hdGNoXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG5vdyB0aGF0IHdlIGtub3cgdGhlIHN0YXRlIG1hdGNoZXMsIHRha2UgdGhlIHN0b3JlZCBkYXRhXHJcbiAgICAgICAgLy8gYW5kIHNldCBpdCBpbnRvIHRoZSByZXNwb25zZSBzbyBjYWxsZXJzIGNhbiBnZXQgdGhlaXIgc3RhdGVcclxuICAgICAgICAvLyB0aGlzIGlzIGltcG9ydGFudCBmb3IgYm90aCBzdWNjZXNzICYgZXJyb3Igb3V0Y29tZXNcclxuICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci52YWxpZGF0ZVNpZ25vdXRSZXNwb25zZTogc3RhdGUgdmFsaWRhdGVkXCIpO1xyXG4gICAgICAgIHJlc3BvbnNlLnN0YXRlID0gc3RhdGUuZGF0YTtcclxuXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XHJcbiAgICAgICAgICAgIExvZy53YXJuKFwiUmVzcG9uc2VWYWxpZGF0b3IudmFsaWRhdGVTaWdub3V0UmVzcG9uc2U6IFJlc3BvbnNlIHdhcyBlcnJvclwiLCByZXNwb25zZS5lcnJvcik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3JSZXNwb25zZShyZXNwb25zZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgX3Byb2Nlc3NTaWduaW5QYXJhbXMoc3RhdGUsIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgaWYgKHN0YXRlLmlkICE9PSByZXNwb25zZS5zdGF0ZSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogU3RhdGUgZG9lcyBub3QgbWF0Y2hcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJTdGF0ZSBkb2VzIG5vdCBtYXRjaFwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXN0YXRlLmNsaWVudF9pZCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogTm8gY2xpZW50X2lkIG9uIHN0YXRlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gY2xpZW50X2lkIG9uIHN0YXRlXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghc3RhdGUuYXV0aG9yaXR5KSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBObyBhdXRob3JpdHkgb24gc3RhdGVcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBhdXRob3JpdHkgb24gc3RhdGVcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdGhpcyBhbGxvd3MgdGhlIGF1dGhvcml0eSB0byBiZSBsb2FkZWQgZnJvbSB0aGUgc2lnbmluIHN0YXRlXHJcbiAgICAgICAgaWYgKCF0aGlzLl9zZXR0aW5ncy5hdXRob3JpdHkpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3MuYXV0aG9yaXR5ID0gc3RhdGUuYXV0aG9yaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBlbnN1cmUgd2UncmUgdXNpbmcgdGhlIGNvcnJlY3QgYXV0aG9yaXR5IGlmIHRoZSBhdXRob3JpdHkgaXMgbm90IGxvYWRlZCBmcm9tIHNpZ25pbiBzdGF0ZVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3NldHRpbmdzLmF1dGhvcml0eSAmJiB0aGlzLl9zZXR0aW5ncy5hdXRob3JpdHkgIT09IHN0YXRlLmF1dGhvcml0eSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogYXV0aG9yaXR5IG1pc21hdGNoIG9uIHNldHRpbmdzIHZzLiBzaWduaW4gc3RhdGVcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJhdXRob3JpdHkgbWlzbWF0Y2ggb24gc2V0dGluZ3MgdnMuIHNpZ25pbiBzdGF0ZVwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRoaXMgYWxsb3dzIHRoZSBjbGllbnRfaWQgdG8gYmUgbG9hZGVkIGZyb20gdGhlIHNpZ25pbiBzdGF0ZVxyXG4gICAgICAgIGlmICghdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZCA9IHN0YXRlLmNsaWVudF9pZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZW5zdXJlIHdlJ3JlIHVzaW5nIHRoZSBjb3JyZWN0IGNsaWVudF9pZCBpZiB0aGUgY2xpZW50X2lkIGlzIG5vdCBsb2FkZWQgZnJvbSBzaWduaW4gc3RhdGVcclxuICAgICAgICBlbHNlIGlmICh0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQgJiYgdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkICE9PSBzdGF0ZS5jbGllbnRfaWQpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NTaWduaW5QYXJhbXM6IGNsaWVudF9pZCBtaXNtYXRjaCBvbiBzZXR0aW5ncyB2cy4gc2lnbmluIHN0YXRlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiY2xpZW50X2lkIG1pc21hdGNoIG9uIHNldHRpbmdzIHZzLiBzaWduaW4gc3RhdGVcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbm93IHRoYXQgd2Uga25vdyB0aGUgc3RhdGUgbWF0Y2hlcywgdGFrZSB0aGUgc3RvcmVkIGRhdGFcclxuICAgICAgICAvLyBhbmQgc2V0IGl0IGludG8gdGhlIHJlc3BvbnNlIHNvIGNhbGxlcnMgY2FuIGdldCB0aGVpciBzdGF0ZVxyXG4gICAgICAgIC8vIHRoaXMgaXMgaW1wb3J0YW50IGZvciBib3RoIHN1Y2Nlc3MgJiBlcnJvciBvdXRjb21lc1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBzdGF0ZSB2YWxpZGF0ZWRcIik7XHJcbiAgICAgICAgcmVzcG9uc2Uuc3RhdGUgPSBzdGF0ZS5kYXRhO1xyXG5cclxuICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcclxuICAgICAgICAgICAgTG9nLndhcm4oXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogUmVzcG9uc2Ugd2FzIGVycm9yXCIsIHJlc3BvbnNlLmVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvclJlc3BvbnNlKHJlc3BvbnNlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3RhdGUubm9uY2UgJiYgIXJlc3BvbnNlLmlkX3Rva2VuKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBFeHBlY3RpbmcgaWRfdG9rZW4gaW4gcmVzcG9uc2VcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBpZF90b2tlbiBpbiByZXNwb25zZVwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXN0YXRlLm5vbmNlICYmIHJlc3BvbnNlLmlkX3Rva2VuKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBOb3QgZXhwZWN0aW5nIGlkX3Rva2VuIGluIHJlc3BvbnNlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5leHBlY3RlZCBpZF90b2tlbiBpbiByZXNwb25zZVwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBfcHJvY2Vzc0NsYWltcyhyZXNwb25zZSkge1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5pc09wZW5JZENvbm5lY3QpIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDbGFpbXM6IHJlc3BvbnNlIGlzIE9JREMsIHByb2Nlc3NpbmcgY2xhaW1zXCIpO1xyXG5cclxuICAgICAgICAgICAgcmVzcG9uc2UucHJvZmlsZSA9IHRoaXMuX2ZpbHRlclByb3RvY29sQ2xhaW1zKHJlc3BvbnNlLnByb2ZpbGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLmxvYWRVc2VySW5mbyAmJiByZXNwb25zZS5hY2Nlc3NfdG9rZW4pIHtcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiBsb2FkaW5nIHVzZXIgaW5mb1wiKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlckluZm9TZXJ2aWNlLmdldENsYWltcyhyZXNwb25zZS5hY2Nlc3NfdG9rZW4pLnRoZW4oY2xhaW1zID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc0NsYWltczogdXNlciBpbmZvIGNsYWltcyByZWNlaXZlZCBmcm9tIHVzZXIgaW5mbyBlbmRwb2ludFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYWltcy5zdWIgIT09IHJlc3BvbnNlLnByb2ZpbGUuc3ViKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiBzdWIgZnJvbSB1c2VyIGluZm8gZW5kcG9pbnQgZG9lcyBub3QgbWF0Y2ggc3ViIGluIGFjY2Vzc190b2tlblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInN1YiBmcm9tIHVzZXIgaW5mbyBlbmRwb2ludCBkb2VzIG5vdCBtYXRjaCBzdWIgaW4gYWNjZXNzX3Rva2VuXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnByb2ZpbGUgPSB0aGlzLl9tZXJnZUNsYWltcyhyZXNwb25zZS5wcm9maWxlLCBjbGFpbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiB1c2VyIGluZm8gY2xhaW1zIHJlY2VpdmVkLCB1cGRhdGVkIHByb2ZpbGU6XCIsIHJlc3BvbnNlLnByb2ZpbGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiBub3QgbG9hZGluZyB1c2VyIGluZm9cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiByZXNwb25zZSBpcyBub3QgT0lEQywgbm90IHByb2Nlc3NpbmcgY2xhaW1zXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgX21lcmdlQ2xhaW1zKGNsYWltczEsIGNsYWltczIpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbih7fSwgY2xhaW1zMSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IG5hbWUgaW4gY2xhaW1zMikge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gY2xhaW1zMltuYW1lXTtcclxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlcyA9IFt2YWx1ZXNdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gdmFsdWVzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRbbmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbbmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0W25hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRbbmFtZV0uaW5kZXhPZih2YWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtuYW1lXS5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXN1bHRbbmFtZV0gIT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gW3Jlc3VsdFtuYW1lXSwgdmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIF9maWx0ZXJQcm90b2NvbENsYWltcyhjbGFpbXMpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fZmlsdGVyUHJvdG9jb2xDbGFpbXMsIGluY29taW5nIGNsYWltczpcIiwgY2xhaW1zKTtcclxuXHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IE9iamVjdC5hc3NpZ24oe30sIGNsYWltcyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5fZmlsdGVyUHJvdG9jb2xDbGFpbXMpIHtcclxuICAgICAgICAgICAgUHJvdG9jb2xDbGFpbXMuZm9yRWFjaCh0eXBlID0+IHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSByZXN1bHRbdHlwZV07XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX2ZpbHRlclByb3RvY29sQ2xhaW1zOiBwcm90b2NvbCBjbGFpbXMgZmlsdGVyZWRcIiwgcmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9maWx0ZXJQcm90b2NvbENsYWltczogcHJvdG9jb2wgY2xhaW1zIG5vdCBmaWx0ZXJlZFwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBfdmFsaWRhdGVUb2tlbnMoc3RhdGUsIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLmlkX3Rva2VuKSB7XHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5hY2Nlc3NfdG9rZW4pIHtcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZVRva2VuczogVmFsaWRhdGluZyBpZF90b2tlbiBhbmQgYWNjZXNzX3Rva2VuXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlSWRUb2tlbkFuZEFjY2Vzc1Rva2VuKHN0YXRlLCByZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZVRva2VuczogVmFsaWRhdGluZyBpZF90b2tlblwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlSWRUb2tlbihzdGF0ZSwgcmVzcG9uc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlVG9rZW5zOiBObyBpZF90b2tlbiB0byB2YWxpZGF0ZVwiKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBfdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW4oc3RhdGUsIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlSWRUb2tlbihzdGF0ZSwgcmVzcG9uc2UpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGVBY2Nlc3NUb2tlbihyZXNwb25zZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgX3ZhbGlkYXRlSWRUb2tlbihzdGF0ZSwgcmVzcG9uc2UpIHtcclxuICAgICAgICBpZiAoIXN0YXRlLm5vbmNlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IE5vIG5vbmNlIG9uIHN0YXRlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gbm9uY2Ugb24gc3RhdGVcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGp3dCA9IHRoaXMuX2pvc2VVdGlsLnBhcnNlSnd0KHJlc3BvbnNlLmlkX3Rva2VuKTtcclxuICAgICAgICBpZiAoIWp3dCB8fCAhand0LmhlYWRlciB8fCAhand0LnBheWxvYWQpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbjogRmFpbGVkIHRvIHBhcnNlIGlkX3Rva2VuXCIsIGp3dCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHN0YXRlLm5vbmNlICE9PSBqd3QucGF5bG9hZC5ub25jZSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBJbnZhbGlkIG5vbmNlIGluIGlkX3Rva2VuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiSW52YWxpZCBub25jZSBpbiBpZF90b2tlblwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIga2lkID0gand0LmhlYWRlci5raWQ7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0SXNzdWVyKCkudGhlbihpc3N1ZXIgPT4ge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBSZWNlaXZlZCBpc3N1ZXJcIik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFNpZ25pbmdLZXlzKCkudGhlbihrZXlzID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICgha2V5cykge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IE5vIHNpZ25pbmcga2V5cyBmcm9tIG1ldGFkYXRhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBzaWduaW5nIGtleXMgZnJvbSBtZXRhZGF0YVwiKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbjogUmVjZWl2ZWQgc2lnbmluZyBrZXlzXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGtleTtcclxuICAgICAgICAgICAgICAgIGlmICgha2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5cyA9IHRoaXMuX2ZpbHRlckJ5QWxnKGtleXMsIGp3dC5oZWFkZXIuYWxnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBObyBraWQgZm91bmQgaW4gaWRfdG9rZW4gYW5kIG1vcmUgdGhhbiBvbmUga2V5IGZvdW5kIGluIG1ldGFkYXRhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8ga2lkIGZvdW5kIGluIGlkX3Rva2VuIGFuZCBtb3JlIHRoYW4gb25lIGtleSBmb3VuZCBpbiBtZXRhZGF0YVwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBraWQgaXMgbWFuZGF0b3J5IG9ubHkgd2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUga2V5cyBpbiB0aGUgcmVmZXJlbmNlZCBKV0sgU2V0IGRvY3VtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNlZSBodHRwOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI1NpZ25pbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0ga2V5c1swXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXkgPSBrZXlzLmZpbHRlcihrZXkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5LmtpZCA9PT0ga2lkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICgha2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbjogTm8ga2V5IG1hdGNoaW5nIGtpZCBvciBhbGcgZm91bmQgaW4gc2lnbmluZyBrZXlzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBrZXkgbWF0Y2hpbmcga2lkIG9yIGFsZyBmb3VuZCBpbiBzaWduaW5nIGtleXNcIikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBhdWRpZW5jZSA9IHN0YXRlLmNsaWVudF9pZDtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY2xvY2tTa2V3SW5TZWNvbmRzID0gdGhpcy5fc2V0dGluZ3MuY2xvY2tTa2V3O1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbjogVmFsaWRhaW5nIEpXVDsgdXNpbmcgY2xvY2sgc2tldyAoaW4gc2Vjb25kcykgb2Y6IFwiLCBjbG9ja1NrZXdJblNlY29uZHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9qb3NlVXRpbC52YWxpZGF0ZUp3dChyZXNwb25zZS5pZF90b2tlbiwga2V5LCBpc3N1ZXIsIGF1ZGllbmNlLCBjbG9ja1NrZXdJblNlY29uZHMpLnRoZW4oKCk9PntcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBKV1QgdmFsaWRhdGlvbiBzdWNjZXNzZnVsXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWp3dC5wYXlsb2FkLnN1Yikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBObyBzdWIgcHJlc2VudCBpbiBpZF90b2tlblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHN1YiBwcmVzZW50IGluIGlkX3Rva2VuXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnByb2ZpbGUgPSBqd3QucGF5bG9hZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF9maWx0ZXJCeUFsZyhrZXlzLCBhbGcpe1xyXG4gICAgICAgIHZhciBrdHkgPSBudWxsO1xyXG4gICAgICAgIGlmIChhbGcuc3RhcnRzV2l0aChcIlJTXCIpKSB7XHJcbiAgICAgICAgICAgIGt0eSA9IFwiUlNBXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFsZy5zdGFydHNXaXRoKFwiUFNcIikpIHtcclxuICAgICAgICAgICAga3R5ID0gXCJQU1wiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhbGcuc3RhcnRzV2l0aChcIkVTXCIpKSB7XHJcbiAgICAgICAgICAgIGt0eSA9IFwiRUNcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9maWx0ZXJCeUFsZzogYWxnIG5vdCBzdXBwb3J0ZWQ6IFwiLCBhbGcpO1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fZmlsdGVyQnlBbGc6IExvb2tpbmcgZm9yIGtleXMgdGhhdCBtYXRjaCBrdHk6IFwiLCBrdHkpO1xyXG5cclxuICAgICAgICBrZXlzID0ga2V5cy5maWx0ZXIoa2V5ID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGtleS5rdHkgPT09IGt0eTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX2ZpbHRlckJ5QWxnOiBOdW1iZXIgb2Yga2V5cyB0aGF0IG1hdGNoIGt0eTogXCIsIGt0eSwga2V5cy5sZW5ndGgpO1xyXG5cclxuICAgICAgICByZXR1cm4ga2V5cztcclxuICAgIH1cclxuXHJcbiAgICBfdmFsaWRhdGVBY2Nlc3NUb2tlbihyZXNwb25zZSkge1xyXG4gICAgICAgIGlmICghcmVzcG9uc2UucHJvZmlsZSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogTm8gcHJvZmlsZSBsb2FkZWQgZnJvbSBpZF90b2tlblwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHByb2ZpbGUgbG9hZGVkIGZyb20gaWRfdG9rZW5cIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFyZXNwb25zZS5wcm9maWxlLmF0X2hhc2gpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IE5vIGF0X2hhc2ggaW4gaWRfdG9rZW5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBhdF9oYXNoIGluIGlkX3Rva2VuXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghcmVzcG9uc2UuaWRfdG9rZW4pIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IE5vIGlkX3Rva2VuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gaWRfdG9rZW5cIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGp3dCA9IHRoaXMuX2pvc2VVdGlsLnBhcnNlSnd0KHJlc3BvbnNlLmlkX3Rva2VuKTtcclxuICAgICAgICBpZiAoIWp3dCB8fCAhand0LmhlYWRlcikge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogRmFpbGVkIHRvIHBhcnNlIGlkX3Rva2VuXCIsIGp3dCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGhhc2hBbGcgPSBqd3QuaGVhZGVyLmFsZztcclxuICAgICAgICBpZiAoIWhhc2hBbGcgfHwgaGFzaEFsZy5sZW5ndGggIT09IDUpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IFVuc3VwcG9ydGVkIGFsZzpcIiwgaGFzaEFsZyk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBhbGc6IFwiICsgaGFzaEFsZykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGhhc2hCaXRzID0gaGFzaEFsZy5zdWJzdHIoMiwgMyk7XHJcbiAgICAgICAgaWYgKCFoYXNoQml0cykge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogVW5zdXBwb3J0ZWQgYWxnOlwiLCBoYXNoQWxnLCBoYXNoQml0cyk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBhbGc6IFwiICsgaGFzaEFsZykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaGFzaEJpdHMgPSBwYXJzZUludChoYXNoQml0cyk7XHJcbiAgICAgICAgaWYgKGhhc2hCaXRzICE9PSAyNTYgJiYgaGFzaEJpdHMgIT09IDM4NCAmJiBoYXNoQml0cyAhPT0gNTEyKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBVbnN1cHBvcnRlZCBhbGc6XCIsIGhhc2hBbGcsIGhhc2hCaXRzKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGFsZzogXCIgKyBoYXNoQWxnKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc2hhID0gXCJzaGFcIiArIGhhc2hCaXRzO1xyXG4gICAgICAgIHZhciBoYXNoID0gdGhpcy5fam9zZVV0aWwuaGFzaFN0cmluZyhyZXNwb25zZS5hY2Nlc3NfdG9rZW4sIHNoYSk7XHJcbiAgICAgICAgaWYgKCFoYXNoKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBhY2Nlc3NfdG9rZW4gaGFzaCBmYWlsZWQ6XCIsIHNoYSk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gdmFsaWRhdGUgYXRfaGFzaFwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbGVmdCA9IGhhc2guc3Vic3RyKDAsIGhhc2gubGVuZ3RoIC8gMik7XHJcbiAgICAgICAgdmFyIGxlZnRfYjY0dSA9IHRoaXMuX2pvc2VVdGlsLmhleFRvQmFzZTY0VXJsKGxlZnQpO1xyXG4gICAgICAgIGlmIChsZWZ0X2I2NHUgIT09IHJlc3BvbnNlLnByb2ZpbGUuYXRfaGFzaCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogRmFpbGVkIHRvIHZhbGlkYXRlIGF0X2hhc2hcIiwgbGVmdF9iNjR1LCByZXNwb25zZS5wcm9maWxlLmF0X2hhc2gpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiRmFpbGVkIHRvIHZhbGlkYXRlIGF0X2hhc2hcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IHN1Y2Nlc3NcIik7XHJcblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9SZXNwb25zZVZhbGlkYXRvci5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IEpzb25TZXJ2aWNlIH0gZnJvbSAnLi9Kc29uU2VydmljZSc7XHJcbmltcG9ydCB7IE1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4vTWV0YWRhdGFTZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXJJbmZvU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgSnNvblNlcnZpY2VDdG9yID0gSnNvblNlcnZpY2UsIE1ldGFkYXRhU2VydmljZUN0b3IgPSBNZXRhZGF0YVNlcnZpY2UpIHtcclxuICAgICAgICBpZiAoIXNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJJbmZvU2VydmljZS5jdG9yOiBObyBzZXR0aW5ncyBwYXNzZWRcIik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInNldHRpbmdzXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgICAgICB0aGlzLl9qc29uU2VydmljZSA9IG5ldyBKc29uU2VydmljZUN0b3IoKTtcclxuICAgICAgICB0aGlzLl9tZXRhZGF0YVNlcnZpY2UgPSBuZXcgTWV0YWRhdGFTZXJ2aWNlQ3Rvcih0aGlzLl9zZXR0aW5ncyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2xhaW1zKHRva2VuKSB7XHJcbiAgICAgICAgaWYgKCF0b2tlbikge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VySW5mb1NlcnZpY2UuZ2V0Q2xhaW1zOiBObyB0b2tlbiBwYXNzZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJBIHRva2VuIGlzIHJlcXVpcmVkXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0VXNlckluZm9FbmRwb2ludCgpLnRoZW4odXJsID0+IHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlckluZm9TZXJ2aWNlLmdldENsYWltczogcmVjZWl2ZWQgdXNlcmluZm8gdXJsXCIsIHVybCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvblNlcnZpY2UuZ2V0SnNvbih1cmwsIHRva2VuKS50aGVuKGNsYWltcyA9PiB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VySW5mb1NlcnZpY2UuZ2V0Q2xhaW1zOiBjbGFpbXMgcmVjZWl2ZWRcIiwgY2xhaW1zKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjbGFpbXM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Vc2VySW5mb1NlcnZpY2UuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBqd3MsIEtFWVVUSUwgYXMgS2V5VXRpbCwgWDUwOSwgY3J5cHRvLCBoZXh0b2I2NHUsIGI2NHRvaGV4IH0gZnJvbSAnLi4vanNyc2FzaWduL2Rpc3QvanNyc2FzaWduLmpzJztcclxuLy9pbXBvcnQgeyBqd3MsIEtFWVVUSUwgYXMgS2V5VXRpbCwgWDUwOSwgY3J5cHRvLCBoZXh0b2I2NHUsIGI2NHRvaGV4IH0gZnJvbSAnanNyc2FzaWduJztcclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5cclxuY29uc3QgQWxsb3dlZFNpZ25pbmdBbGdzID0gWydSUzI1NicsICdSUzM4NCcsICdSUzUxMicsICdQUzI1NicsICdQUzM4NCcsICdQUzUxMicsICdFUzI1NicsICdFUzM4NCcsICdFUzUxMiddO1xyXG5cclxuZXhwb3J0IGNsYXNzIEpvc2VVdGlsIHtcclxuXHJcbiAgICBzdGF0aWMgcGFyc2VKd3Qoand0KSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiSm9zZVV0aWwucGFyc2VKd3RcIik7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIHRva2VuID0gandzLkpXUy5wYXJzZShqd3QpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiB0b2tlbi5oZWFkZXJPYmosXHJcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiB0b2tlbi5wYXlsb2FkT2JqXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdmFsaWRhdGVKd3Qoand0LCBrZXksIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tldywgbm93KSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiSm9zZVV0aWwudmFsaWRhdGVKd3RcIik7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkua3R5ID09PSBcIlJTQVwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5LmUgJiYga2V5Lm4pIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXkgPSBLZXlVdGlsLmdldEtleShrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoa2V5Lng1YyAmJiBrZXkueDVjLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoZXggPSBiNjR0b2hleChrZXkueDVjWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBrZXkgPSBYNTA5LmdldFB1YmxpY0tleUZyb21DZXJ0SGV4KGhleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC52YWxpZGF0ZUp3dDogUlNBIGtleSBtaXNzaW5nIGtleSBtYXRlcmlhbFwiLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJSU0Ega2V5IG1pc3Npbmcga2V5IG1hdGVyaWFsXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChrZXkua3R5ID09PSBcIkVDXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChrZXkuY3J2ICYmIGtleS54ICYmIGtleS55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gS2V5VXRpbC5nZXRLZXkoa2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLnZhbGlkYXRlSnd0OiBFQyBrZXkgbWlzc2luZyBrZXkgbWF0ZXJpYWxcIiwga2V5KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiRUMga2V5IG1pc3Npbmcga2V5IG1hdGVyaWFsXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLnZhbGlkYXRlSnd0OiBVbnN1cHBvcnRlZCBrZXkgdHlwZVwiLCBrZXkgJiYga2V5Lmt0eSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQga2V5IHR5cGU6IFwiICsga2V5ICYmIGtleS5rdHkpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIEpvc2VVdGlsLl92YWxpZGF0ZUp3dChqd3QsIGtleSwgaXNzdWVyLCBhdWRpZW5jZSwgY2xvY2tTa2V3LCBub3cpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoZSAmJiBlLm1lc3NhZ2UgfHwgZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcIkpXVCB2YWxpZGF0aW9uIGZhaWxlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIF92YWxpZGF0ZUp3dChqd3QsIGtleSwgaXNzdWVyLCBhdWRpZW5jZSwgY2xvY2tTa2V3LCBub3cpIHtcclxuICAgICAgICBpZiAoIWNsb2NrU2tldykge1xyXG4gICAgICAgICAgICBjbG9ja1NrZXcgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFub3cpIHtcclxuICAgICAgICAgICAgbm93ID0gcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHBheWxvYWQgPSBKb3NlVXRpbC5wYXJzZUp3dChqd3QpLnBheWxvYWQ7XHJcblxyXG4gICAgICAgIGlmICghcGF5bG9hZC5pc3MpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBpc3N1ZXIgd2FzIG5vdCBwcm92aWRlZFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImlzc3VlciB3YXMgbm90IHByb3ZpZGVkXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBheWxvYWQuaXNzICE9PSBpc3N1ZXIpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBJbnZhbGlkIGlzc3VlciBpbiB0b2tlblwiLCBwYXlsb2FkLmlzcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIGlzc3VlciBpbiB0b2tlbjogXCIgKyBwYXlsb2FkLmlzcykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFwYXlsb2FkLmF1ZCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3Q6IGF1ZCB3YXMgbm90IHByb3ZpZGVkXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiYXVkIHdhcyBub3QgcHJvdmlkZWRcIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmFsaWRBdWRpZW5jZSA9IHBheWxvYWQuYXVkID09PSBhdWRpZW5jZSB8fCAoQXJyYXkuaXNBcnJheShwYXlsb2FkLmF1ZCkgJiYgcGF5bG9hZC5hdWQuaW5kZXhPZihhdWRpZW5jZSkgPj0gMCk7XHJcbiAgICAgICAgaWYgKCF2YWxpZEF1ZGllbmNlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogSW52YWxpZCBhdWRpZW5jZSBpbiB0b2tlblwiLCBwYXlsb2FkLmF1ZCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIGF1ZGllbmNlIGluIHRva2VuOiBcIiArIHBheWxvYWQuYXVkKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbG93ZXJOb3cgPSBub3cgKyBjbG9ja1NrZXc7XHJcbiAgICAgICAgdmFyIHVwcGVyTm93ID0gbm93IC0gY2xvY2tTa2V3O1xyXG5cclxuICAgICAgICBpZiAoIXBheWxvYWQuaWF0KSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogaWF0IHdhcyBub3QgcHJvdmlkZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpYXQgd2FzIG5vdCBwcm92aWRlZFwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsb3dlck5vdyA8IHBheWxvYWQuaWF0KSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogaWF0IGlzIGluIHRoZSBmdXR1cmVcIiwgcGF5bG9hZC5pYXQpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiaWF0IGlzIGluIHRoZSBmdXR1cmU6IFwiICsgcGF5bG9hZC5pYXQpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYXlsb2FkLm5iZiAmJiBsb3dlck5vdyA8IHBheWxvYWQubmJmKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogbmJmIGlzIGluIHRoZSBmdXR1cmVcIiwgcGF5bG9hZC5uYmYpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwibmJmIGlzIGluIHRoZSBmdXR1cmU6IFwiICsgcGF5bG9hZC5uYmYpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghcGF5bG9hZC5leHApIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBleHAgd2FzIG5vdCBwcm92aWRlZFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImV4cCB3YXMgbm90IHByb3ZpZGVkXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBheWxvYWQuZXhwIDwgdXBwZXJOb3cpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBleHAgaXMgaW4gdGhlIHBhc3RcIiwgcGF5bG9hZC5leHApO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiZXhwIGlzIGluIHRoZSBwYXN0OlwiICsgcGF5bG9hZC5leHApKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghandzLkpXUy52ZXJpZnkoand0LCBrZXksIEFsbG93ZWRTaWduaW5nQWxncykpIHtcclxuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogc2lnbmF0dXJlIHZhbGlkYXRpb24gZmFpbGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInNpZ25hdHVyZSB2YWxpZGF0aW9uIGZhaWxlZFwiKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKGUgJiYgZS5tZXNzYWdlIHx8IGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwic2lnbmF0dXJlIHZhbGlkYXRpb24gZmFpbGVkXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaGFzaFN0cmluZyh2YWx1ZSwgYWxnKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyeXB0by5VdGlsLmhhc2hTdHJpbmcodmFsdWUsIGFsZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGhleFRvQmFzZTY0VXJsKHZhbHVlKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIGhleHRvYjY0dSh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0pvc2VVdGlsLmpzIiwiLypcclxuICoganNyc2FzaWduKGFsbCkgOC4wLjEyICgyMDE4LTA0LTIyKSAoYykgMjAxMC0yMDE4IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXHJcbiAqL1xyXG5cclxudmFyIG5hdmlnYXRvciA9IHt9O1xyXG5uYXZpZ2F0b3IudXNlckFnZW50ID0gZmFsc2U7XHJcblxyXG52YXIgd2luZG93ID0ge307XHJcblxuLyohXHJcbkNvcHlyaWdodCAoYykgMjAxMSwgWWFob28hIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuQ29kZSBsaWNlbnNlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2U6XHJcbmh0dHA6Ly9kZXZlbG9wZXIueWFob28uY29tL3l1aS9saWNlbnNlLmh0bWxcclxudmVyc2lvbjogMi45LjBcclxuKi9cclxuaWYoWUFIT089PT11bmRlZmluZWQpe3ZhciBZQUhPTz17fX1ZQUhPTy5sYW5nPXtleHRlbmQ6ZnVuY3Rpb24oZyxoLGYpe2lmKCFofHwhZyl7dGhyb3cgbmV3IEVycm9yKFwiWUFIT08ubGFuZy5leHRlbmQgZmFpbGVkLCBwbGVhc2UgY2hlY2sgdGhhdCBhbGwgZGVwZW5kZW5jaWVzIGFyZSBpbmNsdWRlZC5cIil9dmFyIGQ9ZnVuY3Rpb24oKXt9O2QucHJvdG90eXBlPWgucHJvdG90eXBlO2cucHJvdG90eXBlPW5ldyBkKCk7Zy5wcm90b3R5cGUuY29uc3RydWN0b3I9ZztnLnN1cGVyY2xhc3M9aC5wcm90b3R5cGU7aWYoaC5wcm90b3R5cGUuY29uc3RydWN0b3I9PU9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3Ipe2gucHJvdG90eXBlLmNvbnN0cnVjdG9yPWh9aWYoZil7dmFyIGI7Zm9yKGIgaW4gZil7Zy5wcm90b3R5cGVbYl09ZltiXX12YXIgZT1mdW5jdGlvbigpe30sYz1bXCJ0b1N0cmluZ1wiLFwidmFsdWVPZlwiXTt0cnl7aWYoL01TSUUvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpe2U9ZnVuY3Rpb24oaixpKXtmb3IoYj0wO2I8Yy5sZW5ndGg7Yj1iKzEpe3ZhciBsPWNbYl0saz1pW2xdO2lmKHR5cGVvZiBrPT09XCJmdW5jdGlvblwiJiZrIT1PYmplY3QucHJvdG90eXBlW2xdKXtqW2xdPWt9fX19fWNhdGNoKGEpe31lKGcucHJvdG90eXBlLGYpfX19O1xuLyohIENyeXB0b0pTIHYzLjEuMiBjb3JlLWZpeC5qc1xyXG4gKiBjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcclxuICogKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcclxuICogVEhJUyBJUyBGSVggb2YgJ2NvcmUuanMnIHRvIGZpeCBIbWFjIGlzc3VlLlxyXG4gKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy9pc3N1ZXMvZGV0YWlsP2lkPTg0XHJcbiAqIGh0dHBzOi8vY3J5cHRvLWpzLmdvb2dsZWNvZGUuY29tL3N2bi1oaXN0b3J5L3I2NjcvYnJhbmNoZXMvMy54L3NyYy9jb3JlLmpzXHJcbiAqL1xyXG52YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fChmdW5jdGlvbihlLGcpe3ZhciBhPXt9O3ZhciBiPWEubGliPXt9O3ZhciBqPWIuQmFzZT0oZnVuY3Rpb24oKXtmdW5jdGlvbiBuKCl7fXJldHVybntleHRlbmQ6ZnVuY3Rpb24ocCl7bi5wcm90b3R5cGU9dGhpczt2YXIgbz1uZXcgbigpO2lmKHApe28ubWl4SW4ocCl9aWYoIW8uaGFzT3duUHJvcGVydHkoXCJpbml0XCIpKXtvLmluaXQ9ZnVuY3Rpb24oKXtvLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19by5pbml0LnByb3RvdHlwZT1vO28uJHN1cGVyPXRoaXM7cmV0dXJuIG99LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBvPXRoaXMuZXh0ZW5kKCk7by5pbml0LmFwcGx5KG8sYXJndW1lbnRzKTtyZXR1cm4gb30saW5pdDpmdW5jdGlvbigpe30sbWl4SW46ZnVuY3Rpb24ocCl7Zm9yKHZhciBvIGluIHApe2lmKHAuaGFzT3duUHJvcGVydHkobykpe3RoaXNbb109cFtvXX19aWYocC5oYXNPd25Qcm9wZXJ0eShcInRvU3RyaW5nXCIpKXt0aGlzLnRvU3RyaW5nPXAudG9TdHJpbmd9fSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19fSgpKTt2YXIgbD1iLldvcmRBcnJheT1qLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihvLG4pe289dGhpcy53b3Jkcz1vfHxbXTtpZihuIT1nKXt0aGlzLnNpZ0J5dGVzPW59ZWxzZXt0aGlzLnNpZ0J5dGVzPW8ubGVuZ3RoKjR9fSx0b1N0cmluZzpmdW5jdGlvbihuKXtyZXR1cm4obnx8aCkuc3RyaW5naWZ5KHRoaXMpfSxjb25jYXQ6ZnVuY3Rpb24odCl7dmFyIHE9dGhpcy53b3Jkczt2YXIgcD10LndvcmRzO3ZhciBuPXRoaXMuc2lnQnl0ZXM7dmFyIHM9dC5zaWdCeXRlczt0aGlzLmNsYW1wKCk7aWYobiU0KXtmb3IodmFyIHI9MDtyPHM7cisrKXt2YXIgbz0ocFtyPj4+Ml0+Pj4oMjQtKHIlNCkqOCkpJjI1NTtxWyhuK3IpPj4+Ml18PW88PCgyNC0oKG4rciklNCkqOCl9fWVsc2V7Zm9yKHZhciByPTA7cjxzO3IrPTQpe3FbKG4rcik+Pj4yXT1wW3I+Pj4yXX19dGhpcy5zaWdCeXRlcys9cztyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgbz10aGlzLndvcmRzO3ZhciBuPXRoaXMuc2lnQnl0ZXM7b1tuPj4+Ml0mPTQyOTQ5NjcyOTU8PCgzMi0obiU0KSo4KTtvLmxlbmd0aD1lLmNlaWwobi80KX0sY2xvbmU6ZnVuY3Rpb24oKXt2YXIgbj1qLmNsb25lLmNhbGwodGhpcyk7bi53b3Jkcz10aGlzLndvcmRzLnNsaWNlKDApO3JldHVybiBufSxyYW5kb206ZnVuY3Rpb24ocCl7dmFyIG89W107Zm9yKHZhciBuPTA7bjxwO24rPTQpe28ucHVzaCgoZS5yYW5kb20oKSo0Mjk0OTY3Mjk2KXwwKX1yZXR1cm4gbmV3IGwuaW5pdChvLHApfX0pO3ZhciBtPWEuZW5jPXt9O3ZhciBoPW0uSGV4PXtzdHJpbmdpZnk6ZnVuY3Rpb24ocCl7dmFyIHI9cC53b3Jkczt2YXIgbz1wLnNpZ0J5dGVzO3ZhciBxPVtdO2Zvcih2YXIgbj0wO248bztuKyspe3ZhciBzPShyW24+Pj4yXT4+PigyNC0obiU0KSo4KSkmMjU1O3EucHVzaCgocz4+PjQpLnRvU3RyaW5nKDE2KSk7cS5wdXNoKChzJjE1KS50b1N0cmluZygxNikpfXJldHVybiBxLmpvaW4oXCJcIil9LHBhcnNlOmZ1bmN0aW9uKHApe3ZhciBuPXAubGVuZ3RoO3ZhciBxPVtdO2Zvcih2YXIgbz0wO288bjtvKz0yKXtxW28+Pj4zXXw9cGFyc2VJbnQocC5zdWJzdHIobywyKSwxNik8PCgyNC0obyU4KSo0KX1yZXR1cm4gbmV3IGwuaW5pdChxLG4vMil9fTt2YXIgZD1tLkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKHEpe3ZhciByPXEud29yZHM7dmFyIHA9cS5zaWdCeXRlczt2YXIgbj1bXTtmb3IodmFyIG89MDtvPHA7bysrKXt2YXIgcz0ocltvPj4+Ml0+Pj4oMjQtKG8lNCkqOCkpJjI1NTtuLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShzKSl9cmV0dXJuIG4uam9pbihcIlwiKX0scGFyc2U6ZnVuY3Rpb24ocCl7dmFyIG49cC5sZW5ndGg7dmFyIHE9W107Zm9yKHZhciBvPTA7bzxuO28rKyl7cVtvPj4+Ml18PShwLmNoYXJDb2RlQXQobykmMjU1KTw8KDI0LShvJTQpKjgpfXJldHVybiBuZXcgbC5pbml0KHEsbil9fTt2YXIgYz1tLlV0Zjg9e3N0cmluZ2lmeTpmdW5jdGlvbihuKXt0cnl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoZC5zdHJpbmdpZnkobikpKX1jYXRjaChvKXt0aHJvdyBuZXcgRXJyb3IoXCJNYWxmb3JtZWQgVVRGLTggZGF0YVwiKX19LHBhcnNlOmZ1bmN0aW9uKG4pe3JldHVybiBkLnBhcnNlKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChuKSkpfX07dmFyIGk9Yi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtPWouZXh0ZW5kKHtyZXNldDpmdW5jdGlvbigpe3RoaXMuX2RhdGE9bmV3IGwuaW5pdCgpO3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihuKXtpZih0eXBlb2Ygbj09XCJzdHJpbmdcIil7bj1jLnBhcnNlKG4pfXRoaXMuX2RhdGEuY29uY2F0KG4pO3RoaXMuX25EYXRhQnl0ZXMrPW4uc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKHcpe3ZhciBxPXRoaXMuX2RhdGE7dmFyIHg9cS53b3Jkczt2YXIgbj1xLnNpZ0J5dGVzO3ZhciB0PXRoaXMuYmxvY2tTaXplO3ZhciB2PXQqNDt2YXIgdT1uL3Y7aWYodyl7dT1lLmNlaWwodSl9ZWxzZXt1PWUubWF4KCh1fDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCl9dmFyIHM9dSp0O3ZhciByPWUubWluKHMqNCxuKTtpZihzKXtmb3IodmFyIHA9MDtwPHM7cCs9dCl7dGhpcy5fZG9Qcm9jZXNzQmxvY2soeCxwKX12YXIgbz14LnNwbGljZSgwLHMpO3Euc2lnQnl0ZXMtPXJ9cmV0dXJuIG5ldyBsLmluaXQobyxyKX0sY2xvbmU6ZnVuY3Rpb24oKXt2YXIgbj1qLmNsb25lLmNhbGwodGhpcyk7bi5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIG59LF9taW5CdWZmZXJTaXplOjB9KTt2YXIgZj1iLkhhc2hlcj1pLmV4dGVuZCh7Y2ZnOmouZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihuKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQobik7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe2kucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihuKXt0aGlzLl9hcHBlbmQobik7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihuKXtpZihuKXt0aGlzLl9hcHBlbmQobil9dmFyIG89dGhpcy5fZG9GaW5hbGl6ZSgpO3JldHVybiBvfSxibG9ja1NpemU6NTEyLzMyLF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKHAsbyl7cmV0dXJuIG5ldyBuLmluaXQobykuZmluYWxpemUocCl9fSxfY3JlYXRlSG1hY0hlbHBlcjpmdW5jdGlvbihuKXtyZXR1cm4gZnVuY3Rpb24ocCxvKXtyZXR1cm4gbmV3IGsuSE1BQy5pbml0KG4sbykuZmluYWxpemUocCl9fX0pO3ZhciBrPWEuYWxnbz17fTtyZXR1cm4gYX0oTWF0aCkpO1xuLypcclxuQ3J5cHRvSlMgdjMuMS4yIHg2NC1jb3JlLW1pbi5qc1xyXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcclxuKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcclxuKi9cclxuKGZ1bmN0aW9uKGcpe3ZhciBhPUNyeXB0b0pTLGY9YS5saWIsZT1mLkJhc2UsaD1mLldvcmRBcnJheSxhPWEueDY0PXt9O2EuV29yZD1lLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihiLGMpe3RoaXMuaGlnaD1iO3RoaXMubG93PWN9fSk7YS5Xb3JkQXJyYXk9ZS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oYixjKXtiPXRoaXMud29yZHM9Ynx8W107dGhpcy5zaWdCeXRlcz1jIT1nP2M6OCpiLmxlbmd0aH0sdG9YMzI6ZnVuY3Rpb24oKXtmb3IodmFyIGI9dGhpcy53b3JkcyxjPWIubGVuZ3RoLGE9W10sZD0wO2Q8YztkKyspe3ZhciBlPWJbZF07YS5wdXNoKGUuaGlnaCk7YS5wdXNoKGUubG93KX1yZXR1cm4gaC5jcmVhdGUoYSx0aGlzLnNpZ0J5dGVzKX0sY2xvbmU6ZnVuY3Rpb24oKXtmb3IodmFyIGI9ZS5jbG9uZS5jYWxsKHRoaXMpLGM9Yi53b3Jkcz10aGlzLndvcmRzLnNsaWNlKDApLGE9Yy5sZW5ndGgsZD0wO2Q8YTtkKyspY1tkXT1jW2RdLmNsb25lKCk7cmV0dXJuIGJ9fSl9KSgpO1xyXG5cbi8qXHJcbkNyeXB0b0pTIHYzLjEuMiBlbmMtYmFzZTY0LmpzXHJcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xyXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxyXG4qL1xyXG4oZnVuY3Rpb24oKXt2YXIgaD1DcnlwdG9KUyxqPWgubGliLldvcmRBcnJheTtoLmVuYy5CYXNlNjQ9e3N0cmluZ2lmeTpmdW5jdGlvbihiKXt2YXIgZT1iLndvcmRzLGY9Yi5zaWdCeXRlcyxjPXRoaXMuX21hcDtiLmNsYW1wKCk7Yj1bXTtmb3IodmFyIGE9MDthPGY7YSs9Mylmb3IodmFyIGQ9KGVbYT4+PjJdPj4+MjQtOCooYSU0KSYyNTUpPDwxNnwoZVthKzE+Pj4yXT4+PjI0LTgqKChhKzEpJTQpJjI1NSk8PDh8ZVthKzI+Pj4yXT4+PjI0LTgqKChhKzIpJTQpJjI1NSxnPTA7ND5nJiZhKzAuNzUqZzxmO2crKyliLnB1c2goYy5jaGFyQXQoZD4+PjYqKDMtZykmNjMpKTtpZihlPWMuY2hhckF0KDY0KSlmb3IoO2IubGVuZ3RoJTQ7KWIucHVzaChlKTtyZXR1cm4gYi5qb2luKFwiXCIpfSxwYXJzZTpmdW5jdGlvbihiKXt2YXIgZT1iLmxlbmd0aCxmPXRoaXMuX21hcCxjPWYuY2hhckF0KDY0KTtjJiYoYz1iLmluZGV4T2YoYyksLTEhPWMmJihlPWMpKTtmb3IodmFyIGM9W10sYT0wLGQ9MDtkPFxyXG5lO2QrKylpZihkJTQpe3ZhciBnPWYuaW5kZXhPZihiLmNoYXJBdChkLTEpKTw8MiooZCU0KSxoPWYuaW5kZXhPZihiLmNoYXJBdChkKSk+Pj42LTIqKGQlNCk7Y1thPj4+Ml18PShnfGgpPDwyNC04KihhJTQpO2ErK31yZXR1cm4gai5jcmVhdGUoYyxhKX0sX21hcDpcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCJ9fSkoKTtcclxuXG4vKlxyXG5DcnlwdG9KUyB2My4xLjIgc2hhMjU2LW1pbi5qc1xyXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcclxuKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcclxuKi9cclxuKGZ1bmN0aW9uKGspe2Zvcih2YXIgZz1DcnlwdG9KUyxoPWcubGliLHY9aC5Xb3JkQXJyYXksaj1oLkhhc2hlcixoPWcuYWxnbyxzPVtdLHQ9W10sdT1mdW5jdGlvbihxKXtyZXR1cm4gNDI5NDk2NzI5NioocS0ocXwwKSl8MH0sbD0yLGI9MDs2ND5iOyl7dmFyIGQ7YTp7ZD1sO2Zvcih2YXIgdz1rLnNxcnQoZCkscj0yO3I8PXc7cisrKWlmKCEoZCVyKSl7ZD0hMTticmVhayBhfWQ9ITB9ZCYmKDg+YiYmKHNbYl09dShrLnBvdyhsLDAuNSkpKSx0W2JdPXUoay5wb3cobCwxLzMpKSxiKyspO2wrK312YXIgbj1bXSxoPWguU0hBMjU2PWouZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IHYuaW5pdChzLnNsaWNlKDApKX0sX2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKHEsaCl7Zm9yKHZhciBhPXRoaXMuX2hhc2gud29yZHMsYz1hWzBdLGQ9YVsxXSxiPWFbMl0saz1hWzNdLGY9YVs0XSxnPWFbNV0saj1hWzZdLGw9YVs3XSxlPTA7NjQ+ZTtlKyspe2lmKDE2PmUpbltlXT1cclxucVtoK2VdfDA7ZWxzZXt2YXIgbT1uW2UtMTVdLHA9bltlLTJdO25bZV09KChtPDwyNXxtPj4+NyleKG08PDE0fG0+Pj4xOClebT4+PjMpK25bZS03XSsoKHA8PDE1fHA+Pj4xNyleKHA8PDEzfHA+Pj4xOSlecD4+PjEwKStuW2UtMTZdfW09bCsoKGY8PDI2fGY+Pj42KV4oZjw8MjF8Zj4+PjExKV4oZjw8N3xmPj4+MjUpKSsoZiZnXn5mJmopK3RbZV0rbltlXTtwPSgoYzw8MzB8Yz4+PjIpXihjPDwxOXxjPj4+MTMpXihjPDwxMHxjPj4+MjIpKSsoYyZkXmMmYl5kJmIpO2w9ajtqPWc7Zz1mO2Y9ayttfDA7az1iO2I9ZDtkPWM7Yz1tK3B8MH1hWzBdPWFbMF0rY3wwO2FbMV09YVsxXStkfDA7YVsyXT1hWzJdK2J8MDthWzNdPWFbM10ra3wwO2FbNF09YVs0XStmfDA7YVs1XT1hWzVdK2d8MDthWzZdPWFbNl0ranwwO2FbN109YVs3XStsfDB9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGQ9dGhpcy5fZGF0YSxiPWQud29yZHMsYT04KnRoaXMuX25EYXRhQnl0ZXMsYz04KmQuc2lnQnl0ZXM7XHJcbmJbYz4+PjVdfD0xMjg8PDI0LWMlMzI7YlsoYys2ND4+Pjk8PDQpKzE0XT1rLmZsb29yKGEvNDI5NDk2NzI5Nik7YlsoYys2ND4+Pjk8PDQpKzE1XT1hO2Quc2lnQnl0ZXM9NCpiLmxlbmd0aDt0aGlzLl9wcm9jZXNzKCk7cmV0dXJuIHRoaXMuX2hhc2h9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGI9ai5jbG9uZS5jYWxsKHRoaXMpO2IuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBifX0pO2cuU0hBMjU2PWouX2NyZWF0ZUhlbHBlcihoKTtnLkhtYWNTSEEyNTY9ai5fY3JlYXRlSG1hY0hlbHBlcihoKX0pKE1hdGgpO1xyXG5cbi8qXHJcbkNyeXB0b0pTIHYzLjEuMiBzaGE1MTItbWluLmpzXHJcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xyXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxyXG4qL1xyXG4oZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7cmV0dXJuIGQuY3JlYXRlLmFwcGx5KGQsYXJndW1lbnRzKX1mb3IodmFyIG49Q3J5cHRvSlMscj1uLmxpYi5IYXNoZXIsZT1uLng2NCxkPWUuV29yZCxUPWUuV29yZEFycmF5LGU9bi5hbGdvLGVhPVthKDExMTYzNTI0MDgsMzYwOTc2NzQ1OCksYSgxODk5NDQ3NDQxLDYwMjg5MTcyNSksYSgzMDQ5MzIzNDcxLDM5NjQ0ODQzOTkpLGEoMzkyMTAwOTU3MywyMTczMjk1NTQ4KSxhKDk2MTk4NzE2Myw0MDgxNjI4NDcyKSxhKDE1MDg5NzA5OTMsMzA1MzgzNDI2NSksYSgyNDUzNjM1NzQ4LDI5Mzc2NzE1NzkpLGEoMjg3MDc2MzIyMSwzNjY0NjA5NTYwKSxhKDM2MjQzODEwODAsMjczNDg4MzM5NCksYSgzMTA1OTg0MDEsMTE2NDk5NjU0MiksYSg2MDcyMjUyNzgsMTMyMzYxMDc2NCksYSgxNDI2ODgxOTg3LDM1OTAzMDQ5OTQpLGEoMTkyNTA3ODM4OCw0MDY4MTgyMzgzKSxhKDIxNjIwNzgyMDYsOTkxMzM2MTEzKSxhKDI2MTQ4ODgxMDMsNjMzODAzMzE3KSxcclxuYSgzMjQ4MjIyNTgwLDM0Nzk3NzQ4NjgpLGEoMzgzNTM5MDQwMSwyNjY2NjEzNDU4KSxhKDQwMjIyMjQ3NzQsOTQ0NzExMTM5KSxhKDI2NDM0NzA3OCwyMzQxMjYyNzczKSxhKDYwNDgwNzYyOCwyMDA3ODAwOTMzKSxhKDc3MDI1NTk4MywxNDk1OTkwOTAxKSxhKDEyNDkxNTAxMjIsMTg1NjQzMTIzNSksYSgxNTU1MDgxNjkyLDMxNzUyMTgxMzIpLGEoMTk5NjA2NDk4NiwyMTk4OTUwODM3KSxhKDI1NTQyMjA4ODIsMzk5OTcxOTMzOSksYSgyODIxODM0MzQ5LDc2Njc4NDAxNiksYSgyOTUyOTk2ODA4LDI1NjY1OTQ4NzkpLGEoMzIxMDMxMzY3MSwzMjAzMzM3OTU2KSxhKDMzMzY1NzE4OTEsMTAzNDQ1NzAyNiksYSgzNTg0NTI4NzExLDI0NjY5NDg5MDEpLGEoMTEzOTI2OTkzLDM3NTgzMjYzODMpLGEoMzM4MjQxODk1LDE2ODcxNzkzNiksYSg2NjYzMDcyMDUsMTE4ODE3OTk2NCksYSg3NzM1Mjk5MTIsMTU0NjA0NTczNCksYSgxMjk0NzU3MzcyLDE1MjI4MDU0ODUpLGEoMTM5NjE4MjI5MSxcclxuMjY0MzgzMzgyMyksYSgxNjk1MTgzNzAwLDIzNDM1MjczOTApLGEoMTk4NjY2MTA1MSwxMDE0NDc3NDgwKSxhKDIxNzcwMjYzNTAsMTIwNjc1OTE0MiksYSgyNDU2OTU2MDM3LDM0NDA3NzYyNyksYSgyNzMwNDg1OTIxLDEyOTA4NjM0NjApLGEoMjgyMDMwMjQxMSwzMTU4NDU0MjczKSxhKDMyNTk3MzA4MDAsMzUwNTk1MjY1NyksYSgzMzQ1NzY0NzcxLDEwNjIxNzAwOCksYSgzNTE2MDY1ODE3LDM2MDYwMDgzNDQpLGEoMzYwMDM1MjgwNCwxNDMyNzI1Nzc2KSxhKDQwOTQ1NzE5MDksMTQ2NzAzMTU5NCksYSgyNzU0MjMzNDQsODUxMTY5NzIwKSxhKDQzMDIyNzczNCwzMTAwODIzNzUyKSxhKDUwNjk0ODYxNiwxMzYzMjU4MTk1KSxhKDY1OTA2MDU1NiwzNzUwNjg1NTkzKSxhKDg4Mzk5Nzg3NywzNzg1MDUwMjgwKSxhKDk1ODEzOTU3MSwzMzE4MzA3NDI3KSxhKDEzMjI4MjIyMTgsMzgxMjcyMzQwMyksYSgxNTM3MDAyMDYzLDIwMDMwMzQ5OTUpLGEoMTc0Nzg3Mzc3OSwzNjAyMDM2ODk5KSxcclxuYSgxOTU1NTYyMjIyLDE1NzU5OTAwMTIpLGEoMjAyNDEwNDgxNSwxMTI1NTkyOTI4KSxhKDIyMjc3MzA0NTIsMjcxNjkwNDMwNiksYSgyMzYxODUyNDI0LDQ0Mjc3NjA0NCksYSgyNDI4NDM2NDc0LDU5MzY5ODM0NCksYSgyNzU2NzM0MTg3LDM3MzMxMTAyNDkpLGEoMzIwNDAzMTQ3OSwyOTk5MzUxNTczKSxhKDMzMjkzMjUyOTgsMzgxNTkyMDQyNyksYSgzMzkxNTY5NjE0LDM5MjgzODM5MDApLGEoMzUxNTI2NzI3MSw1NjYyODA3MTEpLGEoMzk0MDE4NzYwNiwzNDU0MDY5NTM0KSxhKDQxMTg2MzAyNzEsNDAwMDIzOTk5MiksYSgxMTY0MTg0NzQsMTkxNDEzODU1NCksYSgxNzQyOTI0MjEsMjczMTA1NTI3MCksYSgyODkzODAzNTYsMzIwMzk5MzAwNiksYSg0NjAzOTMyNjksMzIwNjIwMzE1KSxhKDY4NTQ3MTczMyw1ODc0OTY4MzYpLGEoODUyMTQyOTcxLDEwODY3OTI4NTEpLGEoMTAxNzAzNjI5OCwzNjU1NDMxMDApLGEoMTEyNjAwMDU4MCwyNjE4Mjk3Njc2KSxhKDEyODgwMzM0NzAsXHJcbjM0MDk4NTUxNTgpLGEoMTUwMTUwNTk0OCw0MjM0NTA5ODY2KSxhKDE2MDcxNjc5MTUsOTg3MTY3NDY4KSxhKDE4MTY0MDIzMTYsMTI0NjE4OTU5MSldLHY9W10sdz0wOzgwPnc7dysrKXZbd109YSgpO2U9ZS5TSEE1MTI9ci5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgVC5pbml0KFtuZXcgZC5pbml0KDE3NzkwMzM3MDMsNDA4OTIzNTcyMCksbmV3IGQuaW5pdCgzMTQ0MTM0Mjc3LDIyMjc4NzM1OTUpLG5ldyBkLmluaXQoMTAxMzkwNDI0Miw0MjcxMTc1NzIzKSxuZXcgZC5pbml0KDI3NzM0ODA3NjIsMTU5NTc1MDEyOSksbmV3IGQuaW5pdCgxMzU5ODkzMTE5LDI5MTc1NjUxMzcpLG5ldyBkLmluaXQoMjYwMDgyMjkyNCw3MjU1MTExOTkpLG5ldyBkLmluaXQoNTI4NzM0NjM1LDQyMTUzODk1NDcpLG5ldyBkLmluaXQoMTU0MTQ1OTIyNSwzMjcwMzMyMDkpXSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGQpe2Zvcih2YXIgZj10aGlzLl9oYXNoLndvcmRzLFxyXG5GPWZbMF0sZT1mWzFdLG49ZlsyXSxyPWZbM10sRz1mWzRdLEg9Zls1XSxJPWZbNl0sZj1mWzddLHc9Ri5oaWdoLEo9Ri5sb3csWD1lLmhpZ2gsSz1lLmxvdyxZPW4uaGlnaCxMPW4ubG93LFo9ci5oaWdoLE09ci5sb3csJD1HLmhpZ2gsTj1HLmxvdyxhYT1ILmhpZ2gsTz1ILmxvdyxiYT1JLmhpZ2gsUD1JLmxvdyxjYT1mLmhpZ2gsUT1mLmxvdyxrPXcsZz1KLHo9WCx4PUssQT1ZLHk9TCxVPVosQj1NLGw9JCxoPU4sUj1hYSxDPU8sUz1iYSxEPVAsVj1jYSxFPVEsbT0wOzgwPm07bSsrKXt2YXIgcz12W21dO2lmKDE2Pm0pdmFyIGo9cy5oaWdoPWFbZCsyKm1dfDAsYj1zLmxvdz1hW2QrMiptKzFdfDA7ZWxzZXt2YXIgaj12W20tMTVdLGI9ai5oaWdoLHA9ai5sb3csaj0oYj4+PjF8cDw8MzEpXihiPj4+OHxwPDwyNCleYj4+PjcscD0ocD4+PjF8Yjw8MzEpXihwPj4+OHxiPDwyNCleKHA+Pj43fGI8PDI1KSx1PXZbbS0yXSxiPXUuaGlnaCxjPXUubG93LHU9KGI+Pj4xOXxjPDwxMyleKGI8PFxyXG4zfGM+Pj4yOSleYj4+PjYsYz0oYz4+PjE5fGI8PDEzKV4oYzw8M3xiPj4+MjkpXihjPj4+NnxiPDwyNiksYj12W20tN10sVz1iLmhpZ2gsdD12W20tMTZdLHE9dC5oaWdoLHQ9dC5sb3csYj1wK2IubG93LGo9aitXKyhiPj4+MDxwPj4+MD8xOjApLGI9YitjLGo9ait1KyhiPj4+MDxjPj4+MD8xOjApLGI9Yit0LGo9aitxKyhiPj4+MDx0Pj4+MD8xOjApO3MuaGlnaD1qO3MubG93PWJ9dmFyIFc9bCZSXn5sJlMsdD1oJkNefmgmRCxzPWsmel5rJkFeeiZBLFQ9ZyZ4XmcmeV54JnkscD0oaz4+PjI4fGc8PDQpXihrPDwzMHxnPj4+MileKGs8PDI1fGc+Pj43KSx1PShnPj4+Mjh8azw8NCleKGc8PDMwfGs+Pj4yKV4oZzw8MjV8az4+PjcpLGM9ZWFbbV0sZmE9Yy5oaWdoLGRhPWMubG93LGM9RSsoKGg+Pj4xNHxsPDwxOCleKGg+Pj4xOHxsPDwxNCleKGg8PDIzfGw+Pj45KSkscT1WKygobD4+PjE0fGg8PDE4KV4obD4+PjE4fGg8PDE0KV4obDw8MjN8aD4+PjkpKSsoYz4+PjA8RT4+PjA/MTpcclxuMCksYz1jK3QscT1xK1crKGM+Pj4wPHQ+Pj4wPzE6MCksYz1jK2RhLHE9cStmYSsoYz4+PjA8ZGE+Pj4wPzE6MCksYz1jK2IscT1xK2orKGM+Pj4wPGI+Pj4wPzE6MCksYj11K1Qscz1wK3MrKGI+Pj4wPHU+Pj4wPzE6MCksVj1TLEU9RCxTPVIsRD1DLFI9bCxDPWgsaD1CK2N8MCxsPVUrcSsoaD4+PjA8Qj4+PjA/MTowKXwwLFU9QSxCPXksQT16LHk9eCx6PWsseD1nLGc9YytifDAsaz1xK3MrKGc+Pj4wPGM+Pj4wPzE6MCl8MH1KPUYubG93PUorZztGLmhpZ2g9dytrKyhKPj4+MDxnPj4+MD8xOjApO0s9ZS5sb3c9Syt4O2UuaGlnaD1YK3orKEs+Pj4wPHg+Pj4wPzE6MCk7TD1uLmxvdz1MK3k7bi5oaWdoPVkrQSsoTD4+PjA8eT4+PjA/MTowKTtNPXIubG93PU0rQjtyLmhpZ2g9WitVKyhNPj4+MDxCPj4+MD8xOjApO049Ry5sb3c9TitoO0cuaGlnaD0kK2wrKE4+Pj4wPGg+Pj4wPzE6MCk7Tz1ILmxvdz1PK0M7SC5oaWdoPWFhK1IrKE8+Pj4wPEM+Pj4wPzE6MCk7UD1JLmxvdz1QK0Q7XHJcbkkuaGlnaD1iYStTKyhQPj4+MDxEPj4+MD8xOjApO1E9Zi5sb3c9UStFO2YuaGlnaD1jYStWKyhRPj4+MDxFPj4+MD8xOjApfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX2RhdGEsZD1hLndvcmRzLGY9OCp0aGlzLl9uRGF0YUJ5dGVzLGU9OCphLnNpZ0J5dGVzO2RbZT4+PjVdfD0xMjg8PDI0LWUlMzI7ZFsoZSsxMjg+Pj4xMDw8NSkrMzBdPU1hdGguZmxvb3IoZi80Mjk0OTY3Mjk2KTtkWyhlKzEyOD4+PjEwPDw1KSszMV09ZjthLnNpZ0J5dGVzPTQqZC5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNoLnRvWDMyKCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9ci5jbG9uZS5jYWxsKHRoaXMpO2EuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBhfSxibG9ja1NpemU6MzJ9KTtuLlNIQTUxMj1yLl9jcmVhdGVIZWxwZXIoZSk7bi5IbWFjU0hBNTEyPXIuX2NyZWF0ZUhtYWNIZWxwZXIoZSl9KSgpO1xyXG5cbi8qXHJcbkNyeXB0b0pTIHYzLjEuMiBzaGEzODQtbWluLmpzXHJcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xyXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxyXG4qL1xyXG4oZnVuY3Rpb24oKXt2YXIgYz1DcnlwdG9KUyxhPWMueDY0LGI9YS5Xb3JkLGU9YS5Xb3JkQXJyYXksYT1jLmFsZ28sZD1hLlNIQTUxMixhPWEuU0hBMzg0PWQuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGUuaW5pdChbbmV3IGIuaW5pdCgzNDE4MDcwMzY1LDMyMzgzNzEwMzIpLG5ldyBiLmluaXQoMTY1NDI3MDI1MCw5MTQxNTA2NjMpLG5ldyBiLmluaXQoMjQzODUyOTM3MCw4MTI3MDI5OTkpLG5ldyBiLmluaXQoMzU1NDYyMzYwLDQxNDQ5MTI2OTcpLG5ldyBiLmluaXQoMTczMTQwNTQxNSw0MjkwNzc1ODU3KSxuZXcgYi5pbml0KDIzOTQxODAyMzEsMTc1MDYwMzAyNSksbmV3IGIuaW5pdCgzNjc1MDA4NTI1LDE2OTQwNzY4MzkpLG5ldyBiLmluaXQoMTIwMzA2MjgxMywzMjA0MDc1NDI4KV0pfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPWQuX2RvRmluYWxpemUuY2FsbCh0aGlzKTthLnNpZ0J5dGVzLT0xNjtyZXR1cm4gYX19KTtjLlNIQTM4ND1cclxuZC5fY3JlYXRlSGVscGVyKGEpO2MuSG1hY1NIQTM4ND1kLl9jcmVhdGVIbWFjSGVscGVyKGEpfSkoKTtcclxuXG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cclxuICovXHJcbnZhciBiNjRtYXA9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7dmFyIGI2NHBhZD1cIj1cIjtmdW5jdGlvbiBoZXgyYjY0KGQpe3ZhciBiO3ZhciBlO3ZhciBhPVwiXCI7Zm9yKGI9MDtiKzM8PWQubGVuZ3RoO2IrPTMpe2U9cGFyc2VJbnQoZC5zdWJzdHJpbmcoYixiKzMpLDE2KTthKz1iNjRtYXAuY2hhckF0KGU+PjYpK2I2NG1hcC5jaGFyQXQoZSY2Myl9aWYoYisxPT1kLmxlbmd0aCl7ZT1wYXJzZUludChkLnN1YnN0cmluZyhiLGIrMSksMTYpO2ErPWI2NG1hcC5jaGFyQXQoZTw8Mil9ZWxzZXtpZihiKzI9PWQubGVuZ3RoKXtlPXBhcnNlSW50KGQuc3Vic3RyaW5nKGIsYisyKSwxNik7YSs9YjY0bWFwLmNoYXJBdChlPj4yKStiNjRtYXAuY2hhckF0KChlJjMpPDw0KX19aWYoYjY0cGFkKXt3aGlsZSgoYS5sZW5ndGgmMyk+MCl7YSs9YjY0cGFkfX1yZXR1cm4gYX1mdW5jdGlvbiBiNjR0b2hleChmKXt2YXIgZD1cIlwiO3ZhciBlO3ZhciBiPTA7dmFyIGM7dmFyIGE7Zm9yKGU9MDtlPGYubGVuZ3RoOysrZSl7aWYoZi5jaGFyQXQoZSk9PWI2NHBhZCl7YnJlYWt9YT1iNjRtYXAuaW5kZXhPZihmLmNoYXJBdChlKSk7aWYoYTwwKXtjb250aW51ZX1pZihiPT0wKXtkKz1pbnQyY2hhcihhPj4yKTtjPWEmMztiPTF9ZWxzZXtpZihiPT0xKXtkKz1pbnQyY2hhcigoYzw8Mil8KGE+PjQpKTtjPWEmMTU7Yj0yfWVsc2V7aWYoYj09Mil7ZCs9aW50MmNoYXIoYyk7ZCs9aW50MmNoYXIoYT4+Mik7Yz1hJjM7Yj0zfWVsc2V7ZCs9aW50MmNoYXIoKGM8PDIpfChhPj40KSk7ZCs9aW50MmNoYXIoYSYxNSk7Yj0wfX19fWlmKGI9PTEpe2QrPWludDJjaGFyKGM8PDIpfXJldHVybiBkfWZ1bmN0aW9uIGI2NHRvQkEoZSl7dmFyIGQ9YjY0dG9oZXgoZSk7dmFyIGM7dmFyIGI9bmV3IEFycmF5KCk7Zm9yKGM9MDsyKmM8ZC5sZW5ndGg7KytjKXtiW2NdPXBhcnNlSW50KGQuc3Vic3RyaW5nKDIqYywyKmMrMiksMTYpfXJldHVybiBifTtcbi8qISAoYykgVG9tIFd1IHwgaHR0cDovL3d3dy1jcy1zdHVkZW50cy5zdGFuZm9yZC5lZHUvfnRqdy9qc2JuL1xyXG4gKi9cclxudmFyIGRiaXRzO3ZhciBjYW5hcnk9MjQ0ODM3ODE0MDk0NTkwO3ZhciBqX2xtPSgoY2FuYXJ5JjE2Nzc3MjE1KT09MTU3MTUwNzApO2Z1bmN0aW9uIEJpZ0ludGVnZXIoZSxkLGYpe2lmKGUhPW51bGwpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXt0aGlzLmZyb21OdW1iZXIoZSxkLGYpfWVsc2V7aWYoZD09bnVsbCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpe3RoaXMuZnJvbVN0cmluZyhlLDI1Nil9ZWxzZXt0aGlzLmZyb21TdHJpbmcoZSxkKX19fX1mdW5jdGlvbiBuYmkoKXtyZXR1cm4gbmV3IEJpZ0ludGVnZXIobnVsbCl9ZnVuY3Rpb24gYW0xKGYsYSxiLGUsaCxnKXt3aGlsZSgtLWc+PTApe3ZhciBkPWEqdGhpc1tmKytdK2JbZV0raDtoPU1hdGguZmxvb3IoZC82NzEwODg2NCk7YltlKytdPWQmNjcxMDg4NjN9cmV0dXJuIGh9ZnVuY3Rpb24gYW0yKGYscSxyLGUsbyxhKXt2YXIgaz1xJjMyNzY3LHA9cT4+MTU7d2hpbGUoLS1hPj0wKXt2YXIgZD10aGlzW2ZdJjMyNzY3O3ZhciBnPXRoaXNbZisrXT4+MTU7dmFyIGI9cCpkK2cqaztkPWsqZCsoKGImMzI3NjcpPDwxNSkrcltlXSsobyYxMDczNzQxODIzKTtvPShkPj4+MzApKyhiPj4+MTUpK3AqZysobz4+PjMwKTtyW2UrK109ZCYxMDczNzQxODIzfXJldHVybiBvfWZ1bmN0aW9uIGFtMyhmLHEscixlLG8sYSl7dmFyIGs9cSYxNjM4MyxwPXE+PjE0O3doaWxlKC0tYT49MCl7dmFyIGQ9dGhpc1tmXSYxNjM4Mzt2YXIgZz10aGlzW2YrK10+PjE0O3ZhciBiPXAqZCtnKms7ZD1rKmQrKChiJjE2MzgzKTw8MTQpK3JbZV0rbztvPShkPj4yOCkrKGI+PjE0KStwKmc7cltlKytdPWQmMjY4NDM1NDU1fXJldHVybiBvfWlmKGpfbG0mJihuYXZpZ2F0b3IuYXBwTmFtZT09XCJNaWNyb3NvZnQgSW50ZXJuZXQgRXhwbG9yZXJcIikpe0JpZ0ludGVnZXIucHJvdG90eXBlLmFtPWFtMjtkYml0cz0zMH1lbHNle2lmKGpfbG0mJihuYXZpZ2F0b3IuYXBwTmFtZSE9XCJOZXRzY2FwZVwiKSl7QmlnSW50ZWdlci5wcm90b3R5cGUuYW09YW0xO2RiaXRzPTI2fWVsc2V7QmlnSW50ZWdlci5wcm90b3R5cGUuYW09YW0zO2RiaXRzPTI4fX1CaWdJbnRlZ2VyLnByb3RvdHlwZS5EQj1kYml0cztCaWdJbnRlZ2VyLnByb3RvdHlwZS5ETT0oKDE8PGRiaXRzKS0xKTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5EVj0oMTw8ZGJpdHMpO3ZhciBCSV9GUD01MjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5GVj1NYXRoLnBvdygyLEJJX0ZQKTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5GMT1CSV9GUC1kYml0cztCaWdJbnRlZ2VyLnByb3RvdHlwZS5GMj0yKmRiaXRzLUJJX0ZQO3ZhciBCSV9STT1cIjAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiO3ZhciBCSV9SQz1uZXcgQXJyYXkoKTt2YXIgcnIsdnY7cnI9XCIwXCIuY2hhckNvZGVBdCgwKTtmb3IodnY9MDt2djw9OTsrK3Z2KXtCSV9SQ1tycisrXT12dn1ycj1cImFcIi5jaGFyQ29kZUF0KDApO2Zvcih2dj0xMDt2djwzNjsrK3Z2KXtCSV9SQ1tycisrXT12dn1ycj1cIkFcIi5jaGFyQ29kZUF0KDApO2Zvcih2dj0xMDt2djwzNjsrK3Z2KXtCSV9SQ1tycisrXT12dn1mdW5jdGlvbiBpbnQyY2hhcihhKXtyZXR1cm4gQklfUk0uY2hhckF0KGEpfWZ1bmN0aW9uIGludEF0KGIsYSl7dmFyIGQ9QklfUkNbYi5jaGFyQ29kZUF0KGEpXTtyZXR1cm4oZD09bnVsbCk/LTE6ZH1mdW5jdGlvbiBibnBDb3B5VG8oYil7Zm9yKHZhciBhPXRoaXMudC0xO2E+PTA7LS1hKXtiW2FdPXRoaXNbYV19Yi50PXRoaXMudDtiLnM9dGhpcy5zfWZ1bmN0aW9uIGJucEZyb21JbnQoYSl7dGhpcy50PTE7dGhpcy5zPShhPDApPy0xOjA7aWYoYT4wKXt0aGlzWzBdPWF9ZWxzZXtpZihhPC0xKXt0aGlzWzBdPWErdGhpcy5EVn1lbHNle3RoaXMudD0wfX19ZnVuY3Rpb24gbmJ2KGEpe3ZhciBiPW5iaSgpO2IuZnJvbUludChhKTtyZXR1cm4gYn1mdW5jdGlvbiBibnBGcm9tU3RyaW5nKGgsYyl7dmFyIGU7aWYoYz09MTYpe2U9NH1lbHNle2lmKGM9PTgpe2U9M31lbHNle2lmKGM9PTI1Nil7ZT04fWVsc2V7aWYoYz09Mil7ZT0xfWVsc2V7aWYoYz09MzIpe2U9NX1lbHNle2lmKGM9PTQpe2U9Mn1lbHNle3RoaXMuZnJvbVJhZGl4KGgsYyk7cmV0dXJufX19fX19dGhpcy50PTA7dGhpcy5zPTA7dmFyIGc9aC5sZW5ndGgsZD1mYWxzZSxmPTA7d2hpbGUoLS1nPj0wKXt2YXIgYT0oZT09OCk/aFtnXSYyNTU6aW50QXQoaCxnKTtpZihhPDApe2lmKGguY2hhckF0KGcpPT1cIi1cIil7ZD10cnVlfWNvbnRpbnVlfWQ9ZmFsc2U7aWYoZj09MCl7dGhpc1t0aGlzLnQrK109YX1lbHNle2lmKGYrZT50aGlzLkRCKXt0aGlzW3RoaXMudC0xXXw9KGEmKCgxPDwodGhpcy5EQi1mKSktMSkpPDxmO3RoaXNbdGhpcy50KytdPShhPj4odGhpcy5EQi1mKSl9ZWxzZXt0aGlzW3RoaXMudC0xXXw9YTw8Zn19Zis9ZTtpZihmPj10aGlzLkRCKXtmLT10aGlzLkRCfX1pZihlPT04JiYoaFswXSYxMjgpIT0wKXt0aGlzLnM9LTE7aWYoZj4wKXt0aGlzW3RoaXMudC0xXXw9KCgxPDwodGhpcy5EQi1mKSktMSk8PGZ9fXRoaXMuY2xhbXAoKTtpZihkKXtCaWdJbnRlZ2VyLlpFUk8uc3ViVG8odGhpcyx0aGlzKX19ZnVuY3Rpb24gYm5wQ2xhbXAoKXt2YXIgYT10aGlzLnMmdGhpcy5ETTt3aGlsZSh0aGlzLnQ+MCYmdGhpc1t0aGlzLnQtMV09PWEpey0tdGhpcy50fX1mdW5jdGlvbiBiblRvU3RyaW5nKGMpe2lmKHRoaXMuczwwKXtyZXR1cm5cIi1cIit0aGlzLm5lZ2F0ZSgpLnRvU3RyaW5nKGMpfXZhciBlO2lmKGM9PTE2KXtlPTR9ZWxzZXtpZihjPT04KXtlPTN9ZWxzZXtpZihjPT0yKXtlPTF9ZWxzZXtpZihjPT0zMil7ZT01fWVsc2V7aWYoYz09NCl7ZT0yfWVsc2V7cmV0dXJuIHRoaXMudG9SYWRpeChjKX19fX19dmFyIGc9KDE8PGUpLTEsbCxhPWZhbHNlLGg9XCJcIixmPXRoaXMudDt2YXIgaj10aGlzLkRCLShmKnRoaXMuREIpJWU7aWYoZi0tPjApe2lmKGo8dGhpcy5EQiYmKGw9dGhpc1tmXT4+aik+MCl7YT10cnVlO2g9aW50MmNoYXIobCl9d2hpbGUoZj49MCl7aWYoajxlKXtsPSh0aGlzW2ZdJigoMTw8aiktMSkpPDwoZS1qKTtsfD10aGlzWy0tZl0+PihqKz10aGlzLkRCLWUpfWVsc2V7bD0odGhpc1tmXT4+KGotPWUpKSZnO2lmKGo8PTApe2orPXRoaXMuREI7LS1mfX1pZihsPjApe2E9dHJ1ZX1pZihhKXtoKz1pbnQyY2hhcihsKX19fXJldHVybiBhP2g6XCIwXCJ9ZnVuY3Rpb24gYm5OZWdhdGUoKXt2YXIgYT1uYmkoKTtCaWdJbnRlZ2VyLlpFUk8uc3ViVG8odGhpcyxhKTtyZXR1cm4gYX1mdW5jdGlvbiBibkFicygpe3JldHVybih0aGlzLnM8MCk/dGhpcy5uZWdhdGUoKTp0aGlzfWZ1bmN0aW9uIGJuQ29tcGFyZVRvKGIpe3ZhciBkPXRoaXMucy1iLnM7aWYoZCE9MCl7cmV0dXJuIGR9dmFyIGM9dGhpcy50O2Q9Yy1iLnQ7aWYoZCE9MCl7cmV0dXJuKHRoaXMuczwwKT8tZDpkfXdoaWxlKC0tYz49MCl7aWYoKGQ9dGhpc1tjXS1iW2NdKSE9MCl7cmV0dXJuIGR9fXJldHVybiAwfWZ1bmN0aW9uIG5iaXRzKGEpe3ZhciBjPTEsYjtpZigoYj1hPj4+MTYpIT0wKXthPWI7Yys9MTZ9aWYoKGI9YT4+OCkhPTApe2E9YjtjKz04fWlmKChiPWE+PjQpIT0wKXthPWI7Yys9NH1pZigoYj1hPj4yKSE9MCl7YT1iO2MrPTJ9aWYoKGI9YT4+MSkhPTApe2E9YjtjKz0xfXJldHVybiBjfWZ1bmN0aW9uIGJuQml0TGVuZ3RoKCl7aWYodGhpcy50PD0wKXtyZXR1cm4gMH1yZXR1cm4gdGhpcy5EQioodGhpcy50LTEpK25iaXRzKHRoaXNbdGhpcy50LTFdXih0aGlzLnMmdGhpcy5ETSkpfWZ1bmN0aW9uIGJucERMU2hpZnRUbyhjLGIpe3ZhciBhO2ZvcihhPXRoaXMudC0xO2E+PTA7LS1hKXtiW2ErY109dGhpc1thXX1mb3IoYT1jLTE7YT49MDstLWEpe2JbYV09MH1iLnQ9dGhpcy50K2M7Yi5zPXRoaXMuc31mdW5jdGlvbiBibnBEUlNoaWZ0VG8oYyxiKXtmb3IodmFyIGE9YzthPHRoaXMudDsrK2Epe2JbYS1jXT10aGlzW2FdfWIudD1NYXRoLm1heCh0aGlzLnQtYywwKTtiLnM9dGhpcy5zfWZ1bmN0aW9uIGJucExTaGlmdFRvKGosZSl7dmFyIGI9aiV0aGlzLkRCO3ZhciBhPXRoaXMuREItYjt2YXIgZz0oMTw8YSktMTt2YXIgZj1NYXRoLmZsb29yKGovdGhpcy5EQiksaD0odGhpcy5zPDxiKSZ0aGlzLkRNLGQ7Zm9yKGQ9dGhpcy50LTE7ZD49MDstLWQpe2VbZCtmKzFdPSh0aGlzW2RdPj5hKXxoO2g9KHRoaXNbZF0mZyk8PGJ9Zm9yKGQ9Zi0xO2Q+PTA7LS1kKXtlW2RdPTB9ZVtmXT1oO2UudD10aGlzLnQrZisxO2Uucz10aGlzLnM7ZS5jbGFtcCgpfWZ1bmN0aW9uIGJucFJTaGlmdFRvKGcsZCl7ZC5zPXRoaXMuczt2YXIgZT1NYXRoLmZsb29yKGcvdGhpcy5EQik7aWYoZT49dGhpcy50KXtkLnQ9MDtyZXR1cm59dmFyIGI9ZyV0aGlzLkRCO3ZhciBhPXRoaXMuREItYjt2YXIgZj0oMTw8YiktMTtkWzBdPXRoaXNbZV0+PmI7Zm9yKHZhciBjPWUrMTtjPHRoaXMudDsrK2Mpe2RbYy1lLTFdfD0odGhpc1tjXSZmKTw8YTtkW2MtZV09dGhpc1tjXT4+Yn1pZihiPjApe2RbdGhpcy50LWUtMV18PSh0aGlzLnMmZik8PGF9ZC50PXRoaXMudC1lO2QuY2xhbXAoKX1mdW5jdGlvbiBibnBTdWJUbyhkLGYpe3ZhciBlPTAsZz0wLGI9TWF0aC5taW4oZC50LHRoaXMudCk7d2hpbGUoZTxiKXtnKz10aGlzW2VdLWRbZV07ZltlKytdPWcmdGhpcy5ETTtnPj49dGhpcy5EQn1pZihkLnQ8dGhpcy50KXtnLT1kLnM7d2hpbGUoZTx0aGlzLnQpe2crPXRoaXNbZV07ZltlKytdPWcmdGhpcy5ETTtnPj49dGhpcy5EQn1nKz10aGlzLnN9ZWxzZXtnKz10aGlzLnM7d2hpbGUoZTxkLnQpe2ctPWRbZV07ZltlKytdPWcmdGhpcy5ETTtnPj49dGhpcy5EQn1nLT1kLnN9Zi5zPShnPDApPy0xOjA7aWYoZzwtMSl7ZltlKytdPXRoaXMuRFYrZ31lbHNle2lmKGc+MCl7ZltlKytdPWd9fWYudD1lO2YuY2xhbXAoKX1mdW5jdGlvbiBibnBNdWx0aXBseVRvKGMsZSl7dmFyIGI9dGhpcy5hYnMoKSxmPWMuYWJzKCk7dmFyIGQ9Yi50O2UudD1kK2YudDt3aGlsZSgtLWQ+PTApe2VbZF09MH1mb3IoZD0wO2Q8Zi50OysrZCl7ZVtkK2IudF09Yi5hbSgwLGZbZF0sZSxkLDAsYi50KX1lLnM9MDtlLmNsYW1wKCk7aWYodGhpcy5zIT1jLnMpe0JpZ0ludGVnZXIuWkVSTy5zdWJUbyhlLGUpfX1mdW5jdGlvbiBibnBTcXVhcmVUbyhkKXt2YXIgYT10aGlzLmFicygpO3ZhciBiPWQudD0yKmEudDt3aGlsZSgtLWI+PTApe2RbYl09MH1mb3IoYj0wO2I8YS50LTE7KytiKXt2YXIgZT1hLmFtKGIsYVtiXSxkLDIqYiwwLDEpO2lmKChkW2IrYS50XSs9YS5hbShiKzEsMiphW2JdLGQsMipiKzEsZSxhLnQtYi0xKSk+PWEuRFYpe2RbYithLnRdLT1hLkRWO2RbYithLnQrMV09MX19aWYoZC50PjApe2RbZC50LTFdKz1hLmFtKGIsYVtiXSxkLDIqYiwwLDEpfWQucz0wO2QuY2xhbXAoKX1mdW5jdGlvbiBibnBEaXZSZW1UbyhuLGgsZyl7dmFyIHc9bi5hYnMoKTtpZih3LnQ8PTApe3JldHVybn12YXIgaz10aGlzLmFicygpO2lmKGsudDx3LnQpe2lmKGghPW51bGwpe2guZnJvbUludCgwKX1pZihnIT1udWxsKXt0aGlzLmNvcHlUbyhnKX1yZXR1cm59aWYoZz09bnVsbCl7Zz1uYmkoKX12YXIgZD1uYmkoKSxhPXRoaXMucyxsPW4uczt2YXIgdj10aGlzLkRCLW5iaXRzKHdbdy50LTFdKTtpZih2PjApe3cubFNoaWZ0VG8odixkKTtrLmxTaGlmdFRvKHYsZyl9ZWxzZXt3LmNvcHlUbyhkKTtrLmNvcHlUbyhnKX12YXIgcD1kLnQ7dmFyIGI9ZFtwLTFdO2lmKGI9PTApe3JldHVybn12YXIgbz1iKigxPDx0aGlzLkYxKSsoKHA+MSk/ZFtwLTJdPj50aGlzLkYyOjApO3ZhciBBPXRoaXMuRlYvbyx6PSgxPDx0aGlzLkYxKS9vLHg9MTw8dGhpcy5GMjt2YXIgdT1nLnQscz11LXAsZj0oaD09bnVsbCk/bmJpKCk6aDtkLmRsU2hpZnRUbyhzLGYpO2lmKGcuY29tcGFyZVRvKGYpPj0wKXtnW2cudCsrXT0xO2cuc3ViVG8oZixnKX1CaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8ocCxmKTtmLnN1YlRvKGQsZCk7d2hpbGUoZC50PHApe2RbZC50KytdPTB9d2hpbGUoLS1zPj0wKXt2YXIgYz0oZ1stLXVdPT1iKT90aGlzLkRNOk1hdGguZmxvb3IoZ1t1XSpBKyhnW3UtMV0reCkqeik7aWYoKGdbdV0rPWQuYW0oMCxjLGcscywwLHApKTxjKXtkLmRsU2hpZnRUbyhzLGYpO2cuc3ViVG8oZixnKTt3aGlsZShnW3VdPC0tYyl7Zy5zdWJUbyhmLGcpfX19aWYoaCE9bnVsbCl7Zy5kclNoaWZ0VG8ocCxoKTtpZihhIT1sKXtCaWdJbnRlZ2VyLlpFUk8uc3ViVG8oaCxoKX19Zy50PXA7Zy5jbGFtcCgpO2lmKHY+MCl7Zy5yU2hpZnRUbyh2LGcpfWlmKGE8MCl7QmlnSW50ZWdlci5aRVJPLnN1YlRvKGcsZyl9fWZ1bmN0aW9uIGJuTW9kKGIpe3ZhciBjPW5iaSgpO3RoaXMuYWJzKCkuZGl2UmVtVG8oYixudWxsLGMpO2lmKHRoaXMuczwwJiZjLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pPjApe2Iuc3ViVG8oYyxjKX1yZXR1cm4gY31mdW5jdGlvbiBDbGFzc2ljKGEpe3RoaXMubT1hfWZ1bmN0aW9uIGNDb252ZXJ0KGEpe2lmKGEuczwwfHxhLmNvbXBhcmVUbyh0aGlzLm0pPj0wKXtyZXR1cm4gYS5tb2QodGhpcy5tKX1lbHNle3JldHVybiBhfX1mdW5jdGlvbiBjUmV2ZXJ0KGEpe3JldHVybiBhfWZ1bmN0aW9uIGNSZWR1Y2UoYSl7YS5kaXZSZW1Ubyh0aGlzLm0sbnVsbCxhKX1mdW5jdGlvbiBjTXVsVG8oYSxjLGIpe2EubXVsdGlwbHlUbyhjLGIpO3RoaXMucmVkdWNlKGIpfWZ1bmN0aW9uIGNTcXJUbyhhLGIpe2Euc3F1YXJlVG8oYik7dGhpcy5yZWR1Y2UoYil9Q2xhc3NpYy5wcm90b3R5cGUuY29udmVydD1jQ29udmVydDtDbGFzc2ljLnByb3RvdHlwZS5yZXZlcnQ9Y1JldmVydDtDbGFzc2ljLnByb3RvdHlwZS5yZWR1Y2U9Y1JlZHVjZTtDbGFzc2ljLnByb3RvdHlwZS5tdWxUbz1jTXVsVG87Q2xhc3NpYy5wcm90b3R5cGUuc3FyVG89Y1NxclRvO2Z1bmN0aW9uIGJucEludkRpZ2l0KCl7aWYodGhpcy50PDEpe3JldHVybiAwfXZhciBhPXRoaXNbMF07aWYoKGEmMSk9PTApe3JldHVybiAwfXZhciBiPWEmMztiPShiKigyLShhJjE1KSpiKSkmMTU7Yj0oYiooMi0oYSYyNTUpKmIpKSYyNTU7Yj0oYiooMi0oKChhJjY1NTM1KSpiKSY2NTUzNSkpKSY2NTUzNTtiPShiKigyLWEqYiV0aGlzLkRWKSkldGhpcy5EVjtyZXR1cm4oYj4wKT90aGlzLkRWLWI6LWJ9ZnVuY3Rpb24gTW9udGdvbWVyeShhKXt0aGlzLm09YTt0aGlzLm1wPWEuaW52RGlnaXQoKTt0aGlzLm1wbD10aGlzLm1wJjMyNzY3O3RoaXMubXBoPXRoaXMubXA+PjE1O3RoaXMudW09KDE8PChhLkRCLTE1KSktMTt0aGlzLm10Mj0yKmEudH1mdW5jdGlvbiBtb250Q29udmVydChhKXt2YXIgYj1uYmkoKTthLmFicygpLmRsU2hpZnRUbyh0aGlzLm0udCxiKTtiLmRpdlJlbVRvKHRoaXMubSxudWxsLGIpO2lmKGEuczwwJiZiLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pPjApe3RoaXMubS5zdWJUbyhiLGIpfXJldHVybiBifWZ1bmN0aW9uIG1vbnRSZXZlcnQoYSl7dmFyIGI9bmJpKCk7YS5jb3B5VG8oYik7dGhpcy5yZWR1Y2UoYik7cmV0dXJuIGJ9ZnVuY3Rpb24gbW9udFJlZHVjZShhKXt3aGlsZShhLnQ8PXRoaXMubXQyKXthW2EudCsrXT0wfWZvcih2YXIgYz0wO2M8dGhpcy5tLnQ7KytjKXt2YXIgYj1hW2NdJjMyNzY3O3ZhciBkPShiKnRoaXMubXBsKygoKGIqdGhpcy5tcGgrKGFbY10+PjE1KSp0aGlzLm1wbCkmdGhpcy51bSk8PDE1KSkmYS5ETTtiPWMrdGhpcy5tLnQ7YVtiXSs9dGhpcy5tLmFtKDAsZCxhLGMsMCx0aGlzLm0udCk7d2hpbGUoYVtiXT49YS5EVil7YVtiXS09YS5EVjthWysrYl0rK319YS5jbGFtcCgpO2EuZHJTaGlmdFRvKHRoaXMubS50LGEpO2lmKGEuY29tcGFyZVRvKHRoaXMubSk+PTApe2Euc3ViVG8odGhpcy5tLGEpfX1mdW5jdGlvbiBtb250U3FyVG8oYSxiKXthLnNxdWFyZVRvKGIpO3RoaXMucmVkdWNlKGIpfWZ1bmN0aW9uIG1vbnRNdWxUbyhhLGMsYil7YS5tdWx0aXBseVRvKGMsYik7dGhpcy5yZWR1Y2UoYil9TW9udGdvbWVyeS5wcm90b3R5cGUuY29udmVydD1tb250Q29udmVydDtNb250Z29tZXJ5LnByb3RvdHlwZS5yZXZlcnQ9bW9udFJldmVydDtNb250Z29tZXJ5LnByb3RvdHlwZS5yZWR1Y2U9bW9udFJlZHVjZTtNb250Z29tZXJ5LnByb3RvdHlwZS5tdWxUbz1tb250TXVsVG87TW9udGdvbWVyeS5wcm90b3R5cGUuc3FyVG89bW9udFNxclRvO2Z1bmN0aW9uIGJucElzRXZlbigpe3JldHVybigodGhpcy50PjApPyh0aGlzWzBdJjEpOnRoaXMucyk9PTB9ZnVuY3Rpb24gYm5wRXhwKGgsail7aWYoaD40Mjk0OTY3Mjk1fHxoPDEpe3JldHVybiBCaWdJbnRlZ2VyLk9ORX12YXIgZj1uYmkoKSxhPW5iaSgpLGQ9ai5jb252ZXJ0KHRoaXMpLGM9bmJpdHMoaCktMTtkLmNvcHlUbyhmKTt3aGlsZSgtLWM+PTApe2ouc3FyVG8oZixhKTtpZigoaCYoMTw8YykpPjApe2oubXVsVG8oYSxkLGYpfWVsc2V7dmFyIGI9ZjtmPWE7YT1ifX1yZXR1cm4gai5yZXZlcnQoZil9ZnVuY3Rpb24gYm5Nb2RQb3dJbnQoYixhKXt2YXIgYztpZihiPDI1Nnx8YS5pc0V2ZW4oKSl7Yz1uZXcgQ2xhc3NpYyhhKX1lbHNle2M9bmV3IE1vbnRnb21lcnkoYSl9cmV0dXJuIHRoaXMuZXhwKGIsYyl9QmlnSW50ZWdlci5wcm90b3R5cGUuY29weVRvPWJucENvcHlUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tSW50PWJucEZyb21JbnQ7QmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbVN0cmluZz1ibnBGcm9tU3RyaW5nO0JpZ0ludGVnZXIucHJvdG90eXBlLmNsYW1wPWJucENsYW1wO0JpZ0ludGVnZXIucHJvdG90eXBlLmRsU2hpZnRUbz1ibnBETFNoaWZ0VG87QmlnSW50ZWdlci5wcm90b3R5cGUuZHJTaGlmdFRvPWJucERSU2hpZnRUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5sU2hpZnRUbz1ibnBMU2hpZnRUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5yU2hpZnRUbz1ibnBSU2hpZnRUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5zdWJUbz1ibnBTdWJUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseVRvPWJucE11bHRpcGx5VG87QmlnSW50ZWdlci5wcm90b3R5cGUuc3F1YXJlVG89Ym5wU3F1YXJlVG87QmlnSW50ZWdlci5wcm90b3R5cGUuZGl2UmVtVG89Ym5wRGl2UmVtVG87QmlnSW50ZWdlci5wcm90b3R5cGUuaW52RGlnaXQ9Ym5wSW52RGlnaXQ7QmlnSW50ZWdlci5wcm90b3R5cGUuaXNFdmVuPWJucElzRXZlbjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5leHA9Ym5wRXhwO0JpZ0ludGVnZXIucHJvdG90eXBlLnRvU3RyaW5nPWJuVG9TdHJpbmc7QmlnSW50ZWdlci5wcm90b3R5cGUubmVnYXRlPWJuTmVnYXRlO0JpZ0ludGVnZXIucHJvdG90eXBlLmFicz1ibkFicztCaWdJbnRlZ2VyLnByb3RvdHlwZS5jb21wYXJlVG89Ym5Db21wYXJlVG87QmlnSW50ZWdlci5wcm90b3R5cGUuYml0TGVuZ3RoPWJuQml0TGVuZ3RoO0JpZ0ludGVnZXIucHJvdG90eXBlLm1vZD1ibk1vZDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3dJbnQ9Ym5Nb2RQb3dJbnQ7QmlnSW50ZWdlci5aRVJPPW5idigwKTtCaWdJbnRlZ2VyLk9ORT1uYnYoMSk7XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cclxuICovXHJcbmZ1bmN0aW9uIGJuQ2xvbmUoKXt2YXIgYT1uYmkoKTt0aGlzLmNvcHlUbyhhKTtyZXR1cm4gYX1mdW5jdGlvbiBibkludFZhbHVlKCl7aWYodGhpcy5zPDApe2lmKHRoaXMudD09MSl7cmV0dXJuIHRoaXNbMF0tdGhpcy5EVn1lbHNle2lmKHRoaXMudD09MCl7cmV0dXJuIC0xfX19ZWxzZXtpZih0aGlzLnQ9PTEpe3JldHVybiB0aGlzWzBdfWVsc2V7aWYodGhpcy50PT0wKXtyZXR1cm4gMH19fXJldHVybigodGhpc1sxXSYoKDE8PCgzMi10aGlzLkRCKSktMSkpPDx0aGlzLkRCKXx0aGlzWzBdfWZ1bmN0aW9uIGJuQnl0ZVZhbHVlKCl7cmV0dXJuKHRoaXMudD09MCk/dGhpcy5zOih0aGlzWzBdPDwyNCk+PjI0fWZ1bmN0aW9uIGJuU2hvcnRWYWx1ZSgpe3JldHVybih0aGlzLnQ9PTApP3RoaXMuczoodGhpc1swXTw8MTYpPj4xNn1mdW5jdGlvbiBibnBDaHVua1NpemUoYSl7cmV0dXJuIE1hdGguZmxvb3IoTWF0aC5MTjIqdGhpcy5EQi9NYXRoLmxvZyhhKSl9ZnVuY3Rpb24gYm5TaWdOdW0oKXtpZih0aGlzLnM8MCl7cmV0dXJuIC0xfWVsc2V7aWYodGhpcy50PD0wfHwodGhpcy50PT0xJiZ0aGlzWzBdPD0wKSl7cmV0dXJuIDB9ZWxzZXtyZXR1cm4gMX19fWZ1bmN0aW9uIGJucFRvUmFkaXgoYyl7aWYoYz09bnVsbCl7Yz0xMH1pZih0aGlzLnNpZ251bSgpPT0wfHxjPDJ8fGM+MzYpe3JldHVyblwiMFwifXZhciBmPXRoaXMuY2h1bmtTaXplKGMpO3ZhciBlPU1hdGgucG93KGMsZik7dmFyIGk9bmJ2KGUpLGo9bmJpKCksaD1uYmkoKSxnPVwiXCI7dGhpcy5kaXZSZW1UbyhpLGosaCk7d2hpbGUoai5zaWdudW0oKT4wKXtnPShlK2guaW50VmFsdWUoKSkudG9TdHJpbmcoYykuc3Vic3RyKDEpK2c7ai5kaXZSZW1UbyhpLGosaCl9cmV0dXJuIGguaW50VmFsdWUoKS50b1N0cmluZyhjKStnfWZ1bmN0aW9uIGJucEZyb21SYWRpeChtLGgpe3RoaXMuZnJvbUludCgwKTtpZihoPT1udWxsKXtoPTEwfXZhciBmPXRoaXMuY2h1bmtTaXplKGgpO3ZhciBnPU1hdGgucG93KGgsZiksZT1mYWxzZSxhPTAsbD0wO2Zvcih2YXIgYz0wO2M8bS5sZW5ndGg7KytjKXt2YXIgaz1pbnRBdChtLGMpO2lmKGs8MCl7aWYobS5jaGFyQXQoYyk9PVwiLVwiJiZ0aGlzLnNpZ251bSgpPT0wKXtlPXRydWV9Y29udGludWV9bD1oKmwraztpZigrK2E+PWYpe3RoaXMuZE11bHRpcGx5KGcpO3RoaXMuZEFkZE9mZnNldChsLDApO2E9MDtsPTB9fWlmKGE+MCl7dGhpcy5kTXVsdGlwbHkoTWF0aC5wb3coaCxhKSk7dGhpcy5kQWRkT2Zmc2V0KGwsMCl9aWYoZSl7QmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsdGhpcyl9fWZ1bmN0aW9uIGJucEZyb21OdW1iZXIoZixlLGgpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXtpZihmPDIpe3RoaXMuZnJvbUludCgxKX1lbHNle3RoaXMuZnJvbU51bWJlcihmLGgpO2lmKCF0aGlzLnRlc3RCaXQoZi0xKSl7dGhpcy5iaXR3aXNlVG8oQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KGYtMSksb3Bfb3IsdGhpcyl9aWYodGhpcy5pc0V2ZW4oKSl7dGhpcy5kQWRkT2Zmc2V0KDEsMCl9d2hpbGUoIXRoaXMuaXNQcm9iYWJsZVByaW1lKGUpKXt0aGlzLmRBZGRPZmZzZXQoMiwwKTtpZih0aGlzLmJpdExlbmd0aCgpPmYpe3RoaXMuc3ViVG8oQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KGYtMSksdGhpcyl9fX19ZWxzZXt2YXIgZD1uZXcgQXJyYXkoKSxnPWYmNztkLmxlbmd0aD0oZj4+MykrMTtlLm5leHRCeXRlcyhkKTtpZihnPjApe2RbMF0mPSgoMTw8ZyktMSl9ZWxzZXtkWzBdPTB9dGhpcy5mcm9tU3RyaW5nKGQsMjU2KX19ZnVuY3Rpb24gYm5Ub0J5dGVBcnJheSgpe3ZhciBiPXRoaXMudCxjPW5ldyBBcnJheSgpO2NbMF09dGhpcy5zO3ZhciBlPXRoaXMuREItKGIqdGhpcy5EQiklOCxmLGE9MDtpZihiLS0+MCl7aWYoZTx0aGlzLkRCJiYoZj10aGlzW2JdPj5lKSE9KHRoaXMucyZ0aGlzLkRNKT4+ZSl7Y1thKytdPWZ8KHRoaXMuczw8KHRoaXMuREItZSkpfXdoaWxlKGI+PTApe2lmKGU8OCl7Zj0odGhpc1tiXSYoKDE8PGUpLTEpKTw8KDgtZSk7Znw9dGhpc1stLWJdPj4oZSs9dGhpcy5EQi04KX1lbHNle2Y9KHRoaXNbYl0+PihlLT04KSkmMjU1O2lmKGU8PTApe2UrPXRoaXMuREI7LS1ifX1pZigoZiYxMjgpIT0wKXtmfD0tMjU2fWlmKGE9PTAmJih0aGlzLnMmMTI4KSE9KGYmMTI4KSl7KythfWlmKGE+MHx8ZiE9dGhpcy5zKXtjW2ErK109Zn19fXJldHVybiBjfWZ1bmN0aW9uIGJuRXF1YWxzKGIpe3JldHVybih0aGlzLmNvbXBhcmVUbyhiKT09MCl9ZnVuY3Rpb24gYm5NaW4oYil7cmV0dXJuKHRoaXMuY29tcGFyZVRvKGIpPDApP3RoaXM6Yn1mdW5jdGlvbiBibk1heChiKXtyZXR1cm4odGhpcy5jb21wYXJlVG8oYik+MCk/dGhpczpifWZ1bmN0aW9uIGJucEJpdHdpc2VUbyhjLGgsZSl7dmFyIGQsZyxiPU1hdGgubWluKGMudCx0aGlzLnQpO2ZvcihkPTA7ZDxiOysrZCl7ZVtkXT1oKHRoaXNbZF0sY1tkXSl9aWYoYy50PHRoaXMudCl7Zz1jLnMmdGhpcy5ETTtmb3IoZD1iO2Q8dGhpcy50OysrZCl7ZVtkXT1oKHRoaXNbZF0sZyl9ZS50PXRoaXMudH1lbHNle2c9dGhpcy5zJnRoaXMuRE07Zm9yKGQ9YjtkPGMudDsrK2Qpe2VbZF09aChnLGNbZF0pfWUudD1jLnR9ZS5zPWgodGhpcy5zLGMucyk7ZS5jbGFtcCgpfWZ1bmN0aW9uIG9wX2FuZChhLGIpe3JldHVybiBhJmJ9ZnVuY3Rpb24gYm5BbmQoYil7dmFyIGM9bmJpKCk7dGhpcy5iaXR3aXNlVG8oYixvcF9hbmQsYyk7cmV0dXJuIGN9ZnVuY3Rpb24gb3Bfb3IoYSxiKXtyZXR1cm4gYXxifWZ1bmN0aW9uIGJuT3IoYil7dmFyIGM9bmJpKCk7dGhpcy5iaXR3aXNlVG8oYixvcF9vcixjKTtyZXR1cm4gY31mdW5jdGlvbiBvcF94b3IoYSxiKXtyZXR1cm4gYV5ifWZ1bmN0aW9uIGJuWG9yKGIpe3ZhciBjPW5iaSgpO3RoaXMuYml0d2lzZVRvKGIsb3BfeG9yLGMpO3JldHVybiBjfWZ1bmN0aW9uIG9wX2FuZG5vdChhLGIpe3JldHVybiBhJn5ifWZ1bmN0aW9uIGJuQW5kTm90KGIpe3ZhciBjPW5iaSgpO3RoaXMuYml0d2lzZVRvKGIsb3BfYW5kbm90LGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuTm90KCl7dmFyIGI9bmJpKCk7Zm9yKHZhciBhPTA7YTx0aGlzLnQ7KythKXtiW2FdPXRoaXMuRE0mfnRoaXNbYV19Yi50PXRoaXMudDtiLnM9fnRoaXMucztyZXR1cm4gYn1mdW5jdGlvbiBiblNoaWZ0TGVmdChiKXt2YXIgYT1uYmkoKTtpZihiPDApe3RoaXMuclNoaWZ0VG8oLWIsYSl9ZWxzZXt0aGlzLmxTaGlmdFRvKGIsYSl9cmV0dXJuIGF9ZnVuY3Rpb24gYm5TaGlmdFJpZ2h0KGIpe3ZhciBhPW5iaSgpO2lmKGI8MCl7dGhpcy5sU2hpZnRUbygtYixhKX1lbHNle3RoaXMuclNoaWZ0VG8oYixhKX1yZXR1cm4gYX1mdW5jdGlvbiBsYml0KGEpe2lmKGE9PTApe3JldHVybiAtMX12YXIgYj0wO2lmKChhJjY1NTM1KT09MCl7YT4+PTE2O2IrPTE2fWlmKChhJjI1NSk9PTApe2E+Pj04O2IrPTh9aWYoKGEmMTUpPT0wKXthPj49NDtiKz00fWlmKChhJjMpPT0wKXthPj49MjtiKz0yfWlmKChhJjEpPT0wKXsrK2J9cmV0dXJuIGJ9ZnVuY3Rpb24gYm5HZXRMb3dlc3RTZXRCaXQoKXtmb3IodmFyIGE9MDthPHRoaXMudDsrK2Epe2lmKHRoaXNbYV0hPTApe3JldHVybiBhKnRoaXMuREIrbGJpdCh0aGlzW2FdKX19aWYodGhpcy5zPDApe3JldHVybiB0aGlzLnQqdGhpcy5EQn1yZXR1cm4gLTF9ZnVuY3Rpb24gY2JpdChhKXt2YXIgYj0wO3doaWxlKGEhPTApe2EmPWEtMTsrK2J9cmV0dXJuIGJ9ZnVuY3Rpb24gYm5CaXRDb3VudCgpe3ZhciBjPTAsYT10aGlzLnMmdGhpcy5ETTtmb3IodmFyIGI9MDtiPHRoaXMudDsrK2Ipe2MrPWNiaXQodGhpc1tiXV5hKX1yZXR1cm4gY31mdW5jdGlvbiBiblRlc3RCaXQoYil7dmFyIGE9TWF0aC5mbG9vcihiL3RoaXMuREIpO2lmKGE+PXRoaXMudCl7cmV0dXJuKHRoaXMucyE9MCl9cmV0dXJuKCh0aGlzW2FdJigxPDwoYiV0aGlzLkRCKSkpIT0wKX1mdW5jdGlvbiBibnBDaGFuZ2VCaXQoYyxiKXt2YXIgYT1CaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYyk7dGhpcy5iaXR3aXNlVG8oYSxiLGEpO3JldHVybiBhfWZ1bmN0aW9uIGJuU2V0Qml0KGEpe3JldHVybiB0aGlzLmNoYW5nZUJpdChhLG9wX29yKX1mdW5jdGlvbiBibkNsZWFyQml0KGEpe3JldHVybiB0aGlzLmNoYW5nZUJpdChhLG9wX2FuZG5vdCl9ZnVuY3Rpb24gYm5GbGlwQml0KGEpe3JldHVybiB0aGlzLmNoYW5nZUJpdChhLG9wX3hvcil9ZnVuY3Rpb24gYm5wQWRkVG8oZCxmKXt2YXIgZT0wLGc9MCxiPU1hdGgubWluKGQudCx0aGlzLnQpO3doaWxlKGU8Yil7Zys9dGhpc1tlXStkW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9aWYoZC50PHRoaXMudCl7Zys9ZC5zO3doaWxlKGU8dGhpcy50KXtnKz10aGlzW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9Zys9dGhpcy5zfWVsc2V7Zys9dGhpcy5zO3doaWxlKGU8ZC50KXtnKz1kW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9Zys9ZC5zfWYucz0oZzwwKT8tMTowO2lmKGc+MCl7ZltlKytdPWd9ZWxzZXtpZihnPC0xKXtmW2UrK109dGhpcy5EVitnfX1mLnQ9ZTtmLmNsYW1wKCl9ZnVuY3Rpb24gYm5BZGQoYil7dmFyIGM9bmJpKCk7dGhpcy5hZGRUbyhiLGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuU3VidHJhY3QoYil7dmFyIGM9bmJpKCk7dGhpcy5zdWJUbyhiLGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuTXVsdGlwbHkoYil7dmFyIGM9bmJpKCk7dGhpcy5tdWx0aXBseVRvKGIsYyk7cmV0dXJuIGN9ZnVuY3Rpb24gYm5TcXVhcmUoKXt2YXIgYT1uYmkoKTt0aGlzLnNxdWFyZVRvKGEpO3JldHVybiBhfWZ1bmN0aW9uIGJuRGl2aWRlKGIpe3ZhciBjPW5iaSgpO3RoaXMuZGl2UmVtVG8oYixjLG51bGwpO3JldHVybiBjfWZ1bmN0aW9uIGJuUmVtYWluZGVyKGIpe3ZhciBjPW5iaSgpO3RoaXMuZGl2UmVtVG8oYixudWxsLGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuRGl2aWRlQW5kUmVtYWluZGVyKGIpe3ZhciBkPW5iaSgpLGM9bmJpKCk7dGhpcy5kaXZSZW1UbyhiLGQsYyk7cmV0dXJuIG5ldyBBcnJheShkLGMpfWZ1bmN0aW9uIGJucERNdWx0aXBseShhKXt0aGlzW3RoaXMudF09dGhpcy5hbSgwLGEtMSx0aGlzLDAsMCx0aGlzLnQpOysrdGhpcy50O3RoaXMuY2xhbXAoKX1mdW5jdGlvbiBibnBEQWRkT2Zmc2V0KGIsYSl7aWYoYj09MCl7cmV0dXJufXdoaWxlKHRoaXMudDw9YSl7dGhpc1t0aGlzLnQrK109MH10aGlzW2FdKz1iO3doaWxlKHRoaXNbYV0+PXRoaXMuRFYpe3RoaXNbYV0tPXRoaXMuRFY7aWYoKythPj10aGlzLnQpe3RoaXNbdGhpcy50KytdPTB9Kyt0aGlzW2FdfX1mdW5jdGlvbiBOdWxsRXhwKCl7fWZ1bmN0aW9uIG5Ob3AoYSl7cmV0dXJuIGF9ZnVuY3Rpb24gbk11bFRvKGEsYyxiKXthLm11bHRpcGx5VG8oYyxiKX1mdW5jdGlvbiBuU3FyVG8oYSxiKXthLnNxdWFyZVRvKGIpfU51bGxFeHAucHJvdG90eXBlLmNvbnZlcnQ9bk5vcDtOdWxsRXhwLnByb3RvdHlwZS5yZXZlcnQ9bk5vcDtOdWxsRXhwLnByb3RvdHlwZS5tdWxUbz1uTXVsVG87TnVsbEV4cC5wcm90b3R5cGUuc3FyVG89blNxclRvO2Z1bmN0aW9uIGJuUG93KGEpe3JldHVybiB0aGlzLmV4cChhLG5ldyBOdWxsRXhwKCkpfWZ1bmN0aW9uIGJucE11bHRpcGx5TG93ZXJUbyhiLGYsZSl7dmFyIGQ9TWF0aC5taW4odGhpcy50K2IudCxmKTtlLnM9MDtlLnQ9ZDt3aGlsZShkPjApe2VbLS1kXT0wfXZhciBjO2ZvcihjPWUudC10aGlzLnQ7ZDxjOysrZCl7ZVtkK3RoaXMudF09dGhpcy5hbSgwLGJbZF0sZSxkLDAsdGhpcy50KX1mb3IoYz1NYXRoLm1pbihiLnQsZik7ZDxjOysrZCl7dGhpcy5hbSgwLGJbZF0sZSxkLDAsZi1kKX1lLmNsYW1wKCl9ZnVuY3Rpb24gYm5wTXVsdGlwbHlVcHBlclRvKGIsZSxkKXstLWU7dmFyIGM9ZC50PXRoaXMudCtiLnQtZTtkLnM9MDt3aGlsZSgtLWM+PTApe2RbY109MH1mb3IoYz1NYXRoLm1heChlLXRoaXMudCwwKTtjPGIudDsrK2Mpe2RbdGhpcy50K2MtZV09dGhpcy5hbShlLWMsYltjXSxkLDAsMCx0aGlzLnQrYy1lKX1kLmNsYW1wKCk7ZC5kclNoaWZ0VG8oMSxkKX1mdW5jdGlvbiBCYXJyZXR0KGEpe3RoaXMucjI9bmJpKCk7dGhpcy5xMz1uYmkoKTtCaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8oMiphLnQsdGhpcy5yMik7dGhpcy5tdT10aGlzLnIyLmRpdmlkZShhKTt0aGlzLm09YX1mdW5jdGlvbiBiYXJyZXR0Q29udmVydChhKXtpZihhLnM8MHx8YS50PjIqdGhpcy5tLnQpe3JldHVybiBhLm1vZCh0aGlzLm0pfWVsc2V7aWYoYS5jb21wYXJlVG8odGhpcy5tKTwwKXtyZXR1cm4gYX1lbHNle3ZhciBiPW5iaSgpO2EuY29weVRvKGIpO3RoaXMucmVkdWNlKGIpO3JldHVybiBifX19ZnVuY3Rpb24gYmFycmV0dFJldmVydChhKXtyZXR1cm4gYX1mdW5jdGlvbiBiYXJyZXR0UmVkdWNlKGEpe2EuZHJTaGlmdFRvKHRoaXMubS50LTEsdGhpcy5yMik7aWYoYS50PnRoaXMubS50KzEpe2EudD10aGlzLm0udCsxO2EuY2xhbXAoKX10aGlzLm11Lm11bHRpcGx5VXBwZXJUbyh0aGlzLnIyLHRoaXMubS50KzEsdGhpcy5xMyk7dGhpcy5tLm11bHRpcGx5TG93ZXJUbyh0aGlzLnEzLHRoaXMubS50KzEsdGhpcy5yMik7d2hpbGUoYS5jb21wYXJlVG8odGhpcy5yMik8MCl7YS5kQWRkT2Zmc2V0KDEsdGhpcy5tLnQrMSl9YS5zdWJUbyh0aGlzLnIyLGEpO3doaWxlKGEuY29tcGFyZVRvKHRoaXMubSk+PTApe2Euc3ViVG8odGhpcy5tLGEpfX1mdW5jdGlvbiBiYXJyZXR0U3FyVG8oYSxiKXthLnNxdWFyZVRvKGIpO3RoaXMucmVkdWNlKGIpfWZ1bmN0aW9uIGJhcnJldHRNdWxUbyhhLGMsYil7YS5tdWx0aXBseVRvKGMsYik7dGhpcy5yZWR1Y2UoYil9QmFycmV0dC5wcm90b3R5cGUuY29udmVydD1iYXJyZXR0Q29udmVydDtCYXJyZXR0LnByb3RvdHlwZS5yZXZlcnQ9YmFycmV0dFJldmVydDtCYXJyZXR0LnByb3RvdHlwZS5yZWR1Y2U9YmFycmV0dFJlZHVjZTtCYXJyZXR0LnByb3RvdHlwZS5tdWxUbz1iYXJyZXR0TXVsVG87QmFycmV0dC5wcm90b3R5cGUuc3FyVG89YmFycmV0dFNxclRvO2Z1bmN0aW9uIGJuTW9kUG93KHEsZil7dmFyIG89cS5iaXRMZW5ndGgoKSxoLGI9bmJ2KDEpLHY7aWYobzw9MCl7cmV0dXJuIGJ9ZWxzZXtpZihvPDE4KXtoPTF9ZWxzZXtpZihvPDQ4KXtoPTN9ZWxzZXtpZihvPDE0NCl7aD00fWVsc2V7aWYobzw3Njgpe2g9NX1lbHNle2g9Nn19fX19aWYobzw4KXt2PW5ldyBDbGFzc2ljKGYpfWVsc2V7aWYoZi5pc0V2ZW4oKSl7dj1uZXcgQmFycmV0dChmKX1lbHNle3Y9bmV3IE1vbnRnb21lcnkoZil9fXZhciBwPW5ldyBBcnJheSgpLGQ9MyxzPWgtMSxhPSgxPDxoKS0xO3BbMV09di5jb252ZXJ0KHRoaXMpO2lmKGg+MSl7dmFyIEE9bmJpKCk7di5zcXJUbyhwWzFdLEEpO3doaWxlKGQ8PWEpe3BbZF09bmJpKCk7di5tdWxUbyhBLHBbZC0yXSxwW2RdKTtkKz0yfX12YXIgbD1xLnQtMSx4LHU9dHJ1ZSxjPW5iaSgpLHk7bz1uYml0cyhxW2xdKS0xO3doaWxlKGw+PTApe2lmKG8+PXMpe3g9KHFbbF0+PihvLXMpKSZhfWVsc2V7eD0ocVtsXSYoKDE8PChvKzEpKS0xKSk8PChzLW8pO2lmKGw+MCl7eHw9cVtsLTFdPj4odGhpcy5EQitvLXMpfX1kPWg7d2hpbGUoKHgmMSk9PTApe3g+Pj0xOy0tZH1pZigoby09ZCk8MCl7bys9dGhpcy5EQjstLWx9aWYodSl7cFt4XS5jb3B5VG8oYik7dT1mYWxzZX1lbHNle3doaWxlKGQ+MSl7di5zcXJUbyhiLGMpO3Yuc3FyVG8oYyxiKTtkLT0yfWlmKGQ+MCl7di5zcXJUbyhiLGMpfWVsc2V7eT1iO2I9YztjPXl9di5tdWxUbyhjLHBbeF0sYil9d2hpbGUobD49MCYmKHFbbF0mKDE8PG8pKT09MCl7di5zcXJUbyhiLGMpO3k9YjtiPWM7Yz15O2lmKC0tbzwwKXtvPXRoaXMuREItMTstLWx9fX1yZXR1cm4gdi5yZXZlcnQoYil9ZnVuY3Rpb24gYm5HQ0QoYyl7dmFyIGI9KHRoaXMuczwwKT90aGlzLm5lZ2F0ZSgpOnRoaXMuY2xvbmUoKTt2YXIgaD0oYy5zPDApP2MubmVnYXRlKCk6Yy5jbG9uZSgpO2lmKGIuY29tcGFyZVRvKGgpPDApe3ZhciBlPWI7Yj1oO2g9ZX12YXIgZD1iLmdldExvd2VzdFNldEJpdCgpLGY9aC5nZXRMb3dlc3RTZXRCaXQoKTtpZihmPDApe3JldHVybiBifWlmKGQ8Zil7Zj1kfWlmKGY+MCl7Yi5yU2hpZnRUbyhmLGIpO2guclNoaWZ0VG8oZixoKX13aGlsZShiLnNpZ251bSgpPjApe2lmKChkPWIuZ2V0TG93ZXN0U2V0Qml0KCkpPjApe2IuclNoaWZ0VG8oZCxiKX1pZigoZD1oLmdldExvd2VzdFNldEJpdCgpKT4wKXtoLnJTaGlmdFRvKGQsaCl9aWYoYi5jb21wYXJlVG8oaCk+PTApe2Iuc3ViVG8oaCxiKTtiLnJTaGlmdFRvKDEsYil9ZWxzZXtoLnN1YlRvKGIsaCk7aC5yU2hpZnRUbygxLGgpfX1pZihmPjApe2gubFNoaWZ0VG8oZixoKX1yZXR1cm4gaH1mdW5jdGlvbiBibnBNb2RJbnQoZSl7aWYoZTw9MCl7cmV0dXJuIDB9dmFyIGM9dGhpcy5EViVlLGI9KHRoaXMuczwwKT9lLTE6MDtpZih0aGlzLnQ+MCl7aWYoYz09MCl7Yj10aGlzWzBdJWV9ZWxzZXtmb3IodmFyIGE9dGhpcy50LTE7YT49MDstLWEpe2I9KGMqYit0aGlzW2FdKSVlfX19cmV0dXJuIGJ9ZnVuY3Rpb24gYm5Nb2RJbnZlcnNlKGYpe3ZhciBqPWYuaXNFdmVuKCk7aWYoKHRoaXMuaXNFdmVuKCkmJmopfHxmLnNpZ251bSgpPT0wKXtyZXR1cm4gQmlnSW50ZWdlci5aRVJPfXZhciBpPWYuY2xvbmUoKSxoPXRoaXMuY2xvbmUoKTt2YXIgZz1uYnYoMSksZT1uYnYoMCksbD1uYnYoMCksaz1uYnYoMSk7d2hpbGUoaS5zaWdudW0oKSE9MCl7d2hpbGUoaS5pc0V2ZW4oKSl7aS5yU2hpZnRUbygxLGkpO2lmKGope2lmKCFnLmlzRXZlbigpfHwhZS5pc0V2ZW4oKSl7Zy5hZGRUbyh0aGlzLGcpO2Uuc3ViVG8oZixlKX1nLnJTaGlmdFRvKDEsZyl9ZWxzZXtpZighZS5pc0V2ZW4oKSl7ZS5zdWJUbyhmLGUpfX1lLnJTaGlmdFRvKDEsZSl9d2hpbGUoaC5pc0V2ZW4oKSl7aC5yU2hpZnRUbygxLGgpO2lmKGope2lmKCFsLmlzRXZlbigpfHwhay5pc0V2ZW4oKSl7bC5hZGRUbyh0aGlzLGwpO2suc3ViVG8oZixrKX1sLnJTaGlmdFRvKDEsbCl9ZWxzZXtpZighay5pc0V2ZW4oKSl7ay5zdWJUbyhmLGspfX1rLnJTaGlmdFRvKDEsayl9aWYoaS5jb21wYXJlVG8oaCk+PTApe2kuc3ViVG8oaCxpKTtpZihqKXtnLnN1YlRvKGwsZyl9ZS5zdWJUbyhrLGUpfWVsc2V7aC5zdWJUbyhpLGgpO2lmKGope2wuc3ViVG8oZyxsKX1rLnN1YlRvKGUsayl9fWlmKGguY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKSE9MCl7cmV0dXJuIEJpZ0ludGVnZXIuWkVST31pZihrLmNvbXBhcmVUbyhmKT49MCl7cmV0dXJuIGsuc3VidHJhY3QoZil9aWYoay5zaWdudW0oKTwwKXtrLmFkZFRvKGYsayl9ZWxzZXtyZXR1cm4ga31pZihrLnNpZ251bSgpPDApe3JldHVybiBrLmFkZChmKX1lbHNle3JldHVybiBrfX12YXIgbG93cHJpbWVzPVsyLDMsNSw3LDExLDEzLDE3LDE5LDIzLDI5LDMxLDM3LDQxLDQzLDQ3LDUzLDU5LDYxLDY3LDcxLDczLDc5LDgzLDg5LDk3LDEwMSwxMDMsMTA3LDEwOSwxMTMsMTI3LDEzMSwxMzcsMTM5LDE0OSwxNTEsMTU3LDE2MywxNjcsMTczLDE3OSwxODEsMTkxLDE5MywxOTcsMTk5LDIxMSwyMjMsMjI3LDIyOSwyMzMsMjM5LDI0MSwyNTEsMjU3LDI2MywyNjksMjcxLDI3NywyODEsMjgzLDI5MywzMDcsMzExLDMxMywzMTcsMzMxLDMzNywzNDcsMzQ5LDM1MywzNTksMzY3LDM3MywzNzksMzgzLDM4OSwzOTcsNDAxLDQwOSw0MTksNDIxLDQzMSw0MzMsNDM5LDQ0Myw0NDksNDU3LDQ2MSw0NjMsNDY3LDQ3OSw0ODcsNDkxLDQ5OSw1MDMsNTA5LDUyMSw1MjMsNTQxLDU0Nyw1NTcsNTYzLDU2OSw1NzEsNTc3LDU4Nyw1OTMsNTk5LDYwMSw2MDcsNjEzLDYxNyw2MTksNjMxLDY0MSw2NDMsNjQ3LDY1Myw2NTksNjYxLDY3Myw2NzcsNjgzLDY5MSw3MDEsNzA5LDcxOSw3MjcsNzMzLDczOSw3NDMsNzUxLDc1Nyw3NjEsNzY5LDc3Myw3ODcsNzk3LDgwOSw4MTEsODIxLDgyMyw4MjcsODI5LDgzOSw4NTMsODU3LDg1OSw4NjMsODc3LDg4MSw4ODMsODg3LDkwNyw5MTEsOTE5LDkyOSw5MzcsOTQxLDk0Nyw5NTMsOTY3LDk3MSw5NzcsOTgzLDk5MSw5OTddO3ZhciBscGxpbT0oMTw8MjYpL2xvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoLTFdO2Z1bmN0aW9uIGJuSXNQcm9iYWJsZVByaW1lKGUpe3ZhciBkLGI9dGhpcy5hYnMoKTtpZihiLnQ9PTEmJmJbMF08PWxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoLTFdKXtmb3IoZD0wO2Q8bG93cHJpbWVzLmxlbmd0aDsrK2Qpe2lmKGJbMF09PWxvd3ByaW1lc1tkXSl7cmV0dXJuIHRydWV9fXJldHVybiBmYWxzZX1pZihiLmlzRXZlbigpKXtyZXR1cm4gZmFsc2V9ZD0xO3doaWxlKGQ8bG93cHJpbWVzLmxlbmd0aCl7dmFyIGE9bG93cHJpbWVzW2RdLGM9ZCsxO3doaWxlKGM8bG93cHJpbWVzLmxlbmd0aCYmYTxscGxpbSl7YSo9bG93cHJpbWVzW2MrK119YT1iLm1vZEludChhKTt3aGlsZShkPGMpe2lmKGElbG93cHJpbWVzW2QrK109PTApe3JldHVybiBmYWxzZX19fXJldHVybiBiLm1pbGxlclJhYmluKGUpfWZ1bmN0aW9uIGJucE1pbGxlclJhYmluKGYpe3ZhciBnPXRoaXMuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpO3ZhciBjPWcuZ2V0TG93ZXN0U2V0Qml0KCk7aWYoYzw9MCl7cmV0dXJuIGZhbHNlfXZhciBoPWcuc2hpZnRSaWdodChjKTtmPShmKzEpPj4xO2lmKGY+bG93cHJpbWVzLmxlbmd0aCl7Zj1sb3dwcmltZXMubGVuZ3RofXZhciBiPW5iaSgpO2Zvcih2YXIgZT0wO2U8ZjsrK2Upe2IuZnJvbUludChsb3dwcmltZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmxvd3ByaW1lcy5sZW5ndGgpXSk7dmFyIGw9Yi5tb2RQb3coaCx0aGlzKTtpZihsLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkhPTAmJmwuY29tcGFyZVRvKGcpIT0wKXt2YXIgZD0xO3doaWxlKGQrKzxjJiZsLmNvbXBhcmVUbyhnKSE9MCl7bD1sLm1vZFBvd0ludCgyLHRoaXMpO2lmKGwuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKT09MCl7cmV0dXJuIGZhbHNlfX1pZihsLmNvbXBhcmVUbyhnKSE9MCl7cmV0dXJuIGZhbHNlfX19cmV0dXJuIHRydWV9QmlnSW50ZWdlci5wcm90b3R5cGUuY2h1bmtTaXplPWJucENodW5rU2l6ZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS50b1JhZGl4PWJucFRvUmFkaXg7QmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbVJhZGl4PWJucEZyb21SYWRpeDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tTnVtYmVyPWJucEZyb21OdW1iZXI7QmlnSW50ZWdlci5wcm90b3R5cGUuYml0d2lzZVRvPWJucEJpdHdpc2VUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5jaGFuZ2VCaXQ9Ym5wQ2hhbmdlQml0O0JpZ0ludGVnZXIucHJvdG90eXBlLmFkZFRvPWJucEFkZFRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmRNdWx0aXBseT1ibnBETXVsdGlwbHk7QmlnSW50ZWdlci5wcm90b3R5cGUuZEFkZE9mZnNldD1ibnBEQWRkT2Zmc2V0O0JpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5TG93ZXJUbz1ibnBNdWx0aXBseUxvd2VyVG87QmlnSW50ZWdlci5wcm90b3R5cGUubXVsdGlwbHlVcHBlclRvPWJucE11bHRpcGx5VXBwZXJUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RJbnQ9Ym5wTW9kSW50O0JpZ0ludGVnZXIucHJvdG90eXBlLm1pbGxlclJhYmluPWJucE1pbGxlclJhYmluO0JpZ0ludGVnZXIucHJvdG90eXBlLmNsb25lPWJuQ2xvbmU7QmlnSW50ZWdlci5wcm90b3R5cGUuaW50VmFsdWU9Ym5JbnRWYWx1ZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5ieXRlVmFsdWU9Ym5CeXRlVmFsdWU7QmlnSW50ZWdlci5wcm90b3R5cGUuc2hvcnRWYWx1ZT1iblNob3J0VmFsdWU7QmlnSW50ZWdlci5wcm90b3R5cGUuc2lnbnVtPWJuU2lnTnVtO0JpZ0ludGVnZXIucHJvdG90eXBlLnRvQnl0ZUFycmF5PWJuVG9CeXRlQXJyYXk7QmlnSW50ZWdlci5wcm90b3R5cGUuZXF1YWxzPWJuRXF1YWxzO0JpZ0ludGVnZXIucHJvdG90eXBlLm1pbj1ibk1pbjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5tYXg9Ym5NYXg7QmlnSW50ZWdlci5wcm90b3R5cGUuYW5kPWJuQW5kO0JpZ0ludGVnZXIucHJvdG90eXBlLm9yPWJuT3I7QmlnSW50ZWdlci5wcm90b3R5cGUueG9yPWJuWG9yO0JpZ0ludGVnZXIucHJvdG90eXBlLmFuZE5vdD1ibkFuZE5vdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5ub3Q9Ym5Ob3Q7QmlnSW50ZWdlci5wcm90b3R5cGUuc2hpZnRMZWZ0PWJuU2hpZnRMZWZ0O0JpZ0ludGVnZXIucHJvdG90eXBlLnNoaWZ0UmlnaHQ9Ym5TaGlmdFJpZ2h0O0JpZ0ludGVnZXIucHJvdG90eXBlLmdldExvd2VzdFNldEJpdD1ibkdldExvd2VzdFNldEJpdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5iaXRDb3VudD1ibkJpdENvdW50O0JpZ0ludGVnZXIucHJvdG90eXBlLnRlc3RCaXQ9Ym5UZXN0Qml0O0JpZ0ludGVnZXIucHJvdG90eXBlLnNldEJpdD1iblNldEJpdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5jbGVhckJpdD1ibkNsZWFyQml0O0JpZ0ludGVnZXIucHJvdG90eXBlLmZsaXBCaXQ9Ym5GbGlwQml0O0JpZ0ludGVnZXIucHJvdG90eXBlLmFkZD1ibkFkZDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5zdWJ0cmFjdD1iblN1YnRyYWN0O0JpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5PWJuTXVsdGlwbHk7QmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlPWJuRGl2aWRlO0JpZ0ludGVnZXIucHJvdG90eXBlLnJlbWFpbmRlcj1iblJlbWFpbmRlcjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5kaXZpZGVBbmRSZW1haW5kZXI9Ym5EaXZpZGVBbmRSZW1haW5kZXI7QmlnSW50ZWdlci5wcm90b3R5cGUubW9kUG93PWJuTW9kUG93O0JpZ0ludGVnZXIucHJvdG90eXBlLm1vZEludmVyc2U9Ym5Nb2RJbnZlcnNlO0JpZ0ludGVnZXIucHJvdG90eXBlLnBvdz1iblBvdztCaWdJbnRlZ2VyLnByb3RvdHlwZS5nY2Q9Ym5HQ0Q7QmlnSW50ZWdlci5wcm90b3R5cGUuaXNQcm9iYWJsZVByaW1lPWJuSXNQcm9iYWJsZVByaW1lO0JpZ0ludGVnZXIucHJvdG90eXBlLnNxdWFyZT1iblNxdWFyZTtcbi8qISAoYykgVG9tIFd1IHwgaHR0cDovL3d3dy1jcy1zdHVkZW50cy5zdGFuZm9yZC5lZHUvfnRqdy9qc2JuL1xyXG4gKi9cclxuZnVuY3Rpb24gQXJjZm91cigpe3RoaXMuaT0wO3RoaXMuaj0wO3RoaXMuUz1uZXcgQXJyYXkoKX1mdW5jdGlvbiBBUkM0aW5pdChkKXt2YXIgYyxhLGI7Zm9yKGM9MDtjPDI1NjsrK2Mpe3RoaXMuU1tjXT1jfWE9MDtmb3IoYz0wO2M8MjU2OysrYyl7YT0oYSt0aGlzLlNbY10rZFtjJWQubGVuZ3RoXSkmMjU1O2I9dGhpcy5TW2NdO3RoaXMuU1tjXT10aGlzLlNbYV07dGhpcy5TW2FdPWJ9dGhpcy5pPTA7dGhpcy5qPTB9ZnVuY3Rpb24gQVJDNG5leHQoKXt2YXIgYTt0aGlzLmk9KHRoaXMuaSsxKSYyNTU7dGhpcy5qPSh0aGlzLmordGhpcy5TW3RoaXMuaV0pJjI1NTthPXRoaXMuU1t0aGlzLmldO3RoaXMuU1t0aGlzLmldPXRoaXMuU1t0aGlzLmpdO3RoaXMuU1t0aGlzLmpdPWE7cmV0dXJuIHRoaXMuU1soYSt0aGlzLlNbdGhpcy5pXSkmMjU1XX1BcmNmb3VyLnByb3RvdHlwZS5pbml0PUFSQzRpbml0O0FyY2ZvdXIucHJvdG90eXBlLm5leHQ9QVJDNG5leHQ7ZnVuY3Rpb24gcHJuZ19uZXdzdGF0ZSgpe3JldHVybiBuZXcgQXJjZm91cigpfXZhciBybmdfcHNpemU9MjU2O1xuLyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXHJcbiAqL1xyXG52YXIgcm5nX3N0YXRlO3ZhciBybmdfcG9vbDt2YXIgcm5nX3BwdHI7ZnVuY3Rpb24gcm5nX3NlZWRfaW50KGEpe3JuZ19wb29sW3JuZ19wcHRyKytdXj1hJjI1NTtybmdfcG9vbFtybmdfcHB0cisrXV49KGE+PjgpJjI1NTtybmdfcG9vbFtybmdfcHB0cisrXV49KGE+PjE2KSYyNTU7cm5nX3Bvb2xbcm5nX3BwdHIrK11ePShhPj4yNCkmMjU1O2lmKHJuZ19wcHRyPj1ybmdfcHNpemUpe3JuZ19wcHRyLT1ybmdfcHNpemV9fWZ1bmN0aW9uIHJuZ19zZWVkX3RpbWUoKXtybmdfc2VlZF9pbnQobmV3IERhdGUoKS5nZXRUaW1lKCkpfWlmKHJuZ19wb29sPT1udWxsKXtybmdfcG9vbD1uZXcgQXJyYXkoKTtybmdfcHB0cj0wO3ZhciB0O2lmKHdpbmRvdyE9PXVuZGVmaW5lZCYmKHdpbmRvdy5jcnlwdG8hPT11bmRlZmluZWR8fHdpbmRvdy5tc0NyeXB0byE9PXVuZGVmaW5lZCkpe3ZhciBjcnlwdG89d2luZG93LmNyeXB0b3x8d2luZG93Lm1zQ3J5cHRvO2lmKGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpe3ZhciB1YT1uZXcgVWludDhBcnJheSgzMik7Y3J5cHRvLmdldFJhbmRvbVZhbHVlcyh1YSk7Zm9yKHQ9MDt0PDMyOysrdCl7cm5nX3Bvb2xbcm5nX3BwdHIrK109dWFbdF19fWVsc2V7aWYobmF2aWdhdG9yLmFwcE5hbWU9PVwiTmV0c2NhcGVcIiYmbmF2aWdhdG9yLmFwcFZlcnNpb248XCI1XCIpe3ZhciB6PXdpbmRvdy5jcnlwdG8ucmFuZG9tKDMyKTtmb3IodD0wO3Q8ei5sZW5ndGg7Kyt0KXtybmdfcG9vbFtybmdfcHB0cisrXT16LmNoYXJDb2RlQXQodCkmMjU1fX19fXdoaWxlKHJuZ19wcHRyPHJuZ19wc2l6ZSl7dD1NYXRoLmZsb29yKDY1NTM2Kk1hdGgucmFuZG9tKCkpO3JuZ19wb29sW3JuZ19wcHRyKytdPXQ+Pj44O3JuZ19wb29sW3JuZ19wcHRyKytdPXQmMjU1fXJuZ19wcHRyPTA7cm5nX3NlZWRfdGltZSgpfWZ1bmN0aW9uIHJuZ19nZXRfYnl0ZSgpe2lmKHJuZ19zdGF0ZT09bnVsbCl7cm5nX3NlZWRfdGltZSgpO3JuZ19zdGF0ZT1wcm5nX25ld3N0YXRlKCk7cm5nX3N0YXRlLmluaXQocm5nX3Bvb2wpO2ZvcihybmdfcHB0cj0wO3JuZ19wcHRyPHJuZ19wb29sLmxlbmd0aDsrK3JuZ19wcHRyKXtybmdfcG9vbFtybmdfcHB0cl09MH1ybmdfcHB0cj0wfXJldHVybiBybmdfc3RhdGUubmV4dCgpfWZ1bmN0aW9uIHJuZ19nZXRfYnl0ZXMoYil7dmFyIGE7Zm9yKGE9MDthPGIubGVuZ3RoOysrYSl7YlthXT1ybmdfZ2V0X2J5dGUoKX19ZnVuY3Rpb24gU2VjdXJlUmFuZG9tKCl7fVNlY3VyZVJhbmRvbS5wcm90b3R5cGUubmV4dEJ5dGVzPXJuZ19nZXRfYnl0ZXM7XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cclxuICovXHJcbmZ1bmN0aW9uIHBhcnNlQmlnSW50KGIsYSl7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGIsYSl9ZnVuY3Rpb24gbGluZWJyayhjLGQpe3ZhciBhPVwiXCI7dmFyIGI9MDt3aGlsZShiK2Q8Yy5sZW5ndGgpe2ErPWMuc3Vic3RyaW5nKGIsYitkKStcIlxcblwiO2IrPWR9cmV0dXJuIGErYy5zdWJzdHJpbmcoYixjLmxlbmd0aCl9ZnVuY3Rpb24gYnl0ZTJIZXgoYSl7aWYoYTwxNil7cmV0dXJuXCIwXCIrYS50b1N0cmluZygxNil9ZWxzZXtyZXR1cm4gYS50b1N0cmluZygxNil9fWZ1bmN0aW9uIHBrY3MxcGFkMihlLGgpe2lmKGg8ZS5sZW5ndGgrMTEpe3Rocm93XCJNZXNzYWdlIHRvbyBsb25nIGZvciBSU0FcIjtyZXR1cm4gbnVsbH12YXIgZz1uZXcgQXJyYXkoKTt2YXIgZD1lLmxlbmd0aC0xO3doaWxlKGQ+PTAmJmg+MCl7dmFyIGY9ZS5jaGFyQ29kZUF0KGQtLSk7aWYoZjwxMjgpe2dbLS1oXT1mfWVsc2V7aWYoKGY+MTI3KSYmKGY8MjA0OCkpe2dbLS1oXT0oZiY2Myl8MTI4O2dbLS1oXT0oZj4+Nil8MTkyfWVsc2V7Z1stLWhdPShmJjYzKXwxMjg7Z1stLWhdPSgoZj4+NikmNjMpfDEyODtnWy0taF09KGY+PjEyKXwyMjR9fX1nWy0taF09MDt2YXIgYj1uZXcgU2VjdXJlUmFuZG9tKCk7dmFyIGE9bmV3IEFycmF5KCk7d2hpbGUoaD4yKXthWzBdPTA7d2hpbGUoYVswXT09MCl7Yi5uZXh0Qnl0ZXMoYSl9Z1stLWhdPWFbMF19Z1stLWhdPTI7Z1stLWhdPTA7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGcpfWZ1bmN0aW9uIG9hZXBfbWdmMV9hcnIoYyxhLGUpe3ZhciBiPVwiXCIsZD0wO3doaWxlKGIubGVuZ3RoPGEpe2IrPWUoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsYy5jb25jYXQoWyhkJjQyNzgxOTAwODApPj4yNCwoZCYxNjcxMTY4MCk+PjE2LChkJjY1MjgwKT4+OCxkJjI1NV0pKSk7ZCs9MX1yZXR1cm4gYn1mdW5jdGlvbiBvYWVwX3BhZChxLGEsZixsKXt2YXIgYz1LSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0O3ZhciBvPUtKVVIuY3J5cHRvLlV0aWw7dmFyIGI9bnVsbDtpZighZil7Zj1cInNoYTFcIn1pZih0eXBlb2YgZj09PVwic3RyaW5nXCIpe2I9Yy5nZXRDYW5vbmljYWxBbGdOYW1lKGYpO2w9Yy5nZXRIYXNoTGVuZ3RoKGIpO2Y9ZnVuY3Rpb24oaSl7cmV0dXJuIGhleHRvcnN0cihvLmhhc2hIZXgocnN0cnRvaGV4KGkpLGIpKX19aWYocS5sZW5ndGgrMipsKzI+YSl7dGhyb3dcIk1lc3NhZ2UgdG9vIGxvbmcgZm9yIFJTQVwifXZhciBrPVwiXCIsZTtmb3IoZT0wO2U8YS1xLmxlbmd0aC0yKmwtMjtlKz0xKXtrKz1cIlxceDAwXCJ9dmFyIGg9ZihcIlwiKStrK1wiXFx4MDFcIitxO3ZhciBnPW5ldyBBcnJheShsKTtuZXcgU2VjdXJlUmFuZG9tKCkubmV4dEJ5dGVzKGcpO3ZhciBqPW9hZXBfbWdmMV9hcnIoZyxoLmxlbmd0aCxmKTt2YXIgcD1bXTtmb3IoZT0wO2U8aC5sZW5ndGg7ZSs9MSl7cFtlXT1oLmNoYXJDb2RlQXQoZSleai5jaGFyQ29kZUF0KGUpfXZhciBtPW9hZXBfbWdmMV9hcnIocCxnLmxlbmd0aCxmKTt2YXIgZD1bMF07Zm9yKGU9MDtlPGcubGVuZ3RoO2UrPTEpe2RbZSsxXT1nW2VdXm0uY2hhckNvZGVBdChlKX1yZXR1cm4gbmV3IEJpZ0ludGVnZXIoZC5jb25jYXQocCkpfWZ1bmN0aW9uIFJTQUtleSgpe3RoaXMubj1udWxsO3RoaXMuZT0wO3RoaXMuZD1udWxsO3RoaXMucD1udWxsO3RoaXMucT1udWxsO3RoaXMuZG1wMT1udWxsO3RoaXMuZG1xMT1udWxsO3RoaXMuY29lZmY9bnVsbH1mdW5jdGlvbiBSU0FTZXRQdWJsaWMoYixhKXt0aGlzLmlzUHVibGljPXRydWU7dGhpcy5pc1ByaXZhdGU9ZmFsc2U7aWYodHlwZW9mIGIhPT1cInN0cmluZ1wiKXt0aGlzLm49Yjt0aGlzLmU9YX1lbHNle2lmKGIhPW51bGwmJmEhPW51bGwmJmIubGVuZ3RoPjAmJmEubGVuZ3RoPjApe3RoaXMubj1wYXJzZUJpZ0ludChiLDE2KTt0aGlzLmU9cGFyc2VJbnQoYSwxNil9ZWxzZXt0aHJvd1wiSW52YWxpZCBSU0EgcHVibGljIGtleVwifX19ZnVuY3Rpb24gUlNBRG9QdWJsaWMoYSl7cmV0dXJuIGEubW9kUG93SW50KHRoaXMuZSx0aGlzLm4pfWZ1bmN0aW9uIFJTQUVuY3J5cHQoZCl7dmFyIGE9cGtjczFwYWQyKGQsKHRoaXMubi5iaXRMZW5ndGgoKSs3KT4+Myk7aWYoYT09bnVsbCl7cmV0dXJuIG51bGx9dmFyIGU9dGhpcy5kb1B1YmxpYyhhKTtpZihlPT1udWxsKXtyZXR1cm4gbnVsbH12YXIgYj1lLnRvU3RyaW5nKDE2KTtpZigoYi5sZW5ndGgmMSk9PTApe3JldHVybiBifWVsc2V7cmV0dXJuXCIwXCIrYn19ZnVuY3Rpb24gUlNBRW5jcnlwdE9BRVAoZixlLGIpe3ZhciBhPW9hZXBfcGFkKGYsKHRoaXMubi5iaXRMZW5ndGgoKSs3KT4+MyxlLGIpO2lmKGE9PW51bGwpe3JldHVybiBudWxsfXZhciBnPXRoaXMuZG9QdWJsaWMoYSk7aWYoZz09bnVsbCl7cmV0dXJuIG51bGx9dmFyIGQ9Zy50b1N0cmluZygxNik7aWYoKGQubGVuZ3RoJjEpPT0wKXtyZXR1cm4gZH1lbHNle3JldHVyblwiMFwiK2R9fVJTQUtleS5wcm90b3R5cGUuZG9QdWJsaWM9UlNBRG9QdWJsaWM7UlNBS2V5LnByb3RvdHlwZS5zZXRQdWJsaWM9UlNBU2V0UHVibGljO1JTQUtleS5wcm90b3R5cGUuZW5jcnlwdD1SU0FFbmNyeXB0O1JTQUtleS5wcm90b3R5cGUuZW5jcnlwdE9BRVA9UlNBRW5jcnlwdE9BRVA7UlNBS2V5LnByb3RvdHlwZS50eXBlPVwiUlNBXCI7XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cclxuICovXHJcbmZ1bmN0aW9uIEVDRmllbGRFbGVtZW50RnAoYixhKXt0aGlzLng9YTt0aGlzLnE9Yn1mdW5jdGlvbiBmZUZwRXF1YWxzKGEpe2lmKGE9PXRoaXMpe3JldHVybiB0cnVlfXJldHVybih0aGlzLnEuZXF1YWxzKGEucSkmJnRoaXMueC5lcXVhbHMoYS54KSl9ZnVuY3Rpb24gZmVGcFRvQmlnSW50ZWdlcigpe3JldHVybiB0aGlzLnh9ZnVuY3Rpb24gZmVGcE5lZ2F0ZSgpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54Lm5lZ2F0ZSgpLm1vZCh0aGlzLnEpKX1mdW5jdGlvbiBmZUZwQWRkKGEpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54LmFkZChhLnRvQmlnSW50ZWdlcigpKS5tb2QodGhpcy5xKSl9ZnVuY3Rpb24gZmVGcFN1YnRyYWN0KGEpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54LnN1YnRyYWN0KGEudG9CaWdJbnRlZ2VyKCkpLm1vZCh0aGlzLnEpKX1mdW5jdGlvbiBmZUZwTXVsdGlwbHkoYSl7cmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSx0aGlzLngubXVsdGlwbHkoYS50b0JpZ0ludGVnZXIoKSkubW9kKHRoaXMucSkpfWZ1bmN0aW9uIGZlRnBTcXVhcmUoKXtyZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLHRoaXMueC5zcXVhcmUoKS5tb2QodGhpcy5xKSl9ZnVuY3Rpb24gZmVGcERpdmlkZShhKXtyZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLHRoaXMueC5tdWx0aXBseShhLnRvQmlnSW50ZWdlcigpLm1vZEludmVyc2UodGhpcy5xKSkubW9kKHRoaXMucSkpfUVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLmVxdWFscz1mZUZwRXF1YWxzO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnRvQmlnSW50ZWdlcj1mZUZwVG9CaWdJbnRlZ2VyO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLm5lZ2F0ZT1mZUZwTmVnYXRlO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLmFkZD1mZUZwQWRkO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnN1YnRyYWN0PWZlRnBTdWJ0cmFjdDtFQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5tdWx0aXBseT1mZUZwTXVsdGlwbHk7RUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuc3F1YXJlPWZlRnBTcXVhcmU7RUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuZGl2aWRlPWZlRnBEaXZpZGU7ZnVuY3Rpb24gRUNQb2ludEZwKGMsYSxkLGIpe3RoaXMuY3VydmU9Yzt0aGlzLng9YTt0aGlzLnk9ZDtpZihiPT1udWxsKXt0aGlzLno9QmlnSW50ZWdlci5PTkV9ZWxzZXt0aGlzLno9Yn10aGlzLnppbnY9bnVsbH1mdW5jdGlvbiBwb2ludEZwR2V0WCgpe2lmKHRoaXMuemludj09bnVsbCl7dGhpcy56aW52PXRoaXMuei5tb2RJbnZlcnNlKHRoaXMuY3VydmUucSl9cmV0dXJuIHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIodGhpcy54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMuemludikubW9kKHRoaXMuY3VydmUucSkpfWZ1bmN0aW9uIHBvaW50RnBHZXRZKCl7aWYodGhpcy56aW52PT1udWxsKXt0aGlzLnppbnY9dGhpcy56Lm1vZEludmVyc2UodGhpcy5jdXJ2ZS5xKX1yZXR1cm4gdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcih0aGlzLnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56aW52KS5tb2QodGhpcy5jdXJ2ZS5xKSl9ZnVuY3Rpb24gcG9pbnRGcEVxdWFscyhhKXtpZihhPT10aGlzKXtyZXR1cm4gdHJ1ZX1pZih0aGlzLmlzSW5maW5pdHkoKSl7cmV0dXJuIGEuaXNJbmZpbml0eSgpfWlmKGEuaXNJbmZpbml0eSgpKXtyZXR1cm4gdGhpcy5pc0luZmluaXR5KCl9dmFyIGMsYjtjPWEueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShhLnopKS5tb2QodGhpcy5jdXJ2ZS5xKTtpZighYy5lcXVhbHMoQmlnSW50ZWdlci5aRVJPKSl7cmV0dXJuIGZhbHNlfWI9YS54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KGEueikpLm1vZCh0aGlzLmN1cnZlLnEpO3JldHVybiBiLmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pfWZ1bmN0aW9uIHBvaW50RnBJc0luZmluaXR5KCl7aWYoKHRoaXMueD09bnVsbCkmJih0aGlzLnk9PW51bGwpKXtyZXR1cm4gdHJ1ZX1yZXR1cm4gdGhpcy56LmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pJiYhdGhpcy55LnRvQmlnSW50ZWdlcigpLmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pfWZ1bmN0aW9uIHBvaW50RnBOZWdhdGUoKXtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLHRoaXMueCx0aGlzLnkubmVnYXRlKCksdGhpcy56KX1mdW5jdGlvbiBwb2ludEZwQWRkKGwpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXtyZXR1cm4gbH1pZihsLmlzSW5maW5pdHkoKSl7cmV0dXJuIHRoaXN9dmFyIHA9bC55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KGwueikpLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBvPWwueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShsLnopKS5tb2QodGhpcy5jdXJ2ZS5xKTtpZihCaWdJbnRlZ2VyLlpFUk8uZXF1YWxzKG8pKXtpZihCaWdJbnRlZ2VyLlpFUk8uZXF1YWxzKHApKXtyZXR1cm4gdGhpcy50d2ljZSgpfXJldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGo9bmV3IEJpZ0ludGVnZXIoXCIzXCIpO3ZhciBlPXRoaXMueC50b0JpZ0ludGVnZXIoKTt2YXIgbj10aGlzLnkudG9CaWdJbnRlZ2VyKCk7dmFyIGM9bC54LnRvQmlnSW50ZWdlcigpO3ZhciBrPWwueS50b0JpZ0ludGVnZXIoKTt2YXIgbT1vLnNxdWFyZSgpO3ZhciBpPW0ubXVsdGlwbHkobyk7dmFyIGQ9ZS5tdWx0aXBseShtKTt2YXIgZz1wLnNxdWFyZSgpLm11bHRpcGx5KHRoaXMueik7dmFyIGE9Zy5zdWJ0cmFjdChkLnNoaWZ0TGVmdCgxKSkubXVsdGlwbHkobC56KS5zdWJ0cmFjdChpKS5tdWx0aXBseShvKS5tb2QodGhpcy5jdXJ2ZS5xKTt2YXIgaD1kLm11bHRpcGx5KGopLm11bHRpcGx5KHApLnN1YnRyYWN0KG4ubXVsdGlwbHkoaSkpLnN1YnRyYWN0KGcubXVsdGlwbHkocCkpLm11bHRpcGx5KGwueikuYWRkKHAubXVsdGlwbHkoaSkpLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBmPWkubXVsdGlwbHkodGhpcy56KS5tdWx0aXBseShsLnopLm1vZCh0aGlzLmN1cnZlLnEpO3JldHVybiBuZXcgRUNQb2ludEZwKHRoaXMuY3VydmUsdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihhKSx0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKGgpLGYpfWZ1bmN0aW9uIHBvaW50RnBUd2ljZSgpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXtyZXR1cm4gdGhpc31pZih0aGlzLnkudG9CaWdJbnRlZ2VyKCkuc2lnbnVtKCk9PTApe3JldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGc9bmV3IEJpZ0ludGVnZXIoXCIzXCIpO3ZhciBjPXRoaXMueC50b0JpZ0ludGVnZXIoKTt2YXIgaD10aGlzLnkudG9CaWdJbnRlZ2VyKCk7dmFyIGU9aC5tdWx0aXBseSh0aGlzLnopO3ZhciBqPWUubXVsdGlwbHkoaCkubW9kKHRoaXMuY3VydmUucSk7dmFyIGk9dGhpcy5jdXJ2ZS5hLnRvQmlnSW50ZWdlcigpO3ZhciBrPWMuc3F1YXJlKCkubXVsdGlwbHkoZyk7aWYoIUJpZ0ludGVnZXIuWkVSTy5lcXVhbHMoaSkpe2s9ay5hZGQodGhpcy56LnNxdWFyZSgpLm11bHRpcGx5KGkpKX1rPWsubW9kKHRoaXMuY3VydmUucSk7dmFyIGI9ay5zcXVhcmUoKS5zdWJ0cmFjdChjLnNoaWZ0TGVmdCgzKS5tdWx0aXBseShqKSkuc2hpZnRMZWZ0KDEpLm11bHRpcGx5KGUpLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBmPWsubXVsdGlwbHkoZykubXVsdGlwbHkoYykuc3VidHJhY3Qoai5zaGlmdExlZnQoMSkpLnNoaWZ0TGVmdCgyKS5tdWx0aXBseShqKS5zdWJ0cmFjdChrLnNxdWFyZSgpLm11bHRpcGx5KGspKS5tb2QodGhpcy5jdXJ2ZS5xKTt2YXIgZD1lLnNxdWFyZSgpLm11bHRpcGx5KGUpLnNoaWZ0TGVmdCgzKS5tb2QodGhpcy5jdXJ2ZS5xKTtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIoYiksdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihmKSxkKX1mdW5jdGlvbiBwb2ludEZwTXVsdGlwbHkoYil7aWYodGhpcy5pc0luZmluaXR5KCkpe3JldHVybiB0aGlzfWlmKGIuc2lnbnVtKCk9PTApe3JldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGc9Yjt2YXIgZj1nLm11bHRpcGx5KG5ldyBCaWdJbnRlZ2VyKFwiM1wiKSk7dmFyIGw9dGhpcy5uZWdhdGUoKTt2YXIgZD10aGlzO3ZhciBjO2ZvcihjPWYuYml0TGVuZ3RoKCktMjtjPjA7LS1jKXtkPWQudHdpY2UoKTt2YXIgYT1mLnRlc3RCaXQoYyk7dmFyIGo9Zy50ZXN0Qml0KGMpO2lmKGEhPWope2Q9ZC5hZGQoYT90aGlzOmwpfX1yZXR1cm4gZH1mdW5jdGlvbiBwb2ludEZwTXVsdGlwbHlUd28oYyxhLGIpe3ZhciBkO2lmKGMuYml0TGVuZ3RoKCk+Yi5iaXRMZW5ndGgoKSl7ZD1jLmJpdExlbmd0aCgpLTF9ZWxzZXtkPWIuYml0TGVuZ3RoKCktMX12YXIgZj10aGlzLmN1cnZlLmdldEluZmluaXR5KCk7dmFyIGU9dGhpcy5hZGQoYSk7d2hpbGUoZD49MCl7Zj1mLnR3aWNlKCk7aWYoYy50ZXN0Qml0KGQpKXtpZihiLnRlc3RCaXQoZCkpe2Y9Zi5hZGQoZSl9ZWxzZXtmPWYuYWRkKHRoaXMpfX1lbHNle2lmKGIudGVzdEJpdChkKSl7Zj1mLmFkZChhKX19LS1kfXJldHVybiBmfUVDUG9pbnRGcC5wcm90b3R5cGUuZ2V0WD1wb2ludEZwR2V0WDtFQ1BvaW50RnAucHJvdG90eXBlLmdldFk9cG9pbnRGcEdldFk7RUNQb2ludEZwLnByb3RvdHlwZS5lcXVhbHM9cG9pbnRGcEVxdWFscztFQ1BvaW50RnAucHJvdG90eXBlLmlzSW5maW5pdHk9cG9pbnRGcElzSW5maW5pdHk7RUNQb2ludEZwLnByb3RvdHlwZS5uZWdhdGU9cG9pbnRGcE5lZ2F0ZTtFQ1BvaW50RnAucHJvdG90eXBlLmFkZD1wb2ludEZwQWRkO0VDUG9pbnRGcC5wcm90b3R5cGUudHdpY2U9cG9pbnRGcFR3aWNlO0VDUG9pbnRGcC5wcm90b3R5cGUubXVsdGlwbHk9cG9pbnRGcE11bHRpcGx5O0VDUG9pbnRGcC5wcm90b3R5cGUubXVsdGlwbHlUd289cG9pbnRGcE11bHRpcGx5VHdvO2Z1bmN0aW9uIEVDQ3VydmVGcChlLGQsYyl7dGhpcy5xPWU7dGhpcy5hPXRoaXMuZnJvbUJpZ0ludGVnZXIoZCk7dGhpcy5iPXRoaXMuZnJvbUJpZ0ludGVnZXIoYyk7dGhpcy5pbmZpbml0eT1uZXcgRUNQb2ludEZwKHRoaXMsbnVsbCxudWxsKX1mdW5jdGlvbiBjdXJ2ZUZwR2V0USgpe3JldHVybiB0aGlzLnF9ZnVuY3Rpb24gY3VydmVGcEdldEEoKXtyZXR1cm4gdGhpcy5hfWZ1bmN0aW9uIGN1cnZlRnBHZXRCKCl7cmV0dXJuIHRoaXMuYn1mdW5jdGlvbiBjdXJ2ZUZwRXF1YWxzKGEpe2lmKGE9PXRoaXMpe3JldHVybiB0cnVlfXJldHVybih0aGlzLnEuZXF1YWxzKGEucSkmJnRoaXMuYS5lcXVhbHMoYS5hKSYmdGhpcy5iLmVxdWFscyhhLmIpKX1mdW5jdGlvbiBjdXJ2ZUZwR2V0SW5maW5pdHkoKXtyZXR1cm4gdGhpcy5pbmZpbml0eX1mdW5jdGlvbiBjdXJ2ZUZwRnJvbUJpZ0ludGVnZXIoYSl7cmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSxhKX1mdW5jdGlvbiBjdXJ2ZUZwRGVjb2RlUG9pbnRIZXgoZCl7c3dpdGNoKHBhcnNlSW50KGQuc3Vic3RyKDAsMiksMTYpKXtjYXNlIDA6cmV0dXJuIHRoaXMuaW5maW5pdHk7Y2FzZSAyOmNhc2UgMzpyZXR1cm4gbnVsbDtjYXNlIDQ6Y2FzZSA2OmNhc2UgNzp2YXIgYT0oZC5sZW5ndGgtMikvMjt2YXIgYz1kLnN1YnN0cigyLGEpO3ZhciBiPWQuc3Vic3RyKGErMixhKTtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLHRoaXMuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoYywxNikpLHRoaXMuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoYiwxNikpKTtkZWZhdWx0OnJldHVybiBudWxsfX1FQ0N1cnZlRnAucHJvdG90eXBlLmdldFE9Y3VydmVGcEdldFE7RUNDdXJ2ZUZwLnByb3RvdHlwZS5nZXRBPWN1cnZlRnBHZXRBO0VDQ3VydmVGcC5wcm90b3R5cGUuZ2V0Qj1jdXJ2ZUZwR2V0QjtFQ0N1cnZlRnAucHJvdG90eXBlLmVxdWFscz1jdXJ2ZUZwRXF1YWxzO0VDQ3VydmVGcC5wcm90b3R5cGUuZ2V0SW5maW5pdHk9Y3VydmVGcEdldEluZmluaXR5O0VDQ3VydmVGcC5wcm90b3R5cGUuZnJvbUJpZ0ludGVnZXI9Y3VydmVGcEZyb21CaWdJbnRlZ2VyO0VDQ3VydmVGcC5wcm90b3R5cGUuZGVjb2RlUG9pbnRIZXg9Y3VydmVGcERlY29kZVBvaW50SGV4O1xuLyohIE1pa2UgU2FtdWVsIChjKSAyMDA5IHwgY29kZS5nb29nbGUuY29tL3AvanNvbi1zYW5zLWV2YWxcclxuICovXHJcbnZhciBqc29uUGFyc2U9KGZ1bmN0aW9uKCl7dmFyIGU9XCIoPzotP1xcXFxiKD86MHxbMS05XVswLTldKikoPzpcXFxcLlswLTldKyk/KD86W2VFXVsrLV0/WzAtOV0rKT9cXFxcYilcIjt2YXIgaj0nKD86W15cXFxcMC1cXFxceDA4XFxcXHgwYS1cXFxceDFmXCJcXFxcXFxcXF18XFxcXFxcXFwoPzpbXCIvXFxcXFxcXFxiZm5ydF18dVswLTlBLUZhLWZdezR9KSknO3ZhciBpPScoPzpcIicraisnKlwiKSc7dmFyIGQ9bmV3IFJlZ0V4cChcIig/OmZhbHNlfHRydWV8bnVsbHxbXFxcXHtcXFxcfVxcXFxbXFxcXF1dfFwiK2UrXCJ8XCIraStcIilcIixcImdcIik7dmFyIGs9bmV3IFJlZ0V4cChcIlxcXFxcXFxcKD86KFtedV0pfHUoLns0fSkpXCIsXCJnXCIpO3ZhciBnPXsnXCInOidcIicsXCIvXCI6XCIvXCIsXCJcXFxcXCI6XCJcXFxcXCIsYjpcIlxcYlwiLGY6XCJcXGZcIixuOlwiXFxuXCIscjpcIlxcclwiLHQ6XCJcXHRcIn07ZnVuY3Rpb24gaChsLG0sbil7cmV0dXJuIG0/Z1ttXTpTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KG4sMTYpKX12YXIgYz1uZXcgU3RyaW5nKFwiXCIpO3ZhciBhPVwiXFxcXFwiO3ZhciBmPXtcIntcIjpPYmplY3QsXCJbXCI6QXJyYXl9O3ZhciBiPU9iamVjdC5oYXNPd25Qcm9wZXJ0eTtyZXR1cm4gZnVuY3Rpb24odSxxKXt2YXIgcD11Lm1hdGNoKGQpO3ZhciB4O3ZhciB2PXBbMF07dmFyIGw9ZmFsc2U7aWYoXCJ7XCI9PT12KXt4PXt9fWVsc2V7aWYoXCJbXCI9PT12KXt4PVtdfWVsc2V7eD1bXTtsPXRydWV9fXZhciB0O3ZhciByPVt4XTtmb3IodmFyIG89MS1sLG09cC5sZW5ndGg7bzxtOysrbyl7dj1wW29dO3ZhciB3O3N3aXRjaCh2LmNoYXJDb2RlQXQoMCkpe2RlZmF1bHQ6dz1yWzBdO3dbdHx8dy5sZW5ndGhdPSsodik7dD12b2lkIDA7YnJlYWs7Y2FzZSAzNDp2PXYuc3Vic3RyaW5nKDEsdi5sZW5ndGgtMSk7aWYodi5pbmRleE9mKGEpIT09LTEpe3Y9di5yZXBsYWNlKGssaCl9dz1yWzBdO2lmKCF0KXtpZih3IGluc3RhbmNlb2YgQXJyYXkpe3Q9dy5sZW5ndGh9ZWxzZXt0PXZ8fGM7YnJlYWt9fXdbdF09djt0PXZvaWQgMDticmVhaztjYXNlIDkxOnc9clswXTtyLnVuc2hpZnQod1t0fHx3Lmxlbmd0aF09W10pO3Q9dm9pZCAwO2JyZWFrO2Nhc2UgOTM6ci5zaGlmdCgpO2JyZWFrO2Nhc2UgMTAyOnc9clswXTt3W3R8fHcubGVuZ3RoXT1mYWxzZTt0PXZvaWQgMDticmVhaztjYXNlIDExMDp3PXJbMF07d1t0fHx3Lmxlbmd0aF09bnVsbDt0PXZvaWQgMDticmVhaztjYXNlIDExNjp3PXJbMF07d1t0fHx3Lmxlbmd0aF09dHJ1ZTt0PXZvaWQgMDticmVhaztjYXNlIDEyMzp3PXJbMF07ci51bnNoaWZ0KHdbdHx8dy5sZW5ndGhdPXt9KTt0PXZvaWQgMDticmVhaztjYXNlIDEyNTpyLnNoaWZ0KCk7YnJlYWt9fWlmKGwpe2lmKHIubGVuZ3RoIT09MSl7dGhyb3cgbmV3IEVycm9yKCl9eD14WzBdfWVsc2V7aWYoci5sZW5ndGgpe3Rocm93IG5ldyBFcnJvcigpfX1pZihxKXt2YXIgcz1mdW5jdGlvbihDLEIpe3ZhciBEPUNbQl07aWYoRCYmdHlwZW9mIEQ9PT1cIm9iamVjdFwiKXt2YXIgbj1udWxsO2Zvcih2YXIgeiBpbiBEKXtpZihiLmNhbGwoRCx6KSYmRCE9PUMpe3ZhciB5PXMoRCx6KTtpZih5IT09dm9pZCAwKXtEW3pdPXl9ZWxzZXtpZighbil7bj1bXX1uLnB1c2goeil9fX1pZihuKXtmb3IodmFyIEE9bi5sZW5ndGg7LS1BPj0wOyl7ZGVsZXRlIERbbltBXV19fX1yZXR1cm4gcS5jYWxsKEMsQixEKX07eD1zKHtcIlwiOnh9LFwiXCIpfXJldHVybiB4fX0pKCk7XG5pZih0eXBlb2YgS0pVUj09XCJ1bmRlZmluZWRcInx8IUtKVVIpe0tKVVI9e319aWYodHlwZW9mIEtKVVIuYXNuMT09XCJ1bmRlZmluZWRcInx8IUtKVVIuYXNuMSl7S0pVUi5hc24xPXt9fUtKVVIuYXNuMS5BU04xVXRpbD1uZXcgZnVuY3Rpb24oKXt0aGlzLmludGVnZXJUb0J5dGVIZXg9ZnVuY3Rpb24oYSl7dmFyIGI9YS50b1N0cmluZygxNik7aWYoKGIubGVuZ3RoJTIpPT0xKXtiPVwiMFwiK2J9cmV0dXJuIGJ9O3RoaXMuYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXg9ZnVuY3Rpb24oail7dmFyIGY9ai50b1N0cmluZygxNik7aWYoZi5zdWJzdHIoMCwxKSE9XCItXCIpe2lmKGYubGVuZ3RoJTI9PTEpe2Y9XCIwXCIrZn1lbHNle2lmKCFmLm1hdGNoKC9eWzAtN10vKSl7Zj1cIjAwXCIrZn19fWVsc2V7dmFyIGE9Zi5zdWJzdHIoMSk7dmFyIGU9YS5sZW5ndGg7aWYoZSUyPT0xKXtlKz0xfWVsc2V7aWYoIWYubWF0Y2goL15bMC03XS8pKXtlKz0yfX12YXIgZz1cIlwiO2Zvcih2YXIgZD0wO2Q8ZTtkKyspe2crPVwiZlwifXZhciBjPW5ldyBCaWdJbnRlZ2VyKGcsMTYpO3ZhciBiPWMueG9yKGopLmFkZChCaWdJbnRlZ2VyLk9ORSk7Zj1iLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eLS8sXCJcIil9cmV0dXJuIGZ9O3RoaXMuZ2V0UEVNU3RyaW5nRnJvbUhleD1mdW5jdGlvbihhLGIpe3JldHVybiBoZXh0b3BlbShhLGIpfTt0aGlzLm5ld09iamVjdD1mdW5jdGlvbihrKXt2YXIgRD1LSlVSLG49RC5hc24xLHo9bi5ERVJCb29sZWFuLGU9bi5ERVJJbnRlZ2VyLHM9bi5ERVJCaXRTdHJpbmcsaD1uLkRFUk9jdGV0U3RyaW5nLHY9bi5ERVJOdWxsLHc9bi5ERVJPYmplY3RJZGVudGlmaWVyLGw9bi5ERVJFbnVtZXJhdGVkLGc9bi5ERVJVVEY4U3RyaW5nLGY9bi5ERVJOdW1lcmljU3RyaW5nLHk9bi5ERVJQcmludGFibGVTdHJpbmcsdT1uLkRFUlRlbGV0ZXhTdHJpbmcscD1uLkRFUklBNVN0cmluZyxDPW4uREVSVVRDVGltZSxqPW4uREVSR2VuZXJhbGl6ZWRUaW1lLG09bi5ERVJTZXF1ZW5jZSxjPW4uREVSU2V0LHI9bi5ERVJUYWdnZWRPYmplY3Qsbz1uLkFTTjFVdGlsLm5ld09iamVjdDt2YXIgdD1PYmplY3Qua2V5cyhrKTtpZih0Lmxlbmd0aCE9MSl7dGhyb3dcImtleSBvZiBwYXJhbSBzaGFsbCBiZSBvbmx5IG9uZS5cIn12YXIgRj10WzBdO2lmKFwiOmJvb2w6aW50OmJpdHN0cjpvY3RzdHI6bnVsbDpvaWQ6ZW51bTp1dGY4c3RyOm51bXN0cjpwcm5zdHI6dGVsc3RyOmlhNXN0cjp1dGN0aW1lOmdlbnRpbWU6c2VxOnNldDp0YWc6XCIuaW5kZXhPZihcIjpcIitGK1wiOlwiKT09LTEpe3Rocm93XCJ1bmRlZmluZWQga2V5OiBcIitGfWlmKEY9PVwiYm9vbFwiKXtyZXR1cm4gbmV3IHooa1tGXSl9aWYoRj09XCJpbnRcIil7cmV0dXJuIG5ldyBlKGtbRl0pfWlmKEY9PVwiYml0c3RyXCIpe3JldHVybiBuZXcgcyhrW0ZdKX1pZihGPT1cIm9jdHN0clwiKXtyZXR1cm4gbmV3IGgoa1tGXSl9aWYoRj09XCJudWxsXCIpe3JldHVybiBuZXcgdihrW0ZdKX1pZihGPT1cIm9pZFwiKXtyZXR1cm4gbmV3IHcoa1tGXSl9aWYoRj09XCJlbnVtXCIpe3JldHVybiBuZXcgbChrW0ZdKX1pZihGPT1cInV0ZjhzdHJcIil7cmV0dXJuIG5ldyBnKGtbRl0pfWlmKEY9PVwibnVtc3RyXCIpe3JldHVybiBuZXcgZihrW0ZdKX1pZihGPT1cInBybnN0clwiKXtyZXR1cm4gbmV3IHkoa1tGXSl9aWYoRj09XCJ0ZWxzdHJcIil7cmV0dXJuIG5ldyB1KGtbRl0pfWlmKEY9PVwiaWE1c3RyXCIpe3JldHVybiBuZXcgcChrW0ZdKX1pZihGPT1cInV0Y3RpbWVcIil7cmV0dXJuIG5ldyBDKGtbRl0pfWlmKEY9PVwiZ2VudGltZVwiKXtyZXR1cm4gbmV3IGooa1tGXSl9aWYoRj09XCJzZXFcIil7dmFyIGQ9a1tGXTt2YXIgRT1bXTtmb3IodmFyIHg9MDt4PGQubGVuZ3RoO3grKyl7dmFyIEI9byhkW3hdKTtFLnB1c2goQil9cmV0dXJuIG5ldyBtKHthcnJheTpFfSl9aWYoRj09XCJzZXRcIil7dmFyIGQ9a1tGXTt2YXIgRT1bXTtmb3IodmFyIHg9MDt4PGQubGVuZ3RoO3grKyl7dmFyIEI9byhkW3hdKTtFLnB1c2goQil9cmV0dXJuIG5ldyBjKHthcnJheTpFfSl9aWYoRj09XCJ0YWdcIil7dmFyIEE9a1tGXTtpZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoQSk9PT1cIltvYmplY3QgQXJyYXldXCImJkEubGVuZ3RoPT0zKXt2YXIgcT1vKEFbMl0pO3JldHVybiBuZXcgcih7dGFnOkFbMF0sZXhwbGljaXQ6QVsxXSxvYmo6cX0pfWVsc2V7dmFyIGI9e307aWYoQS5leHBsaWNpdCE9PXVuZGVmaW5lZCl7Yi5leHBsaWNpdD1BLmV4cGxpY2l0fWlmKEEudGFnIT09dW5kZWZpbmVkKXtiLnRhZz1BLnRhZ31pZihBLm9iaj09PXVuZGVmaW5lZCl7dGhyb3dcIm9iaiBzaGFsbCBiZSBzcGVjaWZpZWQgZm9yICd0YWcnLlwifWIub2JqPW8oQS5vYmopO3JldHVybiBuZXcgcihiKX19fTt0aGlzLmpzb25Ub0FTTjFIRVg9ZnVuY3Rpb24oYil7dmFyIGE9dGhpcy5uZXdPYmplY3QoYik7cmV0dXJuIGEuZ2V0RW5jb2RlZEhleCgpfX07S0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50PWZ1bmN0aW9uKGEpe3ZhciBqPVwiXCI7dmFyIGs9cGFyc2VJbnQoYS5zdWJzdHIoMCwyKSwxNik7dmFyIGQ9TWF0aC5mbG9vcihrLzQwKTt2YXIgYz1rJTQwO3ZhciBqPWQrXCIuXCIrYzt2YXIgZT1cIlwiO2Zvcih2YXIgZj0yO2Y8YS5sZW5ndGg7Zis9Mil7dmFyIGc9cGFyc2VJbnQoYS5zdWJzdHIoZiwyKSwxNik7dmFyIGg9KFwiMDAwMDAwMDBcIitnLnRvU3RyaW5nKDIpKS5zbGljZSgtOCk7ZT1lK2guc3Vic3RyKDEsNyk7aWYoaC5zdWJzdHIoMCwxKT09XCIwXCIpe3ZhciBiPW5ldyBCaWdJbnRlZ2VyKGUsMik7aj1qK1wiLlwiK2IudG9TdHJpbmcoMTApO2U9XCJcIn19cmV0dXJuIGp9O0tKVVIuYXNuMS5BU04xVXRpbC5vaWRJbnRUb0hleD1mdW5jdGlvbihmKXt2YXIgZT1mdW5jdGlvbihhKXt2YXIgaz1hLnRvU3RyaW5nKDE2KTtpZihrLmxlbmd0aD09MSl7az1cIjBcIitrfXJldHVybiBrfTt2YXIgZD1mdW5jdGlvbihvKXt2YXIgbj1cIlwiO3ZhciBrPW5ldyBCaWdJbnRlZ2VyKG8sMTApO3ZhciBhPWsudG9TdHJpbmcoMik7dmFyIGw9Ny1hLmxlbmd0aCU3O2lmKGw9PTcpe2w9MH12YXIgcT1cIlwiO2Zvcih2YXIgbT0wO208bDttKyspe3ErPVwiMFwifWE9cSthO2Zvcih2YXIgbT0wO208YS5sZW5ndGgtMTttKz03KXt2YXIgcD1hLnN1YnN0cihtLDcpO2lmKG0hPWEubGVuZ3RoLTcpe3A9XCIxXCIrcH1uKz1lKHBhcnNlSW50KHAsMikpfXJldHVybiBufTtpZighZi5tYXRjaCgvXlswLTkuXSskLykpe3Rocm93XCJtYWxmb3JtZWQgb2lkIHN0cmluZzogXCIrZn12YXIgZz1cIlwiO3ZhciBiPWYuc3BsaXQoXCIuXCIpO3ZhciBqPXBhcnNlSW50KGJbMF0pKjQwK3BhcnNlSW50KGJbMV0pO2crPWUoaik7Yi5zcGxpY2UoMCwyKTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl7Zys9ZChiW2NdKX1yZXR1cm4gZ307S0pVUi5hc24xLkFTTjFPYmplY3Q9ZnVuY3Rpb24oKXt2YXIgYz10cnVlO3ZhciBiPW51bGw7dmFyIGQ9XCIwMFwiO3ZhciBlPVwiMDBcIjt2YXIgYT1cIlwiO3RoaXMuZ2V0TGVuZ3RoSGV4RnJvbVZhbHVlPWZ1bmN0aW9uKCl7aWYodHlwZW9mIHRoaXMuaFY9PVwidW5kZWZpbmVkXCJ8fHRoaXMuaFY9PW51bGwpe3Rocm93XCJ0aGlzLmhWIGlzIG51bGwgb3IgdW5kZWZpbmVkLlwifWlmKHRoaXMuaFYubGVuZ3RoJTI9PTEpe3Rocm93XCJ2YWx1ZSBoZXggbXVzdCBiZSBldmVuIGxlbmd0aDogbj1cIithLmxlbmd0aCtcIix2PVwiK3RoaXMuaFZ9dmFyIGk9dGhpcy5oVi5sZW5ndGgvMjt2YXIgaD1pLnRvU3RyaW5nKDE2KTtpZihoLmxlbmd0aCUyPT0xKXtoPVwiMFwiK2h9aWYoaTwxMjgpe3JldHVybiBofWVsc2V7dmFyIGc9aC5sZW5ndGgvMjtpZihnPjE1KXt0aHJvd1wiQVNOLjEgbGVuZ3RoIHRvbyBsb25nIHRvIHJlcHJlc2VudCBieSA4eDogbiA9IFwiK2kudG9TdHJpbmcoMTYpfXZhciBmPTEyOCtnO3JldHVybiBmLnRvU3RyaW5nKDE2KStofX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7aWYodGhpcy5oVExWPT1udWxsfHx0aGlzLmlzTW9kaWZpZWQpe3RoaXMuaFY9dGhpcy5nZXRGcmVzaFZhbHVlSGV4KCk7dGhpcy5oTD10aGlzLmdldExlbmd0aEhleEZyb21WYWx1ZSgpO3RoaXMuaFRMVj10aGlzLmhUK3RoaXMuaEwrdGhpcy5oVjt0aGlzLmlzTW9kaWZpZWQ9ZmFsc2V9cmV0dXJuIHRoaXMuaFRMVn07dGhpcy5nZXRWYWx1ZUhleD1mdW5jdGlvbigpe3RoaXMuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhWfTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm5cIlwifX07S0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGI9bnVsbDt2YXIgYT1udWxsO3RoaXMuZ2V0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc307dGhpcy5zZXRTdHJpbmc9ZnVuY3Rpb24oZCl7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5zPWQ7dGhpcy5oVj11dGY4dG9oZXgodGhpcy5zKS50b0xvd2VyQ2FzZSgpfTt0aGlzLnNldFN0cmluZ0hleD1mdW5jdGlvbihkKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLnM9bnVsbDt0aGlzLmhWPWR9O3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfTtpZih0eXBlb2YgYyE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGM9PVwic3RyaW5nXCIpe3RoaXMuc2V0U3RyaW5nKGMpfWVsc2V7aWYodHlwZW9mIGMuc3RyIT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldFN0cmluZyhjLnN0cil9ZWxzZXtpZih0eXBlb2YgYy5oZXghPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0U3RyaW5nSGV4KGMuaGV4KX19fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLkRFUkFic3RyYWN0VGltZT1mdW5jdGlvbihjKXtLSlVSLmFzbjEuREVSQWJzdHJhY3RUaW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYj1udWxsO3ZhciBhPW51bGw7dGhpcy5sb2NhbERhdGVUb1VUQz1mdW5jdGlvbihmKXt1dGM9Zi5nZXRUaW1lKCkrKGYuZ2V0VGltZXpvbmVPZmZzZXQoKSo2MDAwMCk7dmFyIGU9bmV3IERhdGUodXRjKTtyZXR1cm4gZX07dGhpcy5mb3JtYXREYXRlPWZ1bmN0aW9uKG0sbyxlKXt2YXIgZz10aGlzLnplcm9QYWRkaW5nO3ZhciBuPXRoaXMubG9jYWxEYXRlVG9VVEMobSk7dmFyIHA9U3RyaW5nKG4uZ2V0RnVsbFllYXIoKSk7aWYobz09XCJ1dGNcIil7cD1wLnN1YnN0cigyLDIpfXZhciBsPWcoU3RyaW5nKG4uZ2V0TW9udGgoKSsxKSwyKTt2YXIgcT1nKFN0cmluZyhuLmdldERhdGUoKSksMik7dmFyIGg9ZyhTdHJpbmcobi5nZXRIb3VycygpKSwyKTt2YXIgaT1nKFN0cmluZyhuLmdldE1pbnV0ZXMoKSksMik7dmFyIGo9ZyhTdHJpbmcobi5nZXRTZWNvbmRzKCkpLDIpO3ZhciByPXArbCtxK2graStqO2lmKGU9PT10cnVlKXt2YXIgZj1uLmdldE1pbGxpc2Vjb25kcygpO2lmKGYhPTApe3ZhciBrPWcoU3RyaW5nKGYpLDMpO2s9ay5yZXBsYWNlKC9bMF0rJC8sXCJcIik7cj1yK1wiLlwiK2t9fXJldHVybiByK1wiWlwifTt0aGlzLnplcm9QYWRkaW5nPWZ1bmN0aW9uKGUsZCl7aWYoZS5sZW5ndGg+PWQpe3JldHVybiBlfXJldHVybiBuZXcgQXJyYXkoZC1lLmxlbmd0aCsxKS5qb2luKFwiMFwiKStlfTt0aGlzLmdldFN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN9O3RoaXMuc2V0U3RyaW5nPWZ1bmN0aW9uKGQpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMucz1kO3RoaXMuaFY9c3RvaGV4KGQpfTt0aGlzLnNldEJ5RGF0ZVZhbHVlPWZ1bmN0aW9uKGgsaixlLGQsZixnKXt2YXIgaT1uZXcgRGF0ZShEYXRlLlVUQyhoLGotMSxlLGQsZixnLDApKTt0aGlzLnNldEJ5RGF0ZShpKX07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSQWJzdHJhY3RUaW1lLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkPWZ1bmN0aW9uKGIpe0tKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9bnVsbDt0aGlzLnNldEJ5QVNOMU9iamVjdEFycmF5PWZ1bmN0aW9uKGMpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMuYXNuMUFycmF5PWN9O3RoaXMuYXBwZW5kQVNOMU9iamVjdD1mdW5jdGlvbihjKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmFzbjFBcnJheS5wdXNoKGMpfTt0aGlzLmFzbjFBcnJheT1uZXcgQXJyYXkoKTtpZih0eXBlb2YgYiE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGIuYXJyYXkhPVwidW5kZWZpbmVkXCIpe3RoaXMuYXNuMUFycmF5PWIuYXJyYXl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLkRFUkJvb2xlYW49ZnVuY3Rpb24oKXtLSlVSLmFzbjEuREVSQm9vbGVhbi5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5oVD1cIjAxXCI7dGhpcy5oVExWPVwiMDEwMWZmXCJ9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJCb29sZWFuLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSSW50ZWdlcj1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSSW50ZWdlci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5oVD1cIjAyXCI7dGhpcy5zZXRCeUJpZ0ludGVnZXI9ZnVuY3Rpb24oYil7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5oVj1LSlVSLmFzbjEuQVNOMVV0aWwuYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXgoYil9O3RoaXMuc2V0QnlJbnRlZ2VyPWZ1bmN0aW9uKGMpe3ZhciBiPW5ldyBCaWdJbnRlZ2VyKFN0cmluZyhjKSwxMCk7dGhpcy5zZXRCeUJpZ0ludGVnZXIoYil9O3RoaXMuc2V0VmFsdWVIZXg9ZnVuY3Rpb24oYil7dGhpcy5oVj1ifTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn07aWYodHlwZW9mIGEhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBhLmJpZ2ludCE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeUJpZ0ludGVnZXIoYS5iaWdpbnQpfWVsc2V7aWYodHlwZW9mIGFbXCJpbnRcIl0hPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0QnlJbnRlZ2VyKGFbXCJpbnRcIl0pfWVsc2V7aWYodHlwZW9mIGE9PVwibnVtYmVyXCIpe3RoaXMuc2V0QnlJbnRlZ2VyKGEpfWVsc2V7aWYodHlwZW9mIGEuaGV4IT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldFZhbHVlSGV4KGEuaGV4KX19fX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSSW50ZWdlcixLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLkRFUkJpdFN0cmluZz1mdW5jdGlvbihiKXtpZihiIT09dW5kZWZpbmVkJiZ0eXBlb2YgYi5vYmohPT1cInVuZGVmaW5lZFwiKXt2YXIgYT1LSlVSLmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0KGIub2JqKTtiLmhleD1cIjAwXCIrYS5nZXRFbmNvZGVkSGV4KCl9S0pVUi5hc24xLkRFUkJpdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5oVD1cIjAzXCI7dGhpcy5zZXRIZXhWYWx1ZUluY2x1ZGluZ1VudXNlZEJpdHM9ZnVuY3Rpb24oYyl7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5oVj1jfTt0aGlzLnNldFVudXNlZEJpdHNBbmRIZXhWYWx1ZT1mdW5jdGlvbihjLGUpe2lmKGM8MHx8NzxjKXt0aHJvd1widW51c2VkIGJpdHMgc2hhbGwgYmUgZnJvbSAwIHRvIDc6IHUgPSBcIitjfXZhciBkPVwiMFwiK2M7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5oVj1kK2V9O3RoaXMuc2V0QnlCaW5hcnlTdHJpbmc9ZnVuY3Rpb24oZSl7ZT1lLnJlcGxhY2UoLzArJC8sXCJcIik7dmFyIGY9OC1lLmxlbmd0aCU4O2lmKGY9PTgpe2Y9MH1mb3IodmFyIGc9MDtnPD1mO2crKyl7ZSs9XCIwXCJ9dmFyIGo9XCJcIjtmb3IodmFyIGc9MDtnPGUubGVuZ3RoLTE7Zys9OCl7dmFyIGQ9ZS5zdWJzdHIoZyw4KTt2YXIgYz1wYXJzZUludChkLDIpLnRvU3RyaW5nKDE2KTtpZihjLmxlbmd0aD09MSl7Yz1cIjBcIitjfWorPWN9dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5oVj1cIjBcIitmK2p9O3RoaXMuc2V0QnlCb29sZWFuQXJyYXk9ZnVuY3Rpb24oZSl7dmFyIGQ9XCJcIjtmb3IodmFyIGM9MDtjPGUubGVuZ3RoO2MrKyl7aWYoZVtjXT09dHJ1ZSl7ZCs9XCIxXCJ9ZWxzZXtkKz1cIjBcIn19dGhpcy5zZXRCeUJpbmFyeVN0cmluZyhkKX07dGhpcy5uZXdGYWxzZUFycmF5PWZ1bmN0aW9uKGUpe3ZhciBjPW5ldyBBcnJheShlKTtmb3IodmFyIGQ9MDtkPGU7ZCsrKXtjW2RdPWZhbHNlfXJldHVybiBjfTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn07aWYodHlwZW9mIGIhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBiPT1cInN0cmluZ1wiJiZiLnRvTG93ZXJDYXNlKCkubWF0Y2goL15bMC05YS1mXSskLykpe3RoaXMuc2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzKGIpfWVsc2V7aWYodHlwZW9mIGIuaGV4IT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldEhleFZhbHVlSW5jbHVkaW5nVW51c2VkQml0cyhiLmhleCl9ZWxzZXtpZih0eXBlb2YgYi5iaW4hPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0QnlCaW5hcnlTdHJpbmcoYi5iaW4pfWVsc2V7aWYodHlwZW9mIGIuYXJyYXkhPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0QnlCb29sZWFuQXJyYXkoYi5hcnJheSl9fX19fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkJpdFN0cmluZyxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nPWZ1bmN0aW9uKGIpe2lmKGIhPT11bmRlZmluZWQmJnR5cGVvZiBiLm9iaiE9PVwidW5kZWZpbmVkXCIpe3ZhciBhPUtKVVIuYXNuMS5BU04xVXRpbC5uZXdPYmplY3QoYi5vYmopO2IuaGV4PWEuZ2V0RW5jb2RlZEhleCgpfUtKVVIuYXNuMS5ERVJPY3RldFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxiKTt0aGlzLmhUPVwiMDRcIn07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7S0pVUi5hc24xLkRFUk51bGw9ZnVuY3Rpb24oKXtLSlVSLmFzbjEuREVSTnVsbC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5oVD1cIjA1XCI7dGhpcy5oVExWPVwiMDUwMFwifTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSTnVsbCxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXI9ZnVuY3Rpb24oYyl7dmFyIGI9ZnVuY3Rpb24oZCl7dmFyIGU9ZC50b1N0cmluZygxNik7aWYoZS5sZW5ndGg9PTEpe2U9XCIwXCIrZX1yZXR1cm4gZX07dmFyIGE9ZnVuY3Rpb24oayl7dmFyIGo9XCJcIjt2YXIgZT1uZXcgQmlnSW50ZWdlcihrLDEwKTt2YXIgZD1lLnRvU3RyaW5nKDIpO3ZhciBmPTctZC5sZW5ndGglNztpZihmPT03KXtmPTB9dmFyIG09XCJcIjtmb3IodmFyIGc9MDtnPGY7ZysrKXttKz1cIjBcIn1kPW0rZDtmb3IodmFyIGc9MDtnPGQubGVuZ3RoLTE7Zys9Nyl7dmFyIGw9ZC5zdWJzdHIoZyw3KTtpZihnIT1kLmxlbmd0aC03KXtsPVwiMVwiK2x9ais9YihwYXJzZUludChsLDIpKX1yZXR1cm4gan07S0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuaFQ9XCIwNlwiO3RoaXMuc2V0VmFsdWVIZXg9ZnVuY3Rpb24oZCl7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5zPW51bGw7dGhpcy5oVj1kfTt0aGlzLnNldFZhbHVlT2lkU3RyaW5nPWZ1bmN0aW9uKGYpe2lmKCFmLm1hdGNoKC9eWzAtOS5dKyQvKSl7dGhyb3dcIm1hbGZvcm1lZCBvaWQgc3RyaW5nOiBcIitmfXZhciBnPVwiXCI7dmFyIGQ9Zi5zcGxpdChcIi5cIik7dmFyIGo9cGFyc2VJbnQoZFswXSkqNDArcGFyc2VJbnQoZFsxXSk7Zys9YihqKTtkLnNwbGljZSgwLDIpO2Zvcih2YXIgZT0wO2U8ZC5sZW5ndGg7ZSsrKXtnKz1hKGRbZV0pfXRoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMucz1udWxsO3RoaXMuaFY9Z307dGhpcy5zZXRWYWx1ZU5hbWU9ZnVuY3Rpb24oZSl7dmFyIGQ9S0pVUi5hc24xLng1MDkuT0lELm5hbWUyb2lkKGUpO2lmKGQhPT1cIlwiKXt0aGlzLnNldFZhbHVlT2lkU3RyaW5nKGQpfWVsc2V7dGhyb3dcIkRFUk9iamVjdElkZW50aWZpZXIgb2lkTmFtZSB1bmRlZmluZWQ6IFwiK2V9fTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn07aWYoYyE9PXVuZGVmaW5lZCl7aWYodHlwZW9mIGM9PT1cInN0cmluZ1wiKXtpZihjLm1hdGNoKC9eWzAtMl0uWzAtOS5dKyQvKSl7dGhpcy5zZXRWYWx1ZU9pZFN0cmluZyhjKX1lbHNle3RoaXMuc2V0VmFsdWVOYW1lKGMpfX1lbHNle2lmKGMub2lkIT09dW5kZWZpbmVkKXt0aGlzLnNldFZhbHVlT2lkU3RyaW5nKGMub2lkKX1lbHNle2lmKGMuaGV4IT09dW5kZWZpbmVkKXt0aGlzLnNldFZhbHVlSGV4KGMuaGV4KX1lbHNle2lmKGMubmFtZSE9PXVuZGVmaW5lZCl7dGhpcy5zZXRWYWx1ZU5hbWUoYy5uYW1lKX19fX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVST2JqZWN0SWRlbnRpZmllcixLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLkRFUkVudW1lcmF0ZWQ9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUkVudW1lcmF0ZWQuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuaFQ9XCIwYVwiO3RoaXMuc2V0QnlCaWdJbnRlZ2VyPWZ1bmN0aW9uKGIpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMuaFY9S0pVUi5hc24xLkFTTjFVdGlsLmJpZ0ludFRvTWluVHdvc0NvbXBsZW1lbnRzSGV4KGIpfTt0aGlzLnNldEJ5SW50ZWdlcj1mdW5jdGlvbihjKXt2YXIgYj1uZXcgQmlnSW50ZWdlcihTdHJpbmcoYyksMTApO3RoaXMuc2V0QnlCaWdJbnRlZ2VyKGIpfTt0aGlzLnNldFZhbHVlSGV4PWZ1bmN0aW9uKGIpe3RoaXMuaFY9Yn07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9O2lmKHR5cGVvZiBhIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYVtcImludFwiXSE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeUludGVnZXIoYVtcImludFwiXSl9ZWxzZXtpZih0eXBlb2YgYT09XCJudW1iZXJcIil7dGhpcy5zZXRCeUludGVnZXIoYSl9ZWxzZXtpZih0eXBlb2YgYS5oZXghPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0VmFsdWVIZXgoYS5oZXgpfX19fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkVudW1lcmF0ZWQsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5ERVJVVEY4U3RyaW5nPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJVVEY4U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIwY1wifTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSVVRGOFN0cmluZyxLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpO0tKVVIuYXNuMS5ERVJOdW1lcmljU3RyaW5nPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJOdW1lcmljU3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIxMlwifTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSTnVtZXJpY1N0cmluZyxLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpO0tKVVIuYXNuMS5ERVJQcmludGFibGVTdHJpbmc9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUlByaW50YWJsZVN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMTNcIn07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlByaW50YWJsZVN0cmluZyxLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpO0tKVVIuYXNuMS5ERVJUZWxldGV4U3RyaW5nPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJUZWxldGV4U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIxNFwifTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSVGVsZXRleFN0cmluZyxLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpO0tKVVIuYXNuMS5ERVJJQTVTdHJpbmc9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUklBNVN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMTZcIn07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUklBNVN0cmluZyxLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpO0tKVVIuYXNuMS5ERVJVVENUaW1lPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJVVENUaW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIxN1wiO3RoaXMuc2V0QnlEYXRlPWZ1bmN0aW9uKGIpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMuZGF0ZT1iO3RoaXMucz10aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlLFwidXRjXCIpO3RoaXMuaFY9c3RvaGV4KHRoaXMucyl9O3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe2lmKHR5cGVvZiB0aGlzLmRhdGU9PVwidW5kZWZpbmVkXCImJnR5cGVvZiB0aGlzLnM9PVwidW5kZWZpbmVkXCIpe3RoaXMuZGF0ZT1uZXcgRGF0ZSgpO3RoaXMucz10aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlLFwidXRjXCIpO3RoaXMuaFY9c3RvaGV4KHRoaXMucyl9cmV0dXJuIHRoaXMuaFZ9O2lmKGEhPT11bmRlZmluZWQpe2lmKGEuc3RyIT09dW5kZWZpbmVkKXt0aGlzLnNldFN0cmluZyhhLnN0cil9ZWxzZXtpZih0eXBlb2YgYT09XCJzdHJpbmdcIiYmYS5tYXRjaCgvXlswLTldezEyfVokLykpe3RoaXMuc2V0U3RyaW5nKGEpfWVsc2V7aWYoYS5oZXghPT11bmRlZmluZWQpe3RoaXMuc2V0U3RyaW5nSGV4KGEuaGV4KX1lbHNle2lmKGEuZGF0ZSE9PXVuZGVmaW5lZCl7dGhpcy5zZXRCeURhdGUoYS5kYXRlKX19fX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSVVRDVGltZSxLSlVSLmFzbjEuREVSQWJzdHJhY3RUaW1lKTtLSlVSLmFzbjEuREVSR2VuZXJhbGl6ZWRUaW1lPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJHZW5lcmFsaXplZFRpbWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjE4XCI7dGhpcy53aXRoTWlsbGlzPWZhbHNlO3RoaXMuc2V0QnlEYXRlPWZ1bmN0aW9uKGIpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMuZGF0ZT1iO3RoaXMucz10aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlLFwiZ2VuXCIsdGhpcy53aXRoTWlsbGlzKTt0aGlzLmhWPXN0b2hleCh0aGlzLnMpfTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtpZih0aGlzLmRhdGU9PT11bmRlZmluZWQmJnRoaXMucz09PXVuZGVmaW5lZCl7dGhpcy5kYXRlPW5ldyBEYXRlKCk7dGhpcy5zPXRoaXMuZm9ybWF0RGF0ZSh0aGlzLmRhdGUsXCJnZW5cIix0aGlzLndpdGhNaWxsaXMpO3RoaXMuaFY9c3RvaGV4KHRoaXMucyl9cmV0dXJuIHRoaXMuaFZ9O2lmKGEhPT11bmRlZmluZWQpe2lmKGEuc3RyIT09dW5kZWZpbmVkKXt0aGlzLnNldFN0cmluZyhhLnN0cil9ZWxzZXtpZih0eXBlb2YgYT09XCJzdHJpbmdcIiYmYS5tYXRjaCgvXlswLTldezE0fVokLykpe3RoaXMuc2V0U3RyaW5nKGEpfWVsc2V7aWYoYS5oZXghPT11bmRlZmluZWQpe3RoaXMuc2V0U3RyaW5nSGV4KGEuaGV4KX1lbHNle2lmKGEuZGF0ZSE9PXVuZGVmaW5lZCl7dGhpcy5zZXRCeURhdGUoYS5kYXRlKX19fX1pZihhLm1pbGxpcz09PXRydWUpe3RoaXMud2l0aE1pbGxpcz10cnVlfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJHZW5lcmFsaXplZFRpbWUsS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZSk7S0pVUi5hc24xLkRFUlNlcXVlbmNlPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJTZXF1ZW5jZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMzBcIjt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXt2YXIgYz1cIlwiO2Zvcih2YXIgYj0wO2I8dGhpcy5hc24xQXJyYXkubGVuZ3RoO2IrKyl7dmFyIGQ9dGhpcy5hc24xQXJyYXlbYl07Yys9ZC5nZXRFbmNvZGVkSGV4KCl9dGhpcy5oVj1jO3JldHVybiB0aGlzLmhWfX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlNlcXVlbmNlLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cnVjdHVyZWQpO0tKVVIuYXNuMS5ERVJTZXQ9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUlNldC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMzFcIjt0aGlzLnNvcnRGbGFnPXRydWU7dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7dmFyIGI9bmV3IEFycmF5KCk7Zm9yKHZhciBjPTA7Yzx0aGlzLmFzbjFBcnJheS5sZW5ndGg7YysrKXt2YXIgZD10aGlzLmFzbjFBcnJheVtjXTtiLnB1c2goZC5nZXRFbmNvZGVkSGV4KCkpfWlmKHRoaXMuc29ydEZsYWc9PXRydWUpe2Iuc29ydCgpfXRoaXMuaFY9Yi5qb2luKFwiXCIpO3JldHVybiB0aGlzLmhWfTtpZih0eXBlb2YgYSE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGEuc29ydGZsYWchPVwidW5kZWZpbmVkXCImJmEuc29ydGZsYWc9PWZhbHNlKXt0aGlzLnNvcnRGbGFnPWZhbHNlfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJTZXQsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCk7S0pVUi5hc24xLkRFUlRhZ2dlZE9iamVjdD1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSVGFnZ2VkT2JqZWN0LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmhUPVwiYTBcIjt0aGlzLmhWPVwiXCI7dGhpcy5pc0V4cGxpY2l0PXRydWU7dGhpcy5hc24xT2JqZWN0PW51bGw7dGhpcy5zZXRBU04xT2JqZWN0PWZ1bmN0aW9uKGIsYyxkKXt0aGlzLmhUPWM7dGhpcy5pc0V4cGxpY2l0PWI7dGhpcy5hc24xT2JqZWN0PWQ7aWYodGhpcy5pc0V4cGxpY2l0KXt0aGlzLmhWPXRoaXMuYXNuMU9iamVjdC5nZXRFbmNvZGVkSGV4KCk7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWV9ZWxzZXt0aGlzLmhWPW51bGw7dGhpcy5oVExWPWQuZ2V0RW5jb2RlZEhleCgpO3RoaXMuaFRMVj10aGlzLmhUTFYucmVwbGFjZSgvXi4uLyxjKTt0aGlzLmlzTW9kaWZpZWQ9ZmFsc2V9fTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn07aWYodHlwZW9mIGEhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBhLnRhZyE9XCJ1bmRlZmluZWRcIil7dGhpcy5oVD1hLnRhZ31pZih0eXBlb2YgYS5leHBsaWNpdCE9XCJ1bmRlZmluZWRcIil7dGhpcy5pc0V4cGxpY2l0PWEuZXhwbGljaXR9aWYodHlwZW9mIGEub2JqIT1cInVuZGVmaW5lZFwiKXt0aGlzLmFzbjFPYmplY3Q9YS5vYmo7dGhpcy5zZXRBU04xT2JqZWN0KHRoaXMuaXNFeHBsaWNpdCx0aGlzLmhULHRoaXMuYXNuMU9iamVjdCl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlRhZ2dlZE9iamVjdCxLSlVSLmFzbjEuQVNOMU9iamVjdCk7XG52YXIgQVNOMUhFWD1uZXcgZnVuY3Rpb24oKXt9O0FTTjFIRVguZ2V0TGJsZW49ZnVuY3Rpb24oYyxhKXtpZihjLnN1YnN0cihhKzIsMSkhPVwiOFwiKXtyZXR1cm4gMX12YXIgYj1wYXJzZUludChjLnN1YnN0cihhKzMsMSkpO2lmKGI9PTApe3JldHVybiAtMX1pZigwPGImJmI8MTApe3JldHVybiBiKzF9cmV0dXJuIC0yfTtBU04xSEVYLmdldEw9ZnVuY3Rpb24oYyxiKXt2YXIgYT1BU04xSEVYLmdldExibGVuKGMsYik7aWYoYTwxKXtyZXR1cm5cIlwifXJldHVybiBjLnN1YnN0cihiKzIsYSoyKX07QVNOMUhFWC5nZXRWYmxlbj1mdW5jdGlvbihkLGEpe3ZhciBjLGI7Yz1BU04xSEVYLmdldEwoZCxhKTtpZihjPT1cIlwiKXtyZXR1cm4gLTF9aWYoYy5zdWJzdHIoMCwxKT09PVwiOFwiKXtiPW5ldyBCaWdJbnRlZ2VyKGMuc3Vic3RyKDIpLDE2KX1lbHNle2I9bmV3IEJpZ0ludGVnZXIoYywxNil9cmV0dXJuIGIuaW50VmFsdWUoKX07QVNOMUhFWC5nZXRWaWR4PWZ1bmN0aW9uKGMsYil7dmFyIGE9QVNOMUhFWC5nZXRMYmxlbihjLGIpO2lmKGE8MCl7cmV0dXJuIGF9cmV0dXJuIGIrKGErMSkqMn07QVNOMUhFWC5nZXRWPWZ1bmN0aW9uKGQsYSl7dmFyIGM9QVNOMUhFWC5nZXRWaWR4KGQsYSk7dmFyIGI9QVNOMUhFWC5nZXRWYmxlbihkLGEpO3JldHVybiBkLnN1YnN0cihjLGIqMil9O0FTTjFIRVguZ2V0VExWPWZ1bmN0aW9uKGIsYSl7cmV0dXJuIGIuc3Vic3RyKGEsMikrQVNOMUhFWC5nZXRMKGIsYSkrQVNOMUhFWC5nZXRWKGIsYSl9O0FTTjFIRVguZ2V0TmV4dFNpYmxpbmdJZHg9ZnVuY3Rpb24oZCxhKXt2YXIgYz1BU04xSEVYLmdldFZpZHgoZCxhKTt2YXIgYj1BU04xSEVYLmdldFZibGVuKGQsYSk7cmV0dXJuIGMrYioyfTtBU04xSEVYLmdldENoaWxkSWR4PWZ1bmN0aW9uKGUsZil7dmFyIGo9QVNOMUhFWDt2YXIgZz1uZXcgQXJyYXkoKTt2YXIgaT1qLmdldFZpZHgoZSxmKTtpZihlLnN1YnN0cihmLDIpPT1cIjAzXCIpe2cucHVzaChpKzIpfWVsc2V7Zy5wdXNoKGkpfXZhciBsPWouZ2V0VmJsZW4oZSxmKTt2YXIgYz1pO3ZhciBkPTA7d2hpbGUoMSl7dmFyIGI9ai5nZXROZXh0U2libGluZ0lkeChlLGMpO2lmKGI9PW51bGx8fChiLWk+PShsKjIpKSl7YnJlYWt9aWYoZD49MjAwKXticmVha31nLnB1c2goYik7Yz1iO2QrK31yZXR1cm4gZ307QVNOMUhFWC5nZXROdGhDaGlsZElkeD1mdW5jdGlvbihkLGIsZSl7dmFyIGM9QVNOMUhFWC5nZXRDaGlsZElkeChkLGIpO3JldHVybiBjW2VdfTtBU04xSEVYLmdldElkeGJ5TGlzdD1mdW5jdGlvbihlLGQsYyxpKXt2YXIgZz1BU04xSEVYO3ZhciBmLGI7aWYoYy5sZW5ndGg9PTApe2lmKGkhPT11bmRlZmluZWQpe2lmKGUuc3Vic3RyKGQsMikhPT1pKXt0aHJvd1wiY2hlY2tpbmcgdGFnIGRvZXNuJ3QgbWF0Y2g6IFwiK2Uuc3Vic3RyKGQsMikrXCIhPVwiK2l9fXJldHVybiBkfWY9Yy5zaGlmdCgpO2I9Zy5nZXRDaGlsZElkeChlLGQpO3JldHVybiBnLmdldElkeGJ5TGlzdChlLGJbZl0sYyxpKX07QVNOMUhFWC5nZXRUTFZieUxpc3Q9ZnVuY3Rpb24oZCxjLGIsZil7dmFyIGU9QVNOMUhFWDt2YXIgYT1lLmdldElkeGJ5TGlzdChkLGMsYik7aWYoYT09PXVuZGVmaW5lZCl7dGhyb3dcImNhbid0IGZpbmQgbnRoTGlzdCBvYmplY3RcIn1pZihmIT09dW5kZWZpbmVkKXtpZihkLnN1YnN0cihhLDIpIT1mKXt0aHJvd1wiY2hlY2tpbmcgdGFnIGRvZXNuJ3QgbWF0Y2g6IFwiK2Quc3Vic3RyKGEsMikrXCIhPVwiK2Z9fXJldHVybiBlLmdldFRMVihkLGEpfTtBU04xSEVYLmdldFZieUxpc3Q9ZnVuY3Rpb24oZSxjLGIsZyxpKXt2YXIgZj1BU04xSEVYO3ZhciBhLGQ7YT1mLmdldElkeGJ5TGlzdChlLGMsYixnKTtpZihhPT09dW5kZWZpbmVkKXt0aHJvd1wiY2FuJ3QgZmluZCBudGhMaXN0IG9iamVjdFwifWQ9Zi5nZXRWKGUsYSk7aWYoaT09PXRydWUpe2Q9ZC5zdWJzdHIoMil9cmV0dXJuIGR9O0FTTjFIRVguaGV4dG9vaWRzdHI9ZnVuY3Rpb24oZSl7dmFyIGg9ZnVuY3Rpb24oYixhKXtpZihiLmxlbmd0aD49YSl7cmV0dXJuIGJ9cmV0dXJuIG5ldyBBcnJheShhLWIubGVuZ3RoKzEpLmpvaW4oXCIwXCIpK2J9O3ZhciBsPVtdO3ZhciBvPWUuc3Vic3RyKDAsMik7dmFyIGY9cGFyc2VJbnQobywxNik7bFswXT1uZXcgU3RyaW5nKE1hdGguZmxvb3IoZi80MCkpO2xbMV09bmV3IFN0cmluZyhmJTQwKTt2YXIgbT1lLnN1YnN0cigyKTt2YXIgaz1bXTtmb3IodmFyIGc9MDtnPG0ubGVuZ3RoLzI7ZysrKXtrLnB1c2gocGFyc2VJbnQobS5zdWJzdHIoZyoyLDIpLDE2KSl9dmFyIGo9W107dmFyIGQ9XCJcIjtmb3IodmFyIGc9MDtnPGsubGVuZ3RoO2crKyl7aWYoa1tnXSYxMjgpe2Q9ZCtoKChrW2ddJjEyNykudG9TdHJpbmcoMiksNyl9ZWxzZXtkPWQraCgoa1tnXSYxMjcpLnRvU3RyaW5nKDIpLDcpO2oucHVzaChuZXcgU3RyaW5nKHBhcnNlSW50KGQsMikpKTtkPVwiXCJ9fXZhciBuPWwuam9pbihcIi5cIik7aWYoai5sZW5ndGg+MCl7bj1uK1wiLlwiK2ouam9pbihcIi5cIil9cmV0dXJuIG59O0FTTjFIRVguZHVtcD1mdW5jdGlvbih0LGMsbCxnKXt2YXIgcD1BU04xSEVYO3ZhciBqPXAuZ2V0Vjt2YXIgeT1wLmR1bXA7dmFyIHc9cC5nZXRDaGlsZElkeDt2YXIgZT10O2lmKHQgaW5zdGFuY2VvZiBLSlVSLmFzbjEuQVNOMU9iamVjdCl7ZT10LmdldEVuY29kZWRIZXgoKX12YXIgcT1mdW5jdGlvbihBLGkpe2lmKEEubGVuZ3RoPD1pKjIpe3JldHVybiBBfWVsc2V7dmFyIHY9QS5zdWJzdHIoMCxpKStcIi4uKHRvdGFsIFwiK0EubGVuZ3RoLzIrXCJieXRlcykuLlwiK0Euc3Vic3RyKEEubGVuZ3RoLWksaSk7cmV0dXJuIHZ9fTtpZihjPT09dW5kZWZpbmVkKXtjPXtvbW1pdF9sb25nX29jdGV0OjMyfX1pZihsPT09dW5kZWZpbmVkKXtsPTB9aWYoZz09PXVuZGVmaW5lZCl7Zz1cIlwifXZhciB4PWMub21taXRfbG9uZ19vY3RldDtpZihlLnN1YnN0cihsLDIpPT1cIjAxXCIpe3ZhciBoPWooZSxsKTtpZihoPT1cIjAwXCIpe3JldHVybiBnK1wiQk9PTEVBTiBGQUxTRVxcblwifWVsc2V7cmV0dXJuIGcrXCJCT09MRUFOIFRSVUVcXG5cIn19aWYoZS5zdWJzdHIobCwyKT09XCIwMlwiKXt2YXIgaD1qKGUsbCk7cmV0dXJuIGcrXCJJTlRFR0VSIFwiK3EoaCx4KStcIlxcblwifWlmKGUuc3Vic3RyKGwsMik9PVwiMDNcIil7dmFyIGg9aihlLGwpO3JldHVybiBnK1wiQklUU1RSSU5HIFwiK3EoaCx4KStcIlxcblwifWlmKGUuc3Vic3RyKGwsMik9PVwiMDRcIil7dmFyIGg9aihlLGwpO2lmKHAuaXNBU04xSEVYKGgpKXt2YXIgaz1nK1wiT0NURVRTVFJJTkcsIGVuY2Fwc3VsYXRlc1xcblwiO2s9ayt5KGgsYywwLGcrXCIgIFwiKTtyZXR1cm4ga31lbHNle3JldHVybiBnK1wiT0NURVRTVFJJTkcgXCIrcShoLHgpK1wiXFxuXCJ9fWlmKGUuc3Vic3RyKGwsMik9PVwiMDVcIil7cmV0dXJuIGcrXCJOVUxMXFxuXCJ9aWYoZS5zdWJzdHIobCwyKT09XCIwNlwiKXt2YXIgbT1qKGUsbCk7dmFyIGE9S0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50KG0pO3ZhciBvPUtKVVIuYXNuMS54NTA5Lk9JRC5vaWQybmFtZShhKTt2YXIgYj1hLnJlcGxhY2UoL1xcLi9nLFwiIFwiKTtpZihvIT1cIlwiKXtyZXR1cm4gZytcIk9iamVjdElkZW50aWZpZXIgXCIrbytcIiAoXCIrYitcIilcXG5cIn1lbHNle3JldHVybiBnK1wiT2JqZWN0SWRlbnRpZmllciAoXCIrYitcIilcXG5cIn19aWYoZS5zdWJzdHIobCwyKT09XCIwY1wiKXtyZXR1cm4gZytcIlVURjhTdHJpbmcgJ1wiK2hleHRvdXRmOChqKGUsbCkpK1wiJ1xcblwifWlmKGUuc3Vic3RyKGwsMik9PVwiMTNcIil7cmV0dXJuIGcrXCJQcmludGFibGVTdHJpbmcgJ1wiK2hleHRvdXRmOChqKGUsbCkpK1wiJ1xcblwifWlmKGUuc3Vic3RyKGwsMik9PVwiMTRcIil7cmV0dXJuIGcrXCJUZWxldGV4U3RyaW5nICdcIitoZXh0b3V0ZjgoaihlLGwpKStcIidcXG5cIn1pZihlLnN1YnN0cihsLDIpPT1cIjE2XCIpe3JldHVybiBnK1wiSUE1U3RyaW5nICdcIitoZXh0b3V0ZjgoaihlLGwpKStcIidcXG5cIn1pZihlLnN1YnN0cihsLDIpPT1cIjE3XCIpe3JldHVybiBnK1wiVVRDVGltZSBcIitoZXh0b3V0ZjgoaihlLGwpKStcIlxcblwifWlmKGUuc3Vic3RyKGwsMik9PVwiMThcIil7cmV0dXJuIGcrXCJHZW5lcmFsaXplZFRpbWUgXCIraGV4dG91dGY4KGooZSxsKSkrXCJcXG5cIn1pZihlLnN1YnN0cihsLDIpPT1cIjMwXCIpe2lmKGUuc3Vic3RyKGwsNCk9PVwiMzAwMFwiKXtyZXR1cm4gZytcIlNFUVVFTkNFIHt9XFxuXCJ9dmFyIGs9ZytcIlNFUVVFTkNFXFxuXCI7dmFyIGQ9dyhlLGwpO3ZhciBmPWM7aWYoKGQubGVuZ3RoPT0yfHxkLmxlbmd0aD09MykmJmUuc3Vic3RyKGRbMF0sMik9PVwiMDZcIiYmZS5zdWJzdHIoZFtkLmxlbmd0aC0xXSwyKT09XCIwNFwiKXt2YXIgbz1wLm9pZG5hbWUoaihlLGRbMF0pKTt2YXIgcj1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGMpKTtyLng1MDlFeHROYW1lPW87Zj1yfWZvcih2YXIgdT0wO3U8ZC5sZW5ndGg7dSsrKXtrPWsreShlLGYsZFt1XSxnK1wiICBcIil9cmV0dXJuIGt9aWYoZS5zdWJzdHIobCwyKT09XCIzMVwiKXt2YXIgaz1nK1wiU0VUXFxuXCI7dmFyIGQ9dyhlLGwpO2Zvcih2YXIgdT0wO3U8ZC5sZW5ndGg7dSsrKXtrPWsreShlLGMsZFt1XSxnK1wiICBcIil9cmV0dXJuIGt9dmFyIHo9cGFyc2VJbnQoZS5zdWJzdHIobCwyKSwxNik7aWYoKHomMTI4KSE9MCl7dmFyIG49eiYzMTtpZigoeiYzMikhPTApe3ZhciBrPWcrXCJbXCIrbitcIl1cXG5cIjt2YXIgZD13KGUsbCk7Zm9yKHZhciB1PTA7dTxkLmxlbmd0aDt1Kyspe2s9ayt5KGUsYyxkW3VdLGcrXCIgIFwiKX1yZXR1cm4ga31lbHNle3ZhciBoPWooZSxsKTtpZihoLnN1YnN0cigwLDgpPT1cIjY4NzQ3NDcwXCIpe2g9aGV4dG91dGY4KGgpfWlmKGMueDUwOUV4dE5hbWU9PT1cInN1YmplY3RBbHROYW1lXCImJm49PTIpe2g9aGV4dG91dGY4KGgpfXZhciBrPWcrXCJbXCIrbitcIl0gXCIraCtcIlxcblwiO3JldHVybiBrfX1yZXR1cm4gZytcIlVOS05PV04oXCIrZS5zdWJzdHIobCwyKStcIikgXCIraihlLGwpK1wiXFxuXCJ9O0FTTjFIRVguaXNBU04xSEVYPWZ1bmN0aW9uKGUpe3ZhciBkPUFTTjFIRVg7aWYoZS5sZW5ndGglMj09MSl7cmV0dXJuIGZhbHNlfXZhciBjPWQuZ2V0VmJsZW4oZSwwKTt2YXIgYj1lLnN1YnN0cigwLDIpO3ZhciBmPWQuZ2V0TChlLDApO3ZhciBhPWUubGVuZ3RoLWIubGVuZ3RoLWYubGVuZ3RoO2lmKGE9PWMqMil7cmV0dXJuIHRydWV9cmV0dXJuIGZhbHNlfTtBU04xSEVYLm9pZG5hbWU9ZnVuY3Rpb24oYSl7dmFyIGM9S0pVUi5hc24xO2lmKEtKVVIubGFuZy5TdHJpbmcuaXNIZXgoYSkpe2E9Yy5BU04xVXRpbC5vaWRIZXhUb0ludChhKX12YXIgYj1jLng1MDkuT0lELm9pZDJuYW1lKGEpO2lmKGI9PT1cIlwiKXtiPWF9cmV0dXJuIGJ9O1xuaWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmFzbjE9PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmFzbjEpe0tKVVIuYXNuMT17fX1pZih0eXBlb2YgS0pVUi5hc24xLng1MDk9PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmFzbjEueDUwOSl7S0pVUi5hc24xLng1MDk9e319S0pVUi5hc24xLng1MDkuQ2VydGlmaWNhdGU9ZnVuY3Rpb24oZSl7S0pVUi5hc24xLng1MDkuQ2VydGlmaWNhdGUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPW51bGwsaj1udWxsLGg9bnVsbCxrPW51bGwsaT1udWxsLGI9S0pVUixmPWIuY3J5cHRvLGc9Yi5hc24xLGQ9Zy5ERVJTZXF1ZW5jZSxjPWcuREVSQml0U3RyaW5nO3RoaXMuc2lnbj1mdW5jdGlvbigpe3RoaXMuYXNuMVNpZ25hdHVyZUFsZz10aGlzLmFzbjFUQlNDZXJ0LmFzbjFTaWduYXR1cmVBbGc7dmFyIG09bmV3IEtKVVIuY3J5cHRvLlNpZ25hdHVyZSh7YWxnOnRoaXMuYXNuMVNpZ25hdHVyZUFsZy5uYW1lQWxnfSk7bS5pbml0KHRoaXMucHJ2S2V5KTttLnVwZGF0ZUhleCh0aGlzLmFzbjFUQlNDZXJ0LmdldEVuY29kZWRIZXgoKSk7dGhpcy5oZXhTaWc9bS5zaWduKCk7dGhpcy5hc24xU2lnPW5ldyBjKHtoZXg6XCIwMFwiK3RoaXMuaGV4U2lnfSk7dmFyIGw9bmV3IGQoe2FycmF5Olt0aGlzLmFzbjFUQlNDZXJ0LHRoaXMuYXNuMVNpZ25hdHVyZUFsZyx0aGlzLmFzbjFTaWddfSk7dGhpcy5oVExWPWwuZ2V0RW5jb2RlZEhleCgpO3RoaXMuaXNNb2RpZmllZD1mYWxzZX07dGhpcy5zZXRTaWduYXR1cmVIZXg9ZnVuY3Rpb24obCl7dGhpcy5hc24xU2lnbmF0dXJlQWxnPXRoaXMuYXNuMVRCU0NlcnQuYXNuMVNpZ25hdHVyZUFsZzt0aGlzLmhleFNpZz1sO3RoaXMuYXNuMVNpZz1uZXcgYyh7aGV4OlwiMDBcIit0aGlzLmhleFNpZ30pO3ZhciBtPW5ldyBkKHthcnJheTpbdGhpcy5hc24xVEJTQ2VydCx0aGlzLmFzbjFTaWduYXR1cmVBbGcsdGhpcy5hc24xU2lnXX0pO3RoaXMuaFRMVj1tLmdldEVuY29kZWRIZXgoKTt0aGlzLmlzTW9kaWZpZWQ9ZmFsc2V9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMuaXNNb2RpZmllZD09ZmFsc2UmJnRoaXMuaFRMViE9bnVsbCl7cmV0dXJuIHRoaXMuaFRMVn10aHJvd1wibm90IHNpZ25lZCB5ZXRcIn07dGhpcy5nZXRQRU1TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgbD1oZXh0b2I2NG5sKHRoaXMuZ2V0RW5jb2RlZEhleCgpKTtyZXR1cm5cIi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLVxcclxcblwiK2wrXCJcXHJcXG4tLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tXFxyXFxuXCJ9O2lmKGUhPT11bmRlZmluZWQpe2lmKGUudGJzY2VydG9iaiE9PXVuZGVmaW5lZCl7dGhpcy5hc24xVEJTQ2VydD1lLnRic2NlcnRvYmp9aWYoZS5wcnZrZXlvYmohPT11bmRlZmluZWQpe3RoaXMucHJ2S2V5PWUucHJ2a2V5b2JqfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5LkNlcnRpZmljYXRlLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5UQlNDZXJ0aWZpY2F0ZT1mdW5jdGlvbihlKXtLSlVSLmFzbjEueDUwOS5UQlNDZXJ0aWZpY2F0ZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGI9S0pVUixpPWIuYXNuMSxmPWkuREVSU2VxdWVuY2UsaD1pLkRFUkludGVnZXIsYz1pLkRFUlRhZ2dlZE9iamVjdCxkPWkueDUwOSxnPWQuVGltZSxhPWQuWDUwME5hbWUsaj1kLlN1YmplY3RQdWJsaWNLZXlJbmZvO3RoaXMuX2luaXRpYWxpemU9ZnVuY3Rpb24oKXt0aGlzLmFzbjFBcnJheT1uZXcgQXJyYXkoKTt0aGlzLmFzbjFWZXJzaW9uPW5ldyBjKHtvYmo6bmV3IGgoe1wiaW50XCI6Mn0pfSk7dGhpcy5hc24xU2VyaWFsTnVtYmVyPW51bGw7dGhpcy5hc24xU2lnbmF0dXJlQWxnPW51bGw7dGhpcy5hc24xSXNzdWVyPW51bGw7dGhpcy5hc24xTm90QmVmb3JlPW51bGw7dGhpcy5hc24xTm90QWZ0ZXI9bnVsbDt0aGlzLmFzbjFTdWJqZWN0PW51bGw7dGhpcy5hc24xU3VialBLZXk9bnVsbDt0aGlzLmV4dGVuc2lvbnNBcnJheT1uZXcgQXJyYXkoKX07dGhpcy5zZXRTZXJpYWxOdW1iZXJCeVBhcmFtPWZ1bmN0aW9uKGspe3RoaXMuYXNuMVNlcmlhbE51bWJlcj1uZXcgaChrKX07dGhpcy5zZXRTaWduYXR1cmVBbGdCeVBhcmFtPWZ1bmN0aW9uKGspe3RoaXMuYXNuMVNpZ25hdHVyZUFsZz1uZXcgZC5BbGdvcml0aG1JZGVudGlmaWVyKGspfTt0aGlzLnNldElzc3VlckJ5UGFyYW09ZnVuY3Rpb24oayl7dGhpcy5hc24xSXNzdWVyPW5ldyBhKGspfTt0aGlzLnNldE5vdEJlZm9yZUJ5UGFyYW09ZnVuY3Rpb24oayl7dGhpcy5hc24xTm90QmVmb3JlPW5ldyBnKGspfTt0aGlzLnNldE5vdEFmdGVyQnlQYXJhbT1mdW5jdGlvbihrKXt0aGlzLmFzbjFOb3RBZnRlcj1uZXcgZyhrKX07dGhpcy5zZXRTdWJqZWN0QnlQYXJhbT1mdW5jdGlvbihrKXt0aGlzLmFzbjFTdWJqZWN0PW5ldyBhKGspfTt0aGlzLnNldFN1YmplY3RQdWJsaWNLZXk9ZnVuY3Rpb24oayl7dGhpcy5hc24xU3VialBLZXk9bmV3IGooayl9O3RoaXMuc2V0U3ViamVjdFB1YmxpY0tleUJ5R2V0S2V5PWZ1bmN0aW9uKGwpe3ZhciBrPUtFWVVUSUwuZ2V0S2V5KGwpO3RoaXMuYXNuMVN1YmpQS2V5PW5ldyBqKGspfTt0aGlzLmFwcGVuZEV4dGVuc2lvbj1mdW5jdGlvbihrKXt0aGlzLmV4dGVuc2lvbnNBcnJheS5wdXNoKGspfTt0aGlzLmFwcGVuZEV4dGVuc2lvbkJ5TmFtZT1mdW5jdGlvbihsLGspe0tKVVIuYXNuMS54NTA5LkV4dGVuc2lvbi5hcHBlbmRCeU5hbWVUb0FycmF5KGwsayx0aGlzLmV4dGVuc2lvbnNBcnJheSl9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMuYXNuMU5vdEJlZm9yZT09bnVsbHx8dGhpcy5hc24xTm90QWZ0ZXI9PW51bGwpe3Rocm93XCJub3RCZWZvcmUgYW5kL29yIG5vdEFmdGVyIG5vdCBzZXRcIn12YXIgbD1uZXcgZih7YXJyYXk6W3RoaXMuYXNuMU5vdEJlZm9yZSx0aGlzLmFzbjFOb3RBZnRlcl19KTt0aGlzLmFzbjFBcnJheT1uZXcgQXJyYXkoKTt0aGlzLmFzbjFBcnJheS5wdXNoKHRoaXMuYXNuMVZlcnNpb24pO3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xU2VyaWFsTnVtYmVyKTt0aGlzLmFzbjFBcnJheS5wdXNoKHRoaXMuYXNuMVNpZ25hdHVyZUFsZyk7dGhpcy5hc24xQXJyYXkucHVzaCh0aGlzLmFzbjFJc3N1ZXIpO3RoaXMuYXNuMUFycmF5LnB1c2gobCk7dGhpcy5hc24xQXJyYXkucHVzaCh0aGlzLmFzbjFTdWJqZWN0KTt0aGlzLmFzbjFBcnJheS5wdXNoKHRoaXMuYXNuMVN1YmpQS2V5KTtpZih0aGlzLmV4dGVuc2lvbnNBcnJheS5sZW5ndGg+MCl7dmFyIG09bmV3IGYoe2FycmF5OnRoaXMuZXh0ZW5zaW9uc0FycmF5fSk7dmFyIGs9bmV3IGMoe2V4cGxpY2l0OnRydWUsdGFnOlwiYTNcIixvYmo6bX0pO3RoaXMuYXNuMUFycmF5LnB1c2goayl9dmFyIG49bmV3IGYoe2FycmF5OnRoaXMuYXNuMUFycmF5fSk7dGhpcy5oVExWPW4uZ2V0RW5jb2RlZEhleCgpO3RoaXMuaXNNb2RpZmllZD1mYWxzZTtyZXR1cm4gdGhpcy5oVExWfTt0aGlzLl9pbml0aWFsaXplKCl9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5LlRCU0NlcnRpZmljYXRlLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5FeHRlbnNpb249ZnVuY3Rpb24oZCl7S0pVUi5hc24xLng1MDkuRXh0ZW5zaW9uLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgZj1udWxsLGE9S0pVUixlPWEuYXNuMSxoPWUuREVST2JqZWN0SWRlbnRpZmllcixpPWUuREVST2N0ZXRTdHJpbmcsYj1lLkRFUkJpdFN0cmluZyxnPWUuREVSQm9vbGVhbixjPWUuREVSU2VxdWVuY2U7dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIG09bmV3IGgoe29pZDp0aGlzLm9pZH0pO3ZhciBsPW5ldyBpKHtoZXg6dGhpcy5nZXRFeHRuVmFsdWVIZXgoKX0pO3ZhciBrPW5ldyBBcnJheSgpO2sucHVzaChtKTtpZih0aGlzLmNyaXRpY2FsKXtrLnB1c2gobmV3IGcoKSl9ay5wdXNoKGwpO3ZhciBqPW5ldyBjKHthcnJheTprfSk7cmV0dXJuIGouZ2V0RW5jb2RlZEhleCgpfTt0aGlzLmNyaXRpY2FsPWZhbHNlO2lmKGQhPT11bmRlZmluZWQpe2lmKGQuY3JpdGljYWwhPT11bmRlZmluZWQpe3RoaXMuY3JpdGljYWw9ZC5jcml0aWNhbH19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5FeHRlbnNpb24sS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5LkV4dGVuc2lvbi5hcHBlbmRCeU5hbWVUb0FycmF5PWZ1bmN0aW9uKGUsYyxiKXt2YXIgZz1lLnRvTG93ZXJDYXNlKCksZj1LSlVSLmFzbjEueDUwOTtpZihnPT1cImJhc2ljY29uc3RyYWludHNcIil7dmFyIGQ9bmV3IGYuQmFzaWNDb25zdHJhaW50cyhjKTtiLnB1c2goZCl9ZWxzZXtpZihnPT1cImtleXVzYWdlXCIpe3ZhciBkPW5ldyBmLktleVVzYWdlKGMpO2IucHVzaChkKX1lbHNle2lmKGc9PVwiY3JsZGlzdHJpYnV0aW9ucG9pbnRzXCIpe3ZhciBkPW5ldyBmLkNSTERpc3RyaWJ1dGlvblBvaW50cyhjKTtiLnB1c2goZCl9ZWxzZXtpZihnPT1cImV4dGtleXVzYWdlXCIpe3ZhciBkPW5ldyBmLkV4dEtleVVzYWdlKGMpO2IucHVzaChkKX1lbHNle2lmKGc9PVwiYXV0aG9yaXR5a2V5aWRlbnRpZmllclwiKXt2YXIgZD1uZXcgZi5BdXRob3JpdHlLZXlJZGVudGlmaWVyKGMpO2IucHVzaChkKX1lbHNle2lmKGc9PVwiYXV0aG9yaXR5aW5mb2FjY2Vzc1wiKXt2YXIgZD1uZXcgZi5BdXRob3JpdHlJbmZvQWNjZXNzKGMpO2IucHVzaChkKX1lbHNle2lmKGc9PVwic3ViamVjdGFsdG5hbWVcIil7dmFyIGQ9bmV3IGYuU3ViamVjdEFsdE5hbWUoYyk7Yi5wdXNoKGQpfWVsc2V7aWYoZz09XCJpc3N1ZXJhbHRuYW1lXCIpe3ZhciBkPW5ldyBmLklzc3VlckFsdE5hbWUoYyk7Yi5wdXNoKGQpfWVsc2V7dGhyb3dcInVuc3VwcG9ydGVkIGV4dGVuc2lvbiBuYW1lOiBcIitlfX19fX19fX19O0tKVVIuYXNuMS54NTA5LktleVVzYWdlPWZ1bmN0aW9uKGYpe0tKVVIuYXNuMS54NTA5LktleVVzYWdlLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGYpO3ZhciBhPVg1MDkuS0VZVVNBR0VfTkFNRTt0aGlzLmdldEV4dG5WYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFzbjFFeHRuVmFsdWUuZ2V0RW5jb2RlZEhleCgpfTt0aGlzLm9pZD1cIjIuNS4yOS4xNVwiO2lmKGYhPT11bmRlZmluZWQpe2lmKGYuYmluIT09dW5kZWZpbmVkKXt0aGlzLmFzbjFFeHRuVmFsdWU9bmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoZil9aWYoZi5uYW1lcyE9PXVuZGVmaW5lZCYmZi5uYW1lcy5sZW5ndGghPT11bmRlZmluZWQpe3ZhciBlPWYubmFtZXM7dmFyIGQ9XCIwMDAwMDAwMDBcIjtmb3IodmFyIGM9MDtjPGUubGVuZ3RoO2MrKyl7Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe2lmKGVbY109PT1hW2JdKXtkPWQuc3Vic3RyaW5nKDAsYikrXCIxXCIrZC5zdWJzdHJpbmcoYisxLGQubGVuZ3RoKX19fXRoaXMuYXNuMUV4dG5WYWx1ZT1uZXcgS0pVUi5hc24xLkRFUkJpdFN0cmluZyh7YmluOmR9KX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5LZXlVc2FnZSxLSlVSLmFzbjEueDUwOS5FeHRlbnNpb24pO0tKVVIuYXNuMS54NTA5LkJhc2ljQ29uc3RyYWludHM9ZnVuY3Rpb24oYyl7S0pVUi5hc24xLng1MDkuQmFzaWNDb25zdHJhaW50cy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxjKTt2YXIgYT1mYWxzZTt2YXIgYj0tMTt0aGlzLmdldEV4dG5WYWx1ZUhleD1mdW5jdGlvbigpe3ZhciBlPW5ldyBBcnJheSgpO2lmKHRoaXMuY0Epe2UucHVzaChuZXcgS0pVUi5hc24xLkRFUkJvb2xlYW4oKSl9aWYodGhpcy5wYXRoTGVuPi0xKXtlLnB1c2gobmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtcImludFwiOnRoaXMucGF0aExlbn0pKX12YXIgZD1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTplfSk7dGhpcy5hc24xRXh0blZhbHVlPWQ7cmV0dXJuIHRoaXMuYXNuMUV4dG5WYWx1ZS5nZXRFbmNvZGVkSGV4KCl9O3RoaXMub2lkPVwiMi41LjI5LjE5XCI7dGhpcy5jQT1mYWxzZTt0aGlzLnBhdGhMZW49LTE7aWYoYyE9PXVuZGVmaW5lZCl7aWYoYy5jQSE9PXVuZGVmaW5lZCl7dGhpcy5jQT1jLmNBfWlmKGMucGF0aExlbiE9PXVuZGVmaW5lZCl7dGhpcy5wYXRoTGVuPWMucGF0aExlbn19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5CYXNpY0NvbnN0cmFpbnRzLEtKVVIuYXNuMS54NTA5LkV4dGVuc2lvbik7S0pVUi5hc24xLng1MDkuQ1JMRGlzdHJpYnV0aW9uUG9pbnRzPWZ1bmN0aW9uKGQpe0tKVVIuYXNuMS54NTA5LkNSTERpc3RyaWJ1dGlvblBvaW50cy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxkKTt2YXIgYj1LSlVSLGE9Yi5hc24xLGM9YS54NTA5O3RoaXMuZ2V0RXh0blZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXNuMUV4dG5WYWx1ZS5nZXRFbmNvZGVkSGV4KCl9O3RoaXMuc2V0QnlEUEFycmF5PWZ1bmN0aW9uKGUpe3RoaXMuYXNuMUV4dG5WYWx1ZT1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6ZX0pfTt0aGlzLnNldEJ5T25lVVJJPWZ1bmN0aW9uKGgpe3ZhciBlPW5ldyBjLkdlbmVyYWxOYW1lcyhbe3VyaTpofV0pO3ZhciBnPW5ldyBjLkRpc3RyaWJ1dGlvblBvaW50TmFtZShlKTt2YXIgZj1uZXcgYy5EaXN0cmlidXRpb25Qb2ludCh7ZHBvYmo6Z30pO3RoaXMuc2V0QnlEUEFycmF5KFtmXSl9O3RoaXMub2lkPVwiMi41LjI5LjMxXCI7aWYoZCE9PXVuZGVmaW5lZCl7aWYoZC5hcnJheSE9PXVuZGVmaW5lZCl7dGhpcy5zZXRCeURQQXJyYXkoZC5hcnJheSl9ZWxzZXtpZihkLnVyaSE9PXVuZGVmaW5lZCl7dGhpcy5zZXRCeU9uZVVSSShkLnVyaSl9fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5LkNSTERpc3RyaWJ1dGlvblBvaW50cyxLSlVSLmFzbjEueDUwOS5FeHRlbnNpb24pO0tKVVIuYXNuMS54NTA5LkV4dEtleVVzYWdlPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS54NTA5LkV4dEtleVVzYWdlLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGMpO3ZhciBiPUtKVVIsYT1iLmFzbjE7dGhpcy5zZXRQdXJwb3NlQXJyYXk9ZnVuY3Rpb24oZCl7dGhpcy5hc24xRXh0blZhbHVlPW5ldyBhLkRFUlNlcXVlbmNlKCk7Zm9yKHZhciBlPTA7ZTxkLmxlbmd0aDtlKyspe3ZhciBmPW5ldyBhLkRFUk9iamVjdElkZW50aWZpZXIoZFtlXSk7dGhpcy5hc24xRXh0blZhbHVlLmFwcGVuZEFTTjFPYmplY3QoZil9fTt0aGlzLmdldEV4dG5WYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFzbjFFeHRuVmFsdWUuZ2V0RW5jb2RlZEhleCgpfTt0aGlzLm9pZD1cIjIuNS4yOS4zN1wiO2lmKGMhPT11bmRlZmluZWQpe2lmKGMuYXJyYXkhPT11bmRlZmluZWQpe3RoaXMuc2V0UHVycG9zZUFycmF5KGMuYXJyYXkpfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5LkV4dEtleVVzYWdlLEtKVVIuYXNuMS54NTA5LkV4dGVuc2lvbik7S0pVUi5hc24xLng1MDkuQXV0aG9yaXR5S2V5SWRlbnRpZmllcj1mdW5jdGlvbihkKXtLSlVSLmFzbjEueDUwOS5BdXRob3JpdHlLZXlJZGVudGlmaWVyLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGQpO3ZhciBiPUtKVVIsYT1iLmFzbjEsYz1hLkRFUlRhZ2dlZE9iamVjdDt0aGlzLmFzbjFLSUQ9bnVsbDt0aGlzLmFzbjFDZXJ0SXNzdWVyPW51bGw7dGhpcy5hc24xQ2VydFNOPW51bGw7dGhpcy5nZXRFeHRuVmFsdWVIZXg9ZnVuY3Rpb24oKXt2YXIgZj1uZXcgQXJyYXkoKTtpZih0aGlzLmFzbjFLSUQpe2YucHVzaChuZXcgYyh7ZXhwbGljaXQ6ZmFsc2UsdGFnOlwiODBcIixvYmo6dGhpcy5hc24xS0lEfSkpfWlmKHRoaXMuYXNuMUNlcnRJc3N1ZXIpe2YucHVzaChuZXcgYyh7ZXhwbGljaXQ6ZmFsc2UsdGFnOlwiYTFcIixvYmo6dGhpcy5hc24xQ2VydElzc3Vlcn0pKX1pZih0aGlzLmFzbjFDZXJ0U04pe2YucHVzaChuZXcgYyh7ZXhwbGljaXQ6ZmFsc2UsdGFnOlwiODJcIixvYmo6dGhpcy5hc24xQ2VydFNOfSkpfXZhciBlPW5ldyBhLkRFUlNlcXVlbmNlKHthcnJheTpmfSk7dGhpcy5hc24xRXh0blZhbHVlPWU7cmV0dXJuIHRoaXMuYXNuMUV4dG5WYWx1ZS5nZXRFbmNvZGVkSGV4KCl9O3RoaXMuc2V0S0lEQnlQYXJhbT1mdW5jdGlvbihlKXt0aGlzLmFzbjFLSUQ9bmV3IEtKVVIuYXNuMS5ERVJPY3RldFN0cmluZyhlKX07dGhpcy5zZXRDZXJ0SXNzdWVyQnlQYXJhbT1mdW5jdGlvbihlKXt0aGlzLmFzbjFDZXJ0SXNzdWVyPW5ldyBLSlVSLmFzbjEueDUwOS5YNTAwTmFtZShlKX07dGhpcy5zZXRDZXJ0U05CeVBhcmFtPWZ1bmN0aW9uKGUpe3RoaXMuYXNuMUNlcnRTTj1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoZSl9O3RoaXMub2lkPVwiMi41LjI5LjM1XCI7aWYoZCE9PXVuZGVmaW5lZCl7aWYoZC5raWQhPT11bmRlZmluZWQpe3RoaXMuc2V0S0lEQnlQYXJhbShkLmtpZCl9aWYoZC5pc3N1ZXIhPT11bmRlZmluZWQpe3RoaXMuc2V0Q2VydElzc3VlckJ5UGFyYW0oZC5pc3N1ZXIpfWlmKGQuc24hPT11bmRlZmluZWQpe3RoaXMuc2V0Q2VydFNOQnlQYXJhbShkLnNuKX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5BdXRob3JpdHlLZXlJZGVudGlmaWVyLEtKVVIuYXNuMS54NTA5LkV4dGVuc2lvbik7S0pVUi5hc24xLng1MDkuQXV0aG9yaXR5SW5mb0FjY2Vzcz1mdW5jdGlvbihhKXtLSlVSLmFzbjEueDUwOS5BdXRob3JpdHlJbmZvQWNjZXNzLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuc2V0QWNjZXNzRGVzY3JpcHRpb25BcnJheT1mdW5jdGlvbihrKXt2YXIgaj1uZXcgQXJyYXkoKSxiPUtKVVIsZz1iLmFzbjEsZD1nLkRFUlNlcXVlbmNlO2Zvcih2YXIgZj0wO2Y8ay5sZW5ndGg7ZisrKXt2YXIgYz1uZXcgZy5ERVJPYmplY3RJZGVudGlmaWVyKGtbZl0uYWNjZXNzTWV0aG9kKTt2YXIgZT1uZXcgZy54NTA5LkdlbmVyYWxOYW1lKGtbZl0uYWNjZXNzTG9jYXRpb24pO3ZhciBoPW5ldyBkKHthcnJheTpbYyxlXX0pO2oucHVzaChoKX10aGlzLmFzbjFFeHRuVmFsdWU9bmV3IGQoe2FycmF5Omp9KX07dGhpcy5nZXRFeHRuVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hc24xRXh0blZhbHVlLmdldEVuY29kZWRIZXgoKX07dGhpcy5vaWQ9XCIxLjMuNi4xLjUuNS43LjEuMVwiO2lmKGEhPT11bmRlZmluZWQpe2lmKGEuYXJyYXkhPT11bmRlZmluZWQpe3RoaXMuc2V0QWNjZXNzRGVzY3JpcHRpb25BcnJheShhLmFycmF5KX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5BdXRob3JpdHlJbmZvQWNjZXNzLEtKVVIuYXNuMS54NTA5LkV4dGVuc2lvbik7S0pVUi5hc24xLng1MDkuU3ViamVjdEFsdE5hbWU9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLng1MDkuU3ViamVjdEFsdE5hbWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5zZXROYW1lQXJyYXk9ZnVuY3Rpb24oYil7dGhpcy5hc24xRXh0blZhbHVlPW5ldyBLSlVSLmFzbjEueDUwOS5HZW5lcmFsTmFtZXMoYil9O3RoaXMuZ2V0RXh0blZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXNuMUV4dG5WYWx1ZS5nZXRFbmNvZGVkSGV4KCl9O3RoaXMub2lkPVwiMi41LjI5LjE3XCI7aWYoYSE9PXVuZGVmaW5lZCl7aWYoYS5hcnJheSE9PXVuZGVmaW5lZCl7dGhpcy5zZXROYW1lQXJyYXkoYS5hcnJheSl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuU3ViamVjdEFsdE5hbWUsS0pVUi5hc24xLng1MDkuRXh0ZW5zaW9uKTtLSlVSLmFzbjEueDUwOS5Jc3N1ZXJBbHROYW1lPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS54NTA5Lklzc3VlckFsdE5hbWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5zZXROYW1lQXJyYXk9ZnVuY3Rpb24oYil7dGhpcy5hc24xRXh0blZhbHVlPW5ldyBLSlVSLmFzbjEueDUwOS5HZW5lcmFsTmFtZXMoYil9O3RoaXMuZ2V0RXh0blZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXNuMUV4dG5WYWx1ZS5nZXRFbmNvZGVkSGV4KCl9O3RoaXMub2lkPVwiMi41LjI5LjE4XCI7aWYoYSE9PXVuZGVmaW5lZCl7aWYoYS5hcnJheSE9PXVuZGVmaW5lZCl7dGhpcy5zZXROYW1lQXJyYXkoYS5hcnJheSl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuSXNzdWVyQWx0TmFtZSxLSlVSLmFzbjEueDUwOS5FeHRlbnNpb24pO0tKVVIuYXNuMS54NTA5LkNSTD1mdW5jdGlvbihmKXtLSlVSLmFzbjEueDUwOS5DUkwuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBiPW51bGwsZD1udWxsLGU9bnVsbCxjPW51bGwsYT1udWxsO3RoaXMuc2lnbj1mdW5jdGlvbigpe3RoaXMuYXNuMVNpZ25hdHVyZUFsZz10aGlzLmFzbjFUQlNDZXJ0TGlzdC5hc24xU2lnbmF0dXJlQWxnO3NpZz1uZXcgS0pVUi5jcnlwdG8uU2lnbmF0dXJlKHthbGc6XCJTSEExd2l0aFJTQVwiLHByb3Y6XCJjcnlwdG9qcy9qc3JzYVwifSk7c2lnLmluaXQodGhpcy5wcnZLZXkpO3NpZy51cGRhdGVIZXgodGhpcy5hc24xVEJTQ2VydExpc3QuZ2V0RW5jb2RlZEhleCgpKTt0aGlzLmhleFNpZz1zaWcuc2lnbigpO3RoaXMuYXNuMVNpZz1uZXcgS0pVUi5hc24xLkRFUkJpdFN0cmluZyh7aGV4OlwiMDBcIit0aGlzLmhleFNpZ30pO3ZhciBnPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5Olt0aGlzLmFzbjFUQlNDZXJ0TGlzdCx0aGlzLmFzbjFTaWduYXR1cmVBbGcsdGhpcy5hc24xU2lnXX0pO3RoaXMuaFRMVj1nLmdldEVuY29kZWRIZXgoKTt0aGlzLmlzTW9kaWZpZWQ9ZmFsc2V9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMuaXNNb2RpZmllZD09ZmFsc2UmJnRoaXMuaFRMViE9bnVsbCl7cmV0dXJuIHRoaXMuaFRMVn10aHJvd1wibm90IHNpZ25lZCB5ZXRcIn07dGhpcy5nZXRQRU1TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgZz1oZXh0b2I2NG5sKHRoaXMuZ2V0RW5jb2RlZEhleCgpKTtyZXR1cm5cIi0tLS0tQkVHSU4gWDUwOSBDUkwtLS0tLVxcclxcblwiK2crXCJcXHJcXG4tLS0tLUVORCBYNTA5IENSTC0tLS0tXFxyXFxuXCJ9O2lmKGYhPT11bmRlZmluZWQpe2lmKGYudGJzb2JqIT09dW5kZWZpbmVkKXt0aGlzLmFzbjFUQlNDZXJ0TGlzdD1mLnRic29ian1pZihmLnBydmtleW9iaiE9PXVuZGVmaW5lZCl7dGhpcy5wcnZLZXk9Zi5wcnZrZXlvYmp9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuQ1JMLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5UQlNDZXJ0TGlzdD1mdW5jdGlvbihnKXtLSlVSLmFzbjEueDUwOS5UQlNDZXJ0TGlzdC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGU9bnVsbCxkPUtKVVIsYz1kLmFzbjEsYj1jLkRFUlNlcXVlbmNlLGY9Yy54NTA5LGE9Zi5UaW1lO3RoaXMuc2V0U2lnbmF0dXJlQWxnQnlQYXJhbT1mdW5jdGlvbihoKXt0aGlzLmFzbjFTaWduYXR1cmVBbGc9bmV3IGYuQWxnb3JpdGhtSWRlbnRpZmllcihoKX07dGhpcy5zZXRJc3N1ZXJCeVBhcmFtPWZ1bmN0aW9uKGgpe3RoaXMuYXNuMUlzc3Vlcj1uZXcgZi5YNTAwTmFtZShoKX07dGhpcy5zZXRUaGlzVXBkYXRlQnlQYXJhbT1mdW5jdGlvbihoKXt0aGlzLmFzbjFUaGlzVXBkYXRlPW5ldyBhKGgpfTt0aGlzLnNldE5leHRVcGRhdGVCeVBhcmFtPWZ1bmN0aW9uKGgpe3RoaXMuYXNuMU5leHRVcGRhdGU9bmV3IGEoaCl9O3RoaXMuYWRkUmV2b2tlZENlcnQ9ZnVuY3Rpb24oaCxpKXt2YXIgaz17fTtpZihoIT11bmRlZmluZWQmJmghPW51bGwpe2suc249aH1pZihpIT11bmRlZmluZWQmJmkhPW51bGwpe2sudGltZT1pfXZhciBqPW5ldyBmLkNSTEVudHJ5KGspO3RoaXMuYVJldm9rZWRDZXJ0LnB1c2goail9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3RoaXMuYXNuMUFycmF5PW5ldyBBcnJheSgpO2lmKHRoaXMuYXNuMVZlcnNpb24hPW51bGwpe3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xVmVyc2lvbil9dGhpcy5hc24xQXJyYXkucHVzaCh0aGlzLmFzbjFTaWduYXR1cmVBbGcpO3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xSXNzdWVyKTt0aGlzLmFzbjFBcnJheS5wdXNoKHRoaXMuYXNuMVRoaXNVcGRhdGUpO2lmKHRoaXMuYXNuMU5leHRVcGRhdGUhPW51bGwpe3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xTmV4dFVwZGF0ZSl9aWYodGhpcy5hUmV2b2tlZENlcnQubGVuZ3RoPjApe3ZhciBoPW5ldyBiKHthcnJheTp0aGlzLmFSZXZva2VkQ2VydH0pO3RoaXMuYXNuMUFycmF5LnB1c2goaCl9dmFyIGk9bmV3IGIoe2FycmF5OnRoaXMuYXNuMUFycmF5fSk7dGhpcy5oVExWPWkuZ2V0RW5jb2RlZEhleCgpO3RoaXMuaXNNb2RpZmllZD1mYWxzZTtyZXR1cm4gdGhpcy5oVExWfTt0aGlzLl9pbml0aWFsaXplPWZ1bmN0aW9uKCl7dGhpcy5hc24xVmVyc2lvbj1udWxsO3RoaXMuYXNuMVNpZ25hdHVyZUFsZz1udWxsO3RoaXMuYXNuMUlzc3Vlcj1udWxsO3RoaXMuYXNuMVRoaXNVcGRhdGU9bnVsbDt0aGlzLmFzbjFOZXh0VXBkYXRlPW51bGw7dGhpcy5hUmV2b2tlZENlcnQ9bmV3IEFycmF5KCl9O3RoaXMuX2luaXRpYWxpemUoKX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuVEJTQ2VydExpc3QsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5LkNSTEVudHJ5PWZ1bmN0aW9uKGUpe0tKVVIuYXNuMS54NTA5LkNSTEVudHJ5LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgZD1udWxsLGM9bnVsbCxiPUtKVVIsYT1iLmFzbjE7dGhpcy5zZXRDZXJ0U2VyaWFsPWZ1bmN0aW9uKGYpe3RoaXMuc249bmV3IGEuREVSSW50ZWdlcihmKX07dGhpcy5zZXRSZXZvY2F0aW9uRGF0ZT1mdW5jdGlvbihmKXt0aGlzLnRpbWU9bmV3IGEueDUwOS5UaW1lKGYpfTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXt2YXIgZj1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6W3RoaXMuc24sdGhpcy50aW1lXX0pO3RoaXMuVExWPWYuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLlRMVn07aWYoZSE9PXVuZGVmaW5lZCl7aWYoZS50aW1lIT09dW5kZWZpbmVkKXt0aGlzLnNldFJldm9jYXRpb25EYXRlKGUudGltZSl9aWYoZS5zbiE9PXVuZGVmaW5lZCl7dGhpcy5zZXRDZXJ0U2VyaWFsKGUuc24pfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5LkNSTEVudHJ5LEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5YNTAwTmFtZT1mdW5jdGlvbihmKXtLSlVSLmFzbjEueDUwOS5YNTAwTmFtZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5hc24xQXJyYXk9bmV3IEFycmF5KCk7dmFyIGQ9S0pVUixjPWQuYXNuMSxlPWMueDUwOSxiPXBlbXRvaGV4O3RoaXMuc2V0QnlTdHJpbmc9ZnVuY3Rpb24oZyl7dmFyIGs9Zy5zcGxpdChcIi9cIik7ay5zaGlmdCgpO3ZhciBqPVtdO2Zvcih2YXIgbD0wO2w8ay5sZW5ndGg7bCsrKXtpZihrW2xdLm1hdGNoKC9eW149XSs9LiskLykpe2oucHVzaChrW2xdKX1lbHNle3ZhciBoPWoubGVuZ3RoLTE7altoXT1qW2hdK1wiL1wiK2tbbF19fWZvcih2YXIgbD0wO2w8ai5sZW5ndGg7bCsrKXt0aGlzLmFzbjFBcnJheS5wdXNoKG5ldyBlLlJETih7c3RyOmpbbF19KSl9fTt0aGlzLnNldEJ5TGRhcFN0cmluZz1mdW5jdGlvbihnKXt2YXIgaD1lLlg1MDBOYW1lLmxkYXBUb09uZWxpbmUoZyk7dGhpcy5zZXRCeVN0cmluZyhoKX07dGhpcy5zZXRCeU9iamVjdD1mdW5jdGlvbihpKXtmb3IodmFyIGcgaW4gaSl7aWYoaS5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9bmV3IEtKVVIuYXNuMS54NTA5LlJETih7c3RyOmcrXCI9XCIraVtnXX0pO3RoaXMuYXNuMUFycmF5P3RoaXMuYXNuMUFycmF5LnB1c2goaCk6dGhpcy5hc24xQXJyYXk9W2hdfX19O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHR5cGVvZiB0aGlzLmhUTFY9PVwic3RyaW5nXCIpe3JldHVybiB0aGlzLmhUTFZ9dmFyIGc9bmV3IGMuREVSU2VxdWVuY2Uoe2FycmF5OnRoaXMuYXNuMUFycmF5fSk7dGhpcy5oVExWPWcuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O2lmKGYhPT11bmRlZmluZWQpe2lmKGYuc3RyIT09dW5kZWZpbmVkKXt0aGlzLnNldEJ5U3RyaW5nKGYuc3RyKX1lbHNle2lmKGYubGRhcHN0ciE9PXVuZGVmaW5lZCl7dGhpcy5zZXRCeUxkYXBTdHJpbmcoZi5sZGFwc3RyKX1lbHNle2lmKHR5cGVvZiBmPT09XCJvYmplY3RcIil7dGhpcy5zZXRCeU9iamVjdChmKX19fWlmKGYuY2VydGlzc3VlciE9PXVuZGVmaW5lZCl7dmFyIGE9bmV3IFg1MDkoKTthLmhleD1iKGYuY2VydGlzc3Vlcik7dGhpcy5oVExWPWEuZ2V0SXNzdWVySGV4KCl9aWYoZi5jZXJ0c3ViamVjdCE9PXVuZGVmaW5lZCl7dmFyIGE9bmV3IFg1MDkoKTthLmhleD1iKGYuY2VydHN1YmplY3QpO3RoaXMuaFRMVj1hLmdldFN1YmplY3RIZXgoKX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5YNTAwTmFtZSxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLng1MDkuWDUwME5hbWUub25lbGluZVRvTERBUD1mdW5jdGlvbihkKXtpZihkLnN1YnN0cigwLDEpIT09XCIvXCIpe3Rocm93XCJtYWxmb3JtZWQgaW5wdXRcIn12YXIgYj1cIlwiO2Q9ZC5zdWJzdHIoMSk7dmFyIGM9ZC5zcGxpdChcIi9cIik7Yy5yZXZlcnNlKCk7Yz1jLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKC8sLyxcIlxcXFwsXCIpfSk7cmV0dXJuIGMuam9pbihcIixcIil9O0tKVVIuYXNuMS54NTA5Llg1MDBOYW1lLmxkYXBUb09uZWxpbmU9ZnVuY3Rpb24oZyl7dmFyIGM9Zy5zcGxpdChcIixcIik7dmFyIGU9ZmFsc2U7dmFyIGI9W107Zm9yKHZhciBmPTA7Yy5sZW5ndGg+MDtmKyspe3ZhciBoPWMuc2hpZnQoKTtpZihlPT09dHJ1ZSl7dmFyIGQ9Yi5wb3AoKTt2YXIgaj0oZCtcIixcIitoKS5yZXBsYWNlKC9cXFxcLC9nLFwiLFwiKTtiLnB1c2goaik7ZT1mYWxzZX1lbHNle2IucHVzaChoKX1pZihoLnN1YnN0cigtMSwxKT09PVwiXFxcXFwiKXtlPXRydWV9fWI9Yi5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZShcIi9cIixcIlxcXFwvXCIpfSk7Yi5yZXZlcnNlKCk7cmV0dXJuXCIvXCIrYi5qb2luKFwiL1wiKX07S0pVUi5hc24xLng1MDkuUkROPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS54NTA5LlJETi5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5hc24xQXJyYXk9bmV3IEFycmF5KCk7dGhpcy5hZGRCeVN0cmluZz1mdW5jdGlvbihiKXt0aGlzLmFzbjFBcnJheS5wdXNoKG5ldyBLSlVSLmFzbjEueDUwOS5BdHRyaWJ1dGVUeXBlQW5kVmFsdWUoe3N0cjpifSkpfTt0aGlzLmFkZEJ5TXVsdGlWYWx1ZWRTdHJpbmc9ZnVuY3Rpb24oZCl7dmFyIGI9S0pVUi5hc24xLng1MDkuUkROLnBhcnNlU3RyaW5nKGQpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXt0aGlzLmFkZEJ5U3RyaW5nKGJbY10pfX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGI9bmV3IEtKVVIuYXNuMS5ERVJTZXQoe2FycmF5OnRoaXMuYXNuMUFycmF5fSk7dGhpcy5UTFY9Yi5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuVExWfTtpZihhIT09dW5kZWZpbmVkKXtpZihhLnN0ciE9PXVuZGVmaW5lZCl7dGhpcy5hZGRCeU11bHRpVmFsdWVkU3RyaW5nKGEuc3RyKX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5SRE4sS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5LlJETi5wYXJzZVN0cmluZz1mdW5jdGlvbihtKXt2YXIgaj1tLnNwbGl0KC9cXCsvKTt2YXIgaD1mYWxzZTt2YXIgYz1bXTtmb3IodmFyIGc9MDtqLmxlbmd0aD4wO2crKyl7dmFyIGs9ai5zaGlmdCgpO2lmKGg9PT10cnVlKXt2YXIgZj1jLnBvcCgpO3ZhciBkPShmK1wiK1wiK2spLnJlcGxhY2UoL1xcXFxcXCsvZyxcIitcIik7Yy5wdXNoKGQpO2g9ZmFsc2V9ZWxzZXtjLnB1c2goayl9aWYoay5zdWJzdHIoLTEsMSk9PT1cIlxcXFxcIil7aD10cnVlfX12YXIgbD1mYWxzZTt2YXIgYj1bXTtmb3IodmFyIGc9MDtjLmxlbmd0aD4wO2crKyl7dmFyIGs9Yy5zaGlmdCgpO2lmKGw9PT10cnVlKXt2YXIgZT1iLnBvcCgpO2lmKGsubWF0Y2goL1wiJC8pKXt2YXIgZD0oZStcIitcIitrKS5yZXBsYWNlKC9eKFtePV0rKT1cIiguKilcIiQvLFwiJDE9JDJcIik7Yi5wdXNoKGQpO2w9ZmFsc2V9ZWxzZXtiLnB1c2goZStcIitcIitrKX19ZWxzZXtiLnB1c2goayl9aWYoay5tYXRjaCgvXltePV0rPVwiLykpe2w9dHJ1ZX19cmV0dXJuIGJ9O0tKVVIuYXNuMS54NTA5LkF0dHJpYnV0ZVR5cGVBbmRWYWx1ZT1mdW5jdGlvbihkKXtLSlVSLmFzbjEueDUwOS5BdHRyaWJ1dGVUeXBlQW5kVmFsdWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBmPW51bGwsZT1udWxsLGE9XCJ1dGY4XCIsYz1LSlVSLGI9Yy5hc24xO3RoaXMuc2V0QnlTdHJpbmc9ZnVuY3Rpb24oaCl7dmFyIGc9aC5tYXRjaCgvXihbXj1dKyk9KC4rKSQvKTtpZihnKXt0aGlzLnNldEJ5QXR0clR5cGVBbmRWYWx1ZVN0cihnWzFdLGdbMl0pfWVsc2V7dGhyb3dcIm1hbGZvcm1lZCBhdHRyVHlwZUFuZFZhbHVlU3RyOiBcIitofX07dGhpcy5zZXRCeUF0dHJUeXBlQW5kVmFsdWVTdHI9ZnVuY3Rpb24oaSxoKXt0aGlzLnR5cGVPYmo9S0pVUi5hc24xLng1MDkuT0lELmF0eXBlMm9iaihpKTt2YXIgZz1hO2lmKGk9PVwiQ1wiKXtnPVwicHJuXCJ9dGhpcy52YWx1ZU9iaj10aGlzLmdldFZhbHVlT2JqKGcsaCl9O3RoaXMuZ2V0VmFsdWVPYmo9ZnVuY3Rpb24oaCxnKXtpZihoPT1cInV0ZjhcIil7cmV0dXJuIG5ldyBiLkRFUlVURjhTdHJpbmcoe3N0cjpnfSl9aWYoaD09XCJwcm5cIil7cmV0dXJuIG5ldyBiLkRFUlByaW50YWJsZVN0cmluZyh7c3RyOmd9KX1pZihoPT1cInRlbFwiKXtyZXR1cm4gbmV3IGIuREVSVGVsZXRleFN0cmluZyh7c3RyOmd9KX1pZihoPT1cImlhNVwiKXtyZXR1cm4gbmV3IGIuREVSSUE1U3RyaW5nKHtzdHI6Z30pfXRocm93XCJ1bnN1cHBvcnRlZCBkaXJlY3Rvcnkgc3RyaW5nIHR5cGU6IHR5cGU9XCIraCtcIiB2YWx1ZT1cIitnfTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXt2YXIgZz1uZXcgYi5ERVJTZXF1ZW5jZSh7YXJyYXk6W3RoaXMudHlwZU9iaix0aGlzLnZhbHVlT2JqXX0pO3RoaXMuVExWPWcuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLlRMVn07aWYoZCE9PXVuZGVmaW5lZCl7aWYoZC5zdHIhPT11bmRlZmluZWQpe3RoaXMuc2V0QnlTdHJpbmcoZC5zdHIpfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5LkF0dHJpYnV0ZVR5cGVBbmRWYWx1ZSxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLng1MDkuU3ViamVjdFB1YmxpY0tleUluZm89ZnVuY3Rpb24oZil7S0pVUi5hc24xLng1MDkuU3ViamVjdFB1YmxpY0tleUluZm8uc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBsPW51bGwsaz1udWxsLGE9S0pVUixqPWEuYXNuMSxpPWouREVSSW50ZWdlcixiPWouREVSQml0U3RyaW5nLG09ai5ERVJPYmplY3RJZGVudGlmaWVyLGU9ai5ERVJTZXF1ZW5jZSxoPWouQVNOMVV0aWwubmV3T2JqZWN0LGQ9ai54NTA5LG89ZC5BbGdvcml0aG1JZGVudGlmaWVyLGc9YS5jcnlwdG8sbj1nLkVDRFNBLGM9Zy5EU0E7dGhpcy5nZXRBU04xT2JqZWN0PWZ1bmN0aW9uKCl7aWYodGhpcy5hc24xQWxnSWQ9PW51bGx8fHRoaXMuYXNuMVN1YmpQS2V5PT1udWxsKXt0aHJvd1wiYWxnSWQgYW5kL29yIHN1YmpQdWJLZXkgbm90IHNldFwifXZhciBwPW5ldyBlKHthcnJheTpbdGhpcy5hc24xQWxnSWQsdGhpcy5hc24xU3VialBLZXldfSk7cmV0dXJuIHB9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBwPXRoaXMuZ2V0QVNOMU9iamVjdCgpO3RoaXMuaFRMVj1wLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTt0aGlzLnNldFB1YktleT1mdW5jdGlvbihxKXt0cnl7aWYocSBpbnN0YW5jZW9mIFJTQUtleSl7dmFyIHU9aCh7c2VxOlt7XCJpbnRcIjp7YmlnaW50OnEubn19LHtcImludFwiOntcImludFwiOnEuZX19XX0pO3ZhciBzPXUuZ2V0RW5jb2RlZEhleCgpO3RoaXMuYXNuMUFsZ0lkPW5ldyBvKHtuYW1lOlwicnNhRW5jcnlwdGlvblwifSk7dGhpcy5hc24xU3VialBLZXk9bmV3IGIoe2hleDpcIjAwXCIrc30pfX1jYXRjaChwKXt9dHJ5e2lmKHEgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSl7dmFyIHI9bmV3IG0oe25hbWU6cS5jdXJ2ZU5hbWV9KTt0aGlzLmFzbjFBbGdJZD1uZXcgbyh7bmFtZTpcImVjUHVibGljS2V5XCIsYXNuMXBhcmFtczpyfSk7dGhpcy5hc24xU3VialBLZXk9bmV3IGIoe2hleDpcIjAwXCIrcS5wdWJLZXlIZXh9KX19Y2F0Y2gocCl7fXRyeXtpZihxIGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRFNBKXt2YXIgcj1uZXcgaCh7c2VxOlt7XCJpbnRcIjp7YmlnaW50OnEucH19LHtcImludFwiOntiaWdpbnQ6cS5xfX0se1wiaW50XCI6e2JpZ2ludDpxLmd9fV19KTt0aGlzLmFzbjFBbGdJZD1uZXcgbyh7bmFtZTpcImRzYVwiLGFzbjFwYXJhbXM6cn0pO3ZhciB0PW5ldyBpKHtiaWdpbnQ6cS55fSk7dGhpcy5hc24xU3VialBLZXk9bmV3IGIoe2hleDpcIjAwXCIrdC5nZXRFbmNvZGVkSGV4KCl9KX19Y2F0Y2gocCl7fX07aWYoZiE9PXVuZGVmaW5lZCl7dGhpcy5zZXRQdWJLZXkoZil9fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5TdWJqZWN0UHVibGljS2V5SW5mbyxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLng1MDkuVGltZT1mdW5jdGlvbihmKXtLSlVSLmFzbjEueDUwOS5UaW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgZT1udWxsLGE9bnVsbCxkPUtKVVIsYz1kLmFzbjEsYj1jLkRFUlVUQ1RpbWUsZz1jLkRFUkdlbmVyYWxpemVkVGltZTt0aGlzLnNldFRpbWVQYXJhbXM9ZnVuY3Rpb24oaCl7dGhpcy50aW1lUGFyYW1zPWh9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBoPW51bGw7aWYodGhpcy50aW1lUGFyYW1zIT1udWxsKXtpZih0aGlzLnR5cGU9PVwidXRjXCIpe2g9bmV3IGIodGhpcy50aW1lUGFyYW1zKX1lbHNle2g9bmV3IGcodGhpcy50aW1lUGFyYW1zKX19ZWxzZXtpZih0aGlzLnR5cGU9PVwidXRjXCIpe2g9bmV3IGIoKX1lbHNle2g9bmV3IGcoKX19dGhpcy5UTFY9aC5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuVExWfTt0aGlzLnR5cGU9XCJ1dGNcIjtpZihmIT09dW5kZWZpbmVkKXtpZihmLnR5cGUhPT11bmRlZmluZWQpe3RoaXMudHlwZT1mLnR5cGV9ZWxzZXtpZihmLnN0ciE9PXVuZGVmaW5lZCl7aWYoZi5zdHIubWF0Y2goL15bMC05XXsxMn1aJC8pKXt0aGlzLnR5cGU9XCJ1dGNcIn1pZihmLnN0ci5tYXRjaCgvXlswLTldezE0fVokLykpe3RoaXMudHlwZT1cImdlblwifX19dGhpcy50aW1lUGFyYW1zPWZ9fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5UaW1lLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5BbGdvcml0aG1JZGVudGlmaWVyPWZ1bmN0aW9uKGQpe0tKVVIuYXNuMS54NTA5LkFsZ29yaXRobUlkZW50aWZpZXIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMubmFtZUFsZz1udWxsO3RoaXMuYXNuMUFsZz1udWxsO3RoaXMuYXNuMVBhcmFtcz1udWxsO3RoaXMucGFyYW1FbXB0eT1mYWxzZTt2YXIgYj1LSlVSLGE9Yi5hc24xO3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMubmFtZUFsZz09PW51bGwmJnRoaXMuYXNuMUFsZz09PW51bGwpe3Rocm93XCJhbGdvcml0aG0gbm90IHNwZWNpZmllZFwifWlmKHRoaXMubmFtZUFsZyE9PW51bGwmJnRoaXMuYXNuMUFsZz09PW51bGwpe3RoaXMuYXNuMUFsZz1hLng1MDkuT0lELm5hbWUyb2JqKHRoaXMubmFtZUFsZyl9dmFyIGU9W3RoaXMuYXNuMUFsZ107aWYodGhpcy5hc24xUGFyYW1zIT09bnVsbCl7ZS5wdXNoKHRoaXMuYXNuMVBhcmFtcyl9dmFyIGY9bmV3IGEuREVSU2VxdWVuY2Uoe2FycmF5OmV9KTt0aGlzLmhUTFY9Zi5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYoZCE9PXVuZGVmaW5lZCl7aWYoZC5uYW1lIT09dW5kZWZpbmVkKXt0aGlzLm5hbWVBbGc9ZC5uYW1lfWlmKGQuYXNuMXBhcmFtcyE9PXVuZGVmaW5lZCl7dGhpcy5hc24xUGFyYW1zPWQuYXNuMXBhcmFtc31pZihkLnBhcmFtZW1wdHkhPT11bmRlZmluZWQpe3RoaXMucGFyYW1FbXB0eT1kLnBhcmFtZW1wdHl9fWlmKHRoaXMuYXNuMVBhcmFtcz09PW51bGwmJnRoaXMucGFyYW1FbXB0eT09PWZhbHNlJiZ0aGlzLm5hbWVBbGchPT1udWxsKXt2YXIgYz10aGlzLm5hbWVBbGcudG9Mb3dlckNhc2UoKTtpZihjLnN1YnN0cigtNyw3KSE9PVwid2l0aGRzYVwiJiZjLnN1YnN0cigtOSw5KSE9PVwid2l0aGVjZHNhXCIpe3RoaXMuYXNuMVBhcmFtcz1uZXcgYS5ERVJOdWxsKCl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuQWxnb3JpdGhtSWRlbnRpZmllcixLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLng1MDkuR2VuZXJhbE5hbWU9ZnVuY3Rpb24oZSl7S0pVUi5hc24xLng1MDkuR2VuZXJhbE5hbWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBtPW51bGwsaT1udWxsLGs9e3JmYzgyMjpcIjgxXCIsZG5zOlwiODJcIixkbjpcImE0XCIsdXJpOlwiODZcIixpcDpcIjg3XCJ9LGI9S0pVUixnPWIuYXNuMSxmPWcuREVSU2VxdWVuY2Usaj1nLkRFUk9jdGV0U3RyaW5nLGQ9Zy5ERVJJQTVTdHJpbmcsYz1nLkRFUlRhZ2dlZE9iamVjdCxsPWcuQVNOMU9iamVjdCxhPWcueDUwOS5YNTAwTmFtZSxoPXBlbXRvaGV4O3RoaXMuZXhwbGljaXQ9ZmFsc2U7dGhpcy5zZXRCeVBhcmFtPWZ1bmN0aW9uKHApe3ZhciByPW51bGw7dmFyIHU9bnVsbDtpZihwPT09dW5kZWZpbmVkKXtyZXR1cm59aWYocC5yZmM4MjIhPT11bmRlZmluZWQpe3RoaXMudHlwZT1cInJmYzgyMlwiO3U9bmV3IGQoe3N0cjpwW3RoaXMudHlwZV19KX1pZihwLmRucyE9PXVuZGVmaW5lZCl7dGhpcy50eXBlPVwiZG5zXCI7dT1uZXcgZCh7c3RyOnBbdGhpcy50eXBlXX0pfWlmKHAudXJpIT09dW5kZWZpbmVkKXt0aGlzLnR5cGU9XCJ1cmlcIjt1PW5ldyBkKHtzdHI6cFt0aGlzLnR5cGVdfSl9aWYocC5kbiE9PXVuZGVmaW5lZCl7dGhpcy50eXBlPVwiZG5cIjt0aGlzLmV4cGxpY2l0PXRydWU7dT1uZXcgYSh7c3RyOnAuZG59KX1pZihwLmxkYXBkbiE9PXVuZGVmaW5lZCl7dGhpcy50eXBlPVwiZG5cIjt0aGlzLmV4cGxpY2l0PXRydWU7dT1uZXcgYSh7bGRhcHN0cjpwLmxkYXBkbn0pfWlmKHAuY2VydGlzc3VlciE9PXVuZGVmaW5lZCl7dGhpcy50eXBlPVwiZG5cIjt0aGlzLmV4cGxpY2l0PXRydWU7dmFyIG89cC5jZXJ0aXNzdWVyO3ZhciB3PW51bGw7aWYoby5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl7dz09b31pZihvLmluZGV4T2YoXCItLS0tLUJFR0lOIFwiKSE9LTEpe3c9aChvKX1pZih3PT1udWxsKXt0aHJvd1wiY2VydGlzc3VlciBwYXJhbSBub3QgY2VydFwifXZhciB0PW5ldyBYNTA5KCk7dC5oZXg9dzt2YXIgeT10LmdldElzc3VlckhleCgpO3U9bmV3IGwoKTt1LmhUTFY9eX1pZihwLmNlcnRzdWJqIT09dW5kZWZpbmVkKXt0aGlzLnR5cGU9XCJkblwiO3RoaXMuZXhwbGljaXQ9dHJ1ZTt2YXIgbz1wLmNlcnRzdWJqO3ZhciB3PW51bGw7aWYoby5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl7dz09b31pZihvLmluZGV4T2YoXCItLS0tLUJFR0lOIFwiKSE9LTEpe3c9aChvKX1pZih3PT1udWxsKXt0aHJvd1wiY2VydHN1YmogcGFyYW0gbm90IGNlcnRcIn12YXIgdD1uZXcgWDUwOSgpO3QuaGV4PXc7dmFyIHk9dC5nZXRTdWJqZWN0SGV4KCk7dT1uZXcgbCgpO3UuaFRMVj15fWlmKHAuaXAhPT11bmRlZmluZWQpe3RoaXMudHlwZT1cImlwXCI7dGhpcy5leHBsaWNpdD1mYWxzZTt2YXIgcT1wLmlwO3ZhciBzO3ZhciBuPVwibWFsZm9ybWVkIElQIGFkZHJlc3NcIjtpZihxLm1hdGNoKC9eWzAtOS5dK1suXVswLTkuXSskLykpe3M9aW50YXJ5c3RydG9oZXgoXCJbXCIrcS5zcGxpdChcIi5cIikuam9pbihcIixcIikrXCJdXCIpO2lmKHMubGVuZ3RoIT09OCl7dGhyb3cgbn19ZWxzZXtpZihxLm1hdGNoKC9eWzAtOUEtRmEtZjpdKzpbMC05QS1GYS1mOl0rJC8pKXtzPWlwdjZ0b2hleChxKX1lbHNle2lmKHEubWF0Y2goL14oWzAtOUEtRmEtZl1bMC05QS1GYS1mXSl7MSx9JC8pKXtzPXF9ZWxzZXt0aHJvdyBufX19dT1uZXcgaih7aGV4OnN9KX1pZih0aGlzLnR5cGU9PW51bGwpe3Rocm93XCJ1bnN1cHBvcnRlZCB0eXBlIGluIHBhcmFtcz1cIitwfXRoaXMuYXNuMU9iaj1uZXcgYyh7ZXhwbGljaXQ6dGhpcy5leHBsaWNpdCx0YWc6a1t0aGlzLnR5cGVdLG9iajp1fSl9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFzbjFPYmouZ2V0RW5jb2RlZEhleCgpfTtpZihlIT09dW5kZWZpbmVkKXt0aGlzLnNldEJ5UGFyYW0oZSl9fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5HZW5lcmFsTmFtZSxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLng1MDkuR2VuZXJhbE5hbWVzPWZ1bmN0aW9uKGQpe0tKVVIuYXNuMS54NTA5LkdlbmVyYWxOYW1lcy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9bnVsbCxjPUtKVVIsYj1jLmFzbjE7dGhpcy5zZXRCeVBhcmFtQXJyYXk9ZnVuY3Rpb24oZyl7Zm9yKHZhciBlPTA7ZTxnLmxlbmd0aDtlKyspe3ZhciBmPW5ldyBiLng1MDkuR2VuZXJhbE5hbWUoZ1tlXSk7dGhpcy5hc24xQXJyYXkucHVzaChmKX19O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBlPW5ldyBiLkRFUlNlcXVlbmNlKHthcnJheTp0aGlzLmFzbjFBcnJheX0pO3JldHVybiBlLmdldEVuY29kZWRIZXgoKX07dGhpcy5hc24xQXJyYXk9bmV3IEFycmF5KCk7aWYodHlwZW9mIGQhPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0QnlQYXJhbUFycmF5KGQpfX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuR2VuZXJhbE5hbWVzLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5EaXN0cmlidXRpb25Qb2ludE5hbWU9ZnVuY3Rpb24oYil7S0pVUi5hc24xLng1MDkuRGlzdHJpYnV0aW9uUG9pbnROYW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgaD1udWxsLGU9bnVsbCxhPW51bGwsZz1udWxsLGQ9S0pVUixjPWQuYXNuMSxmPWMuREVSVGFnZ2VkT2JqZWN0O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMudHlwZSE9XCJmdWxsXCIpe3Rocm93XCJjdXJyZW50bHkgdHlwZSBzaGFsbCBiZSAnZnVsbCc6IFwiK3RoaXMudHlwZX10aGlzLmFzbjFPYmo9bmV3IGYoe2V4cGxpY2l0OmZhbHNlLHRhZzp0aGlzLnRhZyxvYmo6dGhpcy5hc24xVn0pO3RoaXMuaFRMVj10aGlzLmFzbjFPYmouZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O2lmKGIhPT11bmRlZmluZWQpe2lmKGMueDUwOS5HZW5lcmFsTmFtZXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYikpe3RoaXMudHlwZT1cImZ1bGxcIjt0aGlzLnRhZz1cImEwXCI7dGhpcy5hc24xVj1ifWVsc2V7dGhyb3dcIlRoaXMgY2xhc3Mgc3VwcG9ydHMgR2VuZXJhbE5hbWVzIG9ubHkgYXMgYXJndW1lbnRcIn19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5EaXN0cmlidXRpb25Qb2ludE5hbWUsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5LkRpc3RyaWJ1dGlvblBvaW50PWZ1bmN0aW9uKGQpe0tKVVIuYXNuMS54NTA5LkRpc3RyaWJ1dGlvblBvaW50LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1udWxsLGM9S0pVUixiPWMuYXNuMTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgYi5ERVJTZXF1ZW5jZSgpO2lmKHRoaXMuYXNuMURQIT1udWxsKXt2YXIgZj1uZXcgYi5ERVJUYWdnZWRPYmplY3Qoe2V4cGxpY2l0OnRydWUsdGFnOlwiYTBcIixvYmo6dGhpcy5hc24xRFB9KTtlLmFwcGVuZEFTTjFPYmplY3QoZil9dGhpcy5oVExWPWUuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O2lmKGQhPT11bmRlZmluZWQpe2lmKGQuZHBvYmohPT11bmRlZmluZWQpe3RoaXMuYXNuMURQPWQuZHBvYmp9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuRGlzdHJpYnV0aW9uUG9pbnQsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5Lk9JRD1uZXcgZnVuY3Rpb24oYSl7dGhpcy5hdHlwZTJvaWRMaXN0PXtDTjpcIjIuNS40LjNcIixMOlwiMi41LjQuN1wiLFNUOlwiMi41LjQuOFwiLE86XCIyLjUuNC4xMFwiLE9VOlwiMi41LjQuMTFcIixDOlwiMi41LjQuNlwiLFNUUkVFVDpcIjIuNS40LjlcIixEQzpcIjAuOS4yMzQyLjE5MjAwMzAwLjEwMC4xLjI1XCIsVUlEOlwiMC45LjIzNDIuMTkyMDAzMDAuMTAwLjEuMVwiLFNOOlwiMi41LjQuNFwiLFQ6XCIyLjUuNC4xMlwiLEROOlwiMi41LjQuNDlcIixFOlwiMS4yLjg0MC4xMTM1NDkuMS45LjFcIixkZXNjcmlwdGlvbjpcIjIuNS40LjEzXCIsYnVzaW5lc3NDYXRlZ29yeTpcIjIuNS40LjE1XCIscG9zdGFsQ29kZTpcIjIuNS40LjE3XCIsc2VyaWFsTnVtYmVyOlwiMi41LjQuNVwiLHVuaXF1ZUlkZW50aWZpZXI6XCIyLjUuNC40NVwiLG9yZ2FuaXphdGlvbklkZW50aWZpZXI6XCIyLjUuNC45N1wiLGp1cmlzZGljdGlvbk9mSW5jb3Jwb3JhdGlvbkw6XCIxLjMuNi4xLjQuMS4zMTEuNjAuMi4xLjFcIixqdXJpc2RpY3Rpb25PZkluY29ycG9yYXRpb25TUDpcIjEuMy42LjEuNC4xLjMxMS42MC4yLjEuMlwiLGp1cmlzZGljdGlvbk9mSW5jb3Jwb3JhdGlvbkM6XCIxLjMuNi4xLjQuMS4zMTEuNjAuMi4xLjNcIn07dGhpcy5uYW1lMm9pZExpc3Q9e3NoYTE6XCIxLjMuMTQuMy4yLjI2XCIsc2hhMjU2OlwiMi4xNi44NDAuMS4xMDEuMy40LjIuMVwiLHNoYTM4NDpcIjIuMTYuODQwLjEuMTAxLjMuNC4yLjJcIixzaGE1MTI6XCIyLjE2Ljg0MC4xLjEwMS4zLjQuMi4zXCIsc2hhMjI0OlwiMi4xNi44NDAuMS4xMDEuMy40LjIuNFwiLG1kNTpcIjEuMi44NDAuMTEzNTQ5LjIuNVwiLG1kMjpcIjEuMy4xNC43LjIuMi4xXCIscmlwZW1kMTYwOlwiMS4zLjM2LjMuMi4xXCIsTUQyd2l0aFJTQTpcIjEuMi44NDAuMTEzNTQ5LjEuMS4yXCIsTUQ0d2l0aFJTQTpcIjEuMi44NDAuMTEzNTQ5LjEuMS4zXCIsTUQ1d2l0aFJTQTpcIjEuMi44NDAuMTEzNTQ5LjEuMS40XCIsU0hBMXdpdGhSU0E6XCIxLjIuODQwLjExMzU0OS4xLjEuNVwiLFNIQTIyNHdpdGhSU0E6XCIxLjIuODQwLjExMzU0OS4xLjEuMTRcIixTSEEyNTZ3aXRoUlNBOlwiMS4yLjg0MC4xMTM1NDkuMS4xLjExXCIsU0hBMzg0d2l0aFJTQTpcIjEuMi44NDAuMTEzNTQ5LjEuMS4xMlwiLFNIQTUxMndpdGhSU0E6XCIxLjIuODQwLjExMzU0OS4xLjEuMTNcIixTSEExd2l0aEVDRFNBOlwiMS4yLjg0MC4xMDA0NS40LjFcIixTSEEyMjR3aXRoRUNEU0E6XCIxLjIuODQwLjEwMDQ1LjQuMy4xXCIsU0hBMjU2d2l0aEVDRFNBOlwiMS4yLjg0MC4xMDA0NS40LjMuMlwiLFNIQTM4NHdpdGhFQ0RTQTpcIjEuMi44NDAuMTAwNDUuNC4zLjNcIixTSEE1MTJ3aXRoRUNEU0E6XCIxLjIuODQwLjEwMDQ1LjQuMy40XCIsZHNhOlwiMS4yLjg0MC4xMDA0MC40LjFcIixTSEExd2l0aERTQTpcIjEuMi44NDAuMTAwNDAuNC4zXCIsU0hBMjI0d2l0aERTQTpcIjIuMTYuODQwLjEuMTAxLjMuNC4zLjFcIixTSEEyNTZ3aXRoRFNBOlwiMi4xNi44NDAuMS4xMDEuMy40LjMuMlwiLHJzYUVuY3J5cHRpb246XCIxLjIuODQwLjExMzU0OS4xLjEuMVwiLGNvbW1vbk5hbWU6XCIyLjUuNC4zXCIsY291bnRyeU5hbWU6XCIyLjUuNC42XCIsbG9jYWxpdHlOYW1lOlwiMi41LjQuN1wiLHN0YXRlT3JQcm92aW5jZU5hbWU6XCIyLjUuNC44XCIsc3RyZWV0QWRkcmVzczpcIjIuNS40LjlcIixvcmdhbml6YXRpb25OYW1lOlwiMi41LjQuMTBcIixvcmdhbml6YXRpb25hbFVuaXROYW1lOlwiMi41LjQuMTFcIixkb21haW5Db21wb25lbnQ6XCIwLjkuMjM0Mi4xOTIwMDMwMC4xMDAuMS4yNVwiLHVzZXJJZDpcIjAuOS4yMzQyLjE5MjAwMzAwLjEwMC4xLjFcIixzdXJuYW1lOlwiMi41LjQuNFwiLHRpdGxlOlwiMi41LjQuMTJcIixkaXN0aW5ndWlzaGVkTmFtZTpcIjIuNS40LjQ5XCIsZW1haWxBZGRyZXNzOlwiMS4yLjg0MC4xMTM1NDkuMS45LjFcIixkZXNjcmlwdGlvbjpcIjIuNS40LjEzXCIsYnVzaW5lc3NDYXRlZ29yeTpcIjIuNS40LjE1XCIscG9zdGFsQ29kZTpcIjIuNS40LjE3XCIsdW5pcXVlSWRlbnRpZmllcjpcIjIuNS40LjQ1XCIsb3JnYW5pemF0aW9uSWRlbnRpZmllcjpcIjIuNS40Ljk3XCIsanVyaXNkaWN0aW9uT2ZJbmNvcnBvcmF0aW9uTDpcIjEuMy42LjEuNC4xLjMxMS42MC4yLjEuMVwiLGp1cmlzZGljdGlvbk9mSW5jb3Jwb3JhdGlvblNQOlwiMS4zLjYuMS40LjEuMzExLjYwLjIuMS4yXCIsanVyaXNkaWN0aW9uT2ZJbmNvcnBvcmF0aW9uQzpcIjEuMy42LjEuNC4xLjMxMS42MC4yLjEuM1wiLHN1YmplY3RLZXlJZGVudGlmaWVyOlwiMi41LjI5LjE0XCIsa2V5VXNhZ2U6XCIyLjUuMjkuMTVcIixzdWJqZWN0QWx0TmFtZTpcIjIuNS4yOS4xN1wiLGlzc3VlckFsdE5hbWU6XCIyLjUuMjkuMThcIixiYXNpY0NvbnN0cmFpbnRzOlwiMi41LjI5LjE5XCIsbmFtZUNvbnN0cmFpbnRzOlwiMi41LjI5LjMwXCIsY1JMRGlzdHJpYnV0aW9uUG9pbnRzOlwiMi41LjI5LjMxXCIsY2VydGlmaWNhdGVQb2xpY2llczpcIjIuNS4yOS4zMlwiLGF1dGhvcml0eUtleUlkZW50aWZpZXI6XCIyLjUuMjkuMzVcIixwb2xpY3lDb25zdHJhaW50czpcIjIuNS4yOS4zNlwiLGV4dEtleVVzYWdlOlwiMi41LjI5LjM3XCIsYXV0aG9yaXR5SW5mb0FjY2VzczpcIjEuMy42LjEuNS41LjcuMS4xXCIsb2NzcDpcIjEuMy42LjEuNS41LjcuNDguMVwiLGNhSXNzdWVyczpcIjEuMy42LjEuNS41LjcuNDguMlwiLGFueUV4dGVuZGVkS2V5VXNhZ2U6XCIyLjUuMjkuMzcuMFwiLHNlcnZlckF1dGg6XCIxLjMuNi4xLjUuNS43LjMuMVwiLGNsaWVudEF1dGg6XCIxLjMuNi4xLjUuNS43LjMuMlwiLGNvZGVTaWduaW5nOlwiMS4zLjYuMS41LjUuNy4zLjNcIixlbWFpbFByb3RlY3Rpb246XCIxLjMuNi4xLjUuNS43LjMuNFwiLHRpbWVTdGFtcGluZzpcIjEuMy42LjEuNS41LjcuMy44XCIsb2NzcFNpZ25pbmc6XCIxLjMuNi4xLjUuNS43LjMuOVwiLGVjUHVibGljS2V5OlwiMS4yLjg0MC4xMDA0NS4yLjFcIixzZWNwMjU2cjE6XCIxLjIuODQwLjEwMDQ1LjMuMS43XCIsc2VjcDI1NmsxOlwiMS4zLjEzMi4wLjEwXCIsc2VjcDM4NHIxOlwiMS4zLjEzMi4wLjM0XCIscGtjczVQQkVTMjpcIjEuMi44NDAuMTEzNTQ5LjEuNS4xM1wiLHBrY3M1UEJLREYyOlwiMS4yLjg0MC4xMTM1NDkuMS41LjEyXCIsXCJkZXMtRURFMy1DQkNcIjpcIjEuMi44NDAuMTEzNTQ5LjMuN1wiLGRhdGE6XCIxLjIuODQwLjExMzU0OS4xLjcuMVwiLFwic2lnbmVkLWRhdGFcIjpcIjEuMi44NDAuMTEzNTQ5LjEuNy4yXCIsXCJlbnZlbG9wZWQtZGF0YVwiOlwiMS4yLjg0MC4xMTM1NDkuMS43LjNcIixcImRpZ2VzdGVkLWRhdGFcIjpcIjEuMi44NDAuMTEzNTQ5LjEuNy41XCIsXCJlbmNyeXB0ZWQtZGF0YVwiOlwiMS4yLjg0MC4xMTM1NDkuMS43LjZcIixcImF1dGhlbnRpY2F0ZWQtZGF0YVwiOlwiMS4yLjg0MC4xMTM1NDkuMS45LjE2LjEuMlwiLHRzdGluZm86XCIxLjIuODQwLjExMzU0OS4xLjkuMTYuMS40XCIsZXh0ZW5zaW9uUmVxdWVzdDpcIjEuMi44NDAuMTEzNTQ5LjEuOS4xNFwiLH07dGhpcy5vYmpDYWNoZT17fTt0aGlzLm5hbWUyb2JqPWZ1bmN0aW9uKGIpe2lmKHR5cGVvZiB0aGlzLm9iakNhY2hlW2JdIT1cInVuZGVmaW5lZFwiKXtyZXR1cm4gdGhpcy5vYmpDYWNoZVtiXX1pZih0eXBlb2YgdGhpcy5uYW1lMm9pZExpc3RbYl09PVwidW5kZWZpbmVkXCIpe3Rocm93XCJOYW1lIG9mIE9iamVjdElkZW50aWZpZXIgbm90IGRlZmluZWQ6IFwiK2J9dmFyIGM9dGhpcy5uYW1lMm9pZExpc3RbYl07dmFyIGQ9bmV3IEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyKHtvaWQ6Y30pO3RoaXMub2JqQ2FjaGVbYl09ZDtyZXR1cm4gZH07dGhpcy5hdHlwZTJvYmo9ZnVuY3Rpb24oYil7aWYodHlwZW9mIHRoaXMub2JqQ2FjaGVbYl0hPVwidW5kZWZpbmVkXCIpe3JldHVybiB0aGlzLm9iakNhY2hlW2JdfWlmKHR5cGVvZiB0aGlzLmF0eXBlMm9pZExpc3RbYl09PVwidW5kZWZpbmVkXCIpe3Rocm93XCJBdHRyaWJ1dGVUeXBlIG5hbWUgdW5kZWZpbmVkOiBcIitifXZhciBjPXRoaXMuYXR5cGUyb2lkTGlzdFtiXTt2YXIgZD1uZXcgS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIoe29pZDpjfSk7dGhpcy5vYmpDYWNoZVtiXT1kO3JldHVybiBkfX07S0pVUi5hc24xLng1MDkuT0lELm9pZDJuYW1lPWZ1bmN0aW9uKGIpe3ZhciBjPUtKVVIuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZExpc3Q7Zm9yKHZhciBhIGluIGMpe2lmKGNbYV09PWIpe3JldHVybiBhfX1yZXR1cm5cIlwifTtLSlVSLmFzbjEueDUwOS5PSUQub2lkMmF0eXBlPWZ1bmN0aW9uKGIpe3ZhciBjPUtKVVIuYXNuMS54NTA5Lk9JRC5hdHlwZTJvaWRMaXN0O2Zvcih2YXIgYSBpbiBjKXtpZihjW2FdPT1iKXtyZXR1cm4gYX19cmV0dXJuIGJ9O0tKVVIuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZD1mdW5jdGlvbihhKXt2YXIgYj1LSlVSLmFzbjEueDUwOS5PSUQubmFtZTJvaWRMaXN0O2lmKGJbYV09PT11bmRlZmluZWQpe3JldHVyblwiXCJ9cmV0dXJuIGJbYV19O0tKVVIuYXNuMS54NTA5Llg1MDlVdGlsPXt9O0tKVVIuYXNuMS54NTA5Llg1MDlVdGlsLm5ld0NlcnRQRU09ZnVuY3Rpb24oaCl7dmFyIGc9S0pVUi5hc24xLng1MDksYj1nLlRCU0NlcnRpZmljYXRlLGE9Zy5DZXJ0aWZpY2F0ZTt2YXIgZj1uZXcgYigpO2lmKGguc2VyaWFsIT09dW5kZWZpbmVkKXtmLnNldFNlcmlhbE51bWJlckJ5UGFyYW0oaC5zZXJpYWwpfWVsc2V7dGhyb3dcInNlcmlhbCBudW1iZXIgdW5kZWZpbmVkLlwifWlmKHR5cGVvZiBoLnNpZ2FsZy5uYW1lPT09XCJzdHJpbmdcIil7Zi5zZXRTaWduYXR1cmVBbGdCeVBhcmFtKGguc2lnYWxnKX1lbHNle3Rocm93XCJ1bnByb3BlciBzaWduYXR1cmUgYWxnb3JpdGhtIG5hbWVcIn1pZihoLmlzc3VlciE9PXVuZGVmaW5lZCl7Zi5zZXRJc3N1ZXJCeVBhcmFtKGguaXNzdWVyKX1lbHNle3Rocm93XCJpc3N1ZXIgbmFtZSB1bmRlZmluZWQuXCJ9aWYoaC5ub3RiZWZvcmUhPT11bmRlZmluZWQpe2Yuc2V0Tm90QmVmb3JlQnlQYXJhbShoLm5vdGJlZm9yZSl9ZWxzZXt0aHJvd1wibm90YmVmb3JlIHVuZGVmaW5lZC5cIn1pZihoLm5vdGFmdGVyIT09dW5kZWZpbmVkKXtmLnNldE5vdEFmdGVyQnlQYXJhbShoLm5vdGFmdGVyKX1lbHNle3Rocm93XCJub3RhZnRlciB1bmRlZmluZWQuXCJ9aWYoaC5zdWJqZWN0IT09dW5kZWZpbmVkKXtmLnNldFN1YmplY3RCeVBhcmFtKGguc3ViamVjdCl9ZWxzZXt0aHJvd1wic3ViamVjdCBuYW1lIHVuZGVmaW5lZC5cIn1pZihoLnNianB1YmtleSE9PXVuZGVmaW5lZCl7Zi5zZXRTdWJqZWN0UHVibGljS2V5QnlHZXRLZXkoaC5zYmpwdWJrZXkpfWVsc2V7dGhyb3dcInN1YmplY3QgcHVibGljIGtleSB1bmRlZmluZWQuXCJ9aWYoaC5leHQhPT11bmRlZmluZWQmJmguZXh0Lmxlbmd0aCE9PXVuZGVmaW5lZCl7Zm9yKHZhciBkPTA7ZDxoLmV4dC5sZW5ndGg7ZCsrKXtmb3Ioa2V5IGluIGguZXh0W2RdKXtmLmFwcGVuZEV4dGVuc2lvbkJ5TmFtZShrZXksaC5leHRbZF1ba2V5XSl9fX1pZihoLmNha2V5PT09dW5kZWZpbmVkJiZoLnNpZ2hleD09PXVuZGVmaW5lZCl7dGhyb3dcInBhcmFtIGNha2V5IGFuZCBzaWdoZXggdW5kZWZpbmVkLlwifXZhciBlPW51bGw7dmFyIGM9bnVsbDtpZihoLmNha2V5KXtpZihoLmNha2V5LmlzUHJpdmF0ZT09PXRydWUpe2U9aC5jYWtleX1lbHNle2U9S0VZVVRJTC5nZXRLZXkuYXBwbHkobnVsbCxoLmNha2V5KX1jPW5ldyBhKHt0YnNjZXJ0b2JqOmYscHJ2a2V5b2JqOmV9KTtjLnNpZ24oKX1pZihoLnNpZ2hleCl7Yz1uZXcgYSh7dGJzY2VydG9iajpmfSk7Yy5zZXRTaWduYXR1cmVIZXgoaC5zaWdoZXgpfXJldHVybiBjLmdldFBFTVN0cmluZygpfTtcbnZhciBLSlVSO2lmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5sYW5nPT1cInVuZGVmaW5lZFwifHwhS0pVUi5sYW5nKXtLSlVSLmxhbmc9e319S0pVUi5sYW5nLlN0cmluZz1mdW5jdGlvbigpe307ZnVuY3Rpb24gQmFzZTY0eCgpe31mdW5jdGlvbiBzdG9CQShkKXt2YXIgYj1uZXcgQXJyYXkoKTtmb3IodmFyIGM9MDtjPGQubGVuZ3RoO2MrKyl7YltjXT1kLmNoYXJDb2RlQXQoYyl9cmV0dXJuIGJ9ZnVuY3Rpb24gQkF0b3MoYil7dmFyIGQ9XCJcIjtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl7ZD1kK1N0cmluZy5mcm9tQ2hhckNvZGUoYltjXSl9cmV0dXJuIGR9ZnVuY3Rpb24gQkF0b2hleChiKXt2YXIgZT1cIlwiO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgYz1iW2RdLnRvU3RyaW5nKDE2KTtpZihjLmxlbmd0aD09MSl7Yz1cIjBcIitjfWU9ZStjfXJldHVybiBlfWZ1bmN0aW9uIHN0b2hleChhKXtyZXR1cm4gQkF0b2hleChzdG9CQShhKSl9ZnVuY3Rpb24gc3RvYjY0KGEpe3JldHVybiBoZXgyYjY0KHN0b2hleChhKSl9ZnVuY3Rpb24gc3RvYjY0dShhKXtyZXR1cm4gYjY0dG9iNjR1KGhleDJiNjQoc3RvaGV4KGEpKSl9ZnVuY3Rpb24gYjY0dXRvcyhhKXtyZXR1cm4gQkF0b3MoYjY0dG9CQShiNjR1dG9iNjQoYSkpKX1mdW5jdGlvbiBiNjR0b2I2NHUoYSl7YT1hLnJlcGxhY2UoL1xcPS9nLFwiXCIpO2E9YS5yZXBsYWNlKC9cXCsvZyxcIi1cIik7YT1hLnJlcGxhY2UoL1xcLy9nLFwiX1wiKTtyZXR1cm4gYX1mdW5jdGlvbiBiNjR1dG9iNjQoYSl7aWYoYS5sZW5ndGglND09Mil7YT1hK1wiPT1cIn1lbHNle2lmKGEubGVuZ3RoJTQ9PTMpe2E9YStcIj1cIn19YT1hLnJlcGxhY2UoLy0vZyxcIitcIik7YT1hLnJlcGxhY2UoL18vZyxcIi9cIik7cmV0dXJuIGF9ZnVuY3Rpb24gaGV4dG9iNjR1KGEpe2lmKGEubGVuZ3RoJTI9PTEpe2E9XCIwXCIrYX1yZXR1cm4gYjY0dG9iNjR1KGhleDJiNjQoYSkpfWZ1bmN0aW9uIGI2NHV0b2hleChhKXtyZXR1cm4gYjY0dG9oZXgoYjY0dXRvYjY0KGEpKX12YXIgdXRmOHRvYjY0dSxiNjR1dG91dGY4O2lmKHR5cGVvZiBCdWZmZXI9PT1cImZ1bmN0aW9uXCIpe3V0Zjh0b2I2NHU9ZnVuY3Rpb24oYSl7cmV0dXJuIGI2NHRvYjY0dShuZXcgQnVmZmVyKGEsXCJ1dGY4XCIpLnRvU3RyaW5nKFwiYmFzZTY0XCIpKX07YjY0dXRvdXRmOD1mdW5jdGlvbihhKXtyZXR1cm4gbmV3IEJ1ZmZlcihiNjR1dG9iNjQoYSksXCJiYXNlNjRcIikudG9TdHJpbmcoXCJ1dGY4XCIpfX1lbHNle3V0Zjh0b2I2NHU9ZnVuY3Rpb24oYSl7cmV0dXJuIGhleHRvYjY0dSh1cmljbXB0b2hleChlbmNvZGVVUklDb21wb25lbnRBbGwoYSkpKX07YjY0dXRvdXRmOD1mdW5jdGlvbihhKXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGhleHRvdXJpY21wKGI2NHV0b2hleChhKSkpfX1mdW5jdGlvbiB1dGY4dG9iNjQoYSl7cmV0dXJuIGhleDJiNjQodXJpY21wdG9oZXgoZW5jb2RlVVJJQ29tcG9uZW50QWxsKGEpKSl9ZnVuY3Rpb24gYjY0dG91dGY4KGEpe3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoaGV4dG91cmljbXAoYjY0dG9oZXgoYSkpKX1mdW5jdGlvbiB1dGY4dG9oZXgoYSl7cmV0dXJuIHVyaWNtcHRvaGV4KGVuY29kZVVSSUNvbXBvbmVudEFsbChhKSl9ZnVuY3Rpb24gaGV4dG91dGY4KGEpe3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoaGV4dG91cmljbXAoYSkpfWZ1bmN0aW9uIGhleHRvcnN0cihjKXt2YXIgYj1cIlwiO2Zvcih2YXIgYT0wO2E8Yy5sZW5ndGgtMTthKz0yKXtiKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGMuc3Vic3RyKGEsMiksMTYpKX1yZXR1cm4gYn1mdW5jdGlvbiByc3RydG9oZXgoYyl7dmFyIGE9XCJcIjtmb3IodmFyIGI9MDtiPGMubGVuZ3RoO2IrKyl7YSs9KFwiMFwiK2MuY2hhckNvZGVBdChiKS50b1N0cmluZygxNikpLnNsaWNlKC0yKX1yZXR1cm4gYX1mdW5jdGlvbiBoZXh0b2I2NChhKXtyZXR1cm4gaGV4MmI2NChhKX1mdW5jdGlvbiBoZXh0b2I2NG5sKGIpe3ZhciBhPWhleHRvYjY0KGIpO3ZhciBjPWEucmVwbGFjZSgvKC57NjR9KS9nLFwiJDFcXHJcXG5cIik7Yz1jLnJlcGxhY2UoL1xcclxcbiQvLFwiXCIpO3JldHVybiBjfWZ1bmN0aW9uIGI2NG5sdG9oZXgoYil7dmFyIGE9Yi5yZXBsYWNlKC9bXjAtOUEtWmEtelxcLys9XSovZyxcIlwiKTt2YXIgYz1iNjR0b2hleChhKTtyZXR1cm4gY31mdW5jdGlvbiBoZXh0b3BlbShhLGIpe3ZhciBjPWhleHRvYjY0bmwoYSk7cmV0dXJuXCItLS0tLUJFR0lOIFwiK2IrXCItLS0tLVxcclxcblwiK2MrXCJcXHJcXG4tLS0tLUVORCBcIitiK1wiLS0tLS1cXHJcXG5cIn1mdW5jdGlvbiBwZW10b2hleChhLGIpe2lmKGEuaW5kZXhPZihcIi0tLS0tQkVHSU4gXCIpPT0tMSl7dGhyb3dcImNhbid0IGZpbmQgUEVNIGhlYWRlcjogXCIrYn1pZihiIT09dW5kZWZpbmVkKXthPWEucmVwbGFjZShcIi0tLS0tQkVHSU4gXCIrYitcIi0tLS0tXCIsXCJcIik7YT1hLnJlcGxhY2UoXCItLS0tLUVORCBcIitiK1wiLS0tLS1cIixcIlwiKX1lbHNle2E9YS5yZXBsYWNlKC8tLS0tLUJFR0lOIFteLV0rLS0tLS0vLFwiXCIpO2E9YS5yZXBsYWNlKC8tLS0tLUVORCBbXi1dKy0tLS0tLyxcIlwiKX1yZXR1cm4gYjY0bmx0b2hleChhKX1mdW5jdGlvbiBoZXh0b0FycmF5QnVmZmVyKGQpe2lmKGQubGVuZ3RoJTIhPTApe3Rocm93XCJpbnB1dCBpcyBub3QgZXZlbiBsZW5ndGhcIn1pZihkLm1hdGNoKC9eWzAtOUEtRmEtZl0rJC8pPT1udWxsKXt0aHJvd1wiaW5wdXQgaXMgbm90IGhleGFkZWNpbWFsXCJ9dmFyIGI9bmV3IEFycmF5QnVmZmVyKGQubGVuZ3RoLzIpO3ZhciBhPW5ldyBEYXRhVmlldyhiKTtmb3IodmFyIGM9MDtjPGQubGVuZ3RoLzI7YysrKXthLnNldFVpbnQ4KGMscGFyc2VJbnQoZC5zdWJzdHIoYyoyLDIpLDE2KSl9cmV0dXJuIGJ9ZnVuY3Rpb24gQXJyYXlCdWZmZXJ0b2hleChiKXt2YXIgZD1cIlwiO3ZhciBhPW5ldyBEYXRhVmlldyhiKTtmb3IodmFyIGM9MDtjPGIuYnl0ZUxlbmd0aDtjKyspe2QrPShcIjAwXCIrYS5nZXRVaW50OChjKS50b1N0cmluZygxNikpLnNsaWNlKC0yKX1yZXR1cm4gZH1mdW5jdGlvbiB6dWx1dG9tc2VjKG4pe3ZhciBsLGosbSxlLGYsaSxiLGs7dmFyIGEsaCxnLGM7Yz1uLm1hdGNoKC9eKFxcZHsyfXxcXGR7NH0pKFxcZFxcZCkoXFxkXFxkKShcXGRcXGQpKFxcZFxcZCkoXFxkXFxkKSh8XFwuXFxkKylaJC8pO2lmKGMpe2E9Y1sxXTtsPXBhcnNlSW50KGEpO2lmKGEubGVuZ3RoPT09Mil7aWYoNTA8PWwmJmw8MTAwKXtsPTE5MDArbH1lbHNle2lmKDA8PWwmJmw8NTApe2w9MjAwMCtsfX19aj1wYXJzZUludChjWzJdKS0xO209cGFyc2VJbnQoY1szXSk7ZT1wYXJzZUludChjWzRdKTtmPXBhcnNlSW50KGNbNV0pO2k9cGFyc2VJbnQoY1s2XSk7Yj0wO2g9Y1s3XTtpZihoIT09XCJcIil7Zz0oaC5zdWJzdHIoMSkrXCIwMFwiKS5zdWJzdHIoMCwzKTtiPXBhcnNlSW50KGcpfXJldHVybiBEYXRlLlVUQyhsLGosbSxlLGYsaSxiKX10aHJvd1widW5zdXBwb3J0ZWQgenVsdSBmb3JtYXQ6IFwiK259ZnVuY3Rpb24genVsdXRvc2VjKGEpe3ZhciBiPXp1bHV0b21zZWMoYSk7cmV0dXJuIH5+KGIvMTAwMCl9ZnVuY3Rpb24genVsdXRvZGF0ZShhKXtyZXR1cm4gbmV3IERhdGUoenVsdXRvbXNlYyhhKSl9ZnVuY3Rpb24gZGF0ZXRvenVsdShnLGUsZil7dmFyIGI7dmFyIGE9Zy5nZXRVVENGdWxsWWVhcigpO2lmKGUpe2lmKGE8MTk1MHx8MjA0OTxhKXt0aHJvd1wibm90IHByb3BlciB5ZWFyIGZvciBVVENUaW1lOiBcIithfWI9KFwiXCIrYSkuc2xpY2UoLTIpfWVsc2V7Yj0oXCIwMDBcIithKS5zbGljZSgtNCl9Yis9KFwiMFwiKyhnLmdldFVUQ01vbnRoKCkrMSkpLnNsaWNlKC0yKTtiKz0oXCIwXCIrZy5nZXRVVENEYXRlKCkpLnNsaWNlKC0yKTtiKz0oXCIwXCIrZy5nZXRVVENIb3VycygpKS5zbGljZSgtMik7Yis9KFwiMFwiK2cuZ2V0VVRDTWludXRlcygpKS5zbGljZSgtMik7Yis9KFwiMFwiK2cuZ2V0VVRDU2Vjb25kcygpKS5zbGljZSgtMik7aWYoZil7dmFyIGM9Zy5nZXRVVENNaWxsaXNlY29uZHMoKTtpZihjIT09MCl7Yz0oXCIwMFwiK2MpLnNsaWNlKC0zKTtjPWMucmVwbGFjZSgvMCskL2csXCJcIik7Yis9XCIuXCIrY319Yis9XCJaXCI7cmV0dXJuIGJ9ZnVuY3Rpb24gdXJpY21wdG9oZXgoYSl7cmV0dXJuIGEucmVwbGFjZSgvJS9nLFwiXCIpfWZ1bmN0aW9uIGhleHRvdXJpY21wKGEpe3JldHVybiBhLnJlcGxhY2UoLyguLikvZyxcIiUkMVwiKX1mdW5jdGlvbiBpcHY2dG9oZXgoZyl7dmFyIGI9XCJtYWxmb3JtZWQgSVB2NiBhZGRyZXNzXCI7aWYoIWcubWF0Y2goL15bMC05QS1GYS1mOl0rJC8pKXt0aHJvdyBifWc9Zy50b0xvd2VyQ2FzZSgpO3ZhciBkPWcuc3BsaXQoXCI6XCIpLmxlbmd0aC0xO2lmKGQ8Mil7dGhyb3cgYn12YXIgZT1cIjpcIi5yZXBlYXQoNy1kKzIpO2c9Zy5yZXBsYWNlKFwiOjpcIixlKTt2YXIgYz1nLnNwbGl0KFwiOlwiKTtpZihjLmxlbmd0aCE9OCl7dGhyb3cgYn1mb3IodmFyIGY9MDtmPDg7ZisrKXtjW2ZdPShcIjAwMDBcIitjW2ZdKS5zbGljZSgtNCl9cmV0dXJuIGMuam9pbihcIlwiKX1mdW5jdGlvbiBoZXh0b2lwdjYoZSl7aWYoIWUubWF0Y2goL15bMC05QS1GYS1mXXszMn0kLykpe3Rocm93XCJtYWxmb3JtZWQgSVB2NiBhZGRyZXNzIG9jdGV0XCJ9ZT1lLnRvTG93ZXJDYXNlKCk7dmFyIGI9ZS5tYXRjaCgvLnsxLDR9L2cpO2Zvcih2YXIgZD0wO2Q8ODtkKyspe2JbZF09YltkXS5yZXBsYWNlKC9eMCsvLFwiXCIpO2lmKGJbZF09PVwiXCIpe2JbZF09XCIwXCJ9fWU9XCI6XCIrYi5qb2luKFwiOlwiKStcIjpcIjt2YXIgYz1lLm1hdGNoKC86KDA6KXsyLH0vZyk7aWYoYz09PW51bGwpe3JldHVybiBlLnNsaWNlKDEsLTEpfXZhciBmPVwiXCI7Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe2lmKGNbZF0ubGVuZ3RoPmYubGVuZ3RoKXtmPWNbZF19fWU9ZS5yZXBsYWNlKGYsXCI6OlwiKTtyZXR1cm4gZS5zbGljZSgxLC0xKX1mdW5jdGlvbiBoZXh0b2lwKGIpe3ZhciBkPVwibWFsZm9ybWVkIGhleCB2YWx1ZVwiO2lmKCFiLm1hdGNoKC9eKFswLTlBLUZhLWZdWzAtOUEtRmEtZl0pezEsfSQvKSl7dGhyb3cgZH1pZihiLmxlbmd0aD09OCl7dmFyIGM7dHJ5e2M9cGFyc2VJbnQoYi5zdWJzdHIoMCwyKSwxNikrXCIuXCIrcGFyc2VJbnQoYi5zdWJzdHIoMiwyKSwxNikrXCIuXCIrcGFyc2VJbnQoYi5zdWJzdHIoNCwyKSwxNikrXCIuXCIrcGFyc2VJbnQoYi5zdWJzdHIoNiwyKSwxNik7cmV0dXJuIGN9Y2F0Y2goYSl7dGhyb3cgZH19ZWxzZXtpZihiLmxlbmd0aD09MzIpe3JldHVybiBoZXh0b2lwdjYoYil9ZWxzZXtyZXR1cm4gYn19fWZ1bmN0aW9uIGlwdG9oZXgoZil7dmFyIGo9XCJtYWxmb3JtZWQgSVAgYWRkcmVzc1wiO2Y9Zi50b0xvd2VyQ2FzZShmKTtpZihmLm1hdGNoKC9eWzAtOS5dKyQvKSl7dmFyIGI9Zi5zcGxpdChcIi5cIik7aWYoYi5sZW5ndGghPT00KXt0aHJvdyBqfXZhciBnPVwiXCI7dHJ5e2Zvcih2YXIgZT0wO2U8NDtlKyspe3ZhciBoPXBhcnNlSW50KGJbZV0pO2crPShcIjBcIitoLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpfXJldHVybiBnfWNhdGNoKGMpe3Rocm93IGp9fWVsc2V7aWYoZi5tYXRjaCgvXlswLTlhLWY6XSskLykmJmYuaW5kZXhPZihcIjpcIikhPT0tMSl7cmV0dXJuIGlwdjZ0b2hleChmKX1lbHNle3Rocm93IGp9fX1mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRBbGwoYSl7dmFyIGQ9ZW5jb2RlVVJJQ29tcG9uZW50KGEpO3ZhciBiPVwiXCI7Zm9yKHZhciBjPTA7YzxkLmxlbmd0aDtjKyspe2lmKGRbY109PVwiJVwiKXtiPWIrZC5zdWJzdHIoYywzKTtjPWMrMn1lbHNle2I9YitcIiVcIitzdG9oZXgoZFtjXSl9fXJldHVybiBifWZ1bmN0aW9uIG5ld2xpbmVfdG9Vbml4KGEpe2E9YS5yZXBsYWNlKC9cXHJcXG4vbWcsXCJcXG5cIik7cmV0dXJuIGF9ZnVuY3Rpb24gbmV3bGluZV90b0RvcyhhKXthPWEucmVwbGFjZSgvXFxyXFxuL21nLFwiXFxuXCIpO2E9YS5yZXBsYWNlKC9cXG4vbWcsXCJcXHJcXG5cIik7cmV0dXJuIGF9S0pVUi5sYW5nLlN0cmluZy5pc0ludGVnZXI9ZnVuY3Rpb24oYSl7aWYoYS5tYXRjaCgvXlswLTldKyQvKSl7cmV0dXJuIHRydWV9ZWxzZXtpZihhLm1hdGNoKC9eLVswLTldKyQvKSl7cmV0dXJuIHRydWV9ZWxzZXtyZXR1cm4gZmFsc2V9fX07S0pVUi5sYW5nLlN0cmluZy5pc0hleD1mdW5jdGlvbihhKXtpZihhLmxlbmd0aCUyPT0wJiYoYS5tYXRjaCgvXlswLTlhLWZdKyQvKXx8YS5tYXRjaCgvXlswLTlBLUZdKyQvKSkpe3JldHVybiB0cnVlfWVsc2V7cmV0dXJuIGZhbHNlfX07S0pVUi5sYW5nLlN0cmluZy5pc0Jhc2U2ND1mdW5jdGlvbihhKXthPWEucmVwbGFjZSgvXFxzKy9nLFwiXCIpO2lmKGEubWF0Y2goL15bMC05QS1aYS16K1xcL10rPXswLDN9JC8pJiZhLmxlbmd0aCU0PT0wKXtyZXR1cm4gdHJ1ZX1lbHNle3JldHVybiBmYWxzZX19O0tKVVIubGFuZy5TdHJpbmcuaXNCYXNlNjRVUkw9ZnVuY3Rpb24oYSl7aWYoYS5tYXRjaCgvWysvPV0vKSl7cmV0dXJuIGZhbHNlfWE9YjY0dXRvYjY0KGEpO3JldHVybiBLSlVSLmxhbmcuU3RyaW5nLmlzQmFzZTY0KGEpfTtLSlVSLmxhbmcuU3RyaW5nLmlzSW50ZWdlckFycmF5PWZ1bmN0aW9uKGEpe2E9YS5yZXBsYWNlKC9cXHMrL2csXCJcIik7aWYoYS5tYXRjaCgvXlxcW1swLTksXStcXF0kLykpe3JldHVybiB0cnVlfWVsc2V7cmV0dXJuIGZhbHNlfX07ZnVuY3Rpb24gaGV4dG9wb3NoZXgoYSl7aWYoYS5sZW5ndGglMj09MSl7cmV0dXJuXCIwXCIrYX1pZihhLnN1YnN0cigwLDEpPlwiN1wiKXtyZXR1cm5cIjAwXCIrYX1yZXR1cm4gYX1mdW5jdGlvbiBpbnRhcnlzdHJ0b2hleChiKXtiPWIucmVwbGFjZSgvXlxccypcXFtcXHMqLyxcIlwiKTtiPWIucmVwbGFjZSgvXFxzKlxcXVxccyokLyxcIlwiKTtiPWIucmVwbGFjZSgvXFxzKi9nLFwiXCIpO3RyeXt2YXIgYz1iLnNwbGl0KC8sLykubWFwKGZ1bmN0aW9uKGcsZSxoKXt2YXIgZj1wYXJzZUludChnKTtpZihmPDB8fDI1NTxmKXt0aHJvd1wiaW50ZWdlciBub3QgaW4gcmFuZ2UgMC0yNTVcIn12YXIgZD0oXCIwMFwiK2YudG9TdHJpbmcoMTYpKS5zbGljZSgtMik7cmV0dXJuIGR9KS5qb2luKFwiXCIpO3JldHVybiBjfWNhdGNoKGEpe3Rocm93XCJtYWxmb3JtZWQgaW50ZWdlciBhcnJheSBzdHJpbmc6IFwiK2F9fXZhciBzdHJkaWZmaWR4PWZ1bmN0aW9uKGMsYSl7dmFyIGQ9Yy5sZW5ndGg7aWYoYy5sZW5ndGg+YS5sZW5ndGgpe2Q9YS5sZW5ndGh9Zm9yKHZhciBiPTA7YjxkO2IrKyl7aWYoYy5jaGFyQ29kZUF0KGIpIT1hLmNoYXJDb2RlQXQoYikpe3JldHVybiBifX1pZihjLmxlbmd0aCE9YS5sZW5ndGgpe3JldHVybiBkfXJldHVybiAtMX07XG5pZih0eXBlb2YgS0pVUj09XCJ1bmRlZmluZWRcInx8IUtKVVIpe0tKVVI9e319aWYodHlwZW9mIEtKVVIuY3J5cHRvPT1cInVuZGVmaW5lZFwifHwhS0pVUi5jcnlwdG8pe0tKVVIuY3J5cHRvPXt9fUtKVVIuY3J5cHRvLlV0aWw9bmV3IGZ1bmN0aW9uKCl7dGhpcy5ESUdFU1RJTkZPSEVBRD17c2hhMTpcIjMwMjEzMDA5MDYwNTJiMGUwMzAyMWEwNTAwMDQxNFwiLHNoYTIyNDpcIjMwMmQzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwNDA1MDAwNDFjXCIsc2hhMjU2OlwiMzAzMTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAxMDUwMDA0MjBcIixzaGEzODQ6XCIzMDQxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDIwNTAwMDQzMFwiLHNoYTUxMjpcIjMwNTEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMzA1MDAwNDQwXCIsbWQyOlwiMzAyMDMwMGMwNjA4MmE4NjQ4ODZmNzBkMDIwMjA1MDAwNDEwXCIsbWQ1OlwiMzAyMDMwMGMwNjA4MmE4NjQ4ODZmNzBkMDIwNTA1MDAwNDEwXCIscmlwZW1kMTYwOlwiMzAyMTMwMDkwNjA1MmIyNDAzMDIwMTA1MDAwNDE0XCIsfTt0aGlzLkRFRkFVTFRQUk9WSURFUj17bWQ1OlwiY3J5cHRvanNcIixzaGExOlwiY3J5cHRvanNcIixzaGEyMjQ6XCJjcnlwdG9qc1wiLHNoYTI1NjpcImNyeXB0b2pzXCIsc2hhMzg0OlwiY3J5cHRvanNcIixzaGE1MTI6XCJjcnlwdG9qc1wiLHJpcGVtZDE2MDpcImNyeXB0b2pzXCIsaG1hY21kNTpcImNyeXB0b2pzXCIsaG1hY3NoYTE6XCJjcnlwdG9qc1wiLGhtYWNzaGEyMjQ6XCJjcnlwdG9qc1wiLGhtYWNzaGEyNTY6XCJjcnlwdG9qc1wiLGhtYWNzaGEzODQ6XCJjcnlwdG9qc1wiLGhtYWNzaGE1MTI6XCJjcnlwdG9qc1wiLGhtYWNyaXBlbWQxNjA6XCJjcnlwdG9qc1wiLE1ENXdpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTF3aXRoUlNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyMjR3aXRoUlNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyNTZ3aXRoUlNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEzODR3aXRoUlNBOlwiY3J5cHRvanMvanNyc2FcIixTSEE1MTJ3aXRoUlNBOlwiY3J5cHRvanMvanNyc2FcIixSSVBFTUQxNjB3aXRoUlNBOlwiY3J5cHRvanMvanNyc2FcIixNRDV3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTF3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTIyNHdpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjU2d2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEzODR3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTUxMndpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsUklQRU1EMTYwd2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEExd2l0aERTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjI0d2l0aERTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjU2d2l0aERTQTpcImNyeXB0b2pzL2pzcnNhXCIsTUQ1d2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTF3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjI0d2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTI1NndpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIixTSEEzODR3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBNTEyd2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLFJJUEVNRDE2MHdpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIix9O3RoaXMuQ1JZUFRPSlNNRVNTQUdFRElHRVNUTkFNRT17bWQ1OkNyeXB0b0pTLmFsZ28uTUQ1LHNoYTE6Q3J5cHRvSlMuYWxnby5TSEExLHNoYTIyNDpDcnlwdG9KUy5hbGdvLlNIQTIyNCxzaGEyNTY6Q3J5cHRvSlMuYWxnby5TSEEyNTYsc2hhMzg0OkNyeXB0b0pTLmFsZ28uU0hBMzg0LHNoYTUxMjpDcnlwdG9KUy5hbGdvLlNIQTUxMixyaXBlbWQxNjA6Q3J5cHRvSlMuYWxnby5SSVBFTUQxNjB9O3RoaXMuZ2V0RGlnZXN0SW5mb0hleD1mdW5jdGlvbihhLGIpe2lmKHR5cGVvZiB0aGlzLkRJR0VTVElORk9IRUFEW2JdPT1cInVuZGVmaW5lZFwiKXt0aHJvd1wiYWxnIG5vdCBzdXBwb3J0ZWQgaW4gVXRpbC5ESUdFU1RJTkZPSEVBRDogXCIrYn1yZXR1cm4gdGhpcy5ESUdFU1RJTkZPSEVBRFtiXSthfTt0aGlzLmdldFBhZGRlZERpZ2VzdEluZm9IZXg9ZnVuY3Rpb24oaCxhLGope3ZhciBjPXRoaXMuZ2V0RGlnZXN0SW5mb0hleChoLGEpO3ZhciBkPWovNDtpZihjLmxlbmd0aCsyMj5kKXt0aHJvd1wia2V5IGlzIHRvbyBzaG9ydCBmb3IgU2lnQWxnOiBrZXlsZW49XCIraitcIixcIithfXZhciBiPVwiMDAwMVwiO3ZhciBrPVwiMDBcIitjO3ZhciBnPVwiXCI7dmFyIGw9ZC1iLmxlbmd0aC1rLmxlbmd0aDtmb3IodmFyIGY9MDtmPGw7Zis9Mil7Zys9XCJmZlwifXZhciBlPWIrZytrO3JldHVybiBlfTt0aGlzLmhhc2hTdHJpbmc9ZnVuY3Rpb24oYSxjKXt2YXIgYj1uZXcgS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOmN9KTtyZXR1cm4gYi5kaWdlc3RTdHJpbmcoYSl9O3RoaXMuaGFzaEhleD1mdW5jdGlvbihiLGMpe3ZhciBhPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6Y30pO3JldHVybiBhLmRpZ2VzdEhleChiKX07dGhpcy5zaGExPWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6XCJzaGExXCIscHJvdjpcImNyeXB0b2pzXCJ9KTtyZXR1cm4gYi5kaWdlc3RTdHJpbmcoYSl9O3RoaXMuc2hhMjU2PWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6XCJzaGEyNTZcIixwcm92OlwiY3J5cHRvanNcIn0pO3JldHVybiBiLmRpZ2VzdFN0cmluZyhhKX07dGhpcy5zaGEyNTZIZXg9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpcInNoYTI1NlwiLHByb3Y6XCJjcnlwdG9qc1wifSk7cmV0dXJuIGIuZGlnZXN0SGV4KGEpfTt0aGlzLnNoYTUxMj1mdW5jdGlvbihhKXt2YXIgYj1uZXcgS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOlwic2hhNTEyXCIscHJvdjpcImNyeXB0b2pzXCJ9KTtyZXR1cm4gYi5kaWdlc3RTdHJpbmcoYSl9O3RoaXMuc2hhNTEySGV4PWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6XCJzaGE1MTJcIixwcm92OlwiY3J5cHRvanNcIn0pO3JldHVybiBiLmRpZ2VzdEhleChhKX19O0tKVVIuY3J5cHRvLlV0aWwubWQ1PWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6XCJtZDVcIixwcm92OlwiY3J5cHRvanNcIn0pO3JldHVybiBiLmRpZ2VzdFN0cmluZyhhKX07S0pVUi5jcnlwdG8uVXRpbC5yaXBlbWQxNjA9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpcInJpcGVtZDE2MFwiLHByb3Y6XCJjcnlwdG9qc1wifSk7cmV0dXJuIGIuZGlnZXN0U3RyaW5nKGEpfTtLSlVSLmNyeXB0by5VdGlsLlNFQ1VSRVJBTkRPTUdFTj1uZXcgU2VjdXJlUmFuZG9tKCk7S0pVUi5jcnlwdG8uVXRpbC5nZXRSYW5kb21IZXhPZk5ieXRlcz1mdW5jdGlvbihiKXt2YXIgYT1uZXcgQXJyYXkoYik7S0pVUi5jcnlwdG8uVXRpbC5TRUNVUkVSQU5ET01HRU4ubmV4dEJ5dGVzKGEpO3JldHVybiBCQXRvaGV4KGEpfTtLSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUJpZ0ludGVnZXJPZk5ieXRlcz1mdW5jdGlvbihhKXtyZXR1cm4gbmV3IEJpZ0ludGVnZXIoS0pVUi5jcnlwdG8uVXRpbC5nZXRSYW5kb21IZXhPZk5ieXRlcyhhKSwxNil9O0tKVVIuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tSGV4T2ZOYml0cz1mdW5jdGlvbihkKXt2YXIgYz1kJTg7dmFyIGE9KGQtYykvODt2YXIgYj1uZXcgQXJyYXkoYSsxKTtLSlVSLmNyeXB0by5VdGlsLlNFQ1VSRVJBTkRPTUdFTi5uZXh0Qnl0ZXMoYik7YlswXT0oKCgyNTU8PGMpJjI1NSleMjU1KSZiWzBdO3JldHVybiBCQXRvaGV4KGIpfTtLSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUJpZ0ludGVnZXJPZk5iaXRzPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgQmlnSW50ZWdlcihLSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUhleE9mTmJpdHMoYSksMTYpfTtLSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUJpZ0ludGVnZXJaZXJvVG9NYXg9ZnVuY3Rpb24oYil7dmFyIGE9Yi5iaXRMZW5ndGgoKTt3aGlsZSgxKXt2YXIgYz1LSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUJpZ0ludGVnZXJPZk5iaXRzKGEpO2lmKGIuY29tcGFyZVRvKGMpIT0tMSl7cmV0dXJuIGN9fX07S0pVUi5jcnlwdG8uVXRpbC5nZXRSYW5kb21CaWdJbnRlZ2VyTWluVG9NYXg9ZnVuY3Rpb24oZSxiKXt2YXIgYz1lLmNvbXBhcmVUbyhiKTtpZihjPT0xKXt0aHJvd1wiYmlNaW4gaXMgZ3JlYXRlciB0aGFuIGJpTWF4XCJ9aWYoYz09MCl7cmV0dXJuIGV9dmFyIGE9Yi5zdWJ0cmFjdChlKTt2YXIgZD1LSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUJpZ0ludGVnZXJaZXJvVG9NYXgoYSk7cmV0dXJuIGQuYWRkKGUpfTtLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0PWZ1bmN0aW9uKGMpe3ZhciBiPW51bGw7dmFyIGE9bnVsbDt2YXIgZD1udWxsO3RoaXMuc2V0QWxnQW5kUHJvdmlkZXI9ZnVuY3Rpb24oZyxmKXtnPUtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3QuZ2V0Q2Fub25pY2FsQWxnTmFtZShnKTtpZihnIT09bnVsbCYmZj09PXVuZGVmaW5lZCl7Zj1LSlVSLmNyeXB0by5VdGlsLkRFRkFVTFRQUk9WSURFUltnXX1pZihcIjptZDU6c2hhMTpzaGEyMjQ6c2hhMjU2OnNoYTM4NDpzaGE1MTI6cmlwZW1kMTYwOlwiLmluZGV4T2YoZykhPS0xJiZmPT1cImNyeXB0b2pzXCIpe3RyeXt0aGlzLm1kPUtKVVIuY3J5cHRvLlV0aWwuQ1JZUFRPSlNNRVNTQUdFRElHRVNUTkFNRVtnXS5jcmVhdGUoKX1jYXRjaChlKXt0aHJvd1wic2V0QWxnQW5kUHJvdmlkZXIgaGFzaCBhbGcgc2V0IGZhaWwgYWxnPVwiK2crXCIvXCIrZX10aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbihoKXt0aGlzLm1kLnVwZGF0ZShoKX07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24oaCl7dmFyIGk9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShoKTt0aGlzLm1kLnVwZGF0ZShpKX07dGhpcy5kaWdlc3Q9ZnVuY3Rpb24oKXt2YXIgaD10aGlzLm1kLmZpbmFsaXplKCk7cmV0dXJuIGgudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLkhleCl9O3RoaXMuZGlnZXN0U3RyaW5nPWZ1bmN0aW9uKGgpe3RoaXMudXBkYXRlU3RyaW5nKGgpO3JldHVybiB0aGlzLmRpZ2VzdCgpfTt0aGlzLmRpZ2VzdEhleD1mdW5jdGlvbihoKXt0aGlzLnVwZGF0ZUhleChoKTtyZXR1cm4gdGhpcy5kaWdlc3QoKX19aWYoXCI6c2hhMjU2OlwiLmluZGV4T2YoZykhPS0xJiZmPT1cInNqY2xcIil7dHJ5e3RoaXMubWQ9bmV3IHNqY2wuaGFzaC5zaGEyNTYoKX1jYXRjaChlKXt0aHJvd1wic2V0QWxnQW5kUHJvdmlkZXIgaGFzaCBhbGcgc2V0IGZhaWwgYWxnPVwiK2crXCIvXCIrZX10aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbihoKXt0aGlzLm1kLnVwZGF0ZShoKX07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24oaSl7dmFyIGg9c2pjbC5jb2RlYy5oZXgudG9CaXRzKGkpO3RoaXMubWQudXBkYXRlKGgpfTt0aGlzLmRpZ2VzdD1mdW5jdGlvbigpe3ZhciBoPXRoaXMubWQuZmluYWxpemUoKTtyZXR1cm4gc2pjbC5jb2RlYy5oZXguZnJvbUJpdHMoaCl9O3RoaXMuZGlnZXN0U3RyaW5nPWZ1bmN0aW9uKGgpe3RoaXMudXBkYXRlU3RyaW5nKGgpO3JldHVybiB0aGlzLmRpZ2VzdCgpfTt0aGlzLmRpZ2VzdEhleD1mdW5jdGlvbihoKXt0aGlzLnVwZGF0ZUhleChoKTtyZXR1cm4gdGhpcy5kaWdlc3QoKX19fTt0aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbihlKXt0aHJvd1widXBkYXRlU3RyaW5nKHN0cikgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdOYW1lK1wiL1wiK3RoaXMucHJvdk5hbWV9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKGUpe3Rocm93XCJ1cGRhdGVIZXgoaGV4KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ05hbWUrXCIvXCIrdGhpcy5wcm92TmFtZX07dGhpcy5kaWdlc3Q9ZnVuY3Rpb24oKXt0aHJvd1wiZGlnZXN0KCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdOYW1lK1wiL1wiK3RoaXMucHJvdk5hbWV9O3RoaXMuZGlnZXN0U3RyaW5nPWZ1bmN0aW9uKGUpe3Rocm93XCJkaWdlc3RTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ05hbWUrXCIvXCIrdGhpcy5wcm92TmFtZX07dGhpcy5kaWdlc3RIZXg9ZnVuY3Rpb24oZSl7dGhyb3dcImRpZ2VzdEhleChoZXgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnTmFtZStcIi9cIit0aGlzLnByb3ZOYW1lfTtpZihjIT09dW5kZWZpbmVkKXtpZihjLmFsZyE9PXVuZGVmaW5lZCl7dGhpcy5hbGdOYW1lPWMuYWxnO2lmKGMucHJvdj09PXVuZGVmaW5lZCl7dGhpcy5wcm92TmFtZT1LSlVSLmNyeXB0by5VdGlsLkRFRkFVTFRQUk9WSURFUlt0aGlzLmFsZ05hbWVdfXRoaXMuc2V0QWxnQW5kUHJvdmlkZXIodGhpcy5hbGdOYW1lLHRoaXMucHJvdk5hbWUpfX19O0tKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3QuZ2V0Q2Fub25pY2FsQWxnTmFtZT1mdW5jdGlvbihhKXtpZih0eXBlb2YgYT09PVwic3RyaW5nXCIpe2E9YS50b0xvd2VyQ2FzZSgpO2E9YS5yZXBsYWNlKC8tLyxcIlwiKX1yZXR1cm4gYX07S0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdC5nZXRIYXNoTGVuZ3RoPWZ1bmN0aW9uKGMpe3ZhciBiPUtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Q7dmFyIGE9Yi5nZXRDYW5vbmljYWxBbGdOYW1lKGMpO2lmKGIuSEFTSExFTkdUSFthXT09PXVuZGVmaW5lZCl7dGhyb3dcIm5vdCBzdXBwb3J0ZWQgYWxnb3JpdGhtOiBcIitjfXJldHVybiBiLkhBU0hMRU5HVEhbYV19O0tKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3QuSEFTSExFTkdUSD17bWQ1OjE2LHNoYTE6MjAsc2hhMjI0OjI4LHNoYTI1NjozMixzaGEzODQ6NDgsc2hhNTEyOjY0LHJpcGVtZDE2MDoyMH07S0pVUi5jcnlwdG8uTWFjPWZ1bmN0aW9uKGQpe3ZhciBmPW51bGw7dmFyIGM9bnVsbDt2YXIgYT1udWxsO3ZhciBlPW51bGw7dmFyIGI9bnVsbDt0aGlzLnNldEFsZ0FuZFByb3ZpZGVyPWZ1bmN0aW9uKGssaSl7az1rLnRvTG93ZXJDYXNlKCk7aWYoaz09bnVsbCl7az1cImhtYWNzaGExXCJ9az1rLnRvTG93ZXJDYXNlKCk7aWYoay5zdWJzdHIoMCw0KSE9XCJobWFjXCIpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciB1bnN1cHBvcnRlZCBITUFDIGFsZzogXCIra31pZihpPT09dW5kZWZpbmVkKXtpPUtKVVIuY3J5cHRvLlV0aWwuREVGQVVMVFBST1ZJREVSW2tdfXRoaXMuYWxnUHJvdj1rK1wiL1wiK2k7dmFyIGc9ay5zdWJzdHIoNCk7aWYoXCI6bWQ1OnNoYTE6c2hhMjI0OnNoYTI1NjpzaGEzODQ6c2hhNTEyOnJpcGVtZDE2MDpcIi5pbmRleE9mKGcpIT0tMSYmaT09XCJjcnlwdG9qc1wiKXt0cnl7dmFyIGo9S0pVUi5jcnlwdG8uVXRpbC5DUllQVE9KU01FU1NBR0VESUdFU1ROQU1FW2ddO3RoaXMubWFjPUNyeXB0b0pTLmFsZ28uSE1BQy5jcmVhdGUoaix0aGlzLnBhc3MpfWNhdGNoKGgpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciBoYXNoIGFsZyBzZXQgZmFpbCBoYXNoQWxnPVwiK2crXCIvXCIraH10aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbihsKXt0aGlzLm1hYy51cGRhdGUobCl9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKGwpe3ZhciBtPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UobCk7dGhpcy5tYWMudXBkYXRlKG0pfTt0aGlzLmRvRmluYWw9ZnVuY3Rpb24oKXt2YXIgbD10aGlzLm1hYy5maW5hbGl6ZSgpO3JldHVybiBsLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5IZXgpfTt0aGlzLmRvRmluYWxTdHJpbmc9ZnVuY3Rpb24obCl7dGhpcy51cGRhdGVTdHJpbmcobCk7cmV0dXJuIHRoaXMuZG9GaW5hbCgpfTt0aGlzLmRvRmluYWxIZXg9ZnVuY3Rpb24obCl7dGhpcy51cGRhdGVIZXgobCk7cmV0dXJuIHRoaXMuZG9GaW5hbCgpfX19O3RoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGcpe3Rocm93XCJ1cGRhdGVTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ1Byb3Z9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKGcpe3Rocm93XCJ1cGRhdGVIZXgoaGV4KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ1Byb3Z9O3RoaXMuZG9GaW5hbD1mdW5jdGlvbigpe3Rocm93XCJkaWdlc3QoKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ1Byb3Z9O3RoaXMuZG9GaW5hbFN0cmluZz1mdW5jdGlvbihnKXt0aHJvd1wiZGlnZXN0U3RyaW5nKHN0cikgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdQcm92fTt0aGlzLmRvRmluYWxIZXg9ZnVuY3Rpb24oZyl7dGhyb3dcImRpZ2VzdEhleChoZXgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnUHJvdn07dGhpcy5zZXRQYXNzd29yZD1mdW5jdGlvbihoKXtpZih0eXBlb2YgaD09XCJzdHJpbmdcIil7dmFyIGc9aDtpZihoLmxlbmd0aCUyPT0xfHwhaC5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl7Zz1yc3RydG9oZXgoaCl9dGhpcy5wYXNzPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UoZyk7cmV0dXJufWlmKHR5cGVvZiBoIT1cIm9iamVjdFwiKXt0aHJvd1wiS0pVUi5jcnlwdG8uTWFjIHVuc3VwcG9ydGVkIHBhc3N3b3JkIHR5cGU6IFwiK2h9dmFyIGc9bnVsbDtpZihoLmhleCE9PXVuZGVmaW5lZCl7aWYoaC5oZXgubGVuZ3RoJTIhPTB8fCFoLmhleC5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl7dGhyb3dcIk1hYzogd3JvbmcgaGV4IHBhc3N3b3JkOiBcIitoLmhleH1nPWguaGV4fWlmKGgudXRmOCE9PXVuZGVmaW5lZCl7Zz11dGY4dG9oZXgoaC51dGY4KX1pZihoLnJzdHIhPT11bmRlZmluZWQpe2c9cnN0cnRvaGV4KGgucnN0cil9aWYoaC5iNjQhPT11bmRlZmluZWQpe2c9YjY0dG9oZXgoaC5iNjQpfWlmKGguYjY0dSE9PXVuZGVmaW5lZCl7Zz1iNjR1dG9oZXgoaC5iNjR1KX1pZihnPT1udWxsKXt0aHJvd1wiS0pVUi5jcnlwdG8uTWFjIHVuc3VwcG9ydGVkIHBhc3N3b3JkIHR5cGU6IFwiK2h9dGhpcy5wYXNzPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UoZyl9O2lmKGQhPT11bmRlZmluZWQpe2lmKGQucGFzcyE9PXVuZGVmaW5lZCl7dGhpcy5zZXRQYXNzd29yZChkLnBhc3MpfWlmKGQuYWxnIT09dW5kZWZpbmVkKXt0aGlzLmFsZ05hbWU9ZC5hbGc7aWYoZC5wcm92PT09dW5kZWZpbmVkKXt0aGlzLnByb3ZOYW1lPUtKVVIuY3J5cHRvLlV0aWwuREVGQVVMVFBST1ZJREVSW3RoaXMuYWxnTmFtZV19dGhpcy5zZXRBbGdBbmRQcm92aWRlcih0aGlzLmFsZ05hbWUsdGhpcy5wcm92TmFtZSl9fX07S0pVUi5jcnlwdG8uU2lnbmF0dXJlPWZ1bmN0aW9uKG8pe3ZhciBxPW51bGw7dmFyIG49bnVsbDt2YXIgcj1udWxsO3ZhciBjPW51bGw7dmFyIGw9bnVsbDt2YXIgZD1udWxsO3ZhciBrPW51bGw7dmFyIGg9bnVsbDt2YXIgcD1udWxsO3ZhciBlPW51bGw7dmFyIGI9LTE7dmFyIGc9bnVsbDt2YXIgaj1udWxsO3ZhciBhPW51bGw7dmFyIGk9bnVsbDt2YXIgZj1udWxsO3RoaXMuX3NldEFsZ05hbWVzPWZ1bmN0aW9uKCl7dmFyIHM9dGhpcy5hbGdOYW1lLm1hdGNoKC9eKC4rKXdpdGgoLispJC8pO2lmKHMpe3RoaXMubWRBbGdOYW1lPXNbMV0udG9Mb3dlckNhc2UoKTt0aGlzLnB1YmtleUFsZ05hbWU9c1syXS50b0xvd2VyQ2FzZSgpfX07dGhpcy5femVyb1BhZGRpbmdPZlNpZ25hdHVyZT1mdW5jdGlvbih4LHcpe3ZhciB2PVwiXCI7dmFyIHQ9dy80LXgubGVuZ3RoO2Zvcih2YXIgdT0wO3U8dDt1Kyspe3Y9ditcIjBcIn1yZXR1cm4gdit4fTt0aGlzLnNldEFsZ0FuZFByb3ZpZGVyPWZ1bmN0aW9uKHUsdCl7dGhpcy5fc2V0QWxnTmFtZXMoKTtpZih0IT1cImNyeXB0b2pzL2pzcnNhXCIpe3Rocm93XCJwcm92aWRlciBub3Qgc3VwcG9ydGVkOiBcIit0fWlmKFwiOm1kNTpzaGExOnNoYTIyNDpzaGEyNTY6c2hhMzg0OnNoYTUxMjpyaXBlbWQxNjA6XCIuaW5kZXhPZih0aGlzLm1kQWxnTmFtZSkhPS0xKXt0cnl7dGhpcy5tZD1uZXcgS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOnRoaXMubWRBbGdOYW1lfSl9Y2F0Y2gocyl7dGhyb3dcInNldEFsZ0FuZFByb3ZpZGVyIGhhc2ggYWxnIHNldCBmYWlsIGFsZz1cIit0aGlzLm1kQWxnTmFtZStcIi9cIitzfXRoaXMuaW5pdD1mdW5jdGlvbih3LHgpe3ZhciB5PW51bGw7dHJ5e2lmKHg9PT11bmRlZmluZWQpe3k9S0VZVVRJTC5nZXRLZXkodyl9ZWxzZXt5PUtFWVVUSUwuZ2V0S2V5KHcseCl9fWNhdGNoKHYpe3Rocm93XCJpbml0IGZhaWxlZDpcIit2fWlmKHkuaXNQcml2YXRlPT09dHJ1ZSl7dGhpcy5wcnZLZXk9eTt0aGlzLnN0YXRlPVwiU0lHTlwifWVsc2V7aWYoeS5pc1B1YmxpYz09PXRydWUpe3RoaXMucHViS2V5PXk7dGhpcy5zdGF0ZT1cIlZFUklGWVwifWVsc2V7dGhyb3dcImluaXQgZmFpbGVkLjpcIit5fX19O3RoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKHYpe3RoaXMubWQudXBkYXRlU3RyaW5nKHYpfTt0aGlzLnVwZGF0ZUhleD1mdW5jdGlvbih2KXt0aGlzLm1kLnVwZGF0ZUhleCh2KX07dGhpcy5zaWduPWZ1bmN0aW9uKCl7dGhpcy5zSGFzaEhleD10aGlzLm1kLmRpZ2VzdCgpO2lmKHR5cGVvZiB0aGlzLmVjcHJ2aGV4IT1cInVuZGVmaW5lZFwiJiZ0eXBlb2YgdGhpcy5lY2N1cnZlbmFtZSE9XCJ1bmRlZmluZWRcIil7dmFyIHY9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKHtjdXJ2ZTp0aGlzLmVjY3VydmVuYW1lfSk7dGhpcy5oU2lnbj12LnNpZ25IZXgodGhpcy5zSGFzaEhleCx0aGlzLmVjcHJ2aGV4KX1lbHNle2lmKHRoaXMucHJ2S2V5IGluc3RhbmNlb2YgUlNBS2V5JiZ0aGlzLnB1YmtleUFsZ05hbWU9PT1cInJzYWFuZG1nZjFcIil7dGhpcy5oU2lnbj10aGlzLnBydktleS5zaWduV2l0aE1lc3NhZ2VIYXNoUFNTKHRoaXMuc0hhc2hIZXgsdGhpcy5tZEFsZ05hbWUsdGhpcy5wc3NTYWx0TGVuKX1lbHNle2lmKHRoaXMucHJ2S2V5IGluc3RhbmNlb2YgUlNBS2V5JiZ0aGlzLnB1YmtleUFsZ05hbWU9PT1cInJzYVwiKXt0aGlzLmhTaWduPXRoaXMucHJ2S2V5LnNpZ25XaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCx0aGlzLm1kQWxnTmFtZSl9ZWxzZXtpZih0aGlzLnBydktleSBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkVDRFNBKXt0aGlzLmhTaWduPXRoaXMucHJ2S2V5LnNpZ25XaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCl9ZWxzZXtpZih0aGlzLnBydktleSBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkRTQSl7dGhpcy5oU2lnbj10aGlzLnBydktleS5zaWduV2l0aE1lc3NhZ2VIYXNoKHRoaXMuc0hhc2hIZXgpfWVsc2V7dGhyb3dcIlNpZ25hdHVyZTogdW5zdXBwb3J0ZWQgcHJpdmF0ZSBrZXkgYWxnOiBcIit0aGlzLnB1YmtleUFsZ05hbWV9fX19fXJldHVybiB0aGlzLmhTaWdufTt0aGlzLnNpZ25TdHJpbmc9ZnVuY3Rpb24odil7dGhpcy51cGRhdGVTdHJpbmcodik7cmV0dXJuIHRoaXMuc2lnbigpfTt0aGlzLnNpZ25IZXg9ZnVuY3Rpb24odil7dGhpcy51cGRhdGVIZXgodik7cmV0dXJuIHRoaXMuc2lnbigpfTt0aGlzLnZlcmlmeT1mdW5jdGlvbih2KXt0aGlzLnNIYXNoSGV4PXRoaXMubWQuZGlnZXN0KCk7aWYodHlwZW9mIHRoaXMuZWNwdWJoZXghPVwidW5kZWZpbmVkXCImJnR5cGVvZiB0aGlzLmVjY3VydmVuYW1lIT1cInVuZGVmaW5lZFwiKXt2YXIgdz1uZXcgS0pVUi5jcnlwdG8uRUNEU0Eoe2N1cnZlOnRoaXMuZWNjdXJ2ZW5hbWV9KTtyZXR1cm4gdy52ZXJpZnlIZXgodGhpcy5zSGFzaEhleCx2LHRoaXMuZWNwdWJoZXgpfWVsc2V7aWYodGhpcy5wdWJLZXkgaW5zdGFuY2VvZiBSU0FLZXkmJnRoaXMucHVia2V5QWxnTmFtZT09PVwicnNhYW5kbWdmMVwiKXtyZXR1cm4gdGhpcy5wdWJLZXkudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoUFNTKHRoaXMuc0hhc2hIZXgsdix0aGlzLm1kQWxnTmFtZSx0aGlzLnBzc1NhbHRMZW4pfWVsc2V7aWYodGhpcy5wdWJLZXkgaW5zdGFuY2VvZiBSU0FLZXkmJnRoaXMucHVia2V5QWxnTmFtZT09PVwicnNhXCIpe3JldHVybiB0aGlzLnB1YktleS52ZXJpZnlXaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCx2KX1lbHNle2lmKEtKVVIuY3J5cHRvLkVDRFNBIT09dW5kZWZpbmVkJiZ0aGlzLnB1YktleSBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkVDRFNBKXtyZXR1cm4gdGhpcy5wdWJLZXkudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoKHRoaXMuc0hhc2hIZXgsdil9ZWxzZXtpZihLSlVSLmNyeXB0by5EU0EhPT11bmRlZmluZWQmJnRoaXMucHViS2V5IGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRFNBKXtyZXR1cm4gdGhpcy5wdWJLZXkudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoKHRoaXMuc0hhc2hIZXgsdil9ZWxzZXt0aHJvd1wiU2lnbmF0dXJlOiB1bnN1cHBvcnRlZCBwdWJsaWMga2V5IGFsZzogXCIrdGhpcy5wdWJrZXlBbGdOYW1lfX19fX19fX07dGhpcy5pbml0PWZ1bmN0aW9uKHMsdCl7dGhyb3dcImluaXQoa2V5LCBwYXNzKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKHMpe3Rocm93XCJ1cGRhdGVTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKHMpe3Rocm93XCJ1cGRhdGVIZXgoaGV4KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMuc2lnbj1mdW5jdGlvbigpe3Rocm93XCJzaWduKCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLnNpZ25TdHJpbmc9ZnVuY3Rpb24ocyl7dGhyb3dcImRpZ2VzdFN0cmluZyhzdHIpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX07dGhpcy5zaWduSGV4PWZ1bmN0aW9uKHMpe3Rocm93XCJkaWdlc3RIZXgoaGV4KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMudmVyaWZ5PWZ1bmN0aW9uKHMpe3Rocm93XCJ2ZXJpZnkoaFNpZ1ZhbCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLmluaXRQYXJhbXM9bztpZihvIT09dW5kZWZpbmVkKXtpZihvLmFsZyE9PXVuZGVmaW5lZCl7dGhpcy5hbGdOYW1lPW8uYWxnO2lmKG8ucHJvdj09PXVuZGVmaW5lZCl7dGhpcy5wcm92TmFtZT1LSlVSLmNyeXB0by5VdGlsLkRFRkFVTFRQUk9WSURFUlt0aGlzLmFsZ05hbWVdfWVsc2V7dGhpcy5wcm92TmFtZT1vLnByb3Z9dGhpcy5hbGdQcm92TmFtZT10aGlzLmFsZ05hbWUrXCI6XCIrdGhpcy5wcm92TmFtZTt0aGlzLnNldEFsZ0FuZFByb3ZpZGVyKHRoaXMuYWxnTmFtZSx0aGlzLnByb3ZOYW1lKTt0aGlzLl9zZXRBbGdOYW1lcygpfWlmKG8ucHNzc2FsdGxlbiE9PXVuZGVmaW5lZCl7dGhpcy5wc3NTYWx0TGVuPW8ucHNzc2FsdGxlbn1pZihvLnBydmtleXBlbSE9PXVuZGVmaW5lZCl7aWYoby5wcnZrZXlwYXMhPT11bmRlZmluZWQpe3Rocm93XCJib3RoIHBydmtleXBlbSBhbmQgcHJ2a2V5cGFzIHBhcmFtZXRlcnMgbm90IHN1cHBvcnRlZFwifWVsc2V7dHJ5e3ZhciBxPUtFWVVUSUwuZ2V0S2V5KG8ucHJ2a2V5cGVtKTt0aGlzLmluaXQocSl9Y2F0Y2gobSl7dGhyb3dcImZhdGFsIGVycm9yIHRvIGxvYWQgcGVtIHByaXZhdGUga2V5OiBcIittfX19fX07S0pVUi5jcnlwdG8uQ2lwaGVyPWZ1bmN0aW9uKGEpe307S0pVUi5jcnlwdG8uQ2lwaGVyLmVuY3J5cHQ9ZnVuY3Rpb24oZSxmLGQpe2lmKGYgaW5zdGFuY2VvZiBSU0FLZXkmJmYuaXNQdWJsaWMpe3ZhciBjPUtKVVIuY3J5cHRvLkNpcGhlci5nZXRBbGdCeUtleUFuZE5hbWUoZixkKTtpZihjPT09XCJSU0FcIil7cmV0dXJuIGYuZW5jcnlwdChlKX1pZihjPT09XCJSU0FPQUVQXCIpe3JldHVybiBmLmVuY3J5cHRPQUVQKGUsXCJzaGExXCIpfXZhciBiPWMubWF0Y2goL15SU0FPQUVQKFxcZCspJC8pO2lmKGIhPT1udWxsKXtyZXR1cm4gZi5lbmNyeXB0T0FFUChlLFwic2hhXCIrYlsxXSl9dGhyb3dcIkNpcGhlci5lbmNyeXB0OiB1bnN1cHBvcnRlZCBhbGdvcml0aG0gZm9yIFJTQUtleTogXCIrZH1lbHNle3Rocm93XCJDaXBoZXIuZW5jcnlwdDogdW5zdXBwb3J0ZWQga2V5IG9yIGFsZ29yaXRobVwifX07S0pVUi5jcnlwdG8uQ2lwaGVyLmRlY3J5cHQ9ZnVuY3Rpb24oZSxmLGQpe2lmKGYgaW5zdGFuY2VvZiBSU0FLZXkmJmYuaXNQcml2YXRlKXt2YXIgYz1LSlVSLmNyeXB0by5DaXBoZXIuZ2V0QWxnQnlLZXlBbmROYW1lKGYsZCk7aWYoYz09PVwiUlNBXCIpe3JldHVybiBmLmRlY3J5cHQoZSl9aWYoYz09PVwiUlNBT0FFUFwiKXtyZXR1cm4gZi5kZWNyeXB0T0FFUChlLFwic2hhMVwiKX12YXIgYj1jLm1hdGNoKC9eUlNBT0FFUChcXGQrKSQvKTtpZihiIT09bnVsbCl7cmV0dXJuIGYuZGVjcnlwdE9BRVAoZSxcInNoYVwiK2JbMV0pfXRocm93XCJDaXBoZXIuZGVjcnlwdDogdW5zdXBwb3J0ZWQgYWxnb3JpdGhtIGZvciBSU0FLZXk6IFwiK2R9ZWxzZXt0aHJvd1wiQ2lwaGVyLmRlY3J5cHQ6IHVuc3VwcG9ydGVkIGtleSBvciBhbGdvcml0aG1cIn19O0tKVVIuY3J5cHRvLkNpcGhlci5nZXRBbGdCeUtleUFuZE5hbWU9ZnVuY3Rpb24oYixhKXtpZihiIGluc3RhbmNlb2YgUlNBS2V5KXtpZihcIjpSU0E6UlNBT0FFUDpSU0FPQUVQMjI0OlJTQU9BRVAyNTY6UlNBT0FFUDM4NDpSU0FPQUVQNTEyOlwiLmluZGV4T2YoYSkhPS0xKXtyZXR1cm4gYX1pZihhPT09bnVsbHx8YT09PXVuZGVmaW5lZCl7cmV0dXJuXCJSU0FcIn10aHJvd1wiZ2V0QWxnQnlLZXlBbmROYW1lOiBub3Qgc3VwcG9ydGVkIGFsZ29yaXRobSBuYW1lIGZvciBSU0FLZXk6IFwiK2F9dGhyb3dcImdldEFsZ0J5S2V5QW5kTmFtZTogbm90IHN1cHBvcnRlZCBhbGdvcml0aG0gbmFtZTogXCIrYX07S0pVUi5jcnlwdG8uT0lEPW5ldyBmdW5jdGlvbigpe3RoaXMub2lkaGV4Mm5hbWU9e1wiMmE4NjQ4ODZmNzBkMDEwMTAxXCI6XCJyc2FFbmNyeXB0aW9uXCIsXCIyYTg2NDhjZTNkMDIwMVwiOlwiZWNQdWJsaWNLZXlcIixcIjJhODY0OGNlMzgwNDAxXCI6XCJkc2FcIixcIjJhODY0OGNlM2QwMzAxMDdcIjpcInNlY3AyNTZyMVwiLFwiMmI4MTA0MDAxZlwiOlwic2VjcDE5MmsxXCIsXCIyYjgxMDQwMDIxXCI6XCJzZWNwMjI0cjFcIixcIjJiODEwNDAwMGFcIjpcInNlY3AyNTZrMVwiLFwiMmI4MTA0MDAyM1wiOlwic2VjcDUyMXIxXCIsXCIyYjgxMDQwMDIyXCI6XCJzZWNwMzg0cjFcIixcIjJhODY0OGNlMzgwNDAzXCI6XCJTSEExd2l0aERTQVwiLFwiNjA4NjQ4MDE2NTAzMDQwMzAxXCI6XCJTSEEyMjR3aXRoRFNBXCIsXCI2MDg2NDgwMTY1MDMwNDAzMDJcIjpcIlNIQTI1NndpdGhEU0FcIix9fTtcbmlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5jcnlwdG89PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmNyeXB0byl7S0pVUi5jcnlwdG89e319S0pVUi5jcnlwdG8uRUNEU0E9ZnVuY3Rpb24oaCl7dmFyIGU9XCJzZWNwMjU2cjFcIjt2YXIgZz1udWxsO3ZhciBiPW51bGw7dmFyIGY9bnVsbDt2YXIgYT1uZXcgU2VjdXJlUmFuZG9tKCk7dmFyIGQ9bnVsbDt0aGlzLnR5cGU9XCJFQ1wiO3RoaXMuaXNQcml2YXRlPWZhbHNlO3RoaXMuaXNQdWJsaWM9ZmFsc2U7ZnVuY3Rpb24gYyhzLG8scixuKXt2YXIgaj1NYXRoLm1heChvLmJpdExlbmd0aCgpLG4uYml0TGVuZ3RoKCkpO3ZhciB0PXMuYWRkMkQocik7dmFyIHE9cy5jdXJ2ZS5nZXRJbmZpbml0eSgpO2Zvcih2YXIgcD1qLTE7cD49MDstLXApe3E9cS50d2ljZTJEKCk7cS56PUJpZ0ludGVnZXIuT05FO2lmKG8udGVzdEJpdChwKSl7aWYobi50ZXN0Qml0KHApKXtxPXEuYWRkMkQodCl9ZWxzZXtxPXEuYWRkMkQocyl9fWVsc2V7aWYobi50ZXN0Qml0KHApKXtxPXEuYWRkMkQocil9fX1yZXR1cm4gcX10aGlzLmdldEJpZ1JhbmRvbT1mdW5jdGlvbihpKXtyZXR1cm4gbmV3IEJpZ0ludGVnZXIoaS5iaXRMZW5ndGgoKSxhKS5tb2QoaS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSkpLmFkZChCaWdJbnRlZ2VyLk9ORSl9O3RoaXMuc2V0TmFtZWRDdXJ2ZT1mdW5jdGlvbihpKXt0aGlzLmVjcGFyYW1zPUtKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIuZ2V0QnlOYW1lKGkpO3RoaXMucHJ2S2V5SGV4PW51bGw7dGhpcy5wdWJLZXlIZXg9bnVsbDt0aGlzLmN1cnZlTmFtZT1pfTt0aGlzLnNldFByaXZhdGVLZXlIZXg9ZnVuY3Rpb24oaSl7dGhpcy5pc1ByaXZhdGU9dHJ1ZTt0aGlzLnBydktleUhleD1pfTt0aGlzLnNldFB1YmxpY0tleUhleD1mdW5jdGlvbihpKXt0aGlzLmlzUHVibGljPXRydWU7dGhpcy5wdWJLZXlIZXg9aX07dGhpcy5nZXRQdWJsaWNLZXlYWUhleD1mdW5jdGlvbigpe3ZhciBrPXRoaXMucHViS2V5SGV4O2lmKGsuc3Vic3RyKDAsMikhPT1cIjA0XCIpe3Rocm93XCJ0aGlzIG1ldGhvZCBzdXBwb3J0cyB1bmNvbXByZXNzZWQgZm9ybWF0KDA0KSBvbmx5XCJ9dmFyIGo9dGhpcy5lY3BhcmFtcy5rZXlsZW4vNDtpZihrLmxlbmd0aCE9PTIraioyKXt0aHJvd1wibWFsZm9ybWVkIHB1YmxpYyBrZXkgaGV4IGxlbmd0aFwifXZhciBpPXt9O2kueD1rLnN1YnN0cigyLGopO2kueT1rLnN1YnN0cigyK2opO3JldHVybiBpfTt0aGlzLmdldFNob3J0TklTVFBDdXJ2ZU5hbWU9ZnVuY3Rpb24oKXt2YXIgaT10aGlzLmN1cnZlTmFtZTtpZihpPT09XCJzZWNwMjU2cjFcInx8aT09PVwiTklTVCBQLTI1NlwifHxpPT09XCJQLTI1NlwifHxpPT09XCJwcmltZTI1NnYxXCIpe3JldHVyblwiUC0yNTZcIn1pZihpPT09XCJzZWNwMzg0cjFcInx8aT09PVwiTklTVCBQLTM4NFwifHxpPT09XCJQLTM4NFwiKXtyZXR1cm5cIlAtMzg0XCJ9cmV0dXJuIG51bGx9O3RoaXMuZ2VuZXJhdGVLZXlQYWlySGV4PWZ1bmN0aW9uKCl7dmFyIGs9dGhpcy5lY3BhcmFtcy5uO3ZhciBuPXRoaXMuZ2V0QmlnUmFuZG9tKGspO3ZhciBsPXRoaXMuZWNwYXJhbXMuRy5tdWx0aXBseShuKTt2YXIgcT1sLmdldFgoKS50b0JpZ0ludGVnZXIoKTt2YXIgbz1sLmdldFkoKS50b0JpZ0ludGVnZXIoKTt2YXIgaT10aGlzLmVjcGFyYW1zLmtleWxlbi80O3ZhciBtPShcIjAwMDAwMDAwMDBcIituLnRvU3RyaW5nKDE2KSkuc2xpY2UoLWkpO3ZhciByPShcIjAwMDAwMDAwMDBcIitxLnRvU3RyaW5nKDE2KSkuc2xpY2UoLWkpO3ZhciBwPShcIjAwMDAwMDAwMDBcIitvLnRvU3RyaW5nKDE2KSkuc2xpY2UoLWkpO3ZhciBqPVwiMDRcIityK3A7dGhpcy5zZXRQcml2YXRlS2V5SGV4KG0pO3RoaXMuc2V0UHVibGljS2V5SGV4KGopO3JldHVybntlY3BydmhleDptLGVjcHViaGV4Omp9fTt0aGlzLnNpZ25XaXRoTWVzc2FnZUhhc2g9ZnVuY3Rpb24oaSl7cmV0dXJuIHRoaXMuc2lnbkhleChpLHRoaXMucHJ2S2V5SGV4KX07dGhpcy5zaWduSGV4PWZ1bmN0aW9uKG8sail7dmFyIHQ9bmV3IEJpZ0ludGVnZXIoaiwxNik7dmFyIGw9dGhpcy5lY3BhcmFtcy5uO3ZhciBxPW5ldyBCaWdJbnRlZ2VyKG8sMTYpO2Rve3ZhciBtPXRoaXMuZ2V0QmlnUmFuZG9tKGwpO3ZhciB1PXRoaXMuZWNwYXJhbXMuRzt2YXIgcD11Lm11bHRpcGx5KG0pO3ZhciBpPXAuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLm1vZChsKX13aGlsZShpLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pPD0wKTt2YXIgdj1tLm1vZEludmVyc2UobCkubXVsdGlwbHkocS5hZGQodC5tdWx0aXBseShpKSkpLm1vZChsKTtyZXR1cm4gS0pVUi5jcnlwdG8uRUNEU0EuYmlSU1NpZ1RvQVNOMVNpZyhpLHYpfTt0aGlzLnNpZ249ZnVuY3Rpb24obSx1KXt2YXIgcT11O3ZhciBqPXRoaXMuZWNwYXJhbXMubjt2YXIgcD1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChtKTtkb3t2YXIgbD10aGlzLmdldEJpZ1JhbmRvbShqKTt2YXIgdD10aGlzLmVjcGFyYW1zLkc7dmFyIG89dC5tdWx0aXBseShsKTt2YXIgaT1vLmdldFgoKS50b0JpZ0ludGVnZXIoKS5tb2Qoail9d2hpbGUoaS5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKTw9MCk7dmFyIHY9bC5tb2RJbnZlcnNlKGopLm11bHRpcGx5KHAuYWRkKHEubXVsdGlwbHkoaSkpKS5tb2Qoaik7cmV0dXJuIHRoaXMuc2VyaWFsaXplU2lnKGksdil9O3RoaXMudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoPWZ1bmN0aW9uKGosaSl7cmV0dXJuIHRoaXMudmVyaWZ5SGV4KGosaSx0aGlzLnB1YktleUhleCl9O3RoaXMudmVyaWZ5SGV4PWZ1bmN0aW9uKG0saSxwKXt2YXIgbCxqO3ZhciBvPUtKVVIuY3J5cHRvLkVDRFNBLnBhcnNlU2lnSGV4KGkpO2w9by5yO2o9by5zO3ZhciBrO2s9RUNQb2ludEZwLmRlY29kZUZyb21IZXgodGhpcy5lY3BhcmFtcy5jdXJ2ZSxwKTt2YXIgbj1uZXcgQmlnSW50ZWdlcihtLDE2KTtyZXR1cm4gdGhpcy52ZXJpZnlSYXcobixsLGosayl9O3RoaXMudmVyaWZ5PWZ1bmN0aW9uKG8scCxqKXt2YXIgbCxpO2lmKEJpdGNvaW4uVXRpbC5pc0FycmF5KHApKXt2YXIgbj10aGlzLnBhcnNlU2lnKHApO2w9bi5yO2k9bi5zfWVsc2V7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwJiZwLnImJnAucyl7bD1wLnI7aT1wLnN9ZWxzZXt0aHJvd1wiSW52YWxpZCB2YWx1ZSBmb3Igc2lnbmF0dXJlXCJ9fXZhciBrO2lmKGogaW5zdGFuY2VvZiBFQ1BvaW50RnApe2s9an1lbHNle2lmKEJpdGNvaW4uVXRpbC5pc0FycmF5KGopKXtrPUVDUG9pbnRGcC5kZWNvZGVGcm9tKHRoaXMuZWNwYXJhbXMuY3VydmUsail9ZWxzZXt0aHJvd1wiSW52YWxpZCBmb3JtYXQgZm9yIHB1YmtleSB2YWx1ZSwgbXVzdCBiZSBieXRlIGFycmF5IG9yIEVDUG9pbnRGcFwifX12YXIgbT1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChvKTtyZXR1cm4gdGhpcy52ZXJpZnlSYXcobSxsLGksayl9O3RoaXMudmVyaWZ5UmF3PWZ1bmN0aW9uKG8saSx3LG0pe3ZhciBsPXRoaXMuZWNwYXJhbXMubjt2YXIgdT10aGlzLmVjcGFyYW1zLkc7aWYoaS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpPDB8fGkuY29tcGFyZVRvKGwpPj0wKXtyZXR1cm4gZmFsc2V9aWYody5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpPDB8fHcuY29tcGFyZVRvKGwpPj0wKXtyZXR1cm4gZmFsc2V9dmFyIHA9dy5tb2RJbnZlcnNlKGwpO3ZhciBrPW8ubXVsdGlwbHkocCkubW9kKGwpO3ZhciBqPWkubXVsdGlwbHkocCkubW9kKGwpO3ZhciBxPXUubXVsdGlwbHkoaykuYWRkKG0ubXVsdGlwbHkoaikpO3ZhciB0PXEuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLm1vZChsKTtyZXR1cm4gdC5lcXVhbHMoaSl9O3RoaXMuc2VyaWFsaXplU2lnPWZ1bmN0aW9uKGssail7dmFyIGw9ay50b0J5dGVBcnJheVNpZ25lZCgpO3ZhciBpPWoudG9CeXRlQXJyYXlTaWduZWQoKTt2YXIgbT1bXTttLnB1c2goMik7bS5wdXNoKGwubGVuZ3RoKTttPW0uY29uY2F0KGwpO20ucHVzaCgyKTttLnB1c2goaS5sZW5ndGgpO209bS5jb25jYXQoaSk7bS51bnNoaWZ0KG0ubGVuZ3RoKTttLnVuc2hpZnQoNDgpO3JldHVybiBtfTt0aGlzLnBhcnNlU2lnPWZ1bmN0aW9uKG4pe3ZhciBtO2lmKG5bMF0hPTQ4KXt0aHJvdyBuZXcgRXJyb3IoXCJTaWduYXR1cmUgbm90IGEgdmFsaWQgREVSU2VxdWVuY2VcIil9bT0yO2lmKG5bbV0hPTIpe3Rocm93IG5ldyBFcnJvcihcIkZpcnN0IGVsZW1lbnQgaW4gc2lnbmF0dXJlIG11c3QgYmUgYSBERVJJbnRlZ2VyXCIpfXZhciBsPW4uc2xpY2UobSsyLG0rMituW20rMV0pO20rPTIrblttKzFdO2lmKG5bbV0hPTIpe3Rocm93IG5ldyBFcnJvcihcIlNlY29uZCBlbGVtZW50IGluIHNpZ25hdHVyZSBtdXN0IGJlIGEgREVSSW50ZWdlclwiKX12YXIgaT1uLnNsaWNlKG0rMixtKzIrblttKzFdKTttKz0yK25bbSsxXTt2YXIgaz1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChsKTt2YXIgaj1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChpKTtyZXR1cm57cjprLHM6an19O3RoaXMucGFyc2VTaWdDb21wYWN0PWZ1bmN0aW9uKG0pe2lmKG0ubGVuZ3RoIT09NjUpe3Rocm93XCJTaWduYXR1cmUgaGFzIHRoZSB3cm9uZyBsZW5ndGhcIn12YXIgaj1tWzBdLTI3O2lmKGo8MHx8aj43KXt0aHJvd1wiSW52YWxpZCBzaWduYXR1cmUgdHlwZVwifXZhciBvPXRoaXMuZWNwYXJhbXMubjt2YXIgbD1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChtLnNsaWNlKDEsMzMpKS5tb2Qobyk7dmFyIGs9QmlnSW50ZWdlci5mcm9tQnl0ZUFycmF5VW5zaWduZWQobS5zbGljZSgzMyw2NSkpLm1vZChvKTtyZXR1cm57cjpsLHM6ayxpOmp9fTt0aGlzLnJlYWRQS0NTNVBydktleUhleD1mdW5jdGlvbihsKXt2YXIgbj1BU04xSEVYO3ZhciBtPUtKVVIuY3J5cHRvLkVDRFNBLmdldE5hbWU7dmFyIHA9bi5nZXRWYnlMaXN0O2lmKG4uaXNBU04xSEVYKGwpPT09ZmFsc2Upe3Rocm93XCJub3QgQVNOLjEgaGV4IHN0cmluZ1wifXZhciBpLGssbzt0cnl7aT1wKGwsMCxbMiwwXSxcIjA2XCIpO2s9cChsLDAsWzFdLFwiMDRcIik7dHJ5e289cChsLDAsWzMsMF0sXCIwM1wiKS5zdWJzdHIoMil9Y2F0Y2goail7fX1jYXRjaChqKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1MjMS81IHBsYWluIEVDQyBwcml2YXRlIGtleVwifXRoaXMuY3VydmVOYW1lPW0oaSk7aWYodGhpcy5jdXJ2ZU5hbWU9PT11bmRlZmluZWQpe3Rocm93XCJ1bnN1cHBvcnRlZCBjdXJ2ZSBuYW1lXCJ9dGhpcy5zZXROYW1lZEN1cnZlKHRoaXMuY3VydmVOYW1lKTt0aGlzLnNldFB1YmxpY0tleUhleChvKTt0aGlzLnNldFByaXZhdGVLZXlIZXgoayk7dGhpcy5pc1B1YmxpYz1mYWxzZX07dGhpcy5yZWFkUEtDUzhQcnZLZXlIZXg9ZnVuY3Rpb24obCl7dmFyIHE9QVNOMUhFWDt2YXIgaT1LSlVSLmNyeXB0by5FQ0RTQS5nZXROYW1lO3ZhciBuPXEuZ2V0VmJ5TGlzdDtpZihxLmlzQVNOMUhFWChsKT09PWZhbHNlKXt0aHJvd1wibm90IEFTTi4xIGhleCBzdHJpbmdcIn12YXIgaixwLG0sazt0cnl7aj1uKGwsMCxbMSwwXSxcIjA2XCIpO3A9bihsLDAsWzEsMV0sXCIwNlwiKTttPW4obCwwLFsyLDAsMV0sXCIwNFwiKTt0cnl7az1uKGwsMCxbMiwwLDIsMF0sXCIwM1wiKS5zdWJzdHIoMil9Y2F0Y2gobyl7fX1jYXRjaChvKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1MjOCBwbGFpbiBFQ0MgcHJpdmF0ZSBrZXlcIn10aGlzLmN1cnZlTmFtZT1pKHApO2lmKHRoaXMuY3VydmVOYW1lPT09dW5kZWZpbmVkKXt0aHJvd1widW5zdXBwb3J0ZWQgY3VydmUgbmFtZVwifXRoaXMuc2V0TmFtZWRDdXJ2ZSh0aGlzLmN1cnZlTmFtZSk7dGhpcy5zZXRQdWJsaWNLZXlIZXgoayk7dGhpcy5zZXRQcml2YXRlS2V5SGV4KG0pO3RoaXMuaXNQdWJsaWM9ZmFsc2V9O3RoaXMucmVhZFBLQ1M4UHViS2V5SGV4PWZ1bmN0aW9uKGwpe3ZhciBuPUFTTjFIRVg7dmFyIG09S0pVUi5jcnlwdG8uRUNEU0EuZ2V0TmFtZTt2YXIgcD1uLmdldFZieUxpc3Q7aWYobi5pc0FTTjFIRVgobCk9PT1mYWxzZSl7dGhyb3dcIm5vdCBBU04uMSBoZXggc3RyaW5nXCJ9dmFyIGssaSxvO3RyeXtrPXAobCwwLFswLDBdLFwiMDZcIik7aT1wKGwsMCxbMCwxXSxcIjA2XCIpO289cChsLDAsWzFdLFwiMDNcIikuc3Vic3RyKDIpfWNhdGNoKGope3Rocm93XCJtYWxmb3JtZWQgUEtDUyM4IEVDQyBwdWJsaWMga2V5XCJ9dGhpcy5jdXJ2ZU5hbWU9bShpKTtpZih0aGlzLmN1cnZlTmFtZT09PW51bGwpe3Rocm93XCJ1bnN1cHBvcnRlZCBjdXJ2ZSBuYW1lXCJ9dGhpcy5zZXROYW1lZEN1cnZlKHRoaXMuY3VydmVOYW1lKTt0aGlzLnNldFB1YmxpY0tleUhleChvKX07dGhpcy5yZWFkQ2VydFB1YktleUhleD1mdW5jdGlvbihrLHApe2lmKHAhPT01KXtwPTZ9dmFyIG09QVNOMUhFWDt2YXIgbD1LSlVSLmNyeXB0by5FQ0RTQS5nZXROYW1lO3ZhciBvPW0uZ2V0VmJ5TGlzdDtpZihtLmlzQVNOMUhFWChrKT09PWZhbHNlKXt0aHJvd1wibm90IEFTTi4xIGhleCBzdHJpbmdcIn12YXIgaSxuO3RyeXtpPW8oaywwLFswLHAsMCwxXSxcIjA2XCIpO249byhrLDAsWzAscCwxXSxcIjAzXCIpLnN1YnN0cigyKX1jYXRjaChqKXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIEVDQyBwdWJsaWMga2V5XCJ9dGhpcy5jdXJ2ZU5hbWU9bChpKTtpZih0aGlzLmN1cnZlTmFtZT09PW51bGwpe3Rocm93XCJ1bnN1cHBvcnRlZCBjdXJ2ZSBuYW1lXCJ9dGhpcy5zZXROYW1lZEN1cnZlKHRoaXMuY3VydmVOYW1lKTt0aGlzLnNldFB1YmxpY0tleUhleChuKX07aWYoaCE9PXVuZGVmaW5lZCl7aWYoaC5jdXJ2ZSE9PXVuZGVmaW5lZCl7dGhpcy5jdXJ2ZU5hbWU9aC5jdXJ2ZX19aWYodGhpcy5jdXJ2ZU5hbWU9PT11bmRlZmluZWQpe3RoaXMuY3VydmVOYW1lPWV9dGhpcy5zZXROYW1lZEN1cnZlKHRoaXMuY3VydmVOYW1lKTtpZihoIT09dW5kZWZpbmVkKXtpZihoLnBydiE9PXVuZGVmaW5lZCl7dGhpcy5zZXRQcml2YXRlS2V5SGV4KGgucHJ2KX1pZihoLnB1YiE9PXVuZGVmaW5lZCl7dGhpcy5zZXRQdWJsaWNLZXlIZXgoaC5wdWIpfX19O0tKVVIuY3J5cHRvLkVDRFNBLnBhcnNlU2lnSGV4PWZ1bmN0aW9uKGEpe3ZhciBiPUtKVVIuY3J5cHRvLkVDRFNBLnBhcnNlU2lnSGV4SW5IZXhSUyhhKTt2YXIgZD1uZXcgQmlnSW50ZWdlcihiLnIsMTYpO3ZhciBjPW5ldyBCaWdJbnRlZ2VyKGIucywxNik7cmV0dXJue3I6ZCxzOmN9fTtLSlVSLmNyeXB0by5FQ0RTQS5wYXJzZVNpZ0hleEluSGV4UlM9ZnVuY3Rpb24oZil7dmFyIGo9QVNOMUhFWDt2YXIgaT1qLmdldENoaWxkSWR4O3ZhciBnPWouZ2V0VjtpZihmLnN1YnN0cigwLDIpIT1cIjMwXCIpe3Rocm93XCJzaWduYXR1cmUgaXMgbm90IGEgQVNOLjEgc2VxdWVuY2VcIn12YXIgaD1pKGYsMCk7aWYoaC5sZW5ndGghPTIpe3Rocm93XCJudW1iZXIgb2Ygc2lnbmF0dXJlIEFTTi4xIHNlcXVlbmNlIGVsZW1lbnRzIHNlZW0gd3JvbmdcIn12YXIgZT1oWzBdO3ZhciBkPWhbMV07aWYoZi5zdWJzdHIoZSwyKSE9XCIwMlwiKXt0aHJvd1wiMXN0IGl0ZW0gb2Ygc2VxdWVuZSBvZiBzaWduYXR1cmUgaXMgbm90IEFTTi4xIGludGVnZXJcIn1pZihmLnN1YnN0cihkLDIpIT1cIjAyXCIpe3Rocm93XCIybmQgaXRlbSBvZiBzZXF1ZW5lIG9mIHNpZ25hdHVyZSBpcyBub3QgQVNOLjEgaW50ZWdlclwifXZhciBjPWcoZixlKTt2YXIgYj1nKGYsZCk7cmV0dXJue3I6YyxzOmJ9fTtLSlVSLmNyeXB0by5FQ0RTQS5hc24xU2lnVG9Db25jYXRTaWc9ZnVuY3Rpb24oYyl7dmFyIGQ9S0pVUi5jcnlwdG8uRUNEU0EucGFyc2VTaWdIZXhJbkhleFJTKGMpO3ZhciBiPWQucjt2YXIgYT1kLnM7aWYoYi5zdWJzdHIoMCwyKT09XCIwMFwiJiYoYi5sZW5ndGglMzIpPT0yKXtiPWIuc3Vic3RyKDIpfWlmKGEuc3Vic3RyKDAsMik9PVwiMDBcIiYmKGEubGVuZ3RoJTMyKT09Mil7YT1hLnN1YnN0cigyKX1pZigoYi5sZW5ndGglMzIpPT0zMCl7Yj1cIjAwXCIrYn1pZigoYS5sZW5ndGglMzIpPT0zMCl7YT1cIjAwXCIrYX1pZihiLmxlbmd0aCUzMiE9MCl7dGhyb3dcInVua25vd24gRUNEU0Egc2lnIHIgbGVuZ3RoIGVycm9yXCJ9aWYoYS5sZW5ndGglMzIhPTApe3Rocm93XCJ1bmtub3duIEVDRFNBIHNpZyBzIGxlbmd0aCBlcnJvclwifXJldHVybiBiK2F9O0tKVVIuY3J5cHRvLkVDRFNBLmNvbmNhdFNpZ1RvQVNOMVNpZz1mdW5jdGlvbihhKXtpZigoKChhLmxlbmd0aC8yKSo4KSUoMTYqOCkpIT0wKXt0aHJvd1widW5rbm93biBFQ0RTQSBjb25jYXRpbmF0ZWQgci1zIHNpZyAgbGVuZ3RoIGVycm9yXCJ9dmFyIGM9YS5zdWJzdHIoMCxhLmxlbmd0aC8yKTt2YXIgYj1hLnN1YnN0cihhLmxlbmd0aC8yKTtyZXR1cm4gS0pVUi5jcnlwdG8uRUNEU0EuaGV4UlNTaWdUb0FTTjFTaWcoYyxiKX07S0pVUi5jcnlwdG8uRUNEU0EuaGV4UlNTaWdUb0FTTjFTaWc9ZnVuY3Rpb24oYixhKXt2YXIgZD1uZXcgQmlnSW50ZWdlcihiLDE2KTt2YXIgYz1uZXcgQmlnSW50ZWdlcihhLDE2KTtyZXR1cm4gS0pVUi5jcnlwdG8uRUNEU0EuYmlSU1NpZ1RvQVNOMVNpZyhkLGMpfTtLSlVSLmNyeXB0by5FQ0RTQS5iaVJTU2lnVG9BU04xU2lnPWZ1bmN0aW9uKGYsZCl7dmFyIGM9S0pVUi5hc24xO3ZhciBiPW5ldyBjLkRFUkludGVnZXIoe2JpZ2ludDpmfSk7dmFyIGE9bmV3IGMuREVSSW50ZWdlcih7YmlnaW50OmR9KTt2YXIgZT1uZXcgYy5ERVJTZXF1ZW5jZSh7YXJyYXk6W2IsYV19KTtyZXR1cm4gZS5nZXRFbmNvZGVkSGV4KCl9O0tKVVIuY3J5cHRvLkVDRFNBLmdldE5hbWU9ZnVuY3Rpb24oYSl7aWYoYT09PVwiMmE4NjQ4Y2UzZDAzMDEwN1wiKXtyZXR1cm5cInNlY3AyNTZyMVwifWlmKGE9PT1cIjJiODEwNDAwMGFcIil7cmV0dXJuXCJzZWNwMjU2azFcIn1pZihhPT09XCIyYjgxMDQwMDIyXCIpe3JldHVyblwic2VjcDM4NHIxXCJ9aWYoXCJ8c2VjcDI1NnIxfE5JU1QgUC0yNTZ8UC0yNTZ8cHJpbWUyNTZ2MXxcIi5pbmRleE9mKGEpIT09LTEpe3JldHVyblwic2VjcDI1NnIxXCJ9aWYoXCJ8c2VjcDI1NmsxfFwiLmluZGV4T2YoYSkhPT0tMSl7cmV0dXJuXCJzZWNwMjU2azFcIn1pZihcInxzZWNwMzg0cjF8TklTVCBQLTM4NHxQLTM4NHxcIi5pbmRleE9mKGEpIT09LTEpe3JldHVyblwic2VjcDM4NHIxXCJ9cmV0dXJuIG51bGx9O1xuaWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmNyeXB0bz09XCJ1bmRlZmluZWRcInx8IUtKVVIuY3J5cHRvKXtLSlVSLmNyeXB0bz17fX1LSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCPW5ldyBmdW5jdGlvbigpe3ZhciBiPXt9O3ZhciBjPXt9O2Z1bmN0aW9uIGEoZCl7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGQsMTYpfXRoaXMuZ2V0QnlOYW1lPWZ1bmN0aW9uKGUpe3ZhciBkPWU7aWYodHlwZW9mIGNbZF0hPVwidW5kZWZpbmVkXCIpe2Q9Y1tlXX1pZih0eXBlb2YgYltkXSE9XCJ1bmRlZmluZWRcIil7cmV0dXJuIGJbZF19dGhyb3dcInVucmVnaXN0ZXJlZCBFQyBjdXJ2ZSBuYW1lOiBcIitkfTt0aGlzLnJlZ2lzdD1mdW5jdGlvbihBLGwsbyxnLG0sZSxqLGYsayx1LGQseCl7YltBXT17fTt2YXIgcz1hKG8pO3ZhciB6PWEoZyk7dmFyIHk9YShtKTt2YXIgdD1hKGUpO3ZhciB3PWEoaik7dmFyIHI9bmV3IEVDQ3VydmVGcChzLHoseSk7dmFyIHE9ci5kZWNvZGVQb2ludEhleChcIjA0XCIrZitrKTtiW0FdW1wibmFtZVwiXT1BO2JbQV1bXCJrZXlsZW5cIl09bDtiW0FdW1wiY3VydmVcIl09cjtiW0FdW1wiR1wiXT1xO2JbQV1bXCJuXCJdPXQ7YltBXVtcImhcIl09dztiW0FdW1wib2lkXCJdPWQ7YltBXVtcImluZm9cIl09eDtmb3IodmFyIHY9MDt2PHUubGVuZ3RoO3YrKyl7Y1t1W3ZdXT1BfX19O0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDEyOHIxXCIsMTI4LFwiRkZGRkZGRkRGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZcIixcIkZGRkZGRkZERkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDXCIsXCJFODc1NzlDMTEwNzlGNDNERDgyNDk5M0MyQ0VFNUVEM1wiLFwiRkZGRkZGRkUwMDAwMDAwMDc1QTMwRDFCOTAzOEExMTVcIixcIjFcIixcIjE2MUZGNzUyOEI4OTlCMkQwQzI4NjA3Q0E1MkM1Qjg2XCIsXCJDRjVBQzgzOTVCQUZFQjEzQzAyREEyOTJEREVEN0E4M1wiLFtdLFwiXCIsXCJzZWNwMTI4cjEgOiBTRUNHIGN1cnZlIG92ZXIgYSAxMjggYml0IHByaW1lIGZpZWxkXCIpO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDE2MGsxXCIsMTYwLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGQUM3M1wiLFwiMFwiLFwiN1wiLFwiMDEwMDAwMDAwMDAwMDAwMDAwMDAwMUI4RkExNkRGQUI5QUNBMTZCNkIzXCIsXCIxXCIsXCIzQjRDMzgyQ0UzN0FBMTkyQTQwMTlFNzYzMDM2RjRGNURENEQ3RUJCXCIsXCI5MzhDRjkzNTMxOEZEQ0VENkJDMjgyODY1MzE3MzNDM0YwM0M0RkVFXCIsW10sXCJcIixcInNlY3AxNjBrMSA6IFNFQ0cgY3VydmUgb3ZlciBhIDE2MCBiaXQgcHJpbWUgZmllbGRcIik7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMTYwcjFcIiwxNjAsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjdGRkZGRkZGXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjdGRkZGRkZDXCIsXCIxQzk3QkVGQzU0QkQ3QThCNjVBQ0Y4OUY4MUQ0RDRBREM1NjVGQTQ1XCIsXCIwMTAwMDAwMDAwMDAwMDAwMDAwMDAxRjRDOEY5MjdBRUQzQ0E3NTIyNTdcIixcIjFcIixcIjRBOTZCNTY4OEVGNTczMjg0NjY0Njk4OTY4QzM4QkI5MTNDQkZDODJcIixcIjIzQTYyODU1MzE2ODk0N0Q1OURDQzkxMjA0MjM1MTM3N0FDNUZCMzJcIixbXSxcIlwiLFwic2VjcDE2MHIxIDogU0VDRyBjdXJ2ZSBvdmVyIGEgMTYwIGJpdCBwcmltZSBmaWVsZFwiKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AxOTJrMVwiLDE5MixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRUUzN1wiLFwiMFwiLFwiM1wiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFMjZGMkZDMTcwRjY5NDY2QTc0REVGRDhEXCIsXCIxXCIsXCJEQjRGRjEwRUMwNTdFOUFFMjZCMDdEMDI4MEI3RjQzNDFEQTVEMUIxRUFFMDZDN0RcIixcIjlCMkYyRjZEOUM1NjI4QTc4NDQxNjNEMDE1QkU4NjM0NDA4MkFBODhEOTVFMkY5RFwiLFtdKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AxOTJyMVwiLDE5MixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkZGRkZGRkZGRlwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRkZGRkZGRkZDXCIsXCI2NDIxMDUxOUU1OUM4MEU3MEZBN0U5QUI3MjI0MzA0OUZFQjhERUVDQzE0NkI5QjFcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjk5REVGODM2MTQ2QkM5QjFCNEQyMjgzMVwiLFwiMVwiLFwiMTg4REE4MEVCMDMwOTBGNjdDQkYyMEVCNDNBMTg4MDBGNEZGMEFGRDgyRkYxMDEyXCIsXCIwNzE5MkI5NUZGQzhEQTc4NjMxMDExRUQ2QjI0Q0RENTczRjk3N0ExMUU3OTQ4MTFcIixbXSk7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMjI0cjFcIiwyMjQsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMVwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVcIixcIkI0MDUwQTg1MEMwNEIzQUJGNTQxMzI1NjUwNDRCMEI3RDdCRkQ4QkEyNzBCMzk0MzIzNTVGRkI0XCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGMTZBMkUwQjhGMDNFMTNERDI5NDU1QzVDMkEzRFwiLFwiMVwiLFwiQjcwRTBDQkQ2QkI0QkY3RjMyMTM5MEI5NEEwM0MxRDM1NkMyMTEyMjM0MzI4MEQ2MTE1QzFEMjFcIixcIkJEMzc2Mzg4QjVGNzIzRkI0QzIyREZFNkNENDM3NUEwNUEwNzQ3NjQ0NEQ1ODE5OTg1MDA3RTM0XCIsW10pO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDI1NmsxXCIsMjU2LFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkMyRlwiLFwiMFwiLFwiN1wiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVCQUFFRENFNkFGNDhBMDNCQkZEMjVFOENEMDM2NDE0MVwiLFwiMVwiLFwiNzlCRTY2N0VGOURDQkJBQzU1QTA2Mjk1Q0U4NzBCMDcwMjlCRkNEQjJEQ0UyOEQ5NTlGMjgxNUIxNkY4MTc5OFwiLFwiNDgzQURBNzcyNkEzQzQ2NTVEQTRGQkZDMEUxMTA4QThGRDE3QjQ0OEE2ODU1NDE5OUM0N0QwOEZGQjEwRDRCOFwiLFtdKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AyNTZyMVwiLDI1NixcIkZGRkZGRkZGMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZcIixcIkZGRkZGRkZGMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkNcIixcIjVBQzYzNUQ4QUEzQTkzRTdCM0VCQkQ1NTc2OTg4NkJDNjUxRDA2QjBDQzUzQjBGNjNCQ0UzQzNFMjdEMjYwNEJcIixcIkZGRkZGRkZGMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGQkNFNkZBQURBNzE3OUU4NEYzQjlDQUMyRkM2MzI1NTFcIixcIjFcIixcIjZCMTdEMUYyRTEyQzQyNDdGOEJDRTZFNTYzQTQ0MEYyNzcwMzdEODEyREVCMzNBMEY0QTEzOTQ1RDg5OEMyOTZcIixcIjRGRTM0MkUyRkUxQTdGOUI4RUU3RUI0QTdDMEY5RTE2MkJDRTMzNTc2QjMxNUVDRUNCQjY0MDY4MzdCRjUxRjVcIixbXCJOSVNUIFAtMjU2XCIsXCJQLTI1NlwiLFwicHJpbWUyNTZ2MVwiXSk7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMzg0cjFcIiwzODQsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkYwMDAwMDAwMDAwMDAwMDAwRkZGRkZGRkZcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRjAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGQ1wiLFwiQjMzMTJGQTdFMjNFRTdFNDk4OEUwNTZCRTNGODJEMTkxODFEOUM2RUZFODE0MTEyMDMxNDA4OEY1MDEzODc1QUM2NTYzOThEOEEyRUQxOUQyQTg1QzhFREQzRUMyQUVGXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDNzYzNEQ4MUY0MzcyRERGNTgxQTBEQjI0OEIwQTc3QUVDRUMxOTZBQ0NDNTI5NzNcIixcIjFcIixcIkFBODdDQTIyQkU4QjA1Mzc4RUIxQzcxRUYzMjBBRDc0NkUxRDNCNjI4QkE3OUI5ODU5Rjc0MUUwODI1NDJBMzg1NTAyRjI1REJGNTUyOTZDM0E1NDVFMzg3Mjc2MEFCN1wiLFwiMzYxN2RlNGE5NjI2MmM2ZjVkOWU5OGJmOTI5MmRjMjlmOGY0MWRiZDI4OWExNDdjZTlkYTMxMTNiNWYwYjhjMDBhNjBiMWNlMWQ3ZTgxOWQ3YTQzMWQ3YzkwZWEwZTVmXCIsW1wiTklTVCBQLTM4NFwiLFwiUC0zODRcIl0pO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDUyMXIxXCIsNTIxLFwiMUZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZcIixcIjFGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDXCIsXCIwNTE5NTNFQjk2MThFMUM5QTFGOTI5QTIxQTBCNjg1NDBFRUEyREE3MjVCOTlCMzE1RjNCOEI0ODk5MThFRjEwOUUxNTYxOTM5NTFFQzdFOTM3QjE2NTJDMEJEM0JCMUJGMDczNTczREY4ODNEMkMzNEYxRUY0NTFGRDQ2QjUwM0YwMFwiLFwiMUZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGQTUxODY4NzgzQkYyRjk2NkI3RkNDMDE0OEY3MDlBNUQwM0JCNUM5Qjg4OTlDNDdBRUJCNkZCNzFFOTEzODY0MDlcIixcIjFcIixcIkM2ODU4RTA2QjcwNDA0RTlDRDlFM0VDQjY2MjM5NUI0NDI5QzY0ODEzOTA1M0ZCNTIxRjgyOEFGNjA2QjREM0RCQUExNEI1RTc3RUZFNzU5MjhGRTFEQzEyN0EyRkZBOERFMzM0OEIzQzE4NTZBNDI5QkY5N0U3RTMxQzJFNUJENjZcIixcIjAxMTgzOTI5NmE3ODlhM2JjMDA0NWM4YTVmYjQyYzdkMWJkOTk4ZjU0NDQ5NTc5YjQ0NjgxN2FmYmQxNzI3M2U2NjJjOTdlZTcyOTk1ZWY0MjY0MGM1NTBiOTAxM2ZhZDA3NjEzNTNjNzA4NmEyNzJjMjQwODhiZTk0NzY5ZmQxNjY1MFwiLFtcIk5JU1QgUC01MjFcIixcIlAtNTIxXCJdKTtcbnZhciBLRVlVVElMPWZ1bmN0aW9uKCl7dmFyIGQ9ZnVuY3Rpb24ocCxyLHEpe3JldHVybiBrKENyeXB0b0pTLkFFUyxwLHIscSl9O3ZhciBlPWZ1bmN0aW9uKHAscixxKXtyZXR1cm4gayhDcnlwdG9KUy5UcmlwbGVERVMscCxyLHEpfTt2YXIgYT1mdW5jdGlvbihwLHIscSl7cmV0dXJuIGsoQ3J5cHRvSlMuREVTLHAscixxKX07dmFyIGs9ZnVuY3Rpb24ocyx4LHUscSl7dmFyIHI9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZSh4KTt2YXIgdz1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHUpO3ZhciBwPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UocSk7dmFyIHQ9e307dC5rZXk9dzt0Lml2PXA7dC5jaXBoZXJ0ZXh0PXI7dmFyIHY9cy5kZWNyeXB0KHQsdyx7aXY6cH0pO3JldHVybiBDcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeSh2KX07dmFyIGw9ZnVuY3Rpb24ocCxyLHEpe3JldHVybiBnKENyeXB0b0pTLkFFUyxwLHIscSl9O3ZhciBvPWZ1bmN0aW9uKHAscixxKXtyZXR1cm4gZyhDcnlwdG9KUy5UcmlwbGVERVMscCxyLHEpfTt2YXIgZj1mdW5jdGlvbihwLHIscSl7cmV0dXJuIGcoQ3J5cHRvSlMuREVTLHAscixxKX07dmFyIGc9ZnVuY3Rpb24odCx5LHYscSl7dmFyIHM9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZSh5KTt2YXIgeD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHYpO3ZhciBwPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UocSk7dmFyIHc9dC5lbmNyeXB0KHMseCx7aXY6cH0pO3ZhciByPUNyeXB0b0pTLmVuYy5IZXgucGFyc2Uody50b1N0cmluZygpKTt2YXIgdT1DcnlwdG9KUy5lbmMuQmFzZTY0LnN0cmluZ2lmeShyKTtyZXR1cm4gdX07dmFyIGk9e1wiQUVTLTI1Ni1DQkNcIjp7cHJvYzpkLGVwcm9jOmwsa2V5bGVuOjMyLGl2bGVuOjE2fSxcIkFFUy0xOTItQ0JDXCI6e3Byb2M6ZCxlcHJvYzpsLGtleWxlbjoyNCxpdmxlbjoxNn0sXCJBRVMtMTI4LUNCQ1wiOntwcm9jOmQsZXByb2M6bCxrZXlsZW46MTYsaXZsZW46MTZ9LFwiREVTLUVERTMtQ0JDXCI6e3Byb2M6ZSxlcHJvYzpvLGtleWxlbjoyNCxpdmxlbjo4fSxcIkRFUy1DQkNcIjp7cHJvYzphLGVwcm9jOmYsa2V5bGVuOjgsaXZsZW46OH19O3ZhciBjPWZ1bmN0aW9uKHApe3JldHVybiBpW3BdW1wicHJvY1wiXX07dmFyIG09ZnVuY3Rpb24ocCl7dmFyIHI9Q3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20ocCk7dmFyIHE9Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkocik7cmV0dXJuIHF9O3ZhciBuPWZ1bmN0aW9uKHYpe3ZhciB3PXt9O3ZhciBxPXYubWF0Y2gobmV3IFJlZ0V4cChcIkRFSy1JbmZvOiAoW14sXSspLChbMC05QS1GYS1mXSspXCIsXCJtXCIpKTtpZihxKXt3LmNpcGhlcj1xWzFdO3cuaXZzYWx0PXFbMl19dmFyIHA9di5tYXRjaChuZXcgUmVnRXhwKFwiLS0tLS1CRUdJTiAoW0EtWl0rKSBQUklWQVRFIEtFWS0tLS0tXCIpKTtpZihwKXt3LnR5cGU9cFsxXX12YXIgdT0tMTt2YXIgeD0wO2lmKHYuaW5kZXhPZihcIlxcclxcblxcclxcblwiKSE9LTEpe3U9di5pbmRleE9mKFwiXFxyXFxuXFxyXFxuXCIpO3g9Mn1pZih2LmluZGV4T2YoXCJcXG5cXG5cIikhPS0xKXt1PXYuaW5kZXhPZihcIlxcblxcblwiKTt4PTF9dmFyIHQ9di5pbmRleE9mKFwiLS0tLS1FTkRcIik7aWYodSE9LTEmJnQhPS0xKXt2YXIgcj12LnN1YnN0cmluZyh1K3gqMix0LXgpO3I9ci5yZXBsYWNlKC9cXHMrL2csXCJcIik7dy5kYXRhPXJ9cmV0dXJuIHd9O3ZhciBqPWZ1bmN0aW9uKHEseSxwKXt2YXIgdj1wLnN1YnN0cmluZygwLDE2KTt2YXIgdD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHYpO3ZhciByPUNyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHkpO3ZhciB1PWlbcV1bXCJrZXlsZW5cIl0raVtxXVtcIml2bGVuXCJdO3ZhciB4PVwiXCI7dmFyIHc9bnVsbDtmb3IoOzspe3ZhciBzPUNyeXB0b0pTLmFsZ28uTUQ1LmNyZWF0ZSgpO2lmKHchPW51bGwpe3MudXBkYXRlKHcpfXMudXBkYXRlKHIpO3MudXBkYXRlKHQpO3c9cy5maW5hbGl6ZSgpO3g9eCtDcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeSh3KTtpZih4Lmxlbmd0aD49dSoyKXticmVha319dmFyIHo9e307ei5rZXloZXg9eC5zdWJzdHIoMCxpW3FdW1wia2V5bGVuXCJdKjIpO3ouaXZoZXg9eC5zdWJzdHIoaVtxXVtcImtleWxlblwiXSoyLGlbcV1bXCJpdmxlblwiXSoyKTtyZXR1cm4gen07dmFyIGI9ZnVuY3Rpb24ocCx2LHIsdyl7dmFyIHM9Q3J5cHRvSlMuZW5jLkJhc2U2NC5wYXJzZShwKTt2YXIgcT1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShzKTt2YXIgdT1pW3ZdW1wicHJvY1wiXTt2YXIgdD11KHEscix3KTtyZXR1cm4gdH07dmFyIGg9ZnVuY3Rpb24ocCxzLHEsdSl7dmFyIHI9aVtzXVtcImVwcm9jXCJdO3ZhciB0PXIocCxxLHUpO3JldHVybiB0fTtyZXR1cm57dmVyc2lvbjpcIjEuMC4wXCIscGFyc2VQS0NTNVBFTTpmdW5jdGlvbihwKXtyZXR1cm4gbihwKX0sZ2V0S2V5QW5kVW51c2VkSXZCeVBhc3Njb2RlQW5kSXZzYWx0OmZ1bmN0aW9uKHEscCxyKXtyZXR1cm4gaihxLHAscil9LGRlY3J5cHRLZXlCNjQ6ZnVuY3Rpb24ocCxyLHEscyl7cmV0dXJuIGIocCxyLHEscyl9LGdldERlY3J5cHRlZEtleUhleDpmdW5jdGlvbih5LHgpe3ZhciBxPW4oeSk7dmFyIHQ9cS50eXBlO3ZhciByPXEuY2lwaGVyO3ZhciBwPXEuaXZzYWx0O3ZhciBzPXEuZGF0YTt2YXIgdz1qKHIseCxwKTt2YXIgdj13LmtleWhleDt2YXIgdT1iKHMscix2LHApO3JldHVybiB1fSxnZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21QcnZLZXlIZXg6ZnVuY3Rpb24oeCxzLEEsdCxyKXt2YXIgcD1cIlwiO2lmKHR5cGVvZiB0PT1cInVuZGVmaW5lZFwifHx0PT1udWxsKXt0PVwiQUVTLTI1Ni1DQkNcIn1pZih0eXBlb2YgaVt0XT09XCJ1bmRlZmluZWRcIil7dGhyb3dcIktFWVVUSUwgdW5zdXBwb3J0ZWQgYWxnb3JpdGhtOiBcIit0fWlmKHR5cGVvZiByPT1cInVuZGVmaW5lZFwifHxyPT1udWxsKXt2YXIgdj1pW3RdW1wiaXZsZW5cIl07dmFyIHU9bSh2KTtyPXUudG9VcHBlckNhc2UoKX12YXIgej1qKHQsQSxyKTt2YXIgeT16LmtleWhleDt2YXIgdz1oKHMsdCx5LHIpO3ZhciBxPXcucmVwbGFjZSgvKC57NjR9KS9nLFwiJDFcXHJcXG5cIik7dmFyIHA9XCItLS0tLUJFR0lOIFwiK3grXCIgUFJJVkFURSBLRVktLS0tLVxcclxcblwiO3ArPVwiUHJvYy1UeXBlOiA0LEVOQ1JZUFRFRFxcclxcblwiO3ArPVwiREVLLUluZm86IFwiK3QrXCIsXCIrcitcIlxcclxcblwiO3ArPVwiXFxyXFxuXCI7cCs9cTtwKz1cIlxcclxcbi0tLS0tRU5EIFwiK3grXCIgUFJJVkFURSBLRVktLS0tLVxcclxcblwiO3JldHVybiBwfSxwYXJzZUhleE9mRW5jcnlwdGVkUEtDUzg6ZnVuY3Rpb24oeSl7dmFyIEI9QVNOMUhFWDt2YXIgej1CLmdldENoaWxkSWR4O3ZhciB3PUIuZ2V0Vjt2YXIgdD17fTt2YXIgcj16KHksMCk7aWYoci5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwKS5pdGVtcyAhPSAyOiBcIityLmxlbmd0aH10LmNpcGhlcnRleHQ9dyh5LHJbMV0pO3ZhciBBPXooeSxyWzBdKTtpZihBLmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDAuMCkuaXRlbXMgIT0gMjogXCIrQS5sZW5ndGh9aWYodyh5LEFbMF0pIT1cIjJhODY0ODg2ZjcwZDAxMDUwZFwiKXt0aHJvd1widGhpcyBvbmx5IHN1cHBvcnRzIHBrY3M1UEJFUzJcIn12YXIgcD16KHksQVsxXSk7aWYoQS5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwLjAuMSkuaXRlbXMgIT0gMjogXCIrcC5sZW5ndGh9dmFyIHE9eih5LHBbMV0pO2lmKHEubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wLjEuMSkuaXRlbXMgIT0gMjogXCIrcS5sZW5ndGh9aWYodyh5LHFbMF0pIT1cIjJhODY0ODg2ZjcwZDAzMDdcIil7dGhyb3dcInRoaXMgb25seSBzdXBwb3J0cyBUcmlwbGVERVNcIn10LmVuY3J5cHRpb25TY2hlbWVBbGc9XCJUcmlwbGVERVNcIjt0LmVuY3J5cHRpb25TY2hlbWVJVj13KHkscVsxXSk7dmFyIHM9eih5LHBbMF0pO2lmKHMubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wLjEuMCkuaXRlbXMgIT0gMjogXCIrcy5sZW5ndGh9aWYodyh5LHNbMF0pIT1cIjJhODY0ODg2ZjcwZDAxMDUwY1wiKXt0aHJvd1widGhpcyBvbmx5IHN1cHBvcnRzIHBrY3M1UEJLREYyXCJ9dmFyIHg9eih5LHNbMV0pO2lmKHgubGVuZ3RoPDIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwLjAuMS4wLjEpLml0ZW1zIDwgMjogXCIreC5sZW5ndGh9dC5wYmtkZjJTYWx0PXcoeSx4WzBdKTt2YXIgdT13KHkseFsxXSk7dHJ5e3QucGJrZGYySXRlcj1wYXJzZUludCh1LDE2KX1jYXRjaCh2KXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdCBwYmtkZjJJdGVyOiBcIit1fXJldHVybiB0fSxnZXRQQktERjJLZXlIZXhGcm9tUGFyYW06ZnVuY3Rpb24odSxwKXt2YXIgdD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHUucGJrZGYyU2FsdCk7dmFyIHE9dS5wYmtkZjJJdGVyO3ZhciBzPUNyeXB0b0pTLlBCS0RGMihwLHQse2tleVNpemU6MTkyLzMyLGl0ZXJhdGlvbnM6cX0pO3ZhciByPUNyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHMpO3JldHVybiByfSxfZ2V0UGxhaW5QS0NTOEhleEZyb21FbmNyeXB0ZWRQS0NTOFBFTTpmdW5jdGlvbih4LHkpe3ZhciByPXBlbXRvaGV4KHgsXCJFTkNSWVBURUQgUFJJVkFURSBLRVlcIik7dmFyIHA9dGhpcy5wYXJzZUhleE9mRW5jcnlwdGVkUEtDUzgocik7dmFyIHU9S0VZVVRJTC5nZXRQQktERjJLZXlIZXhGcm9tUGFyYW0ocCx5KTt2YXIgdj17fTt2LmNpcGhlcnRleHQ9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShwLmNpcGhlcnRleHQpO3ZhciB0PUNyeXB0b0pTLmVuYy5IZXgucGFyc2UodSk7dmFyIHM9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShwLmVuY3J5cHRpb25TY2hlbWVJVik7dmFyIHc9Q3J5cHRvSlMuVHJpcGxlREVTLmRlY3J5cHQodix0LHtpdjpzfSk7dmFyIHE9Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkodyk7cmV0dXJuIHF9LGdldEtleUZyb21FbmNyeXB0ZWRQS0NTOFBFTTpmdW5jdGlvbihzLHEpe3ZhciBwPXRoaXMuX2dldFBsYWluUEtDUzhIZXhGcm9tRW5jcnlwdGVkUEtDUzhQRU0ocyxxKTt2YXIgcj10aGlzLmdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOEhleChwKTtyZXR1cm4gcn0scGFyc2VQbGFpblByaXZhdGVQS0NTOEhleDpmdW5jdGlvbihzKXt2YXIgdj1BU04xSEVYO3ZhciB1PXYuZ2V0Q2hpbGRJZHg7dmFyIHQ9di5nZXRWO3ZhciBxPXt9O3EuYWxncGFyYW09bnVsbDtpZihzLnN1YnN0cigwLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgcGxhaW4gUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDEpXCJ9dmFyIHI9dShzLDApO2lmKHIubGVuZ3RoIT0zKXt0aHJvd1wibWFsZm9ybWVkIHBsYWluIFBLQ1M4IHByaXZhdGUga2V5KGNvZGU6MDAyKVwifWlmKHMuc3Vic3RyKHJbMV0sMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwMylcIn12YXIgcD11KHMsclsxXSk7aWYocC5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDQpXCJ9aWYocy5zdWJzdHIocFswXSwyKSE9XCIwNlwiKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHByaXZhdGUga2V5KGNvZGU6MDA1KVwifXEuYWxnb2lkPXQocyxwWzBdKTtpZihzLnN1YnN0cihwWzFdLDIpPT1cIjA2XCIpe3EuYWxncGFyYW09dChzLHBbMV0pfWlmKHMuc3Vic3RyKHJbMl0sMikhPVwiMDRcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwNilcIn1xLmtleWlkeD12LmdldFZpZHgocyxyWzJdKTtyZXR1cm4gcX0sZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4UEVNOmZ1bmN0aW9uKHEpe3ZhciBwPXBlbXRvaGV4KHEsXCJQUklWQVRFIEtFWVwiKTt2YXIgcj10aGlzLmdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOEhleChwKTtyZXR1cm4gcn0sZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4OmZ1bmN0aW9uKHApe3ZhciBxPXRoaXMucGFyc2VQbGFpblByaXZhdGVQS0NTOEhleChwKTt2YXIgcjtpZihxLmFsZ29pZD09XCIyYTg2NDg4NmY3MGQwMTAxMDFcIil7cj1uZXcgUlNBS2V5KCl9ZWxzZXtpZihxLmFsZ29pZD09XCIyYTg2NDhjZTM4MDQwMVwiKXtyPW5ldyBLSlVSLmNyeXB0by5EU0EoKX1lbHNle2lmKHEuYWxnb2lkPT1cIjJhODY0OGNlM2QwMjAxXCIpe3I9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKCl9ZWxzZXt0aHJvd1widW5zdXBwb3J0ZWQgcHJpdmF0ZSBrZXkgYWxnb3JpdGhtXCJ9fX1yLnJlYWRQS0NTOFBydktleUhleChwKTtyZXR1cm4gcn0sX2dldEtleUZyb21QdWJsaWNQS0NTOEhleDpmdW5jdGlvbihxKXt2YXIgcDt2YXIgcj1BU04xSEVYLmdldFZieUxpc3QocSwwLFswLDBdLFwiMDZcIik7aWYocj09PVwiMmE4NjQ4ODZmNzBkMDEwMTAxXCIpe3A9bmV3IFJTQUtleSgpfWVsc2V7aWYocj09PVwiMmE4NjQ4Y2UzODA0MDFcIil7cD1uZXcgS0pVUi5jcnlwdG8uRFNBKCl9ZWxzZXtpZihyPT09XCIyYTg2NDhjZTNkMDIwMVwiKXtwPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSgpfWVsc2V7dGhyb3dcInVuc3VwcG9ydGVkIFBLQ1MjOCBwdWJsaWMga2V5IGhleFwifX19cC5yZWFkUEtDUzhQdWJLZXlIZXgocSk7cmV0dXJuIHB9LHBhcnNlUHVibGljUmF3UlNBS2V5SGV4OmZ1bmN0aW9uKHIpe3ZhciB1PUFTTjFIRVg7dmFyIHQ9dS5nZXRDaGlsZElkeDt2YXIgcz11LmdldFY7dmFyIHA9e307aWYoci5zdWJzdHIoMCwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDEpXCJ9dmFyIHE9dChyLDApO2lmKHEubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDIpXCJ9aWYoci5zdWJzdHIocVswXSwyKSE9XCIwMlwiKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDMpXCJ9cC5uPXMocixxWzBdKTtpZihyLnN1YnN0cihxWzFdLDIpIT1cIjAyXCIpe3Rocm93XCJtYWxmb3JtZWQgUlNBIGtleShjb2RlOjAwNClcIn1wLmU9cyhyLHFbMV0pO3JldHVybiBwfSxwYXJzZVB1YmxpY1BLQ1M4SGV4OmZ1bmN0aW9uKHQpe3ZhciB2PUFTTjFIRVg7dmFyIHU9di5nZXRDaGlsZElkeDt2YXIgcz12LmdldFY7dmFyIHE9e307cS5hbGdwYXJhbT1udWxsO3ZhciByPXUodCwwKTtpZihyLmxlbmd0aCE9Mil7dGhyb3dcIm91dGVyIERFUlNlcXVlbmNlIHNoYWxsIGhhdmUgMiBlbGVtZW50czogXCIrci5sZW5ndGh9dmFyIHc9clswXTtpZih0LnN1YnN0cih3LDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwMSlcIn12YXIgcD11KHQsdyk7aWYocC5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwMilcIn1pZih0LnN1YnN0cihwWzBdLDIpIT1cIjA2XCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwMylcIn1xLmFsZ29pZD1zKHQscFswXSk7aWYodC5zdWJzdHIocFsxXSwyKT09XCIwNlwiKXtxLmFsZ3BhcmFtPXModCxwWzFdKX1lbHNle2lmKHQuc3Vic3RyKHBbMV0sMik9PVwiMzBcIil7cS5hbGdwYXJhbT17fTtxLmFsZ3BhcmFtLnA9di5nZXRWYnlMaXN0KHQscFsxXSxbMF0sXCIwMlwiKTtxLmFsZ3BhcmFtLnE9di5nZXRWYnlMaXN0KHQscFsxXSxbMV0sXCIwMlwiKTtxLmFsZ3BhcmFtLmc9di5nZXRWYnlMaXN0KHQscFsxXSxbMl0sXCIwMlwiKX19aWYodC5zdWJzdHIoclsxXSwyKSE9XCIwM1wiKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHB1YmxpYyBrZXkoY29kZTowMDQpXCJ9cS5rZXk9cyh0LHJbMV0pLnN1YnN0cigyKTtyZXR1cm4gcX0sfX0oKTtLRVlVVElMLmdldEtleT1mdW5jdGlvbihsLGssbil7dmFyIEc9QVNOMUhFWCxMPUcuZ2V0Q2hpbGRJZHgsdj1HLmdldFYsZD1HLmdldFZieUxpc3QsYz1LSlVSLmNyeXB0byxpPWMuRUNEU0EsQz1jLkRTQSx3PVJTQUtleSxNPXBlbXRvaGV4LEY9S0VZVVRJTDtpZih0eXBlb2YgdyE9XCJ1bmRlZmluZWRcIiYmbCBpbnN0YW5jZW9mIHcpe3JldHVybiBsfWlmKHR5cGVvZiBpIT1cInVuZGVmaW5lZFwiJiZsIGluc3RhbmNlb2YgaSl7cmV0dXJuIGx9aWYodHlwZW9mIEMhPVwidW5kZWZpbmVkXCImJmwgaW5zdGFuY2VvZiBDKXtyZXR1cm4gbH1pZihsLmN1cnZlIT09dW5kZWZpbmVkJiZsLnh5IT09dW5kZWZpbmVkJiZsLmQ9PT11bmRlZmluZWQpe3JldHVybiBuZXcgaSh7cHViOmwueHksY3VydmU6bC5jdXJ2ZX0pfWlmKGwuY3VydmUhPT11bmRlZmluZWQmJmwuZCE9PXVuZGVmaW5lZCl7cmV0dXJuIG5ldyBpKHtwcnY6bC5kLGN1cnZlOmwuY3VydmV9KX1pZihsLmt0eT09PXVuZGVmaW5lZCYmbC5uIT09dW5kZWZpbmVkJiZsLmUhPT11bmRlZmluZWQmJmwuZD09PXVuZGVmaW5lZCl7dmFyIFA9bmV3IHcoKTtQLnNldFB1YmxpYyhsLm4sbC5lKTtyZXR1cm4gUH1pZihsLmt0eT09PXVuZGVmaW5lZCYmbC5uIT09dW5kZWZpbmVkJiZsLmUhPT11bmRlZmluZWQmJmwuZCE9PXVuZGVmaW5lZCYmbC5wIT09dW5kZWZpbmVkJiZsLnEhPT11bmRlZmluZWQmJmwuZHAhPT11bmRlZmluZWQmJmwuZHEhPT11bmRlZmluZWQmJmwuY28hPT11bmRlZmluZWQmJmwucWk9PT11bmRlZmluZWQpe3ZhciBQPW5ldyB3KCk7UC5zZXRQcml2YXRlRXgobC5uLGwuZSxsLmQsbC5wLGwucSxsLmRwLGwuZHEsbC5jbyk7cmV0dXJuIFB9aWYobC5rdHk9PT11bmRlZmluZWQmJmwubiE9PXVuZGVmaW5lZCYmbC5lIT09dW5kZWZpbmVkJiZsLmQhPT11bmRlZmluZWQmJmwucD09PXVuZGVmaW5lZCl7dmFyIFA9bmV3IHcoKTtQLnNldFByaXZhdGUobC5uLGwuZSxsLmQpO3JldHVybiBQfWlmKGwucCE9PXVuZGVmaW5lZCYmbC5xIT09dW5kZWZpbmVkJiZsLmchPT11bmRlZmluZWQmJmwueSE9PXVuZGVmaW5lZCYmbC54PT09dW5kZWZpbmVkKXt2YXIgUD1uZXcgQygpO1Auc2V0UHVibGljKGwucCxsLnEsbC5nLGwueSk7cmV0dXJuIFB9aWYobC5wIT09dW5kZWZpbmVkJiZsLnEhPT11bmRlZmluZWQmJmwuZyE9PXVuZGVmaW5lZCYmbC55IT09dW5kZWZpbmVkJiZsLnghPT11bmRlZmluZWQpe3ZhciBQPW5ldyBDKCk7UC5zZXRQcml2YXRlKGwucCxsLnEsbC5nLGwueSxsLngpO3JldHVybiBQfWlmKGwua3R5PT09XCJSU0FcIiYmbC5uIT09dW5kZWZpbmVkJiZsLmUhPT11bmRlZmluZWQmJmwuZD09PXVuZGVmaW5lZCl7dmFyIFA9bmV3IHcoKTtQLnNldFB1YmxpYyhiNjR1dG9oZXgobC5uKSxiNjR1dG9oZXgobC5lKSk7cmV0dXJuIFB9aWYobC5rdHk9PT1cIlJTQVwiJiZsLm4hPT11bmRlZmluZWQmJmwuZSE9PXVuZGVmaW5lZCYmbC5kIT09dW5kZWZpbmVkJiZsLnAhPT11bmRlZmluZWQmJmwucSE9PXVuZGVmaW5lZCYmbC5kcCE9PXVuZGVmaW5lZCYmbC5kcSE9PXVuZGVmaW5lZCYmbC5xaSE9PXVuZGVmaW5lZCl7dmFyIFA9bmV3IHcoKTtQLnNldFByaXZhdGVFeChiNjR1dG9oZXgobC5uKSxiNjR1dG9oZXgobC5lKSxiNjR1dG9oZXgobC5kKSxiNjR1dG9oZXgobC5wKSxiNjR1dG9oZXgobC5xKSxiNjR1dG9oZXgobC5kcCksYjY0dXRvaGV4KGwuZHEpLGI2NHV0b2hleChsLnFpKSk7cmV0dXJuIFB9aWYobC5rdHk9PT1cIlJTQVwiJiZsLm4hPT11bmRlZmluZWQmJmwuZSE9PXVuZGVmaW5lZCYmbC5kIT09dW5kZWZpbmVkKXt2YXIgUD1uZXcgdygpO1Auc2V0UHJpdmF0ZShiNjR1dG9oZXgobC5uKSxiNjR1dG9oZXgobC5lKSxiNjR1dG9oZXgobC5kKSk7cmV0dXJuIFB9aWYobC5rdHk9PT1cIkVDXCImJmwuY3J2IT09dW5kZWZpbmVkJiZsLnghPT11bmRlZmluZWQmJmwueSE9PXVuZGVmaW5lZCYmbC5kPT09dW5kZWZpbmVkKXt2YXIgaj1uZXcgaSh7Y3VydmU6bC5jcnZ9KTt2YXIgdD1qLmVjcGFyYW1zLmtleWxlbi80O3ZhciBCPShcIjAwMDAwMDAwMDBcIitiNjR1dG9oZXgobC54KSkuc2xpY2UoLXQpO3ZhciB6PShcIjAwMDAwMDAwMDBcIitiNjR1dG9oZXgobC55KSkuc2xpY2UoLXQpO3ZhciB1PVwiMDRcIitCK3o7ai5zZXRQdWJsaWNLZXlIZXgodSk7cmV0dXJuIGp9aWYobC5rdHk9PT1cIkVDXCImJmwuY3J2IT09dW5kZWZpbmVkJiZsLnghPT11bmRlZmluZWQmJmwueSE9PXVuZGVmaW5lZCYmbC5kIT09dW5kZWZpbmVkKXt2YXIgaj1uZXcgaSh7Y3VydmU6bC5jcnZ9KTt2YXIgdD1qLmVjcGFyYW1zLmtleWxlbi80O3ZhciBCPShcIjAwMDAwMDAwMDBcIitiNjR1dG9oZXgobC54KSkuc2xpY2UoLXQpO3ZhciB6PShcIjAwMDAwMDAwMDBcIitiNjR1dG9oZXgobC55KSkuc2xpY2UoLXQpO3ZhciB1PVwiMDRcIitCK3o7dmFyIGI9KFwiMDAwMDAwMDAwMFwiK2I2NHV0b2hleChsLmQpKS5zbGljZSgtdCk7ai5zZXRQdWJsaWNLZXlIZXgodSk7ai5zZXRQcml2YXRlS2V5SGV4KGIpO3JldHVybiBqfWlmKG49PT1cInBrY3M1cHJ2XCIpe3ZhciBKPWwsRz1BU04xSEVYLE4sUDtOPUwoSiwwKTtpZihOLmxlbmd0aD09PTkpe1A9bmV3IHcoKTtQLnJlYWRQS0NTNVBydktleUhleChKKX1lbHNle2lmKE4ubGVuZ3RoPT09Nil7UD1uZXcgQygpO1AucmVhZFBLQ1M1UHJ2S2V5SGV4KEopfWVsc2V7aWYoTi5sZW5ndGg+MiYmSi5zdWJzdHIoTlsxXSwyKT09PVwiMDRcIil7UD1uZXcgaSgpO1AucmVhZFBLQ1M1UHJ2S2V5SGV4KEopfWVsc2V7dGhyb3dcInVuc3VwcG9ydGVkIFBLQ1MjMS81IGhleGFkZWNpbWFsIGtleVwifX19cmV0dXJuIFB9aWYobj09PVwicGtjczhwcnZcIil7dmFyIFA9Ri5nZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhIZXgobCk7cmV0dXJuIFB9aWYobj09PVwicGtjczhwdWJcIil7cmV0dXJuIEYuX2dldEtleUZyb21QdWJsaWNQS0NTOEhleChsKX1pZihuPT09XCJ4NTA5cHViXCIpe3JldHVybiBYNTA5LmdldFB1YmxpY0tleUZyb21DZXJ0SGV4KGwpfWlmKGwuaW5kZXhPZihcIi1FTkQgQ0VSVElGSUNBVEUtXCIsMCkhPS0xfHxsLmluZGV4T2YoXCItRU5EIFg1MDkgQ0VSVElGSUNBVEUtXCIsMCkhPS0xfHxsLmluZGV4T2YoXCItRU5EIFRSVVNURUQgQ0VSVElGSUNBVEUtXCIsMCkhPS0xKXtyZXR1cm4gWDUwOS5nZXRQdWJsaWNLZXlGcm9tQ2VydFBFTShsKX1pZihsLmluZGV4T2YoXCItRU5EIFBVQkxJQyBLRVktXCIpIT0tMSl7dmFyIE89cGVtdG9oZXgobCxcIlBVQkxJQyBLRVlcIik7cmV0dXJuIEYuX2dldEtleUZyb21QdWJsaWNQS0NTOEhleChPKX1pZihsLmluZGV4T2YoXCItRU5EIFJTQSBQUklWQVRFIEtFWS1cIikhPS0xJiZsLmluZGV4T2YoXCI0LEVOQ1JZUFRFRFwiKT09LTEpe3ZhciBtPU0obCxcIlJTQSBQUklWQVRFIEtFWVwiKTtyZXR1cm4gRi5nZXRLZXkobSxudWxsLFwicGtjczVwcnZcIil9aWYobC5pbmRleE9mKFwiLUVORCBEU0EgUFJJVkFURSBLRVktXCIpIT0tMSYmbC5pbmRleE9mKFwiNCxFTkNSWVBURURcIik9PS0xKXt2YXIgST1NKGwsXCJEU0EgUFJJVkFURSBLRVlcIik7dmFyIEU9ZChJLDAsWzFdLFwiMDJcIik7dmFyIEQ9ZChJLDAsWzJdLFwiMDJcIik7dmFyIEs9ZChJLDAsWzNdLFwiMDJcIik7dmFyIHI9ZChJLDAsWzRdLFwiMDJcIik7dmFyIHM9ZChJLDAsWzVdLFwiMDJcIik7dmFyIFA9bmV3IEMoKTtQLnNldFByaXZhdGUobmV3IEJpZ0ludGVnZXIoRSwxNiksbmV3IEJpZ0ludGVnZXIoRCwxNiksbmV3IEJpZ0ludGVnZXIoSywxNiksbmV3IEJpZ0ludGVnZXIociwxNiksbmV3IEJpZ0ludGVnZXIocywxNikpO3JldHVybiBQfWlmKGwuaW5kZXhPZihcIi1FTkQgUFJJVkFURSBLRVktXCIpIT0tMSl7cmV0dXJuIEYuZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4UEVNKGwpfWlmKGwuaW5kZXhPZihcIi1FTkQgUlNBIFBSSVZBVEUgS0VZLVwiKSE9LTEmJmwuaW5kZXhPZihcIjQsRU5DUllQVEVEXCIpIT0tMSl7dmFyIG89Ri5nZXREZWNyeXB0ZWRLZXlIZXgobCxrKTt2YXIgSD1uZXcgUlNBS2V5KCk7SC5yZWFkUEtDUzVQcnZLZXlIZXgobyk7cmV0dXJuIEh9aWYobC5pbmRleE9mKFwiLUVORCBFQyBQUklWQVRFIEtFWS1cIikhPS0xJiZsLmluZGV4T2YoXCI0LEVOQ1JZUFRFRFwiKSE9LTEpe3ZhciBJPUYuZ2V0RGVjcnlwdGVkS2V5SGV4KGwsayk7dmFyIFA9ZChJLDAsWzFdLFwiMDRcIik7dmFyIGY9ZChJLDAsWzIsMF0sXCIwNlwiKTt2YXIgQT1kKEksMCxbMywwXSxcIjAzXCIpLnN1YnN0cigyKTt2YXIgZT1cIlwiO2lmKEtKVVIuY3J5cHRvLk9JRC5vaWRoZXgybmFtZVtmXSE9PXVuZGVmaW5lZCl7ZT1LSlVSLmNyeXB0by5PSUQub2lkaGV4Mm5hbWVbZl19ZWxzZXt0aHJvd1widW5kZWZpbmVkIE9JRChoZXgpIGluIEtKVVIuY3J5cHRvLk9JRDogXCIrZn12YXIgaj1uZXcgaSh7Y3VydmU6ZX0pO2ouc2V0UHVibGljS2V5SGV4KEEpO2ouc2V0UHJpdmF0ZUtleUhleChQKTtqLmlzUHVibGljPWZhbHNlO3JldHVybiBqfWlmKGwuaW5kZXhPZihcIi1FTkQgRFNBIFBSSVZBVEUgS0VZLVwiKSE9LTEmJmwuaW5kZXhPZihcIjQsRU5DUllQVEVEXCIpIT0tMSl7dmFyIEk9Ri5nZXREZWNyeXB0ZWRLZXlIZXgobCxrKTt2YXIgRT1kKEksMCxbMV0sXCIwMlwiKTt2YXIgRD1kKEksMCxbMl0sXCIwMlwiKTt2YXIgSz1kKEksMCxbM10sXCIwMlwiKTt2YXIgcj1kKEksMCxbNF0sXCIwMlwiKTt2YXIgcz1kKEksMCxbNV0sXCIwMlwiKTt2YXIgUD1uZXcgQygpO1Auc2V0UHJpdmF0ZShuZXcgQmlnSW50ZWdlcihFLDE2KSxuZXcgQmlnSW50ZWdlcihELDE2KSxuZXcgQmlnSW50ZWdlcihLLDE2KSxuZXcgQmlnSW50ZWdlcihyLDE2KSxuZXcgQmlnSW50ZWdlcihzLDE2KSk7cmV0dXJuIFB9aWYobC5pbmRleE9mKFwiLUVORCBFTkNSWVBURUQgUFJJVkFURSBLRVktXCIpIT0tMSl7cmV0dXJuIEYuZ2V0S2V5RnJvbUVuY3J5cHRlZFBLQ1M4UEVNKGwsayl9dGhyb3dcIm5vdCBzdXBwb3J0ZWQgYXJndW1lbnRcIn07S0VZVVRJTC5nZW5lcmF0ZUtleXBhaXI9ZnVuY3Rpb24oYSxjKXtpZihhPT1cIlJTQVwiKXt2YXIgYj1jO3ZhciBoPW5ldyBSU0FLZXkoKTtoLmdlbmVyYXRlKGIsXCIxMDAwMVwiKTtoLmlzUHJpdmF0ZT10cnVlO2guaXNQdWJsaWM9dHJ1ZTt2YXIgZj1uZXcgUlNBS2V5KCk7dmFyIGU9aC5uLnRvU3RyaW5nKDE2KTt2YXIgaT1oLmUudG9TdHJpbmcoMTYpO2Yuc2V0UHVibGljKGUsaSk7Zi5pc1ByaXZhdGU9ZmFsc2U7Zi5pc1B1YmxpYz10cnVlO3ZhciBrPXt9O2sucHJ2S2V5T2JqPWg7ay5wdWJLZXlPYmo9ZjtyZXR1cm4ga31lbHNle2lmKGE9PVwiRUNcIil7dmFyIGQ9Yzt2YXIgZz1uZXcgS0pVUi5jcnlwdG8uRUNEU0Eoe2N1cnZlOmR9KTt2YXIgaj1nLmdlbmVyYXRlS2V5UGFpckhleCgpO3ZhciBoPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6ZH0pO2guc2V0UHVibGljS2V5SGV4KGouZWNwdWJoZXgpO2guc2V0UHJpdmF0ZUtleUhleChqLmVjcHJ2aGV4KTtoLmlzUHJpdmF0ZT10cnVlO2guaXNQdWJsaWM9ZmFsc2U7dmFyIGY9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKHtjdXJ2ZTpkfSk7Zi5zZXRQdWJsaWNLZXlIZXgoai5lY3B1YmhleCk7Zi5pc1ByaXZhdGU9ZmFsc2U7Zi5pc1B1YmxpYz10cnVlO3ZhciBrPXt9O2sucHJ2S2V5T2JqPWg7ay5wdWJLZXlPYmo9ZjtyZXR1cm4ga31lbHNle3Rocm93XCJ1bmtub3duIGFsZ29yaXRobTogXCIrYX19fTtLRVlVVElMLmdldFBFTT1mdW5jdGlvbihiLEQseSxtLHEsail7dmFyIEY9S0pVUixrPUYuYXNuMSx6PWsuREVST2JqZWN0SWRlbnRpZmllcixmPWsuREVSSW50ZWdlcixsPWsuQVNOMVV0aWwubmV3T2JqZWN0LGE9ay54NTA5LEM9YS5TdWJqZWN0UHVibGljS2V5SW5mbyxlPUYuY3J5cHRvLHU9ZS5EU0Escj1lLkVDRFNBLG49UlNBS2V5O2Z1bmN0aW9uIEEocyl7dmFyIEc9bCh7c2VxOlt7XCJpbnRcIjowfSx7XCJpbnRcIjp7YmlnaW50OnMubn19LHtcImludFwiOnMuZX0se1wiaW50XCI6e2JpZ2ludDpzLmR9fSx7XCJpbnRcIjp7YmlnaW50OnMucH19LHtcImludFwiOntiaWdpbnQ6cy5xfX0se1wiaW50XCI6e2JpZ2ludDpzLmRtcDF9fSx7XCJpbnRcIjp7YmlnaW50OnMuZG1xMX19LHtcImludFwiOntiaWdpbnQ6cy5jb2VmZn19XX0pO3JldHVybiBHfWZ1bmN0aW9uIEIoRyl7dmFyIHM9bCh7c2VxOlt7XCJpbnRcIjoxfSx7b2N0c3RyOntoZXg6Ry5wcnZLZXlIZXh9fSx7dGFnOltcImEwXCIsdHJ1ZSx7b2lkOntuYW1lOkcuY3VydmVOYW1lfX1dfSx7dGFnOltcImExXCIsdHJ1ZSx7Yml0c3RyOntoZXg6XCIwMFwiK0cucHViS2V5SGV4fX1dfV19KTtyZXR1cm4gc31mdW5jdGlvbiB4KHMpe3ZhciBHPWwoe3NlcTpbe1wiaW50XCI6MH0se1wiaW50XCI6e2JpZ2ludDpzLnB9fSx7XCJpbnRcIjp7YmlnaW50OnMucX19LHtcImludFwiOntiaWdpbnQ6cy5nfX0se1wiaW50XCI6e2JpZ2ludDpzLnl9fSx7XCJpbnRcIjp7YmlnaW50OnMueH19XX0pO3JldHVybiBHfWlmKCgobiE9PXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIG4pfHwodSE9PXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIHUpfHwociE9PXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIHIpKSYmYi5pc1B1YmxpYz09dHJ1ZSYmKEQ9PT11bmRlZmluZWR8fEQ9PVwiUEtDUzhQVUJcIikpe3ZhciBFPW5ldyBDKGIpO3ZhciB3PUUuZ2V0RW5jb2RlZEhleCgpO3JldHVybiBoZXh0b3BlbSh3LFwiUFVCTElDIEtFWVwiKX1pZihEPT1cIlBLQ1MxUFJWXCImJm4hPT11bmRlZmluZWQmJmIgaW5zdGFuY2VvZiBuJiYoeT09PXVuZGVmaW5lZHx8eT09bnVsbCkmJmIuaXNQcml2YXRlPT10cnVlKXt2YXIgRT1BKGIpO3ZhciB3PUUuZ2V0RW5jb2RlZEhleCgpO3JldHVybiBoZXh0b3BlbSh3LFwiUlNBIFBSSVZBVEUgS0VZXCIpfWlmKEQ9PVwiUEtDUzFQUlZcIiYmciE9PXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIHImJih5PT09dW5kZWZpbmVkfHx5PT1udWxsKSYmYi5pc1ByaXZhdGU9PXRydWUpe3ZhciBpPW5ldyB6KHtuYW1lOmIuY3VydmVOYW1lfSk7dmFyIHY9aS5nZXRFbmNvZGVkSGV4KCk7dmFyIGg9QihiKTt2YXIgdD1oLmdldEVuY29kZWRIZXgoKTt2YXIgcD1cIlwiO3ArPWhleHRvcGVtKHYsXCJFQyBQQVJBTUVURVJTXCIpO3ArPWhleHRvcGVtKHQsXCJFQyBQUklWQVRFIEtFWVwiKTtyZXR1cm4gcH1pZihEPT1cIlBLQ1MxUFJWXCImJnUhPT11bmRlZmluZWQmJmIgaW5zdGFuY2VvZiB1JiYoeT09PXVuZGVmaW5lZHx8eT09bnVsbCkmJmIuaXNQcml2YXRlPT10cnVlKXt2YXIgRT14KGIpO3ZhciB3PUUuZ2V0RW5jb2RlZEhleCgpO3JldHVybiBoZXh0b3BlbSh3LFwiRFNBIFBSSVZBVEUgS0VZXCIpfWlmKEQ9PVwiUEtDUzVQUlZcIiYmbiE9PXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIG4mJih5IT09dW5kZWZpbmVkJiZ5IT1udWxsKSYmYi5pc1ByaXZhdGU9PXRydWUpe3ZhciBFPUEoYik7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7aWYobT09PXVuZGVmaW5lZCl7bT1cIkRFUy1FREUzLUNCQ1wifXJldHVybiB0aGlzLmdldEVuY3J5cHRlZFBLQ1M1UEVNRnJvbVBydktleUhleChcIlJTQVwiLHcseSxtLGopfWlmKEQ9PVwiUEtDUzVQUlZcIiYmciE9PXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIHImJih5IT09dW5kZWZpbmVkJiZ5IT1udWxsKSYmYi5pc1ByaXZhdGU9PXRydWUpe3ZhciBFPUIoYik7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7aWYobT09PXVuZGVmaW5lZCl7bT1cIkRFUy1FREUzLUNCQ1wifXJldHVybiB0aGlzLmdldEVuY3J5cHRlZFBLQ1M1UEVNRnJvbVBydktleUhleChcIkVDXCIsdyx5LG0sail9aWYoRD09XCJQS0NTNVBSVlwiJiZ1IT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgdSYmKHkhPT11bmRlZmluZWQmJnkhPW51bGwpJiZiLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIEU9eChiKTt2YXIgdz1FLmdldEVuY29kZWRIZXgoKTtpZihtPT09dW5kZWZpbmVkKXttPVwiREVTLUVERTMtQ0JDXCJ9cmV0dXJuIHRoaXMuZ2V0RW5jcnlwdGVkUEtDUzVQRU1Gcm9tUHJ2S2V5SGV4KFwiRFNBXCIsdyx5LG0sail9dmFyIG89ZnVuY3Rpb24oRyxzKXt2YXIgST1jKEcscyk7dmFyIEg9bmV3IGwoe3NlcTpbe3NlcTpbe29pZDp7bmFtZTpcInBrY3M1UEJFUzJcIn19LHtzZXE6W3tzZXE6W3tvaWQ6e25hbWU6XCJwa2NzNVBCS0RGMlwifX0se3NlcTpbe29jdHN0cjp7aGV4OkkucGJrZGYyU2FsdH19LHtcImludFwiOkkucGJrZGYySXRlcn1dfV19LHtzZXE6W3tvaWQ6e25hbWU6XCJkZXMtRURFMy1DQkNcIn19LHtvY3RzdHI6e2hleDpJLmVuY3J5cHRpb25TY2hlbWVJVn19XX1dfV19LHtvY3RzdHI6e2hleDpJLmNpcGhlcnRleHR9fV19KTtyZXR1cm4gSC5nZXRFbmNvZGVkSGV4KCl9O3ZhciBjPWZ1bmN0aW9uKE4sTyl7dmFyIEg9MTAwO3ZhciBNPUNyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKDgpO3ZhciBMPVwiREVTLUVERTMtQ0JDXCI7dmFyIHM9Q3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oOCk7dmFyIEk9Q3J5cHRvSlMuUEJLREYyKE8sTSx7a2V5U2l6ZToxOTIvMzIsaXRlcmF0aW9uczpIfSk7dmFyIEo9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShOKTt2YXIgSz1DcnlwdG9KUy5UcmlwbGVERVMuZW5jcnlwdChKLEkse2l2OnN9KStcIlwiO3ZhciBHPXt9O0cuY2lwaGVydGV4dD1LO0cucGJrZGYyU2FsdD1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShNKTtHLnBia2RmMkl0ZXI9SDtHLmVuY3J5cHRpb25TY2hlbWVBbGc9TDtHLmVuY3J5cHRpb25TY2hlbWVJVj1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShzKTtyZXR1cm4gR307aWYoRD09XCJQS0NTOFBSVlwiJiZuIT11bmRlZmluZWQmJmIgaW5zdGFuY2VvZiBuJiZiLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIGc9QShiKTt2YXIgZD1nLmdldEVuY29kZWRIZXgoKTt2YXIgRT1sKHtzZXE6W3tcImludFwiOjB9LHtzZXE6W3tvaWQ6e25hbWU6XCJyc2FFbmNyeXB0aW9uXCJ9fSx7XCJudWxsXCI6dHJ1ZX1dfSx7b2N0c3RyOntoZXg6ZH19XX0pO3ZhciB3PUUuZ2V0RW5jb2RlZEhleCgpO2lmKHk9PT11bmRlZmluZWR8fHk9PW51bGwpe3JldHVybiBoZXh0b3BlbSh3LFwiUFJJVkFURSBLRVlcIil9ZWxzZXt2YXIgdD1vKHcseSk7cmV0dXJuIGhleHRvcGVtKHQsXCJFTkNSWVBURUQgUFJJVkFURSBLRVlcIil9fWlmKEQ9PVwiUEtDUzhQUlZcIiYmciE9PXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIHImJmIuaXNQcml2YXRlPT10cnVlKXt2YXIgZz1uZXcgbCh7c2VxOlt7XCJpbnRcIjoxfSx7b2N0c3RyOntoZXg6Yi5wcnZLZXlIZXh9fSx7dGFnOltcImExXCIsdHJ1ZSx7Yml0c3RyOntoZXg6XCIwMFwiK2IucHViS2V5SGV4fX1dfV19KTt2YXIgZD1nLmdldEVuY29kZWRIZXgoKTt2YXIgRT1sKHtzZXE6W3tcImludFwiOjB9LHtzZXE6W3tvaWQ6e25hbWU6XCJlY1B1YmxpY0tleVwifX0se29pZDp7bmFtZTpiLmN1cnZlTmFtZX19XX0se29jdHN0cjp7aGV4OmR9fV19KTt2YXIgdz1FLmdldEVuY29kZWRIZXgoKTtpZih5PT09dW5kZWZpbmVkfHx5PT1udWxsKXtyZXR1cm4gaGV4dG9wZW0odyxcIlBSSVZBVEUgS0VZXCIpfWVsc2V7dmFyIHQ9byh3LHkpO3JldHVybiBoZXh0b3BlbSh0LFwiRU5DUllQVEVEIFBSSVZBVEUgS0VZXCIpfX1pZihEPT1cIlBLQ1M4UFJWXCImJnUhPT11bmRlZmluZWQmJmIgaW5zdGFuY2VvZiB1JiZiLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIGc9bmV3IGYoe2JpZ2ludDpiLnh9KTt2YXIgZD1nLmdldEVuY29kZWRIZXgoKTt2YXIgRT1sKHtzZXE6W3tcImludFwiOjB9LHtzZXE6W3tvaWQ6e25hbWU6XCJkc2FcIn19LHtzZXE6W3tcImludFwiOntiaWdpbnQ6Yi5wfX0se1wiaW50XCI6e2JpZ2ludDpiLnF9fSx7XCJpbnRcIjp7YmlnaW50OmIuZ319XX1dfSx7b2N0c3RyOntoZXg6ZH19XX0pO3ZhciB3PUUuZ2V0RW5jb2RlZEhleCgpO2lmKHk9PT11bmRlZmluZWR8fHk9PW51bGwpe3JldHVybiBoZXh0b3BlbSh3LFwiUFJJVkFURSBLRVlcIil9ZWxzZXt2YXIgdD1vKHcseSk7cmV0dXJuIGhleHRvcGVtKHQsXCJFTkNSWVBURUQgUFJJVkFURSBLRVlcIil9fXRocm93XCJ1bnN1cHBvcnRlZCBvYmplY3Qgbm9yIGZvcm1hdFwifTtLRVlVVElMLmdldEtleUZyb21DU1JQRU09ZnVuY3Rpb24oYil7dmFyIGE9cGVtdG9oZXgoYixcIkNFUlRJRklDQVRFIFJFUVVFU1RcIik7dmFyIGM9S0VZVVRJTC5nZXRLZXlGcm9tQ1NSSGV4KGEpO3JldHVybiBjfTtLRVlVVElMLmdldEtleUZyb21DU1JIZXg9ZnVuY3Rpb24oYSl7dmFyIGM9S0VZVVRJTC5wYXJzZUNTUkhleChhKTt2YXIgYj1LRVlVVElMLmdldEtleShjLnA4cHVia2V5aGV4LG51bGwsXCJwa2NzOHB1YlwiKTtyZXR1cm4gYn07S0VZVVRJTC5wYXJzZUNTUkhleD1mdW5jdGlvbihkKXt2YXIgaT1BU04xSEVYO3ZhciBmPWkuZ2V0Q2hpbGRJZHg7dmFyIGM9aS5nZXRUTFY7dmFyIGI9e307dmFyIGc9ZDtpZihnLnN1YnN0cigwLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgQ1NSKGNvZGU6MDAxKVwifXZhciBlPWYoZywwKTtpZihlLmxlbmd0aDwxKXt0aHJvd1wibWFsZm9ybWVkIENTUihjb2RlOjAwMilcIn1pZihnLnN1YnN0cihlWzBdLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgQ1NSKGNvZGU6MDAzKVwifXZhciBhPWYoZyxlWzBdKTtpZihhLmxlbmd0aDwzKXt0aHJvd1wibWFsZm9ybWVkIENTUihjb2RlOjAwNClcIn1iLnA4cHVia2V5aGV4PWMoZyxhWzJdKTtyZXR1cm4gYn07S0VZVVRJTC5nZXRKV0tGcm9tS2V5PWZ1bmN0aW9uKGQpe3ZhciBiPXt9O2lmKGQgaW5zdGFuY2VvZiBSU0FLZXkmJmQuaXNQcml2YXRlKXtiLmt0eT1cIlJTQVwiO2Iubj1oZXh0b2I2NHUoZC5uLnRvU3RyaW5nKDE2KSk7Yi5lPWhleHRvYjY0dShkLmUudG9TdHJpbmcoMTYpKTtiLmQ9aGV4dG9iNjR1KGQuZC50b1N0cmluZygxNikpO2IucD1oZXh0b2I2NHUoZC5wLnRvU3RyaW5nKDE2KSk7Yi5xPWhleHRvYjY0dShkLnEudG9TdHJpbmcoMTYpKTtiLmRwPWhleHRvYjY0dShkLmRtcDEudG9TdHJpbmcoMTYpKTtiLmRxPWhleHRvYjY0dShkLmRtcTEudG9TdHJpbmcoMTYpKTtiLnFpPWhleHRvYjY0dShkLmNvZWZmLnRvU3RyaW5nKDE2KSk7cmV0dXJuIGJ9ZWxzZXtpZihkIGluc3RhbmNlb2YgUlNBS2V5JiZkLmlzUHVibGljKXtiLmt0eT1cIlJTQVwiO2Iubj1oZXh0b2I2NHUoZC5uLnRvU3RyaW5nKDE2KSk7Yi5lPWhleHRvYjY0dShkLmUudG9TdHJpbmcoMTYpKTtyZXR1cm4gYn1lbHNle2lmKGQgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSYmZC5pc1ByaXZhdGUpe3ZhciBhPWQuZ2V0U2hvcnROSVNUUEN1cnZlTmFtZSgpO2lmKGEhPT1cIlAtMjU2XCImJmEhPT1cIlAtMzg0XCIpe3Rocm93XCJ1bnN1cHBvcnRlZCBjdXJ2ZSBuYW1lIGZvciBKV1Q6IFwiK2F9dmFyIGM9ZC5nZXRQdWJsaWNLZXlYWUhleCgpO2Iua3R5PVwiRUNcIjtiLmNydj1hO2IueD1oZXh0b2I2NHUoYy54KTtiLnk9aGV4dG9iNjR1KGMueSk7Yi5kPWhleHRvYjY0dShkLnBydktleUhleCk7cmV0dXJuIGJ9ZWxzZXtpZihkIGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRUNEU0EmJmQuaXNQdWJsaWMpe3ZhciBhPWQuZ2V0U2hvcnROSVNUUEN1cnZlTmFtZSgpO2lmKGEhPT1cIlAtMjU2XCImJmEhPT1cIlAtMzg0XCIpe3Rocm93XCJ1bnN1cHBvcnRlZCBjdXJ2ZSBuYW1lIGZvciBKV1Q6IFwiK2F9dmFyIGM9ZC5nZXRQdWJsaWNLZXlYWUhleCgpO2Iua3R5PVwiRUNcIjtiLmNydj1hO2IueD1oZXh0b2I2NHUoYy54KTtiLnk9aGV4dG9iNjR1KGMueSk7cmV0dXJuIGJ9fX19dGhyb3dcIm5vdCBzdXBwb3J0ZWQga2V5IG9iamVjdFwifTtcblJTQUtleS5nZXRQb3NBcnJheU9mQ2hpbGRyZW5Gcm9tSGV4PWZ1bmN0aW9uKGEpe3JldHVybiBBU04xSEVYLmdldENoaWxkSWR4KGEsMCl9O1JTQUtleS5nZXRIZXhWYWx1ZUFycmF5T2ZDaGlsZHJlbkZyb21IZXg9ZnVuY3Rpb24oZil7dmFyIG49QVNOMUhFWDt2YXIgaT1uLmdldFY7dmFyIGs9UlNBS2V5LmdldFBvc0FycmF5T2ZDaGlsZHJlbkZyb21IZXgoZik7dmFyIGU9aShmLGtbMF0pO3ZhciBqPWkoZixrWzFdKTt2YXIgYj1pKGYsa1syXSk7dmFyIGM9aShmLGtbM10pO3ZhciBoPWkoZixrWzRdKTt2YXIgZz1pKGYsa1s1XSk7dmFyIG09aShmLGtbNl0pO3ZhciBsPWkoZixrWzddKTt2YXIgZD1pKGYsa1s4XSk7dmFyIGs9bmV3IEFycmF5KCk7ay5wdXNoKGUsaixiLGMsaCxnLG0sbCxkKTtyZXR1cm4ga307UlNBS2V5LnByb3RvdHlwZS5yZWFkUHJpdmF0ZUtleUZyb21QRU1TdHJpbmc9ZnVuY3Rpb24oZCl7dmFyIGM9cGVtdG9oZXgoZCk7dmFyIGI9UlNBS2V5LmdldEhleFZhbHVlQXJyYXlPZkNoaWxkcmVuRnJvbUhleChjKTt0aGlzLnNldFByaXZhdGVFeChiWzFdLGJbMl0sYlszXSxiWzRdLGJbNV0sYls2XSxiWzddLGJbOF0pfTtSU0FLZXkucHJvdG90eXBlLnJlYWRQS0NTNVBydktleUhleD1mdW5jdGlvbihjKXt2YXIgYj1SU0FLZXkuZ2V0SGV4VmFsdWVBcnJheU9mQ2hpbGRyZW5Gcm9tSGV4KGMpO3RoaXMuc2V0UHJpdmF0ZUV4KGJbMV0sYlsyXSxiWzNdLGJbNF0sYls1XSxiWzZdLGJbN10sYls4XSl9O1JTQUtleS5wcm90b3R5cGUucmVhZFBLQ1M4UHJ2S2V5SGV4PWZ1bmN0aW9uKGUpe3ZhciBjLGosbCxiLGEsZixkLGs7dmFyIG09QVNOMUhFWDt2YXIgZz1tLmdldFZieUxpc3Q7aWYobS5pc0FTTjFIRVgoZSk9PT1mYWxzZSl7dGhyb3dcIm5vdCBBU04uMSBoZXggc3RyaW5nXCJ9dHJ5e2M9ZyhlLDAsWzIsMCwxXSxcIjAyXCIpO2o9ZyhlLDAsWzIsMCwyXSxcIjAyXCIpO2w9ZyhlLDAsWzIsMCwzXSxcIjAyXCIpO2I9ZyhlLDAsWzIsMCw0XSxcIjAyXCIpO2E9ZyhlLDAsWzIsMCw1XSxcIjAyXCIpO2Y9ZyhlLDAsWzIsMCw2XSxcIjAyXCIpO2Q9ZyhlLDAsWzIsMCw3XSxcIjAyXCIpO2s9ZyhlLDAsWzIsMCw4XSxcIjAyXCIpfWNhdGNoKGkpe3Rocm93XCJtYWxmb3JtZWQgUEtDUyM4IHBsYWluIFJTQSBwcml2YXRlIGtleVwifXRoaXMuc2V0UHJpdmF0ZUV4KGMsaixsLGIsYSxmLGQsayl9O1JTQUtleS5wcm90b3R5cGUucmVhZFBLQ1M1UHViS2V5SGV4PWZ1bmN0aW9uKGMpe3ZhciBlPUFTTjFIRVg7dmFyIGI9ZS5nZXRWO2lmKGUuaXNBU04xSEVYKGMpPT09ZmFsc2Upe3Rocm93XCJrZXlIZXggaXMgbm90IEFTTi4xIGhleCBzdHJpbmdcIn12YXIgYT1lLmdldENoaWxkSWR4KGMsMCk7aWYoYS5sZW5ndGghPT0yfHxjLnN1YnN0cihhWzBdLDIpIT09XCIwMlwifHxjLnN1YnN0cihhWzFdLDIpIT09XCIwMlwiKXt0aHJvd1wid3JvbmcgaGV4IGZvciBQS0NTIzUgcHVibGljIGtleVwifXZhciBmPWIoYyxhWzBdKTt2YXIgZD1iKGMsYVsxXSk7dGhpcy5zZXRQdWJsaWMoZixkKX07UlNBS2V5LnByb3RvdHlwZS5yZWFkUEtDUzhQdWJLZXlIZXg9ZnVuY3Rpb24oYil7dmFyIGM9QVNOMUhFWDtpZihjLmlzQVNOMUhFWChiKT09PWZhbHNlKXt0aHJvd1wibm90IEFTTi4xIGhleCBzdHJpbmdcIn1pZihjLmdldFRMVmJ5TGlzdChiLDAsWzAsMF0pIT09XCIwNjA5MmE4NjQ4ODZmNzBkMDEwMTAxXCIpe3Rocm93XCJub3QgUEtDUzggUlNBIHB1YmxpYyBrZXlcIn12YXIgYT1jLmdldFRMVmJ5TGlzdChiLDAsWzEsMF0pO3RoaXMucmVhZFBLQ1M1UHViS2V5SGV4KGEpfTtSU0FLZXkucHJvdG90eXBlLnJlYWRDZXJ0UHViS2V5SGV4PWZ1bmN0aW9uKGIsZCl7dmFyIGEsYzthPW5ldyBYNTA5KCk7YS5yZWFkQ2VydEhleChiKTtjPWEuZ2V0UHVibGljS2V5SGV4KCk7dGhpcy5yZWFkUEtDUzhQdWJLZXlIZXgoYyl9O1xudmFyIF9SRV9IRVhERUNPTkxZPW5ldyBSZWdFeHAoXCJcIik7X1JFX0hFWERFQ09OTFkuY29tcGlsZShcIlteMC05YS1mXVwiLFwiZ2lcIik7ZnVuY3Rpb24gX3JzYXNpZ25fZ2V0SGV4UGFkZGVkRGlnZXN0SW5mb0ZvclN0cmluZyhkLGUsYSl7dmFyIGI9ZnVuY3Rpb24oZil7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaFN0cmluZyhmLGEpfTt2YXIgYz1iKGQpO3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmdldFBhZGRlZERpZ2VzdEluZm9IZXgoYyxhLGUpfWZ1bmN0aW9uIF96ZXJvUGFkZGluZ09mU2lnbmF0dXJlKGUsZCl7dmFyIGM9XCJcIjt2YXIgYT1kLzQtZS5sZW5ndGg7Zm9yKHZhciBiPTA7YjxhO2IrKyl7Yz1jK1wiMFwifXJldHVybiBjK2V9UlNBS2V5LnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKGQsYSl7dmFyIGI9ZnVuY3Rpb24oZSl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaFN0cmluZyhlLGEpfTt2YXIgYz1iKGQpO3JldHVybiB0aGlzLnNpZ25XaXRoTWVzc2FnZUhhc2goYyxhKX07UlNBS2V5LnByb3RvdHlwZS5zaWduV2l0aE1lc3NhZ2VIYXNoPWZ1bmN0aW9uKGUsYyl7dmFyIGY9S0pVUi5jcnlwdG8uVXRpbC5nZXRQYWRkZWREaWdlc3RJbmZvSGV4KGUsYyx0aGlzLm4uYml0TGVuZ3RoKCkpO3ZhciBiPXBhcnNlQmlnSW50KGYsMTYpO3ZhciBkPXRoaXMuZG9Qcml2YXRlKGIpO3ZhciBhPWQudG9TdHJpbmcoMTYpO3JldHVybiBfemVyb1BhZGRpbmdPZlNpZ25hdHVyZShhLHRoaXMubi5iaXRMZW5ndGgoKSl9O2Z1bmN0aW9uIHBzc19tZ2YxX3N0cihjLGEsZSl7dmFyIGI9XCJcIixkPTA7d2hpbGUoYi5sZW5ndGg8YSl7Yis9aGV4dG9yc3RyKGUocnN0cnRvaGV4KGMrU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsWyhkJjQyNzgxOTAwODApPj4yNCwoZCYxNjcxMTY4MCk+PjE2LChkJjY1MjgwKT4+OCxkJjI1NV0pKSkpO2QrPTF9cmV0dXJuIGJ9UlNBS2V5LnByb3RvdHlwZS5zaWduUFNTPWZ1bmN0aW9uKGUsYSxkKXt2YXIgYz1mdW5jdGlvbihmKXtyZXR1cm4gS0pVUi5jcnlwdG8uVXRpbC5oYXNoSGV4KGYsYSl9O3ZhciBiPWMocnN0cnRvaGV4KGUpKTtpZihkPT09dW5kZWZpbmVkKXtkPS0xfXJldHVybiB0aGlzLnNpZ25XaXRoTWVzc2FnZUhhc2hQU1MoYixhLGQpfTtSU0FLZXkucHJvdG90eXBlLnNpZ25XaXRoTWVzc2FnZUhhc2hQU1M9ZnVuY3Rpb24obCxhLGspe3ZhciBiPWhleHRvcnN0cihsKTt2YXIgZz1iLmxlbmd0aDt2YXIgbT10aGlzLm4uYml0TGVuZ3RoKCktMTt2YXIgYz1NYXRoLmNlaWwobS84KTt2YXIgZDt2YXIgbz1mdW5jdGlvbihpKXtyZXR1cm4gS0pVUi5jcnlwdG8uVXRpbC5oYXNoSGV4KGksYSl9O2lmKGs9PT0tMXx8az09PXVuZGVmaW5lZCl7az1nfWVsc2V7aWYoaz09PS0yKXtrPWMtZy0yfWVsc2V7aWYoazwtMil7dGhyb3dcImludmFsaWQgc2FsdCBsZW5ndGhcIn19fWlmKGM8KGcraysyKSl7dGhyb3dcImRhdGEgdG9vIGxvbmdcIn12YXIgZj1cIlwiO2lmKGs+MCl7Zj1uZXcgQXJyYXkoayk7bmV3IFNlY3VyZVJhbmRvbSgpLm5leHRCeXRlcyhmKTtmPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGYpfXZhciBuPWhleHRvcnN0cihvKHJzdHJ0b2hleChcIlxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcIitiK2YpKSk7dmFyIGo9W107Zm9yKGQ9MDtkPGMtay1nLTI7ZCs9MSl7altkXT0wfXZhciBlPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGopK1wiXFx4MDFcIitmO3ZhciBoPXBzc19tZ2YxX3N0cihuLGUubGVuZ3RoLG8pO3ZhciBxPVtdO2ZvcihkPTA7ZDxlLmxlbmd0aDtkKz0xKXtxW2RdPWUuY2hhckNvZGVBdChkKV5oLmNoYXJDb2RlQXQoZCl9dmFyIHA9KDY1MjgwPj4oOCpjLW0pKSYyNTU7cVswXSY9fnA7Zm9yKGQ9MDtkPGc7ZCsrKXtxLnB1c2gobi5jaGFyQ29kZUF0KGQpKX1xLnB1c2goMTg4KTtyZXR1cm4gX3plcm9QYWRkaW5nT2ZTaWduYXR1cmUodGhpcy5kb1ByaXZhdGUobmV3IEJpZ0ludGVnZXIocSkpLnRvU3RyaW5nKDE2KSx0aGlzLm4uYml0TGVuZ3RoKCkpfTtmdW5jdGlvbiBfcnNhc2lnbl9nZXREZWNyeXB0U2lnbmF0dXJlQkkoYSxkLGMpe3ZhciBiPW5ldyBSU0FLZXkoKTtiLnNldFB1YmxpYyhkLGMpO3ZhciBlPWIuZG9QdWJsaWMoYSk7cmV0dXJuIGV9ZnVuY3Rpb24gX3JzYXNpZ25fZ2V0SGV4RGlnZXN0SW5mb0Zyb21TaWcoYSxjLGIpe3ZhciBlPV9yc2FzaWduX2dldERlY3J5cHRTaWduYXR1cmVCSShhLGMsYik7dmFyIGQ9ZS50b1N0cmluZygxNikucmVwbGFjZSgvXjFmKzAwLyxcIlwiKTtyZXR1cm4gZH1mdW5jdGlvbiBfcnNhc2lnbl9nZXRBbGdOYW1lQW5kSGFzaEZyb21IZXhEaXNnZXN0SW5mbyhmKXtmb3IodmFyIGUgaW4gS0pVUi5jcnlwdG8uVXRpbC5ESUdFU1RJTkZPSEVBRCl7dmFyIGQ9S0pVUi5jcnlwdG8uVXRpbC5ESUdFU1RJTkZPSEVBRFtlXTt2YXIgYj1kLmxlbmd0aDtpZihmLnN1YnN0cmluZygwLGIpPT1kKXt2YXIgYz1bZSxmLnN1YnN0cmluZyhiKV07cmV0dXJuIGN9fXJldHVybltdfVJTQUtleS5wcm90b3R5cGUudmVyaWZ5PWZ1bmN0aW9uKGYsail7aj1qLnJlcGxhY2UoX1JFX0hFWERFQ09OTFksXCJcIik7aj1qLnJlcGxhY2UoL1sgXFxuXSsvZyxcIlwiKTt2YXIgYj1wYXJzZUJpZ0ludChqLDE2KTtpZihiLmJpdExlbmd0aCgpPnRoaXMubi5iaXRMZW5ndGgoKSl7cmV0dXJuIDB9dmFyIGk9dGhpcy5kb1B1YmxpYyhiKTt2YXIgZT1pLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eMWYrMDAvLFwiXCIpO3ZhciBnPV9yc2FzaWduX2dldEFsZ05hbWVBbmRIYXNoRnJvbUhleERpc2dlc3RJbmZvKGUpO2lmKGcubGVuZ3RoPT0wKXtyZXR1cm4gZmFsc2V9dmFyIGQ9Z1swXTt2YXIgaD1nWzFdO3ZhciBhPWZ1bmN0aW9uKGspe3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmhhc2hTdHJpbmcoayxkKX07dmFyIGM9YShmKTtyZXR1cm4oaD09Yyl9O1JTQUtleS5wcm90b3R5cGUudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoPWZ1bmN0aW9uKGUsYSl7YT1hLnJlcGxhY2UoX1JFX0hFWERFQ09OTFksXCJcIik7YT1hLnJlcGxhY2UoL1sgXFxuXSsvZyxcIlwiKTt2YXIgYj1wYXJzZUJpZ0ludChhLDE2KTtpZihiLmJpdExlbmd0aCgpPnRoaXMubi5iaXRMZW5ndGgoKSl7cmV0dXJuIDB9dmFyIGg9dGhpcy5kb1B1YmxpYyhiKTt2YXIgZz1oLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eMWYrMDAvLFwiXCIpO3ZhciBjPV9yc2FzaWduX2dldEFsZ05hbWVBbmRIYXNoRnJvbUhleERpc2dlc3RJbmZvKGcpO2lmKGMubGVuZ3RoPT0wKXtyZXR1cm4gZmFsc2V9dmFyIGQ9Y1swXTt2YXIgZj1jWzFdO3JldHVybihmPT1lKX07UlNBS2V5LnByb3RvdHlwZS52ZXJpZnlQU1M9ZnVuY3Rpb24oYyxiLGEsZil7dmFyIGU9ZnVuY3Rpb24oZyl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaEhleChnLGEpfTt2YXIgZD1lKHJzdHJ0b2hleChjKSk7aWYoZj09PXVuZGVmaW5lZCl7Zj0tMX1yZXR1cm4gdGhpcy52ZXJpZnlXaXRoTWVzc2FnZUhhc2hQU1MoZCxiLGEsZil9O1JTQUtleS5wcm90b3R5cGUudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoUFNTPWZ1bmN0aW9uKGYscyxsLGMpe3ZhciBrPW5ldyBCaWdJbnRlZ2VyKHMsMTYpO2lmKGsuYml0TGVuZ3RoKCk+dGhpcy5uLmJpdExlbmd0aCgpKXtyZXR1cm4gZmFsc2V9dmFyIHI9ZnVuY3Rpb24oaSl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaEhleChpLGwpfTt2YXIgaj1oZXh0b3JzdHIoZik7dmFyIGg9ai5sZW5ndGg7dmFyIGc9dGhpcy5uLmJpdExlbmd0aCgpLTE7dmFyIG09TWF0aC5jZWlsKGcvOCk7dmFyIHE7aWYoYz09PS0xfHxjPT09dW5kZWZpbmVkKXtjPWh9ZWxzZXtpZihjPT09LTIpe2M9bS1oLTJ9ZWxzZXtpZihjPC0yKXt0aHJvd1wiaW52YWxpZCBzYWx0IGxlbmd0aFwifX19aWYobTwoaCtjKzIpKXt0aHJvd1wiZGF0YSB0b28gbG9uZ1wifXZhciBhPXRoaXMuZG9QdWJsaWMoaykudG9CeXRlQXJyYXkoKTtmb3IocT0wO3E8YS5sZW5ndGg7cSs9MSl7YVtxXSY9MjU1fXdoaWxlKGEubGVuZ3RoPG0pe2EudW5zaGlmdCgwKX1pZihhW20tMV0hPT0xODgpe3Rocm93XCJlbmNvZGVkIG1lc3NhZ2UgZG9lcyBub3QgZW5kIGluIDB4YmNcIn1hPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGEpO3ZhciBkPWEuc3Vic3RyKDAsbS1oLTEpO3ZhciBlPWEuc3Vic3RyKGQubGVuZ3RoLGgpO3ZhciBwPSg2NTI4MD4+KDgqbS1nKSkmMjU1O2lmKChkLmNoYXJDb2RlQXQoMCkmcCkhPT0wKXt0aHJvd1wiYml0cyBiZXlvbmQga2V5c2l6ZSBub3QgemVyb1wifXZhciBuPXBzc19tZ2YxX3N0cihlLGQubGVuZ3RoLHIpO3ZhciBvPVtdO2ZvcihxPTA7cTxkLmxlbmd0aDtxKz0xKXtvW3FdPWQuY2hhckNvZGVBdChxKV5uLmNoYXJDb2RlQXQocSl9b1swXSY9fnA7dmFyIGI9bS1oLWMtMjtmb3IocT0wO3E8YjtxKz0xKXtpZihvW3FdIT09MCl7dGhyb3dcImxlZnRtb3N0IG9jdGV0cyBub3QgemVyb1wifX1pZihvW2JdIT09MSl7dGhyb3dcIjB4MDEgbWFya2VyIG5vdCBmb3VuZFwifXJldHVybiBlPT09aGV4dG9yc3RyKHIocnN0cnRvaGV4KFwiXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFwiK2orU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsby5zbGljZSgtYykpKSkpfTtSU0FLZXkuU0FMVF9MRU5fSExFTj0tMTtSU0FLZXkuU0FMVF9MRU5fTUFYPS0yO1JTQUtleS5TQUxUX0xFTl9SRUNPVkVSPS0yO1xuZnVuY3Rpb24gWDUwOSgpe3ZhciBrPUFTTjFIRVgsaj1rLmdldENoaWxkSWR4LGg9ay5nZXRWLGI9ay5nZXRUTFYsZj1rLmdldFZieUxpc3QsYz1rLmdldFRMVmJ5TGlzdCxnPWsuZ2V0SWR4YnlMaXN0LGQ9ay5nZXRWaWR4LGk9ay5vaWRuYW1lLGE9WDUwOSxlPXBlbXRvaGV4O3RoaXMuaGV4PW51bGw7dGhpcy52ZXJzaW9uPTA7dGhpcy5mb2Zmc2V0PTA7dGhpcy5hRXh0SW5mbz1udWxsO3RoaXMuZ2V0VmVyc2lvbj1mdW5jdGlvbigpe2lmKHRoaXMuaGV4PT09bnVsbHx8dGhpcy52ZXJzaW9uIT09MCl7cmV0dXJuIHRoaXMudmVyc2lvbn1pZihjKHRoaXMuaGV4LDAsWzAsMF0pIT09XCJhMDAzMDIwMTAyXCIpe3RoaXMudmVyc2lvbj0xO3RoaXMuZm9mZnNldD0tMTtyZXR1cm4gMX10aGlzLnZlcnNpb249MztyZXR1cm4gM307dGhpcy5nZXRTZXJpYWxOdW1iZXJIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gZih0aGlzLmhleCwwLFswLDErdGhpcy5mb2Zmc2V0XSxcIjAyXCIpfTt0aGlzLmdldFNpZ25hdHVyZUFsZ29yaXRobUZpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGkoZih0aGlzLmhleCwwLFswLDIrdGhpcy5mb2Zmc2V0LDBdLFwiMDZcIikpfTt0aGlzLmdldElzc3VlckhleD1mdW5jdGlvbigpe3JldHVybiBjKHRoaXMuaGV4LDAsWzAsMyt0aGlzLmZvZmZzZXRdLFwiMzBcIil9O3RoaXMuZ2V0SXNzdWVyU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGEuaGV4MmRuKHRoaXMuZ2V0SXNzdWVySGV4KCkpfTt0aGlzLmdldFN1YmplY3RIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gYyh0aGlzLmhleCwwLFswLDUrdGhpcy5mb2Zmc2V0XSxcIjMwXCIpfTt0aGlzLmdldFN1YmplY3RTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gYS5oZXgyZG4odGhpcy5nZXRTdWJqZWN0SGV4KCkpfTt0aGlzLmdldE5vdEJlZm9yZT1mdW5jdGlvbigpe3ZhciBsPWYodGhpcy5oZXgsMCxbMCw0K3RoaXMuZm9mZnNldCwwXSk7bD1sLnJlcGxhY2UoLyguLikvZyxcIiUkMVwiKTtsPWRlY29kZVVSSUNvbXBvbmVudChsKTtyZXR1cm4gbH07dGhpcy5nZXROb3RBZnRlcj1mdW5jdGlvbigpe3ZhciBsPWYodGhpcy5oZXgsMCxbMCw0K3RoaXMuZm9mZnNldCwxXSk7bD1sLnJlcGxhY2UoLyguLikvZyxcIiUkMVwiKTtsPWRlY29kZVVSSUNvbXBvbmVudChsKTtyZXR1cm4gbH07dGhpcy5nZXRQdWJsaWNLZXlIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gay5nZXRUTFZieUxpc3QodGhpcy5oZXgsMCxbMCw2K3RoaXMuZm9mZnNldF0sXCIzMFwiKX07dGhpcy5nZXRQdWJsaWNLZXlJZHg9ZnVuY3Rpb24oKXtyZXR1cm4gZyh0aGlzLmhleCwwLFswLDYrdGhpcy5mb2Zmc2V0XSxcIjMwXCIpfTt0aGlzLmdldFB1YmxpY0tleUNvbnRlbnRJZHg9ZnVuY3Rpb24oKXt2YXIgbD10aGlzLmdldFB1YmxpY0tleUlkeCgpO3JldHVybiBnKHRoaXMuaGV4LGwsWzEsMF0sXCIzMFwiKX07dGhpcy5nZXRQdWJsaWNLZXk9ZnVuY3Rpb24oKXtyZXR1cm4gS0VZVVRJTC5nZXRLZXkodGhpcy5nZXRQdWJsaWNLZXlIZXgoKSxudWxsLFwicGtjczhwdWJcIil9O3RoaXMuZ2V0U2lnbmF0dXJlQWxnb3JpdGhtTmFtZT1mdW5jdGlvbigpe3JldHVybiBpKGYodGhpcy5oZXgsMCxbMSwwXSxcIjA2XCIpKX07dGhpcy5nZXRTaWduYXR1cmVWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiBmKHRoaXMuaGV4LDAsWzJdLFwiMDNcIix0cnVlKX07dGhpcy52ZXJpZnlTaWduYXR1cmU9ZnVuY3Rpb24obil7dmFyIG89dGhpcy5nZXRTaWduYXR1cmVBbGdvcml0aG1OYW1lKCk7dmFyIGw9dGhpcy5nZXRTaWduYXR1cmVWYWx1ZUhleCgpO3ZhciBtPWModGhpcy5oZXgsMCxbMF0sXCIzMFwiKTt2YXIgcD1uZXcgS0pVUi5jcnlwdG8uU2lnbmF0dXJlKHthbGc6b30pO3AuaW5pdChuKTtwLnVwZGF0ZUhleChtKTtyZXR1cm4gcC52ZXJpZnkobCl9O3RoaXMucGFyc2VFeHQ9ZnVuY3Rpb24oKXtpZih0aGlzLnZlcnNpb24hPT0zKXtyZXR1cm4gLTF9dmFyIHA9Zyh0aGlzLmhleCwwLFswLDcsMF0sXCIzMFwiKTt2YXIgbT1qKHRoaXMuaGV4LHApO3RoaXMuYUV4dEluZm89bmV3IEFycmF5KCk7Zm9yKHZhciBuPTA7bjxtLmxlbmd0aDtuKyspe3ZhciBxPXt9O3EuY3JpdGljYWw9ZmFsc2U7dmFyIGw9aih0aGlzLmhleCxtW25dKTt2YXIgcj0wO2lmKGwubGVuZ3RoPT09Myl7cS5jcml0aWNhbD10cnVlO3I9MX1xLm9pZD1rLmhleHRvb2lkc3RyKGYodGhpcy5oZXgsbVtuXSxbMF0sXCIwNlwiKSk7dmFyIG89Zyh0aGlzLmhleCxtW25dLFsxK3JdKTtxLnZpZHg9ZCh0aGlzLmhleCxvKTt0aGlzLmFFeHRJbmZvLnB1c2gocSl9fTt0aGlzLmdldEV4dEluZm89ZnVuY3Rpb24obil7dmFyIGw9dGhpcy5hRXh0SW5mbzt2YXIgbz1uO2lmKCFuLm1hdGNoKC9eWzAtOS5dKyQvKSl7bz1LSlVSLmFzbjEueDUwOS5PSUQubmFtZTJvaWQobil9aWYobz09PVwiXCIpe3JldHVybiB1bmRlZmluZWR9Zm9yKHZhciBtPTA7bTxsLmxlbmd0aDttKyspe2lmKGxbbV0ub2lkPT09byl7cmV0dXJuIGxbbV19fXJldHVybiB1bmRlZmluZWR9O3RoaXMuZ2V0RXh0QmFzaWNDb25zdHJhaW50cz1mdW5jdGlvbigpe3ZhciBuPXRoaXMuZ2V0RXh0SW5mbyhcImJhc2ljQ29uc3RyYWludHNcIik7aWYobj09PXVuZGVmaW5lZCl7cmV0dXJuIG59dmFyIGw9aCh0aGlzLmhleCxuLnZpZHgpO2lmKGw9PT1cIlwiKXtyZXR1cm57fX1pZihsPT09XCIwMTAxZmZcIil7cmV0dXJue2NBOnRydWV9fWlmKGwuc3Vic3RyKDAsOCk9PT1cIjAxMDFmZjAyXCIpe3ZhciBvPWgobCw2KTt2YXIgbT1wYXJzZUludChvLDE2KTtyZXR1cm57Y0E6dHJ1ZSxwYXRoTGVuOm19fXRocm93XCJiYXNpY0NvbnN0cmFpbnRzIHBhcnNlIGVycm9yXCJ9O3RoaXMuZ2V0RXh0S2V5VXNhZ2VCaW49ZnVuY3Rpb24oKXt2YXIgbz10aGlzLmdldEV4dEluZm8oXCJrZXlVc2FnZVwiKTtpZihvPT09dW5kZWZpbmVkKXtyZXR1cm5cIlwifXZhciBtPWgodGhpcy5oZXgsby52aWR4KTtpZihtLmxlbmd0aCUyIT0wfHxtLmxlbmd0aDw9Mil7dGhyb3dcIm1hbGZvcm1lZCBrZXkgdXNhZ2UgdmFsdWVcIn12YXIgbD1wYXJzZUludChtLnN1YnN0cigwLDIpKTt2YXIgbj1wYXJzZUludChtLnN1YnN0cigyKSwxNikudG9TdHJpbmcoMik7cmV0dXJuIG4uc3Vic3RyKDAsbi5sZW5ndGgtbCl9O3RoaXMuZ2V0RXh0S2V5VXNhZ2VTdHJpbmc9ZnVuY3Rpb24oKXt2YXIgbj10aGlzLmdldEV4dEtleVVzYWdlQmluKCk7dmFyIGw9bmV3IEFycmF5KCk7Zm9yKHZhciBtPTA7bTxuLmxlbmd0aDttKyspe2lmKG4uc3Vic3RyKG0sMSk9PVwiMVwiKXtsLnB1c2goWDUwOS5LRVlVU0FHRV9OQU1FW21dKX19cmV0dXJuIGwuam9pbihcIixcIil9O3RoaXMuZ2V0RXh0U3ViamVjdEtleUlkZW50aWZpZXI9ZnVuY3Rpb24oKXt2YXIgbD10aGlzLmdldEV4dEluZm8oXCJzdWJqZWN0S2V5SWRlbnRpZmllclwiKTtpZihsPT09dW5kZWZpbmVkKXtyZXR1cm4gbH1yZXR1cm4gaCh0aGlzLmhleCxsLnZpZHgpfTt0aGlzLmdldEV4dEF1dGhvcml0eUtleUlkZW50aWZpZXI9ZnVuY3Rpb24oKXt2YXIgcD10aGlzLmdldEV4dEluZm8oXCJhdXRob3JpdHlLZXlJZGVudGlmaWVyXCIpO2lmKHA9PT11bmRlZmluZWQpe3JldHVybiBwfXZhciBsPXt9O3ZhciBvPWIodGhpcy5oZXgscC52aWR4KTt2YXIgbT1qKG8sMCk7Zm9yKHZhciBuPTA7bjxtLmxlbmd0aDtuKyspe2lmKG8uc3Vic3RyKG1bbl0sMik9PT1cIjgwXCIpe2wua2lkPWgobyxtW25dKX19cmV0dXJuIGx9O3RoaXMuZ2V0RXh0RXh0S2V5VXNhZ2VOYW1lPWZ1bmN0aW9uKCl7dmFyIHA9dGhpcy5nZXRFeHRJbmZvKFwiZXh0S2V5VXNhZ2VcIik7aWYocD09PXVuZGVmaW5lZCl7cmV0dXJuIHB9dmFyIGw9bmV3IEFycmF5KCk7dmFyIG89Yih0aGlzLmhleCxwLnZpZHgpO2lmKG89PT1cIlwiKXtyZXR1cm4gbH12YXIgbT1qKG8sMCk7Zm9yKHZhciBuPTA7bjxtLmxlbmd0aDtuKyspe2wucHVzaChpKGgobyxtW25dKSkpfXJldHVybiBsfTt0aGlzLmdldEV4dFN1YmplY3RBbHROYW1lPWZ1bmN0aW9uKCl7dmFyIG09dGhpcy5nZXRFeHRTdWJqZWN0QWx0TmFtZTIoKTt2YXIgbD1uZXcgQXJyYXkoKTtmb3IodmFyIG49MDtuPG0ubGVuZ3RoO24rKyl7aWYobVtuXVswXT09PVwiRE5TXCIpe2wucHVzaChtW25dWzFdKX19cmV0dXJuIGx9O3RoaXMuZ2V0RXh0U3ViamVjdEFsdE5hbWUyPWZ1bmN0aW9uKCl7dmFyIHAscyxyO3ZhciBxPXRoaXMuZ2V0RXh0SW5mbyhcInN1YmplY3RBbHROYW1lXCIpO2lmKHE9PT11bmRlZmluZWQpe3JldHVybiBxfXZhciBsPW5ldyBBcnJheSgpO3ZhciBvPWIodGhpcy5oZXgscS52aWR4KTt2YXIgbT1qKG8sMCk7Zm9yKHZhciBuPTA7bjxtLmxlbmd0aDtuKyspe3I9by5zdWJzdHIobVtuXSwyKTtwPWgobyxtW25dKTtpZihyPT09XCI4MVwiKXtzPWhleHRvdXRmOChwKTtsLnB1c2goW1wiTUFJTFwiLHNdKX1pZihyPT09XCI4MlwiKXtzPWhleHRvdXRmOChwKTtsLnB1c2goW1wiRE5TXCIsc10pfWlmKHI9PT1cIjg0XCIpe3M9WDUwOS5oZXgyZG4ocCwwKTtsLnB1c2goW1wiRE5cIixzXSl9aWYocj09PVwiODZcIil7cz1oZXh0b3V0ZjgocCk7bC5wdXNoKFtcIlVSSVwiLHNdKX1pZihyPT09XCI4N1wiKXtzPWhleHRvaXAocCk7bC5wdXNoKFtcIklQXCIsc10pfX1yZXR1cm4gbH07dGhpcy5nZXRFeHRDUkxEaXN0cmlidXRpb25Qb2ludHNVUkk9ZnVuY3Rpb24oKXt2YXIgcT10aGlzLmdldEV4dEluZm8oXCJjUkxEaXN0cmlidXRpb25Qb2ludHNcIik7aWYocT09PXVuZGVmaW5lZCl7cmV0dXJuIHF9dmFyIGw9bmV3IEFycmF5KCk7dmFyIG09aih0aGlzLmhleCxxLnZpZHgpO2Zvcih2YXIgbz0wO288bS5sZW5ndGg7bysrKXt0cnl7dmFyIHI9Zih0aGlzLmhleCxtW29dLFswLDAsMF0sXCI4NlwiKTt2YXIgcD1oZXh0b3V0Zjgocik7bC5wdXNoKHApfWNhdGNoKG4pe319cmV0dXJuIGx9O3RoaXMuZ2V0RXh0QUlBSW5mbz1mdW5jdGlvbigpe3ZhciBwPXRoaXMuZ2V0RXh0SW5mbyhcImF1dGhvcml0eUluZm9BY2Nlc3NcIik7aWYocD09PXVuZGVmaW5lZCl7cmV0dXJuIHB9dmFyIGw9e29jc3A6W10sY2Fpc3N1ZXI6W119O3ZhciBtPWoodGhpcy5oZXgscC52aWR4KTtmb3IodmFyIG49MDtuPG0ubGVuZ3RoO24rKyl7dmFyIHE9Zih0aGlzLmhleCxtW25dLFswXSxcIjA2XCIpO3ZhciBvPWYodGhpcy5oZXgsbVtuXSxbMV0sXCI4NlwiKTtpZihxPT09XCIyYjA2MDEwNTA1MDczMDAxXCIpe2wub2NzcC5wdXNoKGhleHRvdXRmOChvKSl9aWYocT09PVwiMmIwNjAxMDUwNTA3MzAwMlwiKXtsLmNhaXNzdWVyLnB1c2goaGV4dG91dGY4KG8pKX19cmV0dXJuIGx9O3RoaXMuZ2V0RXh0Q2VydGlmaWNhdGVQb2xpY2llcz1mdW5jdGlvbigpe3ZhciBvPXRoaXMuZ2V0RXh0SW5mbyhcImNlcnRpZmljYXRlUG9saWNpZXNcIik7aWYobz09PXVuZGVmaW5lZCl7cmV0dXJuIG99dmFyIGw9Yih0aGlzLmhleCxvLnZpZHgpO3ZhciB1PVtdO3ZhciBzPWoobCwwKTtmb3IodmFyIHI9MDtyPHMubGVuZ3RoO3IrKyl7dmFyIHQ9e307dmFyIG49aihsLHNbcl0pO3QuaWQ9aShoKGwsblswXSkpO2lmKG4ubGVuZ3RoPT09Mil7dmFyIG09aihsLG5bMV0pO2Zvcih2YXIgcT0wO3E8bS5sZW5ndGg7cSsrKXt2YXIgcD1mKGwsbVtxXSxbMF0sXCIwNlwiKTtpZihwPT09XCIyYjA2MDEwNTA1MDcwMjAxXCIpe3QuY3BzPWhleHRvdXRmOChmKGwsbVtxXSxbMV0pKX1lbHNle2lmKHA9PT1cIjJiMDYwMTA1MDUwNzAyMDJcIil7dC51bm90aWNlPWhleHRvdXRmOChmKGwsbVtxXSxbMSwwXSkpfX19fXUucHVzaCh0KX1yZXR1cm4gdX07dGhpcy5yZWFkQ2VydFBFTT1mdW5jdGlvbihsKXt0aGlzLnJlYWRDZXJ0SGV4KGUobCkpfTt0aGlzLnJlYWRDZXJ0SGV4PWZ1bmN0aW9uKGwpe3RoaXMuaGV4PWw7dGhpcy5nZXRWZXJzaW9uKCk7dHJ5e2codGhpcy5oZXgsMCxbMCw3XSxcImEzXCIpO3RoaXMucGFyc2VFeHQoKX1jYXRjaChtKXt9fTt0aGlzLmdldEluZm89ZnVuY3Rpb24oKXt2YXIgbT1YNTA5O3ZhciBCLHUsejtCPVwiQmFzaWMgRmllbGRzXFxuXCI7Qis9XCIgIHNlcmlhbCBudW1iZXI6IFwiK3RoaXMuZ2V0U2VyaWFsTnVtYmVySGV4KCkrXCJcXG5cIjtCKz1cIiAgc2lnbmF0dXJlIGFsZ29yaXRobTogXCIrdGhpcy5nZXRTaWduYXR1cmVBbGdvcml0aG1GaWVsZCgpK1wiXFxuXCI7Qis9XCIgIGlzc3VlcjogXCIrdGhpcy5nZXRJc3N1ZXJTdHJpbmcoKStcIlxcblwiO0IrPVwiICBub3RCZWZvcmU6IFwiK3RoaXMuZ2V0Tm90QmVmb3JlKCkrXCJcXG5cIjtCKz1cIiAgbm90QWZ0ZXI6IFwiK3RoaXMuZ2V0Tm90QWZ0ZXIoKStcIlxcblwiO0IrPVwiICBzdWJqZWN0OiBcIit0aGlzLmdldFN1YmplY3RTdHJpbmcoKStcIlxcblwiO0IrPVwiICBzdWJqZWN0IHB1YmxpYyBrZXkgaW5mbzogXFxuXCI7dT10aGlzLmdldFB1YmxpY0tleSgpO0IrPVwiICAgIGtleSBhbGdvcml0aG06IFwiK3UudHlwZStcIlxcblwiO2lmKHUudHlwZT09PVwiUlNBXCIpe0IrPVwiICAgIG49XCIraGV4dG9wb3NoZXgodS5uLnRvU3RyaW5nKDE2KSkuc3Vic3RyKDAsMTYpK1wiLi4uXFxuXCI7Qis9XCIgICAgZT1cIitoZXh0b3Bvc2hleCh1LmUudG9TdHJpbmcoMTYpKStcIlxcblwifXo9dGhpcy5hRXh0SW5mbztpZih6IT09dW5kZWZpbmVkJiZ6IT09bnVsbCl7Qis9XCJYNTA5djMgRXh0ZW5zaW9uczpcXG5cIjtmb3IodmFyIHI9MDtyPHoubGVuZ3RoO3IrKyl7dmFyIG49eltyXTt2YXIgQT1LSlVSLmFzbjEueDUwOS5PSUQub2lkMm5hbWUobi5vaWQpO2lmKEE9PT1cIlwiKXtBPW4ub2lkfXZhciB4PVwiXCI7aWYobi5jcml0aWNhbD09PXRydWUpe3g9XCJDUklUSUNBTFwifUIrPVwiICBcIitBK1wiIFwiK3grXCI6XFxuXCI7aWYoQT09PVwiYmFzaWNDb25zdHJhaW50c1wiKXt2YXIgdj10aGlzLmdldEV4dEJhc2ljQ29uc3RyYWludHMoKTtpZih2LmNBPT09dW5kZWZpbmVkKXtCKz1cIiAgICB7fVxcblwifWVsc2V7Qis9XCIgICAgY0E9dHJ1ZVwiO2lmKHYucGF0aExlbiE9PXVuZGVmaW5lZCl7Qis9XCIsIHBhdGhMZW49XCIrdi5wYXRoTGVufUIrPVwiXFxuXCJ9fWVsc2V7aWYoQT09PVwia2V5VXNhZ2VcIil7Qis9XCIgICAgXCIrdGhpcy5nZXRFeHRLZXlVc2FnZVN0cmluZygpK1wiXFxuXCJ9ZWxzZXtpZihBPT09XCJzdWJqZWN0S2V5SWRlbnRpZmllclwiKXtCKz1cIiAgICBcIit0aGlzLmdldEV4dFN1YmplY3RLZXlJZGVudGlmaWVyKCkrXCJcXG5cIn1lbHNle2lmKEE9PT1cImF1dGhvcml0eUtleUlkZW50aWZpZXJcIil7dmFyIGw9dGhpcy5nZXRFeHRBdXRob3JpdHlLZXlJZGVudGlmaWVyKCk7aWYobC5raWQhPT11bmRlZmluZWQpe0IrPVwiICAgIGtpZD1cIitsLmtpZCtcIlxcblwifX1lbHNle2lmKEE9PT1cImV4dEtleVVzYWdlXCIpe3ZhciB3PXRoaXMuZ2V0RXh0RXh0S2V5VXNhZ2VOYW1lKCk7Qis9XCIgICAgXCIrdy5qb2luKFwiLCBcIikrXCJcXG5cIn1lbHNle2lmKEE9PT1cInN1YmplY3RBbHROYW1lXCIpe3ZhciB0PXRoaXMuZ2V0RXh0U3ViamVjdEFsdE5hbWUyKCk7Qis9XCIgICAgXCIrdCtcIlxcblwifWVsc2V7aWYoQT09PVwiY1JMRGlzdHJpYnV0aW9uUG9pbnRzXCIpe3ZhciB5PXRoaXMuZ2V0RXh0Q1JMRGlzdHJpYnV0aW9uUG9pbnRzVVJJKCk7Qis9XCIgICAgXCIreStcIlxcblwifWVsc2V7aWYoQT09PVwiYXV0aG9yaXR5SW5mb0FjY2Vzc1wiKXt2YXIgcD10aGlzLmdldEV4dEFJQUluZm8oKTtpZihwLm9jc3AhPT11bmRlZmluZWQpe0IrPVwiICAgIG9jc3A6IFwiK3Aub2NzcC5qb2luKFwiLFwiKStcIlxcblwifWlmKHAuY2Fpc3N1ZXIhPT11bmRlZmluZWQpe0IrPVwiICAgIGNhaXNzdWVyOiBcIitwLmNhaXNzdWVyLmpvaW4oXCIsXCIpK1wiXFxuXCJ9fWVsc2V7aWYoQT09PVwiY2VydGlmaWNhdGVQb2xpY2llc1wiKXt2YXIgbz10aGlzLmdldEV4dENlcnRpZmljYXRlUG9saWNpZXMoKTtmb3IodmFyIHE9MDtxPG8ubGVuZ3RoO3ErKyl7aWYob1txXS5pZCE9PXVuZGVmaW5lZCl7Qis9XCIgICAgcG9saWN5IG9pZDogXCIrb1txXS5pZCtcIlxcblwifWlmKG9bcV0uY3BzIT09dW5kZWZpbmVkKXtCKz1cIiAgICBjcHM6IFwiK29bcV0uY3BzK1wiXFxuXCJ9fX19fX19fX19fX19Qis9XCJzaWduYXR1cmUgYWxnb3JpdGhtOiBcIit0aGlzLmdldFNpZ25hdHVyZUFsZ29yaXRobU5hbWUoKStcIlxcblwiO0IrPVwic2lnbmF0dXJlOiBcIit0aGlzLmdldFNpZ25hdHVyZVZhbHVlSGV4KCkuc3Vic3RyKDAsMTYpK1wiLi4uXFxuXCI7cmV0dXJuIEJ9fVg1MDkuaGV4MmRuPWZ1bmN0aW9uKGYsYil7aWYoYj09PXVuZGVmaW5lZCl7Yj0wfWlmKGYuc3Vic3RyKGIsMikhPT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgRE5cIn12YXIgYz1uZXcgQXJyYXkoKTt2YXIgZD1BU04xSEVYLmdldENoaWxkSWR4KGYsYik7Zm9yKHZhciBlPTA7ZTxkLmxlbmd0aDtlKyspe2MucHVzaChYNTA5LmhleDJyZG4oZixkW2VdKSl9Yz1jLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKFwiL1wiLFwiXFxcXC9cIil9KTtyZXR1cm5cIi9cIitjLmpvaW4oXCIvXCIpfTtYNTA5LmhleDJyZG49ZnVuY3Rpb24oZixiKXtpZihiPT09dW5kZWZpbmVkKXtiPTB9aWYoZi5zdWJzdHIoYiwyKSE9PVwiMzFcIil7dGhyb3dcIm1hbGZvcm1lZCBSRE5cIn12YXIgYz1uZXcgQXJyYXkoKTt2YXIgZD1BU04xSEVYLmdldENoaWxkSWR4KGYsYik7Zm9yKHZhciBlPTA7ZTxkLmxlbmd0aDtlKyspe2MucHVzaChYNTA5LmhleDJhdHRyVHlwZVZhbHVlKGYsZFtlXSkpfWM9Yy5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZShcIitcIixcIlxcXFwrXCIpfSk7cmV0dXJuIGMuam9pbihcIitcIil9O1g1MDkuaGV4MmF0dHJUeXBlVmFsdWU9ZnVuY3Rpb24oZCxpKXt2YXIgaj1BU04xSEVYO3ZhciBoPWouZ2V0VjtpZihpPT09dW5kZWZpbmVkKXtpPTB9aWYoZC5zdWJzdHIoaSwyKSE9PVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBhdHRyaWJ1dGUgdHlwZSBhbmQgdmFsdWVcIn12YXIgZz1qLmdldENoaWxkSWR4KGQsaSk7aWYoZy5sZW5ndGghPT0yfHxkLnN1YnN0cihnWzBdLDIpIT09XCIwNlwiKXtcIm1hbGZvcm1lZCBhdHRyaWJ1dGUgdHlwZSBhbmQgdmFsdWVcIn12YXIgYj1oKGQsZ1swXSk7dmFyIGY9S0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50KGIpO3ZhciBlPUtKVVIuYXNuMS54NTA5Lk9JRC5vaWQyYXR5cGUoZik7dmFyIGE9aChkLGdbMV0pO3ZhciBjPWhleHRvcnN0cihhKTtyZXR1cm4gZStcIj1cIitjfTtYNTA5LmdldFB1YmxpY0tleUZyb21DZXJ0SGV4PWZ1bmN0aW9uKGIpe3ZhciBhPW5ldyBYNTA5KCk7YS5yZWFkQ2VydEhleChiKTtyZXR1cm4gYS5nZXRQdWJsaWNLZXkoKX07WDUwOS5nZXRQdWJsaWNLZXlGcm9tQ2VydFBFTT1mdW5jdGlvbihiKXt2YXIgYT1uZXcgWDUwOSgpO2EucmVhZENlcnRQRU0oYik7cmV0dXJuIGEuZ2V0UHVibGljS2V5KCl9O1g1MDkuZ2V0UHVibGljS2V5SW5mb1Byb3BPZkNlcnRQRU09ZnVuY3Rpb24oYyl7dmFyIGU9QVNOMUhFWDt2YXIgZz1lLmdldFZieUxpc3Q7dmFyIGI9e307dmFyIGEsZixkO2IuYWxncGFyYW09bnVsbDthPW5ldyBYNTA5KCk7YS5yZWFkQ2VydFBFTShjKTtmPWEuZ2V0UHVibGljS2V5SGV4KCk7Yi5rZXloZXg9ZyhmLDAsWzFdLFwiMDNcIikuc3Vic3RyKDIpO2IuYWxnb2lkPWcoZiwwLFswLDBdLFwiMDZcIik7aWYoYi5hbGdvaWQ9PT1cIjJhODY0OGNlM2QwMjAxXCIpe2IuYWxncGFyYW09ZyhmLDAsWzAsMV0sXCIwNlwiKX1yZXR1cm4gYn07WDUwOS5LRVlVU0FHRV9OQU1FPVtcImRpZ2l0YWxTaWduYXR1cmVcIixcIm5vblJlcHVkaWF0aW9uXCIsXCJrZXlFbmNpcGhlcm1lbnRcIixcImRhdGFFbmNpcGhlcm1lbnRcIixcImtleUFncmVlbWVudFwiLFwia2V5Q2VydFNpZ25cIixcImNSTFNpZ25cIixcImVuY2lwaGVyT25seVwiLFwiZGVjaXBoZXJPbmx5XCJdO1xuaWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmp3cz09XCJ1bmRlZmluZWRcInx8IUtKVVIuandzKXtLSlVSLmp3cz17fX1LSlVSLmp3cy5KV1M9ZnVuY3Rpb24oKXt2YXIgYj1LSlVSLGE9Yi5qd3MuSldTLGM9YS5pc1NhZmVKU09OU3RyaW5nO3RoaXMucGFyc2VKV1M9ZnVuY3Rpb24oZyxqKXtpZigodGhpcy5wYXJzZWRKV1MhPT11bmRlZmluZWQpJiYoanx8KHRoaXMucGFyc2VkSldTLnNpZ3ZhbEghPT11bmRlZmluZWQpKSl7cmV0dXJufXZhciBpPWcubWF0Y2goL14oW14uXSspXFwuKFteLl0rKVxcLihbXi5dKykkLyk7aWYoaT09bnVsbCl7dGhyb3dcIkpXUyBzaWduYXR1cmUgaXMgbm90IGEgZm9ybSBvZiAnSGVhZC5QYXlsb2FkLlNpZ1ZhbHVlJy5cIn12YXIgaz1pWzFdO3ZhciBlPWlbMl07dmFyIGw9aVszXTt2YXIgbj1rK1wiLlwiK2U7dGhpcy5wYXJzZWRKV1M9e307dGhpcy5wYXJzZWRKV1MuaGVhZEI2NFU9azt0aGlzLnBhcnNlZEpXUy5wYXlsb2FkQjY0VT1lO3RoaXMucGFyc2VkSldTLnNpZ3ZhbEI2NFU9bDt0aGlzLnBhcnNlZEpXUy5zaT1uO2lmKCFqKXt2YXIgaD1iNjR1dG9oZXgobCk7dmFyIGY9cGFyc2VCaWdJbnQoaCwxNik7dGhpcy5wYXJzZWRKV1Muc2lndmFsSD1oO3RoaXMucGFyc2VkSldTLnNpZ3ZhbEJJPWZ9dmFyIGQ9YjY0dXRvdXRmOChrKTt2YXIgbT1iNjR1dG91dGY4KGUpO3RoaXMucGFyc2VkSldTLmhlYWRTPWQ7dGhpcy5wYXJzZWRKV1MucGF5bG9hZFM9bTtpZighYyhkLHRoaXMucGFyc2VkSldTLFwiaGVhZFBcIikpe3Rocm93XCJtYWxmb3JtZWQgSlNPTiBzdHJpbmcgZm9yIEpXUyBIZWFkOiBcIitkfX19O0tKVVIuandzLkpXUy5zaWduPWZ1bmN0aW9uKGksdix5LHosYSl7dmFyIHc9S0pVUixtPXcuandzLHE9bS5KV1MsZz1xLnJlYWRTYWZlSlNPTlN0cmluZyxwPXEuaXNTYWZlSlNPTlN0cmluZyxkPXcuY3J5cHRvLGs9ZC5FQ0RTQSxvPWQuTWFjLGM9ZC5TaWduYXR1cmUsdD1KU09OO3ZhciBzLGosbjtpZih0eXBlb2YgdiE9XCJzdHJpbmdcIiYmdHlwZW9mIHYhPVwib2JqZWN0XCIpe3Rocm93XCJzcEhlYWRlciBtdXN0IGJlIEpTT04gc3RyaW5nIG9yIG9iamVjdDogXCIrdn1pZih0eXBlb2Ygdj09XCJvYmplY3RcIil7aj12O3M9dC5zdHJpbmdpZnkoail9aWYodHlwZW9mIHY9PVwic3RyaW5nXCIpe3M9djtpZighcChzKSl7dGhyb3dcIkpXUyBIZWFkIGlzIG5vdCBzYWZlIEpTT04gc3RyaW5nOiBcIitzfWo9ZyhzKX1uPXk7aWYodHlwZW9mIHk9PVwib2JqZWN0XCIpe249dC5zdHJpbmdpZnkoeSl9aWYoKGk9PVwiXCJ8fGk9PW51bGwpJiZqLmFsZyE9PXVuZGVmaW5lZCl7aT1qLmFsZ31pZigoaSE9XCJcIiYmaSE9bnVsbCkmJmouYWxnPT09dW5kZWZpbmVkKXtqLmFsZz1pO3M9dC5zdHJpbmdpZnkoail9aWYoaSE9PWouYWxnKXt0aHJvd1wiYWxnIGFuZCBzSGVhZGVyLmFsZyBkb2Vzbid0IG1hdGNoOiBcIitpK1wiIT1cIitqLmFsZ312YXIgcj1udWxsO2lmKHEuandzYWxnMnNpZ2FsZ1tpXT09PXVuZGVmaW5lZCl7dGhyb3dcInVuc3VwcG9ydGVkIGFsZyBuYW1lOiBcIitpfWVsc2V7cj1xLmp3c2FsZzJzaWdhbGdbaV19dmFyIGU9dXRmOHRvYjY0dShzKTt2YXIgbD11dGY4dG9iNjR1KG4pO3ZhciBiPWUrXCIuXCIrbDt2YXIgeD1cIlwiO2lmKHIuc3Vic3RyKDAsNCk9PVwiSG1hY1wiKXtpZih6PT09dW5kZWZpbmVkKXt0aHJvd1wibWFjIGtleSBzaGFsbCBiZSBzcGVjaWZpZWQgZm9yIEhTKiBhbGdcIn12YXIgaD1uZXcgbyh7YWxnOnIscHJvdjpcImNyeXB0b2pzXCIscGFzczp6fSk7aC51cGRhdGVTdHJpbmcoYik7eD1oLmRvRmluYWwoKX1lbHNle2lmKHIuaW5kZXhPZihcIndpdGhFQ0RTQVwiKSE9LTEpe3ZhciBmPW5ldyBjKHthbGc6cn0pO2YuaW5pdCh6LGEpO2YudXBkYXRlU3RyaW5nKGIpO2hBU04xU2lnPWYuc2lnbigpO3g9S0pVUi5jcnlwdG8uRUNEU0EuYXNuMVNpZ1RvQ29uY2F0U2lnKGhBU04xU2lnKX1lbHNle2lmKHIhPVwibm9uZVwiKXt2YXIgZj1uZXcgYyh7YWxnOnJ9KTtmLmluaXQoeixhKTtmLnVwZGF0ZVN0cmluZyhiKTt4PWYuc2lnbigpfX19dmFyIHU9aGV4dG9iNjR1KHgpO3JldHVybiBiK1wiLlwiK3V9O0tKVVIuandzLkpXUy52ZXJpZnk9ZnVuY3Rpb24odyxCLG4pe3ZhciB4PUtKVVIscT14Lmp3cyx0PXEuSldTLGk9dC5yZWFkU2FmZUpTT05TdHJpbmcsZT14LmNyeXB0byxwPWUuRUNEU0Escz1lLk1hYyxkPWUuU2lnbmF0dXJlLG07aWYodHlwZW9mIFJTQUtleSE9PXVuZGVmaW5lZCl7bT1SU0FLZXl9dmFyIHk9dy5zcGxpdChcIi5cIik7aWYoeS5sZW5ndGghPT0zKXtyZXR1cm4gZmFsc2V9dmFyIGY9eVswXTt2YXIgcj15WzFdO3ZhciBjPWYrXCIuXCIrcjt2YXIgQT1iNjR1dG9oZXgoeVsyXSk7dmFyIGw9aShiNjR1dG91dGY4KHlbMF0pKTt2YXIgaz1udWxsO3ZhciB6PW51bGw7aWYobC5hbGc9PT11bmRlZmluZWQpe3Rocm93XCJhbGdvcml0aG0gbm90IHNwZWNpZmllZCBpbiBoZWFkZXJcIn1lbHNle2s9bC5hbGc7ej1rLnN1YnN0cigwLDIpfWlmKG4hPW51bGwmJk9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuKT09PVwiW29iamVjdCBBcnJheV1cIiYmbi5sZW5ndGg+MCl7dmFyIGI9XCI6XCIrbi5qb2luKFwiOlwiKStcIjpcIjtpZihiLmluZGV4T2YoXCI6XCIraytcIjpcIik9PS0xKXt0aHJvd1wiYWxnb3JpdGhtICdcIitrK1wiJyBub3QgYWNjZXB0ZWQgaW4gdGhlIGxpc3RcIn19aWYoayE9XCJub25lXCImJkI9PT1udWxsKXt0aHJvd1wia2V5IHNoYWxsIGJlIHNwZWNpZmllZCB0byB2ZXJpZnkuXCJ9aWYodHlwZW9mIEI9PVwic3RyaW5nXCImJkIuaW5kZXhPZihcIi0tLS0tQkVHSU4gXCIpIT0tMSl7Qj1LRVlVVElMLmdldEtleShCKX1pZih6PT1cIlJTXCJ8fHo9PVwiUFNcIil7aWYoIShCIGluc3RhbmNlb2YgbSkpe3Rocm93XCJrZXkgc2hhbGwgYmUgYSBSU0FLZXkgb2JqIGZvciBSUyogYW5kIFBTKiBhbGdzXCJ9fWlmKHo9PVwiRVNcIil7aWYoIShCIGluc3RhbmNlb2YgcCkpe3Rocm93XCJrZXkgc2hhbGwgYmUgYSBFQ0RTQSBvYmogZm9yIEVTKiBhbGdzXCJ9fWlmKGs9PVwibm9uZVwiKXt9dmFyIHU9bnVsbDtpZih0Lmp3c2FsZzJzaWdhbGdbbC5hbGddPT09dW5kZWZpbmVkKXt0aHJvd1widW5zdXBwb3J0ZWQgYWxnIG5hbWU6IFwiK2t9ZWxzZXt1PXQuandzYWxnMnNpZ2FsZ1trXX1pZih1PT1cIm5vbmVcIil7dGhyb3dcIm5vdCBzdXBwb3J0ZWRcIn1lbHNle2lmKHUuc3Vic3RyKDAsNCk9PVwiSG1hY1wiKXt2YXIgbz1udWxsO2lmKEI9PT11bmRlZmluZWQpe3Rocm93XCJoZXhhZGVjaW1hbCBrZXkgc2hhbGwgYmUgc3BlY2lmaWVkIGZvciBITUFDXCJ9dmFyIGo9bmV3IHMoe2FsZzp1LHBhc3M6Qn0pO2oudXBkYXRlU3RyaW5nKGMpO289ai5kb0ZpbmFsKCk7cmV0dXJuIEE9PW99ZWxzZXtpZih1LmluZGV4T2YoXCJ3aXRoRUNEU0FcIikhPS0xKXt2YXIgaD1udWxsO3RyeXtoPXAuY29uY2F0U2lnVG9BU04xU2lnKEEpfWNhdGNoKHYpe3JldHVybiBmYWxzZX12YXIgZz1uZXcgZCh7YWxnOnV9KTtnLmluaXQoQik7Zy51cGRhdGVTdHJpbmcoYyk7cmV0dXJuIGcudmVyaWZ5KGgpfWVsc2V7dmFyIGc9bmV3IGQoe2FsZzp1fSk7Zy5pbml0KEIpO2cudXBkYXRlU3RyaW5nKGMpO3JldHVybiBnLnZlcmlmeShBKX19fX07S0pVUi5qd3MuSldTLnBhcnNlPWZ1bmN0aW9uKGcpe3ZhciBjPWcuc3BsaXQoXCIuXCIpO3ZhciBiPXt9O3ZhciBmLGUsZDtpZihjLmxlbmd0aCE9MiYmYy5sZW5ndGghPTMpe3Rocm93XCJtYWxmb3JtZWQgc0pXUzogd3JvbmcgbnVtYmVyIG9mICcuJyBzcGxpdHRlZCBlbGVtZW50c1wifWY9Y1swXTtlPWNbMV07aWYoYy5sZW5ndGg9PTMpe2Q9Y1syXX1iLmhlYWRlck9iaj1LSlVSLmp3cy5KV1MucmVhZFNhZmVKU09OU3RyaW5nKGI2NHV0b3V0ZjgoZikpO2IucGF5bG9hZE9iaj1LSlVSLmp3cy5KV1MucmVhZFNhZmVKU09OU3RyaW5nKGI2NHV0b3V0ZjgoZSkpO2IuaGVhZGVyUFA9SlNPTi5zdHJpbmdpZnkoYi5oZWFkZXJPYmosbnVsbCxcIiAgXCIpO2lmKGIucGF5bG9hZE9iaj09bnVsbCl7Yi5wYXlsb2FkUFA9YjY0dXRvdXRmOChlKX1lbHNle2IucGF5bG9hZFBQPUpTT04uc3RyaW5naWZ5KGIucGF5bG9hZE9iaixudWxsLFwiICBcIil9aWYoZCE9PXVuZGVmaW5lZCl7Yi5zaWdIZXg9YjY0dXRvaGV4KGQpfXJldHVybiBifTtLSlVSLmp3cy5KV1MudmVyaWZ5SldUPWZ1bmN0aW9uKGUsbCxyKXt2YXIgZD1LSlVSLGo9ZC5qd3Msbz1qLkpXUyxuPW8ucmVhZFNhZmVKU09OU3RyaW5nLHA9by5pbkFycmF5LGY9by5pbmNsdWRlZEFycmF5O3ZhciBrPWUuc3BsaXQoXCIuXCIpO3ZhciBjPWtbMF07dmFyIGk9a1sxXTt2YXIgcT1jK1wiLlwiK2k7dmFyIG09YjY0dXRvaGV4KGtbMl0pO3ZhciBoPW4oYjY0dXRvdXRmOChjKSk7dmFyIGc9bihiNjR1dG91dGY4KGkpKTtpZihoLmFsZz09PXVuZGVmaW5lZCl7cmV0dXJuIGZhbHNlfWlmKHIuYWxnPT09dW5kZWZpbmVkKXt0aHJvd1wiYWNjZXB0RmllbGQuYWxnIHNoYWxsIGJlIHNwZWNpZmllZFwifWlmKCFwKGguYWxnLHIuYWxnKSl7cmV0dXJuIGZhbHNlfWlmKGcuaXNzIT09dW5kZWZpbmVkJiZ0eXBlb2Ygci5pc3M9PT1cIm9iamVjdFwiKXtpZighcChnLmlzcyxyLmlzcykpe3JldHVybiBmYWxzZX19aWYoZy5zdWIhPT11bmRlZmluZWQmJnR5cGVvZiByLnN1Yj09PVwib2JqZWN0XCIpe2lmKCFwKGcuc3ViLHIuc3ViKSl7cmV0dXJuIGZhbHNlfX1pZihnLmF1ZCE9PXVuZGVmaW5lZCYmdHlwZW9mIHIuYXVkPT09XCJvYmplY3RcIil7aWYodHlwZW9mIGcuYXVkPT1cInN0cmluZ1wiKXtpZighcChnLmF1ZCxyLmF1ZCkpe3JldHVybiBmYWxzZX19ZWxzZXtpZih0eXBlb2YgZy5hdWQ9PVwib2JqZWN0XCIpe2lmKCFmKGcuYXVkLHIuYXVkKSl7cmV0dXJuIGZhbHNlfX19fXZhciBiPWouSW50RGF0ZS5nZXROb3coKTtpZihyLnZlcmlmeUF0IT09dW5kZWZpbmVkJiZ0eXBlb2Ygci52ZXJpZnlBdD09PVwibnVtYmVyXCIpe2I9ci52ZXJpZnlBdH1pZihyLmdyYWNlUGVyaW9kPT09dW5kZWZpbmVkfHx0eXBlb2Ygci5ncmFjZVBlcmlvZCE9PVwibnVtYmVyXCIpe3IuZ3JhY2VQZXJpb2Q9MH1pZihnLmV4cCE9PXVuZGVmaW5lZCYmdHlwZW9mIGcuZXhwPT1cIm51bWJlclwiKXtpZihnLmV4cCtyLmdyYWNlUGVyaW9kPGIpe3JldHVybiBmYWxzZX19aWYoZy5uYmYhPT11bmRlZmluZWQmJnR5cGVvZiBnLm5iZj09XCJudW1iZXJcIil7aWYoYjxnLm5iZi1yLmdyYWNlUGVyaW9kKXtyZXR1cm4gZmFsc2V9fWlmKGcuaWF0IT09dW5kZWZpbmVkJiZ0eXBlb2YgZy5pYXQ9PVwibnVtYmVyXCIpe2lmKGI8Zy5pYXQtci5ncmFjZVBlcmlvZCl7cmV0dXJuIGZhbHNlfX1pZihnLmp0aSE9PXVuZGVmaW5lZCYmci5qdGkhPT11bmRlZmluZWQpe2lmKGcuanRpIT09ci5qdGkpe3JldHVybiBmYWxzZX19aWYoIW8udmVyaWZ5KGUsbCxyLmFsZykpe3JldHVybiBmYWxzZX1yZXR1cm4gdHJ1ZX07S0pVUi5qd3MuSldTLmluY2x1ZGVkQXJyYXk9ZnVuY3Rpb24oYixhKXt2YXIgYz1LSlVSLmp3cy5KV1MuaW5BcnJheTtpZihiPT09bnVsbCl7cmV0dXJuIGZhbHNlfWlmKHR5cGVvZiBiIT09XCJvYmplY3RcIil7cmV0dXJuIGZhbHNlfWlmKHR5cGVvZiBiLmxlbmd0aCE9PVwibnVtYmVyXCIpe3JldHVybiBmYWxzZX1mb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7aWYoIWMoYltkXSxhKSl7cmV0dXJuIGZhbHNlfX1yZXR1cm4gdHJ1ZX07S0pVUi5qd3MuSldTLmluQXJyYXk9ZnVuY3Rpb24oZCxiKXtpZihiPT09bnVsbCl7cmV0dXJuIGZhbHNlfWlmKHR5cGVvZiBiIT09XCJvYmplY3RcIil7cmV0dXJuIGZhbHNlfWlmKHR5cGVvZiBiLmxlbmd0aCE9PVwibnVtYmVyXCIpe3JldHVybiBmYWxzZX1mb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl7aWYoYltjXT09ZCl7cmV0dXJuIHRydWV9fXJldHVybiBmYWxzZX07S0pVUi5qd3MuSldTLmp3c2FsZzJzaWdhbGc9e0hTMjU2OlwiSG1hY1NIQTI1NlwiLEhTMzg0OlwiSG1hY1NIQTM4NFwiLEhTNTEyOlwiSG1hY1NIQTUxMlwiLFJTMjU2OlwiU0hBMjU2d2l0aFJTQVwiLFJTMzg0OlwiU0hBMzg0d2l0aFJTQVwiLFJTNTEyOlwiU0hBNTEyd2l0aFJTQVwiLEVTMjU2OlwiU0hBMjU2d2l0aEVDRFNBXCIsRVMzODQ6XCJTSEEzODR3aXRoRUNEU0FcIixQUzI1NjpcIlNIQTI1NndpdGhSU0FhbmRNR0YxXCIsUFMzODQ6XCJTSEEzODR3aXRoUlNBYW5kTUdGMVwiLFBTNTEyOlwiU0hBNTEyd2l0aFJTQWFuZE1HRjFcIixub25lOlwibm9uZVwiLH07S0pVUi5qd3MuSldTLmlzU2FmZUpTT05TdHJpbmc9ZnVuY3Rpb24oYyxiLGQpe3ZhciBlPW51bGw7dHJ5e2U9anNvblBhcnNlKGMpO2lmKHR5cGVvZiBlIT1cIm9iamVjdFwiKXtyZXR1cm4gMH1pZihlLmNvbnN0cnVjdG9yPT09QXJyYXkpe3JldHVybiAwfWlmKGIpe2JbZF09ZX1yZXR1cm4gMX1jYXRjaChhKXtyZXR1cm4gMH19O0tKVVIuandzLkpXUy5yZWFkU2FmZUpTT05TdHJpbmc9ZnVuY3Rpb24oYil7dmFyIGM9bnVsbDt0cnl7Yz1qc29uUGFyc2UoYik7aWYodHlwZW9mIGMhPVwib2JqZWN0XCIpe3JldHVybiBudWxsfWlmKGMuY29uc3RydWN0b3I9PT1BcnJheSl7cmV0dXJuIG51bGx9cmV0dXJuIGN9Y2F0Y2goYSl7cmV0dXJuIG51bGx9fTtLSlVSLmp3cy5KV1MuZ2V0RW5jb2RlZFNpZ25hdHVyZVZhbHVlRnJvbUpXUz1mdW5jdGlvbihiKXt2YXIgYT1iLm1hdGNoKC9eW14uXStcXC5bXi5dK1xcLihbXi5dKykkLyk7aWYoYT09bnVsbCl7dGhyb3dcIkpXUyBzaWduYXR1cmUgaXMgbm90IGEgZm9ybSBvZiAnSGVhZC5QYXlsb2FkLlNpZ1ZhbHVlJy5cIn1yZXR1cm4gYVsxXX07S0pVUi5qd3MuSldTLmdldEpXS3RodW1icHJpbnQ9ZnVuY3Rpb24oZCl7aWYoZC5rdHkhPT1cIlJTQVwiJiZkLmt0eSE9PVwiRUNcIiYmZC5rdHkhPT1cIm9jdFwiKXt0aHJvd1widW5zdXBwb3J0ZWQgYWxnb3JpdGhtIGZvciBKV0sgVGh1bXByaW50XCJ9dmFyIGE9XCJ7XCI7aWYoZC5rdHk9PT1cIlJTQVwiKXtpZih0eXBlb2YgZC5uIT1cInN0cmluZ1wifHx0eXBlb2YgZC5lIT1cInN0cmluZ1wiKXt0aHJvd1wid3JvbmcgbiBhbmQgZSB2YWx1ZSBmb3IgUlNBIGtleVwifWErPSdcImVcIjpcIicrZC5lKydcIiwnO2ErPSdcImt0eVwiOlwiJytkLmt0eSsnXCIsJzthKz0nXCJuXCI6XCInK2QubisnXCJ9J31lbHNle2lmKGQua3R5PT09XCJFQ1wiKXtpZih0eXBlb2YgZC5jcnYhPVwic3RyaW5nXCJ8fHR5cGVvZiBkLnghPVwic3RyaW5nXCJ8fHR5cGVvZiBkLnkhPVwic3RyaW5nXCIpe3Rocm93XCJ3cm9uZyBjcnYsIHggYW5kIHkgdmFsdWUgZm9yIEVDIGtleVwifWErPSdcImNydlwiOlwiJytkLmNydisnXCIsJzthKz0nXCJrdHlcIjpcIicrZC5rdHkrJ1wiLCc7YSs9J1wieFwiOlwiJytkLngrJ1wiLCc7YSs9J1wieVwiOlwiJytkLnkrJ1wifSd9ZWxzZXtpZihkLmt0eT09PVwib2N0XCIpe2lmKHR5cGVvZiBkLmshPVwic3RyaW5nXCIpe3Rocm93XCJ3cm9uZyBrIHZhbHVlIGZvciBvY3Qoc3ltbWV0cmljKSBrZXlcIn1hKz0nXCJrdHlcIjpcIicrZC5rdHkrJ1wiLCc7YSs9J1wia1wiOlwiJytkLmsrJ1wifSd9fX12YXIgYj1yc3RydG9oZXgoYSk7dmFyIGM9S0pVUi5jcnlwdG8uVXRpbC5oYXNoSGV4KGIsXCJzaGEyNTZcIik7dmFyIGU9aGV4dG9iNjR1KGMpO3JldHVybiBlfTtLSlVSLmp3cy5JbnREYXRlPXt9O0tKVVIuandzLkludERhdGUuZ2V0PWZ1bmN0aW9uKGMpe3ZhciBiPUtKVVIuandzLkludERhdGUsZD1iLmdldE5vdyxhPWIuZ2V0WnVsdTtpZihjPT1cIm5vd1wiKXtyZXR1cm4gZCgpfWVsc2V7aWYoYz09XCJub3cgKyAxaG91clwiKXtyZXR1cm4gZCgpKzYwKjYwfWVsc2V7aWYoYz09XCJub3cgKyAxZGF5XCIpe3JldHVybiBkKCkrNjAqNjAqMjR9ZWxzZXtpZihjPT1cIm5vdyArIDFtb250aFwiKXtyZXR1cm4gZCgpKzYwKjYwKjI0KjMwfWVsc2V7aWYoYz09XCJub3cgKyAxeWVhclwiKXtyZXR1cm4gZCgpKzYwKjYwKjI0KjM2NX1lbHNle2lmKGMubWF0Y2goL1okLykpe3JldHVybiBhKGMpfWVsc2V7aWYoYy5tYXRjaCgvXlswLTldKyQvKSl7cmV0dXJuIHBhcnNlSW50KGMpfX19fX19fXRocm93XCJ1bnN1cHBvcnRlZCBmb3JtYXQ6IFwiK2N9O0tKVVIuandzLkludERhdGUuZ2V0WnVsdT1mdW5jdGlvbihhKXtyZXR1cm4genVsdXRvc2VjKGEpfTtLSlVSLmp3cy5JbnREYXRlLmdldE5vdz1mdW5jdGlvbigpe3ZhciBhPX5+KG5ldyBEYXRlKCkvMTAwMCk7cmV0dXJuIGF9O0tKVVIuandzLkludERhdGUuaW50RGF0ZTJVVENTdHJpbmc9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IERhdGUoYSoxMDAwKTtyZXR1cm4gYi50b1VUQ1N0cmluZygpfTtLSlVSLmp3cy5JbnREYXRlLmludERhdGUyWnVsdT1mdW5jdGlvbihlKXt2YXIgaT1uZXcgRGF0ZShlKjEwMDApLGg9KFwiMDAwMFwiK2kuZ2V0VVRDRnVsbFllYXIoKSkuc2xpY2UoLTQpLGc9KFwiMDBcIisoaS5nZXRVVENNb250aCgpKzEpKS5zbGljZSgtMiksYj0oXCIwMFwiK2kuZ2V0VVRDRGF0ZSgpKS5zbGljZSgtMiksYT0oXCIwMFwiK2kuZ2V0VVRDSG91cnMoKSkuc2xpY2UoLTIpLGM9KFwiMDBcIitpLmdldFVUQ01pbnV0ZXMoKSkuc2xpY2UoLTIpLGY9KFwiMDBcIitpLmdldFVUQ1NlY29uZHMoKSkuc2xpY2UoLTIpO3JldHVybiBoK2crYithK2MrZitcIlpcIn07XG5leHBvcnRzLlNlY3VyZVJhbmRvbSA9IFNlY3VyZVJhbmRvbTtcclxuZXhwb3J0cy5ybmdfc2VlZF90aW1lID0gcm5nX3NlZWRfdGltZTtcclxuXHJcbmV4cG9ydHMuQmlnSW50ZWdlciA9IEJpZ0ludGVnZXI7XHJcbmV4cG9ydHMuUlNBS2V5ID0gUlNBS2V5O1xyXG5leHBvcnRzLkVDRFNBID0gS0pVUi5jcnlwdG8uRUNEU0E7XHJcbmV4cG9ydHMuRFNBID0gS0pVUi5jcnlwdG8uRFNBO1xyXG5leHBvcnRzLlNpZ25hdHVyZSA9IEtKVVIuY3J5cHRvLlNpZ25hdHVyZTtcclxuZXhwb3J0cy5NZXNzYWdlRGlnZXN0ID0gS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdDtcclxuZXhwb3J0cy5NYWMgPSBLSlVSLmNyeXB0by5NYWM7XHJcbmV4cG9ydHMuQ2lwaGVyID0gS0pVUi5jcnlwdG8uQ2lwaGVyO1xyXG5leHBvcnRzLktFWVVUSUwgPSBLRVlVVElMO1xyXG5leHBvcnRzLkFTTjFIRVggPSBBU04xSEVYO1xyXG5leHBvcnRzLlg1MDkgPSBYNTA5O1xyXG5leHBvcnRzLkNyeXB0b0pTID0gQ3J5cHRvSlM7XHJcblxyXG4vLyBleHQvYmFzZTY0LmpzXHJcbmV4cG9ydHMuYjY0dG9oZXggPSBiNjR0b2hleDtcclxuZXhwb3J0cy5iNjR0b0JBID0gYjY0dG9CQTtcclxuXHJcbi8vIGJhc2U2NHguanNcclxuZXhwb3J0cy5zdG9CQSA9IHN0b0JBO1xyXG5leHBvcnRzLkJBdG9zID0gQkF0b3M7XHJcbmV4cG9ydHMuQkF0b2hleCA9IEJBdG9oZXg7XHJcbmV4cG9ydHMuc3RvaGV4ID0gc3RvaGV4O1xyXG5leHBvcnRzLnN0b2I2NCA9IHN0b2I2NDtcclxuZXhwb3J0cy5zdG9iNjR1ID0gc3RvYjY0dTtcclxuZXhwb3J0cy5iNjR1dG9zID0gYjY0dXRvcztcclxuZXhwb3J0cy5iNjR0b2I2NHUgPSBiNjR0b2I2NHU7XHJcbmV4cG9ydHMuYjY0dXRvYjY0ID0gYjY0dXRvYjY0O1xyXG5leHBvcnRzLmhleDJiNjQgPSBoZXgyYjY0O1xyXG5leHBvcnRzLmhleHRvYjY0dSA9IGhleHRvYjY0dTtcclxuZXhwb3J0cy5iNjR1dG9oZXggPSBiNjR1dG9oZXg7XHJcbmV4cG9ydHMudXRmOHRvYjY0dSA9IHV0Zjh0b2I2NHU7XHJcbmV4cG9ydHMuYjY0dXRvdXRmOCA9IGI2NHV0b3V0Zjg7XHJcbmV4cG9ydHMudXRmOHRvYjY0ID0gdXRmOHRvYjY0O1xyXG5leHBvcnRzLmI2NHRvdXRmOCA9IGI2NHRvdXRmODtcclxuZXhwb3J0cy51dGY4dG9oZXggPSB1dGY4dG9oZXg7XHJcbmV4cG9ydHMuaGV4dG91dGY4ID0gaGV4dG91dGY4O1xyXG5leHBvcnRzLmhleHRvcnN0ciA9IGhleHRvcnN0cjtcclxuZXhwb3J0cy5yc3RydG9oZXggPSByc3RydG9oZXg7XHJcbmV4cG9ydHMuaGV4dG9iNjQgPSBoZXh0b2I2NDtcclxuZXhwb3J0cy5oZXh0b2I2NG5sID0gaGV4dG9iNjRubDtcclxuZXhwb3J0cy5iNjRubHRvaGV4ID0gYjY0bmx0b2hleDtcclxuZXhwb3J0cy5oZXh0b3BlbSA9IGhleHRvcGVtO1xyXG5leHBvcnRzLnBlbXRvaGV4ID0gcGVtdG9oZXg7XHJcbmV4cG9ydHMuaGV4dG9BcnJheUJ1ZmZlciA9IGhleHRvQXJyYXlCdWZmZXI7XHJcbmV4cG9ydHMuQXJyYXlCdWZmZXJ0b2hleCA9IEFycmF5QnVmZmVydG9oZXg7XHJcbmV4cG9ydHMuenVsdXRvbXNlYyA9IHp1bHV0b21zZWM7XHJcbmV4cG9ydHMuenVsdXRvc2VjID0genVsdXRvc2VjO1xyXG5leHBvcnRzLnp1bHV0b2RhdGUgPSB6dWx1dG9kYXRlO1xyXG5leHBvcnRzLmRhdGV0b3p1bHUgPSBkYXRldG96dWx1O1xyXG5leHBvcnRzLnVyaWNtcHRvaGV4ID0gdXJpY21wdG9oZXg7XHJcbmV4cG9ydHMuaGV4dG91cmljbXAgPSBoZXh0b3VyaWNtcDtcclxuZXhwb3J0cy5pcHY2dG9oZXggPSBpcHY2dG9oZXg7XHJcbmV4cG9ydHMuaGV4dG9pcHY2ID0gaGV4dG9pcHY2O1xyXG5leHBvcnRzLmhleHRvaXAgPSBoZXh0b2lwO1xyXG5leHBvcnRzLmlwdG9oZXggPSBpcHRvaGV4O1xyXG5leHBvcnRzLmVuY29kZVVSSUNvbXBvbmVudEFsbCA9IGVuY29kZVVSSUNvbXBvbmVudEFsbDtcclxuZXhwb3J0cy5uZXdsaW5lX3RvVW5peCA9IG5ld2xpbmVfdG9Vbml4O1xyXG5leHBvcnRzLm5ld2xpbmVfdG9Eb3MgPSBuZXdsaW5lX3RvRG9zO1xyXG5leHBvcnRzLmhleHRvcG9zaGV4ID0gaGV4dG9wb3NoZXg7XHJcbmV4cG9ydHMuaW50YXJ5c3RydG9oZXggPSBpbnRhcnlzdHJ0b2hleDtcclxuZXhwb3J0cy5zdHJkaWZmaWR4ID0gc3RyZGlmZmlkeDtcclxuXHJcbi8vIG5hbWUgc3BhY2VzXHJcbmV4cG9ydHMuS0pVUiA9IEtKVVI7XHJcbmV4cG9ydHMuY3J5cHRvID0gS0pVUi5jcnlwdG87XHJcbmV4cG9ydHMuYXNuMSA9IEtKVVIuYXNuMTtcclxuZXhwb3J0cy5qd3MgPSBLSlVSLmp3cztcclxuZXhwb3J0cy5sYW5nID0gS0pVUi5sYW5nO1xyXG5cclxuXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzcnNhc2lnbi9kaXN0L2pzcnNhc2lnbi5qcyIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9idWZmZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgVXJsVXRpbGl0eSB9IGZyb20gJy4vVXJsVXRpbGl0eSc7XHJcbmltcG9ydCB7IFNpZ25pblN0YXRlIH0gZnJvbSAnLi9TaWduaW5TdGF0ZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2lnbmluUmVxdWVzdCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7XHJcbiAgICAgICAgLy8gbWFuZGF0b3J5XHJcbiAgICAgICAgdXJsLCBjbGllbnRfaWQsIHJlZGlyZWN0X3VyaSwgcmVzcG9uc2VfdHlwZSwgc2NvcGUsIGF1dGhvcml0eSxcclxuICAgICAgICAvLyBvcHRpb25hbFxyXG4gICAgICAgIGRhdGEsIHByb21wdCwgZGlzcGxheSwgbWF4X2FnZSwgdWlfbG9jYWxlcywgaWRfdG9rZW5faGludCwgbG9naW5faGludCwgYWNyX3ZhbHVlcywgcmVzb3VyY2UsXHJcbiAgICAgICAgcmVxdWVzdCwgcmVxdWVzdF91cmksIGV4dHJhUXVlcnlQYXJhbXMsXHJcbiAgICB9KSB7XHJcbiAgICAgICAgaWYgKCF1cmwpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiU2lnbmluUmVxdWVzdC5jdG9yOiBObyB1cmwgcGFzc2VkXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1cmxcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghY2xpZW50X2lkKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNpZ25pblJlcXVlc3QuY3RvcjogTm8gY2xpZW50X2lkIHBhc3NlZFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2xpZW50X2lkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXJlZGlyZWN0X3VyaSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJTaWduaW5SZXF1ZXN0LmN0b3I6IE5vIHJlZGlyZWN0X3VyaSBwYXNzZWRcIik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlZGlyZWN0X3VyaVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFyZXNwb25zZV90eXBlKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNpZ25pblJlcXVlc3QuY3RvcjogTm8gcmVzcG9uc2VfdHlwZSBwYXNzZWRcIik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlc3BvbnNlX3R5cGVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghc2NvcGUpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiU2lnbmluUmVxdWVzdC5jdG9yOiBObyBzY29wZSBwYXNzZWRcIik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInNjb3BlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWF1dGhvcml0eSkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJTaWduaW5SZXF1ZXN0LmN0b3I6IE5vIGF1dGhvcml0eSBwYXNzZWRcIik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImF1dGhvcml0eVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBvaWRjID0gU2lnbmluUmVxdWVzdC5pc09pZGMocmVzcG9uc2VfdHlwZSk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG5ldyBTaWduaW5TdGF0ZSh7IG5vbmNlOiBvaWRjLCBkYXRhLCBjbGllbnRfaWQsIGF1dGhvcml0eSB9KTtcclxuXHJcbiAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJjbGllbnRfaWRcIiwgY2xpZW50X2lkKTtcclxuICAgICAgICB1cmwgPSBVcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0odXJsLCBcInJlZGlyZWN0X3VyaVwiLCByZWRpcmVjdF91cmkpO1xyXG4gICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwicmVzcG9uc2VfdHlwZVwiLCByZXNwb25zZV90eXBlKTtcclxuICAgICAgICB1cmwgPSBVcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0odXJsLCBcInNjb3BlXCIsIHNjb3BlKTtcclxuXHJcbiAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJzdGF0ZVwiLCB0aGlzLnN0YXRlLmlkKTtcclxuICAgICAgICBpZiAob2lkYykge1xyXG4gICAgICAgICAgICB1cmwgPSBVcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0odXJsLCBcIm5vbmNlXCIsIHRoaXMuc3RhdGUubm9uY2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdGlvbmFsID0geyBwcm9tcHQsIGRpc3BsYXksIG1heF9hZ2UsIHVpX2xvY2FsZXMsIGlkX3Rva2VuX2hpbnQsIGxvZ2luX2hpbnQsIGFjcl92YWx1ZXMsIHJlc291cmNlLCByZXF1ZXN0LCByZXF1ZXN0X3VyaSB9O1xyXG4gICAgICAgIGZvcihsZXQga2V5IGluIG9wdGlvbmFsKXtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbmFsW2tleV0pIHtcclxuICAgICAgICAgICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIGtleSwgb3B0aW9uYWxba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvcihsZXQga2V5IGluIGV4dHJhUXVlcnlQYXJhbXMpe1xyXG4gICAgICAgICAgICB1cmwgPSBVcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0odXJsLCBrZXksIGV4dHJhUXVlcnlQYXJhbXNba2V5XSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpc09pZGMocmVzcG9uc2VfdHlwZSkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSByZXNwb25zZV90eXBlLnNwbGl0KC9cXHMrL2cpLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtID09PSBcImlkX3Rva2VuXCI7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuICEhKHJlc3VsdFswXSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGlzT0F1dGgocmVzcG9uc2VfdHlwZSkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSByZXNwb25zZV90eXBlLnNwbGl0KC9cXHMrL2cpLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtID09PSBcInRva2VuXCI7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuICEhKHJlc3VsdFswXSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1NpZ25pblJlcXVlc3QuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBVcmxVdGlsaXR5IH0gZnJvbSAnLi9VcmxVdGlsaXR5JztcclxuXHJcbmNvbnN0IE9pZGNTY29wZSA9IFwib3BlbmlkXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2lnbmluUmVzcG9uc2Uge1xyXG4gICAgY29uc3RydWN0b3IodXJsKSB7XHJcblxyXG4gICAgICAgIHZhciB2YWx1ZXMgPSBVcmxVdGlsaXR5LnBhcnNlVXJsRnJhZ21lbnQodXJsLCBcIiNcIik7XHJcblxyXG4gICAgICAgIHRoaXMuZXJyb3IgPSB2YWx1ZXMuZXJyb3I7XHJcbiAgICAgICAgdGhpcy5lcnJvcl9kZXNjcmlwdGlvbiA9IHZhbHVlcy5lcnJvcl9kZXNjcmlwdGlvbjtcclxuICAgICAgICB0aGlzLmVycm9yX3VyaSA9IHZhbHVlcy5lcnJvcl91cmk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB2YWx1ZXMuc3RhdGU7XHJcbiAgICAgICAgdGhpcy5pZF90b2tlbiA9IHZhbHVlcy5pZF90b2tlbjtcclxuICAgICAgICB0aGlzLnNlc3Npb25fc3RhdGUgPSB2YWx1ZXMuc2Vzc2lvbl9zdGF0ZTtcclxuICAgICAgICB0aGlzLmFjY2Vzc190b2tlbiA9IHZhbHVlcy5hY2Nlc3NfdG9rZW47XHJcbiAgICAgICAgdGhpcy50b2tlbl90eXBlID0gdmFsdWVzLnRva2VuX3R5cGU7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHZhbHVlcy5zY29wZTtcclxuICAgICAgICB0aGlzLnByb2ZpbGUgPSB1bmRlZmluZWQ7IC8vIHdpbGwgYmUgc2V0IGZyb20gUmVzcG9uc2VWYWxpZGF0b3JcclxuXHJcbiAgICAgICAgbGV0IGV4cGlyZXNfaW4gPSBwYXJzZUludCh2YWx1ZXMuZXhwaXJlc19pbik7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBleHBpcmVzX2luID09PSAnbnVtYmVyJyAmJiBleHBpcmVzX2luID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgbm93ID0gcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xyXG4gICAgICAgICAgICB0aGlzLmV4cGlyZXNfYXQgPSBub3cgKyBleHBpcmVzX2luO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgZXhwaXJlc19pbigpIHtcclxuICAgICAgICBpZiAodGhpcy5leHBpcmVzX2F0KSB7XHJcbiAgICAgICAgICAgIGxldCBub3cgPSBwYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cGlyZXNfYXQgLSBub3c7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGV4cGlyZWQoKSB7XHJcbiAgICAgICAgbGV0IGV4cGlyZXNfaW4gPSB0aGlzLmV4cGlyZXNfaW47XHJcbiAgICAgICAgaWYgKGV4cGlyZXNfaW4gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwaXJlc19pbiA8PSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzY29wZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnNjb3BlIHx8IFwiXCIpLnNwbGl0KFwiIFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNPcGVuSWRDb25uZWN0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNjb3Blcy5pbmRleE9mKE9pZGNTY29wZSkgPj0gMCB8fCAhIXRoaXMuaWRfdG9rZW47XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1NpZ25pblJlc3BvbnNlLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgeyBVcmxVdGlsaXR5IH0gZnJvbSAnLi9VcmxVdGlsaXR5JztcclxuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL1N0YXRlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTaWdub3V0UmVxdWVzdCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7dXJsLCBpZF90b2tlbl9oaW50LCBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksIGRhdGF9KSB7XHJcbiAgICAgICAgaWYgKCF1cmwpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiU2lnbm91dFJlcXVlc3QuY3RvcjogTm8gdXJsIHBhc3NlZFwiKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXJsXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlkX3Rva2VuX2hpbnQpIHtcclxuICAgICAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJpZF90b2tlbl9oaW50XCIsIGlkX3Rva2VuX2hpbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSkge1xyXG4gICAgICAgICAgICB1cmwgPSBVcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0odXJsLCBcInBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaVwiLCBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBuZXcgU3RhdGUoeyBkYXRhIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwic3RhdGVcIiwgdGhpcy5zdGF0ZS5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9TaWdub3V0UmVxdWVzdC5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IFVybFV0aWxpdHkgfSBmcm9tICcuL1VybFV0aWxpdHknO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNpZ25vdXRSZXNwb25zZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih1cmwpIHtcclxuXHJcbiAgICAgICAgdmFyIHZhbHVlcyA9IFVybFV0aWxpdHkucGFyc2VVcmxGcmFnbWVudCh1cmwsIFwiP1wiKTtcclxuXHJcbiAgICAgICAgdGhpcy5lcnJvciA9IHZhbHVlcy5lcnJvcjtcclxuICAgICAgICB0aGlzLmVycm9yX2Rlc2NyaXB0aW9uID0gdmFsdWVzLmVycm9yX2Rlc2NyaXB0aW9uO1xyXG4gICAgICAgIHRoaXMuZXJyb3JfdXJpID0gdmFsdWVzLmVycm9yX3VyaTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHZhbHVlcy5zdGF0ZTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvU2lnbm91dFJlc3BvbnNlLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEluTWVtb3J5V2ViU3RvcmFnZXtcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIGdldEl0ZW0oa2V5KSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiSW5NZW1vcnlXZWJTdG9yYWdlLmdldEl0ZW1cIiwga2V5KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVtrZXldO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEl0ZW0oa2V5LCB2YWx1ZSl7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiSW5NZW1vcnlXZWJTdG9yYWdlLnNldEl0ZW1cIiwga2V5KTtcclxuICAgICAgICB0aGlzLl9kYXRhW2tleV0gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVJdGVtKGtleSl7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiSW5NZW1vcnlXZWJTdG9yYWdlLnJlbW92ZUl0ZW1cIiwga2V5KTtcclxuICAgICAgICBkZWxldGUgdGhpcy5fZGF0YVtrZXldO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX2RhdGEpLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBrZXkoaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5fZGF0YSlbaW5kZXhdO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Jbk1lbW9yeVdlYlN0b3JhZ2UuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCB7IE9pZGNDbGllbnQgfSBmcm9tICcuL09pZGNDbGllbnQnO1xyXG5pbXBvcnQgeyBVc2VyTWFuYWdlclNldHRpbmdzIH0gZnJvbSAnLi9Vc2VyTWFuYWdlclNldHRpbmdzJztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vVXNlcic7XHJcbmltcG9ydCB7IFVzZXJNYW5hZ2VyRXZlbnRzIH0gZnJvbSAnLi9Vc2VyTWFuYWdlckV2ZW50cyc7XHJcbmltcG9ydCB7IFNpbGVudFJlbmV3U2VydmljZSB9IGZyb20gJy4vU2lsZW50UmVuZXdTZXJ2aWNlJztcclxuaW1wb3J0IHsgU2Vzc2lvbk1vbml0b3IgfSBmcm9tICcuL1Nlc3Npb25Nb25pdG9yJztcclxuaW1wb3J0IHsgVG9rZW5SZXZvY2F0aW9uQ2xpZW50IH0gZnJvbSAnLi9Ub2tlblJldm9jYXRpb25DbGllbnQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXJNYW5hZ2VyIGV4dGVuZHMgT2lkY0NsaWVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncyA9IHt9LFxyXG4gICAgICAgIFNpbGVudFJlbmV3U2VydmljZUN0b3IgPSBTaWxlbnRSZW5ld1NlcnZpY2UsXHJcbiAgICAgICAgU2Vzc2lvbk1vbml0b3JDdG9yID0gU2Vzc2lvbk1vbml0b3IsXHJcbiAgICAgICAgVG9rZW5SZXZvY2F0aW9uQ2xpZW50Q3RvciA9IFRva2VuUmV2b2NhdGlvbkNsaWVudFxyXG4gICAgKSB7XHJcblxyXG4gICAgICAgIGlmICghKHNldHRpbmdzIGluc3RhbmNlb2YgVXNlck1hbmFnZXJTZXR0aW5ncykpIHtcclxuICAgICAgICAgICAgc2V0dGluZ3MgPSBuZXcgVXNlck1hbmFnZXJTZXR0aW5ncyhzZXR0aW5ncyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyKHNldHRpbmdzKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IFVzZXJNYW5hZ2VyRXZlbnRzKHNldHRpbmdzKTtcclxuICAgICAgICB0aGlzLl9zaWxlbnRSZW5ld1NlcnZpY2UgPSBuZXcgU2lsZW50UmVuZXdTZXJ2aWNlQ3Rvcih0aGlzKTtcclxuXHJcbiAgICAgICAgLy8gb3JkZXIgaXMgaW1wb3J0YW50IGZvciB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM7IHRoZXNlIHNlcnZpY2VzIGRlcGVuZCB1cG9uIHRoZSBldmVudHMuXHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYXV0b21hdGljU2lsZW50UmVuZXcpIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuY3RvcjogYXV0b21hdGljU2lsZW50UmVuZXcgaXMgY29uZmlndXJlZCwgc2V0dGluZyB1cCBzaWxlbnQgcmVuZXdcIik7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRTaWxlbnRSZW5ldygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubW9uaXRvclNlc3Npb24pIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuY3RvcjogbW9uaXRvclNlc3Npb24gaXMgY29uZmlndXJlZCwgc2V0dGluZyB1cCBzZXNzaW9uIG1vbml0b3JcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3Nlc3Npb25Nb25pdG9yID0gbmV3IFNlc3Npb25Nb25pdG9yQ3Rvcih0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3Rva2VuUmV2b2NhdGlvbkNsaWVudCA9IG5ldyBUb2tlblJldm9jYXRpb25DbGllbnRDdG9yKHRoaXMuX3NldHRpbmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgX3JlZGlyZWN0TmF2aWdhdG9yKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnJlZGlyZWN0TmF2aWdhdG9yO1xyXG4gICAgfVxyXG4gICAgZ2V0IF9wb3B1cE5hdmlnYXRvcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5wb3B1cE5hdmlnYXRvcjtcclxuICAgIH1cclxuICAgIGdldCBfaWZyYW1lTmF2aWdhdG9yKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmlmcmFtZU5hdmlnYXRvcjtcclxuICAgIH1cclxuICAgIGdldCBfdXNlclN0b3JlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnVzZXJTdG9yZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZXZlbnRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXNlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZFVzZXIoKS50aGVuKHVzZXIgPT4ge1xyXG4gICAgICAgICAgICBpZiAodXNlcikge1xyXG4gICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5nZXRVc2VyOiB1c2VyIGxvYWRlZFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMubG9hZCh1c2VyLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLmdldFVzZXI6IHVzZXIgbm90IGZvdW5kIGluIHN0b3JhZ2VcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZVVzZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmVVc2VyKG51bGwpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnJlbW92ZVVzZXI6IHVzZXIgcmVtb3ZlZCBmcm9tIHN0b3JhZ2VcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cy51bmxvYWQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzaWduaW5SZWRpcmVjdChhcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pblN0YXJ0KGFyZ3MsIHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yKS50aGVuKCgpPT57XHJcbiAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUmVkaXJlY3Q6IHN1Y2Nlc3NmdWxcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzaWduaW5SZWRpcmVjdENhbGxiYWNrKHVybCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5FbmQodXJsIHx8IHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yLnVybCkudGhlbih1c2VyID0+IHtcclxuICAgICAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1c2VyLnByb2ZpbGUgJiYgdXNlci5wcm9maWxlLnN1Yikge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUmVkaXJlY3RDYWxsYmFjazogc3VjY2Vzc2Z1bCwgc2lnbmVkIGluIHN1YjogXCIsIHVzZXIucHJvZmlsZS5zdWIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5SZWRpcmVjdENhbGxiYWNrOiBubyBzdWJcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB1c2VyO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNpZ25pblBvcHVwKGFyZ3MgPSB7fSkge1xyXG4gICAgICAgIGxldCB1cmwgPSBhcmdzLnJlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnBvcHVwX3JlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnJlZGlyZWN0X3VyaTtcclxuICAgICAgICBpZiAoIXVybCkge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cDogTm8gcG9wdXBfcmVkaXJlY3RfdXJpIG9yIHJlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gcG9wdXBfcmVkaXJlY3RfdXJpIG9yIHJlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFyZ3MucmVkaXJlY3RfdXJpID0gdXJsO1xyXG4gICAgICAgIGFyZ3MuZGlzcGxheSA9IFwicG9wdXBcIjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pbihhcmdzLCB0aGlzLl9wb3B1cE5hdmlnYXRvciwge1xyXG4gICAgICAgICAgICBzdGFydFVybDogdXJsLFxyXG4gICAgICAgICAgICBwb3B1cFdpbmRvd0ZlYXR1cmVzOiBhcmdzLnBvcHVwV2luZG93RmVhdHVyZXMgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cFdpbmRvd0ZlYXR1cmVzLFxyXG4gICAgICAgICAgICBwb3B1cFdpbmRvd1RhcmdldDogYXJncy5wb3B1cFdpbmRvd1RhcmdldCB8fCB0aGlzLnNldHRpbmdzLnBvcHVwV2luZG93VGFyZ2V0XHJcbiAgICAgICAgfSkudGhlbih1c2VyID0+IHtcclxuICAgICAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1c2VyLnByb2ZpbGUgJiYgdXNlci5wcm9maWxlLnN1Yikge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUG9wdXA6IHNpZ25pblBvcHVwIHN1Y2Nlc3NmdWwsIHNpZ25lZCBpbiBzdWI6IFwiLCB1c2VyLnByb2ZpbGUuc3ViKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUG9wdXA6IG5vIHN1YlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzaWduaW5Qb3B1cENhbGxiYWNrKHVybCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5DYWxsYmFjayh1cmwsIHRoaXMuX3BvcHVwTmF2aWdhdG9yKS50aGVuKHVzZXIgPT4ge1xyXG4gICAgICAgICAgICBpZiAodXNlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHVzZXIucHJvZmlsZSAmJiB1c2VyLnByb2ZpbGUuc3ViKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cENhbGxiYWNrOiBzdWNjZXNzZnVsLCBzaWduZWQgaW4gc3ViOiBcIiwgdXNlci5wcm9maWxlLnN1Yik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblBvcHVwQ2FsbGJhY2s6IG5vIHN1YlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICAgICAgfSkuY2F0Y2goZXJyPT57XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJNYW5hZ2VyLnNpZ25pblBvcHVwQ2FsbGJhY2sgZXJyb3I6IFwiICsgZXJyICYmIGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2lnbmluU2lsZW50KGFyZ3MgPSB7fSkge1xyXG4gICAgICAgIGxldCB1cmwgPSBhcmdzLnJlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnNpbGVudF9yZWRpcmVjdF91cmk7XHJcbiAgICAgICAgaWYgKCF1cmwpIHtcclxuICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlck1hbmFnZXIuc2lnbmluU2lsZW50OiBObyBzaWxlbnRfcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBzaWxlbnRfcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXJncy5yZWRpcmVjdF91cmkgPSB1cmw7XHJcbiAgICAgICAgYXJncy5wcm9tcHQgPSBcIm5vbmVcIjtcclxuXHJcbiAgICAgICAgbGV0IHNldElkVG9rZW47XHJcbiAgICAgICAgaWYgKGFyZ3MuaWRfdG9rZW5faGludCB8fCAhdGhpcy5zZXR0aW5ncy5pbmNsdWRlSWRUb2tlbkluU2lsZW50UmVuZXcpIHtcclxuICAgICAgICAgICAgc2V0SWRUb2tlbiA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2V0SWRUb2tlbiA9IHRoaXMuX2xvYWRVc2VyKCkudGhlbih1c2VyID0+IHtcclxuICAgICAgICAgICAgICAgIGFyZ3MuaWRfdG9rZW5faGludCA9IHVzZXIgJiYgdXNlci5pZF90b2tlbjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2V0SWRUb2tlbi50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pbihhcmdzLCB0aGlzLl9pZnJhbWVOYXZpZ2F0b3IsIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0VXJsOiB1cmwsXHJcbiAgICAgICAgICAgICAgICBzaWxlbnRSZXF1ZXN0VGltZW91dDogYXJncy5zaWxlbnRSZXF1ZXN0VGltZW91dCB8fCB0aGlzLnNldHRpbmdzLnNpbGVudFJlcXVlc3RUaW1lb3V0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pLnRoZW4odXNlciA9PiB7XHJcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXNlci5wcm9maWxlICYmIHVzZXIucHJvZmlsZS5zdWIpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblNpbGVudDogc3VjY2Vzc2Z1bCwgc2lnbmVkIGluIHN1YjogXCIsIHVzZXIucHJvZmlsZS5zdWIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5TaWxlbnQ6IG5vIHN1YlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzaWduaW5TaWxlbnRDYWxsYmFjayh1cmwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluQ2FsbGJhY2sodXJsLCB0aGlzLl9pZnJhbWVOYXZpZ2F0b3IpLnRoZW4odXNlciA9PiB7XHJcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXNlci5wcm9maWxlICYmIHVzZXIucHJvZmlsZS5zdWIpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblNpbGVudENhbGxiYWNrOiBzdWNjZXNzZnVsLCBzaWduZWQgaW4gc3ViOiBcIiwgdXNlci5wcm9maWxlLnN1Yik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblNpbGVudENhbGxiYWNrOiBubyBzdWJcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB1c2VyO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHF1ZXJ5U2Vzc2lvblN0YXR1cyhhcmdzID0ge30pIHtcclxuICAgICAgICBsZXQgdXJsID0gYXJncy5yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5zaWxlbnRfcmVkaXJlY3RfdXJpO1xyXG4gICAgICAgIGlmICghdXJsKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1czogTm8gc2lsZW50X3JlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gc2lsZW50X3JlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFyZ3MucmVkaXJlY3RfdXJpID0gdXJsO1xyXG4gICAgICAgIGFyZ3MucHJvbXB0ID0gXCJub25lXCI7XHJcbiAgICAgICAgYXJncy5yZXNwb25zZV90eXBlID0gXCJpZF90b2tlblwiO1xyXG4gICAgICAgIGFyZ3Muc2NvcGUgPSBcIm9wZW5pZFwiO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluU3RhcnQoYXJncywgdGhpcy5faWZyYW1lTmF2aWdhdG9yLCB7XHJcbiAgICAgICAgICAgIHN0YXJ0VXJsOiB1cmwsXHJcbiAgICAgICAgICAgIHNpbGVudFJlcXVlc3RUaW1lb3V0OiBhcmdzLnNpbGVudFJlcXVlc3RUaW1lb3V0IHx8IHRoaXMuc2V0dGluZ3Muc2lsZW50UmVxdWVzdFRpbWVvdXRcclxuICAgICAgICB9KS50aGVuKG5hdlJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc1NpZ25pblJlc3BvbnNlKG5hdlJlc3BvbnNlLnVybCkudGhlbihzaWduaW5SZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5xdWVyeVNlc3Npb25TdGF0dXM6IGdvdCBzaWduaW4gcmVzcG9uc2VcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNpZ25pblJlc3BvbnNlLnNlc3Npb25fc3RhdGUgJiYgc2lnbmluUmVzcG9uc2UucHJvZmlsZS5zdWIgJiYgc2lnbmluUmVzcG9uc2UucHJvZmlsZS5zaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1czogcXVlcnlTZXNzaW9uU3RhdHVzIHN1Y2Nlc3MgZm9yIHN1YjogXCIsICBzaWduaW5SZXNwb25zZS5wcm9maWxlLnN1Yik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbl9zdGF0ZTogc2lnbmluUmVzcG9uc2Uuc2Vzc2lvbl9zdGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViOiBzaWduaW5SZXNwb25zZS5wcm9maWxlLnN1YixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2lkOiBzaWduaW5SZXNwb25zZS5wcm9maWxlLnNpZFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuaW5mbyhcInF1ZXJ5U2Vzc2lvblN0YXR1cyBzdWNjZXNzZnVsLCB1c2VyIG5vdCBhdXRoZW50aWNhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBfc2lnbmluKGFyZ3MsIG5hdmlnYXRvciwgbmF2aWdhdG9yUGFyYW1zID0ge30pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluU3RhcnQoYXJncywgbmF2aWdhdG9yLCBuYXZpZ2F0b3JQYXJhbXMpLnRoZW4obmF2UmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluRW5kKG5hdlJlc3BvbnNlLnVybCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBfc2lnbmluU3RhcnQoYXJncywgbmF2aWdhdG9yLCBuYXZpZ2F0b3JQYXJhbXMgPSB7fSkge1xyXG5cclxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLnByZXBhcmUobmF2aWdhdG9yUGFyYW1zKS50aGVuKGhhbmRsZSA9PiB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWduaW5TdGFydDogZ290IG5hdmlnYXRvciB3aW5kb3cgaGFuZGxlXCIpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU2lnbmluUmVxdWVzdChhcmdzKS50aGVuKHNpZ25pblJlcXVlc3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pblN0YXJ0OiBnb3Qgc2lnbmluIHJlcXVlc3RcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgbmF2aWdhdG9yUGFyYW1zLnVybCA9IHNpZ25pblJlcXVlc3QudXJsO1xyXG4gICAgICAgICAgICAgICAgbmF2aWdhdG9yUGFyYW1zLmlkID0gc2lnbmluUmVxdWVzdC5zdGF0ZS5pZDtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlLm5hdmlnYXRlKG5hdmlnYXRvclBhcmFtcyk7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlLmNsb3NlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pblN0YXJ0OiBFcnJvciBhZnRlciBwcmVwYXJpbmcgbmF2aWdhdG9yLCBjbG9zaW5nIG5hdmlnYXRvciB3aW5kb3dcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX3NpZ25pbkVuZCh1cmwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzU2lnbmluUmVzcG9uc2UodXJsKS50aGVuKHNpZ25pblJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pbkVuZDogZ290IHNpZ25pbiByZXNwb25zZVwiKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB1c2VyID0gbmV3IFVzZXIoc2lnbmluUmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmVVc2VyKHVzZXIpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pbkVuZDogdXNlciBzdG9yZWRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLmxvYWQodXNlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX3NpZ25pbkNhbGxiYWNrKHVybCwgbmF2aWdhdG9yKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pbkNhbGxiYWNrXCIpO1xyXG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IuY2FsbGJhY2sodXJsKTtcclxuICAgIH1cclxuXHJcbiAgICBzaWdub3V0UmVkaXJlY3QoYXJncyA9IHt9KSB7XHJcbiAgICAgICAgbGV0IHBvc3RMb2dvdXRSZWRpcmVjdFVyaSA9IGFyZ3MucG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpIHx8IHRoaXMuc2V0dGluZ3MucG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO1xyXG4gICAgICAgIGlmIChwb3N0TG9nb3V0UmVkaXJlY3RVcmkpe1xyXG4gICAgICAgICAgICBhcmdzLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSA9IHBvc3RMb2dvdXRSZWRpcmVjdFVyaTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25vdXRTdGFydChhcmdzLCB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvcikudGhlbigoKT0+e1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25vdXRSZWRpcmVjdDogc3VjY2Vzc2Z1bFwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHNpZ25vdXRSZWRpcmVjdENhbGxiYWNrKHVybCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWdub3V0RW5kKHVybCB8fCB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvci51cmwpLnRoZW4ocmVzcG9uc2U9PntcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWdub3V0UmVkaXJlY3RDYWxsYmFjazogc3VjY2Vzc2Z1bFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNpZ25vdXRQb3B1cChhcmdzID0ge30pIHtcclxuICAgICAgICBsZXQgdXJsID0gYXJncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XHJcbiAgICAgICAgYXJncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgPSB1cmw7XHJcbiAgICAgICAgYXJncy5kaXNwbGF5ID0gXCJwb3B1cFwiO1xyXG4gICAgICAgIGlmIChhcmdzLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSl7XHJcbiAgICAgICAgICAgIC8vIHdlJ3JlIHB1dHRpbmcgYSBkdW1teSBlbnRyeSBpbiBoZXJlIGJlY2F1c2Ugd2VcclxuICAgICAgICAgICAgLy8gbmVlZCBhIHVuaXF1ZSBpZCBmcm9tIHRoZSBzdGF0ZSBmb3Igbm90aWZpY2F0aW9uXHJcbiAgICAgICAgICAgIC8vIHRvIHRoZSBwYXJlbnQgd2luZG93LCB3aGljaCBpcyBuZWNlc3NhcnkgaWYgd2VcclxuICAgICAgICAgICAgLy8gcGxhbiB0byByZXR1cm4gYmFjayB0byB0aGUgY2xpZW50IGFmdGVyIHNpZ25vdXRcclxuICAgICAgICAgICAgLy8gYW5kIHNvIHdlIGNhbiBjbG9zZSB0aGUgcG9wdXAgYWZ0ZXIgc2lnbm91dFxyXG4gICAgICAgICAgICBhcmdzLnN0YXRlID0gYXJncy5zdGF0ZSB8fCB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWdub3V0KGFyZ3MsIHRoaXMuX3BvcHVwTmF2aWdhdG9yLCB7XHJcbiAgICAgICAgICAgIHN0YXJ0VXJsOiB1cmwsXHJcbiAgICAgICAgICAgIHBvcHVwV2luZG93RmVhdHVyZXM6IGFyZ3MucG9wdXBXaW5kb3dGZWF0dXJlcyB8fCB0aGlzLnNldHRpbmdzLnBvcHVwV2luZG93RmVhdHVyZXMsXHJcbiAgICAgICAgICAgIHBvcHVwV2luZG93VGFyZ2V0OiBhcmdzLnBvcHVwV2luZG93VGFyZ2V0IHx8IHRoaXMuc2V0dGluZ3MucG9wdXBXaW5kb3dUYXJnZXRcclxuICAgICAgICB9KS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cDogc3VjY2Vzc2Z1bFwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHNpZ25vdXRQb3B1cENhbGxiYWNrKHVybCwga2VlcE9wZW4pIHtcclxuICAgICAgICBpZiAodHlwZW9mKGtlZXBPcGVuKSA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mKHVybCkgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICB1cmwgPSBudWxsO1xyXG4gICAgICAgICAgICBrZWVwT3BlbiA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZGVsaW1pdGVyID0gJz8nO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cE5hdmlnYXRvci5jYWxsYmFjayh1cmwsIGtlZXBPcGVuLCBkZWxpbWl0ZXIpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25vdXRQb3B1cENhbGxiYWNrOiBzdWNjZXNzZnVsXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF9zaWdub3V0KGFyZ3MsIG5hdmlnYXRvciwgbmF2aWdhdG9yUGFyYW1zID0ge30pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbm91dFN0YXJ0KGFyZ3MsIG5hdmlnYXRvciwgbmF2aWdhdG9yUGFyYW1zKS50aGVuKG5hdlJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25vdXRFbmQobmF2UmVzcG9uc2UudXJsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9zaWdub3V0U3RhcnQoYXJncyA9IHt9LCBuYXZpZ2F0b3IsIG5hdmlnYXRvclBhcmFtcyA9IHt9KSB7XHJcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5wcmVwYXJlKG5hdmlnYXRvclBhcmFtcykudGhlbihoYW5kbGUgPT4ge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbm91dFN0YXJ0OiBnb3QgbmF2aWdhdG9yIHdpbmRvdyBoYW5kbGVcIik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9hZFVzZXIoKS50aGVuKHVzZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25vdXRTdGFydDogbG9hZGVkIGN1cnJlbnQgdXNlciBmcm9tIHN0b3JhZ2VcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJldm9rZVByb21pc2UgPSB0aGlzLl9zZXR0aW5ncy5yZXZva2VBY2Nlc3NUb2tlbk9uU2lnbm91dCA/IHRoaXMuX3Jldm9rZUludGVybmFsKHVzZXIpIDogUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV2b2tlUHJvbWlzZS50aGVuKCgpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkX3Rva2VuID0gYXJncy5pZF90b2tlbl9oaW50IHx8IHVzZXIgJiYgdXNlci5pZF90b2tlbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaWRfdG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25vdXRTdGFydDogU2V0dGluZyBpZF90b2tlbiBpbnRvIHNpZ25vdXQgcmVxdWVzdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5pZF90b2tlbl9oaW50ID0gaWRfdG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVVc2VyKCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWdub3V0U3RhcnQ6IHVzZXIgcmVtb3ZlZCwgY3JlYXRpbmcgc2lnbm91dCByZXF1ZXN0XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU2lnbm91dFJlcXVlc3QoYXJncykudGhlbihzaWdub3V0UmVxdWVzdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbm91dFN0YXJ0OiBnb3Qgc2lnbm91dCByZXF1ZXN0XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvclBhcmFtcy51cmwgPSBzaWdub3V0UmVxdWVzdC51cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2lnbm91dFJlcXVlc3Quc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3JQYXJhbXMuaWQgPSBzaWdub3V0UmVxdWVzdC5zdGF0ZS5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUubmF2aWdhdGUobmF2aWdhdG9yUGFyYW1zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChoYW5kbGUuY2xvc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbm91dFN0YXJ0OiBFcnJvciBhZnRlciBwcmVwYXJpbmcgbmF2aWdhdG9yLCBjbG9zaW5nIG5hdmlnYXRvciB3aW5kb3dcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX3NpZ25vdXRFbmQodXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc1NpZ25vdXRSZXNwb25zZSh1cmwpLnRoZW4oc2lnbm91dFJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25vdXRFbmQ6IGdvdCBzaWdub3V0IHJlc3BvbnNlXCIpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHNpZ25vdXRSZXNwb25zZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXZva2VBY2Nlc3NUb2tlbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZFVzZXIoKS50aGVuKHVzZXIgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmV2b2tlSW50ZXJuYWwodXNlciwgdHJ1ZSkudGhlbihzdWNjZXNzID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIucmV2b2tlQWNjZXNzVG9rZW46IHJlbW92aW5nIHRva2VuIHByb3BlcnRpZXMgZnJvbSB1c2VyIGFuZCByZS1zdG9yaW5nXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1c2VyLmFjY2Vzc190b2tlbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlci5leHBpcmVzX2F0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB1c2VyLnRva2VuX3R5cGUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yZVVzZXIodXNlcikudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLnJldm9rZUFjY2Vzc1Rva2VuOiB1c2VyIHN0b3JlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLmxvYWQodXNlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pLnRoZW4oKCk9PntcclxuICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5yZXZva2VBY2Nlc3NUb2tlbjogYWNjZXNzIHRva2VuIHJldm9rZWQgc3VjY2Vzc2Z1bGx5XCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF9yZXZva2VJbnRlcm5hbCh1c2VyLCByZXF1aXJlZCkge1xyXG4gICAgICAgIHZhciBhY2Nlc3NfdG9rZW4gPSB1c2VyICYmIHVzZXIuYWNjZXNzX3Rva2VuO1xyXG5cclxuICAgICAgICAvLyBjaGVjayBmb3IgSldUIHZzLiByZWZlcmVuY2UgdG9rZW5cclxuICAgICAgICBpZiAoIWFjY2Vzc190b2tlbiB8fCBhY2Nlc3NfdG9rZW4uaW5kZXhPZignLicpID49IDApIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIucmV2b2tlQWNjZXNzVG9rZW46IG5vIG5lZWQgdG8gcmV2b2tlIGR1ZSB0byBubyB1c2VyLCB0b2tlbiwgb3IgSldUIGZvcm1hdFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdG9rZW5SZXZvY2F0aW9uQ2xpZW50LnJldm9rZShhY2Nlc3NfdG9rZW4sIHJlcXVpcmVkKS50aGVuKCgpID0+IHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0U2lsZW50UmVuZXcoKSB7XHJcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdTZXJ2aWNlLnN0YXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RvcFNpbGVudFJlbmV3KCkge1xyXG4gICAgICAgIHRoaXMuX3NpbGVudFJlbmV3U2VydmljZS5zdG9wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF91c2VyU3RvcmVLZXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIGB1c2VyOiR7dGhpcy5zZXR0aW5ncy5hdXRob3JpdHl9OiR7dGhpcy5zZXR0aW5ncy5jbGllbnRfaWR9YDtcclxuICAgIH1cclxuXHJcbiAgICBfbG9hZFVzZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJTdG9yZS5nZXQodGhpcy5fdXNlclN0b3JlS2V5KS50aGVuKHN0b3JhZ2VTdHJpbmcgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc3RvcmFnZVN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX2xvYWRVc2VyOiB1c2VyIHN0b3JhZ2VTdHJpbmcgbG9hZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVzZXIuZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmFnZVN0cmluZyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9sb2FkVXNlcjogbm8gdXNlciBzdG9yYWdlU3RyaW5nXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdG9yZVVzZXIodXNlcikge1xyXG4gICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLnN0b3JlVXNlcjogc3RvcmluZyB1c2VyXCIpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0b3JhZ2VTdHJpbmcgPSB1c2VyLnRvU3RvcmFnZVN0cmluZygpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlclN0b3JlLnNldCh0aGlzLl91c2VyU3RvcmVLZXksIHN0b3JhZ2VTdHJpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgTG9nLmRlYnVnKFwic3RvcmVVc2VyLnN0b3JlVXNlcjogcmVtb3ZpbmcgdXNlclwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJTdG9yZS5yZW1vdmUodGhpcy5fdXNlclN0b3JlS2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1VzZXJNYW5hZ2VyLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgeyBPaWRjQ2xpZW50U2V0dGluZ3MgfSBmcm9tICcuL09pZGNDbGllbnRTZXR0aW5ncyc7XHJcbmltcG9ydCB7IFJlZGlyZWN0TmF2aWdhdG9yIH0gZnJvbSAnLi9SZWRpcmVjdE5hdmlnYXRvcic7XHJcbmltcG9ydCB7IFBvcHVwTmF2aWdhdG9yIH0gZnJvbSAnLi9Qb3B1cE5hdmlnYXRvcic7XHJcbmltcG9ydCB7IElGcmFtZU5hdmlnYXRvciB9IGZyb20gJy4vSUZyYW1lTmF2aWdhdG9yJztcclxuaW1wb3J0IHsgV2ViU3RvcmFnZVN0YXRlU3RvcmUgfSBmcm9tICcuL1dlYlN0b3JhZ2VTdGF0ZVN0b3JlJztcclxuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9HbG9iYWwnO1xyXG5cclxuY29uc3QgRGVmYXVsdEFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lID0gNjA7XHJcbmNvbnN0IERlZmF1bHRDaGVja1Nlc3Npb25JbnRlcnZhbCA9IDIwMDA7XHJcblxyXG5leHBvcnQgY2xhc3MgVXNlck1hbmFnZXJTZXR0aW5ncyBleHRlbmRzIE9pZGNDbGllbnRTZXR0aW5ncyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7XHJcbiAgICAgICAgcG9wdXBfcmVkaXJlY3RfdXJpLFxyXG4gICAgICAgIHBvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSxcclxuICAgICAgICBwb3B1cFdpbmRvd0ZlYXR1cmVzLFxyXG4gICAgICAgIHBvcHVwV2luZG93VGFyZ2V0LFxyXG4gICAgICAgIHNpbGVudF9yZWRpcmVjdF91cmksXHJcbiAgICAgICAgc2lsZW50UmVxdWVzdFRpbWVvdXQsXHJcbiAgICAgICAgYXV0b21hdGljU2lsZW50UmVuZXcgPSBmYWxzZSxcclxuICAgICAgICBpbmNsdWRlSWRUb2tlbkluU2lsZW50UmVuZXcgPSB0cnVlLFxyXG4gICAgICAgIG1vbml0b3JTZXNzaW9uID0gdHJ1ZSxcclxuICAgICAgICBjaGVja1Nlc3Npb25JbnRlcnZhbCA9IERlZmF1bHRDaGVja1Nlc3Npb25JbnRlcnZhbCxcclxuICAgICAgICBzdG9wQ2hlY2tTZXNzaW9uT25FcnJvciA9IHRydWUsXHJcbiAgICAgICAgcmV2b2tlQWNjZXNzVG9rZW5PblNpZ25vdXQgPSBmYWxzZSxcclxuICAgICAgICBhY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IERlZmF1bHRBY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSxcclxuICAgICAgICByZWRpcmVjdE5hdmlnYXRvciA9IG5ldyBSZWRpcmVjdE5hdmlnYXRvcigpLFxyXG4gICAgICAgIHBvcHVwTmF2aWdhdG9yID0gbmV3IFBvcHVwTmF2aWdhdG9yKCksXHJcbiAgICAgICAgaWZyYW1lTmF2aWdhdG9yID0gbmV3IElGcmFtZU5hdmlnYXRvcigpLFxyXG4gICAgICAgIHVzZXJTdG9yZSA9IG5ldyBXZWJTdG9yYWdlU3RhdGVTdG9yZSh7IHN0b3JlOiBHbG9iYWwuc2Vzc2lvblN0b3JhZ2UgfSlcclxuICAgIH0gPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKGFyZ3VtZW50c1swXSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3BvcHVwX3JlZGlyZWN0X3VyaSA9IHBvcHVwX3JlZGlyZWN0X3VyaTtcclxuICAgICAgICB0aGlzLl9wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgPSBwb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBXaW5kb3dGZWF0dXJlcyA9IHBvcHVwV2luZG93RmVhdHVyZXM7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBXaW5kb3dUYXJnZXQgPSBwb3B1cFdpbmRvd1RhcmdldDtcclxuXHJcbiAgICAgICAgdGhpcy5fc2lsZW50X3JlZGlyZWN0X3VyaSA9IHNpbGVudF9yZWRpcmVjdF91cmk7XHJcbiAgICAgICAgdGhpcy5fc2lsZW50UmVxdWVzdFRpbWVvdXQgPSBzaWxlbnRSZXF1ZXN0VGltZW91dDtcclxuICAgICAgICB0aGlzLl9hdXRvbWF0aWNTaWxlbnRSZW5ldyA9ICEhYXV0b21hdGljU2lsZW50UmVuZXc7XHJcbiAgICAgICAgdGhpcy5faW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3ID0gaW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3O1xyXG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lID0gYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWU7XHJcblxyXG4gICAgICAgIHRoaXMuX21vbml0b3JTZXNzaW9uID0gbW9uaXRvclNlc3Npb247XHJcbiAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSW50ZXJ2YWwgPSBjaGVja1Nlc3Npb25JbnRlcnZhbDtcclxuICAgICAgICB0aGlzLl9zdG9wQ2hlY2tTZXNzaW9uT25FcnJvciA9IHN0b3BDaGVja1Nlc3Npb25PbkVycm9yO1xyXG4gICAgICAgIHRoaXMuX3Jldm9rZUFjY2Vzc1Rva2VuT25TaWdub3V0ID0gcmV2b2tlQWNjZXNzVG9rZW5PblNpZ25vdXQ7XHJcblxyXG4gICAgICAgIHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yID0gcmVkaXJlY3ROYXZpZ2F0b3I7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBOYXZpZ2F0b3IgPSBwb3B1cE5hdmlnYXRvcjtcclxuICAgICAgICB0aGlzLl9pZnJhbWVOYXZpZ2F0b3IgPSBpZnJhbWVOYXZpZ2F0b3I7XHJcblxyXG4gICAgICAgIHRoaXMuX3VzZXJTdG9yZSA9IHVzZXJTdG9yZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcG9wdXBfcmVkaXJlY3RfdXJpKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cF9yZWRpcmVjdF91cmk7XHJcbiAgICB9XHJcbiAgICBnZXQgcG9wdXBfcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XHJcbiAgICB9XHJcbiAgICBnZXQgcG9wdXBXaW5kb3dGZWF0dXJlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBXaW5kb3dGZWF0dXJlcztcclxuICAgIH1cclxuICAgIGdldCBwb3B1cFdpbmRvd1RhcmdldCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBXaW5kb3dUYXJnZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNpbGVudF9yZWRpcmVjdF91cmkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpbGVudF9yZWRpcmVjdF91cmk7XHJcbiAgICB9XHJcbiAgICAgZ2V0IHNpbGVudFJlcXVlc3RUaW1lb3V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWxlbnRSZXF1ZXN0VGltZW91dDtcclxuICAgIH1cclxuICAgIGdldCBhdXRvbWF0aWNTaWxlbnRSZW5ldygpIHtcclxuICAgICAgICByZXR1cm4gISEodGhpcy5zaWxlbnRfcmVkaXJlY3RfdXJpICYmIHRoaXMuX2F1dG9tYXRpY1NpbGVudFJlbmV3KTtcclxuICAgIH1cclxuICAgIGdldCBpbmNsdWRlSWRUb2tlbkluU2lsZW50UmVuZXcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luY2x1ZGVJZFRva2VuSW5TaWxlbnRSZW5ldztcclxuICAgIH1cclxuICAgIGdldCBhY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1vbml0b3JTZXNzaW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tb25pdG9yU2Vzc2lvbjtcclxuICAgIH1cclxuICAgIGdldCBjaGVja1Nlc3Npb25JbnRlcnZhbCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tTZXNzaW9uSW50ZXJ2YWw7XHJcbiAgICB9XHJcbiAgICBnZXQgc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3IoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3I7XHJcbiAgICB9XHJcbiAgICBnZXQgcmV2b2tlQWNjZXNzVG9rZW5PblNpZ25vdXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jldm9rZUFjY2Vzc1Rva2VuT25TaWdub3V0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCByZWRpcmVjdE5hdmlnYXRvcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVkaXJlY3ROYXZpZ2F0b3I7XHJcbiAgICB9XHJcbiAgICBnZXQgcG9wdXBOYXZpZ2F0b3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvcHVwTmF2aWdhdG9yO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlmcmFtZU5hdmlnYXRvcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWZyYW1lTmF2aWdhdG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB1c2VyU3RvcmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJTdG9yZTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvVXNlck1hbmFnZXJTZXR0aW5ncy5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuXHJcbmV4cG9ydCBjbGFzcyBSZWRpcmVjdE5hdmlnYXRvciB7XHJcblxyXG4gICAgcHJlcGFyZSgpIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIG5hdmlnYXRlKHBhcmFtcykge1xyXG4gICAgICAgIGlmICghcGFyYW1zIHx8ICFwYXJhbXMudXJsKSB7XHJcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlZGlyZWN0TmF2aWdhdG9yLm5hdmlnYXRlOiBObyB1cmwgcHJvdmlkZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyB1cmwgcHJvdmlkZWRcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uID0gcGFyYW1zLnVybDtcclxuXHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB1cmwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9SZWRpcmVjdE5hdmlnYXRvci5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgUG9wdXBXaW5kb3cgfSBmcm9tICcuL1BvcHVwV2luZG93JztcclxuXHJcbmV4cG9ydCBjbGFzcyBQb3B1cE5hdmlnYXRvciB7XHJcblxyXG4gICAgcHJlcGFyZShwYXJhbXMpIHtcclxuICAgICAgICBsZXQgcG9wdXAgPSBuZXcgUG9wdXBXaW5kb3cocGFyYW1zKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHBvcHVwKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxsYmFjayh1cmwsIGtlZXBPcGVuLCBkZWxpbWl0ZXIpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJQb3B1cE5hdmlnYXRvci5jYWxsYmFja1wiKTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgUG9wdXBXaW5kb3cubm90aWZ5T3BlbmVyKHVybCwga2VlcE9wZW4sIGRlbGltaXRlcik7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvUG9wdXBOYXZpZ2F0b3IuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCB7IFVybFV0aWxpdHkgfSBmcm9tICcuL1VybFV0aWxpdHknO1xyXG5cclxuY29uc3QgQ2hlY2tGb3JQb3B1cENsb3NlZEludGVydmFsID0gNTAwO1xyXG5jb25zdCBEZWZhdWx0UG9wdXBGZWF0dXJlcyA9ICdsb2NhdGlvbj1ubyx0b29sYmFyPW5vLHdpZHRoPTUwMCxoZWlnaHQ9NTAwLGxlZnQ9MTAwLHRvcD0xMDA7JztcclxuLy9jb25zdCBEZWZhdWx0UG9wdXBGZWF0dXJlcyA9ICdsb2NhdGlvbj1ubyx0b29sYmFyPW5vLHdpZHRoPTUwMCxoZWlnaHQ9NTAwLGxlZnQ9MTAwLHRvcD0xMDA7cmVzaXphYmxlPXllcyc7XHJcblxyXG5jb25zdCBEZWZhdWx0UG9wdXBUYXJnZXQgPSBcIl9ibGFua1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvcHVwV2luZG93IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcclxuICAgICAgICB0aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgdGhpcy5fcmVqZWN0ID0gcmVqZWN0O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgdGFyZ2V0ID0gcGFyYW1zLnBvcHVwV2luZG93VGFyZ2V0IHx8IERlZmF1bHRQb3B1cFRhcmdldDtcclxuICAgICAgICBsZXQgZmVhdHVyZXMgPSBwYXJhbXMucG9wdXBXaW5kb3dGZWF0dXJlcyB8fCBEZWZhdWx0UG9wdXBGZWF0dXJlcztcclxuXHJcbiAgICAgICAgdGhpcy5fcG9wdXAgPSB3aW5kb3cub3BlbignJywgdGFyZ2V0LCBmZWF0dXJlcyk7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcHVwKSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93LmN0b3I6IHBvcHVwIHN1Y2Nlc3NmdWxseSBjcmVhdGVkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9jaGVja0ZvclBvcHVwQ2xvc2VkVGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwodGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZC5iaW5kKHRoaXMpLCBDaGVja0ZvclBvcHVwQ2xvc2VkSW50ZXJ2YWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgcHJvbWlzZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcclxuICAgIH1cclxuXHJcbiAgICBuYXZpZ2F0ZShwYXJhbXMpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3BvcHVwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiUG9wdXBXaW5kb3cubmF2aWdhdGU6IEVycm9yIG9wZW5pbmcgcG9wdXAgd2luZG93XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghcGFyYW1zIHx8ICFwYXJhbXMudXJsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiUG9wdXBXaW5kb3cubmF2aWdhdGU6IG5vIHVybCBwcm92aWRlZFwiKTtcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IoXCJObyB1cmwgcHJvdmlkZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJQb3B1cFdpbmRvdy5uYXZpZ2F0ZTogU2V0dGluZyBVUkwgaW4gcG9wdXBcIik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9pZCA9IHBhcmFtcy5pZDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lkKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3dbXCJwb3B1cENhbGxiYWNrX1wiICsgcGFyYW1zLmlkXSA9IHRoaXMuX2NhbGxiYWNrLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLndpbmRvdy5sb2NhdGlvbiA9IHBhcmFtcy51cmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNlO1xyXG4gICAgfVxyXG5cclxuICAgIF9zdWNjZXNzKGRhdGEpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJQb3B1cFdpbmRvdy5jYWxsYmFjazogU3VjY2Vzc2Z1bCByZXNwb25zZSBmcm9tIHBvcHVwIHdpbmRvd1wiKTtcclxuXHJcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xyXG4gICAgICAgIHRoaXMuX3Jlc29sdmUoZGF0YSk7XHJcbiAgICB9XHJcbiAgICBfZXJyb3IobWVzc2FnZSkge1xyXG4gICAgICAgIExvZy5lcnJvcihcIlBvcHVwV2luZG93LmVycm9yOiBcIiwgbWVzc2FnZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xyXG4gICAgICAgIHRoaXMuX3JlamVjdChuZXcgRXJyb3IobWVzc2FnZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMuX2NsZWFudXAoZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIF9jbGVhbnVwKGtlZXBPcGVuKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiUG9wdXBXaW5kb3cuY2xlYW51cFwiKTtcclxuXHJcbiAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZFRpbWVyKTtcclxuICAgICAgICB0aGlzLl9jaGVja0ZvclBvcHVwQ2xvc2VkVGltZXIgPSBudWxsO1xyXG5cclxuICAgICAgICBkZWxldGUgd2luZG93W1wicG9wdXBDYWxsYmFja19cIiArIHRoaXMuX2lkXTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcHVwICYmICFrZWVwT3Blbikge1xyXG4gICAgICAgICAgICB0aGlzLl9wb3B1cC5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9wb3B1cCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgX2NoZWNrRm9yUG9wdXBDbG9zZWQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9wb3B1cCB8fCB0aGlzLl9wb3B1cC5jbG9zZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXJyb3IoXCJQb3B1cCB3aW5kb3cgY2xvc2VkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfY2FsbGJhY2sodXJsLCBrZWVwT3Blbikge1xyXG4gICAgICAgIHRoaXMuX2NsZWFudXAoa2VlcE9wZW4pO1xyXG5cclxuICAgICAgICBpZiAodXJsKSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93LmNhbGxiYWNrIHN1Y2Nlc3NcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3N1Y2Nlc3MoeyB1cmw6IHVybCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93LmNhbGxiYWNrOiBJbnZhbGlkIHJlc3BvbnNlIGZyb20gcG9wdXBcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiSW52YWxpZCByZXNwb25zZSBmcm9tIHBvcHVwXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbm90aWZ5T3BlbmVyKHVybCwga2VlcE9wZW4sIGRlbGltaXRlcikge1xyXG4gICAgICAgIGlmICh3aW5kb3cub3BlbmVyKSB7XHJcbiAgICAgICAgICAgIHVybCA9IHVybCB8fCB3aW5kb3cubG9jYXRpb24uaHJlZjtcclxuICAgICAgICAgICAgaWYgKHVybCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBVcmxVdGlsaXR5LnBhcnNlVXJsRnJhZ21lbnQodXJsLCBkZWxpbWl0ZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBcInBvcHVwQ2FsbGJhY2tfXCIgKyBkYXRhLnN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IHdpbmRvdy5vcGVuZXJbbmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93Lm5vdGlmeU9wZW5lcjogcGFzc2luZyB1cmwgbWVzc2FnZSB0byBvcGVuZXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHVybCwga2VlcE9wZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLndhcm4oXCJQb3B1cFdpbmRvdy5ub3RpZnlPcGVuZXI6IG5vIG1hdGNoaW5nIGNhbGxiYWNrIGZvdW5kIG9uIG9wZW5lclwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2cud2FybihcIlBvcHVwV2luZG93Lm5vdGlmeU9wZW5lcjogbm8gc3RhdGUgZm91bmQgaW4gcmVzcG9uc2UgdXJsXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBMb2cud2FybihcIlBvcHVwV2luZG93Lm5vdGlmeU9wZW5lcjogbm8gd2luZG93Lm9wZW5lci4gQ2FuJ3QgY29tcGxldGUgbm90aWZpY2F0aW9uLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1BvcHVwV2luZG93LmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5pbXBvcnQgeyBJRnJhbWVXaW5kb3cgfSBmcm9tICcuL0lGcmFtZVdpbmRvdyc7XHJcblxyXG5leHBvcnQgY2xhc3MgSUZyYW1lTmF2aWdhdG9yIHtcclxuXHJcbiAgICBwcmVwYXJlKHBhcmFtcykge1xyXG4gICAgICAgIGxldCBmcmFtZSA9IG5ldyBJRnJhbWVXaW5kb3cocGFyYW1zKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZyYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxsYmFjayh1cmwpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJJRnJhbWVOYXZpZ2F0b3IuY2FsbGJhY2tcIik7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIElGcmFtZVdpbmRvdy5ub3RpZnlQYXJlbnQodXJsKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9JRnJhbWVOYXZpZ2F0b3IuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcblxyXG5jb25zdCBEZWZhdWx0VGltZW91dCA9IDEwMDAwO1xyXG5cclxuZXhwb3J0IGNsYXNzIElGcmFtZVdpbmRvdyB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XHJcbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdCA9IHJlamVjdDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fYm91bmRNZXNzYWdlRXZlbnQgPSB0aGlzLl9tZXNzYWdlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50LCBmYWxzZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2ZyYW1lID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XHJcblxyXG4gICAgICAgIC8vIHNob3RndW4gYXBwcm9hY2hcclxuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcclxuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgdGhpcy5fZnJhbWUuc3R5bGUud2lkdGggPSAwO1xyXG4gICAgICAgIHRoaXMuX2ZyYW1lLnN0eWxlLmhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2ZyYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBuYXZpZ2F0ZShwYXJhbXMpIHtcclxuICAgICAgICBpZiAoIXBhcmFtcyB8fCAhcGFyYW1zLnVybCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lcnJvcihcIk5vIHVybCBwcm92aWRlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB0aW1lb3V0ID0gcGFyYW1zLnNpbGVudFJlcXVlc3RUaW1lb3V0IHx8IERlZmF1bHRUaW1lb3V0O1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJJRnJhbWVXaW5kb3cubmF2aWdhdGU6IFVzaW5nIHRpbWVvdXQgb2Y6XCIsIHRpbWVvdXQpO1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuX3RpbWVvdXQuYmluZCh0aGlzKSwgdGltZW91dCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lLnNyYyA9IHBhcmFtcy51cmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwcm9taXNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xyXG4gICAgfVxyXG5cclxuICAgIF9zdWNjZXNzKGRhdGEpIHtcclxuICAgICAgICB0aGlzLl9jbGVhbnVwKCk7XHJcblxyXG4gICAgICAgIExvZy5kZWJ1ZyhcIklGcmFtZVdpbmRvdzogU3VjY2Vzc2Z1bCByZXNwb25zZSBmcm9tIGZyYW1lIHdpbmRvd1wiKTtcclxuICAgICAgICB0aGlzLl9yZXNvbHZlKGRhdGEpO1xyXG4gICAgfVxyXG4gICAgX2Vycm9yKG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLl9jbGVhbnVwKCk7XHJcblxyXG4gICAgICAgIExvZy5lcnJvcihtZXNzYWdlKTtcclxuICAgICAgICB0aGlzLl9yZWplY3QobmV3IEVycm9yKG1lc3NhZ2UpKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9jbGVhbnVwKCk7XHJcbiAgICB9XHJcblxyXG4gICAgX2NsZWFudXAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZyYW1lKSB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIklGcmFtZVdpbmRvdzogY2xlYW51cFwiKTtcclxuXHJcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTtcclxuICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5fZnJhbWUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX3RpbWVvdXQoKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiSUZyYW1lV2luZG93LnRpbWVvdXRcIik7XHJcbiAgICAgICAgdGhpcy5fZXJyb3IoXCJGcmFtZSB3aW5kb3cgdGltZWQgb3V0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIF9tZXNzYWdlKGUpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJJRnJhbWVXaW5kb3cubWVzc2FnZVwiKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVyICYmXHJcbiAgICAgICAgICAgIGUub3JpZ2luID09PSB0aGlzLl9vcmlnaW4gJiZcclxuICAgICAgICAgICAgZS5zb3VyY2UgPT09IHRoaXMuX2ZyYW1lLmNvbnRlbnRXaW5kb3dcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgbGV0IHVybCA9IGUuZGF0YTtcclxuICAgICAgICAgICAgaWYgKHVybCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3VjY2Vzcyh7IHVybDogdXJsIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IoXCJJbnZhbGlkIHJlc3BvbnNlIGZyb20gZnJhbWVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF9vcmlnaW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbm90aWZ5UGFyZW50KHVybCkge1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIklGcmFtZVdpbmRvdy5ub3RpZnlQYXJlbnRcIik7XHJcblxyXG4gICAgICAgIGlmICh3aW5kb3cucGFyZW50ICYmIHdpbmRvdyAhPT0gd2luZG93LnBhcmVudCkge1xyXG4gICAgICAgICAgICB1cmwgPSB1cmwgfHwgd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcbiAgICAgICAgICAgIGlmICh1cmwpIHtcclxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIklGcmFtZVdpbmRvdy5ub3RpZnlQYXJlbnQ6IHBvc3RpbmcgdXJsIG1lc3NhZ2UgdG8gcGFyZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZSh1cmwsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0lGcmFtZVdpbmRvdy5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nJztcclxuaW1wb3J0IHsgQWNjZXNzVG9rZW5FdmVudHMgfSBmcm9tICcuL0FjY2Vzc1Rva2VuRXZlbnRzJztcclxuaW1wb3J0IHsgRXZlbnQgfSBmcm9tICcuL0V2ZW50JztcclxuXHJcbmV4cG9ydCBjbGFzcyBVc2VyTWFuYWdlckV2ZW50cyBleHRlbmRzIEFjY2Vzc1Rva2VuRXZlbnRzIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncykge1xyXG4gICAgICAgIHN1cGVyKHNldHRpbmdzKTtcclxuICAgICAgICB0aGlzLl91c2VyTG9hZGVkID0gbmV3IEV2ZW50KFwiVXNlciBsb2FkZWRcIik7XHJcbiAgICAgICAgdGhpcy5fdXNlclVubG9hZGVkID0gbmV3IEV2ZW50KFwiVXNlciB1bmxvYWRlZFwiKTtcclxuICAgICAgICB0aGlzLl9zaWxlbnRSZW5ld0Vycm9yID0gbmV3IEV2ZW50KFwiU2lsZW50IHJlbmV3IGVycm9yXCIpO1xyXG4gICAgICAgIHRoaXMuX3VzZXJTaWduZWRPdXQgPSBuZXcgRXZlbnQoXCJVc2VyIHNpZ25lZCBvdXRcIik7XHJcbiAgICAgICAgdGhpcy5fdXNlclNlc3Npb25DaGFuZ2VkID0gbmV3IEV2ZW50KFwiVXNlciBzZXNzaW9uIGNoYW5nZWRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZCh1c2VyLCByYWlzZUV2ZW50PXRydWUpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlckV2ZW50cy5sb2FkXCIpO1xyXG4gICAgICAgIHN1cGVyLmxvYWQodXNlcik7XHJcbiAgICAgICAgaWYgKHJhaXNlRXZlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5fdXNlckxvYWRlZC5yYWlzZSh1c2VyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB1bmxvYWQoKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXJFdmVudHMudW5sb2FkXCIpO1xyXG4gICAgICAgIHN1cGVyLnVubG9hZCgpO1xyXG4gICAgICAgIHRoaXMuX3VzZXJVbmxvYWRlZC5yYWlzZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFVzZXJMb2FkZWQoY2IpIHtcclxuICAgICAgICB0aGlzLl91c2VyTG9hZGVkLmFkZEhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlVXNlckxvYWRlZChjYikge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2FkZWQucmVtb3ZlSGFuZGxlcihjYik7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkVXNlclVubG9hZGVkKGNiKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlclVubG9hZGVkLmFkZEhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlVXNlclVubG9hZGVkKGNiKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlclVubG9hZGVkLnJlbW92ZUhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFNpbGVudFJlbmV3RXJyb3IoY2IpIHtcclxuICAgICAgICB0aGlzLl9zaWxlbnRSZW5ld0Vycm9yLmFkZEhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlU2lsZW50UmVuZXdFcnJvcihjYikge1xyXG4gICAgICAgIHRoaXMuX3NpbGVudFJlbmV3RXJyb3IucmVtb3ZlSGFuZGxlcihjYik7XHJcbiAgICB9XHJcbiAgICBfcmFpc2VTaWxlbnRSZW5ld0Vycm9yKGUpIHtcclxuICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlckV2ZW50cy5fcmFpc2VTaWxlbnRSZW5ld0Vycm9yXCIsIGUubWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdFcnJvci5yYWlzZShlKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRVc2VyU2lnbmVkT3V0KGNiKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlclNpZ25lZE91dC5hZGRIYW5kbGVyKGNiKTtcclxuICAgIH1cclxuICAgIHJlbW92ZVVzZXJTaWduZWRPdXQoY2IpIHtcclxuICAgICAgICB0aGlzLl91c2VyU2lnbmVkT3V0LnJlbW92ZUhhbmRsZXIoY2IpO1xyXG4gICAgfVxyXG4gICAgX3JhaXNlVXNlclNpZ25lZE91dChlKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXJFdmVudHMuX3JhaXNlVXNlclNpZ25lZE91dFwiKTtcclxuICAgICAgICB0aGlzLl91c2VyU2lnbmVkT3V0LnJhaXNlKGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFVzZXJTZXNzaW9uQ2hhbmdlZChjYikge1xyXG4gICAgICAgIHRoaXMuX3VzZXJTZXNzaW9uQ2hhbmdlZC5hZGRIYW5kbGVyKGNiKTtcclxuICAgIH1cclxuICAgIHJlbW92ZVVzZXJTZXNzaW9uQ2hhbmdlZChjYikge1xyXG4gICAgICAgIHRoaXMuX3VzZXJTZXNzaW9uQ2hhbmdlZC5yZW1vdmVIYW5kbGVyKGNiKTtcclxuICAgIH1cclxuICAgIF9yYWlzZVVzZXJTZXNzaW9uQ2hhbmdlZChlKSB7XHJcbiAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXJFdmVudHMuX3JhaXNlVXNlclNlc3Npb25DaGFuZ2VkXCIpO1xyXG4gICAgICAgIHRoaXMuX3VzZXJTZXNzaW9uQ2hhbmdlZC5yYWlzZShlKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvVXNlck1hbmFnZXJFdmVudHMuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZyc7XHJcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gJy4vR2xvYmFsJztcclxuaW1wb3J0IHsgRXZlbnQgfSBmcm9tICcuL0V2ZW50JztcclxuXHJcbmNvbnN0IFRpbWVyRHVyYXRpb24gPSA1OyAvLyBzZWNvbmRzXHJcblxyXG5leHBvcnQgY2xhc3MgVGltZXIgZXh0ZW5kcyBFdmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IobmFtZSwgdGltZXIgPSBHbG9iYWwudGltZXIsIG5vd0Z1bmMgPSB1bmRlZmluZWQpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuICAgICAgICB0aGlzLl90aW1lciA9IHRpbWVyO1xyXG5cclxuICAgICAgICBpZiAobm93RnVuYykge1xyXG4gICAgICAgICAgICB0aGlzLl9ub3dGdW5jID0gbm93RnVuYztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX25vd0Z1bmMgPSAoKSA9PiBEYXRlLm5vdygpIC8gMTAwMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG5vdygpIHtcclxuICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5fbm93RnVuYygpKTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0KGR1cmF0aW9uKSB7XHJcbiAgICAgICAgaWYgKGR1cmF0aW9uIDw9IDApIHtcclxuICAgICAgICAgICAgZHVyYXRpb24gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkdXJhdGlvbiA9IHBhcnNlSW50KGR1cmF0aW9uKTtcclxuXHJcbiAgICAgICAgdmFyIGV4cGlyYXRpb24gPSB0aGlzLm5vdyArIGR1cmF0aW9uO1xyXG4gICAgICAgIGlmICh0aGlzLmV4cGlyYXRpb24gPT09IGV4cGlyYXRpb24gJiYgdGhpcy5fdGltZXJIYW5kbGUpIHtcclxuICAgICAgICAgICAgLy8gbm8gbmVlZCB0byByZWluaXRpYWxpemUgdG8gc2FtZSBleHBpcmF0aW9uLCBzbyBiYWlsIG91dFxyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJUaW1lci5pbml0IHRpbWVyIFwiICsgdGhpcy5fbmFtZSArIFwiIHNraXBwaW5nIGluaXRpYWxpemF0aW9uIHNpbmNlIGFscmVhZHkgaW5pdGlhbGl6ZWQgZm9yIGV4cGlyYXRpb246XCIsIHRoaXMuZXhwaXJhdGlvbik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XHJcblxyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlRpbWVyLmluaXQgdGltZXIgXCIgKyB0aGlzLl9uYW1lICsgXCIgZm9yIGR1cmF0aW9uOlwiLCBkdXJhdGlvbik7XHJcbiAgICAgICAgdGhpcy5fZXhwaXJhdGlvbiA9IGV4cGlyYXRpb247XHJcblxyXG4gICAgICAgIC8vIHdlJ3JlIHVzaW5nIGEgZmFpcmx5IHNob3J0IHRpbWVyIGFuZCB0aGVuIGNoZWNraW5nIHRoZSBleHBpcmF0aW9uIGluIHRoZVxyXG4gICAgICAgIC8vIGNhbGxiYWNrIHRvIGhhbmRsZSBzY2VuYXJpb3Mgd2hlcmUgdGhlIGJyb3dzZXIgZGV2aWNlIHNsZWVwcywgYW5kIHRoZW5cclxuICAgICAgICAvLyB0aGUgdGltZXJzIGVuZCB1cCBnZXR0aW5nIGRlbGF5ZWQuXHJcbiAgICAgICAgdmFyIHRpbWVyRHVyYXRpb24gPSBUaW1lckR1cmF0aW9uO1xyXG4gICAgICAgIGlmIChkdXJhdGlvbiA8IHRpbWVyRHVyYXRpb24pIHtcclxuICAgICAgICAgICAgdGltZXJEdXJhdGlvbiA9IGR1cmF0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl90aW1lckhhbmRsZSA9IHRoaXMuX3RpbWVyLnNldEludGVydmFsKHRoaXMuX2NhbGxiYWNrLmJpbmQodGhpcyksIHRpbWVyRHVyYXRpb24gKiAxMDAwKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IGV4cGlyYXRpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4cGlyYXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgY2FuY2VsKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl90aW1lckhhbmRsZSkge1xyXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJUaW1lci5jYW5jZWw6IFwiLCB0aGlzLl9uYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5fdGltZXIuY2xlYXJJbnRlcnZhbCh0aGlzLl90aW1lckhhbmRsZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVySGFuZGxlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX2NhbGxiYWNrKCkge1xyXG4gICAgICAgIHZhciBkaWZmID0gdGhpcy5fZXhwaXJhdGlvbiAtIHRoaXMubm93O1xyXG4gICAgICAgIExvZy5kZWJ1ZyhcIlRpbWVyLmNhbGxiYWNrOyBcIiArIHRoaXMuX25hbWUgKyBcIiB0aW1lciBleHBpcmVzIGluOlwiLCBkaWZmKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2V4cGlyYXRpb24gPD0gdGhpcy5ub3cpIHtcclxuICAgICAgICAgICAgdGhpcy5jYW5jZWwoKTtcclxuICAgICAgICAgICAgc3VwZXIucmFpc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1RpbWVyLmpzIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5cclxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNpbGVudFJlbmV3U2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IodXNlck1hbmFnZXIpIHtcclxuICAgICAgICB0aGlzLl91c2VyTWFuYWdlciA9IHVzZXJNYW5hZ2VyO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2sgPSB0aGlzLl90b2tlbkV4cGlyaW5nLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5hZGRBY2Nlc3NUb2tlbkV4cGlyaW5nKHRoaXMuX2NhbGxiYWNrKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCB0cmlnZ2VyIGxvYWRpbmcgb2YgdGhlIHVzZXIgc28gdGhlIGV4cGlyaW5nIGV2ZW50cyBjYW4gYmUgaW5pdGlhbGl6ZWRcclxuICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZ2V0VXNlcigpLnRoZW4odXNlcj0+e1xyXG4gICAgICAgICAgICAgICAgLy8gZGVsaWJlcmF0ZSBub3BcclxuICAgICAgICAgICAgfSkuY2F0Y2goZXJyPT57XHJcbiAgICAgICAgICAgICAgICAvLyBjYXRjaCB0byBzdXBwcmVzcyBlcnJvcnMgc2luY2Ugd2UncmUgaW4gYSBjdG9yXHJcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJTaWxlbnRSZW5ld1NlcnZpY2Uuc3RhcnQ6IEVycm9yIGZyb20gZ2V0VXNlcjpcIiwgZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RvcCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLnJlbW92ZUFjY2Vzc1Rva2VuRXhwaXJpbmcodGhpcy5fY2FsbGJhY2spO1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2s7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF90b2tlbkV4cGlyaW5nKCkge1xyXG4gICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLnNpZ25pblNpbGVudCgpLnRoZW4odXNlciA9PiB7XHJcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlNpbGVudFJlbmV3U2VydmljZS5fdG9rZW5FeHBpcmluZzogU2lsZW50IHRva2VuIHJlbmV3YWwgc3VjY2Vzc2Z1bFwiKTtcclxuICAgICAgICB9LCBlcnIgPT4ge1xyXG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJTaWxlbnRSZW5ld1NlcnZpY2UuX3Rva2VuRXhwaXJpbmc6IEVycm9yIGZyb20gc2lnbmluU2lsZW50OlwiLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5fcmFpc2VTaWxlbnRSZW5ld0Vycm9yKGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1NpbGVudFJlbmV3U2VydmljZS5qcyIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IENvcmRvdmFQb3B1cFdpbmRvdyB9IGZyb20gJy4vQ29yZG92YVBvcHVwV2luZG93JztcclxuXHJcbmV4cG9ydCBjbGFzcyBDb3Jkb3ZhUG9wdXBOYXZpZ2F0b3Ige1xyXG5cclxuICAgIHByZXBhcmUocGFyYW1zKSB7XHJcbiAgICAgICAgbGV0IHBvcHVwID0gbmV3IENvcmRvdmFQb3B1cFdpbmRvdyhwYXJhbXMpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocG9wdXApO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Db3Jkb3ZhUG9wdXBOYXZpZ2F0b3IuanMiLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcblxyXG5pbXBvcnQgeyBDb3Jkb3ZhUG9wdXBXaW5kb3cgfSBmcm9tICcuL0NvcmRvdmFQb3B1cFdpbmRvdyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29yZG92YUlGcmFtZU5hdmlnYXRvciB7XHJcblxyXG4gICAgcHJlcGFyZShwYXJhbXMpIHtcclxuICAgICAgICBwYXJhbXMucG9wdXBXaW5kb3dGZWF0dXJlcyA9ICdoaWRkZW49eWVzJztcclxuICAgICAgICBsZXQgcG9wdXAgPSBuZXcgQ29yZG92YVBvcHVwV2luZG93KHBhcmFtcyk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwb3B1cCk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0NvcmRvdmFJRnJhbWVOYXZpZ2F0b3IuanMiXSwic291cmNlUm9vdCI6IiJ9